
OnePos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00802000  00001f60  00001ff4  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000287  0080207c  0080207c  00002070  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003f0  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000774f  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000165b  00000000  00000000  00009bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000564a  00000000  00000000  0000b23a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a28  00000000  00000000  00010884  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002edb1  00000000  00000000  000112ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002bda  00000000  00000000  0004005d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000398  00000000  00000000  00042c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a0fb  00000000  00000000  00042fcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
      2e:	00 00       	nop
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	98 c7       	rjmp	.+3888   	; 0xf66 <__vector_13>
      36:	00 00       	nop
      38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
      3e:	00 00       	nop
      40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
      46:	00 00       	nop
      48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
      52:	00 00       	nop
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
      56:	00 00       	nop
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	79 c7       	rjmp	.+3826   	; 0xfac <__vector_46>
      ba:	00 00       	nop
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
     132:	00 00       	nop
     134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
     136:	00 00       	nop
     138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
     13e:	00 00       	nop
     140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
     142:	00 00       	nop
     144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
     146:	00 00       	nop
     148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
     14e:	00 00       	nop
     150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
     152:	00 00       	nop
     154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
     156:	00 00       	nop
     158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__vector_125>
     1f8:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__vector_126>
     1fc:	f6 08       	sbc	r15, r6
     1fe:	e4 08       	sbc	r14, r4
     200:	e7 08       	sbc	r14, r7
     202:	ea 08       	sbc	r14, r10
     204:	ed 08       	sbc	r14, r13
     206:	f0 08       	sbc	r15, r0
     208:	f3 08       	sbc	r15, r3

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e2       	ldi	r29, 0x2F	; 47
     214:	de bf       	out	0x3e, r29	; 62

00000216 <__do_copy_data>:
     216:	10 e2       	ldi	r17, 0x20	; 32
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e2       	ldi	r27, 0x20	; 32
     21c:	e0 e6       	ldi	r30, 0x60	; 96
     21e:	ff e1       	ldi	r31, 0x1F	; 31
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	ac 37       	cpi	r26, 0x7C	; 124
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	23 e2       	ldi	r18, 0x23	; 35
     22e:	ac e7       	ldi	r26, 0x7C	; 124
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	a3 30       	cpi	r26, 0x03	; 3
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <main>
     240:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <udi_cdc_comm_enable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
     246:	10 92 92 21 	sts	0x2192, r1
     24a:	10 92 9e 21 	sts	0x219E, r1
     24e:	10 92 9f 21 	sts	0x219F, r1
     252:	81 ea       	ldi	r24, 0xA1	; 161
     254:	80 93 94 21 	sts	0x2194, r24
     258:	80 e2       	ldi	r24, 0x20	; 32
     25a:	80 93 95 21 	sts	0x2195, r24
     25e:	10 92 96 21 	sts	0x2196, r1
     262:	10 92 97 21 	sts	0x2197, r1
     266:	10 92 98 21 	sts	0x2198, r1
     26a:	10 92 99 21 	sts	0x2199, r1
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	80 93 9a 21 	sts	0x219A, r24
     276:	90 93 9b 21 	sts	0x219B, r25
     27a:	10 92 9c 21 	sts	0x219C, r1
     27e:	10 92 9d 21 	sts	0x219D, r1
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	92 ec       	ldi	r25, 0xC2	; 194
     286:	a1 e0       	ldi	r26, 0x01	; 1
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	80 93 a0 21 	sts	0x21A0, r24
     28e:	90 93 a1 21 	sts	0x21A1, r25
     292:	a0 93 a2 21 	sts	0x21A2, r26
     296:	b0 93 a3 21 	sts	0x21A3, r27
     29a:	10 92 a4 21 	sts	0x21A4, r1
     29e:	10 92 a5 21 	sts	0x21A5, r1
     2a2:	88 e0       	ldi	r24, 0x08	; 8
     2a4:	80 93 a6 21 	sts	0x21A6, r24
     2a8:	80 91 92 21 	lds	r24, 0x2192
     2ac:	8f 5f       	subi	r24, 0xFF	; 255
     2ae:	80 93 92 21 	sts	0x2192, r24
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	08 95       	ret

000002b6 <udi_cdc_comm_disable>:
     2b6:	80 91 92 21 	lds	r24, 0x2192
     2ba:	81 50       	subi	r24, 0x01	; 1
     2bc:	80 93 92 21 	sts	0x2192, r24
     2c0:	08 95       	ret

000002c2 <udi_cdc_data_disable>:
     2c2:	80 91 91 21 	lds	r24, 0x2191
     2c6:	81 50       	subi	r24, 0x01	; 1
     2c8:	80 93 91 21 	sts	0x2191, r24
     2cc:	80 91 91 21 	lds	r24, 0x2191
     2d0:	10 92 90 21 	sts	0x2190, r1
     2d4:	08 95       	ret

000002d6 <udi_cdc_data_setup>:
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	08 95       	ret

000002da <udi_cdc_getsetting>:
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	08 95       	ret

000002de <udi_cdc_comm_setup>:
     2de:	80 91 ed 22 	lds	r24, 0x22ED
     2e2:	88 23       	and	r24, r24
     2e4:	dc f4       	brge	.+54     	; 0x31c <udi_cdc_comm_setup+0x3e>
     2e6:	80 76       	andi	r24, 0x60	; 96
     2e8:	80 32       	cpi	r24, 0x20	; 32
     2ea:	e9 f5       	brne	.+122    	; 0x366 <udi_cdc_comm_setup+0x88>
     2ec:	80 91 ee 22 	lds	r24, 0x22EE
     2f0:	81 32       	cpi	r24, 0x21	; 33
     2f2:	d9 f5       	brne	.+118    	; 0x36a <udi_cdc_comm_setup+0x8c>
     2f4:	80 91 f3 22 	lds	r24, 0x22F3
     2f8:	90 91 f4 22 	lds	r25, 0x22F4
     2fc:	07 97       	sbiw	r24, 0x07	; 7
     2fe:	b9 f5       	brne	.+110    	; 0x36e <udi_cdc_comm_setup+0x90>
     300:	80 ea       	ldi	r24, 0xA0	; 160
     302:	91 e2       	ldi	r25, 0x21	; 33
     304:	80 93 f5 22 	sts	0x22F5, r24
     308:	90 93 f6 22 	sts	0x22F6, r25
     30c:	87 e0       	ldi	r24, 0x07	; 7
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	80 93 f7 22 	sts	0x22F7, r24
     314:	90 93 f8 22 	sts	0x22F8, r25
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	08 95       	ret
     31c:	80 76       	andi	r24, 0x60	; 96
     31e:	80 32       	cpi	r24, 0x20	; 32
     320:	41 f5       	brne	.+80     	; 0x372 <udi_cdc_comm_setup+0x94>
     322:	80 91 ee 22 	lds	r24, 0x22EE
     326:	80 32       	cpi	r24, 0x20	; 32
     328:	21 f0       	breq	.+8      	; 0x332 <udi_cdc_comm_setup+0x54>
     32a:	82 32       	cpi	r24, 0x22	; 34
     32c:	21 f5       	brne	.+72     	; 0x376 <udi_cdc_comm_setup+0x98>
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	08 95       	ret
     332:	80 91 f3 22 	lds	r24, 0x22F3
     336:	90 91 f4 22 	lds	r25, 0x22F4
     33a:	07 97       	sbiw	r24, 0x07	; 7
     33c:	f1 f4       	brne	.+60     	; 0x37a <udi_cdc_comm_setup+0x9c>
     33e:	8f eb       	ldi	r24, 0xBF	; 191
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	80 93 f9 22 	sts	0x22F9, r24
     346:	90 93 fa 22 	sts	0x22FA, r25
     34a:	80 ea       	ldi	r24, 0xA0	; 160
     34c:	91 e2       	ldi	r25, 0x21	; 33
     34e:	80 93 f5 22 	sts	0x22F5, r24
     352:	90 93 f6 22 	sts	0x22F6, r25
     356:	87 e0       	ldi	r24, 0x07	; 7
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	80 93 f7 22 	sts	0x22F7, r24
     35e:	90 93 f8 22 	sts	0x22F8, r25
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	08 95       	ret
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	08 95       	ret
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	08 95       	ret
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	08 95       	ret
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	08 95       	ret
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	08 95       	ret
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	08 95       	ret

0000037e <udi_cdc_line_coding_received>:
     37e:	08 95       	ret

00000380 <udi_cdc_tx_send>:
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	80 91 7f 20 	lds	r24, 0x207F
     38e:	81 11       	cpse	r24, r1
     390:	9c c0       	rjmp	.+312    	; 0x4ca <udi_cdc_tx_send+0x14a>
     392:	0e 94 91 0a 	call	0x1522	; 0x1522 <udd_is_high_speed>
     396:	88 23       	and	r24, r24
     398:	51 f0       	breq	.+20     	; 0x3ae <udi_cdc_tx_send+0x2e>
     39a:	c0 91 80 20 	lds	r28, 0x2080
     39e:	d0 91 81 20 	lds	r29, 0x2081
     3a2:	0e 94 9e 0a 	call	0x153c	; 0x153c <udd_get_micro_frame_number>
     3a6:	c8 17       	cp	r28, r24
     3a8:	d9 07       	cpc	r29, r25
     3aa:	59 f4       	brne	.+22     	; 0x3c2 <udi_cdc_tx_send+0x42>
     3ac:	8e c0       	rjmp	.+284    	; 0x4ca <udi_cdc_tx_send+0x14a>
     3ae:	c0 91 80 20 	lds	r28, 0x2080
     3b2:	d0 91 81 20 	lds	r29, 0x2081
     3b6:	0e 94 99 0a 	call	0x1532	; 0x1532 <udd_get_frame_number>
     3ba:	c8 17       	cp	r28, r24
     3bc:	d9 07       	cpc	r29, r25
     3be:	09 f4       	brne	.+2      	; 0x3c2 <udi_cdc_tx_send+0x42>
     3c0:	84 c0       	rjmp	.+264    	; 0x4ca <udi_cdc_tx_send+0x14a>
     3c2:	df b7       	in	r29, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	c0 91 82 20 	lds	r28, 0x2082
     3ca:	ec 2f       	mov	r30, r28
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	ed 57       	subi	r30, 0x7D	; 125
     3d4:	ff 4d       	sbci	r31, 0xDF	; 223
     3d6:	80 81       	ld	r24, Z
     3d8:	91 81       	ldd	r25, Z+1	; 0x01
     3da:	89 2b       	or	r24, r25
     3dc:	09 f5       	brne	.+66     	; 0x420 <udi_cdc_tx_send+0xa0>
     3de:	80 91 7c 20 	lds	r24, 0x207C
     3e2:	90 91 7d 20 	lds	r25, 0x207D
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	80 93 7c 20 	sts	0x207C, r24
     3ec:	90 93 7d 20 	sts	0x207D, r25
     3f0:	0e 94 91 0a 	call	0x1522	; 0x1522 <udd_is_high_speed>
     3f4:	81 11       	cpse	r24, r1
     3f6:	07 c0       	rjmp	.+14     	; 0x406 <udi_cdc_tx_send+0x86>
     3f8:	80 91 7c 20 	lds	r24, 0x207C
     3fc:	90 91 7d 20 	lds	r25, 0x207D
     400:	84 36       	cpi	r24, 0x64	; 100
     402:	91 05       	cpc	r25, r1
     404:	58 f0       	brcs	.+22     	; 0x41c <udi_cdc_tx_send+0x9c>
     406:	0e 94 91 0a 	call	0x1522	; 0x1522 <udd_is_high_speed>
     40a:	88 23       	and	r24, r24
     40c:	49 f0       	breq	.+18     	; 0x420 <udi_cdc_tx_send+0xa0>
     40e:	80 91 7c 20 	lds	r24, 0x207C
     412:	90 91 7d 20 	lds	r25, 0x207D
     416:	80 32       	cpi	r24, 0x20	; 32
     418:	93 40       	sbci	r25, 0x03	; 3
     41a:	10 f4       	brcc	.+4      	; 0x420 <udi_cdc_tx_send+0xa0>
     41c:	df bf       	out	0x3f, r29	; 63
     41e:	55 c0       	rjmp	.+170    	; 0x4ca <udi_cdc_tx_send+0x14a>
     420:	10 92 7c 20 	sts	0x207C, r1
     424:	10 92 7d 20 	sts	0x207D, r1
     428:	80 91 7e 20 	lds	r24, 0x207E
     42c:	81 11       	cpse	r24, r1
     42e:	06 c0       	rjmp	.+12     	; 0x43c <udi_cdc_tx_send+0xbc>
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	c1 11       	cpse	r28, r1
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	80 93 82 20 	sts	0x2082, r24
     43a:	04 c0       	rjmp	.+8      	; 0x444 <udi_cdc_tx_send+0xc4>
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	c1 11       	cpse	r28, r1
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	c8 2f       	mov	r28, r24
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 7f 20 	sts	0x207F, r24
     44a:	df bf       	out	0x3f, r29	; 63
     44c:	d0 e0       	ldi	r29, 0x00	; 0
     44e:	fe 01       	movw	r30, r28
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	ed 57       	subi	r30, 0x7D	; 125
     456:	ff 4d       	sbci	r31, 0xDF	; 223
     458:	ff 24       	eor	r15, r15
     45a:	f3 94       	inc	r15
     45c:	80 81       	ld	r24, Z
     45e:	91 81       	ldd	r25, Z+1	; 0x01
     460:	80 34       	cpi	r24, 0x40	; 64
     462:	91 05       	cpc	r25, r1
     464:	09 f4       	brne	.+2      	; 0x468 <udi_cdc_tx_send+0xe8>
     466:	f1 2c       	mov	r15, r1
     468:	ff 20       	and	r15, r15
     46a:	91 f0       	breq	.+36     	; 0x490 <udi_cdc_tx_send+0x110>
     46c:	0e 94 91 0a 	call	0x1522	; 0x1522 <udd_is_high_speed>
     470:	88 23       	and	r24, r24
     472:	39 f0       	breq	.+14     	; 0x482 <udi_cdc_tx_send+0x102>
     474:	0e 94 9e 0a 	call	0x153c	; 0x153c <udd_get_micro_frame_number>
     478:	80 93 80 20 	sts	0x2080, r24
     47c:	90 93 81 20 	sts	0x2081, r25
     480:	0b c0       	rjmp	.+22     	; 0x498 <udi_cdc_tx_send+0x118>
     482:	0e 94 99 0a 	call	0x1532	; 0x1532 <udd_get_frame_number>
     486:	80 93 80 20 	sts	0x2080, r24
     48a:	90 93 81 20 	sts	0x2081, r25
     48e:	04 c0       	rjmp	.+8      	; 0x498 <udi_cdc_tx_send+0x118>
     490:	10 92 80 20 	sts	0x2080, r1
     494:	10 92 81 20 	sts	0x2081, r1
     498:	fe 01       	movw	r30, r28
     49a:	ee 0f       	add	r30, r30
     49c:	ff 1f       	adc	r31, r31
     49e:	ed 57       	subi	r30, 0x7D	; 125
     4a0:	ff 4d       	sbci	r31, 0xDF	; 223
     4a2:	20 81       	ld	r18, Z
     4a4:	31 81       	ldd	r19, Z+1	; 0x01
     4a6:	ae 01       	movw	r20, r28
     4a8:	00 24       	eor	r0, r0
     4aa:	56 95       	lsr	r21
     4ac:	47 95       	ror	r20
     4ae:	07 94       	ror	r0
     4b0:	56 95       	lsr	r21
     4b2:	47 95       	ror	r20
     4b4:	07 94       	ror	r0
     4b6:	54 2f       	mov	r21, r20
     4b8:	40 2d       	mov	r20, r0
     4ba:	48 57       	subi	r20, 0x78	; 120
     4bc:	5f 4d       	sbci	r21, 0xDF	; 223
     4be:	0b e6       	ldi	r16, 0x6B	; 107
     4c0:	12 e0       	ldi	r17, 0x02	; 2
     4c2:	6f 2d       	mov	r22, r15
     4c4:	81 e8       	ldi	r24, 0x81	; 129
     4c6:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <udd_ep_run>
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	08 95       	ret

000004d6 <udi_cdc_data_sent>:
     4d6:	81 11       	cpse	r24, r1
     4d8:	15 c0       	rjmp	.+42     	; 0x504 <udi_cdc_data_sent+0x2e>
     4da:	20 91 82 20 	lds	r18, 0x2082
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	22 23       	and	r18, r18
     4e4:	11 f0       	breq	.+4      	; 0x4ea <udi_cdc_data_sent+0x14>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	fc 01       	movw	r30, r24
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	ed 57       	subi	r30, 0x7D	; 125
     4f2:	ff 4d       	sbci	r31, 0xDF	; 223
     4f4:	10 82       	st	Z, r1
     4f6:	11 82       	std	Z+1, r1	; 0x01
     4f8:	10 92 7e 20 	sts	0x207E, r1
     4fc:	10 92 7f 20 	sts	0x207F, r1
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	3e cf       	rjmp	.-388    	; 0x380 <udi_cdc_tx_send>
     504:	08 95       	ret

00000506 <udi_cdc_data_sof_notify>:
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	3b cf       	rjmp	.-394    	; 0x380 <udi_cdc_tx_send>
     50a:	08 95       	ret

0000050c <udi_cdc_multi_get_nb_received_data>:
     50c:	4f b7       	in	r20, 0x3f	; 63
     50e:	f8 94       	cli
     510:	20 91 09 21 	lds	r18, 0x2109
     514:	30 91 0a 21 	lds	r19, 0x210A
     518:	e0 91 0b 21 	lds	r30, 0x210B
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	ee 0f       	add	r30, r30
     520:	ff 1f       	adc	r31, r31
     522:	e4 5f       	subi	r30, 0xF4	; 244
     524:	fe 4d       	sbci	r31, 0xDE	; 222
     526:	80 81       	ld	r24, Z
     528:	91 81       	ldd	r25, Z+1	; 0x01
     52a:	82 1b       	sub	r24, r18
     52c:	93 0b       	sbc	r25, r19
     52e:	4f bf       	out	0x3f, r20	; 63
     530:	08 95       	ret

00000532 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     532:	ec df       	rcall	.-40     	; 0x50c <udi_cdc_multi_get_nb_received_data>
     534:	21 e0       	ldi	r18, 0x01	; 1
     536:	89 2b       	or	r24, r25
     538:	09 f4       	brne	.+2      	; 0x53c <udi_cdc_multi_is_rx_ready+0xa>
     53a:	20 e0       	ldi	r18, 0x00	; 0
}
     53c:	82 2f       	mov	r24, r18
     53e:	08 95       	ret

00000540 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     548:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
     54a:	f8 94       	cli
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     54c:	50 91 0b 21 	lds	r21, 0x210B
	if (udi_cdc_rx_trans_ongoing[port] ||
     550:	80 91 08 21 	lds	r24, 0x2108
     554:	81 11       	cpse	r24, r1
     556:	10 c0       	rjmp	.+32     	; 0x578 <udi_cdc_rx_start+0x38>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     558:	20 91 09 21 	lds	r18, 0x2109
     55c:	30 91 0a 21 	lds	r19, 0x210A
     560:	c5 2f       	mov	r28, r21
     562:	d0 e0       	ldi	r29, 0x00	; 0
     564:	fe 01       	movw	r30, r28
     566:	ee 0f       	add	r30, r30
     568:	ff 1f       	adc	r31, r31
     56a:	e4 5f       	subi	r30, 0xF4	; 244
     56c:	fe 4d       	sbci	r31, 0xDE	; 222
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
     56e:	80 81       	ld	r24, Z
     570:	91 81       	ldd	r25, Z+1	; 0x01
     572:	28 17       	cp	r18, r24
     574:	39 07       	cpc	r19, r25
     576:	18 f4       	brcc	.+6      	; 0x57e <udi_cdc_rx_start+0x3e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     578:	4f bf       	out	0x3f, r20	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	23 c0       	rjmp	.+70     	; 0x5c4 <udi_cdc_rx_start+0x84>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
     57e:	10 92 09 21 	sts	0x2109, r1
     582:	10 92 0a 21 	sts	0x210A, r1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	51 11       	cpse	r21, r1
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	80 93 0b 21 	sts	0x210B, r24

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	80 93 08 21 	sts	0x2108, r24
     596:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	cb df       	rcall	.-106    	; 0x532 <udi_cdc_multi_is_rx_ready>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
     59c:	ae 01       	movw	r20, r28
     59e:	00 24       	eor	r0, r0
     5a0:	56 95       	lsr	r21
     5a2:	47 95       	ror	r20
     5a4:	07 94       	ror	r0
     5a6:	56 95       	lsr	r21
     5a8:	47 95       	ror	r20
     5aa:	07 94       	ror	r0
     5ac:	54 2f       	mov	r21, r20
     5ae:	40 2d       	mov	r20, r0
     5b0:	40 5f       	subi	r20, 0xF0	; 240
     5b2:	5e 4d       	sbci	r21, 0xDE	; 222
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
     5b4:	09 e1       	ldi	r16, 0x19	; 25
     5b6:	13 e0       	ldi	r17, 0x03	; 3
     5b8:	20 e4       	ldi	r18, 0x40	; 64
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	08 95       	ret

000005ce <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
     5ce:	10 92 91 21 	sts	0x2191, r1
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
     5d2:	10 92 7f 20 	sts	0x207F, r1
	udi_cdc_tx_both_buf_to_send[port] = false;
     5d6:	10 92 7e 20 	sts	0x207E, r1
	udi_cdc_tx_buf_sel[port] = 0;
     5da:	10 92 82 20 	sts	0x2082, r1
	udi_cdc_tx_buf_nb[port][0] = 0;
     5de:	10 92 83 20 	sts	0x2083, r1
     5e2:	10 92 84 20 	sts	0x2084, r1
	udi_cdc_tx_buf_nb[port][1] = 0;
     5e6:	10 92 85 20 	sts	0x2085, r1
     5ea:	10 92 86 20 	sts	0x2086, r1
	udi_cdc_tx_sof_num[port] = 0;
     5ee:	10 92 80 20 	sts	0x2080, r1
     5f2:	10 92 81 20 	sts	0x2081, r1
	udi_cdc_tx_send(port);
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	c3 de       	rcall	.-634    	; 0x380 <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
     5fa:	10 92 08 21 	sts	0x2108, r1
	udi_cdc_rx_buf_sel[port] = 0;
     5fe:	10 92 0b 21 	sts	0x210B, r1
	udi_cdc_rx_buf_nb[port][0] = 0;
     602:	10 92 0c 21 	sts	0x210C, r1
     606:	10 92 0d 21 	sts	0x210D, r1
	udi_cdc_rx_pos[port] = 0;
     60a:	10 92 09 21 	sts	0x2109, r1
     60e:	10 92 0a 21 	sts	0x210A, r1
	if (!udi_cdc_rx_start(port)) {
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	95 df       	rcall	.-214    	; 0x540 <udi_cdc_rx_start>
     616:	88 23       	and	r24, r24
     618:	59 f0       	breq	.+22     	; 0x630 <udi_cdc_data_enable+0x62>
		return false;
	}
	udi_cdc_nb_data_enabled++;
     61a:	90 91 91 21 	lds	r25, 0x2191
     61e:	9f 5f       	subi	r25, 0xFF	; 255
     620:	90 93 91 21 	sts	0x2191, r25
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     624:	90 91 91 21 	lds	r25, 0x2191
     628:	91 30       	cpi	r25, 0x01	; 1
     62a:	11 f4       	brne	.+4      	; 0x630 <udi_cdc_data_enable+0x62>
		udi_cdc_data_running = true;
     62c:	90 93 90 21 	sts	0x2190, r25
	}
	return true;
}
     630:	08 95       	ret

00000632 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	94 2f       	mov	r25, r20
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     638:	81 11       	cpse	r24, r1
     63a:	29 c0       	rjmp	.+82     	; 0x68e <udi_cdc_data_received+0x5c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     63c:	80 91 0b 21 	lds	r24, 0x210B
     640:	e1 e0       	ldi	r30, 0x01	; 1
     642:	81 11       	cpse	r24, r1
     644:	e0 e0       	ldi	r30, 0x00	; 0
	if (!n) {
     646:	61 15       	cp	r22, r1
     648:	71 05       	cpc	r23, r1
     64a:	b1 f4       	brne	.+44     	; 0x678 <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	00 24       	eor	r0, r0
     650:	f6 95       	lsr	r31
     652:	e7 95       	ror	r30
     654:	07 94       	ror	r0
     656:	f6 95       	lsr	r31
     658:	e7 95       	ror	r30
     65a:	07 94       	ror	r0
     65c:	fe 2f       	mov	r31, r30
     65e:	e0 2d       	mov	r30, r0
     660:	af 01       	movw	r20, r30
     662:	40 5f       	subi	r20, 0xF0	; 240
     664:	5e 4d       	sbci	r21, 0xDE	; 222
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
     666:	09 e1       	ldi	r16, 0x19	; 25
     668:	13 e0       	ldi	r17, 0x03	; 3
     66a:	20 e4       	ldi	r18, 0x40	; 64
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	89 2f       	mov	r24, r25
     672:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
     676:	0b c0       	rjmp	.+22     	; 0x68e <udi_cdc_data_received+0x5c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	e4 5f       	subi	r30, 0xF4	; 244
     680:	fe 4d       	sbci	r31, 0xDE	; 222
     682:	60 83       	st	Z, r22
     684:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
     686:	10 92 08 21 	sts	0x2108, r1
	udi_cdc_rx_start(port);
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	59 df       	rcall	.-334    	; 0x540 <udi_cdc_rx_start>
}
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     694:	e0 91 ac 21 	lds	r30, 0x21AC
     698:	f0 91 ad 21 	lds	r31, 0x21AD
     69c:	01 90       	ld	r0, Z+
     69e:	f0 81       	ld	r31, Z
     6a0:	e0 2d       	mov	r30, r0
     6a2:	22 81       	ldd	r18, Z+2	; 0x02
     6a4:	33 81       	ldd	r19, Z+3	; 0x03
     6a6:	2e 0f       	add	r18, r30
     6a8:	3f 1f       	adc	r19, r31
     6aa:	fc 01       	movw	r30, r24
     6ac:	40 81       	ld	r20, Z
     6ae:	e4 0f       	add	r30, r20
     6b0:	f1 1d       	adc	r31, r1
     6b2:	e2 17       	cp	r30, r18
     6b4:	f3 07       	cpc	r31, r19
     6b6:	a0 f4       	brcc	.+40     	; 0x6e0 <udc_next_desc_in_iface+0x4c>
     6b8:	81 81       	ldd	r24, Z+1	; 0x01
     6ba:	84 30       	cpi	r24, 0x04	; 4
     6bc:	a1 f0       	breq	.+40     	; 0x6e6 <udc_next_desc_in_iface+0x52>
     6be:	86 13       	cpse	r24, r22
     6c0:	06 c0       	rjmp	.+12     	; 0x6ce <udc_next_desc_in_iface+0x3a>
     6c2:	14 c0       	rjmp	.+40     	; 0x6ec <udc_next_desc_in_iface+0x58>
     6c4:	81 81       	ldd	r24, Z+1	; 0x01
     6c6:	84 30       	cpi	r24, 0x04	; 4
     6c8:	a1 f0       	breq	.+40     	; 0x6f2 <udc_next_desc_in_iface+0x5e>
     6ca:	86 17       	cp	r24, r22
     6cc:	a9 f0       	breq	.+42     	; 0x6f8 <udc_next_desc_in_iface+0x64>
     6ce:	80 81       	ld	r24, Z
     6d0:	e8 0f       	add	r30, r24
     6d2:	f1 1d       	adc	r31, r1
     6d4:	e2 17       	cp	r30, r18
     6d6:	f3 07       	cpc	r31, r19
     6d8:	a8 f3       	brcs	.-22     	; 0x6c4 <udc_next_desc_in_iface+0x30>
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	08 95       	ret
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	08 95       	ret
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	08 95       	ret
     6ec:	8e 2f       	mov	r24, r30
     6ee:	9f 2f       	mov	r25, r31
     6f0:	08 95       	ret
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	08 95       	ret
     6f8:	8e 2f       	mov	r24, r30
     6fa:	9f 2f       	mov	r25, r31
     6fc:	08 95       	ret

000006fe <udc_valid_address>:
     6fe:	80 91 ef 22 	lds	r24, 0x22EF
     702:	8f 77       	andi	r24, 0x7F	; 127
     704:	10 c7       	rjmp	.+3616   	; 0x1526 <udd_set_address>
     706:	08 95       	ret

00000708 <udc_update_iface_desc>:
     708:	90 91 ae 21 	lds	r25, 0x21AE
     70c:	99 23       	and	r25, r25
     70e:	81 f1       	breq	.+96     	; 0x770 <udc_update_iface_desc+0x68>
     710:	e0 91 ac 21 	lds	r30, 0x21AC
     714:	f0 91 ad 21 	lds	r31, 0x21AD
     718:	01 90       	ld	r0, Z+
     71a:	f0 81       	ld	r31, Z
     71c:	e0 2d       	mov	r30, r0
     71e:	94 81       	ldd	r25, Z+4	; 0x04
     720:	89 17       	cp	r24, r25
     722:	40 f5       	brcc	.+80     	; 0x774 <udc_update_iface_desc+0x6c>
     724:	e0 93 aa 21 	sts	0x21AA, r30
     728:	f0 93 ab 21 	sts	0x21AB, r31
     72c:	22 81       	ldd	r18, Z+2	; 0x02
     72e:	33 81       	ldd	r19, Z+3	; 0x03
     730:	2e 0f       	add	r18, r30
     732:	3f 1f       	adc	r19, r31
     734:	e2 17       	cp	r30, r18
     736:	f3 07       	cpc	r31, r19
     738:	f8 f4       	brcc	.+62     	; 0x778 <udc_update_iface_desc+0x70>
     73a:	91 81       	ldd	r25, Z+1	; 0x01
     73c:	94 30       	cpi	r25, 0x04	; 4
     73e:	61 f4       	brne	.+24     	; 0x758 <udc_update_iface_desc+0x50>
     740:	92 81       	ldd	r25, Z+2	; 0x02
     742:	98 13       	cpse	r25, r24
     744:	09 c0       	rjmp	.+18     	; 0x758 <udc_update_iface_desc+0x50>
     746:	93 81       	ldd	r25, Z+3	; 0x03
     748:	96 13       	cpse	r25, r22
     74a:	06 c0       	rjmp	.+12     	; 0x758 <udc_update_iface_desc+0x50>
     74c:	e0 93 aa 21 	sts	0x21AA, r30
     750:	f0 93 ab 21 	sts	0x21AB, r31
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	08 95       	ret
     758:	90 81       	ld	r25, Z
     75a:	e9 0f       	add	r30, r25
     75c:	f1 1d       	adc	r31, r1
     75e:	e2 17       	cp	r30, r18
     760:	f3 07       	cpc	r31, r19
     762:	58 f3       	brcs	.-42     	; 0x73a <udc_update_iface_desc+0x32>
     764:	e0 93 aa 21 	sts	0x21AA, r30
     768:	f0 93 ab 21 	sts	0x21AB, r31
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	08 95       	ret
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	08 95       	ret
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	08 95       	ret
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	08 95       	ret

0000077c <udc_iface_disable>:
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	c8 2f       	mov	r28, r24
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	be df       	rcall	.-132    	; 0x708 <udc_update_iface_desc>
     78c:	f8 2e       	mov	r15, r24
     78e:	88 23       	and	r24, r24
     790:	81 f1       	breq	.+96     	; 0x7f2 <udc_iface_disable+0x76>
     792:	a0 91 ac 21 	lds	r26, 0x21AC
     796:	b0 91 ad 21 	lds	r27, 0x21AD
     79a:	ec 2f       	mov	r30, r28
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	12 96       	adiw	r26, 0x02	; 2
     7a4:	2d 91       	ld	r18, X+
     7a6:	3c 91       	ld	r19, X
     7a8:	13 97       	sbiw	r26, 0x03	; 3
     7aa:	e2 0f       	add	r30, r18
     7ac:	f3 1f       	adc	r31, r19
     7ae:	00 81       	ld	r16, Z
     7b0:	11 81       	ldd	r17, Z+1	; 0x01
     7b2:	d8 01       	movw	r26, r16
     7b4:	16 96       	adiw	r26, 0x06	; 6
     7b6:	ed 91       	ld	r30, X+
     7b8:	fc 91       	ld	r31, X
     7ba:	17 97       	sbiw	r26, 0x07	; 7
     7bc:	09 95       	icall
     7be:	68 2f       	mov	r22, r24
     7c0:	8c 2f       	mov	r24, r28
     7c2:	a2 df       	rcall	.-188    	; 0x708 <udc_update_iface_desc>
     7c4:	f8 2e       	mov	r15, r24
     7c6:	88 23       	and	r24, r24
     7c8:	a1 f0       	breq	.+40     	; 0x7f2 <udc_iface_disable+0x76>
     7ca:	c0 91 aa 21 	lds	r28, 0x21AA
     7ce:	d0 91 ab 21 	lds	r29, 0x21AB
     7d2:	65 e0       	ldi	r22, 0x05	; 5
     7d4:	ce 01       	movw	r24, r28
     7d6:	5e df       	rcall	.-324    	; 0x694 <udc_next_desc_in_iface>
     7d8:	ec 01       	movw	r28, r24
     7da:	00 97       	sbiw	r24, 0x00	; 0
     7dc:	21 f0       	breq	.+8      	; 0x7e6 <udc_iface_disable+0x6a>
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	0e 94 10 0c 	call	0x1820	; 0x1820 <udd_ep_free>
     7e4:	f6 cf       	rjmp	.-20     	; 0x7d2 <udc_iface_disable+0x56>
     7e6:	d8 01       	movw	r26, r16
     7e8:	12 96       	adiw	r26, 0x02	; 2
     7ea:	ed 91       	ld	r30, X+
     7ec:	fc 91       	ld	r31, X
     7ee:	13 97       	sbiw	r26, 0x03	; 3
     7f0:	09 95       	icall
     7f2:	8f 2d       	mov	r24, r15
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	08 95       	ret

00000800 <udc_iface_enable>:
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	18 2f       	mov	r17, r24
     808:	7f df       	rcall	.-258    	; 0x708 <udc_update_iface_desc>
     80a:	88 23       	and	r24, r24
     80c:	39 f1       	breq	.+78     	; 0x85c <udc_iface_enable+0x5c>
     80e:	c0 91 aa 21 	lds	r28, 0x21AA
     812:	d0 91 ab 21 	lds	r29, 0x21AB
     816:	65 e0       	ldi	r22, 0x05	; 5
     818:	ce 01       	movw	r24, r28
     81a:	3c df       	rcall	.-392    	; 0x694 <udc_next_desc_in_iface>
     81c:	ec 01       	movw	r28, r24
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	41 f0       	breq	.+16     	; 0x832 <udc_iface_enable+0x32>
     822:	4c 81       	ldd	r20, Y+4	; 0x04
     824:	5d 81       	ldd	r21, Y+5	; 0x05
     826:	6b 81       	ldd	r22, Y+3	; 0x03
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	94 d6       	rcall	.+3368   	; 0x1554 <udd_ep_alloc>
     82c:	81 11       	cpse	r24, r1
     82e:	f3 cf       	rjmp	.-26     	; 0x816 <udc_iface_enable+0x16>
     830:	15 c0       	rjmp	.+42     	; 0x85c <udc_iface_enable+0x5c>
     832:	a0 91 ac 21 	lds	r26, 0x21AC
     836:	b0 91 ad 21 	lds	r27, 0x21AD
     83a:	81 2f       	mov	r24, r17
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	12 96       	adiw	r26, 0x02	; 2
     844:	ed 91       	ld	r30, X+
     846:	fc 91       	ld	r31, X
     848:	13 97       	sbiw	r26, 0x03	; 3
     84a:	e8 0f       	add	r30, r24
     84c:	f9 1f       	adc	r31, r25
     84e:	01 90       	ld	r0, Z+
     850:	f0 81       	ld	r31, Z
     852:	e0 2d       	mov	r30, r0
     854:	01 90       	ld	r0, Z+
     856:	f0 81       	ld	r31, Z
     858:	e0 2d       	mov	r30, r0
     85a:	09 95       	icall
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	08 95       	ret

00000864 <udc_reset>:
     864:	cf 93       	push	r28
     866:	80 91 ae 21 	lds	r24, 0x21AE
     86a:	88 23       	and	r24, r24
     86c:	c1 f0       	breq	.+48     	; 0x89e <udc_reset+0x3a>
     86e:	e0 91 ac 21 	lds	r30, 0x21AC
     872:	f0 91 ad 21 	lds	r31, 0x21AD
     876:	01 90       	ld	r0, Z+
     878:	f0 81       	ld	r31, Z
     87a:	e0 2d       	mov	r30, r0
     87c:	84 81       	ldd	r24, Z+4	; 0x04
     87e:	88 23       	and	r24, r24
     880:	71 f0       	breq	.+28     	; 0x89e <udc_reset+0x3a>
     882:	c0 e0       	ldi	r28, 0x00	; 0
     884:	8c 2f       	mov	r24, r28
     886:	7a df       	rcall	.-268    	; 0x77c <udc_iface_disable>
     888:	cf 5f       	subi	r28, 0xFF	; 255
     88a:	e0 91 ac 21 	lds	r30, 0x21AC
     88e:	f0 91 ad 21 	lds	r31, 0x21AD
     892:	01 90       	ld	r0, Z+
     894:	f0 81       	ld	r31, Z
     896:	e0 2d       	mov	r30, r0
     898:	84 81       	ldd	r24, Z+4	; 0x04
     89a:	c8 17       	cp	r28, r24
     89c:	98 f3       	brcs	.-26     	; 0x884 <udc_reset+0x20>
     89e:	10 92 ae 21 	sts	0x21AE, r1
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	80 93 b2 21 	sts	0x21B2, r24
     8aa:	90 93 b3 21 	sts	0x21B3, r25
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     8b2:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     8b4:	80 91 ae 21 	lds	r24, 0x21AE
     8b8:	88 23       	and	r24, r24
     8ba:	41 f1       	breq	.+80     	; 0x90c <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     8bc:	e0 91 ac 21 	lds	r30, 0x21AC
     8c0:	f0 91 ad 21 	lds	r31, 0x21AD
     8c4:	a0 81       	ld	r26, Z
     8c6:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     8c8:	14 96       	adiw	r26, 0x04	; 4
     8ca:	8c 91       	ld	r24, X
     8cc:	88 23       	and	r24, r24
     8ce:	f1 f0       	breq	.+60     	; 0x90c <udc_sof_notify+0x5a>
     8d0:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     8d2:	8c 2f       	mov	r24, r28
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	02 80       	ldd	r0, Z+2	; 0x02
     8dc:	f3 81       	ldd	r31, Z+3	; 0x03
     8de:	e0 2d       	mov	r30, r0
     8e0:	e8 0f       	add	r30, r24
     8e2:	f9 1f       	adc	r31, r25
     8e4:	01 90       	ld	r0, Z+
     8e6:	f0 81       	ld	r31, Z
     8e8:	e0 2d       	mov	r30, r0
     8ea:	00 84       	ldd	r0, Z+8	; 0x08
     8ec:	f1 85       	ldd	r31, Z+9	; 0x09
     8ee:	e0 2d       	mov	r30, r0
     8f0:	30 97       	sbiw	r30, 0x00	; 0
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     8f4:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     8f6:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     8f8:	e0 91 ac 21 	lds	r30, 0x21AC
     8fc:	f0 91 ad 21 	lds	r31, 0x21AD
     900:	a0 81       	ld	r26, Z
     902:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     904:	14 96       	adiw	r26, 0x04	; 4
     906:	8c 91       	ld	r24, X
     908:	c8 17       	cp	r28, r24
     90a:	18 f3       	brcs	.-58     	; 0x8d2 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     91c:	10 92 f7 22 	sts	0x22F7, r1
     920:	10 92 f8 22 	sts	0x22F8, r1
	udd_g_ctrlreq.callback = NULL;
     924:	10 92 f9 22 	sts	0x22F9, r1
     928:	10 92 fa 22 	sts	0x22FA, r1
	udd_g_ctrlreq.over_under_run = NULL;
     92c:	10 92 fb 22 	sts	0x22FB, r1
     930:	10 92 fc 22 	sts	0x22FC, r1

	if (Udd_setup_is_in()) {
     934:	20 91 ed 22 	lds	r18, 0x22ED
     938:	22 23       	and	r18, r18
     93a:	0c f0       	brlt	.+2      	; 0x93e <udc_process_setup+0x2e>
     93c:	65 c2       	rjmp	.+1226   	; 0xe08 <udc_process_setup+0x4f8>
		if (udd_g_ctrlreq.req.wLength == 0) {
     93e:	80 91 f3 22 	lds	r24, 0x22F3
     942:	90 91 f4 22 	lds	r25, 0x22F4
     946:	00 97       	sbiw	r24, 0x00	; 0
     948:	09 f0       	breq	.+2      	; 0x94c <udc_process_setup+0x3c>
     94a:	63 c2       	rjmp	.+1222   	; 0xe12 <udc_process_setup+0x502>
     94c:	59 c2       	rjmp	.+1202   	; 0xe00 <udc_process_setup+0x4f0>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     94e:	2f 71       	andi	r18, 0x1F	; 31
     950:	09 f0       	breq	.+2      	; 0x954 <udc_process_setup+0x44>
     952:	8b c0       	rjmp	.+278    	; 0xa6a <udc_process_setup+0x15a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     954:	30 91 ee 22 	lds	r19, 0x22EE
     958:	36 30       	cpi	r19, 0x06	; 6
     95a:	81 f0       	breq	.+32     	; 0x97c <udc_process_setup+0x6c>
     95c:	38 30       	cpi	r19, 0x08	; 8
     95e:	09 f4       	brne	.+2      	; 0x962 <udc_process_setup+0x52>
     960:	79 c0       	rjmp	.+242    	; 0xa54 <udc_process_setup+0x144>
     962:	31 11       	cpse	r19, r1
     964:	82 c0       	rjmp	.+260    	; 0xa6a <udc_process_setup+0x15a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     966:	02 97       	sbiw	r24, 0x02	; 2
     968:	39 f4       	brne	.+14     	; 0x978 <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     96a:	62 e0       	ldi	r22, 0x02	; 2
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	82 eb       	ldi	r24, 0xB2	; 178
     970:	91 e2       	ldi	r25, 0x21	; 33
     972:	e7 d5       	rcall	.+3022   	; 0x1542 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     974:	01 e0       	ldi	r16, 0x01	; 1
     976:	c7 c1       	rjmp	.+910    	; 0xd06 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     978:	00 e0       	ldi	r16, 0x00	; 0
     97a:	c5 c1       	rjmp	.+906    	; 0xd06 <udc_process_setup+0x3f6>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     97c:	20 91 ef 22 	lds	r18, 0x22EF
     980:	30 91 f0 22 	lds	r19, 0x22F0

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     984:	83 2f       	mov	r24, r19
     986:	99 27       	eor	r25, r25
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	91 05       	cpc	r25, r1
     98c:	99 f0       	breq	.+38     	; 0x9b4 <udc_process_setup+0xa4>
     98e:	1c f4       	brge	.+6      	; 0x996 <udc_process_setup+0x86>
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	39 f0       	breq	.+14     	; 0x9a2 <udc_process_setup+0x92>
     994:	55 c0       	rjmp	.+170    	; 0xa40 <udc_process_setup+0x130>
     996:	83 30       	cpi	r24, 0x03	; 3
     998:	91 05       	cpc	r25, r1
     99a:	d1 f1       	breq	.+116    	; 0xa10 <udc_process_setup+0x100>
     99c:	0f 97       	sbiw	r24, 0x0f	; 15
     99e:	59 f1       	breq	.+86     	; 0x9f6 <udc_process_setup+0xe6>
     9a0:	4f c0       	rjmp	.+158    	; 0xa40 <udc_process_setup+0x130>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     9a2:	80 91 18 20 	lds	r24, 0x2018
     9a6:	90 91 19 20 	lds	r25, 0x2019
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     9aa:	dc 01       	movw	r26, r24
     9ac:	6c 91       	ld	r22, X
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	c8 d5       	rcall	.+2960   	; 0x1542 <udd_set_setup_payload>
     9b2:	35 c0       	rjmp	.+106    	; 0xa1e <udc_process_setup+0x10e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     9b4:	e0 91 18 20 	lds	r30, 0x2018
     9b8:	f0 91 19 20 	lds	r31, 0x2019
     9bc:	81 89       	ldd	r24, Z+17	; 0x11
     9be:	28 17       	cp	r18, r24
     9c0:	08 f0       	brcs	.+2      	; 0x9c4 <udc_process_setup+0xb4>
     9c2:	40 c0       	rjmp	.+128    	; 0xa44 <udc_process_setup+0x134>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     9c4:	c9 01       	movw	r24, r18
     9c6:	99 27       	eor	r25, r25
     9c8:	88 0f       	add	r24, r24
     9ca:	99 1f       	adc	r25, r25
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	e0 91 1a 20 	lds	r30, 0x201A
     9d4:	f0 91 1b 20 	lds	r31, 0x201B
     9d8:	e8 0f       	add	r30, r24
     9da:	f9 1f       	adc	r31, r25
     9dc:	80 81       	ld	r24, Z
     9de:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     9e0:	fc 01       	movw	r30, r24
     9e2:	62 81       	ldd	r22, Z+2	; 0x02
     9e4:	73 81       	ldd	r23, Z+3	; 0x03
     9e6:	ad d5       	rcall	.+2906   	; 0x1542 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     9e8:	e0 91 f5 22 	lds	r30, 0x22F5
     9ec:	f0 91 f6 22 	lds	r31, 0x22F6
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	81 83       	std	Z+1, r24	; 0x01
     9f4:	14 c0       	rjmp	.+40     	; 0xa1e <udc_process_setup+0x10e>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     9f6:	80 91 1c 20 	lds	r24, 0x201C
     9fa:	90 91 1d 20 	lds	r25, 0x201D
     9fe:	00 97       	sbiw	r24, 0x00	; 0
     a00:	19 f1       	breq	.+70     	; 0xa48 <udc_process_setup+0x138>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     a02:	dc 01       	movw	r26, r24
     a04:	12 96       	adiw	r26, 0x02	; 2
     a06:	6d 91       	ld	r22, X+
     a08:	7c 91       	ld	r23, X
     a0a:	13 97       	sbiw	r26, 0x03	; 3
     a0c:	9a d5       	rcall	.+2868   	; 0x1542 <udd_set_setup_payload>
     a0e:	07 c0       	rjmp	.+14     	; 0xa1e <udc_process_setup+0x10e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     a10:	21 11       	cpse	r18, r1
     a12:	1c c0       	rjmp	.+56     	; 0xa4c <udc_process_setup+0x13c>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     a14:	64 e0       	ldi	r22, 0x04	; 4
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	84 e1       	ldi	r24, 0x14	; 20
     a1a:	90 e2       	ldi	r25, 0x20	; 32
     a1c:	92 d5       	rcall	.+2852   	; 0x1542 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     a1e:	80 91 f3 22 	lds	r24, 0x22F3
     a22:	90 91 f4 22 	lds	r25, 0x22F4
     a26:	20 91 f7 22 	lds	r18, 0x22F7
     a2a:	30 91 f8 22 	lds	r19, 0x22F8
     a2e:	82 17       	cp	r24, r18
     a30:	93 07       	cpc	r25, r19
     a32:	70 f4       	brcc	.+28     	; 0xa50 <udc_process_setup+0x140>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     a34:	80 93 f7 22 	sts	0x22F7, r24
     a38:	90 93 f8 22 	sts	0x22F8, r25
	}
	return true;
     a3c:	01 e0       	ldi	r16, 0x01	; 1
     a3e:	63 c1       	rjmp	.+710    	; 0xd06 <udc_process_setup+0x3f6>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     a40:	00 e0       	ldi	r16, 0x00	; 0
     a42:	61 c1       	rjmp	.+706    	; 0xd06 <udc_process_setup+0x3f6>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     a44:	00 e0       	ldi	r16, 0x00	; 0
     a46:	5f c1       	rjmp	.+702    	; 0xd06 <udc_process_setup+0x3f6>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     a48:	00 e0       	ldi	r16, 0x00	; 0
     a4a:	5d c1       	rjmp	.+698    	; 0xd06 <udc_process_setup+0x3f6>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     a4c:	00 e0       	ldi	r16, 0x00	; 0
     a4e:	5b c1       	rjmp	.+694    	; 0xd06 <udc_process_setup+0x3f6>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     a50:	01 e0       	ldi	r16, 0x01	; 1
     a52:	59 c1       	rjmp	.+690    	; 0xd06 <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	39 f4       	brne	.+14     	; 0xa66 <udc_process_setup+0x156>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	8e ea       	ldi	r24, 0xAE	; 174
     a5e:	91 e2       	ldi	r25, 0x21	; 33
     a60:	70 d5       	rcall	.+2784   	; 0x1542 <udd_set_setup_payload>
	return true;
     a62:	01 e0       	ldi	r16, 0x01	; 1
     a64:	50 c1       	rjmp	.+672    	; 0xd06 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     a66:	00 e0       	ldi	r16, 0x00	; 0
     a68:	4e c1       	rjmp	.+668    	; 0xd06 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     a6a:	21 30       	cpi	r18, 0x01	; 1
     a6c:	09 f0       	breq	.+2      	; 0xa70 <udc_process_setup+0x160>
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <udc_process_setup+0x1de>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     a70:	30 91 ee 22 	lds	r19, 0x22EE
     a74:	3a 30       	cpi	r19, 0x0A	; 10
     a76:	d9 f5       	brne	.+118    	; 0xaee <udc_process_setup+0x1de>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	99 f5       	brne	.+102    	; 0xae2 <udc_process_setup+0x1d2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     a7c:	80 91 ae 21 	lds	r24, 0x21AE
     a80:	88 23       	and	r24, r24
     a82:	89 f1       	breq	.+98     	; 0xae6 <udc_process_setup+0x1d6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     a84:	c0 91 f1 22 	lds	r28, 0x22F1
     a88:	d0 91 f2 22 	lds	r29, 0x22F2
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     a8c:	e0 90 ac 21 	lds	r14, 0x21AC
     a90:	f0 90 ad 21 	lds	r15, 0x21AD
     a94:	d7 01       	movw	r26, r14
     a96:	ed 91       	ld	r30, X+
     a98:	fc 91       	ld	r31, X
     a9a:	84 81       	ldd	r24, Z+4	; 0x04
     a9c:	c8 17       	cp	r28, r24
     a9e:	28 f5       	brcc	.+74     	; 0xaea <udc_process_setup+0x1da>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	8c 2f       	mov	r24, r28
     aa4:	31 de       	rcall	.-926    	; 0x708 <udc_update_iface_desc>
     aa6:	08 2f       	mov	r16, r24
     aa8:	88 23       	and	r24, r24
     aaa:	09 f4       	brne	.+2      	; 0xaae <udc_process_setup+0x19e>
     aac:	2c c1       	rjmp	.+600    	; 0xd06 <udc_process_setup+0x3f6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     aae:	ce 01       	movw	r24, r28
     ab0:	99 27       	eor	r25, r25
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	d7 01       	movw	r26, r14
     ab8:	12 96       	adiw	r26, 0x02	; 2
     aba:	ed 91       	ld	r30, X+
     abc:	fc 91       	ld	r31, X
     abe:	13 97       	sbiw	r26, 0x03	; 3
     ac0:	e8 0f       	add	r30, r24
     ac2:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     ac4:	01 90       	ld	r0, Z+
     ac6:	f0 81       	ld	r31, Z
     ac8:	e0 2d       	mov	r30, r0
     aca:	06 80       	ldd	r0, Z+6	; 0x06
     acc:	f7 81       	ldd	r31, Z+7	; 0x07
     ace:	e0 2d       	mov	r30, r0
     ad0:	09 95       	icall
     ad2:	80 93 b0 21 	sts	0x21B0, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	80 eb       	ldi	r24, 0xB0	; 176
     adc:	91 e2       	ldi	r25, 0x21	; 33
     ade:	31 d5       	rcall	.+2658   	; 0x1542 <udd_set_setup_payload>
     ae0:	12 c1       	rjmp	.+548    	; 0xd06 <udc_process_setup+0x3f6>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     ae2:	00 e0       	ldi	r16, 0x00	; 0
     ae4:	10 c1       	rjmp	.+544    	; 0xd06 <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     ae6:	00 e0       	ldi	r16, 0x00	; 0
     ae8:	0e c1       	rjmp	.+540    	; 0xd06 <udc_process_setup+0x3f6>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     aea:	00 e0       	ldi	r16, 0x00	; 0
     aec:	0c c1       	rjmp	.+536    	; 0xd06 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     aee:	22 30       	cpi	r18, 0x02	; 2
     af0:	09 f0       	breq	.+2      	; 0xaf4 <udc_process_setup+0x1e4>
     af2:	0b c1       	rjmp	.+534    	; 0xd0a <udc_process_setup+0x3fa>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     af4:	20 91 ee 22 	lds	r18, 0x22EE
     af8:	21 11       	cpse	r18, r1
     afa:	00 c1       	rjmp	.+512    	; 0xcfc <udc_process_setup+0x3ec>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     afc:	02 97       	sbiw	r24, 0x02	; 2
     afe:	79 f4       	brne	.+30     	; 0xb1e <udc_process_setup+0x20e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     b00:	80 91 f1 22 	lds	r24, 0x22F1
     b04:	88 d5       	rcall	.+2832   	; 0x1616 <udd_ep_is_halted>
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	80 93 a8 21 	sts	0x21A8, r24
     b0c:	90 93 a9 21 	sts	0x21A9, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     b10:	62 e0       	ldi	r22, 0x02	; 2
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	88 ea       	ldi	r24, 0xA8	; 168
     b16:	91 e2       	ldi	r25, 0x21	; 33
     b18:	14 d5       	rcall	.+2600   	; 0x1542 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     b1a:	01 e0       	ldi	r16, 0x01	; 1
     b1c:	f4 c0       	rjmp	.+488    	; 0xd06 <udc_process_setup+0x3f6>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     b1e:	00 e0       	ldi	r16, 0x00	; 0
     b20:	f2 c0       	rjmp	.+484    	; 0xd06 <udc_process_setup+0x3f6>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     b22:	2f 71       	andi	r18, 0x1F	; 31
     b24:	09 f0       	breq	.+2      	; 0xb28 <udc_process_setup+0x218>
     b26:	90 c0       	rjmp	.+288    	; 0xc48 <udc_process_setup+0x338>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     b28:	80 91 ee 22 	lds	r24, 0x22EE
     b2c:	83 30       	cpi	r24, 0x03	; 3
     b2e:	09 f4       	brne	.+2      	; 0xb32 <udc_process_setup+0x222>
     b30:	e7 c0       	rjmp	.+462    	; 0xd00 <udc_process_setup+0x3f0>
     b32:	18 f4       	brcc	.+6      	; 0xb3a <udc_process_setup+0x22a>
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	b1 f0       	breq	.+44     	; 0xb64 <udc_process_setup+0x254>
     b38:	87 c0       	rjmp	.+270    	; 0xc48 <udc_process_setup+0x338>
     b3a:	85 30       	cpi	r24, 0x05	; 5
     b3c:	19 f0       	breq	.+6      	; 0xb44 <udc_process_setup+0x234>
     b3e:	89 30       	cpi	r24, 0x09	; 9
     b40:	61 f1       	breq	.+88     	; 0xb9a <udc_process_setup+0x28a>
     b42:	82 c0       	rjmp	.+260    	; 0xc48 <udc_process_setup+0x338>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     b44:	80 91 f3 22 	lds	r24, 0x22F3
     b48:	90 91 f4 22 	lds	r25, 0x22F4
     b4c:	89 2b       	or	r24, r25
     b4e:	41 f4       	brne	.+16     	; 0xb60 <udc_process_setup+0x250>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     b50:	8f e7       	ldi	r24, 0x7F	; 127
     b52:	93 e0       	ldi	r25, 0x03	; 3
     b54:	80 93 f9 22 	sts	0x22F9, r24
     b58:	90 93 fa 22 	sts	0x22FA, r25
	return true;
     b5c:	01 e0       	ldi	r16, 0x01	; 1
     b5e:	d3 c0       	rjmp	.+422    	; 0xd06 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     b60:	00 e0       	ldi	r16, 0x00	; 0
     b62:	d1 c0       	rjmp	.+418    	; 0xd06 <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     b64:	80 91 f3 22 	lds	r24, 0x22F3
     b68:	90 91 f4 22 	lds	r25, 0x22F4
     b6c:	89 2b       	or	r24, r25
     b6e:	89 f4       	brne	.+34     	; 0xb92 <udc_process_setup+0x282>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     b70:	80 91 ef 22 	lds	r24, 0x22EF
     b74:	90 91 f0 22 	lds	r25, 0x22F0
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	69 f4       	brne	.+26     	; 0xb96 <udc_process_setup+0x286>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     b7c:	80 91 b2 21 	lds	r24, 0x21B2
     b80:	90 91 b3 21 	lds	r25, 0x21B3
     b84:	8d 7f       	andi	r24, 0xFD	; 253
     b86:	80 93 b2 21 	sts	0x21B2, r24
     b8a:	90 93 b3 21 	sts	0x21B3, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     b8e:	01 e0       	ldi	r16, 0x01	; 1
     b90:	ba c0       	rjmp	.+372    	; 0xd06 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     b92:	00 e0       	ldi	r16, 0x00	; 0
     b94:	b8 c0       	rjmp	.+368    	; 0xd06 <udc_process_setup+0x3f6>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     b96:	00 e0       	ldi	r16, 0x00	; 0
     b98:	b6 c0       	rjmp	.+364    	; 0xd06 <udc_process_setup+0x3f6>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     b9a:	80 91 f3 22 	lds	r24, 0x22F3
     b9e:	90 91 f4 22 	lds	r25, 0x22F4
     ba2:	89 2b       	or	r24, r25
     ba4:	09 f0       	breq	.+2      	; 0xba8 <udc_process_setup+0x298>
     ba6:	46 c0       	rjmp	.+140    	; 0xc34 <udc_process_setup+0x324>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     ba8:	c1 d4       	rcall	.+2434   	; 0x152c <udd_getaddress>
     baa:	88 23       	and	r24, r24
     bac:	09 f4       	brne	.+2      	; 0xbb0 <udc_process_setup+0x2a0>
     bae:	44 c0       	rjmp	.+136    	; 0xc38 <udc_process_setup+0x328>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     bb0:	20 91 ef 22 	lds	r18, 0x22EF
     bb4:	30 91 f0 22 	lds	r19, 0x22F0
     bb8:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     bba:	e0 91 18 20 	lds	r30, 0x2018
     bbe:	f0 91 19 20 	lds	r31, 0x2019
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     bc2:	81 89       	ldd	r24, Z+17	; 0x11
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	82 17       	cp	r24, r18
     bc8:	93 07       	cpc	r25, r19
     bca:	c0 f1       	brcs	.+112    	; 0xc3c <udc_process_setup+0x32c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     bcc:	4b de       	rcall	.-874    	; 0x864 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     bce:	80 91 ef 22 	lds	r24, 0x22EF
     bd2:	90 91 f0 22 	lds	r25, 0x22F0
     bd6:	80 93 ae 21 	sts	0x21AE, r24
	if (udc_num_configuration == 0) {
     bda:	88 23       	and	r24, r24
     bdc:	89 f1       	breq	.+98     	; 0xc40 <udc_process_setup+0x330>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     bde:	99 27       	eor	r25, r25
     be0:	81 50       	subi	r24, 0x01	; 1
     be2:	90 4c       	sbci	r25, 0xC0	; 192
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	e0 91 1a 20 	lds	r30, 0x201A
     bf0:	f0 91 1b 20 	lds	r31, 0x201B
     bf4:	e8 0f       	add	r30, r24
     bf6:	f9 1f       	adc	r31, r25
     bf8:	e0 93 ac 21 	sts	0x21AC, r30
     bfc:	f0 93 ad 21 	sts	0x21AD, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c00:	01 90       	ld	r0, Z+
     c02:	f0 81       	ld	r31, Z
     c04:	e0 2d       	mov	r30, r0
     c06:	84 81       	ldd	r24, Z+4	; 0x04
     c08:	88 23       	and	r24, r24
     c0a:	e1 f0       	breq	.+56     	; 0xc44 <udc_process_setup+0x334>
     c0c:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	8c 2f       	mov	r24, r28
     c12:	f6 dd       	rcall	.-1044   	; 0x800 <udc_iface_enable>
     c14:	08 2f       	mov	r16, r24
     c16:	88 23       	and	r24, r24
     c18:	09 f4       	brne	.+2      	; 0xc1c <udc_process_setup+0x30c>
     c1a:	75 c0       	rjmp	.+234    	; 0xd06 <udc_process_setup+0x3f6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     c1c:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c1e:	e0 91 ac 21 	lds	r30, 0x21AC
     c22:	f0 91 ad 21 	lds	r31, 0x21AD
     c26:	01 90       	ld	r0, Z+
     c28:	f0 81       	ld	r31, Z
     c2a:	e0 2d       	mov	r30, r0
     c2c:	84 81       	ldd	r24, Z+4	; 0x04
     c2e:	c8 17       	cp	r28, r24
     c30:	70 f3       	brcs	.-36     	; 0xc0e <udc_process_setup+0x2fe>
     c32:	69 c0       	rjmp	.+210    	; 0xd06 <udc_process_setup+0x3f6>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     c34:	00 e0       	ldi	r16, 0x00	; 0
     c36:	67 c0       	rjmp	.+206    	; 0xd06 <udc_process_setup+0x3f6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     c38:	00 e0       	ldi	r16, 0x00	; 0
     c3a:	65 c0       	rjmp	.+202    	; 0xd06 <udc_process_setup+0x3f6>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     c3c:	00 e0       	ldi	r16, 0x00	; 0
     c3e:	63 c0       	rjmp	.+198    	; 0xd06 <udc_process_setup+0x3f6>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     c40:	01 e0       	ldi	r16, 0x01	; 1
     c42:	61 c0       	rjmp	.+194    	; 0xd06 <udc_process_setup+0x3f6>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     c44:	01 e0       	ldi	r16, 0x01	; 1
     c46:	5f c0       	rjmp	.+190    	; 0xd06 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     c48:	21 30       	cpi	r18, 0x01	; 1
     c4a:	09 f5       	brne	.+66     	; 0xc8e <udc_process_setup+0x37e>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     c4c:	80 91 ee 22 	lds	r24, 0x22EE
     c50:	8b 30       	cpi	r24, 0x0B	; 11
     c52:	e9 f4       	brne	.+58     	; 0xc8e <udc_process_setup+0x37e>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     c54:	80 91 f3 22 	lds	r24, 0x22F3
     c58:	90 91 f4 22 	lds	r25, 0x22F4
     c5c:	89 2b       	or	r24, r25
     c5e:	99 f4       	brne	.+38     	; 0xc86 <udc_process_setup+0x376>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     c60:	80 91 ae 21 	lds	r24, 0x21AE
     c64:	88 23       	and	r24, r24
     c66:	89 f0       	breq	.+34     	; 0xc8a <udc_process_setup+0x37a>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     c68:	c0 91 f1 22 	lds	r28, 0x22F1
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     c6c:	d0 91 ef 22 	lds	r29, 0x22EF

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     c70:	8c 2f       	mov	r24, r28
     c72:	84 dd       	rcall	.-1272   	; 0x77c <udc_iface_disable>
     c74:	08 2f       	mov	r16, r24
     c76:	88 23       	and	r24, r24
     c78:	09 f4       	brne	.+2      	; 0xc7c <udc_process_setup+0x36c>
     c7a:	45 c0       	rjmp	.+138    	; 0xd06 <udc_process_setup+0x3f6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     c7c:	6d 2f       	mov	r22, r29
     c7e:	8c 2f       	mov	r24, r28
     c80:	bf dd       	rcall	.-1154   	; 0x800 <udc_iface_enable>
     c82:	08 2f       	mov	r16, r24
     c84:	40 c0       	rjmp	.+128    	; 0xd06 <udc_process_setup+0x3f6>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     c86:	00 e0       	ldi	r16, 0x00	; 0
     c88:	3e c0       	rjmp	.+124    	; 0xd06 <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     c8a:	00 e0       	ldi	r16, 0x00	; 0
     c8c:	3c c0       	rjmp	.+120    	; 0xd06 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     c8e:	22 30       	cpi	r18, 0x02	; 2
     c90:	09 f0       	breq	.+2      	; 0xc94 <udc_process_setup+0x384>
     c92:	3b c0       	rjmp	.+118    	; 0xd0a <udc_process_setup+0x3fa>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     c94:	80 91 ee 22 	lds	r24, 0x22EE
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	19 f0       	breq	.+6      	; 0xca2 <udc_process_setup+0x392>
     c9c:	83 30       	cpi	r24, 0x03	; 3
     c9e:	b1 f0       	breq	.+44     	; 0xccc <udc_process_setup+0x3bc>
     ca0:	31 c0       	rjmp	.+98     	; 0xd04 <udc_process_setup+0x3f4>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     ca2:	80 91 f3 22 	lds	r24, 0x22F3
     ca6:	90 91 f4 22 	lds	r25, 0x22F4
     caa:	89 2b       	or	r24, r25
     cac:	59 f4       	brne	.+22     	; 0xcc4 <udc_process_setup+0x3b4>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     cae:	80 91 ef 22 	lds	r24, 0x22EF
     cb2:	90 91 f0 22 	lds	r25, 0x22F0
     cb6:	89 2b       	or	r24, r25
     cb8:	39 f4       	brne	.+14     	; 0xcc8 <udc_process_setup+0x3b8>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     cba:	80 91 f1 22 	lds	r24, 0x22F1
     cbe:	c6 d4       	rcall	.+2444   	; 0x164c <udd_ep_clear_halt>
     cc0:	08 2f       	mov	r16, r24
     cc2:	21 c0       	rjmp	.+66     	; 0xd06 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     cc4:	00 e0       	ldi	r16, 0x00	; 0
     cc6:	1f c0       	rjmp	.+62     	; 0xd06 <udc_process_setup+0x3f6>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     cc8:	00 e0       	ldi	r16, 0x00	; 0
     cca:	1d c0       	rjmp	.+58     	; 0xd06 <udc_process_setup+0x3f6>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     ccc:	80 91 f3 22 	lds	r24, 0x22F3
     cd0:	90 91 f4 22 	lds	r25, 0x22F4
     cd4:	89 2b       	or	r24, r25
     cd6:	71 f4       	brne	.+28     	; 0xcf4 <udc_process_setup+0x3e4>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     cd8:	80 91 ef 22 	lds	r24, 0x22EF
     cdc:	90 91 f0 22 	lds	r25, 0x22F0
     ce0:	89 2b       	or	r24, r25
     ce2:	51 f4       	brne	.+20     	; 0xcf8 <udc_process_setup+0x3e8>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     ce4:	c1 ef       	ldi	r28, 0xF1	; 241
     ce6:	d2 e2       	ldi	r29, 0x22	; 34
     ce8:	88 81       	ld	r24, Y
     cea:	61 d5       	rcall	.+2754   	; 0x17ae <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     cec:	88 81       	ld	r24, Y
     cee:	b5 d5       	rcall	.+2922   	; 0x185a <udd_ep_set_halt>
     cf0:	08 2f       	mov	r16, r24
     cf2:	09 c0       	rjmp	.+18     	; 0xd06 <udc_process_setup+0x3f6>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     cf4:	00 e0       	ldi	r16, 0x00	; 0
     cf6:	07 c0       	rjmp	.+14     	; 0xd06 <udc_process_setup+0x3f6>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     cf8:	00 e0       	ldi	r16, 0x00	; 0
     cfa:	05 c0       	rjmp	.+10     	; 0xd06 <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
     cfc:	00 e0       	ldi	r16, 0x00	; 0
     cfe:	03 c0       	rjmp	.+6      	; 0xd06 <udc_process_setup+0x3f6>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     d00:	00 e0       	ldi	r16, 0x00	; 0
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
     d04:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     d06:	01 11       	cpse	r16, r1
     d08:	89 c0       	rjmp	.+274    	; 0xe1c <udc_process_setup+0x50c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     d0a:	80 91 ed 22 	lds	r24, 0x22ED
     d0e:	8f 71       	andi	r24, 0x1F	; 31
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	c1 f5       	brne	.+112    	; 0xd84 <udc_process_setup+0x474>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     d14:	80 91 ae 21 	lds	r24, 0x21AE
     d18:	88 23       	and	r24, r24
     d1a:	a1 f1       	breq	.+104    	; 0xd84 <udc_process_setup+0x474>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d1c:	c0 91 f1 22 	lds	r28, 0x22F1
     d20:	d0 91 f2 22 	lds	r29, 0x22F2
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     d24:	00 91 ac 21 	lds	r16, 0x21AC
     d28:	10 91 ad 21 	lds	r17, 0x21AD
     d2c:	d8 01       	movw	r26, r16
     d2e:	ed 91       	ld	r30, X+
     d30:	fc 91       	ld	r31, X
     d32:	84 81       	ldd	r24, Z+4	; 0x04
     d34:	c8 17       	cp	r28, r24
     d36:	30 f5       	brcc	.+76     	; 0xd84 <udc_process_setup+0x474>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	8c 2f       	mov	r24, r28
     d3c:	e5 dc       	rcall	.-1590   	; 0x708 <udc_update_iface_desc>
     d3e:	88 23       	and	r24, r24
     d40:	09 f1       	breq	.+66     	; 0xd84 <udc_process_setup+0x474>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     d42:	ce 01       	movw	r24, r28
     d44:	99 27       	eor	r25, r25
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	d8 01       	movw	r26, r16
     d4c:	12 96       	adiw	r26, 0x02	; 2
     d4e:	ed 91       	ld	r30, X+
     d50:	fc 91       	ld	r31, X
     d52:	13 97       	sbiw	r26, 0x03	; 3
     d54:	e8 0f       	add	r30, r24
     d56:	f9 1f       	adc	r31, r25
     d58:	00 81       	ld	r16, Z
     d5a:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     d5c:	d8 01       	movw	r26, r16
     d5e:	16 96       	adiw	r26, 0x06	; 6
     d60:	ed 91       	ld	r30, X+
     d62:	fc 91       	ld	r31, X
     d64:	17 97       	sbiw	r26, 0x07	; 7
     d66:	09 95       	icall
     d68:	68 2f       	mov	r22, r24
     d6a:	8c 2f       	mov	r24, r28
     d6c:	cd dc       	rcall	.-1638   	; 0x708 <udc_update_iface_desc>
     d6e:	88 23       	and	r24, r24
     d70:	49 f0       	breq	.+18     	; 0xd84 <udc_process_setup+0x474>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     d72:	d8 01       	movw	r26, r16
     d74:	14 96       	adiw	r26, 0x04	; 4
     d76:	ed 91       	ld	r30, X+
     d78:	fc 91       	ld	r31, X
     d7a:	15 97       	sbiw	r26, 0x05	; 5
     d7c:	09 95       	icall
     d7e:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     d80:	81 11       	cpse	r24, r1
     d82:	4c c0       	rjmp	.+152    	; 0xe1c <udc_process_setup+0x50c>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     d84:	80 91 ed 22 	lds	r24, 0x22ED
     d88:	8f 71       	andi	r24, 0x1F	; 31
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	d9 f5       	brne	.+118    	; 0xe04 <udc_process_setup+0x4f4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     d8e:	80 91 ae 21 	lds	r24, 0x21AE
     d92:	88 23       	and	r24, r24
     d94:	89 f1       	breq	.+98     	; 0xdf8 <udc_process_setup+0x4e8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d96:	e0 91 ac 21 	lds	r30, 0x21AC
     d9a:	f0 91 ad 21 	lds	r31, 0x21AD
     d9e:	a0 81       	ld	r26, Z
     da0:	b1 81       	ldd	r27, Z+1	; 0x01
     da2:	14 96       	adiw	r26, 0x04	; 4
     da4:	8c 91       	ld	r24, X
     da6:	88 23       	and	r24, r24
     da8:	49 f1       	breq	.+82     	; 0xdfc <udc_process_setup+0x4ec>
     daa:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     dac:	21 2f       	mov	r18, r17
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	22 0f       	add	r18, r18
     db2:	33 1f       	adc	r19, r19
     db4:	02 80       	ldd	r0, Z+2	; 0x02
     db6:	f3 81       	ldd	r31, Z+3	; 0x03
     db8:	e0 2d       	mov	r30, r0
     dba:	e2 0f       	add	r30, r18
     dbc:	f3 1f       	adc	r31, r19
     dbe:	c0 81       	ld	r28, Z
     dc0:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     dc2:	ee 81       	ldd	r30, Y+6	; 0x06
     dc4:	ff 81       	ldd	r31, Y+7	; 0x07
     dc6:	09 95       	icall
     dc8:	68 2f       	mov	r22, r24
     dca:	81 2f       	mov	r24, r17
     dcc:	9d dc       	rcall	.-1734   	; 0x708 <udc_update_iface_desc>
     dce:	08 2f       	mov	r16, r24
     dd0:	88 23       	and	r24, r24
     dd2:	21 f1       	breq	.+72     	; 0xe1c <udc_process_setup+0x50c>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     dd4:	ec 81       	ldd	r30, Y+4	; 0x04
     dd6:	fd 81       	ldd	r31, Y+5	; 0x05
     dd8:	09 95       	icall
     dda:	08 2f       	mov	r16, r24
     ddc:	81 11       	cpse	r24, r1
     dde:	1e c0       	rjmp	.+60     	; 0xe1c <udc_process_setup+0x50c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     de0:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     de2:	e0 91 ac 21 	lds	r30, 0x21AC
     de6:	f0 91 ad 21 	lds	r31, 0x21AD
     dea:	a0 81       	ld	r26, Z
     dec:	b1 81       	ldd	r27, Z+1	; 0x01
     dee:	14 96       	adiw	r26, 0x04	; 4
     df0:	8c 91       	ld	r24, X
     df2:	18 17       	cp	r17, r24
     df4:	d8 f2       	brcs	.-74     	; 0xdac <udc_process_setup+0x49c>
     df6:	12 c0       	rjmp	.+36     	; 0xe1c <udc_process_setup+0x50c>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     df8:	00 e0       	ldi	r16, 0x00	; 0
     dfa:	10 c0       	rjmp	.+32     	; 0xe1c <udc_process_setup+0x50c>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     dfc:	00 e0       	ldi	r16, 0x00	; 0
     dfe:	0e c0       	rjmp	.+28     	; 0xe1c <udc_process_setup+0x50c>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     e00:	00 e0       	ldi	r16, 0x00	; 0
     e02:	0c c0       	rjmp	.+24     	; 0xe1c <udc_process_setup+0x50c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     e04:	00 e0       	ldi	r16, 0x00	; 0
     e06:	0a c0       	rjmp	.+20     	; 0xe1c <udc_process_setup+0x50c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     e08:	82 2f       	mov	r24, r18
     e0a:	80 76       	andi	r24, 0x60	; 96
     e0c:	09 f0       	breq	.+2      	; 0xe10 <udc_process_setup+0x500>
     e0e:	7d cf       	rjmp	.-262    	; 0xd0a <udc_process_setup+0x3fa>
     e10:	88 ce       	rjmp	.-752    	; 0xb22 <udc_process_setup+0x212>
     e12:	32 2f       	mov	r19, r18
     e14:	30 76       	andi	r19, 0x60	; 96
     e16:	09 f0       	breq	.+2      	; 0xe1a <udc_process_setup+0x50a>
     e18:	78 cf       	rjmp	.-272    	; 0xd0a <udc_process_setup+0x3fa>
     e1a:	99 cd       	rjmp	.-1230   	; 0x94e <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     e1c:	80 2f       	mov	r24, r16
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	08 95       	ret

00000e2c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     e30:	e0 91 b4 21 	lds	r30, 0x21B4
     e34:	f0 91 b5 21 	lds	r31, 0x21B5
     e38:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     e3a:	83 ff       	sbrs	r24, 3
     e3c:	08 c0       	rjmp	.+16     	; 0xe4e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     e3e:	88 60       	ori	r24, 0x08	; 8
     e40:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     e42:	83 e0       	ldi	r24, 0x03	; 3
     e44:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     e46:	86 ef       	ldi	r24, 0xF6	; 246
     e48:	80 93 be 21 	sts	0x21BE, r24
     e4c:	89 c0       	rjmp	.+274    	; 0xf60 <twim_interrupt_handler+0x134>
     e4e:	98 2f       	mov	r25, r24
     e50:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     e52:	31 f0       	breq	.+12     	; 0xe60 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     e58:	8f ef       	ldi	r24, 0xFF	; 255
     e5a:	80 93 be 21 	sts	0x21BE, r24
     e5e:	80 c0       	rjmp	.+256    	; 0xf60 <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     e60:	86 ff       	sbrs	r24, 6
     e62:	45 c0       	rjmp	.+138    	; 0xeee <twim_interrupt_handler+0xc2>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     e64:	a0 91 b6 21 	lds	r26, 0x21B6
     e68:	b0 91 b7 21 	lds	r27, 0x21B7

	if (transfer.addr_count < pkg->addr_length) {
     e6c:	80 91 b8 21 	lds	r24, 0x21B8
     e70:	90 91 b9 21 	lds	r25, 0x21B9
     e74:	14 96       	adiw	r26, 0x04	; 4
     e76:	2d 91       	ld	r18, X+
     e78:	3c 91       	ld	r19, X
     e7a:	15 97       	sbiw	r26, 0x05	; 5
     e7c:	82 17       	cp	r24, r18
     e7e:	93 07       	cpc	r25, r19
     e80:	6c f4       	brge	.+26     	; 0xe9c <twim_interrupt_handler+0x70>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     e82:	9c 01       	movw	r18, r24
     e84:	2f 5f       	subi	r18, 0xFF	; 255
     e86:	3f 4f       	sbci	r19, 0xFF	; 255
     e88:	20 93 b8 21 	sts	0x21B8, r18
     e8c:	30 93 b9 21 	sts	0x21B9, r19
     e90:	a8 0f       	add	r26, r24
     e92:	b9 1f       	adc	r27, r25
     e94:	11 96       	adiw	r26, 0x01	; 1
     e96:	8c 91       	ld	r24, X
     e98:	87 83       	std	Z+7, r24	; 0x07
     e9a:	62 c0       	rjmp	.+196    	; 0xf60 <twim_interrupt_handler+0x134>

	} else if (transfer.data_count < pkg->length) {
     e9c:	80 91 ba 21 	lds	r24, 0x21BA
     ea0:	90 91 bb 21 	lds	r25, 0x21BB
     ea4:	18 96       	adiw	r26, 0x08	; 8
     ea6:	2d 91       	ld	r18, X+
     ea8:	3c 91       	ld	r19, X
     eaa:	19 97       	sbiw	r26, 0x09	; 9
     eac:	82 17       	cp	r24, r18
     eae:	93 07       	cpc	r25, r19
     eb0:	c8 f4       	brcc	.+50     	; 0xee4 <twim_interrupt_handler+0xb8>

		if (transfer.read) {
     eb2:	20 91 bc 21 	lds	r18, 0x21BC
     eb6:	22 23       	and	r18, r18
     eb8:	21 f0       	breq	.+8      	; 0xec2 <twim_interrupt_handler+0x96>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     eba:	86 81       	ldd	r24, Z+6	; 0x06
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	86 83       	std	Z+6, r24	; 0x06
     ec0:	4f c0       	rjmp	.+158    	; 0xf60 <twim_interrupt_handler+0x134>

		} else {
			const uint8_t * const data = pkg->buffer;
     ec2:	16 96       	adiw	r26, 0x06	; 6
     ec4:	2d 91       	ld	r18, X+
     ec6:	3c 91       	ld	r19, X
     ec8:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     eca:	ac 01       	movw	r20, r24
     ecc:	4f 5f       	subi	r20, 0xFF	; 255
     ece:	5f 4f       	sbci	r21, 0xFF	; 255
     ed0:	40 93 ba 21 	sts	0x21BA, r20
     ed4:	50 93 bb 21 	sts	0x21BB, r21
     ed8:	d9 01       	movw	r26, r18
     eda:	a8 0f       	add	r26, r24
     edc:	b9 1f       	adc	r27, r25
     ede:	8c 91       	ld	r24, X
     ee0:	87 83       	std	Z+7, r24	; 0x07
     ee2:	3e c0       	rjmp	.+124    	; 0xf60 <twim_interrupt_handler+0x134>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     ee4:	83 e0       	ldi	r24, 0x03	; 3
     ee6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     ee8:	10 92 be 21 	sts	0x21BE, r1
     eec:	39 c0       	rjmp	.+114    	; 0xf60 <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     eee:	88 23       	and	r24, r24
     ef0:	a4 f5       	brge	.+104    	; 0xf5a <twim_interrupt_handler+0x12e>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     ef2:	a0 91 b6 21 	lds	r26, 0x21B6
     ef6:	b0 91 b7 21 	lds	r27, 0x21B7

	if (transfer.data_count < pkg->length) {
     efa:	80 91 ba 21 	lds	r24, 0x21BA
     efe:	90 91 bb 21 	lds	r25, 0x21BB
     f02:	18 96       	adiw	r26, 0x08	; 8
     f04:	2d 91       	ld	r18, X+
     f06:	3c 91       	ld	r19, X
     f08:	19 97       	sbiw	r26, 0x09	; 9
     f0a:	82 17       	cp	r24, r18
     f0c:	93 07       	cpc	r25, r19
     f0e:	f8 f4       	brcc	.+62     	; 0xf4e <twim_interrupt_handler+0x122>

		uint8_t * const data = pkg->buffer;
     f10:	16 96       	adiw	r26, 0x06	; 6
     f12:	4d 91       	ld	r20, X+
     f14:	5c 91       	ld	r21, X
     f16:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
     f18:	9c 01       	movw	r18, r24
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	20 93 ba 21 	sts	0x21BA, r18
     f22:	30 93 bb 21 	sts	0x21BB, r19
     f26:	67 81       	ldd	r22, Z+7	; 0x07
     f28:	ea 01       	movw	r28, r20
     f2a:	c8 0f       	add	r28, r24
     f2c:	d9 1f       	adc	r29, r25
     f2e:	68 83       	st	Y, r22

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     f30:	18 96       	adiw	r26, 0x08	; 8
     f32:	8d 91       	ld	r24, X+
     f34:	9c 91       	ld	r25, X
     f36:	19 97       	sbiw	r26, 0x09	; 9
     f38:	28 17       	cp	r18, r24
     f3a:	39 07       	cpc	r19, r25
     f3c:	18 f4       	brcc	.+6      	; 0xf44 <twim_interrupt_handler+0x118>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	83 83       	std	Z+3, r24	; 0x03
     f42:	0e c0       	rjmp	.+28     	; 0xf60 <twim_interrupt_handler+0x134>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     f44:	87 e0       	ldi	r24, 0x07	; 7
     f46:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     f48:	10 92 be 21 	sts	0x21BE, r1
     f4c:	09 c0       	rjmp	.+18     	; 0xf60 <twim_interrupt_handler+0x134>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     f52:	89 ef       	ldi	r24, 0xF9	; 249
     f54:	80 93 be 21 	sts	0x21BE, r24
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <twim_interrupt_handler+0x134>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     f5a:	8b ef       	ldi	r24, 0xFB	; 251
     f5c:	80 93 be 21 	sts	0x21BE, r24
	}
}
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret

00000f66 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     f66:	1f 92       	push	r1
     f68:	0f 92       	push	r0
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	0f 92       	push	r0
     f6e:	11 24       	eor	r1, r1
     f70:	2f 93       	push	r18
     f72:	3f 93       	push	r19
     f74:	4f 93       	push	r20
     f76:	5f 93       	push	r21
     f78:	6f 93       	push	r22
     f7a:	7f 93       	push	r23
     f7c:	8f 93       	push	r24
     f7e:	9f 93       	push	r25
     f80:	af 93       	push	r26
     f82:	bf 93       	push	r27
     f84:	ef 93       	push	r30
     f86:	ff 93       	push	r31
     f88:	51 df       	rcall	.-350    	; 0xe2c <twim_interrupt_handler>
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     fac:	1f 92       	push	r1
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
     fce:	2e df       	rcall	.-420    	; 0xe2c <twim_interrupt_handler>
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	bf 91       	pop	r27
     fd6:	af 91       	pop	r26
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	7f 91       	pop	r23
     fde:	6f 91       	pop	r22
     fe0:	5f 91       	pop	r21
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
     ff2:	81 11       	cpse	r24, r1
     ff4:	18 c0       	rjmp	.+48     	; 0x1026 <udd_sleep_mode+0x34>
     ff6:	90 91 ec 22 	lds	r25, 0x22EC
     ffa:	99 23       	and	r25, r25
     ffc:	89 f0       	breq	.+34     	; 0x1020 <udd_sleep_mode+0x2e>
     ffe:	9f b7       	in	r25, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	ee ef       	ldi	r30, 0xFE	; 254
    1004:	f2 e2       	ldi	r31, 0x22	; 34
    1006:	20 81       	ld	r18, Z
    1008:	21 50       	subi	r18, 0x01	; 1
    100a:	20 83       	st	Z, r18
    100c:	9f bf       	out	0x3f, r25	; 63
    100e:	08 c0       	rjmp	.+16     	; 0x1020 <udd_sleep_mode+0x2e>
    1010:	9f b7       	in	r25, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	ee ef       	ldi	r30, 0xFE	; 254
    1016:	f2 e2       	ldi	r31, 0x22	; 34
    1018:	20 81       	ld	r18, Z
    101a:	2f 5f       	subi	r18, 0xFF	; 255
    101c:	20 83       	st	Z, r18
    101e:	9f bf       	out	0x3f, r25	; 63
    1020:	80 93 ec 22 	sts	0x22EC, r24
    1024:	08 95       	ret
    1026:	90 91 ec 22 	lds	r25, 0x22EC
    102a:	99 23       	and	r25, r25
    102c:	89 f3       	breq	.-30     	; 0x1010 <udd_sleep_mode+0x1e>
    102e:	f8 cf       	rjmp	.-16     	; 0x1020 <udd_sleep_mode+0x2e>

00001030 <udd_ctrl_init>:
    1030:	0f 93       	push	r16
    1032:	e8 ec       	ldi	r30, 0xC8	; 200
    1034:	f4 e0       	ldi	r31, 0x04	; 4
    1036:	80 81       	ld	r24, Z
    1038:	8f 7d       	andi	r24, 0xDF	; 223
    103a:	80 83       	st	Z, r24
    103c:	80 81       	ld	r24, Z
    103e:	8f 7d       	andi	r24, 0xDF	; 223
    1040:	80 83       	st	Z, r24
    1042:	e0 ec       	ldi	r30, 0xC0	; 192
    1044:	f2 e2       	ldi	r31, 0x22	; 34
    1046:	02 e0       	ldi	r16, 0x02	; 2
    1048:	05 93       	las	Z, r16
    104a:	10 92 c2 22 	sts	0x22C2, r1
    104e:	10 92 c3 22 	sts	0x22C3, r1
    1052:	00 e2       	ldi	r16, 0x20	; 32
    1054:	06 93       	lac	Z, r16
    1056:	00 e4       	ldi	r16, 0x40	; 64
    1058:	06 93       	lac	Z, r16
    105a:	e8 eb       	ldi	r30, 0xB8	; 184
    105c:	f2 e2       	ldi	r31, 0x22	; 34
    105e:	00 e2       	ldi	r16, 0x20	; 32
    1060:	06 93       	lac	Z, r16
    1062:	00 e4       	ldi	r16, 0x40	; 64
    1064:	06 93       	lac	Z, r16
    1066:	10 92 f9 22 	sts	0x22F9, r1
    106a:	10 92 fa 22 	sts	0x22FA, r1
    106e:	10 92 fb 22 	sts	0x22FB, r1
    1072:	10 92 fc 22 	sts	0x22FC, r1
    1076:	10 92 f7 22 	sts	0x22F7, r1
    107a:	10 92 f8 22 	sts	0x22F8, r1
    107e:	10 92 a8 22 	sts	0x22A8, r1
    1082:	0f 91       	pop	r16
    1084:	08 95       	ret

00001086 <udd_ctrl_stall_data>:
    1086:	0f 93       	push	r16
    1088:	85 e0       	ldi	r24, 0x05	; 5
    108a:	80 93 a8 22 	sts	0x22A8, r24
    108e:	e1 ec       	ldi	r30, 0xC1	; 193
    1090:	f2 e2       	ldi	r31, 0x22	; 34
    1092:	04 e0       	ldi	r16, 0x04	; 4
    1094:	05 93       	las	Z, r16
    1096:	e9 eb       	ldi	r30, 0xB9	; 185
    1098:	f2 e2       	ldi	r31, 0x22	; 34
    109a:	04 e0       	ldi	r16, 0x04	; 4
    109c:	05 93       	las	Z, r16
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <udd_ctrl_send_zlp_in>:
    10a2:	0f 93       	push	r16
    10a4:	83 e0       	ldi	r24, 0x03	; 3
    10a6:	80 93 a8 22 	sts	0x22A8, r24
    10aa:	10 92 c2 22 	sts	0x22C2, r1
    10ae:	10 92 c3 22 	sts	0x22C3, r1
    10b2:	e0 ec       	ldi	r30, 0xC0	; 192
    10b4:	f2 e2       	ldi	r31, 0x22	; 34
    10b6:	02 e0       	ldi	r16, 0x02	; 2
    10b8:	06 93       	lac	Z, r16
    10ba:	0f 91       	pop	r16
    10bc:	08 95       	ret

000010be <udd_ctrl_endofrequest>:
    10be:	e0 91 f9 22 	lds	r30, 0x22F9
    10c2:	f0 91 fa 22 	lds	r31, 0x22FA
    10c6:	30 97       	sbiw	r30, 0x00	; 0
    10c8:	09 f0       	breq	.+2      	; 0x10cc <udd_ctrl_endofrequest+0xe>
    10ca:	09 95       	icall
    10cc:	08 95       	ret

000010ce <udd_ctrl_in_sent>:
    10ce:	0f 93       	push	r16
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	80 91 a8 22 	lds	r24, 0x22A8
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	19 f4       	brne	.+6      	; 0x10e2 <udd_ctrl_in_sent+0x14>
    10dc:	f0 df       	rcall	.-32     	; 0x10be <udd_ctrl_endofrequest>
    10de:	a8 df       	rcall	.-176    	; 0x1030 <udd_ctrl_init>
    10e0:	60 c0       	rjmp	.+192    	; 0x11a2 <udd_ctrl_in_sent+0xd4>
    10e2:	80 91 a4 22 	lds	r24, 0x22A4
    10e6:	90 91 a5 22 	lds	r25, 0x22A5
    10ea:	c0 91 f7 22 	lds	r28, 0x22F7
    10ee:	d0 91 f8 22 	lds	r29, 0x22F8
    10f2:	c8 1b       	sub	r28, r24
    10f4:	d9 0b       	sbc	r29, r25
    10f6:	71 f5       	brne	.+92     	; 0x1154 <udd_ctrl_in_sent+0x86>
    10f8:	20 91 a6 22 	lds	r18, 0x22A6
    10fc:	30 91 a7 22 	lds	r19, 0x22A7
    1100:	82 0f       	add	r24, r18
    1102:	93 1f       	adc	r25, r19
    1104:	80 93 a6 22 	sts	0x22A6, r24
    1108:	90 93 a7 22 	sts	0x22A7, r25
    110c:	20 91 f3 22 	lds	r18, 0x22F3
    1110:	30 91 f4 22 	lds	r19, 0x22F4
    1114:	82 17       	cp	r24, r18
    1116:	93 07       	cpc	r25, r19
    1118:	21 f0       	breq	.+8      	; 0x1122 <udd_ctrl_in_sent+0x54>
    111a:	80 91 bf 21 	lds	r24, 0x21BF
    111e:	88 23       	and	r24, r24
    1120:	41 f0       	breq	.+16     	; 0x1132 <udd_ctrl_in_sent+0x64>
    1122:	84 e0       	ldi	r24, 0x04	; 4
    1124:	80 93 a8 22 	sts	0x22A8, r24
    1128:	e8 eb       	ldi	r30, 0xB8	; 184
    112a:	f2 e2       	ldi	r31, 0x22	; 34
    112c:	02 e0       	ldi	r16, 0x02	; 2
    112e:	06 93       	lac	Z, r16
    1130:	38 c0       	rjmp	.+112    	; 0x11a2 <udd_ctrl_in_sent+0xd4>
    1132:	e0 91 fb 22 	lds	r30, 0x22FB
    1136:	f0 91 fc 22 	lds	r31, 0x22FC
    113a:	30 97       	sbiw	r30, 0x00	; 0
    113c:	99 f0       	breq	.+38     	; 0x1164 <udd_ctrl_in_sent+0x96>
    113e:	09 95       	icall
    1140:	88 23       	and	r24, r24
    1142:	81 f0       	breq	.+32     	; 0x1164 <udd_ctrl_in_sent+0x96>
    1144:	10 92 a4 22 	sts	0x22A4, r1
    1148:	10 92 a5 22 	sts	0x22A5, r1
    114c:	c0 91 f7 22 	lds	r28, 0x22F7
    1150:	d0 91 f8 22 	lds	r29, 0x22F8
    1154:	c0 34       	cpi	r28, 0x40	; 64
    1156:	d1 05       	cpc	r29, r1
    1158:	28 f0       	brcs	.+10     	; 0x1164 <udd_ctrl_in_sent+0x96>
    115a:	10 92 bf 21 	sts	0x21BF, r1
    115e:	c0 e4       	ldi	r28, 0x40	; 64
    1160:	d0 e0       	ldi	r29, 0x00	; 0
    1162:	03 c0       	rjmp	.+6      	; 0x116a <udd_ctrl_in_sent+0x9c>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	80 93 bf 21 	sts	0x21BF, r24
    116a:	c0 93 c2 22 	sts	0x22C2, r28
    116e:	d0 93 c3 22 	sts	0x22C3, r29
    1172:	80 91 a4 22 	lds	r24, 0x22A4
    1176:	90 91 a5 22 	lds	r25, 0x22A5
    117a:	20 91 f5 22 	lds	r18, 0x22F5
    117e:	30 91 f6 22 	lds	r19, 0x22F6
    1182:	28 0f       	add	r18, r24
    1184:	39 1f       	adc	r19, r25
    1186:	20 93 c4 22 	sts	0x22C4, r18
    118a:	30 93 c5 22 	sts	0x22C5, r19
    118e:	c8 0f       	add	r28, r24
    1190:	d9 1f       	adc	r29, r25
    1192:	c0 93 a4 22 	sts	0x22A4, r28
    1196:	d0 93 a5 22 	sts	0x22A5, r29
    119a:	e0 ec       	ldi	r30, 0xC0	; 192
    119c:	f2 e2       	ldi	r31, 0x22	; 34
    119e:	02 e0       	ldi	r16, 0x02	; 2
    11a0:	06 93       	lac	Z, r16
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	0f 91       	pop	r16
    11a8:	08 95       	ret

000011aa <udd_ep_get_size>:
    11aa:	fc 01       	movw	r30, r24
    11ac:	81 81       	ldd	r24, Z+1	; 0x01
    11ae:	87 70       	andi	r24, 0x07	; 7
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	fc 01       	movw	r30, r24
    11b4:	31 97       	sbiw	r30, 0x01	; 1
    11b6:	e7 30       	cpi	r30, 0x07	; 7
    11b8:	f1 05       	cpc	r31, r1
    11ba:	18 f4       	brcc	.+6      	; 0x11c2 <udd_ep_get_size+0x18>
    11bc:	e2 50       	subi	r30, 0x02	; 2
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	be c6       	rjmp	.+3452   	; 0x1f3e <__tablejump2__>
    11c2:	88 e0       	ldi	r24, 0x08	; 8
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	08 95       	ret
    11c8:	80 e2       	ldi	r24, 0x20	; 32
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	08 95       	ret
    11ce:	80 e4       	ldi	r24, 0x40	; 64
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	08 95       	ret
    11d4:	80 e8       	ldi	r24, 0x80	; 128
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	08 95       	ret
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	08 95       	ret
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	92 e0       	ldi	r25, 0x02	; 2
    11e4:	08 95       	ret
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	93 e0       	ldi	r25, 0x03	; 3
    11ea:	08 95       	ret
    11ec:	80 e1       	ldi	r24, 0x10	; 16
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	08 95       	ret

000011f2 <udd_ep_get_job>:
    11f2:	28 2f       	mov	r18, r24
    11f4:	2f 70       	andi	r18, 0x0F	; 15
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	22 0f       	add	r18, r18
    11fa:	33 1f       	adc	r19, r19
    11fc:	99 27       	eor	r25, r25
    11fe:	87 fd       	sbrc	r24, 7
    1200:	90 95       	com	r25
    1202:	88 27       	eor	r24, r24
    1204:	99 0f       	add	r25, r25
    1206:	88 1f       	adc	r24, r24
    1208:	99 27       	eor	r25, r25
    120a:	82 0f       	add	r24, r18
    120c:	93 1f       	adc	r25, r19
    120e:	02 97       	sbiw	r24, 0x02	; 2
    1210:	9c 01       	movw	r18, r24
    1212:	22 0f       	add	r18, r18
    1214:	33 1f       	adc	r19, r19
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	22 0f       	add	r18, r18
    121c:	33 1f       	adc	r19, r19
    121e:	82 0f       	add	r24, r18
    1220:	93 1f       	adc	r25, r19
    1222:	80 5c       	subi	r24, 0xC0	; 192
    1224:	9d 4d       	sbci	r25, 0xDD	; 221
    1226:	08 95       	ret

00001228 <udd_ctrl_interrupt_tc_setup>:
    1228:	0f 93       	push	r16
    122a:	cf 93       	push	r28
    122c:	80 91 cc 04 	lds	r24, 0x04CC
    1230:	80 ff       	sbrs	r24, 0
    1232:	62 c0       	rjmp	.+196    	; 0x12f8 <udd_ctrl_interrupt_tc_setup+0xd0>
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	80 93 cc 04 	sts	0x04CC, r24
    123a:	e8 eb       	ldi	r30, 0xB8	; 184
    123c:	f2 e2       	ldi	r31, 0x22	; 34
    123e:	00 e8       	ldi	r16, 0x80	; 128
    1240:	06 93       	lac	Z, r16
    1242:	e0 ec       	ldi	r30, 0xC0	; 192
    1244:	f2 e2       	ldi	r31, 0x22	; 34
    1246:	00 e8       	ldi	r16, 0x80	; 128
    1248:	06 93       	lac	Z, r16
    124a:	80 93 ca 04 	sts	0x04CA, r24
    124e:	e8 eb       	ldi	r30, 0xB8	; 184
    1250:	f2 e2       	ldi	r31, 0x22	; 34
    1252:	00 e1       	ldi	r16, 0x10	; 16
    1254:	06 93       	lac	Z, r16
    1256:	80 91 a8 22 	lds	r24, 0x22A8
    125a:	88 23       	and	r24, r24
    125c:	29 f0       	breq	.+10     	; 0x1268 <udd_ctrl_interrupt_tc_setup+0x40>
    125e:	83 50       	subi	r24, 0x03	; 3
    1260:	82 30       	cpi	r24, 0x02	; 2
    1262:	08 f4       	brcc	.+2      	; 0x1266 <udd_ctrl_interrupt_tc_setup+0x3e>
    1264:	2c df       	rcall	.-424    	; 0x10be <udd_ctrl_endofrequest>
    1266:	e4 de       	rcall	.-568    	; 0x1030 <udd_ctrl_init>
    1268:	80 91 ba 22 	lds	r24, 0x22BA
    126c:	90 91 bb 22 	lds	r25, 0x22BB
    1270:	08 97       	sbiw	r24, 0x08	; 8
    1272:	09 f0       	breq	.+2      	; 0x1276 <udd_ctrl_interrupt_tc_setup+0x4e>
    1274:	43 c0       	rjmp	.+134    	; 0x12fc <udd_ctrl_interrupt_tc_setup+0xd4>
    1276:	88 e0       	ldi	r24, 0x08	; 8
    1278:	e4 e6       	ldi	r30, 0x64	; 100
    127a:	f2 e2       	ldi	r31, 0x22	; 34
    127c:	ad ee       	ldi	r26, 0xED	; 237
    127e:	b2 e2       	ldi	r27, 0x22	; 34
    1280:	01 90       	ld	r0, Z+
    1282:	0d 92       	st	X+, r0
    1284:	8a 95       	dec	r24
    1286:	e1 f7       	brne	.-8      	; 0x1280 <udd_ctrl_interrupt_tc_setup+0x58>
    1288:	e8 ec       	ldi	r30, 0xC8	; 200
    128a:	f4 e0       	ldi	r31, 0x04	; 4
    128c:	80 81       	ld	r24, Z
    128e:	80 62       	ori	r24, 0x20	; 32
    1290:	80 83       	st	Z, r24
    1292:	80 81       	ld	r24, Z
    1294:	80 62       	ori	r24, 0x20	; 32
    1296:	80 83       	st	Z, r24
    1298:	3b db       	rcall	.-2442   	; 0x910 <udc_process_setup>
    129a:	c8 2f       	mov	r28, r24
    129c:	81 11       	cpse	r24, r1
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <udd_ctrl_interrupt_tc_setup+0x7e>
    12a0:	f2 de       	rcall	.-540    	; 0x1086 <udd_ctrl_stall_data>
    12a2:	c1 e0       	ldi	r28, 0x01	; 1
    12a4:	2c c0       	rjmp	.+88     	; 0x12fe <udd_ctrl_interrupt_tc_setup+0xd6>
    12a6:	80 91 ed 22 	lds	r24, 0x22ED
    12aa:	88 23       	and	r24, r24
    12ac:	6c f4       	brge	.+26     	; 0x12c8 <udd_ctrl_interrupt_tc_setup+0xa0>
    12ae:	10 92 a6 22 	sts	0x22A6, r1
    12b2:	10 92 a7 22 	sts	0x22A7, r1
    12b6:	10 92 a4 22 	sts	0x22A4, r1
    12ba:	10 92 a5 22 	sts	0x22A5, r1
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	80 93 a8 22 	sts	0x22A8, r24
    12c4:	04 df       	rcall	.-504    	; 0x10ce <udd_ctrl_in_sent>
    12c6:	1b c0       	rjmp	.+54     	; 0x12fe <udd_ctrl_interrupt_tc_setup+0xd6>
    12c8:	20 91 f3 22 	lds	r18, 0x22F3
    12cc:	30 91 f4 22 	lds	r19, 0x22F4
    12d0:	23 2b       	or	r18, r19
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <udd_ctrl_interrupt_tc_setup+0xb0>
    12d4:	e6 de       	rcall	.-564    	; 0x10a2 <udd_ctrl_send_zlp_in>
    12d6:	13 c0       	rjmp	.+38     	; 0x12fe <udd_ctrl_interrupt_tc_setup+0xd6>
    12d8:	10 92 a6 22 	sts	0x22A6, r1
    12dc:	10 92 a7 22 	sts	0x22A7, r1
    12e0:	10 92 a4 22 	sts	0x22A4, r1
    12e4:	10 92 a5 22 	sts	0x22A5, r1
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	80 93 a8 22 	sts	0x22A8, r24
    12ee:	e8 eb       	ldi	r30, 0xB8	; 184
    12f0:	f2 e2       	ldi	r31, 0x22	; 34
    12f2:	02 e0       	ldi	r16, 0x02	; 2
    12f4:	06 93       	lac	Z, r16
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <udd_ctrl_interrupt_tc_setup+0xd6>
    12f8:	c0 e0       	ldi	r28, 0x00	; 0
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <udd_ctrl_interrupt_tc_setup+0xd6>
    12fc:	c1 e0       	ldi	r28, 0x01	; 1
    12fe:	8c 2f       	mov	r24, r28
    1300:	cf 91       	pop	r28
    1302:	0f 91       	pop	r16
    1304:	08 95       	ret

00001306 <udd_ep_trans_complet>:
    1306:	bf 92       	push	r11
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	b8 2e       	mov	r11, r24
    131a:	6b df       	rcall	.-298    	; 0x11f2 <udd_ep_get_job>
    131c:	ec 01       	movw	r28, r24
    131e:	1b 2d       	mov	r17, r11
    1320:	11 1f       	adc	r17, r17
    1322:	11 27       	eor	r17, r17
    1324:	11 1f       	adc	r17, r17
    1326:	8b 2d       	mov	r24, r11
    1328:	8f 70       	andi	r24, 0x0F	; 15
    132a:	e8 2e       	mov	r14, r24
    132c:	f1 2c       	mov	r15, r1
    132e:	ee 0c       	add	r14, r14
    1330:	ff 1c       	adc	r15, r15
    1332:	e1 0e       	add	r14, r17
    1334:	f1 1c       	adc	r15, r1
    1336:	c7 01       	movw	r24, r14
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	9c 01       	movw	r18, r24
    1346:	28 54       	subi	r18, 0x48	; 72
    1348:	3d 4d       	sbci	r19, 0xDD	; 221
    134a:	79 01       	movw	r14, r18
    134c:	c9 01       	movw	r24, r18
    134e:	2d df       	rcall	.-422    	; 0x11aa <udd_ep_get_size>
    1350:	6c 01       	movw	r12, r24
    1352:	11 23       	and	r17, r17
    1354:	09 f4       	brne	.+2      	; 0x1358 <udd_ep_trans_complet+0x52>
    1356:	59 c0       	rjmp	.+178    	; 0x140a <udd_ep_trans_complet+0x104>
    1358:	d7 01       	movw	r26, r14
    135a:	16 96       	adiw	r26, 0x06	; 6
    135c:	2d 91       	ld	r18, X+
    135e:	3c 91       	ld	r19, X
    1360:	17 97       	sbiw	r26, 0x07	; 7
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	28 0f       	add	r18, r24
    1368:	39 1f       	adc	r19, r25
    136a:	2d 83       	std	Y+5, r18	; 0x05
    136c:	3e 83       	std	Y+6, r19	; 0x06
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	28 17       	cp	r18, r24
    1374:	39 07       	cpc	r19, r25
    1376:	b9 f1       	breq	.+110    	; 0x13e6 <udd_ep_trans_complet+0xe0>
    1378:	fc 01       	movw	r30, r24
    137a:	e2 1b       	sub	r30, r18
    137c:	f3 0b       	sbc	r31, r19
    137e:	9f 01       	movw	r18, r30
    1380:	21 15       	cp	r18, r1
    1382:	f4 e0       	ldi	r31, 0x04	; 4
    1384:	3f 07       	cpc	r19, r31
    1386:	38 f0       	brcs	.+14     	; 0x1396 <udd_ep_trans_complet+0x90>
    1388:	2f ef       	ldi	r18, 0xFF	; 255
    138a:	33 e0       	ldi	r19, 0x03	; 3
    138c:	c9 01       	movw	r24, r18
    138e:	b6 01       	movw	r22, r12
    1390:	c2 d5       	rcall	.+2948   	; 0x1f16 <__udivmodhi4>
    1392:	28 1b       	sub	r18, r24
    1394:	39 0b       	sbc	r19, r25
    1396:	88 81       	ld	r24, Y
    1398:	81 ff       	sbrs	r24, 1
    139a:	09 c0       	rjmp	.+18     	; 0x13ae <udd_ep_trans_complet+0xa8>
    139c:	c9 01       	movw	r24, r18
    139e:	b6 01       	movw	r22, r12
    13a0:	ba d5       	rcall	.+2932   	; 0x1f16 <__udivmodhi4>
    13a2:	41 e0       	ldi	r20, 0x01	; 1
    13a4:	89 2b       	or	r24, r25
    13a6:	09 f0       	breq	.+2      	; 0x13aa <udd_ep_trans_complet+0xa4>
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	94 2f       	mov	r25, r20
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <udd_ep_trans_complet+0xaa>
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	88 81       	ld	r24, Y
    13b2:	90 fb       	bst	r25, 0
    13b4:	81 f9       	bld	r24, 1
    13b6:	88 83       	st	Y, r24
    13b8:	d7 01       	movw	r26, r14
    13ba:	16 96       	adiw	r26, 0x06	; 6
    13bc:	1d 92       	st	X+, r1
    13be:	1c 92       	st	X, r1
    13c0:	17 97       	sbiw	r26, 0x07	; 7
    13c2:	12 96       	adiw	r26, 0x02	; 2
    13c4:	2d 93       	st	X+, r18
    13c6:	3c 93       	st	X, r19
    13c8:	13 97       	sbiw	r26, 0x03	; 3
    13ca:	29 81       	ldd	r18, Y+1	; 0x01
    13cc:	3a 81       	ldd	r19, Y+2	; 0x02
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	82 0f       	add	r24, r18
    13d4:	93 1f       	adc	r25, r19
    13d6:	14 96       	adiw	r26, 0x04	; 4
    13d8:	8d 93       	st	X+, r24
    13da:	9c 93       	st	X, r25
    13dc:	15 97       	sbiw	r26, 0x05	; 5
    13de:	f7 01       	movw	r30, r14
    13e0:	02 e0       	ldi	r16, 0x02	; 2
    13e2:	06 93       	lac	Z, r16
    13e4:	94 c0       	rjmp	.+296    	; 0x150e <udd_ep_trans_complet+0x208>
    13e6:	88 81       	ld	r24, Y
    13e8:	81 ff       	sbrs	r24, 1
    13ea:	83 c0       	rjmp	.+262    	; 0x14f2 <udd_ep_trans_complet+0x1ec>
    13ec:	8d 7f       	andi	r24, 0xFD	; 253
    13ee:	88 83       	st	Y, r24
    13f0:	d7 01       	movw	r26, r14
    13f2:	16 96       	adiw	r26, 0x06	; 6
    13f4:	1d 92       	st	X+, r1
    13f6:	1c 92       	st	X, r1
    13f8:	17 97       	sbiw	r26, 0x07	; 7
    13fa:	12 96       	adiw	r26, 0x02	; 2
    13fc:	1d 92       	st	X+, r1
    13fe:	1c 92       	st	X, r1
    1400:	13 97       	sbiw	r26, 0x03	; 3
    1402:	f7 01       	movw	r30, r14
    1404:	02 e0       	ldi	r16, 0x02	; 2
    1406:	06 93       	lac	Z, r16
    1408:	82 c0       	rjmp	.+260    	; 0x150e <udd_ep_trans_complet+0x208>
    140a:	d7 01       	movw	r26, r14
    140c:	12 96       	adiw	r26, 0x02	; 2
    140e:	0d 91       	ld	r16, X+
    1410:	1c 91       	ld	r17, X
    1412:	13 97       	sbiw	r26, 0x03	; 3
    1414:	88 81       	ld	r24, Y
    1416:	82 ff       	sbrs	r24, 2
    1418:	13 c0       	rjmp	.+38     	; 0x1440 <udd_ep_trans_complet+0x13a>
    141a:	e9 81       	ldd	r30, Y+1	; 0x01
    141c:	fa 81       	ldd	r31, Y+2	; 0x02
    141e:	2d 81       	ldd	r18, Y+5	; 0x05
    1420:	3e 81       	ldd	r19, Y+6	; 0x06
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	b6 01       	movw	r22, r12
    1428:	76 d5       	rcall	.+2796   	; 0x1f16 <__udivmodhi4>
    142a:	b0 e4       	ldi	r27, 0x40	; 64
    142c:	bb 9e       	mul	r11, r27
    142e:	b0 01       	movw	r22, r0
    1430:	11 24       	eor	r1, r1
    1432:	60 58       	subi	r22, 0x80	; 128
    1434:	7e 4d       	sbci	r23, 0xDE	; 222
    1436:	ac 01       	movw	r20, r24
    1438:	cf 01       	movw	r24, r30
    143a:	82 0f       	add	r24, r18
    143c:	93 1f       	adc	r25, r19
    143e:	85 d5       	rcall	.+2826   	; 0x1f4a <memcpy>
    1440:	2d 81       	ldd	r18, Y+5	; 0x05
    1442:	3e 81       	ldd	r19, Y+6	; 0x06
    1444:	20 0f       	add	r18, r16
    1446:	31 1f       	adc	r19, r17
    1448:	2d 83       	std	Y+5, r18	; 0x05
    144a:	3e 83       	std	Y+6, r19	; 0x06
    144c:	eb 81       	ldd	r30, Y+3	; 0x03
    144e:	fc 81       	ldd	r31, Y+4	; 0x04
    1450:	e2 17       	cp	r30, r18
    1452:	f3 07       	cpc	r31, r19
    1454:	10 f4       	brcc	.+4      	; 0x145a <udd_ep_trans_complet+0x154>
    1456:	ed 83       	std	Y+5, r30	; 0x05
    1458:	fe 83       	std	Y+6, r31	; 0x06
    145a:	d7 01       	movw	r26, r14
    145c:	16 96       	adiw	r26, 0x06	; 6
    145e:	8d 91       	ld	r24, X+
    1460:	9c 91       	ld	r25, X
    1462:	17 97       	sbiw	r26, 0x07	; 7
    1464:	80 17       	cp	r24, r16
    1466:	91 07       	cpc	r25, r17
    1468:	09 f0       	breq	.+2      	; 0x146c <udd_ep_trans_complet+0x166>
    146a:	43 c0       	rjmp	.+134    	; 0x14f2 <udd_ep_trans_complet+0x1ec>
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	9e 81       	ldd	r25, Y+6	; 0x06
    1470:	e8 17       	cp	r30, r24
    1472:	f9 07       	cpc	r31, r25
    1474:	09 f4       	brne	.+2      	; 0x1478 <udd_ep_trans_complet+0x172>
    1476:	3d c0       	rjmp	.+122    	; 0x14f2 <udd_ep_trans_complet+0x1ec>
    1478:	e8 1b       	sub	r30, r24
    147a:	f9 0b       	sbc	r31, r25
    147c:	e1 15       	cp	r30, r1
    147e:	b4 e0       	ldi	r27, 0x04	; 4
    1480:	fb 07       	cpc	r31, r27
    1482:	40 f0       	brcs	.+16     	; 0x1494 <udd_ep_trans_complet+0x18e>
    1484:	ef ef       	ldi	r30, 0xFF	; 255
    1486:	f3 e0       	ldi	r31, 0x03	; 3
    1488:	cf 01       	movw	r24, r30
    148a:	b6 01       	movw	r22, r12
    148c:	44 d5       	rcall	.+2696   	; 0x1f16 <__udivmodhi4>
    148e:	e8 1b       	sub	r30, r24
    1490:	f9 0b       	sbc	r31, r25
    1492:	05 c0       	rjmp	.+10     	; 0x149e <udd_ep_trans_complet+0x198>
    1494:	cf 01       	movw	r24, r30
    1496:	b6 01       	movw	r22, r12
    1498:	3e d5       	rcall	.+2684   	; 0x1f16 <__udivmodhi4>
    149a:	e8 1b       	sub	r30, r24
    149c:	f9 0b       	sbc	r31, r25
    149e:	d7 01       	movw	r26, r14
    14a0:	12 96       	adiw	r26, 0x02	; 2
    14a2:	1d 92       	st	X+, r1
    14a4:	1c 92       	st	X, r1
    14a6:	13 97       	sbiw	r26, 0x03	; 3
    14a8:	ec 15       	cp	r30, r12
    14aa:	fd 05       	cpc	r31, r13
    14ac:	78 f4       	brcc	.+30     	; 0x14cc <udd_ep_trans_complet+0x1c6>
    14ae:	88 81       	ld	r24, Y
    14b0:	84 60       	ori	r24, 0x04	; 4
    14b2:	88 83       	st	Y, r24
    14b4:	b0 e4       	ldi	r27, 0x40	; 64
    14b6:	bb 9e       	mul	r11, r27
    14b8:	c0 01       	movw	r24, r0
    14ba:	11 24       	eor	r1, r1
    14bc:	80 58       	subi	r24, 0x80	; 128
    14be:	9e 4d       	sbci	r25, 0xDE	; 222
    14c0:	f7 01       	movw	r30, r14
    14c2:	84 83       	std	Z+4, r24	; 0x04
    14c4:	95 83       	std	Z+5, r25	; 0x05
    14c6:	c6 82       	std	Z+6, r12	; 0x06
    14c8:	d7 82       	std	Z+7, r13	; 0x07
    14ca:	0f c0       	rjmp	.+30     	; 0x14ea <udd_ep_trans_complet+0x1e4>
    14cc:	29 81       	ldd	r18, Y+1	; 0x01
    14ce:	3a 81       	ldd	r19, Y+2	; 0x02
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	82 0f       	add	r24, r18
    14d6:	93 1f       	adc	r25, r19
    14d8:	d7 01       	movw	r26, r14
    14da:	14 96       	adiw	r26, 0x04	; 4
    14dc:	8d 93       	st	X+, r24
    14de:	9c 93       	st	X, r25
    14e0:	15 97       	sbiw	r26, 0x05	; 5
    14e2:	16 96       	adiw	r26, 0x06	; 6
    14e4:	ed 93       	st	X+, r30
    14e6:	fc 93       	st	X, r31
    14e8:	17 97       	sbiw	r26, 0x07	; 7
    14ea:	f7 01       	movw	r30, r14
    14ec:	02 e0       	ldi	r16, 0x02	; 2
    14ee:	06 93       	lac	Z, r16
    14f0:	0e c0       	rjmp	.+28     	; 0x150e <udd_ep_trans_complet+0x208>
    14f2:	88 81       	ld	r24, Y
    14f4:	80 ff       	sbrs	r24, 0
    14f6:	0b c0       	rjmp	.+22     	; 0x150e <udd_ep_trans_complet+0x208>
    14f8:	8e 7f       	andi	r24, 0xFE	; 254
    14fa:	88 83       	st	Y, r24
    14fc:	ef 81       	ldd	r30, Y+7	; 0x07
    14fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1500:	30 97       	sbiw	r30, 0x00	; 0
    1502:	29 f0       	breq	.+10     	; 0x150e <udd_ep_trans_complet+0x208>
    1504:	6d 81       	ldd	r22, Y+5	; 0x05
    1506:	7e 81       	ldd	r23, Y+6	; 0x06
    1508:	4b 2d       	mov	r20, r11
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	09 95       	icall
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	df 90       	pop	r13
    151c:	cf 90       	pop	r12
    151e:	bf 90       	pop	r11
    1520:	08 95       	ret

00001522 <udd_is_high_speed>:
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	08 95       	ret

00001526 <udd_set_address>:
    1526:	80 93 c3 04 	sts	0x04C3, r24
    152a:	08 95       	ret

0000152c <udd_getaddress>:
    152c:	80 91 c3 04 	lds	r24, 0x04C3
    1530:	08 95       	ret

00001532 <udd_get_frame_number>:
    1532:	80 91 e8 22 	lds	r24, 0x22E8
    1536:	90 91 e9 22 	lds	r25, 0x22E9
    153a:	08 95       	ret

0000153c <udd_get_micro_frame_number>:
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	08 95       	ret

00001542 <udd_set_setup_payload>:
    1542:	80 93 f5 22 	sts	0x22F5, r24
    1546:	90 93 f6 22 	sts	0x22F6, r25
    154a:	60 93 f7 22 	sts	0x22F7, r22
    154e:	70 93 f8 22 	sts	0x22F8, r23
    1552:	08 95       	ret

00001554 <udd_ep_alloc>:
    1554:	e8 2f       	mov	r30, r24
    1556:	ef 70       	andi	r30, 0x0F	; 15
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	ee 0f       	add	r30, r30
    155c:	ff 1f       	adc	r31, r31
    155e:	99 27       	eor	r25, r25
    1560:	87 fd       	sbrc	r24, 7
    1562:	90 95       	com	r25
    1564:	88 27       	eor	r24, r24
    1566:	99 0f       	add	r25, r25
    1568:	88 1f       	adc	r24, r24
    156a:	99 27       	eor	r25, r25
    156c:	e8 0f       	add	r30, r24
    156e:	f9 1f       	adc	r31, r25
    1570:	ee 0f       	add	r30, r30
    1572:	ff 1f       	adc	r31, r31
    1574:	ee 0f       	add	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	e8 54       	subi	r30, 0x48	; 72
    157e:	fd 4d       	sbci	r31, 0xDD	; 221
    1580:	81 81       	ldd	r24, Z+1	; 0x01
    1582:	80 7c       	andi	r24, 0xC0	; 192
    1584:	09 f0       	breq	.+2      	; 0x1588 <udd_ep_alloc+0x34>
    1586:	43 c0       	rjmp	.+134    	; 0x160e <udd_ep_alloc+0xba>
    1588:	63 70       	andi	r22, 0x03	; 3
    158a:	61 30       	cpi	r22, 0x01	; 1
    158c:	29 f0       	breq	.+10     	; 0x1598 <udd_ep_alloc+0x44>
    158e:	10 f4       	brcc	.+4      	; 0x1594 <udd_ep_alloc+0x40>
    1590:	80 e4       	ldi	r24, 0x40	; 64
    1592:	03 c0       	rjmp	.+6      	; 0x159a <udd_ep_alloc+0x46>
    1594:	80 e8       	ldi	r24, 0x80	; 128
    1596:	01 c0       	rjmp	.+2      	; 0x159a <udd_ep_alloc+0x46>
    1598:	80 ec       	ldi	r24, 0xC0	; 192
    159a:	40 38       	cpi	r20, 0x80	; 128
    159c:	51 05       	cpc	r21, r1
    159e:	e1 f0       	breq	.+56     	; 0x15d8 <udd_ep_alloc+0x84>
    15a0:	50 f4       	brcc	.+20     	; 0x15b6 <udd_ep_alloc+0x62>
    15a2:	40 32       	cpi	r20, 0x20	; 32
    15a4:	51 05       	cpc	r21, r1
    15a6:	a1 f0       	breq	.+40     	; 0x15d0 <udd_ep_alloc+0x7c>
    15a8:	40 34       	cpi	r20, 0x40	; 64
    15aa:	51 05       	cpc	r21, r1
    15ac:	99 f0       	breq	.+38     	; 0x15d4 <udd_ep_alloc+0x80>
    15ae:	40 31       	cpi	r20, 0x10	; 16
    15b0:	51 05       	cpc	r21, r1
    15b2:	61 f4       	brne	.+24     	; 0x15cc <udd_ep_alloc+0x78>
    15b4:	19 c0       	rjmp	.+50     	; 0x15e8 <udd_ep_alloc+0x94>
    15b6:	41 15       	cp	r20, r1
    15b8:	92 e0       	ldi	r25, 0x02	; 2
    15ba:	59 07       	cpc	r21, r25
    15bc:	89 f0       	breq	.+34     	; 0x15e0 <udd_ep_alloc+0x8c>
    15be:	4f 3f       	cpi	r20, 0xFF	; 255
    15c0:	93 e0       	ldi	r25, 0x03	; 3
    15c2:	59 07       	cpc	r21, r25
    15c4:	79 f0       	breq	.+30     	; 0x15e4 <udd_ep_alloc+0x90>
    15c6:	41 15       	cp	r20, r1
    15c8:	51 40       	sbci	r21, 0x01	; 1
    15ca:	41 f0       	breq	.+16     	; 0x15dc <udd_ep_alloc+0x88>
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	0d c0       	rjmp	.+26     	; 0x15ea <udd_ep_alloc+0x96>
    15d0:	22 e0       	ldi	r18, 0x02	; 2
    15d2:	0b c0       	rjmp	.+22     	; 0x15ea <udd_ep_alloc+0x96>
    15d4:	23 e0       	ldi	r18, 0x03	; 3
    15d6:	09 c0       	rjmp	.+18     	; 0x15ea <udd_ep_alloc+0x96>
    15d8:	24 e0       	ldi	r18, 0x04	; 4
    15da:	07 c0       	rjmp	.+14     	; 0x15ea <udd_ep_alloc+0x96>
    15dc:	25 e0       	ldi	r18, 0x05	; 5
    15de:	05 c0       	rjmp	.+10     	; 0x15ea <udd_ep_alloc+0x96>
    15e0:	26 e0       	ldi	r18, 0x06	; 6
    15e2:	03 c0       	rjmp	.+6      	; 0x15ea <udd_ep_alloc+0x96>
    15e4:	27 e0       	ldi	r18, 0x07	; 7
    15e6:	01 c0       	rjmp	.+2      	; 0x15ea <udd_ep_alloc+0x96>
    15e8:	21 e0       	ldi	r18, 0x01	; 1
    15ea:	11 82       	std	Z+1, r1	; 0x01
    15ec:	96 e0       	ldi	r25, 0x06	; 6
    15ee:	90 83       	st	Z, r25
    15f0:	82 2b       	or	r24, r18
    15f2:	81 83       	std	Z+1, r24	; 0x01
    15f4:	81 81       	ldd	r24, Z+1	; 0x01
    15f6:	80 7c       	andi	r24, 0xC0	; 192
    15f8:	80 3c       	cpi	r24, 0xC0	; 192
    15fa:	21 f4       	brne	.+8      	; 0x1604 <udd_ep_alloc+0xb0>
    15fc:	81 81       	ldd	r24, Z+1	; 0x01
    15fe:	87 70       	andi	r24, 0x07	; 7
    1600:	87 30       	cpi	r24, 0x07	; 7
    1602:	39 f0       	breq	.+14     	; 0x1612 <udd_ep_alloc+0xbe>
    1604:	81 81       	ldd	r24, Z+1	; 0x01
    1606:	80 62       	ori	r24, 0x20	; 32
    1608:	81 83       	std	Z+1, r24	; 0x01
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	08 95       	ret
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	08 95       	ret
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	08 95       	ret

00001616 <udd_ep_is_halted>:
    1616:	e8 2f       	mov	r30, r24
    1618:	ef 70       	andi	r30, 0x0F	; 15
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	ee 0f       	add	r30, r30
    161e:	ff 1f       	adc	r31, r31
    1620:	99 27       	eor	r25, r25
    1622:	87 fd       	sbrc	r24, 7
    1624:	90 95       	com	r25
    1626:	88 27       	eor	r24, r24
    1628:	99 0f       	add	r25, r25
    162a:	88 1f       	adc	r24, r24
    162c:	99 27       	eor	r25, r25
    162e:	e8 0f       	add	r30, r24
    1630:	f9 1f       	adc	r31, r25
    1632:	ee 0f       	add	r30, r30
    1634:	ff 1f       	adc	r31, r31
    1636:	ee 0f       	add	r30, r30
    1638:	ff 1f       	adc	r31, r31
    163a:	ee 0f       	add	r30, r30
    163c:	ff 1f       	adc	r31, r31
    163e:	e8 54       	subi	r30, 0x48	; 72
    1640:	fd 4d       	sbci	r31, 0xDD	; 221
    1642:	81 81       	ldd	r24, Z+1	; 0x01
    1644:	82 fb       	bst	r24, 2
    1646:	88 27       	eor	r24, r24
    1648:	80 f9       	bld	r24, 0
    164a:	08 95       	ret

0000164c <udd_ep_clear_halt>:
    164c:	e8 2f       	mov	r30, r24
    164e:	ef 70       	andi	r30, 0x0F	; 15
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	ee 0f       	add	r30, r30
    1654:	ff 1f       	adc	r31, r31
    1656:	28 2f       	mov	r18, r24
    1658:	33 27       	eor	r19, r19
    165a:	27 fd       	sbrc	r18, 7
    165c:	30 95       	com	r19
    165e:	22 27       	eor	r18, r18
    1660:	33 0f       	add	r19, r19
    1662:	22 1f       	adc	r18, r18
    1664:	33 27       	eor	r19, r19
    1666:	e2 0f       	add	r30, r18
    1668:	f3 1f       	adc	r31, r19
    166a:	ee 0f       	add	r30, r30
    166c:	ff 1f       	adc	r31, r31
    166e:	ee 0f       	add	r30, r30
    1670:	ff 1f       	adc	r31, r31
    1672:	ee 0f       	add	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	e8 54       	subi	r30, 0x48	; 72
    1678:	fd 4d       	sbci	r31, 0xDD	; 221
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	92 ff       	sbrs	r25, 2
    167e:	0e c0       	rjmp	.+28     	; 0x169c <udd_ep_clear_halt+0x50>
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	9b 7f       	andi	r25, 0xFB	; 251
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	b5 dd       	rcall	.-1174   	; 0x11f2 <udd_ep_get_job>
    1688:	fc 01       	movw	r30, r24
    168a:	80 81       	ld	r24, Z
    168c:	80 ff       	sbrs	r24, 0
    168e:	06 c0       	rjmp	.+12     	; 0x169c <udd_ep_clear_halt+0x50>
    1690:	8e 7f       	andi	r24, 0xFE	; 254
    1692:	80 83       	st	Z, r24
    1694:	07 80       	ldd	r0, Z+7	; 0x07
    1696:	f0 85       	ldd	r31, Z+8	; 0x08
    1698:	e0 2d       	mov	r30, r0
    169a:	09 95       	icall
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	08 95       	ret

000016a0 <udd_ep_run>:
    16a0:	7f 92       	push	r7
    16a2:	8f 92       	push	r8
    16a4:	9f 92       	push	r9
    16a6:	af 92       	push	r10
    16a8:	bf 92       	push	r11
    16aa:	cf 92       	push	r12
    16ac:	df 92       	push	r13
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	98 2e       	mov	r9, r24
    16bc:	86 2e       	mov	r8, r22
    16be:	5a 01       	movw	r10, r20
    16c0:	69 01       	movw	r12, r18
    16c2:	97 dd       	rcall	.-1234   	; 0x11f2 <udd_ep_get_job>
    16c4:	7c 01       	movw	r14, r24
    16c6:	79 2c       	mov	r7, r9
    16c8:	77 1c       	adc	r7, r7
    16ca:	77 24       	eor	r7, r7
    16cc:	77 1c       	adc	r7, r7
    16ce:	c9 2d       	mov	r28, r9
    16d0:	cf 70       	andi	r28, 0x0F	; 15
    16d2:	d0 e0       	ldi	r29, 0x00	; 0
    16d4:	cc 0f       	add	r28, r28
    16d6:	dd 1f       	adc	r29, r29
    16d8:	c7 0d       	add	r28, r7
    16da:	d1 1d       	adc	r29, r1
    16dc:	cc 0f       	add	r28, r28
    16de:	dd 1f       	adc	r29, r29
    16e0:	cc 0f       	add	r28, r28
    16e2:	dd 1f       	adc	r29, r29
    16e4:	cc 0f       	add	r28, r28
    16e6:	dd 1f       	adc	r29, r29
    16e8:	c8 54       	subi	r28, 0x48	; 72
    16ea:	dd 4d       	sbci	r29, 0xDD	; 221
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	80 7c       	andi	r24, 0xC0	; 192
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <udd_ep_run+0x54>
    16f2:	4b c0       	rjmp	.+150    	; 0x178a <udd_ep_run+0xea>
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	80 7c       	andi	r24, 0xC0	; 192
    16f8:	80 3c       	cpi	r24, 0xC0	; 192
    16fa:	19 f0       	breq	.+6      	; 0x1702 <udd_ep_run+0x62>
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	82 fd       	sbrc	r24, 2
    1700:	46 c0       	rjmp	.+140    	; 0x178e <udd_ep_run+0xee>
    1702:	8f b7       	in	r24, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	f7 01       	movw	r30, r14
    1708:	90 81       	ld	r25, Z
    170a:	90 ff       	sbrs	r25, 0
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <udd_ep_run+0x74>
    170e:	8f bf       	out	0x3f, r24	; 63
    1710:	71 2c       	mov	r7, r1
    1712:	3e c0       	rjmp	.+124    	; 0x1790 <udd_ep_run+0xf0>
    1714:	f7 01       	movw	r30, r14
    1716:	90 81       	ld	r25, Z
    1718:	91 60       	ori	r25, 0x01	; 1
    171a:	90 83       	st	Z, r25
    171c:	8f bf       	out	0x3f, r24	; 63
    171e:	f7 01       	movw	r30, r14
    1720:	a1 82       	std	Z+1, r10	; 0x01
    1722:	b2 82       	std	Z+2, r11	; 0x02
    1724:	c3 82       	std	Z+3, r12	; 0x03
    1726:	d4 82       	std	Z+4, r13	; 0x04
    1728:	15 82       	std	Z+5, r1	; 0x05
    172a:	16 82       	std	Z+6, r1	; 0x06
    172c:	07 83       	std	Z+7, r16	; 0x07
    172e:	10 87       	std	Z+8, r17	; 0x08
    1730:	81 10       	cpse	r8, r1
    1732:	06 c0       	rjmp	.+12     	; 0x1740 <udd_ep_run+0xa0>
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	c1 14       	cp	r12, r1
    1738:	d1 04       	cpc	r13, r1
    173a:	19 f0       	breq	.+6      	; 0x1742 <udd_ep_run+0xa2>
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <udd_ep_run+0xa2>
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	f7 01       	movw	r30, r14
    1744:	80 81       	ld	r24, Z
    1746:	90 fb       	bst	r25, 0
    1748:	81 f9       	bld	r24, 1
    174a:	8b 7f       	andi	r24, 0xFB	; 251
    174c:	80 83       	st	Z, r24
    174e:	77 20       	and	r7, r7
    1750:	19 f0       	breq	.+6      	; 0x1758 <udd_ep_run+0xb8>
    1752:	1e 82       	std	Y+6, r1	; 0x06
    1754:	1f 82       	std	Y+7, r1	; 0x07
    1756:	14 c0       	rjmp	.+40     	; 0x1780 <udd_ep_run+0xe0>
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	80 7c       	andi	r24, 0xC0	; 192
    175c:	80 3c       	cpi	r24, 0xC0	; 192
    175e:	61 f4       	brne	.+24     	; 0x1778 <udd_ep_run+0xd8>
    1760:	ce 01       	movw	r24, r28
    1762:	23 dd       	rcall	.-1466   	; 0x11aa <udd_ep_get_size>
    1764:	bc 01       	movw	r22, r24
    1766:	c6 01       	movw	r24, r12
    1768:	d6 d3       	rcall	.+1964   	; 0x1f16 <__udivmodhi4>
    176a:	89 2b       	or	r24, r25
    176c:	29 f0       	breq	.+10     	; 0x1778 <udd_ep_run+0xd8>
    176e:	f7 01       	movw	r30, r14
    1770:	80 81       	ld	r24, Z
    1772:	8e 7f       	andi	r24, 0xFE	; 254
    1774:	80 83       	st	Z, r24
    1776:	0c c0       	rjmp	.+24     	; 0x1790 <udd_ep_run+0xf0>
    1778:	1a 82       	std	Y+2, r1	; 0x02
    177a:	1b 82       	std	Y+3, r1	; 0x03
    177c:	1e 82       	std	Y+6, r1	; 0x06
    177e:	1f 82       	std	Y+7, r1	; 0x07
    1780:	89 2d       	mov	r24, r9
    1782:	c1 dd       	rcall	.-1150   	; 0x1306 <udd_ep_trans_complet>
    1784:	77 24       	eor	r7, r7
    1786:	73 94       	inc	r7
    1788:	03 c0       	rjmp	.+6      	; 0x1790 <udd_ep_run+0xf0>
    178a:	71 2c       	mov	r7, r1
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <udd_ep_run+0xf0>
    178e:	71 2c       	mov	r7, r1
    1790:	87 2d       	mov	r24, r7
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	df 90       	pop	r13
    17a0:	cf 90       	pop	r12
    17a2:	bf 90       	pop	r11
    17a4:	af 90       	pop	r10
    17a6:	9f 90       	pop	r9
    17a8:	8f 90       	pop	r8
    17aa:	7f 90       	pop	r7
    17ac:	08 95       	ret

000017ae <udd_ep_abort>:
    17ae:	ff 92       	push	r15
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	18 2f       	mov	r17, r24
    17ba:	f8 2e       	mov	r15, r24
    17bc:	ff 1c       	adc	r15, r15
    17be:	ff 24       	eor	r15, r15
    17c0:	ff 1c       	adc	r15, r15
    17c2:	c8 2f       	mov	r28, r24
    17c4:	cf 70       	andi	r28, 0x0F	; 15
    17c6:	d0 e0       	ldi	r29, 0x00	; 0
    17c8:	cc 0f       	add	r28, r28
    17ca:	dd 1f       	adc	r29, r29
    17cc:	cf 0d       	add	r28, r15
    17ce:	d1 1d       	adc	r29, r1
    17d0:	cc 0f       	add	r28, r28
    17d2:	dd 1f       	adc	r29, r29
    17d4:	cc 0f       	add	r28, r28
    17d6:	dd 1f       	adc	r29, r29
    17d8:	cc 0f       	add	r28, r28
    17da:	dd 1f       	adc	r29, r29
    17dc:	c8 54       	subi	r28, 0x48	; 72
    17de:	dd 4d       	sbci	r29, 0xDD	; 221
    17e0:	08 dd       	rcall	.-1520   	; 0x11f2 <udd_ep_get_job>
    17e2:	dc 01       	movw	r26, r24
    17e4:	fe 01       	movw	r30, r28
    17e6:	02 e0       	ldi	r16, 0x02	; 2
    17e8:	05 93       	las	Z, r16
    17ea:	8c 91       	ld	r24, X
    17ec:	80 ff       	sbrs	r24, 0
    17ee:	12 c0       	rjmp	.+36     	; 0x1814 <udd_ep_abort+0x66>
    17f0:	8e 7f       	andi	r24, 0xFE	; 254
    17f2:	8c 93       	st	X, r24
    17f4:	17 96       	adiw	r26, 0x07	; 7
    17f6:	ed 91       	ld	r30, X+
    17f8:	fc 91       	ld	r31, X
    17fa:	18 97       	sbiw	r26, 0x08	; 8
    17fc:	30 97       	sbiw	r30, 0x00	; 0
    17fe:	51 f0       	breq	.+20     	; 0x1814 <udd_ep_abort+0x66>
    1800:	ff 20       	and	r15, r15
    1802:	19 f0       	breq	.+6      	; 0x180a <udd_ep_abort+0x5c>
    1804:	6e 81       	ldd	r22, Y+6	; 0x06
    1806:	7f 81       	ldd	r23, Y+7	; 0x07
    1808:	02 c0       	rjmp	.+4      	; 0x180e <udd_ep_abort+0x60>
    180a:	6a 81       	ldd	r22, Y+2	; 0x02
    180c:	7b 81       	ldd	r23, Y+3	; 0x03
    180e:	41 2f       	mov	r20, r17
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	09 95       	icall
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	08 95       	ret

00001820 <udd_ep_free>:
    1820:	cf 93       	push	r28
    1822:	c8 2f       	mov	r28, r24
    1824:	c4 df       	rcall	.-120    	; 0x17ae <udd_ep_abort>
    1826:	ec 2f       	mov	r30, r28
    1828:	ef 70       	andi	r30, 0x0F	; 15
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	ee 0f       	add	r30, r30
    182e:	ff 1f       	adc	r31, r31
    1830:	8c 2f       	mov	r24, r28
    1832:	99 27       	eor	r25, r25
    1834:	87 fd       	sbrc	r24, 7
    1836:	90 95       	com	r25
    1838:	88 27       	eor	r24, r24
    183a:	99 0f       	add	r25, r25
    183c:	88 1f       	adc	r24, r24
    183e:	99 27       	eor	r25, r25
    1840:	e8 0f       	add	r30, r24
    1842:	f9 1f       	adc	r31, r25
    1844:	ee 0f       	add	r30, r30
    1846:	ff 1f       	adc	r31, r31
    1848:	ee 0f       	add	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	ee 0f       	add	r30, r30
    184e:	ff 1f       	adc	r31, r31
    1850:	e8 54       	subi	r30, 0x48	; 72
    1852:	fd 4d       	sbci	r31, 0xDD	; 221
    1854:	11 82       	std	Z+1, r1	; 0x01
    1856:	cf 91       	pop	r28
    1858:	08 95       	ret

0000185a <udd_ep_set_halt>:
    185a:	0f 93       	push	r16
    185c:	e8 2f       	mov	r30, r24
    185e:	ef 70       	andi	r30, 0x0F	; 15
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	ee 0f       	add	r30, r30
    1864:	ff 1f       	adc	r31, r31
    1866:	28 2f       	mov	r18, r24
    1868:	33 27       	eor	r19, r19
    186a:	27 fd       	sbrc	r18, 7
    186c:	30 95       	com	r19
    186e:	22 27       	eor	r18, r18
    1870:	33 0f       	add	r19, r19
    1872:	22 1f       	adc	r18, r18
    1874:	33 27       	eor	r19, r19
    1876:	e2 0f       	add	r30, r18
    1878:	f3 1f       	adc	r31, r19
    187a:	ee 0f       	add	r30, r30
    187c:	ff 1f       	adc	r31, r31
    187e:	ee 0f       	add	r30, r30
    1880:	ff 1f       	adc	r31, r31
    1882:	ee 0f       	add	r30, r30
    1884:	ff 1f       	adc	r31, r31
    1886:	e8 54       	subi	r30, 0x48	; 72
    1888:	fd 4d       	sbci	r31, 0xDD	; 221
    188a:	91 81       	ldd	r25, Z+1	; 0x01
    188c:	94 60       	ori	r25, 0x04	; 4
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	01 e0       	ldi	r16, 0x01	; 1
    1892:	06 93       	lac	Z, r16
    1894:	8c df       	rcall	.-232    	; 0x17ae <udd_ep_abort>
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	0f 91       	pop	r16
    189a:	08 95       	ret

0000189c <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    189c:	1f 92       	push	r1
    189e:	0f 92       	push	r0
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	0f 92       	push	r0
    18a4:	11 24       	eor	r1, r1
    18a6:	0f 93       	push	r16
    18a8:	2f 93       	push	r18
    18aa:	3f 93       	push	r19
    18ac:	4f 93       	push	r20
    18ae:	5f 93       	push	r21
    18b0:	6f 93       	push	r22
    18b2:	7f 93       	push	r23
    18b4:	8f 93       	push	r24
    18b6:	9f 93       	push	r25
    18b8:	af 93       	push	r26
    18ba:	bf 93       	push	r27
    18bc:	ef 93       	push	r30
    18be:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    18c0:	80 91 cb 04 	lds	r24, 0x04CB
    18c4:	88 23       	and	r24, r24
    18c6:	34 f4       	brge	.+12     	; 0x18d4 <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    18c8:	80 e8       	ldi	r24, 0x80	; 128
    18ca:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    18ce:	0e 94 59 04 	call	0x8b2	; 0x8b2 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    18d2:	88 c0       	rjmp	.+272    	; 0x19e4 <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    18d4:	80 91 cb 04 	lds	r24, 0x04CB
    18d8:	82 ff       	sbrs	r24, 2
    18da:	20 c0       	rjmp	.+64     	; 0x191c <__vector_125+0x80>
		udd_ack_underflow_event();
    18dc:	84 e0       	ldi	r24, 0x04	; 4
    18de:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    18e2:	80 91 c0 22 	lds	r24, 0x22C0
    18e6:	86 ff       	sbrs	r24, 6
    18e8:	7d c0       	rjmp	.+250    	; 0x19e4 <__vector_125+0x148>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    18ea:	80 91 cc 04 	lds	r24, 0x04CC
    18ee:	81 fd       	sbrc	r24, 1
    18f0:	79 c0       	rjmp	.+242    	; 0x19e4 <__vector_125+0x148>
    18f2:	9a dc       	rcall	.-1740   	; 0x1228 <udd_ctrl_interrupt_tc_setup>
    18f4:	81 11       	cpse	r24, r1
    18f6:	76 c0       	rjmp	.+236    	; 0x19e4 <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    18f8:	80 91 a8 22 	lds	r24, 0x22A8
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	11 f4       	brne	.+4      	; 0x1904 <__vector_125+0x68>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1900:	d0 db       	rcall	.-2144   	; 0x10a2 <udd_ctrl_send_zlp_in>
    1902:	70 c0       	rjmp	.+224    	; 0x19e4 <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1904:	84 30       	cpi	r24, 0x04	; 4
    1906:	09 f0       	breq	.+2      	; 0x190a <__vector_125+0x6e>
    1908:	6d c0       	rjmp	.+218    	; 0x19e4 <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    190a:	e1 ec       	ldi	r30, 0xC1	; 193
    190c:	f2 e2       	ldi	r31, 0x22	; 34
    190e:	04 e0       	ldi	r16, 0x04	; 4
    1910:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1912:	e9 eb       	ldi	r30, 0xB9	; 185
    1914:	f2 e2       	ldi	r31, 0x22	; 34
    1916:	04 e0       	ldi	r16, 0x04	; 4
    1918:	05 93       	las	Z, r16
    191a:	64 c0       	rjmp	.+200    	; 0x19e4 <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    191c:	80 91 cb 04 	lds	r24, 0x04CB
    1920:	81 ff       	sbrs	r24, 1
    1922:	5b c0       	rjmp	.+182    	; 0x19da <__vector_125+0x13e>
		udd_ack_overflow_event();
    1924:	82 e0       	ldi	r24, 0x02	; 2
    1926:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    192a:	80 91 b8 22 	lds	r24, 0x22B8
    192e:	86 ff       	sbrs	r24, 6
    1930:	59 c0       	rjmp	.+178    	; 0x19e4 <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1932:	80 91 cc 04 	lds	r24, 0x04CC
    1936:	81 fd       	sbrc	r24, 1
    1938:	55 c0       	rjmp	.+170    	; 0x19e4 <__vector_125+0x148>
    193a:	76 dc       	rcall	.-1812   	; 0x1228 <udd_ctrl_interrupt_tc_setup>
    193c:	81 11       	cpse	r24, r1
    193e:	52 c0       	rjmp	.+164    	; 0x19e4 <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1940:	80 91 a8 22 	lds	r24, 0x22A8
    1944:	82 30       	cpi	r24, 0x02	; 2
    1946:	41 f4       	brne	.+16     	; 0x1958 <__vector_125+0xbc>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1948:	84 e0       	ldi	r24, 0x04	; 4
    194a:	80 93 a8 22 	sts	0x22A8, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    194e:	e8 eb       	ldi	r30, 0xB8	; 184
    1950:	f2 e2       	ldi	r31, 0x22	; 34
    1952:	02 e0       	ldi	r16, 0x02	; 2
    1954:	06 93       	lac	Z, r16
    1956:	46 c0       	rjmp	.+140    	; 0x19e4 <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1958:	83 30       	cpi	r24, 0x03	; 3
    195a:	09 f0       	breq	.+2      	; 0x195e <__vector_125+0xc2>
    195c:	43 c0       	rjmp	.+134    	; 0x19e4 <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    195e:	e1 ec       	ldi	r30, 0xC1	; 193
    1960:	f2 e2       	ldi	r31, 0x22	; 34
    1962:	04 e0       	ldi	r16, 0x04	; 4
    1964:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1966:	e9 eb       	ldi	r30, 0xB9	; 185
    1968:	f2 e2       	ldi	r31, 0x22	; 34
    196a:	04 e0       	ldi	r16, 0x04	; 4
    196c:	05 93       	las	Z, r16
    196e:	3a c0       	rjmp	.+116    	; 0x19e4 <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1970:	80 e1       	ldi	r24, 0x10	; 16
    1972:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	1a df       	rcall	.-460    	; 0x17ae <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    197a:	81 e8       	ldi	r24, 0x81	; 129
    197c:	18 df       	rcall	.-464    	; 0x17ae <udd_ep_abort>
		}
#endif
		udc_reset();
    197e:	0e 94 32 04 	call	0x864	; 0x864 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1982:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1986:	e9 eb       	ldi	r30, 0xB9	; 185
    1988:	f2 e2       	ldi	r31, 0x22	; 34
    198a:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    198c:	96 e0       	ldi	r25, 0x06	; 6
    198e:	90 93 b8 22 	sts	0x22B8, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1992:	83 e4       	ldi	r24, 0x43	; 67
    1994:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1996:	e1 ec       	ldi	r30, 0xC1	; 193
    1998:	f2 e2       	ldi	r31, 0x22	; 34
    199a:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    199c:	90 93 c0 22 	sts	0x22C0, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    19a0:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    19a2:	84 e6       	ldi	r24, 0x64	; 100
    19a4:	92 e2       	ldi	r25, 0x22	; 34
    19a6:	80 93 bc 22 	sts	0x22BC, r24
    19aa:	90 93 bd 22 	sts	0x22BD, r25
		// Reset endpoint control management
		udd_ctrl_init();
    19ae:	40 db       	rcall	.-2432   	; 0x1030 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    19b0:	19 c0       	rjmp	.+50     	; 0x19e4 <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
    19b2:	80 91 cb 04 	lds	r24, 0x04CB
    19b6:	86 ff       	sbrs	r24, 6
    19b8:	06 c0       	rjmp	.+12     	; 0x19c6 <__vector_125+0x12a>
		udd_ack_suspend_event();
    19ba:	80 e4       	ldi	r24, 0x40	; 64
    19bc:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	17 db       	rcall	.-2514   	; 0xff2 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
    19c6:	80 91 cb 04 	lds	r24, 0x04CB
    19ca:	85 ff       	sbrs	r24, 5
    19cc:	0b c0       	rjmp	.+22     	; 0x19e4 <__vector_125+0x148>
		udd_ack_resume_event();
    19ce:	80 e2       	ldi	r24, 0x20	; 32
    19d0:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	0d db       	rcall	.-2534   	; 0xff2 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    19d8:	05 c0       	rjmp	.+10     	; 0x19e4 <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    19da:	80 91 cb 04 	lds	r24, 0x04CB
    19de:	84 ff       	sbrs	r24, 4
    19e0:	e8 cf       	rjmp	.-48     	; 0x19b2 <__vector_125+0x116>
    19e2:	c6 cf       	rjmp	.-116    	; 0x1970 <__vector_125+0xd4>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    19e4:	ff 91       	pop	r31
    19e6:	ef 91       	pop	r30
    19e8:	bf 91       	pop	r27
    19ea:	af 91       	pop	r26
    19ec:	9f 91       	pop	r25
    19ee:	8f 91       	pop	r24
    19f0:	7f 91       	pop	r23
    19f2:	6f 91       	pop	r22
    19f4:	5f 91       	pop	r21
    19f6:	4f 91       	pop	r20
    19f8:	3f 91       	pop	r19
    19fa:	2f 91       	pop	r18
    19fc:	0f 91       	pop	r16
    19fe:	0f 90       	pop	r0
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	0f 90       	pop	r0
    1a04:	1f 90       	pop	r1
    1a06:	18 95       	reti

00001a08 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1a08:	1f 92       	push	r1
    1a0a:	0f 92       	push	r0
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	0f 92       	push	r0
    1a10:	11 24       	eor	r1, r1
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	2f 93       	push	r18
    1a18:	3f 93       	push	r19
    1a1a:	4f 93       	push	r20
    1a1c:	5f 93       	push	r21
    1a1e:	6f 93       	push	r22
    1a20:	7f 93       	push	r23
    1a22:	8f 93       	push	r24
    1a24:	9f 93       	push	r25
    1a26:	af 93       	push	r26
    1a28:	bf 93       	push	r27
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	ef 93       	push	r30
    1a30:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1a32:	80 91 cc 04 	lds	r24, 0x04CC
    1a36:	81 fd       	sbrc	r24, 1
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1a3a:	f6 db       	rcall	.-2068   	; 0x1228 <udd_ctrl_interrupt_tc_setup>
    1a3c:	81 11       	cpse	r24, r1
    1a3e:	b8 c0       	rjmp	.+368    	; 0x1bb0 <__vector_126+0x1a8>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1a46:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    1a4a:	81 95       	neg	r24
    1a4c:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1a4e:	e8 eb       	ldi	r30, 0xB8	; 184
    1a50:	f2 e2       	ldi	r31, 0x22	; 34
    1a52:	e8 1b       	sub	r30, r24
    1a54:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1a56:	20 81       	ld	r18, Z
    1a58:	31 81       	ldd	r19, Z+1	; 0x01
    1a5a:	28 5b       	subi	r18, 0xB8	; 184
    1a5c:	32 42       	sbci	r19, 0x22	; 34
    1a5e:	36 95       	lsr	r19
    1a60:	27 95       	ror	r18
    1a62:	36 95       	lsr	r19
    1a64:	27 95       	ror	r18
    1a66:	36 95       	lsr	r19
    1a68:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1a6a:	82 2f       	mov	r24, r18
    1a6c:	86 95       	lsr	r24
    1a6e:	20 ff       	sbrs	r18, 0
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <__vector_126+0x6e>
    1a72:	90 e8       	ldi	r25, 0x80	; 128
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <__vector_126+0x70>
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1a7a:	e8 2f       	mov	r30, r24
    1a7c:	ef 70       	andi	r30, 0x0F	; 15
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	ee 0f       	add	r30, r30
    1a82:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1a84:	28 2f       	mov	r18, r24
    1a86:	33 27       	eor	r19, r19
    1a88:	27 fd       	sbrc	r18, 7
    1a8a:	30 95       	com	r19
    1a8c:	22 27       	eor	r18, r18
    1a8e:	33 0f       	add	r19, r19
    1a90:	22 1f       	adc	r18, r18
    1a92:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1a94:	e2 0f       	add	r30, r18
    1a96:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    1a98:	ee 0f       	add	r30, r30
    1a9a:	ff 1f       	adc	r31, r31
    1a9c:	ee 0f       	add	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	ee 0f       	add	r30, r30
    1aa2:	ff 1f       	adc	r31, r31
    1aa4:	e8 54       	subi	r30, 0x48	; 72
    1aa6:	fd 4d       	sbci	r31, 0xDD	; 221
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1aa8:	90 81       	ld	r25, Z
    1aaa:	95 ff       	sbrs	r25, 5
    1aac:	81 c0       	rjmp	.+258    	; 0x1bb0 <__vector_126+0x1a8>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1aae:	00 e2       	ldi	r16, 0x20	; 32
    1ab0:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1ab2:	81 11       	cpse	r24, r1
    1ab4:	78 c0       	rjmp	.+240    	; 0x1ba6 <__vector_126+0x19e>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1ab6:	80 91 a8 22 	lds	r24, 0x22A8
    1aba:	84 30       	cpi	r24, 0x04	; 4
    1abc:	19 f4       	brne	.+6      	; 0x1ac4 <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1abe:	ff da       	rcall	.-2562   	; 0x10be <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1ac0:	b7 da       	rcall	.-2706   	; 0x1030 <udd_ctrl_init>
    1ac2:	76 c0       	rjmp	.+236    	; 0x1bb0 <__vector_126+0x1a8>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1ac4:	c0 91 ba 22 	lds	r28, 0x22BA
    1ac8:	d0 91 bb 22 	lds	r29, 0x22BB

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1acc:	80 91 f7 22 	lds	r24, 0x22F7
    1ad0:	90 91 f8 22 	lds	r25, 0x22F8
    1ad4:	00 91 a4 22 	lds	r16, 0x22A4
    1ad8:	10 91 a5 22 	lds	r17, 0x22A5
    1adc:	98 01       	movw	r18, r16
    1ade:	2c 0f       	add	r18, r28
    1ae0:	3d 1f       	adc	r19, r29
    1ae2:	82 17       	cp	r24, r18
    1ae4:	93 07       	cpc	r25, r19
    1ae6:	18 f4       	brcc	.+6      	; 0x1aee <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1ae8:	ec 01       	movw	r28, r24
    1aea:	c0 1b       	sub	r28, r16
    1aec:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1aee:	80 91 f5 22 	lds	r24, 0x22F5
    1af2:	90 91 f6 22 	lds	r25, 0x22F6
    1af6:	ae 01       	movw	r20, r28
    1af8:	64 e6       	ldi	r22, 0x64	; 100
    1afa:	72 e2       	ldi	r23, 0x22	; 34
    1afc:	80 0f       	add	r24, r16
    1afe:	91 1f       	adc	r25, r17
    1b00:	24 d2       	rcall	.+1096   	; 0x1f4a <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1b02:	0c 0f       	add	r16, r28
    1b04:	1d 1f       	adc	r17, r29
    1b06:	00 93 a4 22 	sts	0x22A4, r16
    1b0a:	10 93 a5 22 	sts	0x22A5, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1b0e:	c0 34       	cpi	r28, 0x40	; 64
    1b10:	d1 05       	cpc	r29, r1
    1b12:	69 f4       	brne	.+26     	; 0x1b2e <__vector_126+0x126>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1b14:	80 91 a6 22 	lds	r24, 0x22A6
    1b18:	90 91 a7 22 	lds	r25, 0x22A7
    1b1c:	80 0f       	add	r24, r16
    1b1e:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1b20:	20 91 f3 22 	lds	r18, 0x22F3
    1b24:	30 91 f4 22 	lds	r19, 0x22F4
    1b28:	82 17       	cp	r24, r18
    1b2a:	93 07       	cpc	r25, r19
    1b2c:	88 f0       	brcs	.+34     	; 0x1b50 <__vector_126+0x148>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1b2e:	00 93 f7 22 	sts	0x22F7, r16
    1b32:	10 93 f8 22 	sts	0x22F8, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1b36:	e0 91 fb 22 	lds	r30, 0x22FB
    1b3a:	f0 91 fc 22 	lds	r31, 0x22FC
    1b3e:	30 97       	sbiw	r30, 0x00	; 0
    1b40:	29 f0       	breq	.+10     	; 0x1b4c <__vector_126+0x144>
			if (!udd_g_ctrlreq.over_under_run()) {
    1b42:	09 95       	icall
    1b44:	81 11       	cpse	r24, r1
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <__vector_126+0x144>
				// Stall ZLP
				udd_ctrl_stall_data();
    1b48:	9e da       	rcall	.-2756   	; 0x1086 <udd_ctrl_stall_data>
    1b4a:	32 c0       	rjmp	.+100    	; 0x1bb0 <__vector_126+0x1a8>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1b4c:	aa da       	rcall	.-2732   	; 0x10a2 <udd_ctrl_send_zlp_in>
    1b4e:	30 c0       	rjmp	.+96     	; 0x1bb0 <__vector_126+0x1a8>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1b50:	80 91 f7 22 	lds	r24, 0x22F7
    1b54:	90 91 f8 22 	lds	r25, 0x22F8
    1b58:	08 17       	cp	r16, r24
    1b5a:	19 07       	cpc	r17, r25
    1b5c:	f9 f4       	brne	.+62     	; 0x1b9c <__vector_126+0x194>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1b5e:	e0 91 fb 22 	lds	r30, 0x22FB
    1b62:	f0 91 fc 22 	lds	r31, 0x22FC
    1b66:	30 97       	sbiw	r30, 0x00	; 0
    1b68:	11 f4       	brne	.+4      	; 0x1b6e <__vector_126+0x166>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1b6a:	8d da       	rcall	.-2790   	; 0x1086 <udd_ctrl_stall_data>
    1b6c:	21 c0       	rjmp	.+66     	; 0x1bb0 <__vector_126+0x1a8>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1b6e:	09 95       	icall
    1b70:	81 11       	cpse	r24, r1
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <__vector_126+0x170>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1b74:	88 da       	rcall	.-2800   	; 0x1086 <udd_ctrl_stall_data>
    1b76:	1c c0       	rjmp	.+56     	; 0x1bb0 <__vector_126+0x1a8>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1b78:	20 91 a6 22 	lds	r18, 0x22A6
    1b7c:	30 91 a7 22 	lds	r19, 0x22A7
    1b80:	80 91 a4 22 	lds	r24, 0x22A4
    1b84:	90 91 a5 22 	lds	r25, 0x22A5
    1b88:	82 0f       	add	r24, r18
    1b8a:	93 1f       	adc	r25, r19
    1b8c:	80 93 a6 22 	sts	0x22A6, r24
    1b90:	90 93 a7 22 	sts	0x22A7, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1b94:	10 92 a4 22 	sts	0x22A4, r1
    1b98:	10 92 a5 22 	sts	0x22A5, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1b9c:	e8 eb       	ldi	r30, 0xB8	; 184
    1b9e:	f2 e2       	ldi	r31, 0x22	; 34
    1ba0:	02 e0       	ldi	r16, 0x02	; 2
    1ba2:	06 93       	lac	Z, r16
    1ba4:	05 c0       	rjmp	.+10     	; 0x1bb0 <__vector_126+0x1a8>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1ba6:	80 38       	cpi	r24, 0x80	; 128
    1ba8:	11 f4       	brne	.+4      	; 0x1bae <__vector_126+0x1a6>
		udd_ctrl_in_sent();
    1baa:	91 da       	rcall	.-2782   	; 0x10ce <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <__vector_126+0x1a8>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1bae:	ab db       	rcall	.-2218   	; 0x1306 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1bb0:	ff 91       	pop	r31
    1bb2:	ef 91       	pop	r30
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	bf 91       	pop	r27
    1bba:	af 91       	pop	r26
    1bbc:	9f 91       	pop	r25
    1bbe:	8f 91       	pop	r24
    1bc0:	7f 91       	pop	r23
    1bc2:	6f 91       	pop	r22
    1bc4:	5f 91       	pop	r21
    1bc6:	4f 91       	pop	r20
    1bc8:	3f 91       	pop	r19
    1bca:	2f 91       	pop	r18
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	0f 90       	pop	r0
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	0f 90       	pop	r0
    1bd6:	1f 90       	pop	r1
    1bd8:	18 95       	reti

00001bda <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1bda:	8f ef       	ldi	r24, 0xFF	; 255
    1bdc:	80 93 70 00 	sts	0x0070, r24
    1be0:	80 93 71 00 	sts	0x0071, r24
    1be4:	80 93 72 00 	sts	0x0072, r24
    1be8:	80 93 73 00 	sts	0x0073, r24
    1bec:	80 93 74 00 	sts	0x0074, r24
    1bf0:	80 93 75 00 	sts	0x0075, r24
    1bf4:	80 93 76 00 	sts	0x0076, r24
    1bf8:	08 95       	ret

00001bfa <init_onepos>:

#include "../onepos.h"

void init_onepos(void)
{
	sysclk_init();
    1bfa:	ef df       	rcall	.-34     	; 0x1bda <sysclk_init>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    1bfc:	e0 e4       	ldi	r30, 0x40	; 64
    1bfe:	f6 e0       	ldi	r31, 0x06	; 6
    1c00:	28 e0       	ldi	r18, 0x08	; 8
    1c02:	22 83       	std	Z+2, r18	; 0x02
    1c04:	34 e0       	ldi	r19, 0x04	; 4
    1c06:	32 83       	std	Z+2, r19	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1c08:	a0 e0       	ldi	r26, 0x00	; 0
    1c0a:	b6 e0       	ldi	r27, 0x06	; 6
    1c0c:	80 e4       	ldi	r24, 0x40	; 64
    1c0e:	11 96       	adiw	r26, 0x01	; 1
    1c10:	8c 93       	st	X, r24
    1c12:	11 97       	sbiw	r26, 0x01	; 1
    1c14:	90 e8       	ldi	r25, 0x80	; 128
    1c16:	11 96       	adiw	r26, 0x01	; 1
    1c18:	9c 93       	st	X, r25
    1c1a:	a0 e2       	ldi	r26, 0x20	; 32
    1c1c:	b6 e0       	ldi	r27, 0x06	; 6
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	11 96       	adiw	r26, 0x01	; 1
    1c22:	4c 93       	st	X, r20
    1c24:	11 97       	sbiw	r26, 0x01	; 1
    1c26:	42 e0       	ldi	r20, 0x02	; 2
    1c28:	11 96       	adiw	r26, 0x01	; 1
    1c2a:	4c 93       	st	X, r20
    1c2c:	a0 e8       	ldi	r26, 0x80	; 128
    1c2e:	b6 e0       	ldi	r27, 0x06	; 6
    1c30:	11 96       	adiw	r26, 0x01	; 1
    1c32:	4c 93       	st	X, r20
    1c34:	11 97       	sbiw	r26, 0x01	; 1
    1c36:	11 96       	adiw	r26, 0x01	; 1
    1c38:	3c 93       	st	X, r19
    1c3a:	11 97       	sbiw	r26, 0x01	; 1
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    1c3c:	12 96       	adiw	r26, 0x02	; 2
    1c3e:	2c 93       	st	X, r18
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1c40:	20 e1       	ldi	r18, 0x10	; 16
    1c42:	21 83       	std	Z+1, r18	; 0x01
    1c44:	20 e2       	ldi	r18, 0x20	; 32
    1c46:	21 83       	std	Z+1, r18	; 0x01
    1c48:	91 83       	std	Z+1, r25	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    1c4a:	82 83       	std	Z+2, r24	; 0x02
    1c4c:	08 95       	ret

00001c4e <init_animation>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1c4e:	80 e4       	ldi	r24, 0x40	; 64
    1c50:	e0 e0       	ldi	r30, 0x00	; 0
    1c52:	f6 e0       	ldi	r31, 0x06	; 6
    1c54:	85 83       	std	Z+5, r24	; 0x05
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	85 31       	cpi	r24, 0x15	; 21
    1c5e:	24 e3       	ldi	r18, 0x34	; 52
    1c60:	92 07       	cpc	r25, r18
    1c62:	d9 f7       	brne	.-10     	; 0x1c5a <init_animation+0xc>
    1c64:	80 e8       	ldi	r24, 0x80	; 128
    1c66:	e0 e0       	ldi	r30, 0x00	; 0
    1c68:	f6 e0       	ldi	r31, 0x06	; 6
    1c6a:	85 83       	std	Z+5, r24	; 0x05
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	85 31       	cpi	r24, 0x15	; 21
    1c74:	24 e3       	ldi	r18, 0x34	; 52
    1c76:	92 07       	cpc	r25, r18
    1c78:	d9 f7       	brne	.-10     	; 0x1c70 <init_animation+0x22>
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	e0 e2       	ldi	r30, 0x20	; 32
    1c7e:	f6 e0       	ldi	r31, 0x06	; 6
    1c80:	85 83       	std	Z+5, r24	; 0x05
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	01 96       	adiw	r24, 0x01	; 1
    1c88:	85 31       	cpi	r24, 0x15	; 21
    1c8a:	24 e3       	ldi	r18, 0x34	; 52
    1c8c:	92 07       	cpc	r25, r18
    1c8e:	d9 f7       	brne	.-10     	; 0x1c86 <init_animation+0x38>
    1c90:	82 e0       	ldi	r24, 0x02	; 2
    1c92:	e0 e2       	ldi	r30, 0x20	; 32
    1c94:	f6 e0       	ldi	r31, 0x06	; 6
    1c96:	85 83       	std	Z+5, r24	; 0x05
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	85 31       	cpi	r24, 0x15	; 21
    1ca0:	24 e3       	ldi	r18, 0x34	; 52
    1ca2:	92 07       	cpc	r25, r18
    1ca4:	d9 f7       	brne	.-10     	; 0x1c9c <init_animation+0x4e>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1ca6:	80 e4       	ldi	r24, 0x40	; 64
    1ca8:	e0 e0       	ldi	r30, 0x00	; 0
    1caa:	f6 e0       	ldi	r31, 0x06	; 6
    1cac:	86 83       	std	Z+6, r24	; 0x06
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	85 31       	cpi	r24, 0x15	; 21
    1cb6:	24 e3       	ldi	r18, 0x34	; 52
    1cb8:	92 07       	cpc	r25, r18
    1cba:	d9 f7       	brne	.-10     	; 0x1cb2 <init_animation+0x64>
    1cbc:	80 e8       	ldi	r24, 0x80	; 128
    1cbe:	e0 e0       	ldi	r30, 0x00	; 0
    1cc0:	f6 e0       	ldi	r31, 0x06	; 6
    1cc2:	86 83       	std	Z+6, r24	; 0x06
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	01 96       	adiw	r24, 0x01	; 1
    1cca:	85 31       	cpi	r24, 0x15	; 21
    1ccc:	24 e3       	ldi	r18, 0x34	; 52
    1cce:	92 07       	cpc	r25, r18
    1cd0:	d9 f7       	brne	.-10     	; 0x1cc8 <init_animation+0x7a>
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	e0 e2       	ldi	r30, 0x20	; 32
    1cd6:	f6 e0       	ldi	r31, 0x06	; 6
    1cd8:	86 83       	std	Z+6, r24	; 0x06
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	85 31       	cpi	r24, 0x15	; 21
    1ce2:	24 e3       	ldi	r18, 0x34	; 52
    1ce4:	92 07       	cpc	r25, r18
    1ce6:	d9 f7       	brne	.-10     	; 0x1cde <init_animation+0x90>
    1ce8:	82 e0       	ldi	r24, 0x02	; 2
    1cea:	e0 e2       	ldi	r30, 0x20	; 32
    1cec:	f6 e0       	ldi	r31, 0x06	; 6
    1cee:	86 83       	std	Z+6, r24	; 0x06
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	85 31       	cpi	r24, 0x15	; 21
    1cf8:	24 e3       	ldi	r18, 0x34	; 52
    1cfa:	92 07       	cpc	r25, r18
    1cfc:	d9 f7       	brne	.-10     	; 0x1cf4 <init_animation+0xa6>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1cfe:	80 e4       	ldi	r24, 0x40	; 64
    1d00:	e0 e0       	ldi	r30, 0x00	; 0
    1d02:	f6 e0       	ldi	r31, 0x06	; 6
    1d04:	85 83       	std	Z+5, r24	; 0x05
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	8a 32       	cpi	r24, 0x2A	; 42
    1d0e:	28 e6       	ldi	r18, 0x68	; 104
    1d10:	92 07       	cpc	r25, r18
    1d12:	d9 f7       	brne	.-10     	; 0x1d0a <init_animation+0xbc>
    1d14:	80 e8       	ldi	r24, 0x80	; 128
    1d16:	e0 e0       	ldi	r30, 0x00	; 0
    1d18:	f6 e0       	ldi	r31, 0x06	; 6
    1d1a:	85 83       	std	Z+5, r24	; 0x05
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	8a 32       	cpi	r24, 0x2A	; 42
    1d24:	28 e6       	ldi	r18, 0x68	; 104
    1d26:	92 07       	cpc	r25, r18
    1d28:	d9 f7       	brne	.-10     	; 0x1d20 <init_animation+0xd2>
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	e0 e2       	ldi	r30, 0x20	; 32
    1d2e:	f6 e0       	ldi	r31, 0x06	; 6
    1d30:	85 83       	std	Z+5, r24	; 0x05
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	01 96       	adiw	r24, 0x01	; 1
    1d38:	8a 32       	cpi	r24, 0x2A	; 42
    1d3a:	28 e6       	ldi	r18, 0x68	; 104
    1d3c:	92 07       	cpc	r25, r18
    1d3e:	d9 f7       	brne	.-10     	; 0x1d36 <init_animation+0xe8>
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	e0 e2       	ldi	r30, 0x20	; 32
    1d44:	f6 e0       	ldi	r31, 0x06	; 6
    1d46:	85 83       	std	Z+5, r24	; 0x05
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	01 96       	adiw	r24, 0x01	; 1
    1d4e:	8a 32       	cpi	r24, 0x2A	; 42
    1d50:	28 e6       	ldi	r18, 0x68	; 104
    1d52:	92 07       	cpc	r25, r18
    1d54:	d9 f7       	brne	.-10     	; 0x1d4c <init_animation+0xfe>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1d56:	80 e4       	ldi	r24, 0x40	; 64
    1d58:	e0 e0       	ldi	r30, 0x00	; 0
    1d5a:	f6 e0       	ldi	r31, 0x06	; 6
    1d5c:	86 83       	std	Z+6, r24	; 0x06
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	8a 32       	cpi	r24, 0x2A	; 42
    1d66:	28 e6       	ldi	r18, 0x68	; 104
    1d68:	92 07       	cpc	r25, r18
    1d6a:	d9 f7       	brne	.-10     	; 0x1d62 <init_animation+0x114>
    1d6c:	80 e8       	ldi	r24, 0x80	; 128
    1d6e:	e0 e0       	ldi	r30, 0x00	; 0
    1d70:	f6 e0       	ldi	r31, 0x06	; 6
    1d72:	86 83       	std	Z+6, r24	; 0x06
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	01 96       	adiw	r24, 0x01	; 1
    1d7a:	8a 32       	cpi	r24, 0x2A	; 42
    1d7c:	28 e6       	ldi	r18, 0x68	; 104
    1d7e:	92 07       	cpc	r25, r18
    1d80:	d9 f7       	brne	.-10     	; 0x1d78 <init_animation+0x12a>
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	e0 e2       	ldi	r30, 0x20	; 32
    1d86:	f6 e0       	ldi	r31, 0x06	; 6
    1d88:	86 83       	std	Z+6, r24	; 0x06
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	8a 32       	cpi	r24, 0x2A	; 42
    1d92:	28 e6       	ldi	r18, 0x68	; 104
    1d94:	92 07       	cpc	r25, r18
    1d96:	d9 f7       	brne	.-10     	; 0x1d8e <init_animation+0x140>
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	e0 e2       	ldi	r30, 0x20	; 32
    1d9c:	f6 e0       	ldi	r31, 0x06	; 6
    1d9e:	86 83       	std	Z+6, r24	; 0x06
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	01 96       	adiw	r24, 0x01	; 1
    1da6:	8a 32       	cpi	r24, 0x2A	; 42
    1da8:	28 e6       	ldi	r18, 0x68	; 104
    1daa:	92 07       	cpc	r25, r18
    1dac:	d9 f7       	brne	.-10     	; 0x1da4 <init_animation+0x156>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1dae:	80 e4       	ldi	r24, 0x40	; 64
    1db0:	e0 e0       	ldi	r30, 0x00	; 0
    1db2:	f6 e0       	ldi	r31, 0x06	; 6
    1db4:	85 83       	std	Z+5, r24	; 0x05
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	80 34       	cpi	r24, 0x40	; 64
    1dbe:	2c e9       	ldi	r18, 0x9C	; 156
    1dc0:	92 07       	cpc	r25, r18
    1dc2:	d9 f7       	brne	.-10     	; 0x1dba <init_animation+0x16c>
    1dc4:	80 e8       	ldi	r24, 0x80	; 128
    1dc6:	e0 e0       	ldi	r30, 0x00	; 0
    1dc8:	f6 e0       	ldi	r31, 0x06	; 6
    1dca:	85 83       	std	Z+5, r24	; 0x05
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	80 34       	cpi	r24, 0x40	; 64
    1dd4:	2c e9       	ldi	r18, 0x9C	; 156
    1dd6:	92 07       	cpc	r25, r18
    1dd8:	d9 f7       	brne	.-10     	; 0x1dd0 <init_animation+0x182>
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	e0 e2       	ldi	r30, 0x20	; 32
    1dde:	f6 e0       	ldi	r31, 0x06	; 6
    1de0:	85 83       	std	Z+5, r24	; 0x05
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	01 96       	adiw	r24, 0x01	; 1
    1de8:	80 34       	cpi	r24, 0x40	; 64
    1dea:	2c e9       	ldi	r18, 0x9C	; 156
    1dec:	92 07       	cpc	r25, r18
    1dee:	d9 f7       	brne	.-10     	; 0x1de6 <init_animation+0x198>
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	e0 e2       	ldi	r30, 0x20	; 32
    1df4:	f6 e0       	ldi	r31, 0x06	; 6
    1df6:	85 83       	std	Z+5, r24	; 0x05
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	01 96       	adiw	r24, 0x01	; 1
    1dfe:	80 34       	cpi	r24, 0x40	; 64
    1e00:	2c e9       	ldi	r18, 0x9C	; 156
    1e02:	92 07       	cpc	r25, r18
    1e04:	d9 f7       	brne	.-10     	; 0x1dfc <init_animation+0x1ae>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1e06:	80 e4       	ldi	r24, 0x40	; 64
    1e08:	e0 e0       	ldi	r30, 0x00	; 0
    1e0a:	f6 e0       	ldi	r31, 0x06	; 6
    1e0c:	86 83       	std	Z+6, r24	; 0x06
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	01 96       	adiw	r24, 0x01	; 1
    1e14:	80 34       	cpi	r24, 0x40	; 64
    1e16:	2c e9       	ldi	r18, 0x9C	; 156
    1e18:	92 07       	cpc	r25, r18
    1e1a:	d9 f7       	brne	.-10     	; 0x1e12 <init_animation+0x1c4>
    1e1c:	80 e8       	ldi	r24, 0x80	; 128
    1e1e:	e0 e0       	ldi	r30, 0x00	; 0
    1e20:	f6 e0       	ldi	r31, 0x06	; 6
    1e22:	86 83       	std	Z+6, r24	; 0x06
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	80 34       	cpi	r24, 0x40	; 64
    1e2c:	2c e9       	ldi	r18, 0x9C	; 156
    1e2e:	92 07       	cpc	r25, r18
    1e30:	d9 f7       	brne	.-10     	; 0x1e28 <init_animation+0x1da>
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	e0 e2       	ldi	r30, 0x20	; 32
    1e36:	f6 e0       	ldi	r31, 0x06	; 6
    1e38:	86 83       	std	Z+6, r24	; 0x06
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	01 96       	adiw	r24, 0x01	; 1
    1e40:	80 34       	cpi	r24, 0x40	; 64
    1e42:	2c e9       	ldi	r18, 0x9C	; 156
    1e44:	92 07       	cpc	r25, r18
    1e46:	d9 f7       	brne	.-10     	; 0x1e3e <init_animation+0x1f0>
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	e0 e2       	ldi	r30, 0x20	; 32
    1e4c:	f6 e0       	ldi	r31, 0x06	; 6
    1e4e:	86 83       	std	Z+6, r24	; 0x06
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	01 96       	adiw	r24, 0x01	; 1
    1e56:	80 34       	cpi	r24, 0x40	; 64
    1e58:	2c e9       	ldi	r18, 0x9C	; 156
    1e5a:	92 07       	cpc	r25, r18
    1e5c:	d9 f7       	brne	.-10     	; 0x1e54 <init_animation+0x206>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1e5e:	80 e4       	ldi	r24, 0x40	; 64
    1e60:	e0 e0       	ldi	r30, 0x00	; 0
    1e62:	f6 e0       	ldi	r31, 0x06	; 6
    1e64:	85 83       	std	Z+5, r24	; 0x05
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	01 96       	adiw	r24, 0x01	; 1
    1e6c:	85 35       	cpi	r24, 0x55	; 85
    1e6e:	20 ed       	ldi	r18, 0xD0	; 208
    1e70:	92 07       	cpc	r25, r18
    1e72:	d9 f7       	brne	.-10     	; 0x1e6a <init_animation+0x21c>
    1e74:	80 e8       	ldi	r24, 0x80	; 128
    1e76:	e0 e0       	ldi	r30, 0x00	; 0
    1e78:	f6 e0       	ldi	r31, 0x06	; 6
    1e7a:	85 83       	std	Z+5, r24	; 0x05
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	85 35       	cpi	r24, 0x55	; 85
    1e84:	20 ed       	ldi	r18, 0xD0	; 208
    1e86:	92 07       	cpc	r25, r18
    1e88:	d9 f7       	brne	.-10     	; 0x1e80 <init_animation+0x232>
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	e0 e2       	ldi	r30, 0x20	; 32
    1e8e:	f6 e0       	ldi	r31, 0x06	; 6
    1e90:	85 83       	std	Z+5, r24	; 0x05
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	01 96       	adiw	r24, 0x01	; 1
    1e98:	85 35       	cpi	r24, 0x55	; 85
    1e9a:	20 ed       	ldi	r18, 0xD0	; 208
    1e9c:	92 07       	cpc	r25, r18
    1e9e:	d9 f7       	brne	.-10     	; 0x1e96 <init_animation+0x248>
    1ea0:	82 e0       	ldi	r24, 0x02	; 2
    1ea2:	e0 e2       	ldi	r30, 0x20	; 32
    1ea4:	f6 e0       	ldi	r31, 0x06	; 6
    1ea6:	85 83       	std	Z+5, r24	; 0x05
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	85 35       	cpi	r24, 0x55	; 85
    1eb0:	20 ed       	ldi	r18, 0xD0	; 208
    1eb2:	92 07       	cpc	r25, r18
    1eb4:	d9 f7       	brne	.-10     	; 0x1eac <init_animation+0x25e>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1eb6:	80 e4       	ldi	r24, 0x40	; 64
    1eb8:	e0 e0       	ldi	r30, 0x00	; 0
    1eba:	f6 e0       	ldi	r31, 0x06	; 6
    1ebc:	86 83       	std	Z+6, r24	; 0x06
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	01 96       	adiw	r24, 0x01	; 1
    1ec4:	85 35       	cpi	r24, 0x55	; 85
    1ec6:	20 ed       	ldi	r18, 0xD0	; 208
    1ec8:	92 07       	cpc	r25, r18
    1eca:	d9 f7       	brne	.-10     	; 0x1ec2 <init_animation+0x274>
    1ecc:	80 e8       	ldi	r24, 0x80	; 128
    1ece:	e0 e0       	ldi	r30, 0x00	; 0
    1ed0:	f6 e0       	ldi	r31, 0x06	; 6
    1ed2:	86 83       	std	Z+6, r24	; 0x06
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	01 96       	adiw	r24, 0x01	; 1
    1eda:	85 35       	cpi	r24, 0x55	; 85
    1edc:	20 ed       	ldi	r18, 0xD0	; 208
    1ede:	92 07       	cpc	r25, r18
    1ee0:	d9 f7       	brne	.-10     	; 0x1ed8 <init_animation+0x28a>
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	e0 e2       	ldi	r30, 0x20	; 32
    1ee6:	f6 e0       	ldi	r31, 0x06	; 6
    1ee8:	86 83       	std	Z+6, r24	; 0x06
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	85 35       	cpi	r24, 0x55	; 85
    1ef2:	20 ed       	ldi	r18, 0xD0	; 208
    1ef4:	92 07       	cpc	r25, r18
    1ef6:	d9 f7       	brne	.-10     	; 0x1eee <init_animation+0x2a0>
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	e0 e2       	ldi	r30, 0x20	; 32
    1efc:	f6 e0       	ldi	r31, 0x06	; 6
    1efe:	86 83       	std	Z+6, r24	; 0x06
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	85 35       	cpi	r24, 0x55	; 85
    1f08:	20 ed       	ldi	r18, 0xD0	; 208
    1f0a:	92 07       	cpc	r25, r18
    1f0c:	d9 f7       	brne	.-10     	; 0x1f04 <init_animation+0x2b6>
	delay_ms(160);
	led3(OFF);
	delay_ms(160);
	led4(OFF);
	delay_ms(160);
    1f0e:	08 95       	ret

00001f10 <main>:
 */
#include "onepos.h"

int main (void)
{
	init_onepos();
    1f10:	74 de       	rcall	.-792    	; 0x1bfa <init_onepos>
	init_animation();
    1f12:	9d de       	rcall	.-710    	; 0x1c4e <init_animation>
    1f14:	ff cf       	rjmp	.-2      	; 0x1f14 <main+0x4>

00001f16 <__udivmodhi4>:
    1f16:	aa 1b       	sub	r26, r26
    1f18:	bb 1b       	sub	r27, r27
    1f1a:	51 e1       	ldi	r21, 0x11	; 17
    1f1c:	07 c0       	rjmp	.+14     	; 0x1f2c <__udivmodhi4_ep>

00001f1e <__udivmodhi4_loop>:
    1f1e:	aa 1f       	adc	r26, r26
    1f20:	bb 1f       	adc	r27, r27
    1f22:	a6 17       	cp	r26, r22
    1f24:	b7 07       	cpc	r27, r23
    1f26:	10 f0       	brcs	.+4      	; 0x1f2c <__udivmodhi4_ep>
    1f28:	a6 1b       	sub	r26, r22
    1f2a:	b7 0b       	sbc	r27, r23

00001f2c <__udivmodhi4_ep>:
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	5a 95       	dec	r21
    1f32:	a9 f7       	brne	.-22     	; 0x1f1e <__udivmodhi4_loop>
    1f34:	80 95       	com	r24
    1f36:	90 95       	com	r25
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	08 95       	ret

00001f3e <__tablejump2__>:
    1f3e:	ee 0f       	add	r30, r30
    1f40:	ff 1f       	adc	r31, r31

00001f42 <__tablejump__>:
    1f42:	05 90       	lpm	r0, Z+
    1f44:	f4 91       	lpm	r31, Z
    1f46:	e0 2d       	mov	r30, r0
    1f48:	09 94       	ijmp

00001f4a <memcpy>:
    1f4a:	fb 01       	movw	r30, r22
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <memcpy+0xa>
    1f50:	01 90       	ld	r0, Z+
    1f52:	0d 92       	st	X+, r0
    1f54:	41 50       	subi	r20, 0x01	; 1
    1f56:	50 40       	sbci	r21, 0x00	; 0
    1f58:	d8 f7       	brcc	.-10     	; 0x1f50 <memcpy+0x6>
    1f5a:	08 95       	ret

00001f5c <_exit>:
    1f5c:	f8 94       	cli

00001f5e <__stop_program>:
    1f5e:	ff cf       	rjmp	.-2      	; 0x1f5e <__stop_program>
