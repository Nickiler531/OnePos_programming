
OnePos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000672c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000b30  00802000  0000672c  000067c0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000475  00802b30  00802b30  000072f0  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000072f0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000bb0  00000000  00000000  00007350  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001bcd7  00000000  00000000  00007f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003f9f  00000000  00000000  00023bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00011f46  00000000  00000000  00027b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000026c8  00000000  00000000  00039abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00038a43  00000000  00000000  0003c184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000cefb  00000000  00000000  00074bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d60  00000000  00000000  00081ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008a30  00000000  00000000  00082828  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	21 c1       	rjmp	.+578    	; 0x244 <__ctors_end>
       2:	00 00       	nop
       4:	3c c1       	rjmp	.+632    	; 0x27e <__bad_interrupt>
       6:	00 00       	nop
       8:	3a c1       	rjmp	.+628    	; 0x27e <__bad_interrupt>
       a:	00 00       	nop
       c:	38 c1       	rjmp	.+624    	; 0x27e <__bad_interrupt>
       e:	00 00       	nop
      10:	36 c1       	rjmp	.+620    	; 0x27e <__bad_interrupt>
      12:	00 00       	nop
      14:	34 c1       	rjmp	.+616    	; 0x27e <__bad_interrupt>
      16:	00 00       	nop
      18:	32 c1       	rjmp	.+612    	; 0x27e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	30 c1       	rjmp	.+608    	; 0x27e <__bad_interrupt>
      1e:	00 00       	nop
      20:	2e c1       	rjmp	.+604    	; 0x27e <__bad_interrupt>
      22:	00 00       	nop
      24:	2c c1       	rjmp	.+600    	; 0x27e <__bad_interrupt>
      26:	00 00       	nop
      28:	2a c1       	rjmp	.+596    	; 0x27e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	28 c1       	rjmp	.+592    	; 0x27e <__bad_interrupt>
      2e:	00 00       	nop
      30:	26 c1       	rjmp	.+588    	; 0x27e <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_13>
      38:	22 c1       	rjmp	.+580    	; 0x27e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c1       	rjmp	.+576    	; 0x27e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1e c1       	rjmp	.+572    	; 0x27e <__bad_interrupt>
      42:	00 00       	nop
      44:	1c c1       	rjmp	.+568    	; 0x27e <__bad_interrupt>
      46:	00 00       	nop
      48:	1a c1       	rjmp	.+564    	; 0x27e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	18 c1       	rjmp	.+560    	; 0x27e <__bad_interrupt>
      4e:	00 00       	nop
      50:	16 c1       	rjmp	.+556    	; 0x27e <__bad_interrupt>
      52:	00 00       	nop
      54:	14 c1       	rjmp	.+552    	; 0x27e <__bad_interrupt>
      56:	00 00       	nop
      58:	12 c1       	rjmp	.+548    	; 0x27e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	10 c1       	rjmp	.+544    	; 0x27e <__bad_interrupt>
      5e:	00 00       	nop
      60:	0e c1       	rjmp	.+540    	; 0x27e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c c1       	rjmp	.+536    	; 0x27e <__bad_interrupt>
      66:	00 00       	nop
      68:	0a c1       	rjmp	.+532    	; 0x27e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	08 c1       	rjmp	.+528    	; 0x27e <__bad_interrupt>
      6e:	00 00       	nop
      70:	06 c1       	rjmp	.+524    	; 0x27e <__bad_interrupt>
      72:	00 00       	nop
      74:	04 c1       	rjmp	.+520    	; 0x27e <__bad_interrupt>
      76:	00 00       	nop
      78:	02 c1       	rjmp	.+516    	; 0x27e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	00 c1       	rjmp	.+512    	; 0x27e <__bad_interrupt>
      7e:	00 00       	nop
      80:	fe c0       	rjmp	.+508    	; 0x27e <__bad_interrupt>
      82:	00 00       	nop
      84:	fc c0       	rjmp	.+504    	; 0x27e <__bad_interrupt>
      86:	00 00       	nop
      88:	fa c0       	rjmp	.+500    	; 0x27e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f8 c0       	rjmp	.+496    	; 0x27e <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c0       	rjmp	.+492    	; 0x27e <__bad_interrupt>
      92:	00 00       	nop
      94:	f4 c0       	rjmp	.+488    	; 0x27e <__bad_interrupt>
      96:	00 00       	nop
      98:	f2 c0       	rjmp	.+484    	; 0x27e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f0 c0       	rjmp	.+480    	; 0x27e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ee c0       	rjmp	.+476    	; 0x27e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ec c0       	rjmp	.+472    	; 0x27e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ea c0       	rjmp	.+468    	; 0x27e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e8 c0       	rjmp	.+464    	; 0x27e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e6 c0       	rjmp	.+460    	; 0x27e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e4 c0       	rjmp	.+456    	; 0x27e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_46>
      bc:	e0 c0       	rjmp	.+448    	; 0x27e <__bad_interrupt>
      be:	00 00       	nop
      c0:	de c0       	rjmp	.+444    	; 0x27e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	dc c0       	rjmp	.+440    	; 0x27e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	da c0       	rjmp	.+436    	; 0x27e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d8 c0       	rjmp	.+432    	; 0x27e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d6 c0       	rjmp	.+428    	; 0x27e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d4 c0       	rjmp	.+424    	; 0x27e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d2 c0       	rjmp	.+420    	; 0x27e <__bad_interrupt>
      da:	00 00       	nop
      dc:	d0 c0       	rjmp	.+416    	; 0x27e <__bad_interrupt>
      de:	00 00       	nop
      e0:	ce c0       	rjmp	.+412    	; 0x27e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	cc c0       	rjmp	.+408    	; 0x27e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ca c0       	rjmp	.+404    	; 0x27e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c8 c0       	rjmp	.+400    	; 0x27e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c6 c0       	rjmp	.+396    	; 0x27e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c4 c0       	rjmp	.+392    	; 0x27e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c2 c0       	rjmp	.+388    	; 0x27e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c0 c0       	rjmp	.+384    	; 0x27e <__bad_interrupt>
      fe:	00 00       	nop
     100:	be c0       	rjmp	.+380    	; 0x27e <__bad_interrupt>
     102:	00 00       	nop
     104:	bc c0       	rjmp	.+376    	; 0x27e <__bad_interrupt>
     106:	00 00       	nop
     108:	ba c0       	rjmp	.+372    	; 0x27e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b8 c0       	rjmp	.+368    	; 0x27e <__bad_interrupt>
     10e:	00 00       	nop
     110:	b6 c0       	rjmp	.+364    	; 0x27e <__bad_interrupt>
     112:	00 00       	nop
     114:	b4 c0       	rjmp	.+360    	; 0x27e <__bad_interrupt>
     116:	00 00       	nop
     118:	b2 c0       	rjmp	.+356    	; 0x27e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b0 c0       	rjmp	.+352    	; 0x27e <__bad_interrupt>
     11e:	00 00       	nop
     120:	ae c0       	rjmp	.+348    	; 0x27e <__bad_interrupt>
     122:	00 00       	nop
     124:	ac c0       	rjmp	.+344    	; 0x27e <__bad_interrupt>
     126:	00 00       	nop
     128:	aa c0       	rjmp	.+340    	; 0x27e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a8 c0       	rjmp	.+336    	; 0x27e <__bad_interrupt>
     12e:	00 00       	nop
     130:	a6 c0       	rjmp	.+332    	; 0x27e <__bad_interrupt>
     132:	00 00       	nop
     134:	a4 c0       	rjmp	.+328    	; 0x27e <__bad_interrupt>
     136:	00 00       	nop
     138:	a2 c0       	rjmp	.+324    	; 0x27e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a0 c0       	rjmp	.+320    	; 0x27e <__bad_interrupt>
     13e:	00 00       	nop
     140:	9e c0       	rjmp	.+316    	; 0x27e <__bad_interrupt>
     142:	00 00       	nop
     144:	9c c0       	rjmp	.+312    	; 0x27e <__bad_interrupt>
     146:	00 00       	nop
     148:	9a c0       	rjmp	.+308    	; 0x27e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	98 c0       	rjmp	.+304    	; 0x27e <__bad_interrupt>
     14e:	00 00       	nop
     150:	96 c0       	rjmp	.+300    	; 0x27e <__bad_interrupt>
     152:	00 00       	nop
     154:	94 c0       	rjmp	.+296    	; 0x27e <__bad_interrupt>
     156:	00 00       	nop
     158:	92 c0       	rjmp	.+292    	; 0x27e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	90 c0       	rjmp	.+288    	; 0x27e <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__vector_88>
     164:	8c c0       	rjmp	.+280    	; 0x27e <__bad_interrupt>
     166:	00 00       	nop
     168:	8a c0       	rjmp	.+276    	; 0x27e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	88 c0       	rjmp	.+272    	; 0x27e <__bad_interrupt>
     16e:	00 00       	nop
     170:	86 c0       	rjmp	.+268    	; 0x27e <__bad_interrupt>
     172:	00 00       	nop
     174:	84 c0       	rjmp	.+264    	; 0x27e <__bad_interrupt>
     176:	00 00       	nop
     178:	82 c0       	rjmp	.+260    	; 0x27e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	80 c0       	rjmp	.+256    	; 0x27e <__bad_interrupt>
     17e:	00 00       	nop
     180:	7e c0       	rjmp	.+252    	; 0x27e <__bad_interrupt>
     182:	00 00       	nop
     184:	7c c0       	rjmp	.+248    	; 0x27e <__bad_interrupt>
     186:	00 00       	nop
     188:	7a c0       	rjmp	.+244    	; 0x27e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	78 c0       	rjmp	.+240    	; 0x27e <__bad_interrupt>
     18e:	00 00       	nop
     190:	76 c0       	rjmp	.+236    	; 0x27e <__bad_interrupt>
     192:	00 00       	nop
     194:	74 c0       	rjmp	.+232    	; 0x27e <__bad_interrupt>
     196:	00 00       	nop
     198:	72 c0       	rjmp	.+228    	; 0x27e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	70 c0       	rjmp	.+224    	; 0x27e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	6e c0       	rjmp	.+220    	; 0x27e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6c c0       	rjmp	.+216    	; 0x27e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6a c0       	rjmp	.+212    	; 0x27e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	68 c0       	rjmp	.+208    	; 0x27e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	66 c0       	rjmp	.+204    	; 0x27e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	62 c0       	rjmp	.+196    	; 0x27e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	60 c0       	rjmp	.+192    	; 0x27e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	5e c0       	rjmp	.+188    	; 0x27e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5c c0       	rjmp	.+184    	; 0x27e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5a c0       	rjmp	.+180    	; 0x27e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	58 c0       	rjmp	.+176    	; 0x27e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	56 c0       	rjmp	.+172    	; 0x27e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	54 c0       	rjmp	.+168    	; 0x27e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	52 c0       	rjmp	.+164    	; 0x27e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	50 c0       	rjmp	.+160    	; 0x27e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	4e c0       	rjmp	.+156    	; 0x27e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4c c0       	rjmp	.+152    	; 0x27e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4a c0       	rjmp	.+148    	; 0x27e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	48 c0       	rjmp	.+144    	; 0x27e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	46 c0       	rjmp	.+140    	; 0x27e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__vector_125>
     1f8:	0c 94 86 11 	jmp	0x230c	; 0x230c <__vector_126>
     1fc:	e4 0c       	add	r14, r4
     1fe:	d2 0c       	add	r13, r2
     200:	d5 0c       	add	r13, r5
     202:	d8 0c       	add	r13, r8
     204:	db 0c       	add	r13, r11
     206:	de 0c       	add	r13, r14
     208:	e1 0c       	add	r14, r1
     20a:	9d 19       	sub	r25, r13
     20c:	98 19       	sub	r25, r8
     20e:	a2 19       	sub	r26, r2
     210:	c7 19       	sub	r28, r7
     212:	c7 19       	sub	r28, r7
     214:	c7 19       	sub	r28, r7
     216:	c7 19       	sub	r28, r7
     218:	a7 19       	sub	r26, r7
     21a:	af 19       	sub	r26, r15
     21c:	c7 19       	sub	r28, r7
     21e:	c7 19       	sub	r28, r7
     220:	b6 19       	sub	r27, r6
     222:	ba 19       	sub	r27, r10
     224:	be 19       	sub	r27, r14
     226:	c3 19       	sub	r28, r3
     228:	81 27       	eor	r24, r17
     22a:	c6 26       	eor	r12, r22
     22c:	d5 26       	eor	r13, r21
     22e:	f6 26       	eor	r15, r22
     230:	12 27       	eor	r17, r18
     232:	27 27       	eor	r18, r23
     234:	43 27       	eor	r20, r19
     236:	62 27       	eor	r22, r18

00000238 <__trampolines_end>:
     238:	63 64       	ori	r22, 0x43	; 67
     23a:	69 6e       	ori	r22, 0xE9	; 233
     23c:	6f 70       	andi	r22, 0x0F	; 15
     23e:	73 75       	andi	r23, 0x53	; 83
     240:	78 58       	subi	r23, 0x88	; 136
     242:	5b 00       	.word	0x005b	; ????

00000244 <__ctors_end>:
     244:	11 24       	eor	r1, r1
     246:	1f be       	out	0x3f, r1	; 63
     248:	cf ef       	ldi	r28, 0xFF	; 255
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	df e2       	ldi	r29, 0x2F	; 47
     24e:	de bf       	out	0x3e, r29	; 62

00000250 <__do_copy_data>:
     250:	1b e2       	ldi	r17, 0x2B	; 43
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b0 e2       	ldi	r27, 0x20	; 32
     256:	ec e2       	ldi	r30, 0x2C	; 44
     258:	f7 e6       	ldi	r31, 0x67	; 103
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x10>
     25c:	05 90       	lpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	a0 33       	cpi	r26, 0x30	; 48
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0xc>

00000266 <__do_clear_bss>:
     266:	2f e2       	ldi	r18, 0x2F	; 47
     268:	a0 e3       	ldi	r26, 0x30	; 48
     26a:	bb e2       	ldi	r27, 0x2B	; 43
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	a5 3a       	cpi	r26, 0xA5	; 165
     272:	b2 07       	cpc	r27, r18
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <main>
     27a:	0c 94 94 33 	jmp	0x6728	; 0x6728 <_exit>

0000027e <__bad_interrupt>:
     27e:	c0 ce       	rjmp	.-640    	; 0x0 <__vectors>

00000280 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     286:	c0 3c       	cpi	r28, 0xC0	; 192
     288:	28 e0       	ldi	r18, 0x08	; 8
     28a:	d2 07       	cpc	r29, r18
     28c:	29 f4       	brne	.+10     	; 0x298 <spi_master_init+0x18>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     28e:	68 e0       	ldi	r22, 0x08	; 8
     290:	83 e0       	ldi	r24, 0x03	; 3
     292:	0e 94 bd 12 	call	0x257a	; 0x257a <sysclk_enable_module>
     296:	07 c0       	rjmp	.+14     	; 0x2a6 <spi_master_init+0x26>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     298:	80 3c       	cpi	r24, 0xC0	; 192
     29a:	99 40       	sbci	r25, 0x09	; 9
     29c:	21 f4       	brne	.+8      	; 0x2a6 <spi_master_init+0x26>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     29e:	68 e0       	ldi	r22, 0x08	; 8
     2a0:	84 e0       	ldi	r24, 0x04	; 4
     2a2:	0e 94 bd 12 	call	0x257a	; 0x257a <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
     2a6:	88 81       	ld	r24, Y
     2a8:	80 61       	ori	r24, 0x10	; 16
     2aa:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	ec 01       	movw	r28, r24
     2be:	f4 2e       	mov	r15, r20
     2c0:	b9 01       	movw	r22, r18
     2c2:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     2c4:	00 e0       	ldi	r16, 0x00	; 0
     2c6:	1c e6       	ldi	r17, 0x6C	; 108
     2c8:	2c ed       	ldi	r18, 0xDC	; 220
     2ca:	32 e0       	ldi	r19, 0x02	; 2
     2cc:	56 d7       	rcall	.+3756   	; 0x117a <spi_xmega_set_baud_div>
     2ce:	88 23       	and	r24, r24
     2d0:	4c f0       	brlt	.+18     	; 0x2e4 <spi_master_setup_device+0x32>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     2d2:	88 81       	ld	r24, Y
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     2d4:	9f 2d       	mov	r25, r15
     2d6:	99 0f       	add	r25, r25
     2d8:	99 0f       	add	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     2da:	9c 70       	andi	r25, 0x0C	; 12
     2dc:	83 7f       	andi	r24, 0xF3	; 243
     2de:	f9 2e       	mov	r15, r25
     2e0:	f8 2a       	or	r15, r24
     2e2:	f8 82       	st	Y, r15
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	08 95       	ret

000002f0 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     2f0:	fc 01       	movw	r30, r24
     2f2:	db 01       	movw	r26, r22
     2f4:	46 0f       	add	r20, r22
     2f6:	57 1f       	adc	r21, r23
	while (len--) {
     2f8:	05 c0       	rjmp	.+10     	; 0x304 <spi_write_packet+0x14>
		spi_write_single(spi, *data++);
     2fa:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     2fc:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     2fe:	82 81       	ldd	r24, Z+2	; 0x02
		
		while (!spi_is_rx_full(spi)) {
     300:	88 23       	and	r24, r24
     302:	ec f7       	brge	.-6      	; 0x2fe <spi_write_packet+0xe>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
     304:	a4 17       	cp	r26, r20
     306:	b5 07       	cpc	r27, r21
     308:	c1 f7       	brne	.-16     	; 0x2fa <spi_write_packet+0xa>
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	08 95       	ret

0000030e <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
     30e:	fc 01       	movw	r30, r24
     310:	db 01       	movw	r26, r22
	while (len--) {
     312:	41 15       	cp	r20, r1
     314:	51 05       	cpc	r21, r1
     316:	61 f0       	breq	.+24     	; 0x330 <spi_read_packet+0x22>
     318:	46 0f       	add	r20, r22
     31a:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     31c:	9f ef       	ldi	r25, 0xFF	; 255
     31e:	93 83       	std	Z+3, r25	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     320:	82 81       	ldd	r24, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
     322:	88 23       	and	r24, r24
     324:	ec f7       	brge	.-6      	; 0x320 <spi_read_packet+0x12>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
     326:	83 81       	ldd	r24, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
     328:	8d 93       	st	X+, r24
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
     32a:	a4 17       	cp	r26, r20
     32c:	b5 07       	cpc	r27, r21
     32e:	b9 f7       	brne	.-18     	; 0x31e <spi_read_packet+0x10>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	08 95       	ret

00000334 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_level(device->id,0);
     334:	fb 01       	movw	r30, r22
     336:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     338:	e8 2f       	mov	r30, r24
     33a:	e6 95       	lsr	r30
     33c:	e6 95       	lsr	r30
     33e:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     340:	40 e2       	ldi	r20, 0x20	; 32
     342:	e4 9f       	mul	r30, r20
     344:	f0 01       	movw	r30, r0
     346:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     348:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     34a:	87 70       	andi	r24, 0x07	; 7
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	a9 01       	movw	r20, r18
     352:	02 c0       	rjmp	.+4      	; 0x358 <spi_select_device+0x24>
     354:	44 0f       	add	r20, r20
     356:	55 1f       	adc	r21, r21
     358:	8a 95       	dec	r24
     35a:	e2 f7       	brpl	.-8      	; 0x354 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     35c:	46 83       	std	Z+6, r20	; 0x06
     35e:	08 95       	ret

00000360 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_level(device->id,1);
     360:	fb 01       	movw	r30, r22
     362:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     364:	e8 2f       	mov	r30, r24
     366:	e6 95       	lsr	r30
     368:	e6 95       	lsr	r30
     36a:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     36c:	40 e2       	ldi	r20, 0x20	; 32
     36e:	e4 9f       	mul	r30, r20
     370:	f0 01       	movw	r30, r0
     372:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     374:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     376:	87 70       	andi	r24, 0x07	; 7
     378:	21 e0       	ldi	r18, 0x01	; 1
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	a9 01       	movw	r20, r18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <spi_deselect_device+0x24>
     380:	44 0f       	add	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	8a 95       	dec	r24
     386:	e2 f7       	brpl	.-8      	; 0x380 <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     388:	45 83       	std	Z+5, r20	; 0x05
     38a:	08 95       	ret

0000038c <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     38c:	10 92 46 2c 	sts	0x2C46, r1
     390:	10 92 52 2c 	sts	0x2C52, r1
     394:	10 92 53 2c 	sts	0x2C53, r1
     398:	81 ea       	ldi	r24, 0xA1	; 161
     39a:	80 93 48 2c 	sts	0x2C48, r24
     39e:	80 e2       	ldi	r24, 0x20	; 32
     3a0:	80 93 49 2c 	sts	0x2C49, r24
     3a4:	10 92 4a 2c 	sts	0x2C4A, r1
     3a8:	10 92 4b 2c 	sts	0x2C4B, r1
     3ac:	10 92 4c 2c 	sts	0x2C4C, r1
     3b0:	10 92 4d 2c 	sts	0x2C4D, r1
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	80 93 4e 2c 	sts	0x2C4E, r24
     3bc:	90 93 4f 2c 	sts	0x2C4F, r25
     3c0:	10 92 50 2c 	sts	0x2C50, r1
     3c4:	10 92 51 2c 	sts	0x2C51, r1
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	92 ec       	ldi	r25, 0xC2	; 194
     3cc:	a1 e0       	ldi	r26, 0x01	; 1
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	80 93 54 2c 	sts	0x2C54, r24
     3d4:	90 93 55 2c 	sts	0x2C55, r25
     3d8:	a0 93 56 2c 	sts	0x2C56, r26
     3dc:	b0 93 57 2c 	sts	0x2C57, r27
     3e0:	10 92 58 2c 	sts	0x2C58, r1
     3e4:	10 92 59 2c 	sts	0x2C59, r1
     3e8:	88 e0       	ldi	r24, 0x08	; 8
     3ea:	80 93 5a 2c 	sts	0x2C5A, r24
     3ee:	80 91 46 2c 	lds	r24, 0x2C46
     3f2:	8f 5f       	subi	r24, 0xFF	; 255
     3f4:	80 93 46 2c 	sts	0x2C46, r24
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	08 95       	ret

000003fc <udi_cdc_comm_disable>:
     3fc:	80 91 46 2c 	lds	r24, 0x2C46
     400:	81 50       	subi	r24, 0x01	; 1
     402:	80 93 46 2c 	sts	0x2C46, r24
     406:	08 95       	ret

00000408 <udi_cdc_data_disable>:
     408:	80 91 45 2c 	lds	r24, 0x2C45
     40c:	81 50       	subi	r24, 0x01	; 1
     40e:	80 93 45 2c 	sts	0x2C45, r24
     412:	80 91 45 2c 	lds	r24, 0x2C45
     416:	10 92 44 2c 	sts	0x2C44, r1
     41a:	08 95       	ret

0000041c <udi_cdc_data_setup>:
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	08 95       	ret

00000420 <udi_cdc_getsetting>:
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	08 95       	ret

00000424 <udi_cdc_comm_setup>:
     424:	80 91 4a 2e 	lds	r24, 0x2E4A
     428:	88 23       	and	r24, r24
     42a:	dc f4       	brge	.+54     	; 0x462 <udi_cdc_comm_setup+0x3e>
     42c:	80 76       	andi	r24, 0x60	; 96
     42e:	80 32       	cpi	r24, 0x20	; 32
     430:	e9 f5       	brne	.+122    	; 0x4ac <udi_cdc_comm_setup+0x88>
     432:	80 91 4b 2e 	lds	r24, 0x2E4B
     436:	81 32       	cpi	r24, 0x21	; 33
     438:	d9 f5       	brne	.+118    	; 0x4b0 <udi_cdc_comm_setup+0x8c>
     43a:	80 91 50 2e 	lds	r24, 0x2E50
     43e:	90 91 51 2e 	lds	r25, 0x2E51
     442:	07 97       	sbiw	r24, 0x07	; 7
     444:	b9 f5       	brne	.+110    	; 0x4b4 <udi_cdc_comm_setup+0x90>
     446:	84 e5       	ldi	r24, 0x54	; 84
     448:	9c e2       	ldi	r25, 0x2C	; 44
     44a:	80 93 52 2e 	sts	0x2E52, r24
     44e:	90 93 53 2e 	sts	0x2E53, r25
     452:	87 e0       	ldi	r24, 0x07	; 7
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	80 93 54 2e 	sts	0x2E54, r24
     45a:	90 93 55 2e 	sts	0x2E55, r25
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	08 95       	ret
     462:	80 76       	andi	r24, 0x60	; 96
     464:	80 32       	cpi	r24, 0x20	; 32
     466:	41 f5       	brne	.+80     	; 0x4b8 <udi_cdc_comm_setup+0x94>
     468:	80 91 4b 2e 	lds	r24, 0x2E4B
     46c:	80 32       	cpi	r24, 0x20	; 32
     46e:	21 f0       	breq	.+8      	; 0x478 <udi_cdc_comm_setup+0x54>
     470:	82 32       	cpi	r24, 0x22	; 34
     472:	21 f5       	brne	.+72     	; 0x4bc <udi_cdc_comm_setup+0x98>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	08 95       	ret
     478:	80 91 50 2e 	lds	r24, 0x2E50
     47c:	90 91 51 2e 	lds	r25, 0x2E51
     480:	07 97       	sbiw	r24, 0x07	; 7
     482:	f1 f4       	brne	.+60     	; 0x4c0 <udi_cdc_comm_setup+0x9c>
     484:	82 e6       	ldi	r24, 0x62	; 98
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	80 93 56 2e 	sts	0x2E56, r24
     48c:	90 93 57 2e 	sts	0x2E57, r25
     490:	84 e5       	ldi	r24, 0x54	; 84
     492:	9c e2       	ldi	r25, 0x2C	; 44
     494:	80 93 52 2e 	sts	0x2E52, r24
     498:	90 93 53 2e 	sts	0x2E53, r25
     49c:	87 e0       	ldi	r24, 0x07	; 7
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	80 93 54 2e 	sts	0x2E54, r24
     4a4:	90 93 55 2e 	sts	0x2E55, r25
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	08 95       	ret
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	08 95       	ret
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	08 95       	ret
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	08 95       	ret
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	08 95       	ret
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	08 95       	ret
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	08 95       	ret

000004c4 <udi_cdc_line_coding_received>:
     4c4:	08 95       	ret

000004c6 <udi_cdc_tx_send>:
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	80 91 33 2b 	lds	r24, 0x2B33
     4d4:	81 11       	cpse	r24, r1
     4d6:	9c c0       	rjmp	.+312    	; 0x610 <udi_cdc_tx_send+0x14a>
     4d8:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_is_high_speed>
     4dc:	88 23       	and	r24, r24
     4de:	51 f0       	breq	.+20     	; 0x4f4 <udi_cdc_tx_send+0x2e>
     4e0:	c0 91 34 2b 	lds	r28, 0x2B34
     4e4:	d0 91 35 2b 	lds	r29, 0x2B35
     4e8:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <udd_get_micro_frame_number>
     4ec:	c8 17       	cp	r28, r24
     4ee:	d9 07       	cpc	r29, r25
     4f0:	59 f4       	brne	.+22     	; 0x508 <udi_cdc_tx_send+0x42>
     4f2:	8e c0       	rjmp	.+284    	; 0x610 <udi_cdc_tx_send+0x14a>
     4f4:	c0 91 34 2b 	lds	r28, 0x2B34
     4f8:	d0 91 35 2b 	lds	r29, 0x2B35
     4fc:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <udd_get_frame_number>
     500:	c8 17       	cp	r28, r24
     502:	d9 07       	cpc	r29, r25
     504:	09 f4       	brne	.+2      	; 0x508 <udi_cdc_tx_send+0x42>
     506:	84 c0       	rjmp	.+264    	; 0x610 <udi_cdc_tx_send+0x14a>
     508:	df b7       	in	r29, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	c0 91 36 2b 	lds	r28, 0x2B36
     510:	ec 2f       	mov	r30, r28
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	e9 5c       	subi	r30, 0xC9	; 201
     51a:	f4 4d       	sbci	r31, 0xD4	; 212
     51c:	80 81       	ld	r24, Z
     51e:	91 81       	ldd	r25, Z+1	; 0x01
     520:	89 2b       	or	r24, r25
     522:	09 f5       	brne	.+66     	; 0x566 <udi_cdc_tx_send+0xa0>
     524:	80 91 30 2b 	lds	r24, 0x2B30
     528:	90 91 31 2b 	lds	r25, 0x2B31
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	80 93 30 2b 	sts	0x2B30, r24
     532:	90 93 31 2b 	sts	0x2B31, r25
     536:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_is_high_speed>
     53a:	81 11       	cpse	r24, r1
     53c:	07 c0       	rjmp	.+14     	; 0x54c <udi_cdc_tx_send+0x86>
     53e:	80 91 30 2b 	lds	r24, 0x2B30
     542:	90 91 31 2b 	lds	r25, 0x2B31
     546:	84 36       	cpi	r24, 0x64	; 100
     548:	91 05       	cpc	r25, r1
     54a:	58 f0       	brcs	.+22     	; 0x562 <udi_cdc_tx_send+0x9c>
     54c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_is_high_speed>
     550:	88 23       	and	r24, r24
     552:	49 f0       	breq	.+18     	; 0x566 <udi_cdc_tx_send+0xa0>
     554:	80 91 30 2b 	lds	r24, 0x2B30
     558:	90 91 31 2b 	lds	r25, 0x2B31
     55c:	80 32       	cpi	r24, 0x20	; 32
     55e:	93 40       	sbci	r25, 0x03	; 3
     560:	10 f4       	brcc	.+4      	; 0x566 <udi_cdc_tx_send+0xa0>
     562:	df bf       	out	0x3f, r29	; 63
     564:	55 c0       	rjmp	.+170    	; 0x610 <udi_cdc_tx_send+0x14a>
     566:	10 92 30 2b 	sts	0x2B30, r1
     56a:	10 92 31 2b 	sts	0x2B31, r1
     56e:	80 91 32 2b 	lds	r24, 0x2B32
     572:	81 11       	cpse	r24, r1
     574:	06 c0       	rjmp	.+12     	; 0x582 <udi_cdc_tx_send+0xbc>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	c1 11       	cpse	r28, r1
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	80 93 36 2b 	sts	0x2B36, r24
     580:	04 c0       	rjmp	.+8      	; 0x58a <udi_cdc_tx_send+0xc4>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	c1 11       	cpse	r28, r1
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	c8 2f       	mov	r28, r24
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	80 93 33 2b 	sts	0x2B33, r24
     590:	df bf       	out	0x3f, r29	; 63
     592:	d0 e0       	ldi	r29, 0x00	; 0
     594:	fe 01       	movw	r30, r28
     596:	ee 0f       	add	r30, r30
     598:	ff 1f       	adc	r31, r31
     59a:	e9 5c       	subi	r30, 0xC9	; 201
     59c:	f4 4d       	sbci	r31, 0xD4	; 212
     59e:	ff 24       	eor	r15, r15
     5a0:	f3 94       	inc	r15
     5a2:	80 81       	ld	r24, Z
     5a4:	91 81       	ldd	r25, Z+1	; 0x01
     5a6:	80 34       	cpi	r24, 0x40	; 64
     5a8:	91 05       	cpc	r25, r1
     5aa:	09 f4       	brne	.+2      	; 0x5ae <udi_cdc_tx_send+0xe8>
     5ac:	f1 2c       	mov	r15, r1
     5ae:	ff 20       	and	r15, r15
     5b0:	91 f0       	breq	.+36     	; 0x5d6 <udi_cdc_tx_send+0x110>
     5b2:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_is_high_speed>
     5b6:	88 23       	and	r24, r24
     5b8:	39 f0       	breq	.+14     	; 0x5c8 <udi_cdc_tx_send+0x102>
     5ba:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <udd_get_micro_frame_number>
     5be:	80 93 34 2b 	sts	0x2B34, r24
     5c2:	90 93 35 2b 	sts	0x2B35, r25
     5c6:	0b c0       	rjmp	.+22     	; 0x5de <udi_cdc_tx_send+0x118>
     5c8:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <udd_get_frame_number>
     5cc:	80 93 34 2b 	sts	0x2B34, r24
     5d0:	90 93 35 2b 	sts	0x2B35, r25
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <udi_cdc_tx_send+0x118>
     5d6:	10 92 34 2b 	sts	0x2B34, r1
     5da:	10 92 35 2b 	sts	0x2B35, r1
     5de:	fe 01       	movw	r30, r28
     5e0:	ee 0f       	add	r30, r30
     5e2:	ff 1f       	adc	r31, r31
     5e4:	e9 5c       	subi	r30, 0xC9	; 201
     5e6:	f4 4d       	sbci	r31, 0xD4	; 212
     5e8:	20 81       	ld	r18, Z
     5ea:	31 81       	ldd	r19, Z+1	; 0x01
     5ec:	ae 01       	movw	r20, r28
     5ee:	00 24       	eor	r0, r0
     5f0:	56 95       	lsr	r21
     5f2:	47 95       	ror	r20
     5f4:	07 94       	ror	r0
     5f6:	56 95       	lsr	r21
     5f8:	47 95       	ror	r20
     5fa:	07 94       	ror	r0
     5fc:	54 2f       	mov	r21, r20
     5fe:	40 2d       	mov	r20, r0
     600:	44 5c       	subi	r20, 0xC4	; 196
     602:	54 4d       	sbci	r21, 0xD4	; 212
     604:	0e e0       	ldi	r16, 0x0E	; 14
     606:	13 e0       	ldi	r17, 0x03	; 3
     608:	6f 2d       	mov	r22, r15
     60a:	81 e8       	ldi	r24, 0x81	; 129
     60c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <udd_ep_run>
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	08 95       	ret

0000061c <udi_cdc_data_sent>:
     61c:	81 11       	cpse	r24, r1
     61e:	15 c0       	rjmp	.+42     	; 0x64a <udi_cdc_data_sent+0x2e>
     620:	20 91 36 2b 	lds	r18, 0x2B36
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	22 23       	and	r18, r18
     62a:	11 f0       	breq	.+4      	; 0x630 <udi_cdc_data_sent+0x14>
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	fc 01       	movw	r30, r24
     632:	ee 0f       	add	r30, r30
     634:	ff 1f       	adc	r31, r31
     636:	e9 5c       	subi	r30, 0xC9	; 201
     638:	f4 4d       	sbci	r31, 0xD4	; 212
     63a:	10 82       	st	Z, r1
     63c:	11 82       	std	Z+1, r1	; 0x01
     63e:	10 92 32 2b 	sts	0x2B32, r1
     642:	10 92 33 2b 	sts	0x2B33, r1
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	3e cf       	rjmp	.-388    	; 0x4c6 <udi_cdc_tx_send>
     64a:	08 95       	ret

0000064c <udi_cdc_data_sof_notify>:
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	3b cf       	rjmp	.-394    	; 0x4c6 <udi_cdc_tx_send>
     650:	08 95       	ret

00000652 <udi_cdc_multi_get_nb_received_data>:
     652:	4f b7       	in	r20, 0x3f	; 63
     654:	f8 94       	cli
     656:	20 91 bd 2b 	lds	r18, 0x2BBD
     65a:	30 91 be 2b 	lds	r19, 0x2BBE
     65e:	e0 91 bf 2b 	lds	r30, 0x2BBF
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	ee 0f       	add	r30, r30
     666:	ff 1f       	adc	r31, r31
     668:	e0 54       	subi	r30, 0x40	; 64
     66a:	f4 4d       	sbci	r31, 0xD4	; 212
     66c:	80 81       	ld	r24, Z
     66e:	91 81       	ldd	r25, Z+1	; 0x01
     670:	82 1b       	sub	r24, r18
     672:	93 0b       	sbc	r25, r19
     674:	4f bf       	out	0x3f, r20	; 63
     676:	08 95       	ret

00000678 <udi_cdc_multi_is_rx_ready>:
     678:	ec df       	rcall	.-40     	; 0x652 <udi_cdc_multi_get_nb_received_data>
     67a:	21 e0       	ldi	r18, 0x01	; 1
     67c:	89 2b       	or	r24, r25
     67e:	09 f4       	brne	.+2      	; 0x682 <udi_cdc_multi_is_rx_ready+0xa>
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	82 2f       	mov	r24, r18
     684:	08 95       	ret

00000686 <udi_cdc_rx_start>:
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	4f b7       	in	r20, 0x3f	; 63
     690:	f8 94       	cli
     692:	50 91 bf 2b 	lds	r21, 0x2BBF
     696:	80 91 bc 2b 	lds	r24, 0x2BBC
     69a:	81 11       	cpse	r24, r1
     69c:	10 c0       	rjmp	.+32     	; 0x6be <udi_cdc_rx_start+0x38>
     69e:	20 91 bd 2b 	lds	r18, 0x2BBD
     6a2:	30 91 be 2b 	lds	r19, 0x2BBE
     6a6:	c5 2f       	mov	r28, r21
     6a8:	d0 e0       	ldi	r29, 0x00	; 0
     6aa:	fe 01       	movw	r30, r28
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	e0 54       	subi	r30, 0x40	; 64
     6b2:	f4 4d       	sbci	r31, 0xD4	; 212
     6b4:	80 81       	ld	r24, Z
     6b6:	91 81       	ldd	r25, Z+1	; 0x01
     6b8:	28 17       	cp	r18, r24
     6ba:	39 07       	cpc	r19, r25
     6bc:	18 f4       	brcc	.+6      	; 0x6c4 <udi_cdc_rx_start+0x3e>
     6be:	4f bf       	out	0x3f, r20	; 63
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	23 c0       	rjmp	.+70     	; 0x70a <udi_cdc_rx_start+0x84>
     6c4:	10 92 bd 2b 	sts	0x2BBD, r1
     6c8:	10 92 be 2b 	sts	0x2BBE, r1
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	51 11       	cpse	r21, r1
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	80 93 bf 2b 	sts	0x2BBF, r24
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 bc 2b 	sts	0x2BBC, r24
     6dc:	4f bf       	out	0x3f, r20	; 63
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	cb df       	rcall	.-106    	; 0x678 <udi_cdc_multi_is_rx_ready>
     6e2:	ae 01       	movw	r20, r28
     6e4:	00 24       	eor	r0, r0
     6e6:	56 95       	lsr	r21
     6e8:	47 95       	ror	r20
     6ea:	07 94       	ror	r0
     6ec:	56 95       	lsr	r21
     6ee:	47 95       	ror	r20
     6f0:	07 94       	ror	r0
     6f2:	54 2f       	mov	r21, r20
     6f4:	40 2d       	mov	r20, r0
     6f6:	4c 53       	subi	r20, 0x3C	; 60
     6f8:	54 4d       	sbci	r21, 0xD4	; 212
     6fa:	0c eb       	ldi	r16, 0xBC	; 188
     6fc:	13 e0       	ldi	r17, 0x03	; 3
     6fe:	20 e4       	ldi	r18, 0x40	; 64
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <udd_ep_run>
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	08 95       	ret

00000714 <udi_cdc_data_enable>:
     714:	10 92 45 2c 	sts	0x2C45, r1
     718:	10 92 33 2b 	sts	0x2B33, r1
     71c:	10 92 32 2b 	sts	0x2B32, r1
     720:	10 92 36 2b 	sts	0x2B36, r1
     724:	10 92 37 2b 	sts	0x2B37, r1
     728:	10 92 38 2b 	sts	0x2B38, r1
     72c:	10 92 39 2b 	sts	0x2B39, r1
     730:	10 92 3a 2b 	sts	0x2B3A, r1
     734:	10 92 34 2b 	sts	0x2B34, r1
     738:	10 92 35 2b 	sts	0x2B35, r1
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	c3 de       	rcall	.-634    	; 0x4c6 <udi_cdc_tx_send>
     740:	10 92 bc 2b 	sts	0x2BBC, r1
     744:	10 92 bf 2b 	sts	0x2BBF, r1
     748:	10 92 c0 2b 	sts	0x2BC0, r1
     74c:	10 92 c1 2b 	sts	0x2BC1, r1
     750:	10 92 bd 2b 	sts	0x2BBD, r1
     754:	10 92 be 2b 	sts	0x2BBE, r1
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	95 df       	rcall	.-214    	; 0x686 <udi_cdc_rx_start>
     75c:	88 23       	and	r24, r24
     75e:	59 f0       	breq	.+22     	; 0x776 <udi_cdc_data_enable+0x62>
     760:	90 91 45 2c 	lds	r25, 0x2C45
     764:	9f 5f       	subi	r25, 0xFF	; 255
     766:	90 93 45 2c 	sts	0x2C45, r25
     76a:	90 91 45 2c 	lds	r25, 0x2C45
     76e:	91 30       	cpi	r25, 0x01	; 1
     770:	11 f4       	brne	.+4      	; 0x776 <udi_cdc_data_enable+0x62>
     772:	90 93 44 2c 	sts	0x2C44, r25
     776:	08 95       	ret

00000778 <udi_cdc_data_received>:
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	94 2f       	mov	r25, r20
     77e:	81 11       	cpse	r24, r1
     780:	29 c0       	rjmp	.+82     	; 0x7d4 <udi_cdc_data_received+0x5c>
     782:	80 91 bf 2b 	lds	r24, 0x2BBF
     786:	e1 e0       	ldi	r30, 0x01	; 1
     788:	81 11       	cpse	r24, r1
     78a:	e0 e0       	ldi	r30, 0x00	; 0
     78c:	61 15       	cp	r22, r1
     78e:	71 05       	cpc	r23, r1
     790:	b1 f4       	brne	.+44     	; 0x7be <udi_cdc_data_received+0x46>
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	00 24       	eor	r0, r0
     796:	f6 95       	lsr	r31
     798:	e7 95       	ror	r30
     79a:	07 94       	ror	r0
     79c:	f6 95       	lsr	r31
     79e:	e7 95       	ror	r30
     7a0:	07 94       	ror	r0
     7a2:	fe 2f       	mov	r31, r30
     7a4:	e0 2d       	mov	r30, r0
     7a6:	af 01       	movw	r20, r30
     7a8:	4c 53       	subi	r20, 0x3C	; 60
     7aa:	54 4d       	sbci	r21, 0xD4	; 212
     7ac:	0c eb       	ldi	r16, 0xBC	; 188
     7ae:	13 e0       	ldi	r17, 0x03	; 3
     7b0:	20 e4       	ldi	r18, 0x40	; 64
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	89 2f       	mov	r24, r25
     7b8:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <udd_ep_run>
     7bc:	0b c0       	rjmp	.+22     	; 0x7d4 <udi_cdc_data_received+0x5c>
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	ee 0f       	add	r30, r30
     7c2:	ff 1f       	adc	r31, r31
     7c4:	e0 54       	subi	r30, 0x40	; 64
     7c6:	f4 4d       	sbci	r31, 0xD4	; 212
     7c8:	60 83       	st	Z, r22
     7ca:	71 83       	std	Z+1, r23	; 0x01
     7cc:	10 92 bc 2b 	sts	0x2BBC, r1
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	59 df       	rcall	.-334    	; 0x686 <udi_cdc_rx_start>
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <udi_cdc_is_rx_ready>:
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	4d cf       	rjmp	.-358    	; 0x678 <udi_cdc_multi_is_rx_ready>
     7de:	08 95       	ret

000007e0 <udi_cdc_multi_getc>:
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	11 e0       	ldi	r17, 0x01	; 1
     7e8:	80 91 5a 2c 	lds	r24, 0x2C5A
     7ec:	89 30       	cpi	r24, 0x09	; 9
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <udi_cdc_multi_getc+0x12>
     7f0:	10 e0       	ldi	r17, 0x00	; 0
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	3f b7       	in	r19, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	80 91 bd 2b 	lds	r24, 0x2BBD
     7fe:	90 91 be 2b 	lds	r25, 0x2BBE
     802:	20 91 bf 2b 	lds	r18, 0x2BBF
     806:	3f bf       	out	0x3f, r19	; 63
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	f9 01       	movw	r30, r18
     80c:	ee 0f       	add	r30, r30
     80e:	ff 1f       	adc	r31, r31
     810:	e0 54       	subi	r30, 0x40	; 64
     812:	f4 4d       	sbci	r31, 0xD4	; 212
     814:	40 81       	ld	r20, Z
     816:	51 81       	ldd	r21, Z+1	; 0x01
     818:	84 17       	cp	r24, r20
     81a:	95 07       	cpc	r25, r21
     81c:	30 f0       	brcs	.+12     	; 0x82a <udi_cdc_multi_getc+0x4a>
     81e:	80 91 44 2c 	lds	r24, 0x2C44
     822:	81 11       	cpse	r24, r1
     824:	e8 cf       	rjmp	.-48     	; 0x7f6 <udi_cdc_multi_getc+0x16>
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	20 c0       	rjmp	.+64     	; 0x86a <udi_cdc_multi_getc+0x8a>
     82a:	f9 01       	movw	r30, r18
     82c:	00 24       	eor	r0, r0
     82e:	f6 95       	lsr	r31
     830:	e7 95       	ror	r30
     832:	07 94       	ror	r0
     834:	f6 95       	lsr	r31
     836:	e7 95       	ror	r30
     838:	07 94       	ror	r0
     83a:	fe 2f       	mov	r31, r30
     83c:	e0 2d       	mov	r30, r0
     83e:	e8 0f       	add	r30, r24
     840:	f9 1f       	adc	r31, r25
     842:	ec 53       	subi	r30, 0x3C	; 60
     844:	f4 4d       	sbci	r31, 0xD4	; 212
     846:	20 81       	ld	r18, Z
     848:	eb 01       	movw	r28, r22
     84a:	c2 2b       	or	r28, r18
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	80 93 bd 2b 	sts	0x2BBD, r24
     852:	90 93 be 2b 	sts	0x2BBE, r25
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	16 df       	rcall	.-468    	; 0x686 <udi_cdc_rx_start>
     85a:	11 23       	and	r17, r17
     85c:	21 f0       	breq	.+8      	; 0x866 <udi_cdc_multi_getc+0x86>
     85e:	7c 2f       	mov	r23, r28
     860:	66 27       	eor	r22, r22
     862:	10 e0       	ldi	r17, 0x00	; 0
     864:	c8 cf       	rjmp	.-112    	; 0x7f6 <udi_cdc_multi_getc+0x16>
     866:	8c 2f       	mov	r24, r28
     868:	9d 2f       	mov	r25, r29
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	08 95       	ret

00000872 <udi_cdc_getc>:
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	b5 cf       	rjmp	.-150    	; 0x7e0 <udi_cdc_multi_getc>
     876:	08 95       	ret

00000878 <udi_cdc_multi_get_free_tx_buffer>:
     878:	9f b7       	in	r25, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	80 91 36 2b 	lds	r24, 0x2B36
     880:	e8 2f       	mov	r30, r24
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	e9 5c       	subi	r30, 0xC9	; 201
     88a:	f4 4d       	sbci	r31, 0xD4	; 212
     88c:	20 81       	ld	r18, Z
     88e:	31 81       	ldd	r19, Z+1	; 0x01
     890:	20 34       	cpi	r18, 0x40	; 64
     892:	31 05       	cpc	r19, r1
     894:	89 f4       	brne	.+34     	; 0x8b8 <udi_cdc_multi_get_free_tx_buffer+0x40>
     896:	40 91 33 2b 	lds	r20, 0x2B33
     89a:	41 11       	cpse	r20, r1
     89c:	0d c0       	rjmp	.+26     	; 0x8b8 <udi_cdc_multi_get_free_tx_buffer+0x40>
     89e:	40 91 32 2b 	lds	r20, 0x2B32
     8a2:	41 11       	cpse	r20, r1
     8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <udi_cdc_multi_get_free_tx_buffer+0x40>
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	20 93 32 2b 	sts	0x2B32, r18
     8ac:	81 11       	cpse	r24, r1
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	20 93 36 2b 	sts	0x2B36, r18
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	9f bf       	out	0x3f, r25	; 63
     8ba:	80 e4       	ldi	r24, 0x40	; 64
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	82 1b       	sub	r24, r18
     8c0:	93 0b       	sbc	r25, r19
     8c2:	08 95       	ret

000008c4 <udi_cdc_multi_is_tx_ready>:
     8c4:	d9 df       	rcall	.-78     	; 0x878 <udi_cdc_multi_get_free_tx_buffer>
     8c6:	21 e0       	ldi	r18, 0x01	; 1
     8c8:	89 2b       	or	r24, r25
     8ca:	09 f4       	brne	.+2      	; 0x8ce <udi_cdc_multi_is_tx_ready+0xa>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	82 2f       	mov	r24, r18
     8d0:	08 95       	ret

000008d2 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	16 2f       	mov	r17, r22
     8da:	c7 2f       	mov	r28, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     8dc:	d1 e0       	ldi	r29, 0x01	; 1
     8de:	80 91 5a 2c 	lds	r24, 0x2C5A
     8e2:	89 30       	cpi	r24, 0x09	; 9
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <udi_cdc_multi_putc+0x16>
     8e6:	d0 e0       	ldi	r29, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	ec df       	rcall	.-40     	; 0x8c4 <udi_cdc_multi_is_tx_ready>
     8ec:	81 11       	cpse	r24, r1
     8ee:	07 c0       	rjmp	.+14     	; 0x8fe <udi_cdc_multi_putc+0x2c>
		if (!udi_cdc_data_running) {
     8f0:	80 91 44 2c 	lds	r24, 0x2C44
     8f4:	81 11       	cpse	r24, r1
     8f6:	f8 cf       	rjmp	.-16     	; 0x8e8 <udi_cdc_multi_putc+0x16>
			return false;
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	2b c0       	rjmp	.+86     	; 0x954 <udi_cdc_multi_putc+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8fe:	6f b7       	in	r22, 0x3f	; 63
	cpu_irq_disable();
     900:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     902:	20 91 36 2b 	lds	r18, 0x2B36
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	f9 01       	movw	r30, r18
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	e9 5c       	subi	r30, 0xC9	; 201
     910:	f4 4d       	sbci	r31, 0xD4	; 212
     912:	80 81       	ld	r24, Z
     914:	91 81       	ldd	r25, Z+1	; 0x01
     916:	ac 01       	movw	r20, r24
     918:	4f 5f       	subi	r20, 0xFF	; 255
     91a:	5f 4f       	sbci	r21, 0xFF	; 255
     91c:	40 83       	st	Z, r20
     91e:	51 83       	std	Z+1, r21	; 0x01
     920:	f9 01       	movw	r30, r18
     922:	00 24       	eor	r0, r0
     924:	f6 95       	lsr	r31
     926:	e7 95       	ror	r30
     928:	07 94       	ror	r0
     92a:	f6 95       	lsr	r31
     92c:	e7 95       	ror	r30
     92e:	07 94       	ror	r0
     930:	fe 2f       	mov	r31, r30
     932:	e0 2d       	mov	r30, r0
     934:	8e 0f       	add	r24, r30
     936:	9f 1f       	adc	r25, r31
     938:	fc 01       	movw	r30, r24
     93a:	e4 5c       	subi	r30, 0xC4	; 196
     93c:	f4 4d       	sbci	r31, 0xD4	; 212
     93e:	10 83       	st	Z, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     940:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     942:	dd 23       	and	r29, r29
     944:	29 f0       	breq	.+10     	; 0x950 <udi_cdc_multi_putc+0x7e>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     946:	1c 2f       	mov	r17, r28
     948:	cc 0f       	add	r28, r28
     94a:	cc 0b       	sbc	r28, r28
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     94c:	d0 e0       	ldi	r29, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     94e:	cc cf       	rjmp	.-104    	; 0x8e8 <udi_cdc_multi_putc+0x16>
	}
	return true;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	08 95       	ret

0000095c <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     95c:	bc 01       	movw	r22, r24
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	b8 cf       	rjmp	.-144    	; 0x8d2 <udi_cdc_multi_putc>
}
     962:	08 95       	ret

00000964 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     964:	e0 91 60 2c 	lds	r30, 0x2C60
     968:	f0 91 61 2c 	lds	r31, 0x2C61
     96c:	01 90       	ld	r0, Z+
     96e:	f0 81       	ld	r31, Z
     970:	e0 2d       	mov	r30, r0
     972:	22 81       	ldd	r18, Z+2	; 0x02
     974:	33 81       	ldd	r19, Z+3	; 0x03
     976:	2e 0f       	add	r18, r30
     978:	3f 1f       	adc	r19, r31
     97a:	fc 01       	movw	r30, r24
     97c:	40 81       	ld	r20, Z
     97e:	e4 0f       	add	r30, r20
     980:	f1 1d       	adc	r31, r1
     982:	e2 17       	cp	r30, r18
     984:	f3 07       	cpc	r31, r19
     986:	a0 f4       	brcc	.+40     	; 0x9b0 <udc_next_desc_in_iface+0x4c>
     988:	81 81       	ldd	r24, Z+1	; 0x01
     98a:	84 30       	cpi	r24, 0x04	; 4
     98c:	a1 f0       	breq	.+40     	; 0x9b6 <udc_next_desc_in_iface+0x52>
     98e:	86 13       	cpse	r24, r22
     990:	06 c0       	rjmp	.+12     	; 0x99e <udc_next_desc_in_iface+0x3a>
     992:	14 c0       	rjmp	.+40     	; 0x9bc <udc_next_desc_in_iface+0x58>
     994:	81 81       	ldd	r24, Z+1	; 0x01
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	a1 f0       	breq	.+40     	; 0x9c2 <udc_next_desc_in_iface+0x5e>
     99a:	86 17       	cp	r24, r22
     99c:	a9 f0       	breq	.+42     	; 0x9c8 <udc_next_desc_in_iface+0x64>
     99e:	80 81       	ld	r24, Z
     9a0:	e8 0f       	add	r30, r24
     9a2:	f1 1d       	adc	r31, r1
     9a4:	e2 17       	cp	r30, r18
     9a6:	f3 07       	cpc	r31, r19
     9a8:	a8 f3       	brcs	.-22     	; 0x994 <udc_next_desc_in_iface+0x30>
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	08 95       	ret
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	08 95       	ret
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	08 95       	ret
     9bc:	8e 2f       	mov	r24, r30
     9be:	9f 2f       	mov	r25, r31
     9c0:	08 95       	ret
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	08 95       	ret
     9c8:	8e 2f       	mov	r24, r30
     9ca:	9f 2f       	mov	r25, r31
     9cc:	08 95       	ret

000009ce <udc_valid_address>:
     9ce:	80 91 4c 2e 	lds	r24, 0x2E4C
     9d2:	8f 77       	andi	r24, 0x7F	; 127
     9d4:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <udd_set_address>
     9d8:	08 95       	ret

000009da <udc_update_iface_desc>:
     9da:	90 91 62 2c 	lds	r25, 0x2C62
     9de:	99 23       	and	r25, r25
     9e0:	81 f1       	breq	.+96     	; 0xa42 <udc_update_iface_desc+0x68>
     9e2:	e0 91 60 2c 	lds	r30, 0x2C60
     9e6:	f0 91 61 2c 	lds	r31, 0x2C61
     9ea:	01 90       	ld	r0, Z+
     9ec:	f0 81       	ld	r31, Z
     9ee:	e0 2d       	mov	r30, r0
     9f0:	94 81       	ldd	r25, Z+4	; 0x04
     9f2:	89 17       	cp	r24, r25
     9f4:	40 f5       	brcc	.+80     	; 0xa46 <udc_update_iface_desc+0x6c>
     9f6:	e0 93 5e 2c 	sts	0x2C5E, r30
     9fa:	f0 93 5f 2c 	sts	0x2C5F, r31
     9fe:	22 81       	ldd	r18, Z+2	; 0x02
     a00:	33 81       	ldd	r19, Z+3	; 0x03
     a02:	2e 0f       	add	r18, r30
     a04:	3f 1f       	adc	r19, r31
     a06:	e2 17       	cp	r30, r18
     a08:	f3 07       	cpc	r31, r19
     a0a:	f8 f4       	brcc	.+62     	; 0xa4a <udc_update_iface_desc+0x70>
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	94 30       	cpi	r25, 0x04	; 4
     a10:	61 f4       	brne	.+24     	; 0xa2a <udc_update_iface_desc+0x50>
     a12:	92 81       	ldd	r25, Z+2	; 0x02
     a14:	98 13       	cpse	r25, r24
     a16:	09 c0       	rjmp	.+18     	; 0xa2a <udc_update_iface_desc+0x50>
     a18:	93 81       	ldd	r25, Z+3	; 0x03
     a1a:	96 13       	cpse	r25, r22
     a1c:	06 c0       	rjmp	.+12     	; 0xa2a <udc_update_iface_desc+0x50>
     a1e:	e0 93 5e 2c 	sts	0x2C5E, r30
     a22:	f0 93 5f 2c 	sts	0x2C5F, r31
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	08 95       	ret
     a2a:	90 81       	ld	r25, Z
     a2c:	e9 0f       	add	r30, r25
     a2e:	f1 1d       	adc	r31, r1
     a30:	e2 17       	cp	r30, r18
     a32:	f3 07       	cpc	r31, r19
     a34:	58 f3       	brcs	.-42     	; 0xa0c <udc_update_iface_desc+0x32>
     a36:	e0 93 5e 2c 	sts	0x2C5E, r30
     a3a:	f0 93 5f 2c 	sts	0x2C5F, r31
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	08 95       	ret
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	08 95       	ret
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 95       	ret
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	08 95       	ret

00000a4e <udc_iface_disable>:
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	c8 2f       	mov	r28, r24
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	be df       	rcall	.-132    	; 0x9da <udc_update_iface_desc>
     a5e:	f8 2e       	mov	r15, r24
     a60:	88 23       	and	r24, r24
     a62:	81 f1       	breq	.+96     	; 0xac4 <udc_iface_disable+0x76>
     a64:	a0 91 60 2c 	lds	r26, 0x2C60
     a68:	b0 91 61 2c 	lds	r27, 0x2C61
     a6c:	ec 2f       	mov	r30, r28
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	ee 0f       	add	r30, r30
     a72:	ff 1f       	adc	r31, r31
     a74:	12 96       	adiw	r26, 0x02	; 2
     a76:	2d 91       	ld	r18, X+
     a78:	3c 91       	ld	r19, X
     a7a:	13 97       	sbiw	r26, 0x03	; 3
     a7c:	e2 0f       	add	r30, r18
     a7e:	f3 1f       	adc	r31, r19
     a80:	00 81       	ld	r16, Z
     a82:	11 81       	ldd	r17, Z+1	; 0x01
     a84:	d8 01       	movw	r26, r16
     a86:	16 96       	adiw	r26, 0x06	; 6
     a88:	ed 91       	ld	r30, X+
     a8a:	fc 91       	ld	r31, X
     a8c:	17 97       	sbiw	r26, 0x07	; 7
     a8e:	09 95       	icall
     a90:	68 2f       	mov	r22, r24
     a92:	8c 2f       	mov	r24, r28
     a94:	a2 df       	rcall	.-188    	; 0x9da <udc_update_iface_desc>
     a96:	f8 2e       	mov	r15, r24
     a98:	88 23       	and	r24, r24
     a9a:	a1 f0       	breq	.+40     	; 0xac4 <udc_iface_disable+0x76>
     a9c:	c0 91 5e 2c 	lds	r28, 0x2C5E
     aa0:	d0 91 5f 2c 	lds	r29, 0x2C5F
     aa4:	65 e0       	ldi	r22, 0x05	; 5
     aa6:	ce 01       	movw	r24, r28
     aa8:	5d df       	rcall	.-326    	; 0x964 <udc_next_desc_in_iface>
     aaa:	ec 01       	movw	r28, r24
     aac:	00 97       	sbiw	r24, 0x00	; 0
     aae:	21 f0       	breq	.+8      	; 0xab8 <udc_iface_disable+0x6a>
     ab0:	8a 81       	ldd	r24, Y+2	; 0x02
     ab2:	0e 94 92 10 	call	0x2124	; 0x2124 <udd_ep_free>
     ab6:	f6 cf       	rjmp	.-20     	; 0xaa4 <udc_iface_disable+0x56>
     ab8:	d8 01       	movw	r26, r16
     aba:	12 96       	adiw	r26, 0x02	; 2
     abc:	ed 91       	ld	r30, X+
     abe:	fc 91       	ld	r31, X
     ac0:	13 97       	sbiw	r26, 0x03	; 3
     ac2:	09 95       	icall
     ac4:	8f 2d       	mov	r24, r15
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	ff 90       	pop	r15
     ad0:	08 95       	ret

00000ad2 <udc_iface_enable>:
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	18 2f       	mov	r17, r24
     ada:	7f df       	rcall	.-258    	; 0x9da <udc_update_iface_desc>
     adc:	88 23       	and	r24, r24
     ade:	41 f1       	breq	.+80     	; 0xb30 <udc_iface_enable+0x5e>
     ae0:	c0 91 5e 2c 	lds	r28, 0x2C5E
     ae4:	d0 91 5f 2c 	lds	r29, 0x2C5F
     ae8:	65 e0       	ldi	r22, 0x05	; 5
     aea:	ce 01       	movw	r24, r28
     aec:	3b df       	rcall	.-394    	; 0x964 <udc_next_desc_in_iface>
     aee:	ec 01       	movw	r28, r24
     af0:	00 97       	sbiw	r24, 0x00	; 0
     af2:	49 f0       	breq	.+18     	; 0xb06 <udc_iface_enable+0x34>
     af4:	4c 81       	ldd	r20, Y+4	; 0x04
     af6:	5d 81       	ldd	r21, Y+5	; 0x05
     af8:	6b 81       	ldd	r22, Y+3	; 0x03
     afa:	8a 81       	ldd	r24, Y+2	; 0x02
     afc:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <udd_ep_alloc>
     b00:	81 11       	cpse	r24, r1
     b02:	f2 cf       	rjmp	.-28     	; 0xae8 <udc_iface_enable+0x16>
     b04:	15 c0       	rjmp	.+42     	; 0xb30 <udc_iface_enable+0x5e>
     b06:	a0 91 60 2c 	lds	r26, 0x2C60
     b0a:	b0 91 61 2c 	lds	r27, 0x2C61
     b0e:	81 2f       	mov	r24, r17
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	12 96       	adiw	r26, 0x02	; 2
     b18:	ed 91       	ld	r30, X+
     b1a:	fc 91       	ld	r31, X
     b1c:	13 97       	sbiw	r26, 0x03	; 3
     b1e:	e8 0f       	add	r30, r24
     b20:	f9 1f       	adc	r31, r25
     b22:	01 90       	ld	r0, Z+
     b24:	f0 81       	ld	r31, Z
     b26:	e0 2d       	mov	r30, r0
     b28:	01 90       	ld	r0, Z+
     b2a:	f0 81       	ld	r31, Z
     b2c:	e0 2d       	mov	r30, r0
     b2e:	09 95       	icall
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	08 95       	ret

00000b38 <udc_start>:
     b38:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <udd_enable>
     b3c:	08 95       	ret

00000b3e <udc_reset>:
     b3e:	cf 93       	push	r28
     b40:	80 91 62 2c 	lds	r24, 0x2C62
     b44:	88 23       	and	r24, r24
     b46:	c1 f0       	breq	.+48     	; 0xb78 <udc_reset+0x3a>
     b48:	e0 91 60 2c 	lds	r30, 0x2C60
     b4c:	f0 91 61 2c 	lds	r31, 0x2C61
     b50:	01 90       	ld	r0, Z+
     b52:	f0 81       	ld	r31, Z
     b54:	e0 2d       	mov	r30, r0
     b56:	84 81       	ldd	r24, Z+4	; 0x04
     b58:	88 23       	and	r24, r24
     b5a:	71 f0       	breq	.+28     	; 0xb78 <udc_reset+0x3a>
     b5c:	c0 e0       	ldi	r28, 0x00	; 0
     b5e:	8c 2f       	mov	r24, r28
     b60:	76 df       	rcall	.-276    	; 0xa4e <udc_iface_disable>
     b62:	cf 5f       	subi	r28, 0xFF	; 255
     b64:	e0 91 60 2c 	lds	r30, 0x2C60
     b68:	f0 91 61 2c 	lds	r31, 0x2C61
     b6c:	01 90       	ld	r0, Z+
     b6e:	f0 81       	ld	r31, Z
     b70:	e0 2d       	mov	r30, r0
     b72:	84 81       	ldd	r24, Z+4	; 0x04
     b74:	c8 17       	cp	r28, r24
     b76:	98 f3       	brcs	.-26     	; 0xb5e <udc_reset+0x20>
     b78:	10 92 62 2c 	sts	0x2C62, r1
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	80 93 66 2c 	sts	0x2C66, r24
     b84:	90 93 67 2c 	sts	0x2C67, r25
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     b8c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     b8e:	80 91 62 2c 	lds	r24, 0x2C62
     b92:	88 23       	and	r24, r24
     b94:	41 f1       	breq	.+80     	; 0xbe6 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b96:	e0 91 60 2c 	lds	r30, 0x2C60
     b9a:	f0 91 61 2c 	lds	r31, 0x2C61
     b9e:	a0 81       	ld	r26, Z
     ba0:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     ba2:	14 96       	adiw	r26, 0x04	; 4
     ba4:	8c 91       	ld	r24, X
     ba6:	88 23       	and	r24, r24
     ba8:	f1 f0       	breq	.+60     	; 0xbe6 <udc_sof_notify+0x5a>
     baa:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     bac:	8c 2f       	mov	r24, r28
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	02 80       	ldd	r0, Z+2	; 0x02
     bb6:	f3 81       	ldd	r31, Z+3	; 0x03
     bb8:	e0 2d       	mov	r30, r0
     bba:	e8 0f       	add	r30, r24
     bbc:	f9 1f       	adc	r31, r25
     bbe:	01 90       	ld	r0, Z+
     bc0:	f0 81       	ld	r31, Z
     bc2:	e0 2d       	mov	r30, r0
     bc4:	00 84       	ldd	r0, Z+8	; 0x08
     bc6:	f1 85       	ldd	r31, Z+9	; 0x09
     bc8:	e0 2d       	mov	r30, r0
     bca:	30 97       	sbiw	r30, 0x00	; 0
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     bce:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     bd0:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bd2:	e0 91 60 2c 	lds	r30, 0x2C60
     bd6:	f0 91 61 2c 	lds	r31, 0x2C61
     bda:	a0 81       	ld	r26, Z
     bdc:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	8c 91       	ld	r24, X
     be2:	c8 17       	cp	r28, r24
     be4:	18 f3       	brcs	.-58     	; 0xbac <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     be6:	cf 91       	pop	r28
     be8:	08 95       	ret

00000bea <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     bf6:	10 92 54 2e 	sts	0x2E54, r1
     bfa:	10 92 55 2e 	sts	0x2E55, r1
	udd_g_ctrlreq.callback = NULL;
     bfe:	10 92 56 2e 	sts	0x2E56, r1
     c02:	10 92 57 2e 	sts	0x2E57, r1
	udd_g_ctrlreq.over_under_run = NULL;
     c06:	10 92 58 2e 	sts	0x2E58, r1
     c0a:	10 92 59 2e 	sts	0x2E59, r1

	if (Udd_setup_is_in()) {
     c0e:	20 91 4a 2e 	lds	r18, 0x2E4A
     c12:	22 23       	and	r18, r18
     c14:	0c f0       	brlt	.+2      	; 0xc18 <udc_process_setup+0x2e>
     c16:	97 c2       	rjmp	.+1326   	; 0x1146 <udc_process_setup+0x55c>
		if (udd_g_ctrlreq.req.wLength == 0) {
     c18:	80 91 50 2e 	lds	r24, 0x2E50
     c1c:	90 91 51 2e 	lds	r25, 0x2E51
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	09 f0       	breq	.+2      	; 0xc26 <udc_process_setup+0x3c>
     c24:	95 c2       	rjmp	.+1322   	; 0x1150 <udc_process_setup+0x566>
     c26:	8b c2       	rjmp	.+1302   	; 0x113e <udc_process_setup+0x554>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     c28:	2f 71       	andi	r18, 0x1F	; 31
     c2a:	09 f0       	breq	.+2      	; 0xc2e <udc_process_setup+0x44>
     c2c:	b9 c0       	rjmp	.+370    	; 0xda0 <udc_process_setup+0x1b6>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     c2e:	30 91 4b 2e 	lds	r19, 0x2E4B
     c32:	36 30       	cpi	r19, 0x06	; 6
     c34:	89 f0       	breq	.+34     	; 0xc58 <udc_process_setup+0x6e>
     c36:	38 30       	cpi	r19, 0x08	; 8
     c38:	09 f4       	brne	.+2      	; 0xc3c <udc_process_setup+0x52>
     c3a:	a6 c0       	rjmp	.+332    	; 0xd88 <udc_process_setup+0x19e>
     c3c:	31 11       	cpse	r19, r1
     c3e:	b0 c0       	rjmp	.+352    	; 0xda0 <udc_process_setup+0x1b6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     c40:	02 97       	sbiw	r24, 0x02	; 2
     c42:	41 f4       	brne	.+16     	; 0xc54 <udc_process_setup+0x6a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     c44:	62 e0       	ldi	r22, 0x02	; 2
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	86 e6       	ldi	r24, 0x66	; 102
     c4a:	9c e2       	ldi	r25, 0x2C	; 44
     c4c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     c50:	01 e0       	ldi	r16, 0x01	; 1
     c52:	f8 c1       	rjmp	.+1008   	; 0x1044 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     c54:	00 e0       	ldi	r16, 0x00	; 0
     c56:	f6 c1       	rjmp	.+1004   	; 0x1044 <udc_process_setup+0x45a>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     c58:	20 91 4c 2e 	lds	r18, 0x2E4C
     c5c:	30 91 4d 2e 	lds	r19, 0x2E4D

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     c60:	83 2f       	mov	r24, r19
     c62:	99 27       	eor	r25, r25
     c64:	82 30       	cpi	r24, 0x02	; 2
     c66:	91 05       	cpc	r25, r1
     c68:	a1 f0       	breq	.+40     	; 0xc92 <udc_process_setup+0xa8>
     c6a:	1c f4       	brge	.+6      	; 0xc72 <udc_process_setup+0x88>
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	39 f0       	breq	.+14     	; 0xc7e <udc_process_setup+0x94>
     c70:	81 c0       	rjmp	.+258    	; 0xd74 <udc_process_setup+0x18a>
     c72:	83 30       	cpi	r24, 0x03	; 3
     c74:	91 05       	cpc	r25, r1
     c76:	f1 f1       	breq	.+124    	; 0xcf4 <udc_process_setup+0x10a>
     c78:	0f 97       	sbiw	r24, 0x0f	; 15
     c7a:	69 f1       	breq	.+90     	; 0xcd6 <udc_process_setup+0xec>
     c7c:	7b c0       	rjmp	.+246    	; 0xd74 <udc_process_setup+0x18a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     c7e:	80 91 4e 20 	lds	r24, 0x204E
     c82:	90 91 4f 20 	lds	r25, 0x204F
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     c86:	dc 01       	movw	r26, r24
     c88:	6c 91       	ld	r22, X
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <udd_set_setup_payload>
     c90:	60 c0       	rjmp	.+192    	; 0xd52 <udc_process_setup+0x168>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     c92:	e0 91 4e 20 	lds	r30, 0x204E
     c96:	f0 91 4f 20 	lds	r31, 0x204F
     c9a:	81 89       	ldd	r24, Z+17	; 0x11
     c9c:	28 17       	cp	r18, r24
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <udc_process_setup+0xb8>
     ca0:	6b c0       	rjmp	.+214    	; 0xd78 <udc_process_setup+0x18e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     ca2:	c9 01       	movw	r24, r18
     ca4:	99 27       	eor	r25, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	e0 91 50 20 	lds	r30, 0x2050
     cb2:	f0 91 51 20 	lds	r31, 0x2051
     cb6:	e8 0f       	add	r30, r24
     cb8:	f9 1f       	adc	r31, r25
     cba:	80 81       	ld	r24, Z
     cbc:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     cbe:	fc 01       	movw	r30, r24
     cc0:	62 81       	ldd	r22, Z+2	; 0x02
     cc2:	73 81       	ldd	r23, Z+3	; 0x03
     cc4:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     cc8:	e0 91 52 2e 	lds	r30, 0x2E52
     ccc:	f0 91 53 2e 	lds	r31, 0x2E53
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	81 83       	std	Z+1, r24	; 0x01
     cd4:	3e c0       	rjmp	.+124    	; 0xd52 <udc_process_setup+0x168>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     cd6:	80 91 52 20 	lds	r24, 0x2052
     cda:	90 91 53 20 	lds	r25, 0x2053
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	09 f4       	brne	.+2      	; 0xce4 <udc_process_setup+0xfa>
     ce2:	4c c0       	rjmp	.+152    	; 0xd7c <udc_process_setup+0x192>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     ce4:	dc 01       	movw	r26, r24
     ce6:	12 96       	adiw	r26, 0x02	; 2
     ce8:	6d 91       	ld	r22, X+
     cea:	7c 91       	ld	r23, X
     cec:	13 97       	sbiw	r26, 0x03	; 3
     cee:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <udd_set_setup_payload>
     cf2:	2f c0       	rjmp	.+94     	; 0xd52 <udc_process_setup+0x168>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     cf4:	33 27       	eor	r19, r19
     cf6:	21 30       	cpi	r18, 0x01	; 1
     cf8:	31 05       	cpc	r19, r1
     cfa:	89 f0       	breq	.+34     	; 0xd1e <udc_process_setup+0x134>
     cfc:	48 f0       	brcs	.+18     	; 0xd10 <udc_process_setup+0x126>
     cfe:	22 30       	cpi	r18, 0x02	; 2
     d00:	31 05       	cpc	r19, r1
     d02:	09 f4       	brne	.+2      	; 0xd06 <udc_process_setup+0x11c>
     d04:	2a c2       	rjmp	.+1108   	; 0x115a <udc_process_setup+0x570>
     d06:	23 30       	cpi	r18, 0x03	; 3
     d08:	31 05       	cpc	r19, r1
     d0a:	09 f4       	brne	.+2      	; 0xd0e <udc_process_setup+0x124>
     d0c:	2a c2       	rjmp	.+1108   	; 0x1162 <udc_process_setup+0x578>
     d0e:	38 c0       	rjmp	.+112    	; 0xd80 <udc_process_setup+0x196>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     d10:	64 e0       	ldi	r22, 0x04	; 4
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	8a e4       	ldi	r24, 0x4A	; 74
     d16:	90 e2       	ldi	r25, 0x20	; 32
     d18:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <udd_set_setup_payload>
     d1c:	1a c0       	rjmp	.+52     	; 0xd52 <udc_process_setup+0x168>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     d1e:	84 e4       	ldi	r24, 0x44	; 68
     d20:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     d22:	24 e0       	ldi	r18, 0x04	; 4
     d24:	38 2f       	mov	r19, r24
     d26:	a6 e1       	ldi	r26, 0x16	; 22
     d28:	b0 e2       	ldi	r27, 0x20	; 32
     d2a:	e8 2f       	mov	r30, r24
     d2c:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     d2e:	81 91       	ld	r24, Z+
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	8d 93       	st	X+, r24
     d34:	9d 93       	st	X+, r25
     d36:	8e 2f       	mov	r24, r30
     d38:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     d3a:	82 17       	cp	r24, r18
     d3c:	c0 f3       	brcs	.-16     	; 0xd2e <udc_process_setup+0x144>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     d3e:	22 0f       	add	r18, r18
     d40:	62 e0       	ldi	r22, 0x02	; 2
     d42:	62 0f       	add	r22, r18
     d44:	60 93 14 20 	sts	0x2014, r22
		udd_set_setup_payload(
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	84 e1       	ldi	r24, 0x14	; 20
     d4c:	90 e2       	ldi	r25, 0x20	; 32
     d4e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     d52:	80 91 50 2e 	lds	r24, 0x2E50
     d56:	90 91 51 2e 	lds	r25, 0x2E51
     d5a:	20 91 54 2e 	lds	r18, 0x2E54
     d5e:	30 91 55 2e 	lds	r19, 0x2E55
     d62:	82 17       	cp	r24, r18
     d64:	93 07       	cpc	r25, r19
     d66:	70 f4       	brcc	.+28     	; 0xd84 <udc_process_setup+0x19a>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     d68:	80 93 54 2e 	sts	0x2E54, r24
     d6c:	90 93 55 2e 	sts	0x2E55, r25
	}
	return true;
     d70:	01 e0       	ldi	r16, 0x01	; 1
     d72:	68 c1       	rjmp	.+720    	; 0x1044 <udc_process_setup+0x45a>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     d74:	00 e0       	ldi	r16, 0x00	; 0
     d76:	66 c1       	rjmp	.+716    	; 0x1044 <udc_process_setup+0x45a>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     d78:	00 e0       	ldi	r16, 0x00	; 0
     d7a:	64 c1       	rjmp	.+712    	; 0x1044 <udc_process_setup+0x45a>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     d7c:	00 e0       	ldi	r16, 0x00	; 0
     d7e:	62 c1       	rjmp	.+708    	; 0x1044 <udc_process_setup+0x45a>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     d80:	00 e0       	ldi	r16, 0x00	; 0
     d82:	60 c1       	rjmp	.+704    	; 0x1044 <udc_process_setup+0x45a>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     d84:	01 e0       	ldi	r16, 0x01	; 1
     d86:	5e c1       	rjmp	.+700    	; 0x1044 <udc_process_setup+0x45a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	41 f4       	brne	.+16     	; 0xd9c <udc_process_setup+0x1b2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	82 e6       	ldi	r24, 0x62	; 98
     d92:	9c e2       	ldi	r25, 0x2C	; 44
     d94:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <udd_set_setup_payload>
	return true;
     d98:	01 e0       	ldi	r16, 0x01	; 1
     d9a:	54 c1       	rjmp	.+680    	; 0x1044 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     d9c:	00 e0       	ldi	r16, 0x00	; 0
     d9e:	52 c1       	rjmp	.+676    	; 0x1044 <udc_process_setup+0x45a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     da0:	21 30       	cpi	r18, 0x01	; 1
     da2:	09 f0       	breq	.+2      	; 0xda6 <udc_process_setup+0x1bc>
     da4:	40 c0       	rjmp	.+128    	; 0xe26 <udc_process_setup+0x23c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     da6:	30 91 4b 2e 	lds	r19, 0x2E4B
     daa:	3a 30       	cpi	r19, 0x0A	; 10
     dac:	e1 f5       	brne	.+120    	; 0xe26 <udc_process_setup+0x23c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	a1 f5       	brne	.+104    	; 0xe1a <udc_process_setup+0x230>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     db2:	80 91 62 2c 	lds	r24, 0x2C62
     db6:	88 23       	and	r24, r24
     db8:	91 f1       	breq	.+100    	; 0xe1e <udc_process_setup+0x234>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     dba:	c0 91 4e 2e 	lds	r28, 0x2E4E
     dbe:	d0 91 4f 2e 	lds	r29, 0x2E4F
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     dc2:	e0 90 60 2c 	lds	r14, 0x2C60
     dc6:	f0 90 61 2c 	lds	r15, 0x2C61
     dca:	d7 01       	movw	r26, r14
     dcc:	ed 91       	ld	r30, X+
     dce:	fc 91       	ld	r31, X
     dd0:	84 81       	ldd	r24, Z+4	; 0x04
     dd2:	c8 17       	cp	r28, r24
     dd4:	30 f5       	brcc	.+76     	; 0xe22 <udc_process_setup+0x238>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	8c 2f       	mov	r24, r28
     dda:	ff dd       	rcall	.-1026   	; 0x9da <udc_update_iface_desc>
     ddc:	08 2f       	mov	r16, r24
     dde:	88 23       	and	r24, r24
     de0:	09 f4       	brne	.+2      	; 0xde4 <udc_process_setup+0x1fa>
     de2:	30 c1       	rjmp	.+608    	; 0x1044 <udc_process_setup+0x45a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     de4:	ce 01       	movw	r24, r28
     de6:	99 27       	eor	r25, r25
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	d7 01       	movw	r26, r14
     dee:	12 96       	adiw	r26, 0x02	; 2
     df0:	ed 91       	ld	r30, X+
     df2:	fc 91       	ld	r31, X
     df4:	13 97       	sbiw	r26, 0x03	; 3
     df6:	e8 0f       	add	r30, r24
     df8:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     dfa:	01 90       	ld	r0, Z+
     dfc:	f0 81       	ld	r31, Z
     dfe:	e0 2d       	mov	r30, r0
     e00:	06 80       	ldd	r0, Z+6	; 0x06
     e02:	f7 81       	ldd	r31, Z+7	; 0x07
     e04:	e0 2d       	mov	r30, r0
     e06:	09 95       	icall
     e08:	80 93 64 2c 	sts	0x2C64, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	84 e6       	ldi	r24, 0x64	; 100
     e12:	9c e2       	ldi	r25, 0x2C	; 44
     e14:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <udd_set_setup_payload>
     e18:	15 c1       	rjmp	.+554    	; 0x1044 <udc_process_setup+0x45a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     e1a:	00 e0       	ldi	r16, 0x00	; 0
     e1c:	13 c1       	rjmp	.+550    	; 0x1044 <udc_process_setup+0x45a>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     e1e:	00 e0       	ldi	r16, 0x00	; 0
     e20:	11 c1       	rjmp	.+546    	; 0x1044 <udc_process_setup+0x45a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     e22:	00 e0       	ldi	r16, 0x00	; 0
     e24:	0f c1       	rjmp	.+542    	; 0x1044 <udc_process_setup+0x45a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     e26:	22 30       	cpi	r18, 0x02	; 2
     e28:	09 f0       	breq	.+2      	; 0xe2c <udc_process_setup+0x242>
     e2a:	0e c1       	rjmp	.+540    	; 0x1048 <udc_process_setup+0x45e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     e2c:	20 91 4b 2e 	lds	r18, 0x2E4B
     e30:	21 11       	cpse	r18, r1
     e32:	03 c1       	rjmp	.+518    	; 0x103a <udc_process_setup+0x450>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     e34:	02 97       	sbiw	r24, 0x02	; 2
     e36:	81 f4       	brne	.+32     	; 0xe58 <udc_process_setup+0x26e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     e38:	80 91 4e 2e 	lds	r24, 0x2E4E
     e3c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <udd_ep_is_halted>
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	80 93 5c 2c 	sts	0x2C5C, r24
     e46:	90 93 5d 2c 	sts	0x2C5D, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     e4a:	62 e0       	ldi	r22, 0x02	; 2
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	8c e5       	ldi	r24, 0x5C	; 92
     e50:	9c e2       	ldi	r25, 0x2C	; 44
     e52:	f8 d7       	rcall	.+4080   	; 0x1e44 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     e54:	01 e0       	ldi	r16, 0x01	; 1
     e56:	f6 c0       	rjmp	.+492    	; 0x1044 <udc_process_setup+0x45a>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     e58:	00 e0       	ldi	r16, 0x00	; 0
     e5a:	f4 c0       	rjmp	.+488    	; 0x1044 <udc_process_setup+0x45a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     e5c:	2f 71       	andi	r18, 0x1F	; 31
     e5e:	09 f0       	breq	.+2      	; 0xe62 <udc_process_setup+0x278>
     e60:	90 c0       	rjmp	.+288    	; 0xf82 <udc_process_setup+0x398>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     e62:	80 91 4b 2e 	lds	r24, 0x2E4B
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	09 f4       	brne	.+2      	; 0xe6c <udc_process_setup+0x282>
     e6a:	e9 c0       	rjmp	.+466    	; 0x103e <udc_process_setup+0x454>
     e6c:	18 f4       	brcc	.+6      	; 0xe74 <udc_process_setup+0x28a>
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	b1 f0       	breq	.+44     	; 0xe9e <udc_process_setup+0x2b4>
     e72:	87 c0       	rjmp	.+270    	; 0xf82 <udc_process_setup+0x398>
     e74:	85 30       	cpi	r24, 0x05	; 5
     e76:	19 f0       	breq	.+6      	; 0xe7e <udc_process_setup+0x294>
     e78:	89 30       	cpi	r24, 0x09	; 9
     e7a:	61 f1       	breq	.+88     	; 0xed4 <udc_process_setup+0x2ea>
     e7c:	82 c0       	rjmp	.+260    	; 0xf82 <udc_process_setup+0x398>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e7e:	80 91 50 2e 	lds	r24, 0x2E50
     e82:	90 91 51 2e 	lds	r25, 0x2E51
     e86:	89 2b       	or	r24, r25
     e88:	41 f4       	brne	.+16     	; 0xe9a <udc_process_setup+0x2b0>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     e8a:	87 ee       	ldi	r24, 0xE7	; 231
     e8c:	94 e0       	ldi	r25, 0x04	; 4
     e8e:	80 93 56 2e 	sts	0x2E56, r24
     e92:	90 93 57 2e 	sts	0x2E57, r25
	return true;
     e96:	01 e0       	ldi	r16, 0x01	; 1
     e98:	d5 c0       	rjmp	.+426    	; 0x1044 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e9a:	00 e0       	ldi	r16, 0x00	; 0
     e9c:	d3 c0       	rjmp	.+422    	; 0x1044 <udc_process_setup+0x45a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e9e:	80 91 50 2e 	lds	r24, 0x2E50
     ea2:	90 91 51 2e 	lds	r25, 0x2E51
     ea6:	89 2b       	or	r24, r25
     ea8:	89 f4       	brne	.+34     	; 0xecc <udc_process_setup+0x2e2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     eaa:	80 91 4c 2e 	lds	r24, 0x2E4C
     eae:	90 91 4d 2e 	lds	r25, 0x2E4D
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	69 f4       	brne	.+26     	; 0xed0 <udc_process_setup+0x2e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     eb6:	80 91 66 2c 	lds	r24, 0x2C66
     eba:	90 91 67 2c 	lds	r25, 0x2C67
     ebe:	8d 7f       	andi	r24, 0xFD	; 253
     ec0:	80 93 66 2c 	sts	0x2C66, r24
     ec4:	90 93 67 2c 	sts	0x2C67, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     ec8:	01 e0       	ldi	r16, 0x01	; 1
     eca:	bc c0       	rjmp	.+376    	; 0x1044 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ecc:	00 e0       	ldi	r16, 0x00	; 0
     ece:	ba c0       	rjmp	.+372    	; 0x1044 <udc_process_setup+0x45a>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     ed0:	00 e0       	ldi	r16, 0x00	; 0
     ed2:	b8 c0       	rjmp	.+368    	; 0x1044 <udc_process_setup+0x45a>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     ed4:	80 91 50 2e 	lds	r24, 0x2E50
     ed8:	90 91 51 2e 	lds	r25, 0x2E51
     edc:	89 2b       	or	r24, r25
     ede:	09 f0       	breq	.+2      	; 0xee2 <udc_process_setup+0x2f8>
     ee0:	46 c0       	rjmp	.+140    	; 0xf6e <udc_process_setup+0x384>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     ee2:	a5 d7       	rcall	.+3914   	; 0x1e2e <udd_getaddress>
     ee4:	88 23       	and	r24, r24
     ee6:	09 f4       	brne	.+2      	; 0xeea <udc_process_setup+0x300>
     ee8:	44 c0       	rjmp	.+136    	; 0xf72 <udc_process_setup+0x388>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     eea:	20 91 4c 2e 	lds	r18, 0x2E4C
     eee:	30 91 4d 2e 	lds	r19, 0x2E4D
     ef2:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     ef4:	e0 91 4e 20 	lds	r30, 0x204E
     ef8:	f0 91 4f 20 	lds	r31, 0x204F
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     efc:	81 89       	ldd	r24, Z+17	; 0x11
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	82 17       	cp	r24, r18
     f02:	93 07       	cpc	r25, r19
     f04:	c0 f1       	brcs	.+112    	; 0xf76 <udc_process_setup+0x38c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     f06:	1b de       	rcall	.-970    	; 0xb3e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     f08:	80 91 4c 2e 	lds	r24, 0x2E4C
     f0c:	90 91 4d 2e 	lds	r25, 0x2E4D
     f10:	80 93 62 2c 	sts	0x2C62, r24
	if (udc_num_configuration == 0) {
     f14:	88 23       	and	r24, r24
     f16:	89 f1       	breq	.+98     	; 0xf7a <udc_process_setup+0x390>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     f18:	99 27       	eor	r25, r25
     f1a:	81 50       	subi	r24, 0x01	; 1
     f1c:	90 4c       	sbci	r25, 0xC0	; 192
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	e0 91 50 20 	lds	r30, 0x2050
     f2a:	f0 91 51 20 	lds	r31, 0x2051
     f2e:	e8 0f       	add	r30, r24
     f30:	f9 1f       	adc	r31, r25
     f32:	e0 93 60 2c 	sts	0x2C60, r30
     f36:	f0 93 61 2c 	sts	0x2C61, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f3a:	01 90       	ld	r0, Z+
     f3c:	f0 81       	ld	r31, Z
     f3e:	e0 2d       	mov	r30, r0
     f40:	84 81       	ldd	r24, Z+4	; 0x04
     f42:	88 23       	and	r24, r24
     f44:	e1 f0       	breq	.+56     	; 0xf7e <udc_process_setup+0x394>
     f46:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	8c 2f       	mov	r24, r28
     f4c:	c2 dd       	rcall	.-1148   	; 0xad2 <udc_iface_enable>
     f4e:	08 2f       	mov	r16, r24
     f50:	88 23       	and	r24, r24
     f52:	09 f4       	brne	.+2      	; 0xf56 <udc_process_setup+0x36c>
     f54:	77 c0       	rjmp	.+238    	; 0x1044 <udc_process_setup+0x45a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     f56:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f58:	e0 91 60 2c 	lds	r30, 0x2C60
     f5c:	f0 91 61 2c 	lds	r31, 0x2C61
     f60:	01 90       	ld	r0, Z+
     f62:	f0 81       	ld	r31, Z
     f64:	e0 2d       	mov	r30, r0
     f66:	84 81       	ldd	r24, Z+4	; 0x04
     f68:	c8 17       	cp	r28, r24
     f6a:	70 f3       	brcs	.-36     	; 0xf48 <udc_process_setup+0x35e>
     f6c:	6b c0       	rjmp	.+214    	; 0x1044 <udc_process_setup+0x45a>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     f6e:	00 e0       	ldi	r16, 0x00	; 0
     f70:	69 c0       	rjmp	.+210    	; 0x1044 <udc_process_setup+0x45a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     f72:	00 e0       	ldi	r16, 0x00	; 0
     f74:	67 c0       	rjmp	.+206    	; 0x1044 <udc_process_setup+0x45a>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     f76:	00 e0       	ldi	r16, 0x00	; 0
     f78:	65 c0       	rjmp	.+202    	; 0x1044 <udc_process_setup+0x45a>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     f7a:	01 e0       	ldi	r16, 0x01	; 1
     f7c:	63 c0       	rjmp	.+198    	; 0x1044 <udc_process_setup+0x45a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     f7e:	01 e0       	ldi	r16, 0x01	; 1
     f80:	61 c0       	rjmp	.+194    	; 0x1044 <udc_process_setup+0x45a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     f82:	21 30       	cpi	r18, 0x01	; 1
     f84:	09 f5       	brne	.+66     	; 0xfc8 <udc_process_setup+0x3de>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     f86:	80 91 4b 2e 	lds	r24, 0x2E4B
     f8a:	8b 30       	cpi	r24, 0x0B	; 11
     f8c:	e9 f4       	brne	.+58     	; 0xfc8 <udc_process_setup+0x3de>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     f8e:	80 91 50 2e 	lds	r24, 0x2E50
     f92:	90 91 51 2e 	lds	r25, 0x2E51
     f96:	89 2b       	or	r24, r25
     f98:	99 f4       	brne	.+38     	; 0xfc0 <udc_process_setup+0x3d6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     f9a:	80 91 62 2c 	lds	r24, 0x2C62
     f9e:	88 23       	and	r24, r24
     fa0:	89 f0       	breq	.+34     	; 0xfc4 <udc_process_setup+0x3da>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     fa2:	c0 91 4e 2e 	lds	r28, 0x2E4E
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     fa6:	d0 91 4c 2e 	lds	r29, 0x2E4C

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     faa:	8c 2f       	mov	r24, r28
     fac:	50 dd       	rcall	.-1376   	; 0xa4e <udc_iface_disable>
     fae:	08 2f       	mov	r16, r24
     fb0:	88 23       	and	r24, r24
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <udc_process_setup+0x3cc>
     fb4:	47 c0       	rjmp	.+142    	; 0x1044 <udc_process_setup+0x45a>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     fb6:	6d 2f       	mov	r22, r29
     fb8:	8c 2f       	mov	r24, r28
     fba:	8b dd       	rcall	.-1258   	; 0xad2 <udc_iface_enable>
     fbc:	08 2f       	mov	r16, r24
     fbe:	42 c0       	rjmp	.+132    	; 0x1044 <udc_process_setup+0x45a>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     fc0:	00 e0       	ldi	r16, 0x00	; 0
     fc2:	40 c0       	rjmp	.+128    	; 0x1044 <udc_process_setup+0x45a>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     fc4:	00 e0       	ldi	r16, 0x00	; 0
     fc6:	3e c0       	rjmp	.+124    	; 0x1044 <udc_process_setup+0x45a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	09 f0       	breq	.+2      	; 0xfce <udc_process_setup+0x3e4>
     fcc:	3d c0       	rjmp	.+122    	; 0x1048 <udc_process_setup+0x45e>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     fce:	80 91 4b 2e 	lds	r24, 0x2E4B
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	19 f0       	breq	.+6      	; 0xfdc <udc_process_setup+0x3f2>
     fd6:	83 30       	cpi	r24, 0x03	; 3
     fd8:	b1 f0       	breq	.+44     	; 0x1006 <udc_process_setup+0x41c>
     fda:	33 c0       	rjmp	.+102    	; 0x1042 <udc_process_setup+0x458>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     fdc:	80 91 50 2e 	lds	r24, 0x2E50
     fe0:	90 91 51 2e 	lds	r25, 0x2E51
     fe4:	89 2b       	or	r24, r25
     fe6:	59 f4       	brne	.+22     	; 0xffe <udc_process_setup+0x414>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     fe8:	80 91 4c 2e 	lds	r24, 0x2E4C
     fec:	90 91 4d 2e 	lds	r25, 0x2E4D
     ff0:	89 2b       	or	r24, r25
     ff2:	39 f4       	brne	.+14     	; 0x1002 <udc_process_setup+0x418>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     ff4:	80 91 4e 2e 	lds	r24, 0x2E4E
     ff8:	aa d7       	rcall	.+3924   	; 0x1f4e <udd_ep_clear_halt>
     ffa:	08 2f       	mov	r16, r24
     ffc:	23 c0       	rjmp	.+70     	; 0x1044 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ffe:	00 e0       	ldi	r16, 0x00	; 0
    1000:	21 c0       	rjmp	.+66     	; 0x1044 <udc_process_setup+0x45a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    1002:	00 e0       	ldi	r16, 0x00	; 0
    1004:	1f c0       	rjmp	.+62     	; 0x1044 <udc_process_setup+0x45a>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1006:	80 91 50 2e 	lds	r24, 0x2E50
    100a:	90 91 51 2e 	lds	r25, 0x2E51
    100e:	89 2b       	or	r24, r25
    1010:	81 f4       	brne	.+32     	; 0x1032 <udc_process_setup+0x448>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1012:	80 91 4c 2e 	lds	r24, 0x2E4C
    1016:	90 91 4d 2e 	lds	r25, 0x2E4D
    101a:	89 2b       	or	r24, r25
    101c:	61 f4       	brne	.+24     	; 0x1036 <udc_process_setup+0x44c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    101e:	ce e4       	ldi	r28, 0x4E	; 78
    1020:	de e2       	ldi	r29, 0x2E	; 46
    1022:	88 81       	ld	r24, Y
    1024:	0e 94 59 10 	call	0x20b2	; 0x20b2 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1028:	88 81       	ld	r24, Y
    102a:	0e 94 af 10 	call	0x215e	; 0x215e <udd_ep_set_halt>
    102e:	08 2f       	mov	r16, r24
    1030:	09 c0       	rjmp	.+18     	; 0x1044 <udc_process_setup+0x45a>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1032:	00 e0       	ldi	r16, 0x00	; 0
    1034:	07 c0       	rjmp	.+14     	; 0x1044 <udc_process_setup+0x45a>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    1036:	00 e0       	ldi	r16, 0x00	; 0
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <udc_process_setup+0x45a>
				break;
			}
		}
#endif
	}
	return false;
    103a:	00 e0       	ldi	r16, 0x00	; 0
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <udc_process_setup+0x45a>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    103e:	00 e0       	ldi	r16, 0x00	; 0
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <udc_process_setup+0x45a>
				break;
			}
		}
#endif
	}
	return false;
    1042:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1044:	01 11       	cpse	r16, r1
    1046:	91 c0       	rjmp	.+290    	; 0x116a <udc_process_setup+0x580>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1048:	80 91 4a 2e 	lds	r24, 0x2E4A
    104c:	8f 71       	andi	r24, 0x1F	; 31
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	c1 f5       	brne	.+112    	; 0x10c2 <udc_process_setup+0x4d8>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1052:	80 91 62 2c 	lds	r24, 0x2C62
    1056:	88 23       	and	r24, r24
    1058:	a1 f1       	breq	.+104    	; 0x10c2 <udc_process_setup+0x4d8>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    105a:	c0 91 4e 2e 	lds	r28, 0x2E4E
    105e:	d0 91 4f 2e 	lds	r29, 0x2E4F
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1062:	00 91 60 2c 	lds	r16, 0x2C60
    1066:	10 91 61 2c 	lds	r17, 0x2C61
    106a:	d8 01       	movw	r26, r16
    106c:	ed 91       	ld	r30, X+
    106e:	fc 91       	ld	r31, X
    1070:	84 81       	ldd	r24, Z+4	; 0x04
    1072:	c8 17       	cp	r28, r24
    1074:	30 f5       	brcc	.+76     	; 0x10c2 <udc_process_setup+0x4d8>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	8c 2f       	mov	r24, r28
    107a:	af dc       	rcall	.-1698   	; 0x9da <udc_update_iface_desc>
    107c:	88 23       	and	r24, r24
    107e:	09 f1       	breq	.+66     	; 0x10c2 <udc_process_setup+0x4d8>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1080:	ce 01       	movw	r24, r28
    1082:	99 27       	eor	r25, r25
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	d8 01       	movw	r26, r16
    108a:	12 96       	adiw	r26, 0x02	; 2
    108c:	ed 91       	ld	r30, X+
    108e:	fc 91       	ld	r31, X
    1090:	13 97       	sbiw	r26, 0x03	; 3
    1092:	e8 0f       	add	r30, r24
    1094:	f9 1f       	adc	r31, r25
    1096:	00 81       	ld	r16, Z
    1098:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    109a:	d8 01       	movw	r26, r16
    109c:	16 96       	adiw	r26, 0x06	; 6
    109e:	ed 91       	ld	r30, X+
    10a0:	fc 91       	ld	r31, X
    10a2:	17 97       	sbiw	r26, 0x07	; 7
    10a4:	09 95       	icall
    10a6:	68 2f       	mov	r22, r24
    10a8:	8c 2f       	mov	r24, r28
    10aa:	97 dc       	rcall	.-1746   	; 0x9da <udc_update_iface_desc>
    10ac:	88 23       	and	r24, r24
    10ae:	49 f0       	breq	.+18     	; 0x10c2 <udc_process_setup+0x4d8>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    10b0:	d8 01       	movw	r26, r16
    10b2:	14 96       	adiw	r26, 0x04	; 4
    10b4:	ed 91       	ld	r30, X+
    10b6:	fc 91       	ld	r31, X
    10b8:	15 97       	sbiw	r26, 0x05	; 5
    10ba:	09 95       	icall
    10bc:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    10be:	81 11       	cpse	r24, r1
    10c0:	54 c0       	rjmp	.+168    	; 0x116a <udc_process_setup+0x580>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    10c2:	80 91 4a 2e 	lds	r24, 0x2E4A
    10c6:	8f 71       	andi	r24, 0x1F	; 31
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	d9 f5       	brne	.+118    	; 0x1142 <udc_process_setup+0x558>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    10cc:	80 91 62 2c 	lds	r24, 0x2C62
    10d0:	88 23       	and	r24, r24
    10d2:	89 f1       	breq	.+98     	; 0x1136 <udc_process_setup+0x54c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    10d4:	e0 91 60 2c 	lds	r30, 0x2C60
    10d8:	f0 91 61 2c 	lds	r31, 0x2C61
    10dc:	a0 81       	ld	r26, Z
    10de:	b1 81       	ldd	r27, Z+1	; 0x01
    10e0:	14 96       	adiw	r26, 0x04	; 4
    10e2:	8c 91       	ld	r24, X
    10e4:	88 23       	and	r24, r24
    10e6:	49 f1       	breq	.+82     	; 0x113a <udc_process_setup+0x550>
    10e8:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    10ea:	21 2f       	mov	r18, r17
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	22 0f       	add	r18, r18
    10f0:	33 1f       	adc	r19, r19
    10f2:	02 80       	ldd	r0, Z+2	; 0x02
    10f4:	f3 81       	ldd	r31, Z+3	; 0x03
    10f6:	e0 2d       	mov	r30, r0
    10f8:	e2 0f       	add	r30, r18
    10fa:	f3 1f       	adc	r31, r19
    10fc:	c0 81       	ld	r28, Z
    10fe:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1100:	ee 81       	ldd	r30, Y+6	; 0x06
    1102:	ff 81       	ldd	r31, Y+7	; 0x07
    1104:	09 95       	icall
    1106:	68 2f       	mov	r22, r24
    1108:	81 2f       	mov	r24, r17
    110a:	67 dc       	rcall	.-1842   	; 0x9da <udc_update_iface_desc>
    110c:	08 2f       	mov	r16, r24
    110e:	88 23       	and	r24, r24
    1110:	61 f1       	breq	.+88     	; 0x116a <udc_process_setup+0x580>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1112:	ec 81       	ldd	r30, Y+4	; 0x04
    1114:	fd 81       	ldd	r31, Y+5	; 0x05
    1116:	09 95       	icall
    1118:	08 2f       	mov	r16, r24
    111a:	81 11       	cpse	r24, r1
    111c:	26 c0       	rjmp	.+76     	; 0x116a <udc_process_setup+0x580>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    111e:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1120:	e0 91 60 2c 	lds	r30, 0x2C60
    1124:	f0 91 61 2c 	lds	r31, 0x2C61
    1128:	a0 81       	ld	r26, Z
    112a:	b1 81       	ldd	r27, Z+1	; 0x01
    112c:	14 96       	adiw	r26, 0x04	; 4
    112e:	8c 91       	ld	r24, X
    1130:	18 17       	cp	r17, r24
    1132:	d8 f2       	brcs	.-74     	; 0x10ea <udc_process_setup+0x500>
    1134:	1a c0       	rjmp	.+52     	; 0x116a <udc_process_setup+0x580>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1136:	00 e0       	ldi	r16, 0x00	; 0
    1138:	18 c0       	rjmp	.+48     	; 0x116a <udc_process_setup+0x580>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    113a:	00 e0       	ldi	r16, 0x00	; 0
    113c:	16 c0       	rjmp	.+44     	; 0x116a <udc_process_setup+0x580>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    113e:	00 e0       	ldi	r16, 0x00	; 0
    1140:	14 c0       	rjmp	.+40     	; 0x116a <udc_process_setup+0x580>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1142:	00 e0       	ldi	r16, 0x00	; 0
    1144:	12 c0       	rjmp	.+36     	; 0x116a <udc_process_setup+0x580>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1146:	82 2f       	mov	r24, r18
    1148:	80 76       	andi	r24, 0x60	; 96
    114a:	09 f0       	breq	.+2      	; 0x114e <udc_process_setup+0x564>
    114c:	7d cf       	rjmp	.-262    	; 0x1048 <udc_process_setup+0x45e>
    114e:	86 ce       	rjmp	.-756    	; 0xe5c <udc_process_setup+0x272>
    1150:	32 2f       	mov	r19, r18
    1152:	30 76       	andi	r19, 0x60	; 96
    1154:	09 f0       	breq	.+2      	; 0x1158 <udc_process_setup+0x56e>
    1156:	78 cf       	rjmp	.-272    	; 0x1048 <udc_process_setup+0x45e>
    1158:	67 cd       	rjmp	.-1330   	; 0xc28 <udc_process_setup+0x3e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    115a:	2f e0       	ldi	r18, 0x0F	; 15
		str = udc_string_product_name;
    115c:	84 e3       	ldi	r24, 0x34	; 52
    115e:	90 e2       	ldi	r25, 0x20	; 32
    1160:	e1 cd       	rjmp	.-1086   	; 0xd24 <udc_process_setup+0x13a>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1162:	21 e0       	ldi	r18, 0x01	; 1
		str = udc_get_string_serial_name();
    1164:	8c ef       	ldi	r24, 0xFC	; 252
    1166:	90 e2       	ldi	r25, 0x20	; 32
    1168:	dd cd       	rjmp	.-1094   	; 0xd24 <udc_process_setup+0x13a>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    116a:	80 2f       	mov	r24, r16
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	08 95       	ret

0000117a <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    117a:	cf 92       	push	r12
    117c:	df 92       	push	r13
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	ec 01       	movw	r28, r24
    118c:	6a 01       	movw	r12, r20
    118e:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    1190:	db 01       	movw	r26, r22
    1192:	ca 01       	movw	r24, r20
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	a1 09       	sbc	r26, r1
    1198:	b1 09       	sbc	r27, r1
    119a:	bc 01       	movw	r22, r24
    119c:	cd 01       	movw	r24, r26
    119e:	60 0f       	add	r22, r16
    11a0:	71 1f       	adc	r23, r17
    11a2:	82 1f       	adc	r24, r18
    11a4:	93 1f       	adc	r25, r19
    11a6:	a7 01       	movw	r20, r14
    11a8:	96 01       	movw	r18, r12
    11aa:	0e 94 93 2c 	call	0x5926	; 0x5926 <__udivmodsi4>

	if (divisor > 128) {
    11ae:	21 38       	cpi	r18, 0x81	; 129
    11b0:	31 05       	cpc	r19, r1
    11b2:	41 05       	cpc	r20, r1
    11b4:	51 05       	cpc	r21, r1
    11b6:	f8 f4       	brcc	.+62     	; 0x11f6 <spi_xmega_set_baud_div+0x7c>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    11b8:	21 34       	cpi	r18, 0x41	; 65
    11ba:	60 f4       	brcc	.+24     	; 0x11d4 <spi_xmega_set_baud_div+0x5a>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    11bc:	21 32       	cpi	r18, 0x21	; 33
    11be:	60 f4       	brcc	.+24     	; 0x11d8 <spi_xmega_set_baud_div+0x5e>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    11c0:	21 31       	cpi	r18, 0x11	; 17
    11c2:	60 f4       	brcc	.+24     	; 0x11dc <spi_xmega_set_baud_div+0x62>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    11c4:	29 30       	cpi	r18, 0x09	; 9
    11c6:	60 f4       	brcc	.+24     	; 0x11e0 <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    11c8:	25 30       	cpi	r18, 0x05	; 5
    11ca:	60 f4       	brcc	.+24     	; 0x11e4 <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    11cc:	23 30       	cpi	r18, 0x03	; 3
    11ce:	60 f0       	brcs	.+24     	; 0x11e8 <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_PRESCALER_DIV4_gc;
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0b c0       	rjmp	.+22     	; 0x11ea <spi_xmega_set_baud_div+0x70>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    11d4:	93 e0       	ldi	r25, 0x03	; 3
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    11dc:	92 e8       	ldi	r25, 0x82	; 130
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    11e4:	91 e8       	ldi	r25, 0x81	; 129
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    11e8:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    11ea:	88 81       	ld	r24, Y
    11ec:	8c 77       	andi	r24, 0x7C	; 124
    11ee:	89 2b       	or	r24, r25
    11f0:	88 83       	st	Y, r24

	return 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <spi_xmega_set_baud_div+0x7e>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    11f6:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	ef 90       	pop	r14
    1204:	df 90       	pop	r13
    1206:	cf 90       	pop	r12
    1208:	08 95       	ret

0000120a <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    120e:	e0 91 68 2c 	lds	r30, 0x2C68
    1212:	f0 91 69 2c 	lds	r31, 0x2C69
    1216:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1218:	83 ff       	sbrs	r24, 3
    121a:	08 c0       	rjmp	.+16     	; 0x122c <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    121c:	88 60       	ori	r24, 0x08	; 8
    121e:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1224:	86 ef       	ldi	r24, 0xF6	; 246
    1226:	80 93 72 2c 	sts	0x2C72, r24
    122a:	89 c0       	rjmp	.+274    	; 0x133e <twim_interrupt_handler+0x134>
    122c:	98 2f       	mov	r25, r24
    122e:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1230:	31 f0       	breq	.+12     	; 0x123e <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1232:	83 e0       	ldi	r24, 0x03	; 3
    1234:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	80 93 72 2c 	sts	0x2C72, r24
    123c:	80 c0       	rjmp	.+256    	; 0x133e <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    123e:	86 ff       	sbrs	r24, 6
    1240:	45 c0       	rjmp	.+138    	; 0x12cc <twim_interrupt_handler+0xc2>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1242:	a0 91 6a 2c 	lds	r26, 0x2C6A
    1246:	b0 91 6b 2c 	lds	r27, 0x2C6B

	if (transfer.addr_count < pkg->addr_length) {
    124a:	80 91 6c 2c 	lds	r24, 0x2C6C
    124e:	90 91 6d 2c 	lds	r25, 0x2C6D
    1252:	14 96       	adiw	r26, 0x04	; 4
    1254:	2d 91       	ld	r18, X+
    1256:	3c 91       	ld	r19, X
    1258:	15 97       	sbiw	r26, 0x05	; 5
    125a:	82 17       	cp	r24, r18
    125c:	93 07       	cpc	r25, r19
    125e:	6c f4       	brge	.+26     	; 0x127a <twim_interrupt_handler+0x70>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1260:	9c 01       	movw	r18, r24
    1262:	2f 5f       	subi	r18, 0xFF	; 255
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	20 93 6c 2c 	sts	0x2C6C, r18
    126a:	30 93 6d 2c 	sts	0x2C6D, r19
    126e:	a8 0f       	add	r26, r24
    1270:	b9 1f       	adc	r27, r25
    1272:	11 96       	adiw	r26, 0x01	; 1
    1274:	8c 91       	ld	r24, X
    1276:	87 83       	std	Z+7, r24	; 0x07
    1278:	62 c0       	rjmp	.+196    	; 0x133e <twim_interrupt_handler+0x134>

	} else if (transfer.data_count < pkg->length) {
    127a:	80 91 6e 2c 	lds	r24, 0x2C6E
    127e:	90 91 6f 2c 	lds	r25, 0x2C6F
    1282:	18 96       	adiw	r26, 0x08	; 8
    1284:	2d 91       	ld	r18, X+
    1286:	3c 91       	ld	r19, X
    1288:	19 97       	sbiw	r26, 0x09	; 9
    128a:	82 17       	cp	r24, r18
    128c:	93 07       	cpc	r25, r19
    128e:	c8 f4       	brcc	.+50     	; 0x12c2 <twim_interrupt_handler+0xb8>

		if (transfer.read) {
    1290:	20 91 70 2c 	lds	r18, 0x2C70
    1294:	22 23       	and	r18, r18
    1296:	21 f0       	breq	.+8      	; 0x12a0 <twim_interrupt_handler+0x96>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1298:	86 81       	ldd	r24, Z+6	; 0x06
    129a:	81 60       	ori	r24, 0x01	; 1
    129c:	86 83       	std	Z+6, r24	; 0x06
    129e:	4f c0       	rjmp	.+158    	; 0x133e <twim_interrupt_handler+0x134>

		} else {
			const uint8_t * const data = pkg->buffer;
    12a0:	16 96       	adiw	r26, 0x06	; 6
    12a2:	2d 91       	ld	r18, X+
    12a4:	3c 91       	ld	r19, X
    12a6:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    12a8:	ac 01       	movw	r20, r24
    12aa:	4f 5f       	subi	r20, 0xFF	; 255
    12ac:	5f 4f       	sbci	r21, 0xFF	; 255
    12ae:	40 93 6e 2c 	sts	0x2C6E, r20
    12b2:	50 93 6f 2c 	sts	0x2C6F, r21
    12b6:	d9 01       	movw	r26, r18
    12b8:	a8 0f       	add	r26, r24
    12ba:	b9 1f       	adc	r27, r25
    12bc:	8c 91       	ld	r24, X
    12be:	87 83       	std	Z+7, r24	; 0x07
    12c0:	3e c0       	rjmp	.+124    	; 0x133e <twim_interrupt_handler+0x134>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    12c2:	83 e0       	ldi	r24, 0x03	; 3
    12c4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    12c6:	10 92 72 2c 	sts	0x2C72, r1
    12ca:	39 c0       	rjmp	.+114    	; 0x133e <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    12cc:	88 23       	and	r24, r24
    12ce:	a4 f5       	brge	.+104    	; 0x1338 <twim_interrupt_handler+0x12e>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    12d0:	a0 91 6a 2c 	lds	r26, 0x2C6A
    12d4:	b0 91 6b 2c 	lds	r27, 0x2C6B

	if (transfer.data_count < pkg->length) {
    12d8:	80 91 6e 2c 	lds	r24, 0x2C6E
    12dc:	90 91 6f 2c 	lds	r25, 0x2C6F
    12e0:	18 96       	adiw	r26, 0x08	; 8
    12e2:	2d 91       	ld	r18, X+
    12e4:	3c 91       	ld	r19, X
    12e6:	19 97       	sbiw	r26, 0x09	; 9
    12e8:	82 17       	cp	r24, r18
    12ea:	93 07       	cpc	r25, r19
    12ec:	f8 f4       	brcc	.+62     	; 0x132c <twim_interrupt_handler+0x122>

		uint8_t * const data = pkg->buffer;
    12ee:	16 96       	adiw	r26, 0x06	; 6
    12f0:	4d 91       	ld	r20, X+
    12f2:	5c 91       	ld	r21, X
    12f4:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    12f6:	9c 01       	movw	r18, r24
    12f8:	2f 5f       	subi	r18, 0xFF	; 255
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	20 93 6e 2c 	sts	0x2C6E, r18
    1300:	30 93 6f 2c 	sts	0x2C6F, r19
    1304:	67 81       	ldd	r22, Z+7	; 0x07
    1306:	ea 01       	movw	r28, r20
    1308:	c8 0f       	add	r28, r24
    130a:	d9 1f       	adc	r29, r25
    130c:	68 83       	st	Y, r22

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    130e:	18 96       	adiw	r26, 0x08	; 8
    1310:	8d 91       	ld	r24, X+
    1312:	9c 91       	ld	r25, X
    1314:	19 97       	sbiw	r26, 0x09	; 9
    1316:	28 17       	cp	r18, r24
    1318:	39 07       	cpc	r19, r25
    131a:	18 f4       	brcc	.+6      	; 0x1322 <twim_interrupt_handler+0x118>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	83 83       	std	Z+3, r24	; 0x03
    1320:	0e c0       	rjmp	.+28     	; 0x133e <twim_interrupt_handler+0x134>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1322:	87 e0       	ldi	r24, 0x07	; 7
    1324:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1326:	10 92 72 2c 	sts	0x2C72, r1
    132a:	09 c0       	rjmp	.+18     	; 0x133e <twim_interrupt_handler+0x134>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    132c:	83 e0       	ldi	r24, 0x03	; 3
    132e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1330:	89 ef       	ldi	r24, 0xF9	; 249
    1332:	80 93 72 2c 	sts	0x2C72, r24
    1336:	03 c0       	rjmp	.+6      	; 0x133e <twim_interrupt_handler+0x134>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1338:	8b ef       	ldi	r24, 0xFB	; 251
    133a:	80 93 72 2c 	sts	0x2C72, r24
	}
}
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	2f 93       	push	r18
    1350:	3f 93       	push	r19
    1352:	4f 93       	push	r20
    1354:	5f 93       	push	r21
    1356:	6f 93       	push	r22
    1358:	7f 93       	push	r23
    135a:	8f 93       	push	r24
    135c:	9f 93       	push	r25
    135e:	af 93       	push	r26
    1360:	bf 93       	push	r27
    1362:	ef 93       	push	r30
    1364:	ff 93       	push	r31
    1366:	51 df       	rcall	.-350    	; 0x120a <twim_interrupt_handler>
    1368:	ff 91       	pop	r31
    136a:	ef 91       	pop	r30
    136c:	bf 91       	pop	r27
    136e:	af 91       	pop	r26
    1370:	9f 91       	pop	r25
    1372:	8f 91       	pop	r24
    1374:	7f 91       	pop	r23
    1376:	6f 91       	pop	r22
    1378:	5f 91       	pop	r21
    137a:	4f 91       	pop	r20
    137c:	3f 91       	pop	r19
    137e:	2f 91       	pop	r18
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	2f 93       	push	r18
    1396:	3f 93       	push	r19
    1398:	4f 93       	push	r20
    139a:	5f 93       	push	r21
    139c:	6f 93       	push	r22
    139e:	7f 93       	push	r23
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	af 93       	push	r26
    13a6:	bf 93       	push	r27
    13a8:	ef 93       	push	r30
    13aa:	ff 93       	push	r31
    13ac:	2e df       	rcall	.-420    	; 0x120a <twim_interrupt_handler>
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	0f 90       	pop	r0
    13cc:	1f 90       	pop	r1
    13ce:	18 95       	reti

000013d0 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    13d0:	fc 01       	movw	r30, r24
    13d2:	81 81       	ldd	r24, Z+1	; 0x01
    13d4:	85 ff       	sbrs	r24, 5
    13d6:	fd cf       	rjmp	.-6      	; 0x13d2 <usart_putchar+0x2>
    13d8:	60 83       	st	Z, r22
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	08 95       	ret

000013e0 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    13e0:	4f 92       	push	r4
    13e2:	5f 92       	push	r5
    13e4:	6f 92       	push	r6
    13e6:	7f 92       	push	r7
    13e8:	8f 92       	push	r8
    13ea:	9f 92       	push	r9
    13ec:	af 92       	push	r10
    13ee:	bf 92       	push	r11
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	ec 01       	movw	r28, r24
    1402:	4a 01       	movw	r8, r20
    1404:	5b 01       	movw	r10, r22
    1406:	28 01       	movw	r4, r16
    1408:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    140a:	d9 01       	movw	r26, r18
    140c:	c8 01       	movw	r24, r16
    140e:	68 94       	set
    1410:	12 f8       	bld	r1, 2
    1412:	b6 95       	lsr	r27
    1414:	a7 95       	ror	r26
    1416:	97 95       	ror	r25
    1418:	87 95       	ror	r24
    141a:	16 94       	lsr	r1
    141c:	d1 f7       	brne	.-12     	; 0x1412 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    141e:	b9 01       	movw	r22, r18
    1420:	a8 01       	movw	r20, r16
    1422:	03 2e       	mov	r0, r19
    1424:	36 e1       	ldi	r19, 0x16	; 22
    1426:	76 95       	lsr	r23
    1428:	67 95       	ror	r22
    142a:	57 95       	ror	r21
    142c:	47 95       	ror	r20
    142e:	3a 95       	dec	r19
    1430:	d1 f7       	brne	.-12     	; 0x1426 <usart_set_baudrate+0x46>
    1432:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1434:	2c 81       	ldd	r18, Y+4	; 0x04
    1436:	22 fd       	sbrc	r18, 2
    1438:	08 c0       	rjmp	.+16     	; 0x144a <usart_set_baudrate+0x6a>
		max_rate /= 2;
    143a:	b6 95       	lsr	r27
    143c:	a7 95       	ror	r26
    143e:	97 95       	ror	r25
    1440:	87 95       	ror	r24
		min_rate /= 2;
    1442:	76 95       	lsr	r23
    1444:	67 95       	ror	r22
    1446:	57 95       	ror	r21
    1448:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    144a:	88 15       	cp	r24, r8
    144c:	99 05       	cpc	r25, r9
    144e:	aa 05       	cpc	r26, r10
    1450:	bb 05       	cpc	r27, r11
    1452:	08 f4       	brcc	.+2      	; 0x1456 <usart_set_baudrate+0x76>
    1454:	a6 c0       	rjmp	.+332    	; 0x15a2 <usart_set_baudrate+0x1c2>
    1456:	84 16       	cp	r8, r20
    1458:	95 06       	cpc	r9, r21
    145a:	a6 06       	cpc	r10, r22
    145c:	b7 06       	cpc	r11, r23
    145e:	08 f4       	brcc	.+2      	; 0x1462 <usart_set_baudrate+0x82>
    1460:	a2 c0       	rjmp	.+324    	; 0x15a6 <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	82 fd       	sbrc	r24, 2
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <usart_set_baudrate+0x90>
		baud *= 2;
    1468:	88 0c       	add	r8, r8
    146a:	99 1c       	adc	r9, r9
    146c:	aa 1c       	adc	r10, r10
    146e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1470:	c3 01       	movw	r24, r6
    1472:	b2 01       	movw	r22, r4
    1474:	a5 01       	movw	r20, r10
    1476:	94 01       	movw	r18, r8
    1478:	0e 94 93 2c 	call	0x5926	; 0x5926 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    147c:	2f 3f       	cpi	r18, 0xFF	; 255
    147e:	31 05       	cpc	r19, r1
    1480:	41 05       	cpc	r20, r1
    1482:	51 05       	cpc	r21, r1
    1484:	08 f4       	brcc	.+2      	; 0x1488 <usart_set_baudrate+0xa8>
    1486:	91 c0       	rjmp	.+290    	; 0x15aa <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    1488:	c1 2c       	mov	r12, r1
    148a:	d1 2c       	mov	r13, r1
    148c:	76 01       	movw	r14, r12
    148e:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1490:	19 ef       	ldi	r17, 0xF9	; 249
    1492:	05 c0       	rjmp	.+10     	; 0x149e <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    1494:	2c 15       	cp	r18, r12
    1496:	3d 05       	cpc	r19, r13
    1498:	4e 05       	cpc	r20, r14
    149a:	5f 05       	cpc	r21, r15
    149c:	68 f0       	brcs	.+26     	; 0x14b8 <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    149e:	cc 0c       	add	r12, r12
    14a0:	dd 1c       	adc	r13, r13
    14a2:	ee 1c       	adc	r14, r14
    14a4:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    14a6:	1d 3f       	cpi	r17, 0xFD	; 253
    14a8:	14 f4       	brge	.+4      	; 0x14ae <usart_set_baudrate+0xce>
			limit |= 1;
    14aa:	68 94       	set
    14ac:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    14ae:	1f 5f       	subi	r17, 0xFF	; 255
    14b0:	17 30       	cpi	r17, 0x07	; 7
    14b2:	81 f7       	brne	.-32     	; 0x1494 <usart_set_baudrate+0xb4>
    14b4:	21 2f       	mov	r18, r17
    14b6:	50 c0       	rjmp	.+160    	; 0x1558 <usart_set_baudrate+0x178>
    14b8:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    14ba:	11 23       	and	r17, r17
    14bc:	0c f0       	brlt	.+2      	; 0x14c0 <usart_set_baudrate+0xe0>
    14be:	4c c0       	rjmp	.+152    	; 0x1558 <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    14c0:	d5 01       	movw	r26, r10
    14c2:	c4 01       	movw	r24, r8
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	aa 1f       	adc	r26, r26
    14ca:	bb 1f       	adc	r27, r27
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	aa 1f       	adc	r26, r26
    14d2:	bb 1f       	adc	r27, r27
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	aa 1f       	adc	r26, r26
    14da:	bb 1f       	adc	r27, r27
    14dc:	48 1a       	sub	r4, r24
    14de:	59 0a       	sbc	r5, r25
    14e0:	6a 0a       	sbc	r6, r26
    14e2:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    14e4:	1e 3f       	cpi	r17, 0xFE	; 254
    14e6:	f4 f4       	brge	.+60     	; 0x1524 <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    14e8:	6d ef       	ldi	r22, 0xFD	; 253
    14ea:	7f ef       	ldi	r23, 0xFF	; 255
    14ec:	61 1b       	sub	r22, r17
    14ee:	71 09       	sbc	r23, r1
    14f0:	17 fd       	sbrc	r17, 7
    14f2:	73 95       	inc	r23
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <usart_set_baudrate+0x11e>
    14f6:	44 0c       	add	r4, r4
    14f8:	55 1c       	adc	r5, r5
    14fa:	66 1c       	adc	r6, r6
    14fc:	77 1c       	adc	r7, r7
    14fe:	6a 95       	dec	r22
    1500:	d2 f7       	brpl	.-12     	; 0x14f6 <usart_set_baudrate+0x116>
    1502:	d5 01       	movw	r26, r10
    1504:	c4 01       	movw	r24, r8
    1506:	b6 95       	lsr	r27
    1508:	a7 95       	ror	r26
    150a:	97 95       	ror	r25
    150c:	87 95       	ror	r24
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	64 0d       	add	r22, r4
    1514:	75 1d       	adc	r23, r5
    1516:	86 1d       	adc	r24, r6
    1518:	97 1d       	adc	r25, r7
    151a:	a5 01       	movw	r20, r10
    151c:	94 01       	movw	r18, r8
    151e:	0e 94 93 2c 	call	0x5926	; 0x5926 <__udivmodsi4>
    1522:	36 c0       	rjmp	.+108    	; 0x1590 <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
    1524:	23 e0       	ldi	r18, 0x03	; 3
    1526:	21 0f       	add	r18, r17
    1528:	d5 01       	movw	r26, r10
    152a:	c4 01       	movw	r24, r8
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <usart_set_baudrate+0x156>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	aa 1f       	adc	r26, r26
    1534:	bb 1f       	adc	r27, r27
    1536:	2a 95       	dec	r18
    1538:	d2 f7       	brpl	.-12     	; 0x152e <usart_set_baudrate+0x14e>
    153a:	9c 01       	movw	r18, r24
    153c:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    153e:	b6 95       	lsr	r27
    1540:	a7 95       	ror	r26
    1542:	97 95       	ror	r25
    1544:	87 95       	ror	r24
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	64 0d       	add	r22, r4
    154c:	75 1d       	adc	r23, r5
    154e:	86 1d       	adc	r24, r6
    1550:	97 1d       	adc	r25, r7
    1552:	0e 94 93 2c 	call	0x5926	; 0x5926 <__udivmodsi4>
    1556:	1c c0       	rjmp	.+56     	; 0x1590 <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1558:	2d 5f       	subi	r18, 0xFD	; 253
    155a:	d5 01       	movw	r26, r10
    155c:	c4 01       	movw	r24, r8
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <usart_set_baudrate+0x188>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	aa 1f       	adc	r26, r26
    1566:	bb 1f       	adc	r27, r27
    1568:	2a 95       	dec	r18
    156a:	d2 f7       	brpl	.-12     	; 0x1560 <usart_set_baudrate+0x180>
    156c:	9c 01       	movw	r18, r24
    156e:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1570:	b6 95       	lsr	r27
    1572:	a7 95       	ror	r26
    1574:	97 95       	ror	r25
    1576:	87 95       	ror	r24
    1578:	bc 01       	movw	r22, r24
    157a:	cd 01       	movw	r24, r26
    157c:	64 0d       	add	r22, r4
    157e:	75 1d       	adc	r23, r5
    1580:	86 1d       	adc	r24, r6
    1582:	97 1d       	adc	r25, r7
    1584:	0e 94 93 2c 	call	0x5926	; 0x5926 <__udivmodsi4>
    1588:	21 50       	subi	r18, 0x01	; 1
    158a:	31 09       	sbc	r19, r1
    158c:	41 09       	sbc	r20, r1
    158e:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1590:	83 2f       	mov	r24, r19
    1592:	8f 70       	andi	r24, 0x0F	; 15
    1594:	12 95       	swap	r17
    1596:	10 7f       	andi	r17, 0xF0	; 240
    1598:	18 2b       	or	r17, r24
    159a:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    159c:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	18 c0       	rjmp	.+48     	; 0x15d2 <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	16 c0       	rjmp	.+44     	; 0x15d2 <usart_set_baudrate+0x1f2>
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	14 c0       	rjmp	.+40     	; 0x15d2 <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    15aa:	d5 01       	movw	r26, r10
    15ac:	c4 01       	movw	r24, r8
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	aa 1f       	adc	r26, r26
    15b4:	bb 1f       	adc	r27, r27
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	aa 1f       	adc	r26, r26
    15bc:	bb 1f       	adc	r27, r27
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	aa 1f       	adc	r26, r26
    15c4:	bb 1f       	adc	r27, r27
    15c6:	48 1a       	sub	r4, r24
    15c8:	59 0a       	sbc	r5, r25
    15ca:	6a 0a       	sbc	r6, r26
    15cc:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    15ce:	19 ef       	ldi	r17, 0xF9	; 249
    15d0:	8b cf       	rjmp	.-234    	; 0x14e8 <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	ef 90       	pop	r14
    15de:	df 90       	pop	r13
    15e0:	cf 90       	pop	r12
    15e2:	bf 90       	pop	r11
    15e4:	af 90       	pop	r10
    15e6:	9f 90       	pop	r9
    15e8:	8f 90       	pop	r8
    15ea:	7f 90       	pop	r7
    15ec:	6f 90       	pop	r6
    15ee:	5f 90       	pop	r5
    15f0:	4f 90       	pop	r4
    15f2:	08 95       	ret

000015f4 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ec 01       	movw	r28, r24
    15fe:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	09 f4       	brne	.+2      	; 0x1606 <usart_init_rs232+0x12>
    1604:	be c0       	rjmp	.+380    	; 0x1782 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1606:	80 3c       	cpi	r24, 0xC0	; 192
    1608:	91 05       	cpc	r25, r1
    160a:	21 f4       	brne	.+8      	; 0x1614 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    160c:	60 e1       	ldi	r22, 0x10	; 16
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	b4 d7       	rcall	.+3944   	; 0x257a <sysclk_enable_module>
    1612:	b7 c0       	rjmp	.+366    	; 0x1782 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1614:	c1 15       	cp	r28, r1
    1616:	84 e0       	ldi	r24, 0x04	; 4
    1618:	d8 07       	cpc	r29, r24
    161a:	21 f4       	brne	.+8      	; 0x1624 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    161c:	64 e0       	ldi	r22, 0x04	; 4
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	ac d7       	rcall	.+3928   	; 0x257a <sysclk_enable_module>
    1622:	af c0       	rjmp	.+350    	; 0x1782 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1624:	c0 38       	cpi	r28, 0x80	; 128
    1626:	e1 e0       	ldi	r30, 0x01	; 1
    1628:	de 07       	cpc	r29, r30
    162a:	21 f4       	brne	.+8      	; 0x1634 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    162c:	62 e0       	ldi	r22, 0x02	; 2
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	a4 d7       	rcall	.+3912   	; 0x257a <sysclk_enable_module>
    1632:	a7 c0       	rjmp	.+334    	; 0x1782 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1634:	c1 15       	cp	r28, r1
    1636:	f1 e0       	ldi	r31, 0x01	; 1
    1638:	df 07       	cpc	r29, r31
    163a:	21 f4       	brne	.+8      	; 0x1644 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	9c d7       	rcall	.+3896   	; 0x257a <sysclk_enable_module>
    1642:	9f c0       	rjmp	.+318    	; 0x1782 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1644:	c0 38       	cpi	r28, 0x80	; 128
    1646:	83 e0       	ldi	r24, 0x03	; 3
    1648:	d8 07       	cpc	r29, r24
    164a:	21 f4       	brne	.+8      	; 0x1654 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    164c:	61 e0       	ldi	r22, 0x01	; 1
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	94 d7       	rcall	.+3880   	; 0x257a <sysclk_enable_module>
    1652:	97 c0       	rjmp	.+302    	; 0x1782 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1654:	c1 15       	cp	r28, r1
    1656:	e2 e0       	ldi	r30, 0x02	; 2
    1658:	de 07       	cpc	r29, r30
    165a:	21 f4       	brne	.+8      	; 0x1664 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    165c:	62 e0       	ldi	r22, 0x02	; 2
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	8c d7       	rcall	.+3864   	; 0x257a <sysclk_enable_module>
    1662:	8f c0       	rjmp	.+286    	; 0x1782 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1664:	c0 32       	cpi	r28, 0x20	; 32
    1666:	f3 e0       	ldi	r31, 0x03	; 3
    1668:	df 07       	cpc	r29, r31
    166a:	21 f4       	brne	.+8      	; 0x1674 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    166c:	64 e0       	ldi	r22, 0x04	; 4
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	84 d7       	rcall	.+3848   	; 0x257a <sysclk_enable_module>
    1672:	87 c0       	rjmp	.+270    	; 0x1782 <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1674:	c1 15       	cp	r28, r1
    1676:	88 e0       	ldi	r24, 0x08	; 8
    1678:	d8 07       	cpc	r29, r24
    167a:	21 f4       	brne	.+8      	; 0x1684 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	7c d7       	rcall	.+3832   	; 0x257a <sysclk_enable_module>
    1682:	7f c0       	rjmp	.+254    	; 0x1782 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1684:	c1 15       	cp	r28, r1
    1686:	e9 e0       	ldi	r30, 0x09	; 9
    1688:	de 07       	cpc	r29, r30
    168a:	21 f4       	brne	.+8      	; 0x1694 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    168c:	61 e0       	ldi	r22, 0x01	; 1
    168e:	84 e0       	ldi	r24, 0x04	; 4
    1690:	74 d7       	rcall	.+3816   	; 0x257a <sysclk_enable_module>
    1692:	77 c0       	rjmp	.+238    	; 0x1782 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1694:	c1 15       	cp	r28, r1
    1696:	fa e0       	ldi	r31, 0x0A	; 10
    1698:	df 07       	cpc	r29, r31
    169a:	21 f4       	brne	.+8      	; 0x16a4 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    169c:	61 e0       	ldi	r22, 0x01	; 1
    169e:	85 e0       	ldi	r24, 0x05	; 5
    16a0:	6c d7       	rcall	.+3800   	; 0x257a <sysclk_enable_module>
    16a2:	6f c0       	rjmp	.+222    	; 0x1782 <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    16a4:	c0 34       	cpi	r28, 0x40	; 64
    16a6:	88 e0       	ldi	r24, 0x08	; 8
    16a8:	d8 07       	cpc	r29, r24
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    16ac:	62 e0       	ldi	r22, 0x02	; 2
    16ae:	83 e0       	ldi	r24, 0x03	; 3
    16b0:	64 d7       	rcall	.+3784   	; 0x257a <sysclk_enable_module>
    16b2:	67 c0       	rjmp	.+206    	; 0x1782 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    16b4:	c0 34       	cpi	r28, 0x40	; 64
    16b6:	e9 e0       	ldi	r30, 0x09	; 9
    16b8:	de 07       	cpc	r29, r30
    16ba:	21 f4       	brne	.+8      	; 0x16c4 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    16bc:	62 e0       	ldi	r22, 0x02	; 2
    16be:	84 e0       	ldi	r24, 0x04	; 4
    16c0:	5c d7       	rcall	.+3768   	; 0x257a <sysclk_enable_module>
    16c2:	5f c0       	rjmp	.+190    	; 0x1782 <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    16c4:	c0 39       	cpi	r28, 0x90	; 144
    16c6:	f8 e0       	ldi	r31, 0x08	; 8
    16c8:	df 07       	cpc	r29, r31
    16ca:	21 f4       	brne	.+8      	; 0x16d4 <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    16cc:	64 e0       	ldi	r22, 0x04	; 4
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	54 d7       	rcall	.+3752   	; 0x257a <sysclk_enable_module>
    16d2:	57 c0       	rjmp	.+174    	; 0x1782 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    16d4:	c0 39       	cpi	r28, 0x90	; 144
    16d6:	89 e0       	ldi	r24, 0x09	; 9
    16d8:	d8 07       	cpc	r29, r24
    16da:	21 f4       	brne	.+8      	; 0x16e4 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    16dc:	64 e0       	ldi	r22, 0x04	; 4
    16de:	84 e0       	ldi	r24, 0x04	; 4
    16e0:	4c d7       	rcall	.+3736   	; 0x257a <sysclk_enable_module>
    16e2:	4f c0       	rjmp	.+158    	; 0x1782 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    16e4:	c0 39       	cpi	r28, 0x90	; 144
    16e6:	ea e0       	ldi	r30, 0x0A	; 10
    16e8:	de 07       	cpc	r29, r30
    16ea:	21 f4       	brne	.+8      	; 0x16f4 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    16ec:	64 e0       	ldi	r22, 0x04	; 4
    16ee:	85 e0       	ldi	r24, 0x05	; 5
    16f0:	44 d7       	rcall	.+3720   	; 0x257a <sysclk_enable_module>
    16f2:	47 c0       	rjmp	.+142    	; 0x1782 <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    16f4:	c0 3c       	cpi	r28, 0xC0	; 192
    16f6:	f8 e0       	ldi	r31, 0x08	; 8
    16f8:	df 07       	cpc	r29, r31
    16fa:	21 f4       	brne	.+8      	; 0x1704 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    16fc:	68 e0       	ldi	r22, 0x08	; 8
    16fe:	83 e0       	ldi	r24, 0x03	; 3
    1700:	3c d7       	rcall	.+3704   	; 0x257a <sysclk_enable_module>
    1702:	3f c0       	rjmp	.+126    	; 0x1782 <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1704:	c0 3c       	cpi	r28, 0xC0	; 192
    1706:	89 e0       	ldi	r24, 0x09	; 9
    1708:	d8 07       	cpc	r29, r24
    170a:	21 f4       	brne	.+8      	; 0x1714 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    170c:	68 e0       	ldi	r22, 0x08	; 8
    170e:	84 e0       	ldi	r24, 0x04	; 4
    1710:	34 d7       	rcall	.+3688   	; 0x257a <sysclk_enable_module>
    1712:	37 c0       	rjmp	.+110    	; 0x1782 <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1714:	c0 3a       	cpi	r28, 0xA0	; 160
    1716:	e8 e0       	ldi	r30, 0x08	; 8
    1718:	de 07       	cpc	r29, r30
    171a:	21 f4       	brne	.+8      	; 0x1724 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    171c:	60 e1       	ldi	r22, 0x10	; 16
    171e:	83 e0       	ldi	r24, 0x03	; 3
    1720:	2c d7       	rcall	.+3672   	; 0x257a <sysclk_enable_module>
    1722:	2f c0       	rjmp	.+94     	; 0x1782 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1724:	c0 3a       	cpi	r28, 0xA0	; 160
    1726:	f9 e0       	ldi	r31, 0x09	; 9
    1728:	df 07       	cpc	r29, r31
    172a:	21 f4       	brne	.+8      	; 0x1734 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    172c:	60 e1       	ldi	r22, 0x10	; 16
    172e:	84 e0       	ldi	r24, 0x04	; 4
    1730:	24 d7       	rcall	.+3656   	; 0x257a <sysclk_enable_module>
    1732:	27 c0       	rjmp	.+78     	; 0x1782 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1734:	c0 3a       	cpi	r28, 0xA0	; 160
    1736:	8a e0       	ldi	r24, 0x0A	; 10
    1738:	d8 07       	cpc	r29, r24
    173a:	21 f4       	brne	.+8      	; 0x1744 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    173c:	60 e1       	ldi	r22, 0x10	; 16
    173e:	85 e0       	ldi	r24, 0x05	; 5
    1740:	1c d7       	rcall	.+3640   	; 0x257a <sysclk_enable_module>
    1742:	1f c0       	rjmp	.+62     	; 0x1782 <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1744:	c0 3b       	cpi	r28, 0xB0	; 176
    1746:	e8 e0       	ldi	r30, 0x08	; 8
    1748:	de 07       	cpc	r29, r30
    174a:	21 f4       	brne	.+8      	; 0x1754 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    174c:	60 e2       	ldi	r22, 0x20	; 32
    174e:	83 e0       	ldi	r24, 0x03	; 3
    1750:	14 d7       	rcall	.+3624   	; 0x257a <sysclk_enable_module>
    1752:	17 c0       	rjmp	.+46     	; 0x1782 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1754:	c0 3b       	cpi	r28, 0xB0	; 176
    1756:	f9 e0       	ldi	r31, 0x09	; 9
    1758:	df 07       	cpc	r29, r31
    175a:	21 f4       	brne	.+8      	; 0x1764 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    175c:	60 e2       	ldi	r22, 0x20	; 32
    175e:	84 e0       	ldi	r24, 0x04	; 4
    1760:	0c d7       	rcall	.+3608   	; 0x257a <sysclk_enable_module>
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1764:	c0 38       	cpi	r28, 0x80	; 128
    1766:	84 e0       	ldi	r24, 0x04	; 4
    1768:	d8 07       	cpc	r29, r24
    176a:	21 f4       	brne	.+8      	; 0x1774 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    176c:	60 e4       	ldi	r22, 0x40	; 64
    176e:	83 e0       	ldi	r24, 0x03	; 3
    1770:	04 d7       	rcall	.+3592   	; 0x257a <sysclk_enable_module>
    1772:	07 c0       	rjmp	.+14     	; 0x1782 <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1774:	c0 3a       	cpi	r28, 0xA0	; 160
    1776:	e4 e0       	ldi	r30, 0x04	; 4
    1778:	de 07       	cpc	r29, r30
    177a:	19 f4       	brne	.+6      	; 0x1782 <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    177c:	60 e4       	ldi	r22, 0x40	; 64
    177e:	85 e0       	ldi	r24, 0x05	; 5
    1780:	fc d6       	rcall	.+3576   	; 0x257a <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	8f 73       	andi	r24, 0x3F	; 63
    1786:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1788:	f8 01       	movw	r30, r16
    178a:	94 81       	ldd	r25, Z+4	; 0x04
    178c:	85 81       	ldd	r24, Z+5	; 0x05
    178e:	89 2b       	or	r24, r25
    1790:	96 81       	ldd	r25, Z+6	; 0x06
    1792:	99 23       	and	r25, r25
    1794:	11 f0       	breq	.+4      	; 0x179a <usart_init_rs232+0x1a6>
    1796:	98 e0       	ldi	r25, 0x08	; 8
    1798:	01 c0       	rjmp	.+2      	; 0x179c <usart_init_rs232+0x1a8>
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	89 2b       	or	r24, r25
    179e:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    17a0:	f8 01       	movw	r30, r16
    17a2:	40 81       	ld	r20, Z
    17a4:	51 81       	ldd	r21, Z+1	; 0x01
    17a6:	62 81       	ldd	r22, Z+2	; 0x02
    17a8:	73 81       	ldd	r23, Z+3	; 0x03
    17aa:	00 e0       	ldi	r16, 0x00	; 0
    17ac:	1c e6       	ldi	r17, 0x6C	; 108
    17ae:	2c ed       	ldi	r18, 0xDC	; 220
    17b0:	32 e0       	ldi	r19, 0x02	; 2
    17b2:	ce 01       	movw	r24, r28
    17b4:	15 de       	rcall	.-982    	; 0x13e0 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	98 60       	ori	r25, 0x08	; 8
    17ba:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    17bc:	9c 81       	ldd	r25, Y+4	; 0x04
    17be:	90 61       	ori	r25, 0x10	; 16
    17c0:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	08 95       	ret

000017cc <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    17cc:	81 11       	cpse	r24, r1
    17ce:	18 c0       	rjmp	.+48     	; 0x1800 <udd_sleep_mode+0x34>
    17d0:	90 91 a0 2d 	lds	r25, 0x2DA0
    17d4:	99 23       	and	r25, r25
    17d6:	89 f0       	breq	.+34     	; 0x17fa <udd_sleep_mode+0x2e>
    17d8:	9f b7       	in	r25, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	eb e5       	ldi	r30, 0x5B	; 91
    17de:	fe e2       	ldi	r31, 0x2E	; 46
    17e0:	20 81       	ld	r18, Z
    17e2:	21 50       	subi	r18, 0x01	; 1
    17e4:	20 83       	st	Z, r18
    17e6:	9f bf       	out	0x3f, r25	; 63
    17e8:	08 c0       	rjmp	.+16     	; 0x17fa <udd_sleep_mode+0x2e>
    17ea:	9f b7       	in	r25, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	eb e5       	ldi	r30, 0x5B	; 91
    17f0:	fe e2       	ldi	r31, 0x2E	; 46
    17f2:	20 81       	ld	r18, Z
    17f4:	2f 5f       	subi	r18, 0xFF	; 255
    17f6:	20 83       	st	Z, r18
    17f8:	9f bf       	out	0x3f, r25	; 63
    17fa:	80 93 a0 2d 	sts	0x2DA0, r24
    17fe:	08 95       	ret
    1800:	90 91 a0 2d 	lds	r25, 0x2DA0
    1804:	99 23       	and	r25, r25
    1806:	89 f3       	breq	.-30     	; 0x17ea <udd_sleep_mode+0x1e>
    1808:	f8 cf       	rjmp	.-16     	; 0x17fa <udd_sleep_mode+0x2e>

0000180a <udd_ctrl_init>:
    180a:	0f 93       	push	r16
    180c:	e8 ec       	ldi	r30, 0xC8	; 200
    180e:	f4 e0       	ldi	r31, 0x04	; 4
    1810:	80 81       	ld	r24, Z
    1812:	8f 7d       	andi	r24, 0xDF	; 223
    1814:	80 83       	st	Z, r24
    1816:	80 81       	ld	r24, Z
    1818:	8f 7d       	andi	r24, 0xDF	; 223
    181a:	80 83       	st	Z, r24
    181c:	e4 e7       	ldi	r30, 0x74	; 116
    181e:	fd e2       	ldi	r31, 0x2D	; 45
    1820:	02 e0       	ldi	r16, 0x02	; 2
    1822:	05 93       	las	Z, r16
    1824:	10 92 76 2d 	sts	0x2D76, r1
    1828:	10 92 77 2d 	sts	0x2D77, r1
    182c:	00 e2       	ldi	r16, 0x20	; 32
    182e:	06 93       	lac	Z, r16
    1830:	00 e4       	ldi	r16, 0x40	; 64
    1832:	06 93       	lac	Z, r16
    1834:	ec e6       	ldi	r30, 0x6C	; 108
    1836:	fd e2       	ldi	r31, 0x2D	; 45
    1838:	00 e2       	ldi	r16, 0x20	; 32
    183a:	06 93       	lac	Z, r16
    183c:	00 e4       	ldi	r16, 0x40	; 64
    183e:	06 93       	lac	Z, r16
    1840:	10 92 56 2e 	sts	0x2E56, r1
    1844:	10 92 57 2e 	sts	0x2E57, r1
    1848:	10 92 58 2e 	sts	0x2E58, r1
    184c:	10 92 59 2e 	sts	0x2E59, r1
    1850:	10 92 54 2e 	sts	0x2E54, r1
    1854:	10 92 55 2e 	sts	0x2E55, r1
    1858:	10 92 5c 2d 	sts	0x2D5C, r1
    185c:	0f 91       	pop	r16
    185e:	08 95       	ret

00001860 <udd_ctrl_stall_data>:
    1860:	0f 93       	push	r16
    1862:	85 e0       	ldi	r24, 0x05	; 5
    1864:	80 93 5c 2d 	sts	0x2D5C, r24
    1868:	e5 e7       	ldi	r30, 0x75	; 117
    186a:	fd e2       	ldi	r31, 0x2D	; 45
    186c:	04 e0       	ldi	r16, 0x04	; 4
    186e:	05 93       	las	Z, r16
    1870:	ed e6       	ldi	r30, 0x6D	; 109
    1872:	fd e2       	ldi	r31, 0x2D	; 45
    1874:	04 e0       	ldi	r16, 0x04	; 4
    1876:	05 93       	las	Z, r16
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <udd_ctrl_send_zlp_in>:
    187c:	0f 93       	push	r16
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	80 93 5c 2d 	sts	0x2D5C, r24
    1884:	10 92 76 2d 	sts	0x2D76, r1
    1888:	10 92 77 2d 	sts	0x2D77, r1
    188c:	e4 e7       	ldi	r30, 0x74	; 116
    188e:	fd e2       	ldi	r31, 0x2D	; 45
    1890:	02 e0       	ldi	r16, 0x02	; 2
    1892:	06 93       	lac	Z, r16
    1894:	0f 91       	pop	r16
    1896:	08 95       	ret

00001898 <udd_ctrl_endofrequest>:
    1898:	e0 91 56 2e 	lds	r30, 0x2E56
    189c:	f0 91 57 2e 	lds	r31, 0x2E57
    18a0:	30 97       	sbiw	r30, 0x00	; 0
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <udd_ctrl_endofrequest+0xe>
    18a4:	09 95       	icall
    18a6:	08 95       	ret

000018a8 <udd_ctrl_in_sent>:
    18a8:	0f 93       	push	r16
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	80 91 5c 2d 	lds	r24, 0x2D5C
    18b2:	83 30       	cpi	r24, 0x03	; 3
    18b4:	19 f4       	brne	.+6      	; 0x18bc <udd_ctrl_in_sent+0x14>
    18b6:	f0 df       	rcall	.-32     	; 0x1898 <udd_ctrl_endofrequest>
    18b8:	a8 df       	rcall	.-176    	; 0x180a <udd_ctrl_init>
    18ba:	60 c0       	rjmp	.+192    	; 0x197c <udd_ctrl_in_sent+0xd4>
    18bc:	80 91 58 2d 	lds	r24, 0x2D58
    18c0:	90 91 59 2d 	lds	r25, 0x2D59
    18c4:	c0 91 54 2e 	lds	r28, 0x2E54
    18c8:	d0 91 55 2e 	lds	r29, 0x2E55
    18cc:	c8 1b       	sub	r28, r24
    18ce:	d9 0b       	sbc	r29, r25
    18d0:	71 f5       	brne	.+92     	; 0x192e <udd_ctrl_in_sent+0x86>
    18d2:	20 91 5a 2d 	lds	r18, 0x2D5A
    18d6:	30 91 5b 2d 	lds	r19, 0x2D5B
    18da:	82 0f       	add	r24, r18
    18dc:	93 1f       	adc	r25, r19
    18de:	80 93 5a 2d 	sts	0x2D5A, r24
    18e2:	90 93 5b 2d 	sts	0x2D5B, r25
    18e6:	20 91 50 2e 	lds	r18, 0x2E50
    18ea:	30 91 51 2e 	lds	r19, 0x2E51
    18ee:	82 17       	cp	r24, r18
    18f0:	93 07       	cpc	r25, r19
    18f2:	21 f0       	breq	.+8      	; 0x18fc <udd_ctrl_in_sent+0x54>
    18f4:	80 91 73 2c 	lds	r24, 0x2C73
    18f8:	88 23       	and	r24, r24
    18fa:	41 f0       	breq	.+16     	; 0x190c <udd_ctrl_in_sent+0x64>
    18fc:	84 e0       	ldi	r24, 0x04	; 4
    18fe:	80 93 5c 2d 	sts	0x2D5C, r24
    1902:	ec e6       	ldi	r30, 0x6C	; 108
    1904:	fd e2       	ldi	r31, 0x2D	; 45
    1906:	02 e0       	ldi	r16, 0x02	; 2
    1908:	06 93       	lac	Z, r16
    190a:	38 c0       	rjmp	.+112    	; 0x197c <udd_ctrl_in_sent+0xd4>
    190c:	e0 91 58 2e 	lds	r30, 0x2E58
    1910:	f0 91 59 2e 	lds	r31, 0x2E59
    1914:	30 97       	sbiw	r30, 0x00	; 0
    1916:	99 f0       	breq	.+38     	; 0x193e <udd_ctrl_in_sent+0x96>
    1918:	09 95       	icall
    191a:	88 23       	and	r24, r24
    191c:	81 f0       	breq	.+32     	; 0x193e <udd_ctrl_in_sent+0x96>
    191e:	10 92 58 2d 	sts	0x2D58, r1
    1922:	10 92 59 2d 	sts	0x2D59, r1
    1926:	c0 91 54 2e 	lds	r28, 0x2E54
    192a:	d0 91 55 2e 	lds	r29, 0x2E55
    192e:	c0 34       	cpi	r28, 0x40	; 64
    1930:	d1 05       	cpc	r29, r1
    1932:	28 f0       	brcs	.+10     	; 0x193e <udd_ctrl_in_sent+0x96>
    1934:	10 92 73 2c 	sts	0x2C73, r1
    1938:	c0 e4       	ldi	r28, 0x40	; 64
    193a:	d0 e0       	ldi	r29, 0x00	; 0
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <udd_ctrl_in_sent+0x9c>
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	80 93 73 2c 	sts	0x2C73, r24
    1944:	c0 93 76 2d 	sts	0x2D76, r28
    1948:	d0 93 77 2d 	sts	0x2D77, r29
    194c:	80 91 58 2d 	lds	r24, 0x2D58
    1950:	90 91 59 2d 	lds	r25, 0x2D59
    1954:	20 91 52 2e 	lds	r18, 0x2E52
    1958:	30 91 53 2e 	lds	r19, 0x2E53
    195c:	28 0f       	add	r18, r24
    195e:	39 1f       	adc	r19, r25
    1960:	20 93 78 2d 	sts	0x2D78, r18
    1964:	30 93 79 2d 	sts	0x2D79, r19
    1968:	c8 0f       	add	r28, r24
    196a:	d9 1f       	adc	r29, r25
    196c:	c0 93 58 2d 	sts	0x2D58, r28
    1970:	d0 93 59 2d 	sts	0x2D59, r29
    1974:	e4 e7       	ldi	r30, 0x74	; 116
    1976:	fd e2       	ldi	r31, 0x2D	; 45
    1978:	02 e0       	ldi	r16, 0x02	; 2
    197a:	06 93       	lac	Z, r16
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	0f 91       	pop	r16
    1982:	08 95       	ret

00001984 <udd_ep_get_size>:
    1984:	fc 01       	movw	r30, r24
    1986:	81 81       	ldd	r24, Z+1	; 0x01
    1988:	87 70       	andi	r24, 0x07	; 7
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	fc 01       	movw	r30, r24
    198e:	31 97       	sbiw	r30, 0x01	; 1
    1990:	e7 30       	cpi	r30, 0x07	; 7
    1992:	f1 05       	cpc	r31, r1
    1994:	20 f4       	brcc	.+8      	; 0x199e <udd_ep_get_size+0x1a>
    1996:	e2 50       	subi	r30, 0x02	; 2
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	0c 94 b5 2c 	jmp	0x596a	; 0x596a <__tablejump2__>
    199e:	88 e0       	ldi	r24, 0x08	; 8
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	08 95       	ret
    19a4:	80 e2       	ldi	r24, 0x20	; 32
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	08 95       	ret
    19aa:	80 e4       	ldi	r24, 0x40	; 64
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	08 95       	ret
    19b0:	80 e8       	ldi	r24, 0x80	; 128
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	08 95       	ret
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	08 95       	ret
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	92 e0       	ldi	r25, 0x02	; 2
    19c0:	08 95       	ret
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	93 e0       	ldi	r25, 0x03	; 3
    19c6:	08 95       	ret
    19c8:	80 e1       	ldi	r24, 0x10	; 16
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	08 95       	ret

000019ce <udd_ep_get_job>:
    19ce:	28 2f       	mov	r18, r24
    19d0:	2f 70       	andi	r18, 0x0F	; 15
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	22 0f       	add	r18, r18
    19d6:	33 1f       	adc	r19, r19
    19d8:	99 27       	eor	r25, r25
    19da:	87 fd       	sbrc	r24, 7
    19dc:	90 95       	com	r25
    19de:	88 27       	eor	r24, r24
    19e0:	99 0f       	add	r25, r25
    19e2:	88 1f       	adc	r24, r24
    19e4:	99 27       	eor	r25, r25
    19e6:	82 0f       	add	r24, r18
    19e8:	93 1f       	adc	r25, r19
    19ea:	02 97       	sbiw	r24, 0x02	; 2
    19ec:	9c 01       	movw	r18, r24
    19ee:	22 0f       	add	r18, r18
    19f0:	33 1f       	adc	r19, r19
    19f2:	22 0f       	add	r18, r18
    19f4:	33 1f       	adc	r19, r19
    19f6:	22 0f       	add	r18, r18
    19f8:	33 1f       	adc	r19, r19
    19fa:	82 0f       	add	r24, r18
    19fc:	93 1f       	adc	r25, r19
    19fe:	8c 50       	subi	r24, 0x0C	; 12
    1a00:	93 4d       	sbci	r25, 0xD3	; 211
    1a02:	08 95       	ret

00001a04 <udd_ctrl_interrupt_tc_setup>:
    1a04:	0f 93       	push	r16
    1a06:	cf 93       	push	r28
    1a08:	80 91 cc 04 	lds	r24, 0x04CC
    1a0c:	80 ff       	sbrs	r24, 0
    1a0e:	62 c0       	rjmp	.+196    	; 0x1ad4 <udd_ctrl_interrupt_tc_setup+0xd0>
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	80 93 cc 04 	sts	0x04CC, r24
    1a16:	ec e6       	ldi	r30, 0x6C	; 108
    1a18:	fd e2       	ldi	r31, 0x2D	; 45
    1a1a:	00 e8       	ldi	r16, 0x80	; 128
    1a1c:	06 93       	lac	Z, r16
    1a1e:	e4 e7       	ldi	r30, 0x74	; 116
    1a20:	fd e2       	ldi	r31, 0x2D	; 45
    1a22:	00 e8       	ldi	r16, 0x80	; 128
    1a24:	06 93       	lac	Z, r16
    1a26:	80 93 ca 04 	sts	0x04CA, r24
    1a2a:	ec e6       	ldi	r30, 0x6C	; 108
    1a2c:	fd e2       	ldi	r31, 0x2D	; 45
    1a2e:	00 e1       	ldi	r16, 0x10	; 16
    1a30:	06 93       	lac	Z, r16
    1a32:	80 91 5c 2d 	lds	r24, 0x2D5C
    1a36:	88 23       	and	r24, r24
    1a38:	29 f0       	breq	.+10     	; 0x1a44 <udd_ctrl_interrupt_tc_setup+0x40>
    1a3a:	83 50       	subi	r24, 0x03	; 3
    1a3c:	82 30       	cpi	r24, 0x02	; 2
    1a3e:	08 f4       	brcc	.+2      	; 0x1a42 <udd_ctrl_interrupt_tc_setup+0x3e>
    1a40:	2b df       	rcall	.-426    	; 0x1898 <udd_ctrl_endofrequest>
    1a42:	e3 de       	rcall	.-570    	; 0x180a <udd_ctrl_init>
    1a44:	80 91 6e 2d 	lds	r24, 0x2D6E
    1a48:	90 91 6f 2d 	lds	r25, 0x2D6F
    1a4c:	08 97       	sbiw	r24, 0x08	; 8
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <udd_ctrl_interrupt_tc_setup+0x4e>
    1a50:	43 c0       	rjmp	.+134    	; 0x1ad8 <udd_ctrl_interrupt_tc_setup+0xd4>
    1a52:	88 e0       	ldi	r24, 0x08	; 8
    1a54:	e8 e1       	ldi	r30, 0x18	; 24
    1a56:	fd e2       	ldi	r31, 0x2D	; 45
    1a58:	aa e4       	ldi	r26, 0x4A	; 74
    1a5a:	be e2       	ldi	r27, 0x2E	; 46
    1a5c:	01 90       	ld	r0, Z+
    1a5e:	0d 92       	st	X+, r0
    1a60:	8a 95       	dec	r24
    1a62:	e1 f7       	brne	.-8      	; 0x1a5c <udd_ctrl_interrupt_tc_setup+0x58>
    1a64:	e8 ec       	ldi	r30, 0xC8	; 200
    1a66:	f4 e0       	ldi	r31, 0x04	; 4
    1a68:	80 81       	ld	r24, Z
    1a6a:	80 62       	ori	r24, 0x20	; 32
    1a6c:	80 83       	st	Z, r24
    1a6e:	80 81       	ld	r24, Z
    1a70:	80 62       	ori	r24, 0x20	; 32
    1a72:	80 83       	st	Z, r24
    1a74:	ba d8       	rcall	.-3724   	; 0xbea <udc_process_setup>
    1a76:	c8 2f       	mov	r28, r24
    1a78:	81 11       	cpse	r24, r1
    1a7a:	03 c0       	rjmp	.+6      	; 0x1a82 <udd_ctrl_interrupt_tc_setup+0x7e>
    1a7c:	f1 de       	rcall	.-542    	; 0x1860 <udd_ctrl_stall_data>
    1a7e:	c1 e0       	ldi	r28, 0x01	; 1
    1a80:	2c c0       	rjmp	.+88     	; 0x1ada <udd_ctrl_interrupt_tc_setup+0xd6>
    1a82:	80 91 4a 2e 	lds	r24, 0x2E4A
    1a86:	88 23       	and	r24, r24
    1a88:	6c f4       	brge	.+26     	; 0x1aa4 <udd_ctrl_interrupt_tc_setup+0xa0>
    1a8a:	10 92 5a 2d 	sts	0x2D5A, r1
    1a8e:	10 92 5b 2d 	sts	0x2D5B, r1
    1a92:	10 92 58 2d 	sts	0x2D58, r1
    1a96:	10 92 59 2d 	sts	0x2D59, r1
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	80 93 5c 2d 	sts	0x2D5C, r24
    1aa0:	03 df       	rcall	.-506    	; 0x18a8 <udd_ctrl_in_sent>
    1aa2:	1b c0       	rjmp	.+54     	; 0x1ada <udd_ctrl_interrupt_tc_setup+0xd6>
    1aa4:	20 91 50 2e 	lds	r18, 0x2E50
    1aa8:	30 91 51 2e 	lds	r19, 0x2E51
    1aac:	23 2b       	or	r18, r19
    1aae:	11 f4       	brne	.+4      	; 0x1ab4 <udd_ctrl_interrupt_tc_setup+0xb0>
    1ab0:	e5 de       	rcall	.-566    	; 0x187c <udd_ctrl_send_zlp_in>
    1ab2:	13 c0       	rjmp	.+38     	; 0x1ada <udd_ctrl_interrupt_tc_setup+0xd6>
    1ab4:	10 92 5a 2d 	sts	0x2D5A, r1
    1ab8:	10 92 5b 2d 	sts	0x2D5B, r1
    1abc:	10 92 58 2d 	sts	0x2D58, r1
    1ac0:	10 92 59 2d 	sts	0x2D59, r1
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	80 93 5c 2d 	sts	0x2D5C, r24
    1aca:	ec e6       	ldi	r30, 0x6C	; 108
    1acc:	fd e2       	ldi	r31, 0x2D	; 45
    1ace:	02 e0       	ldi	r16, 0x02	; 2
    1ad0:	06 93       	lac	Z, r16
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <udd_ctrl_interrupt_tc_setup+0xd6>
    1ad4:	c0 e0       	ldi	r28, 0x00	; 0
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <udd_ctrl_interrupt_tc_setup+0xd6>
    1ad8:	c1 e0       	ldi	r28, 0x01	; 1
    1ada:	8c 2f       	mov	r24, r28
    1adc:	cf 91       	pop	r28
    1ade:	0f 91       	pop	r16
    1ae0:	08 95       	ret

00001ae2 <udd_ep_trans_complet>:
    1ae2:	bf 92       	push	r11
    1ae4:	cf 92       	push	r12
    1ae6:	df 92       	push	r13
    1ae8:	ef 92       	push	r14
    1aea:	ff 92       	push	r15
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	b8 2e       	mov	r11, r24
    1af6:	6b df       	rcall	.-298    	; 0x19ce <udd_ep_get_job>
    1af8:	ec 01       	movw	r28, r24
    1afa:	1b 2d       	mov	r17, r11
    1afc:	11 1f       	adc	r17, r17
    1afe:	11 27       	eor	r17, r17
    1b00:	11 1f       	adc	r17, r17
    1b02:	8b 2d       	mov	r24, r11
    1b04:	8f 70       	andi	r24, 0x0F	; 15
    1b06:	e8 2e       	mov	r14, r24
    1b08:	f1 2c       	mov	r15, r1
    1b0a:	ee 0c       	add	r14, r14
    1b0c:	ff 1c       	adc	r15, r15
    1b0e:	e1 0e       	add	r14, r17
    1b10:	f1 1c       	adc	r15, r1
    1b12:	c7 01       	movw	r24, r14
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	9c 01       	movw	r18, r24
    1b22:	24 59       	subi	r18, 0x94	; 148
    1b24:	32 4d       	sbci	r19, 0xD2	; 210
    1b26:	79 01       	movw	r14, r18
    1b28:	c9 01       	movw	r24, r18
    1b2a:	2c df       	rcall	.-424    	; 0x1984 <udd_ep_get_size>
    1b2c:	6c 01       	movw	r12, r24
    1b2e:	11 23       	and	r17, r17
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <udd_ep_trans_complet+0x52>
    1b32:	5b c0       	rjmp	.+182    	; 0x1bea <udd_ep_trans_complet+0x108>
    1b34:	d7 01       	movw	r26, r14
    1b36:	16 96       	adiw	r26, 0x06	; 6
    1b38:	2d 91       	ld	r18, X+
    1b3a:	3c 91       	ld	r19, X
    1b3c:	17 97       	sbiw	r26, 0x07	; 7
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	28 0f       	add	r18, r24
    1b44:	39 1f       	adc	r19, r25
    1b46:	2d 83       	std	Y+5, r18	; 0x05
    1b48:	3e 83       	std	Y+6, r19	; 0x06
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	28 17       	cp	r18, r24
    1b50:	39 07       	cpc	r19, r25
    1b52:	c9 f1       	breq	.+114    	; 0x1bc6 <udd_ep_trans_complet+0xe4>
    1b54:	fc 01       	movw	r30, r24
    1b56:	e2 1b       	sub	r30, r18
    1b58:	f3 0b       	sbc	r31, r19
    1b5a:	9f 01       	movw	r18, r30
    1b5c:	21 15       	cp	r18, r1
    1b5e:	f4 e0       	ldi	r31, 0x04	; 4
    1b60:	3f 07       	cpc	r19, r31
    1b62:	40 f0       	brcs	.+16     	; 0x1b74 <udd_ep_trans_complet+0x92>
    1b64:	2f ef       	ldi	r18, 0xFF	; 255
    1b66:	33 e0       	ldi	r19, 0x03	; 3
    1b68:	c9 01       	movw	r24, r18
    1b6a:	b6 01       	movw	r22, r12
    1b6c:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <__udivmodhi4>
    1b70:	28 1b       	sub	r18, r24
    1b72:	39 0b       	sbc	r19, r25
    1b74:	88 81       	ld	r24, Y
    1b76:	81 ff       	sbrs	r24, 1
    1b78:	0a c0       	rjmp	.+20     	; 0x1b8e <udd_ep_trans_complet+0xac>
    1b7a:	c9 01       	movw	r24, r18
    1b7c:	b6 01       	movw	r22, r12
    1b7e:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <__udivmodhi4>
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	89 2b       	or	r24, r25
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <udd_ep_trans_complet+0xa8>
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	94 2f       	mov	r25, r20
    1b8c:	01 c0       	rjmp	.+2      	; 0x1b90 <udd_ep_trans_complet+0xae>
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	88 81       	ld	r24, Y
    1b92:	90 fb       	bst	r25, 0
    1b94:	81 f9       	bld	r24, 1
    1b96:	88 83       	st	Y, r24
    1b98:	d7 01       	movw	r26, r14
    1b9a:	16 96       	adiw	r26, 0x06	; 6
    1b9c:	1d 92       	st	X+, r1
    1b9e:	1c 92       	st	X, r1
    1ba0:	17 97       	sbiw	r26, 0x07	; 7
    1ba2:	12 96       	adiw	r26, 0x02	; 2
    1ba4:	2d 93       	st	X+, r18
    1ba6:	3c 93       	st	X, r19
    1ba8:	13 97       	sbiw	r26, 0x03	; 3
    1baa:	29 81       	ldd	r18, Y+1	; 0x01
    1bac:	3a 81       	ldd	r19, Y+2	; 0x02
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	82 0f       	add	r24, r18
    1bb4:	93 1f       	adc	r25, r19
    1bb6:	14 96       	adiw	r26, 0x04	; 4
    1bb8:	8d 93       	st	X+, r24
    1bba:	9c 93       	st	X, r25
    1bbc:	15 97       	sbiw	r26, 0x05	; 5
    1bbe:	f7 01       	movw	r30, r14
    1bc0:	02 e0       	ldi	r16, 0x02	; 2
    1bc2:	06 93       	lac	Z, r16
    1bc4:	98 c0       	rjmp	.+304    	; 0x1cf6 <udd_ep_trans_complet+0x214>
    1bc6:	88 81       	ld	r24, Y
    1bc8:	81 ff       	sbrs	r24, 1
    1bca:	87 c0       	rjmp	.+270    	; 0x1cda <udd_ep_trans_complet+0x1f8>
    1bcc:	8d 7f       	andi	r24, 0xFD	; 253
    1bce:	88 83       	st	Y, r24
    1bd0:	d7 01       	movw	r26, r14
    1bd2:	16 96       	adiw	r26, 0x06	; 6
    1bd4:	1d 92       	st	X+, r1
    1bd6:	1c 92       	st	X, r1
    1bd8:	17 97       	sbiw	r26, 0x07	; 7
    1bda:	12 96       	adiw	r26, 0x02	; 2
    1bdc:	1d 92       	st	X+, r1
    1bde:	1c 92       	st	X, r1
    1be0:	13 97       	sbiw	r26, 0x03	; 3
    1be2:	f7 01       	movw	r30, r14
    1be4:	02 e0       	ldi	r16, 0x02	; 2
    1be6:	06 93       	lac	Z, r16
    1be8:	86 c0       	rjmp	.+268    	; 0x1cf6 <udd_ep_trans_complet+0x214>
    1bea:	d7 01       	movw	r26, r14
    1bec:	12 96       	adiw	r26, 0x02	; 2
    1bee:	0d 91       	ld	r16, X+
    1bf0:	1c 91       	ld	r17, X
    1bf2:	13 97       	sbiw	r26, 0x03	; 3
    1bf4:	88 81       	ld	r24, Y
    1bf6:	82 ff       	sbrs	r24, 2
    1bf8:	15 c0       	rjmp	.+42     	; 0x1c24 <udd_ep_trans_complet+0x142>
    1bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bfe:	2d 81       	ldd	r18, Y+5	; 0x05
    1c00:	3e 81       	ldd	r19, Y+6	; 0x06
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	b6 01       	movw	r22, r12
    1c08:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <__udivmodhi4>
    1c0c:	b0 e4       	ldi	r27, 0x40	; 64
    1c0e:	bb 9e       	mul	r11, r27
    1c10:	b0 01       	movw	r22, r0
    1c12:	11 24       	eor	r1, r1
    1c14:	6c 5c       	subi	r22, 0xCC	; 204
    1c16:	73 4d       	sbci	r23, 0xD3	; 211
    1c18:	ac 01       	movw	r20, r24
    1c1a:	cf 01       	movw	r24, r30
    1c1c:	82 0f       	add	r24, r18
    1c1e:	93 1f       	adc	r25, r19
    1c20:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <memcpy>
    1c24:	2d 81       	ldd	r18, Y+5	; 0x05
    1c26:	3e 81       	ldd	r19, Y+6	; 0x06
    1c28:	20 0f       	add	r18, r16
    1c2a:	31 1f       	adc	r19, r17
    1c2c:	2d 83       	std	Y+5, r18	; 0x05
    1c2e:	3e 83       	std	Y+6, r19	; 0x06
    1c30:	eb 81       	ldd	r30, Y+3	; 0x03
    1c32:	fc 81       	ldd	r31, Y+4	; 0x04
    1c34:	e2 17       	cp	r30, r18
    1c36:	f3 07       	cpc	r31, r19
    1c38:	10 f4       	brcc	.+4      	; 0x1c3e <udd_ep_trans_complet+0x15c>
    1c3a:	ed 83       	std	Y+5, r30	; 0x05
    1c3c:	fe 83       	std	Y+6, r31	; 0x06
    1c3e:	d7 01       	movw	r26, r14
    1c40:	16 96       	adiw	r26, 0x06	; 6
    1c42:	8d 91       	ld	r24, X+
    1c44:	9c 91       	ld	r25, X
    1c46:	17 97       	sbiw	r26, 0x07	; 7
    1c48:	80 17       	cp	r24, r16
    1c4a:	91 07       	cpc	r25, r17
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <udd_ep_trans_complet+0x16e>
    1c4e:	45 c0       	rjmp	.+138    	; 0x1cda <udd_ep_trans_complet+0x1f8>
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	e8 17       	cp	r30, r24
    1c56:	f9 07       	cpc	r31, r25
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <udd_ep_trans_complet+0x17a>
    1c5a:	3f c0       	rjmp	.+126    	; 0x1cda <udd_ep_trans_complet+0x1f8>
    1c5c:	e8 1b       	sub	r30, r24
    1c5e:	f9 0b       	sbc	r31, r25
    1c60:	e1 15       	cp	r30, r1
    1c62:	b4 e0       	ldi	r27, 0x04	; 4
    1c64:	fb 07       	cpc	r31, r27
    1c66:	48 f0       	brcs	.+18     	; 0x1c7a <udd_ep_trans_complet+0x198>
    1c68:	ef ef       	ldi	r30, 0xFF	; 255
    1c6a:	f3 e0       	ldi	r31, 0x03	; 3
    1c6c:	cf 01       	movw	r24, r30
    1c6e:	b6 01       	movw	r22, r12
    1c70:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <__udivmodhi4>
    1c74:	e8 1b       	sub	r30, r24
    1c76:	f9 0b       	sbc	r31, r25
    1c78:	06 c0       	rjmp	.+12     	; 0x1c86 <udd_ep_trans_complet+0x1a4>
    1c7a:	cf 01       	movw	r24, r30
    1c7c:	b6 01       	movw	r22, r12
    1c7e:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <__udivmodhi4>
    1c82:	e8 1b       	sub	r30, r24
    1c84:	f9 0b       	sbc	r31, r25
    1c86:	d7 01       	movw	r26, r14
    1c88:	12 96       	adiw	r26, 0x02	; 2
    1c8a:	1d 92       	st	X+, r1
    1c8c:	1c 92       	st	X, r1
    1c8e:	13 97       	sbiw	r26, 0x03	; 3
    1c90:	ec 15       	cp	r30, r12
    1c92:	fd 05       	cpc	r31, r13
    1c94:	78 f4       	brcc	.+30     	; 0x1cb4 <udd_ep_trans_complet+0x1d2>
    1c96:	88 81       	ld	r24, Y
    1c98:	84 60       	ori	r24, 0x04	; 4
    1c9a:	88 83       	st	Y, r24
    1c9c:	b0 e4       	ldi	r27, 0x40	; 64
    1c9e:	bb 9e       	mul	r11, r27
    1ca0:	c0 01       	movw	r24, r0
    1ca2:	11 24       	eor	r1, r1
    1ca4:	8c 5c       	subi	r24, 0xCC	; 204
    1ca6:	93 4d       	sbci	r25, 0xD3	; 211
    1ca8:	f7 01       	movw	r30, r14
    1caa:	84 83       	std	Z+4, r24	; 0x04
    1cac:	95 83       	std	Z+5, r25	; 0x05
    1cae:	c6 82       	std	Z+6, r12	; 0x06
    1cb0:	d7 82       	std	Z+7, r13	; 0x07
    1cb2:	0f c0       	rjmp	.+30     	; 0x1cd2 <udd_ep_trans_complet+0x1f0>
    1cb4:	29 81       	ldd	r18, Y+1	; 0x01
    1cb6:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	82 0f       	add	r24, r18
    1cbe:	93 1f       	adc	r25, r19
    1cc0:	d7 01       	movw	r26, r14
    1cc2:	14 96       	adiw	r26, 0x04	; 4
    1cc4:	8d 93       	st	X+, r24
    1cc6:	9c 93       	st	X, r25
    1cc8:	15 97       	sbiw	r26, 0x05	; 5
    1cca:	16 96       	adiw	r26, 0x06	; 6
    1ccc:	ed 93       	st	X+, r30
    1cce:	fc 93       	st	X, r31
    1cd0:	17 97       	sbiw	r26, 0x07	; 7
    1cd2:	f7 01       	movw	r30, r14
    1cd4:	02 e0       	ldi	r16, 0x02	; 2
    1cd6:	06 93       	lac	Z, r16
    1cd8:	0e c0       	rjmp	.+28     	; 0x1cf6 <udd_ep_trans_complet+0x214>
    1cda:	88 81       	ld	r24, Y
    1cdc:	80 ff       	sbrs	r24, 0
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <udd_ep_trans_complet+0x214>
    1ce0:	8e 7f       	andi	r24, 0xFE	; 254
    1ce2:	88 83       	st	Y, r24
    1ce4:	ef 81       	ldd	r30, Y+7	; 0x07
    1ce6:	f8 85       	ldd	r31, Y+8	; 0x08
    1ce8:	30 97       	sbiw	r30, 0x00	; 0
    1cea:	29 f0       	breq	.+10     	; 0x1cf6 <udd_ep_trans_complet+0x214>
    1cec:	6d 81       	ldd	r22, Y+5	; 0x05
    1cee:	7e 81       	ldd	r23, Y+6	; 0x06
    1cf0:	4b 2d       	mov	r20, r11
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	09 95       	icall
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	ff 90       	pop	r15
    1d00:	ef 90       	pop	r14
    1d02:	df 90       	pop	r13
    1d04:	cf 90       	pop	r12
    1d06:	bf 90       	pop	r11
    1d08:	08 95       	ret

00001d0a <udd_attach>:
    1d0a:	cf 93       	push	r28
    1d0c:	cf b7       	in	r28, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	5c dd       	rcall	.-1352   	; 0x17cc <udd_sleep_mode>
    1d14:	ea ec       	ldi	r30, 0xCA	; 202
    1d16:	f4 e0       	ldi	r31, 0x04	; 4
    1d18:	80 e4       	ldi	r24, 0x40	; 64
    1d1a:	80 83       	st	Z, r24
    1d1c:	80 e2       	ldi	r24, 0x20	; 32
    1d1e:	80 83       	st	Z, r24
    1d20:	e1 ec       	ldi	r30, 0xC1	; 193
    1d22:	f4 e0       	ldi	r31, 0x04	; 4
    1d24:	80 81       	ld	r24, Z
    1d26:	81 60       	ori	r24, 0x01	; 1
    1d28:	80 83       	st	Z, r24
    1d2a:	a9 ec       	ldi	r26, 0xC9	; 201
    1d2c:	b4 e0       	ldi	r27, 0x04	; 4
    1d2e:	8c 91       	ld	r24, X
    1d30:	82 60       	ori	r24, 0x02	; 2
    1d32:	8c 93       	st	X, r24
    1d34:	e8 ec       	ldi	r30, 0xC8	; 200
    1d36:	f4 e0       	ldi	r31, 0x04	; 4
    1d38:	80 81       	ld	r24, Z
    1d3a:	80 64       	ori	r24, 0x40	; 64
    1d3c:	80 83       	st	Z, r24
    1d3e:	8c 91       	ld	r24, X
    1d40:	81 60       	ori	r24, 0x01	; 1
    1d42:	8c 93       	st	X, r24
    1d44:	80 81       	ld	r24, Z
    1d46:	80 68       	ori	r24, 0x80	; 128
    1d48:	80 83       	st	Z, r24
    1d4a:	cf bf       	out	0x3f, r28	; 63
    1d4c:	cf 91       	pop	r28
    1d4e:	08 95       	ret

00001d50 <udd_enable>:
    1d50:	cf 93       	push	r28
    1d52:	80 e3       	ldi	r24, 0x30	; 48
    1d54:	1e d4       	rcall	.+2108   	; 0x2592 <sysclk_enable_usb>
    1d56:	e0 ec       	ldi	r30, 0xC0	; 192
    1d58:	f4 e0       	ldi	r31, 0x04	; 4
    1d5a:	80 81       	ld	r24, Z
    1d5c:	80 64       	ori	r24, 0x40	; 64
    1d5e:	80 83       	st	Z, r24
    1d60:	cf b7       	in	r28, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	10 92 6d 2d 	sts	0x2D6D, r1
    1d68:	10 92 75 2d 	sts	0x2D75, r1
    1d6c:	10 92 7d 2d 	sts	0x2D7D, r1
    1d70:	10 92 85 2d 	sts	0x2D85, r1
    1d74:	10 92 8d 2d 	sts	0x2D8D, r1
    1d78:	10 92 95 2d 	sts	0x2D95, r1
    1d7c:	e4 ef       	ldi	r30, 0xF4	; 244
    1d7e:	fc e2       	ldi	r31, 0x2C	; 44
    1d80:	80 81       	ld	r24, Z
    1d82:	8e 7f       	andi	r24, 0xFE	; 254
    1d84:	80 83       	st	Z, r24
    1d86:	ed ef       	ldi	r30, 0xFD	; 253
    1d88:	fc e2       	ldi	r31, 0x2C	; 44
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8e 7f       	andi	r24, 0xFE	; 254
    1d8e:	80 83       	st	Z, r24
    1d90:	e6 e0       	ldi	r30, 0x06	; 6
    1d92:	fd e2       	ldi	r31, 0x2D	; 45
    1d94:	80 81       	ld	r24, Z
    1d96:	8e 7f       	andi	r24, 0xFE	; 254
    1d98:	80 83       	st	Z, r24
    1d9a:	ef e0       	ldi	r30, 0x0F	; 15
    1d9c:	fd e2       	ldi	r31, 0x2D	; 45
    1d9e:	80 81       	ld	r24, Z
    1da0:	8e 7f       	andi	r24, 0xFE	; 254
    1da2:	80 83       	st	Z, r24
    1da4:	6a e1       	ldi	r22, 0x1A	; 26
    1da6:	70 e0       	ldi	r23, 0x00	; 0
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	ec d4       	rcall	.+2520   	; 0x2784 <nvm_read_byte>
    1dac:	8f 3f       	cpi	r24, 0xFF	; 255
    1dae:	19 f0       	breq	.+6      	; 0x1db6 <udd_enable+0x66>
    1db0:	80 93 fa 04 	sts	0x04FA, r24
    1db4:	03 c0       	rjmp	.+6      	; 0x1dbc <udd_enable+0x6c>
    1db6:	8f e1       	ldi	r24, 0x1F	; 31
    1db8:	80 93 fa 04 	sts	0x04FA, r24
    1dbc:	6b e1       	ldi	r22, 0x1B	; 27
    1dbe:	70 e0       	ldi	r23, 0x00	; 0
    1dc0:	82 e0       	ldi	r24, 0x02	; 2
    1dc2:	e0 d4       	rcall	.+2496   	; 0x2784 <nvm_read_byte>
    1dc4:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc6:	19 f0       	breq	.+6      	; 0x1dce <udd_enable+0x7e>
    1dc8:	80 93 fb 04 	sts	0x04FB, r24
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <udd_enable+0x84>
    1dce:	8f e1       	ldi	r24, 0x1F	; 31
    1dd0:	80 93 fb 04 	sts	0x04FB, r24
    1dd4:	e0 ec       	ldi	r30, 0xC0	; 192
    1dd6:	f4 e0       	ldi	r31, 0x04	; 4
    1dd8:	80 81       	ld	r24, Z
    1dda:	82 60       	ori	r24, 0x02	; 2
    1ddc:	80 83       	st	Z, r24
    1dde:	80 81       	ld	r24, Z
    1de0:	80 68       	ori	r24, 0x80	; 128
    1de2:	80 83       	st	Z, r24
    1de4:	80 81       	ld	r24, Z
    1de6:	80 61       	ori	r24, 0x10	; 16
    1de8:	80 83       	st	Z, r24
    1dea:	8c e6       	ldi	r24, 0x6C	; 108
    1dec:	9d e2       	ldi	r25, 0x2D	; 45
    1dee:	86 83       	std	Z+6, r24	; 0x06
    1df0:	97 83       	std	Z+7, r25	; 0x07
    1df2:	80 81       	ld	r24, Z
    1df4:	80 62       	ori	r24, 0x20	; 32
    1df6:	80 83       	st	Z, r24
    1df8:	8f ef       	ldi	r24, 0xFF	; 255
    1dfa:	80 93 c5 04 	sts	0x04C5, r24
    1dfe:	e8 ec       	ldi	r30, 0xC8	; 200
    1e00:	f4 e0       	ldi	r31, 0x04	; 4
    1e02:	80 81       	ld	r24, Z
    1e04:	81 60       	ori	r24, 0x01	; 1
    1e06:	80 83       	st	Z, r24
    1e08:	10 92 a0 2d 	sts	0x2DA0, r1
    1e0c:	8f b7       	in	r24, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	ef e5       	ldi	r30, 0x5F	; 95
    1e12:	fe e2       	ldi	r31, 0x2E	; 46
    1e14:	90 81       	ld	r25, Z
    1e16:	9f 5f       	subi	r25, 0xFF	; 255
    1e18:	90 83       	st	Z, r25
    1e1a:	8f bf       	out	0x3f, r24	; 63
    1e1c:	76 df       	rcall	.-276    	; 0x1d0a <udd_attach>
    1e1e:	cf bf       	out	0x3f, r28	; 63
    1e20:	cf 91       	pop	r28
    1e22:	08 95       	ret

00001e24 <udd_is_high_speed>:
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	08 95       	ret

00001e28 <udd_set_address>:
    1e28:	80 93 c3 04 	sts	0x04C3, r24
    1e2c:	08 95       	ret

00001e2e <udd_getaddress>:
    1e2e:	80 91 c3 04 	lds	r24, 0x04C3
    1e32:	08 95       	ret

00001e34 <udd_get_frame_number>:
    1e34:	80 91 9c 2d 	lds	r24, 0x2D9C
    1e38:	90 91 9d 2d 	lds	r25, 0x2D9D
    1e3c:	08 95       	ret

00001e3e <udd_get_micro_frame_number>:
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	08 95       	ret

00001e44 <udd_set_setup_payload>:
    1e44:	80 93 52 2e 	sts	0x2E52, r24
    1e48:	90 93 53 2e 	sts	0x2E53, r25
    1e4c:	60 93 54 2e 	sts	0x2E54, r22
    1e50:	70 93 55 2e 	sts	0x2E55, r23
    1e54:	08 95       	ret

00001e56 <udd_ep_alloc>:
    1e56:	e8 2f       	mov	r30, r24
    1e58:	ef 70       	andi	r30, 0x0F	; 15
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	ee 0f       	add	r30, r30
    1e5e:	ff 1f       	adc	r31, r31
    1e60:	99 27       	eor	r25, r25
    1e62:	87 fd       	sbrc	r24, 7
    1e64:	90 95       	com	r25
    1e66:	88 27       	eor	r24, r24
    1e68:	99 0f       	add	r25, r25
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	99 27       	eor	r25, r25
    1e6e:	e8 0f       	add	r30, r24
    1e70:	f9 1f       	adc	r31, r25
    1e72:	ee 0f       	add	r30, r30
    1e74:	ff 1f       	adc	r31, r31
    1e76:	ee 0f       	add	r30, r30
    1e78:	ff 1f       	adc	r31, r31
    1e7a:	ee 0f       	add	r30, r30
    1e7c:	ff 1f       	adc	r31, r31
    1e7e:	e4 59       	subi	r30, 0x94	; 148
    1e80:	f2 4d       	sbci	r31, 0xD2	; 210
    1e82:	81 81       	ldd	r24, Z+1	; 0x01
    1e84:	80 7c       	andi	r24, 0xC0	; 192
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <udd_ep_alloc+0x34>
    1e88:	43 c0       	rjmp	.+134    	; 0x1f10 <udd_ep_alloc+0xba>
    1e8a:	63 70       	andi	r22, 0x03	; 3
    1e8c:	61 30       	cpi	r22, 0x01	; 1
    1e8e:	29 f0       	breq	.+10     	; 0x1e9a <udd_ep_alloc+0x44>
    1e90:	10 f4       	brcc	.+4      	; 0x1e96 <udd_ep_alloc+0x40>
    1e92:	80 e4       	ldi	r24, 0x40	; 64
    1e94:	03 c0       	rjmp	.+6      	; 0x1e9c <udd_ep_alloc+0x46>
    1e96:	80 e8       	ldi	r24, 0x80	; 128
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <udd_ep_alloc+0x46>
    1e9a:	80 ec       	ldi	r24, 0xC0	; 192
    1e9c:	40 38       	cpi	r20, 0x80	; 128
    1e9e:	51 05       	cpc	r21, r1
    1ea0:	e1 f0       	breq	.+56     	; 0x1eda <udd_ep_alloc+0x84>
    1ea2:	50 f4       	brcc	.+20     	; 0x1eb8 <udd_ep_alloc+0x62>
    1ea4:	40 32       	cpi	r20, 0x20	; 32
    1ea6:	51 05       	cpc	r21, r1
    1ea8:	a1 f0       	breq	.+40     	; 0x1ed2 <udd_ep_alloc+0x7c>
    1eaa:	40 34       	cpi	r20, 0x40	; 64
    1eac:	51 05       	cpc	r21, r1
    1eae:	99 f0       	breq	.+38     	; 0x1ed6 <udd_ep_alloc+0x80>
    1eb0:	40 31       	cpi	r20, 0x10	; 16
    1eb2:	51 05       	cpc	r21, r1
    1eb4:	61 f4       	brne	.+24     	; 0x1ece <udd_ep_alloc+0x78>
    1eb6:	19 c0       	rjmp	.+50     	; 0x1eea <udd_ep_alloc+0x94>
    1eb8:	41 15       	cp	r20, r1
    1eba:	92 e0       	ldi	r25, 0x02	; 2
    1ebc:	59 07       	cpc	r21, r25
    1ebe:	89 f0       	breq	.+34     	; 0x1ee2 <udd_ep_alloc+0x8c>
    1ec0:	4f 3f       	cpi	r20, 0xFF	; 255
    1ec2:	93 e0       	ldi	r25, 0x03	; 3
    1ec4:	59 07       	cpc	r21, r25
    1ec6:	79 f0       	breq	.+30     	; 0x1ee6 <udd_ep_alloc+0x90>
    1ec8:	41 15       	cp	r20, r1
    1eca:	51 40       	sbci	r21, 0x01	; 1
    1ecc:	41 f0       	breq	.+16     	; 0x1ede <udd_ep_alloc+0x88>
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	0d c0       	rjmp	.+26     	; 0x1eec <udd_ep_alloc+0x96>
    1ed2:	22 e0       	ldi	r18, 0x02	; 2
    1ed4:	0b c0       	rjmp	.+22     	; 0x1eec <udd_ep_alloc+0x96>
    1ed6:	23 e0       	ldi	r18, 0x03	; 3
    1ed8:	09 c0       	rjmp	.+18     	; 0x1eec <udd_ep_alloc+0x96>
    1eda:	24 e0       	ldi	r18, 0x04	; 4
    1edc:	07 c0       	rjmp	.+14     	; 0x1eec <udd_ep_alloc+0x96>
    1ede:	25 e0       	ldi	r18, 0x05	; 5
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <udd_ep_alloc+0x96>
    1ee2:	26 e0       	ldi	r18, 0x06	; 6
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <udd_ep_alloc+0x96>
    1ee6:	27 e0       	ldi	r18, 0x07	; 7
    1ee8:	01 c0       	rjmp	.+2      	; 0x1eec <udd_ep_alloc+0x96>
    1eea:	21 e0       	ldi	r18, 0x01	; 1
    1eec:	11 82       	std	Z+1, r1	; 0x01
    1eee:	96 e0       	ldi	r25, 0x06	; 6
    1ef0:	90 83       	st	Z, r25
    1ef2:	82 2b       	or	r24, r18
    1ef4:	81 83       	std	Z+1, r24	; 0x01
    1ef6:	81 81       	ldd	r24, Z+1	; 0x01
    1ef8:	80 7c       	andi	r24, 0xC0	; 192
    1efa:	80 3c       	cpi	r24, 0xC0	; 192
    1efc:	21 f4       	brne	.+8      	; 0x1f06 <udd_ep_alloc+0xb0>
    1efe:	81 81       	ldd	r24, Z+1	; 0x01
    1f00:	87 70       	andi	r24, 0x07	; 7
    1f02:	87 30       	cpi	r24, 0x07	; 7
    1f04:	39 f0       	breq	.+14     	; 0x1f14 <udd_ep_alloc+0xbe>
    1f06:	81 81       	ldd	r24, Z+1	; 0x01
    1f08:	80 62       	ori	r24, 0x20	; 32
    1f0a:	81 83       	std	Z+1, r24	; 0x01
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	08 95       	ret
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	08 95       	ret
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	08 95       	ret

00001f18 <udd_ep_is_halted>:
    1f18:	e8 2f       	mov	r30, r24
    1f1a:	ef 70       	andi	r30, 0x0F	; 15
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	ee 0f       	add	r30, r30
    1f20:	ff 1f       	adc	r31, r31
    1f22:	99 27       	eor	r25, r25
    1f24:	87 fd       	sbrc	r24, 7
    1f26:	90 95       	com	r25
    1f28:	88 27       	eor	r24, r24
    1f2a:	99 0f       	add	r25, r25
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	99 27       	eor	r25, r25
    1f30:	e8 0f       	add	r30, r24
    1f32:	f9 1f       	adc	r31, r25
    1f34:	ee 0f       	add	r30, r30
    1f36:	ff 1f       	adc	r31, r31
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	e4 59       	subi	r30, 0x94	; 148
    1f42:	f2 4d       	sbci	r31, 0xD2	; 210
    1f44:	81 81       	ldd	r24, Z+1	; 0x01
    1f46:	82 fb       	bst	r24, 2
    1f48:	88 27       	eor	r24, r24
    1f4a:	80 f9       	bld	r24, 0
    1f4c:	08 95       	ret

00001f4e <udd_ep_clear_halt>:
    1f4e:	e8 2f       	mov	r30, r24
    1f50:	ef 70       	andi	r30, 0x0F	; 15
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	ee 0f       	add	r30, r30
    1f56:	ff 1f       	adc	r31, r31
    1f58:	28 2f       	mov	r18, r24
    1f5a:	33 27       	eor	r19, r19
    1f5c:	27 fd       	sbrc	r18, 7
    1f5e:	30 95       	com	r19
    1f60:	22 27       	eor	r18, r18
    1f62:	33 0f       	add	r19, r19
    1f64:	22 1f       	adc	r18, r18
    1f66:	33 27       	eor	r19, r19
    1f68:	e2 0f       	add	r30, r18
    1f6a:	f3 1f       	adc	r31, r19
    1f6c:	ee 0f       	add	r30, r30
    1f6e:	ff 1f       	adc	r31, r31
    1f70:	ee 0f       	add	r30, r30
    1f72:	ff 1f       	adc	r31, r31
    1f74:	ee 0f       	add	r30, r30
    1f76:	ff 1f       	adc	r31, r31
    1f78:	e4 59       	subi	r30, 0x94	; 148
    1f7a:	f2 4d       	sbci	r31, 0xD2	; 210
    1f7c:	91 81       	ldd	r25, Z+1	; 0x01
    1f7e:	92 ff       	sbrs	r25, 2
    1f80:	0e c0       	rjmp	.+28     	; 0x1f9e <udd_ep_clear_halt+0x50>
    1f82:	91 81       	ldd	r25, Z+1	; 0x01
    1f84:	9b 7f       	andi	r25, 0xFB	; 251
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	22 dd       	rcall	.-1468   	; 0x19ce <udd_ep_get_job>
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	80 81       	ld	r24, Z
    1f8e:	80 ff       	sbrs	r24, 0
    1f90:	06 c0       	rjmp	.+12     	; 0x1f9e <udd_ep_clear_halt+0x50>
    1f92:	8e 7f       	andi	r24, 0xFE	; 254
    1f94:	80 83       	st	Z, r24
    1f96:	07 80       	ldd	r0, Z+7	; 0x07
    1f98:	f0 85       	ldd	r31, Z+8	; 0x08
    1f9a:	e0 2d       	mov	r30, r0
    1f9c:	09 95       	icall
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	08 95       	ret

00001fa2 <udd_ep_run>:
    1fa2:	7f 92       	push	r7
    1fa4:	8f 92       	push	r8
    1fa6:	9f 92       	push	r9
    1fa8:	af 92       	push	r10
    1faa:	bf 92       	push	r11
    1fac:	cf 92       	push	r12
    1fae:	df 92       	push	r13
    1fb0:	ef 92       	push	r14
    1fb2:	ff 92       	push	r15
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17
    1fb8:	cf 93       	push	r28
    1fba:	df 93       	push	r29
    1fbc:	98 2e       	mov	r9, r24
    1fbe:	86 2e       	mov	r8, r22
    1fc0:	5a 01       	movw	r10, r20
    1fc2:	69 01       	movw	r12, r18
    1fc4:	04 dd       	rcall	.-1528   	; 0x19ce <udd_ep_get_job>
    1fc6:	7c 01       	movw	r14, r24
    1fc8:	79 2c       	mov	r7, r9
    1fca:	77 1c       	adc	r7, r7
    1fcc:	77 24       	eor	r7, r7
    1fce:	77 1c       	adc	r7, r7
    1fd0:	c9 2d       	mov	r28, r9
    1fd2:	cf 70       	andi	r28, 0x0F	; 15
    1fd4:	d0 e0       	ldi	r29, 0x00	; 0
    1fd6:	cc 0f       	add	r28, r28
    1fd8:	dd 1f       	adc	r29, r29
    1fda:	c7 0d       	add	r28, r7
    1fdc:	d1 1d       	adc	r29, r1
    1fde:	cc 0f       	add	r28, r28
    1fe0:	dd 1f       	adc	r29, r29
    1fe2:	cc 0f       	add	r28, r28
    1fe4:	dd 1f       	adc	r29, r29
    1fe6:	cc 0f       	add	r28, r28
    1fe8:	dd 1f       	adc	r29, r29
    1fea:	c4 59       	subi	r28, 0x94	; 148
    1fec:	d2 4d       	sbci	r29, 0xD2	; 210
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	80 7c       	andi	r24, 0xC0	; 192
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <udd_ep_run+0x54>
    1ff4:	4c c0       	rjmp	.+152    	; 0x208e <udd_ep_run+0xec>
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	80 7c       	andi	r24, 0xC0	; 192
    1ffa:	80 3c       	cpi	r24, 0xC0	; 192
    1ffc:	19 f0       	breq	.+6      	; 0x2004 <udd_ep_run+0x62>
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	82 fd       	sbrc	r24, 2
    2002:	47 c0       	rjmp	.+142    	; 0x2092 <udd_ep_run+0xf0>
    2004:	8f b7       	in	r24, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	f7 01       	movw	r30, r14
    200a:	90 81       	ld	r25, Z
    200c:	90 ff       	sbrs	r25, 0
    200e:	03 c0       	rjmp	.+6      	; 0x2016 <udd_ep_run+0x74>
    2010:	8f bf       	out	0x3f, r24	; 63
    2012:	71 2c       	mov	r7, r1
    2014:	3f c0       	rjmp	.+126    	; 0x2094 <udd_ep_run+0xf2>
    2016:	f7 01       	movw	r30, r14
    2018:	90 81       	ld	r25, Z
    201a:	91 60       	ori	r25, 0x01	; 1
    201c:	90 83       	st	Z, r25
    201e:	8f bf       	out	0x3f, r24	; 63
    2020:	f7 01       	movw	r30, r14
    2022:	a1 82       	std	Z+1, r10	; 0x01
    2024:	b2 82       	std	Z+2, r11	; 0x02
    2026:	c3 82       	std	Z+3, r12	; 0x03
    2028:	d4 82       	std	Z+4, r13	; 0x04
    202a:	15 82       	std	Z+5, r1	; 0x05
    202c:	16 82       	std	Z+6, r1	; 0x06
    202e:	07 83       	std	Z+7, r16	; 0x07
    2030:	10 87       	std	Z+8, r17	; 0x08
    2032:	81 10       	cpse	r8, r1
    2034:	06 c0       	rjmp	.+12     	; 0x2042 <udd_ep_run+0xa0>
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	c1 14       	cp	r12, r1
    203a:	d1 04       	cpc	r13, r1
    203c:	19 f0       	breq	.+6      	; 0x2044 <udd_ep_run+0xa2>
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	01 c0       	rjmp	.+2      	; 0x2044 <udd_ep_run+0xa2>
    2042:	91 e0       	ldi	r25, 0x01	; 1
    2044:	f7 01       	movw	r30, r14
    2046:	80 81       	ld	r24, Z
    2048:	90 fb       	bst	r25, 0
    204a:	81 f9       	bld	r24, 1
    204c:	8b 7f       	andi	r24, 0xFB	; 251
    204e:	80 83       	st	Z, r24
    2050:	77 20       	and	r7, r7
    2052:	19 f0       	breq	.+6      	; 0x205a <udd_ep_run+0xb8>
    2054:	1e 82       	std	Y+6, r1	; 0x06
    2056:	1f 82       	std	Y+7, r1	; 0x07
    2058:	15 c0       	rjmp	.+42     	; 0x2084 <udd_ep_run+0xe2>
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	80 7c       	andi	r24, 0xC0	; 192
    205e:	80 3c       	cpi	r24, 0xC0	; 192
    2060:	69 f4       	brne	.+26     	; 0x207c <udd_ep_run+0xda>
    2062:	ce 01       	movw	r24, r28
    2064:	8f dc       	rcall	.-1762   	; 0x1984 <udd_ep_get_size>
    2066:	bc 01       	movw	r22, r24
    2068:	c6 01       	movw	r24, r12
    206a:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <__udivmodhi4>
    206e:	89 2b       	or	r24, r25
    2070:	29 f0       	breq	.+10     	; 0x207c <udd_ep_run+0xda>
    2072:	f7 01       	movw	r30, r14
    2074:	80 81       	ld	r24, Z
    2076:	8e 7f       	andi	r24, 0xFE	; 254
    2078:	80 83       	st	Z, r24
    207a:	0c c0       	rjmp	.+24     	; 0x2094 <udd_ep_run+0xf2>
    207c:	1a 82       	std	Y+2, r1	; 0x02
    207e:	1b 82       	std	Y+3, r1	; 0x03
    2080:	1e 82       	std	Y+6, r1	; 0x06
    2082:	1f 82       	std	Y+7, r1	; 0x07
    2084:	89 2d       	mov	r24, r9
    2086:	2d dd       	rcall	.-1446   	; 0x1ae2 <udd_ep_trans_complet>
    2088:	77 24       	eor	r7, r7
    208a:	73 94       	inc	r7
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <udd_ep_run+0xf2>
    208e:	71 2c       	mov	r7, r1
    2090:	01 c0       	rjmp	.+2      	; 0x2094 <udd_ep_run+0xf2>
    2092:	71 2c       	mov	r7, r1
    2094:	87 2d       	mov	r24, r7
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	bf 90       	pop	r11
    20a8:	af 90       	pop	r10
    20aa:	9f 90       	pop	r9
    20ac:	8f 90       	pop	r8
    20ae:	7f 90       	pop	r7
    20b0:	08 95       	ret

000020b2 <udd_ep_abort>:
    20b2:	ff 92       	push	r15
    20b4:	0f 93       	push	r16
    20b6:	1f 93       	push	r17
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	18 2f       	mov	r17, r24
    20be:	f8 2e       	mov	r15, r24
    20c0:	ff 1c       	adc	r15, r15
    20c2:	ff 24       	eor	r15, r15
    20c4:	ff 1c       	adc	r15, r15
    20c6:	c8 2f       	mov	r28, r24
    20c8:	cf 70       	andi	r28, 0x0F	; 15
    20ca:	d0 e0       	ldi	r29, 0x00	; 0
    20cc:	cc 0f       	add	r28, r28
    20ce:	dd 1f       	adc	r29, r29
    20d0:	cf 0d       	add	r28, r15
    20d2:	d1 1d       	adc	r29, r1
    20d4:	cc 0f       	add	r28, r28
    20d6:	dd 1f       	adc	r29, r29
    20d8:	cc 0f       	add	r28, r28
    20da:	dd 1f       	adc	r29, r29
    20dc:	cc 0f       	add	r28, r28
    20de:	dd 1f       	adc	r29, r29
    20e0:	c4 59       	subi	r28, 0x94	; 148
    20e2:	d2 4d       	sbci	r29, 0xD2	; 210
    20e4:	74 dc       	rcall	.-1816   	; 0x19ce <udd_ep_get_job>
    20e6:	dc 01       	movw	r26, r24
    20e8:	fe 01       	movw	r30, r28
    20ea:	02 e0       	ldi	r16, 0x02	; 2
    20ec:	05 93       	las	Z, r16
    20ee:	8c 91       	ld	r24, X
    20f0:	80 ff       	sbrs	r24, 0
    20f2:	12 c0       	rjmp	.+36     	; 0x2118 <udd_ep_abort+0x66>
    20f4:	8e 7f       	andi	r24, 0xFE	; 254
    20f6:	8c 93       	st	X, r24
    20f8:	17 96       	adiw	r26, 0x07	; 7
    20fa:	ed 91       	ld	r30, X+
    20fc:	fc 91       	ld	r31, X
    20fe:	18 97       	sbiw	r26, 0x08	; 8
    2100:	30 97       	sbiw	r30, 0x00	; 0
    2102:	51 f0       	breq	.+20     	; 0x2118 <udd_ep_abort+0x66>
    2104:	ff 20       	and	r15, r15
    2106:	19 f0       	breq	.+6      	; 0x210e <udd_ep_abort+0x5c>
    2108:	6e 81       	ldd	r22, Y+6	; 0x06
    210a:	7f 81       	ldd	r23, Y+7	; 0x07
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <udd_ep_abort+0x60>
    210e:	6a 81       	ldd	r22, Y+2	; 0x02
    2110:	7b 81       	ldd	r23, Y+3	; 0x03
    2112:	41 2f       	mov	r20, r17
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	09 95       	icall
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	1f 91       	pop	r17
    211e:	0f 91       	pop	r16
    2120:	ff 90       	pop	r15
    2122:	08 95       	ret

00002124 <udd_ep_free>:
    2124:	cf 93       	push	r28
    2126:	c8 2f       	mov	r28, r24
    2128:	c4 df       	rcall	.-120    	; 0x20b2 <udd_ep_abort>
    212a:	ec 2f       	mov	r30, r28
    212c:	ef 70       	andi	r30, 0x0F	; 15
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	ee 0f       	add	r30, r30
    2132:	ff 1f       	adc	r31, r31
    2134:	8c 2f       	mov	r24, r28
    2136:	99 27       	eor	r25, r25
    2138:	87 fd       	sbrc	r24, 7
    213a:	90 95       	com	r25
    213c:	88 27       	eor	r24, r24
    213e:	99 0f       	add	r25, r25
    2140:	88 1f       	adc	r24, r24
    2142:	99 27       	eor	r25, r25
    2144:	e8 0f       	add	r30, r24
    2146:	f9 1f       	adc	r31, r25
    2148:	ee 0f       	add	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	ee 0f       	add	r30, r30
    214e:	ff 1f       	adc	r31, r31
    2150:	ee 0f       	add	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	e4 59       	subi	r30, 0x94	; 148
    2156:	f2 4d       	sbci	r31, 0xD2	; 210
    2158:	11 82       	std	Z+1, r1	; 0x01
    215a:	cf 91       	pop	r28
    215c:	08 95       	ret

0000215e <udd_ep_set_halt>:
    215e:	0f 93       	push	r16
    2160:	e8 2f       	mov	r30, r24
    2162:	ef 70       	andi	r30, 0x0F	; 15
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	ee 0f       	add	r30, r30
    2168:	ff 1f       	adc	r31, r31
    216a:	28 2f       	mov	r18, r24
    216c:	33 27       	eor	r19, r19
    216e:	27 fd       	sbrc	r18, 7
    2170:	30 95       	com	r19
    2172:	22 27       	eor	r18, r18
    2174:	33 0f       	add	r19, r19
    2176:	22 1f       	adc	r18, r18
    2178:	33 27       	eor	r19, r19
    217a:	e2 0f       	add	r30, r18
    217c:	f3 1f       	adc	r31, r19
    217e:	ee 0f       	add	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	ee 0f       	add	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	e4 59       	subi	r30, 0x94	; 148
    218c:	f2 4d       	sbci	r31, 0xD2	; 210
    218e:	91 81       	ldd	r25, Z+1	; 0x01
    2190:	94 60       	ori	r25, 0x04	; 4
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	01 e0       	ldi	r16, 0x01	; 1
    2196:	06 93       	lac	Z, r16
    2198:	8c df       	rcall	.-232    	; 0x20b2 <udd_ep_abort>
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret

000021a0 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    21a0:	1f 92       	push	r1
    21a2:	0f 92       	push	r0
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	0f 92       	push	r0
    21a8:	11 24       	eor	r1, r1
    21aa:	0f 93       	push	r16
    21ac:	2f 93       	push	r18
    21ae:	3f 93       	push	r19
    21b0:	4f 93       	push	r20
    21b2:	5f 93       	push	r21
    21b4:	6f 93       	push	r22
    21b6:	7f 93       	push	r23
    21b8:	8f 93       	push	r24
    21ba:	9f 93       	push	r25
    21bc:	af 93       	push	r26
    21be:	bf 93       	push	r27
    21c0:	ef 93       	push	r30
    21c2:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    21c4:	80 91 cb 04 	lds	r24, 0x04CB
    21c8:	88 23       	and	r24, r24
    21ca:	34 f4       	brge	.+12     	; 0x21d8 <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    21cc:	80 e8       	ldi	r24, 0x80	; 128
    21ce:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    21d2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    21d6:	88 c0       	rjmp	.+272    	; 0x22e8 <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    21d8:	80 91 cb 04 	lds	r24, 0x04CB
    21dc:	82 ff       	sbrs	r24, 2
    21de:	20 c0       	rjmp	.+64     	; 0x2220 <__vector_125+0x80>
		udd_ack_underflow_event();
    21e0:	84 e0       	ldi	r24, 0x04	; 4
    21e2:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    21e6:	80 91 74 2d 	lds	r24, 0x2D74
    21ea:	86 ff       	sbrs	r24, 6
    21ec:	7d c0       	rjmp	.+250    	; 0x22e8 <__vector_125+0x148>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    21ee:	80 91 cc 04 	lds	r24, 0x04CC
    21f2:	81 fd       	sbrc	r24, 1
    21f4:	79 c0       	rjmp	.+242    	; 0x22e8 <__vector_125+0x148>
    21f6:	06 dc       	rcall	.-2036   	; 0x1a04 <udd_ctrl_interrupt_tc_setup>
    21f8:	81 11       	cpse	r24, r1
    21fa:	76 c0       	rjmp	.+236    	; 0x22e8 <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    21fc:	80 91 5c 2d 	lds	r24, 0x2D5C
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	11 f4       	brne	.+4      	; 0x2208 <__vector_125+0x68>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2204:	3b db       	rcall	.-2442   	; 0x187c <udd_ctrl_send_zlp_in>
    2206:	70 c0       	rjmp	.+224    	; 0x22e8 <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2208:	84 30       	cpi	r24, 0x04	; 4
    220a:	09 f0       	breq	.+2      	; 0x220e <__vector_125+0x6e>
    220c:	6d c0       	rjmp	.+218    	; 0x22e8 <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    220e:	e5 e7       	ldi	r30, 0x75	; 117
    2210:	fd e2       	ldi	r31, 0x2D	; 45
    2212:	04 e0       	ldi	r16, 0x04	; 4
    2214:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2216:	ed e6       	ldi	r30, 0x6D	; 109
    2218:	fd e2       	ldi	r31, 0x2D	; 45
    221a:	04 e0       	ldi	r16, 0x04	; 4
    221c:	05 93       	las	Z, r16
    221e:	64 c0       	rjmp	.+200    	; 0x22e8 <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2220:	80 91 cb 04 	lds	r24, 0x04CB
    2224:	81 ff       	sbrs	r24, 1
    2226:	5b c0       	rjmp	.+182    	; 0x22de <__vector_125+0x13e>
		udd_ack_overflow_event();
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    222e:	80 91 6c 2d 	lds	r24, 0x2D6C
    2232:	86 ff       	sbrs	r24, 6
    2234:	59 c0       	rjmp	.+178    	; 0x22e8 <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2236:	80 91 cc 04 	lds	r24, 0x04CC
    223a:	81 fd       	sbrc	r24, 1
    223c:	55 c0       	rjmp	.+170    	; 0x22e8 <__vector_125+0x148>
    223e:	e2 db       	rcall	.-2108   	; 0x1a04 <udd_ctrl_interrupt_tc_setup>
    2240:	81 11       	cpse	r24, r1
    2242:	52 c0       	rjmp	.+164    	; 0x22e8 <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2244:	80 91 5c 2d 	lds	r24, 0x2D5C
    2248:	82 30       	cpi	r24, 0x02	; 2
    224a:	41 f4       	brne	.+16     	; 0x225c <__vector_125+0xbc>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    224c:	84 e0       	ldi	r24, 0x04	; 4
    224e:	80 93 5c 2d 	sts	0x2D5C, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2252:	ec e6       	ldi	r30, 0x6C	; 108
    2254:	fd e2       	ldi	r31, 0x2D	; 45
    2256:	02 e0       	ldi	r16, 0x02	; 2
    2258:	06 93       	lac	Z, r16
    225a:	46 c0       	rjmp	.+140    	; 0x22e8 <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    225c:	83 30       	cpi	r24, 0x03	; 3
    225e:	09 f0       	breq	.+2      	; 0x2262 <__vector_125+0xc2>
    2260:	43 c0       	rjmp	.+134    	; 0x22e8 <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2262:	e5 e7       	ldi	r30, 0x75	; 117
    2264:	fd e2       	ldi	r31, 0x2D	; 45
    2266:	04 e0       	ldi	r16, 0x04	; 4
    2268:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    226a:	ed e6       	ldi	r30, 0x6D	; 109
    226c:	fd e2       	ldi	r31, 0x2D	; 45
    226e:	04 e0       	ldi	r16, 0x04	; 4
    2270:	05 93       	las	Z, r16
    2272:	3a c0       	rjmp	.+116    	; 0x22e8 <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2274:	80 e1       	ldi	r24, 0x10	; 16
    2276:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	1a df       	rcall	.-460    	; 0x20b2 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    227e:	81 e8       	ldi	r24, 0x81	; 129
    2280:	18 df       	rcall	.-464    	; 0x20b2 <udd_ep_abort>
		}
#endif
		udc_reset();
    2282:	0e 94 9f 05 	call	0xb3e	; 0xb3e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2286:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    228a:	ed e6       	ldi	r30, 0x6D	; 109
    228c:	fd e2       	ldi	r31, 0x2D	; 45
    228e:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    2290:	96 e0       	ldi	r25, 0x06	; 6
    2292:	90 93 6c 2d 	sts	0x2D6C, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2296:	83 e4       	ldi	r24, 0x43	; 67
    2298:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    229a:	e5 e7       	ldi	r30, 0x75	; 117
    229c:	fd e2       	ldi	r31, 0x2D	; 45
    229e:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    22a0:	90 93 74 2d 	sts	0x2D74, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    22a4:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    22a6:	88 e1       	ldi	r24, 0x18	; 24
    22a8:	9d e2       	ldi	r25, 0x2D	; 45
    22aa:	80 93 70 2d 	sts	0x2D70, r24
    22ae:	90 93 71 2d 	sts	0x2D71, r25
		// Reset endpoint control management
		udd_ctrl_init();
    22b2:	ab da       	rcall	.-2730   	; 0x180a <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    22b4:	19 c0       	rjmp	.+50     	; 0x22e8 <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
    22b6:	80 91 cb 04 	lds	r24, 0x04CB
    22ba:	86 ff       	sbrs	r24, 6
    22bc:	06 c0       	rjmp	.+12     	; 0x22ca <__vector_125+0x12a>
		udd_ack_suspend_event();
    22be:	80 e4       	ldi	r24, 0x40	; 64
    22c0:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	82 da       	rcall	.-2812   	; 0x17cc <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    22c8:	0f c0       	rjmp	.+30     	; 0x22e8 <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
    22ca:	80 91 cb 04 	lds	r24, 0x04CB
    22ce:	85 ff       	sbrs	r24, 5
    22d0:	0b c0       	rjmp	.+22     	; 0x22e8 <__vector_125+0x148>
		udd_ack_resume_event();
    22d2:	80 e2       	ldi	r24, 0x20	; 32
    22d4:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	78 da       	rcall	.-2832   	; 0x17cc <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    22dc:	05 c0       	rjmp	.+10     	; 0x22e8 <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    22de:	80 91 cb 04 	lds	r24, 0x04CB
    22e2:	84 ff       	sbrs	r24, 4
    22e4:	e8 cf       	rjmp	.-48     	; 0x22b6 <__vector_125+0x116>
    22e6:	c6 cf       	rjmp	.-116    	; 0x2274 <__vector_125+0xd4>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    22e8:	ff 91       	pop	r31
    22ea:	ef 91       	pop	r30
    22ec:	bf 91       	pop	r27
    22ee:	af 91       	pop	r26
    22f0:	9f 91       	pop	r25
    22f2:	8f 91       	pop	r24
    22f4:	7f 91       	pop	r23
    22f6:	6f 91       	pop	r22
    22f8:	5f 91       	pop	r21
    22fa:	4f 91       	pop	r20
    22fc:	3f 91       	pop	r19
    22fe:	2f 91       	pop	r18
    2300:	0f 91       	pop	r16
    2302:	0f 90       	pop	r0
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	0f 90       	pop	r0
    2308:	1f 90       	pop	r1
    230a:	18 95       	reti

0000230c <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    230c:	1f 92       	push	r1
    230e:	0f 92       	push	r0
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	0f 92       	push	r0
    2314:	11 24       	eor	r1, r1
    2316:	0f 93       	push	r16
    2318:	1f 93       	push	r17
    231a:	2f 93       	push	r18
    231c:	3f 93       	push	r19
    231e:	4f 93       	push	r20
    2320:	5f 93       	push	r21
    2322:	6f 93       	push	r22
    2324:	7f 93       	push	r23
    2326:	8f 93       	push	r24
    2328:	9f 93       	push	r25
    232a:	af 93       	push	r26
    232c:	bf 93       	push	r27
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	ef 93       	push	r30
    2334:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2336:	80 91 cc 04 	lds	r24, 0x04CC
    233a:	81 fd       	sbrc	r24, 1
    233c:	03 c0       	rjmp	.+6      	; 0x2344 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    233e:	62 db       	rcall	.-2364   	; 0x1a04 <udd_ctrl_interrupt_tc_setup>
    2340:	81 11       	cpse	r24, r1
    2342:	b9 c0       	rjmp	.+370    	; 0x24b6 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2344:	82 e0       	ldi	r24, 0x02	; 2
    2346:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    234a:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    234e:	81 95       	neg	r24
    2350:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2352:	ec e6       	ldi	r30, 0x6C	; 108
    2354:	fd e2       	ldi	r31, 0x2D	; 45
    2356:	e8 1b       	sub	r30, r24
    2358:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    235a:	20 81       	ld	r18, Z
    235c:	31 81       	ldd	r19, Z+1	; 0x01
    235e:	2c 56       	subi	r18, 0x6C	; 108
    2360:	3d 42       	sbci	r19, 0x2D	; 45
    2362:	36 95       	lsr	r19
    2364:	27 95       	ror	r18
    2366:	36 95       	lsr	r19
    2368:	27 95       	ror	r18
    236a:	36 95       	lsr	r19
    236c:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    236e:	82 2f       	mov	r24, r18
    2370:	86 95       	lsr	r24
    2372:	20 ff       	sbrs	r18, 0
    2374:	02 c0       	rjmp	.+4      	; 0x237a <__vector_126+0x6e>
    2376:	90 e8       	ldi	r25, 0x80	; 128
    2378:	01 c0       	rjmp	.+2      	; 0x237c <__vector_126+0x70>
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    237e:	e8 2f       	mov	r30, r24
    2380:	ef 70       	andi	r30, 0x0F	; 15
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	ee 0f       	add	r30, r30
    2386:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2388:	28 2f       	mov	r18, r24
    238a:	33 27       	eor	r19, r19
    238c:	27 fd       	sbrc	r18, 7
    238e:	30 95       	com	r19
    2390:	22 27       	eor	r18, r18
    2392:	33 0f       	add	r19, r19
    2394:	22 1f       	adc	r18, r18
    2396:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2398:	e2 0f       	add	r30, r18
    239a:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    239c:	ee 0f       	add	r30, r30
    239e:	ff 1f       	adc	r31, r31
    23a0:	ee 0f       	add	r30, r30
    23a2:	ff 1f       	adc	r31, r31
    23a4:	ee 0f       	add	r30, r30
    23a6:	ff 1f       	adc	r31, r31
    23a8:	e4 59       	subi	r30, 0x94	; 148
    23aa:	f2 4d       	sbci	r31, 0xD2	; 210
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    23ac:	90 81       	ld	r25, Z
    23ae:	95 ff       	sbrs	r25, 5
    23b0:	82 c0       	rjmp	.+260    	; 0x24b6 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    23b2:	00 e2       	ldi	r16, 0x20	; 32
    23b4:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    23b6:	81 11       	cpse	r24, r1
    23b8:	79 c0       	rjmp	.+242    	; 0x24ac <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    23ba:	80 91 5c 2d 	lds	r24, 0x2D5C
    23be:	84 30       	cpi	r24, 0x04	; 4
    23c0:	19 f4       	brne	.+6      	; 0x23c8 <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    23c2:	6a da       	rcall	.-2860   	; 0x1898 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    23c4:	22 da       	rcall	.-3004   	; 0x180a <udd_ctrl_init>
    23c6:	77 c0       	rjmp	.+238    	; 0x24b6 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    23c8:	c0 91 6e 2d 	lds	r28, 0x2D6E
    23cc:	d0 91 6f 2d 	lds	r29, 0x2D6F

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    23d0:	80 91 54 2e 	lds	r24, 0x2E54
    23d4:	90 91 55 2e 	lds	r25, 0x2E55
    23d8:	00 91 58 2d 	lds	r16, 0x2D58
    23dc:	10 91 59 2d 	lds	r17, 0x2D59
    23e0:	98 01       	movw	r18, r16
    23e2:	2c 0f       	add	r18, r28
    23e4:	3d 1f       	adc	r19, r29
    23e6:	82 17       	cp	r24, r18
    23e8:	93 07       	cpc	r25, r19
    23ea:	18 f4       	brcc	.+6      	; 0x23f2 <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    23ec:	ec 01       	movw	r28, r24
    23ee:	c0 1b       	sub	r28, r16
    23f0:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    23f2:	80 91 52 2e 	lds	r24, 0x2E52
    23f6:	90 91 53 2e 	lds	r25, 0x2E53
    23fa:	ae 01       	movw	r20, r28
    23fc:	68 e1       	ldi	r22, 0x18	; 24
    23fe:	7d e2       	ldi	r23, 0x2D	; 45
    2400:	80 0f       	add	r24, r16
    2402:	91 1f       	adc	r25, r17
    2404:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2408:	0c 0f       	add	r16, r28
    240a:	1d 1f       	adc	r17, r29
    240c:	00 93 58 2d 	sts	0x2D58, r16
    2410:	10 93 59 2d 	sts	0x2D59, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2414:	c0 34       	cpi	r28, 0x40	; 64
    2416:	d1 05       	cpc	r29, r1
    2418:	69 f4       	brne	.+26     	; 0x2434 <__vector_126+0x128>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    241a:	80 91 5a 2d 	lds	r24, 0x2D5A
    241e:	90 91 5b 2d 	lds	r25, 0x2D5B
    2422:	80 0f       	add	r24, r16
    2424:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2426:	20 91 50 2e 	lds	r18, 0x2E50
    242a:	30 91 51 2e 	lds	r19, 0x2E51
    242e:	82 17       	cp	r24, r18
    2430:	93 07       	cpc	r25, r19
    2432:	88 f0       	brcs	.+34     	; 0x2456 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2434:	00 93 54 2e 	sts	0x2E54, r16
    2438:	10 93 55 2e 	sts	0x2E55, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    243c:	e0 91 58 2e 	lds	r30, 0x2E58
    2440:	f0 91 59 2e 	lds	r31, 0x2E59
    2444:	30 97       	sbiw	r30, 0x00	; 0
    2446:	29 f0       	breq	.+10     	; 0x2452 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2448:	09 95       	icall
    244a:	81 11       	cpse	r24, r1
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    244e:	08 da       	rcall	.-3056   	; 0x1860 <udd_ctrl_stall_data>
    2450:	32 c0       	rjmp	.+100    	; 0x24b6 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2452:	14 da       	rcall	.-3032   	; 0x187c <udd_ctrl_send_zlp_in>
    2454:	30 c0       	rjmp	.+96     	; 0x24b6 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2456:	80 91 54 2e 	lds	r24, 0x2E54
    245a:	90 91 55 2e 	lds	r25, 0x2E55
    245e:	08 17       	cp	r16, r24
    2460:	19 07       	cpc	r17, r25
    2462:	f9 f4       	brne	.+62     	; 0x24a2 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2464:	e0 91 58 2e 	lds	r30, 0x2E58
    2468:	f0 91 59 2e 	lds	r31, 0x2E59
    246c:	30 97       	sbiw	r30, 0x00	; 0
    246e:	11 f4       	brne	.+4      	; 0x2474 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2470:	f7 d9       	rcall	.-3090   	; 0x1860 <udd_ctrl_stall_data>
    2472:	21 c0       	rjmp	.+66     	; 0x24b6 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2474:	09 95       	icall
    2476:	81 11       	cpse	r24, r1
    2478:	02 c0       	rjmp	.+4      	; 0x247e <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    247a:	f2 d9       	rcall	.-3100   	; 0x1860 <udd_ctrl_stall_data>
    247c:	1c c0       	rjmp	.+56     	; 0x24b6 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    247e:	20 91 5a 2d 	lds	r18, 0x2D5A
    2482:	30 91 5b 2d 	lds	r19, 0x2D5B
    2486:	80 91 58 2d 	lds	r24, 0x2D58
    248a:	90 91 59 2d 	lds	r25, 0x2D59
    248e:	82 0f       	add	r24, r18
    2490:	93 1f       	adc	r25, r19
    2492:	80 93 5a 2d 	sts	0x2D5A, r24
    2496:	90 93 5b 2d 	sts	0x2D5B, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    249a:	10 92 58 2d 	sts	0x2D58, r1
    249e:	10 92 59 2d 	sts	0x2D59, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    24a2:	ec e6       	ldi	r30, 0x6C	; 108
    24a4:	fd e2       	ldi	r31, 0x2D	; 45
    24a6:	02 e0       	ldi	r16, 0x02	; 2
    24a8:	06 93       	lac	Z, r16
    24aa:	05 c0       	rjmp	.+10     	; 0x24b6 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    24ac:	80 38       	cpi	r24, 0x80	; 128
    24ae:	11 f4       	brne	.+4      	; 0x24b4 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    24b0:	fb d9       	rcall	.-3082   	; 0x18a8 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    24b4:	16 db       	rcall	.-2516   	; 0x1ae2 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    24b6:	ff 91       	pop	r31
    24b8:	ef 91       	pop	r30
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	bf 91       	pop	r27
    24c0:	af 91       	pop	r26
    24c2:	9f 91       	pop	r25
    24c4:	8f 91       	pop	r24
    24c6:	7f 91       	pop	r23
    24c8:	6f 91       	pop	r22
    24ca:	5f 91       	pop	r21
    24cc:	4f 91       	pop	r20
    24ce:	3f 91       	pop	r19
    24d0:	2f 91       	pop	r18
    24d2:	1f 91       	pop	r17
    24d4:	0f 91       	pop	r16
    24d6:	0f 90       	pop	r0
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	0f 90       	pop	r0
    24dc:	1f 90       	pop	r1
    24de:	18 95       	reti

000024e0 <sysclk_init>:
    24e0:	cf 93       	push	r28
    24e2:	df 93       	push	r29
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <sysclk_init+0x6>
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <sysclk_init+0x8>
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	8f ef       	ldi	r24, 0xFF	; 255
    24ee:	80 93 70 00 	sts	0x0070, r24
    24f2:	80 93 71 00 	sts	0x0071, r24
    24f6:	80 93 72 00 	sts	0x0072, r24
    24fa:	80 93 73 00 	sts	0x0073, r24
    24fe:	80 93 74 00 	sts	0x0074, r24
    2502:	80 93 75 00 	sts	0x0075, r24
    2506:	80 93 76 00 	sts	0x0076, r24
    250a:	6c e1       	ldi	r22, 0x1C	; 28
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	82 e0       	ldi	r24, 0x02	; 2
    2510:	39 d1       	rcall	.+626    	; 0x2784 <nvm_read_byte>
    2512:	8a 83       	std	Y+2, r24	; 0x02
    2514:	6d e1       	ldi	r22, 0x1D	; 29
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	82 e0       	ldi	r24, 0x02	; 2
    251a:	34 d1       	rcall	.+616    	; 0x2784 <nvm_read_byte>
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	9a 81       	ldd	r25, Y+2	; 0x02
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	21 f4       	brne	.+8      	; 0x252e <sysclk_init+0x4e>
    2526:	80 e4       	ldi	r24, 0x40	; 64
    2528:	93 e2       	ldi	r25, 0x23	; 35
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	9a 83       	std	Y+2, r25	; 0x02
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	8b 83       	std	Y+3, r24	; 0x03
    2534:	9c 83       	std	Y+4, r25	; 0x04
    2536:	e0 e6       	ldi	r30, 0x60	; 96
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	82 83       	std	Z+2, r24	; 0x02
    253c:	8c 81       	ldd	r24, Y+4	; 0x04
    253e:	83 83       	std	Z+3, r24	; 0x03
    2540:	8f b7       	in	r24, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	e0 e5       	ldi	r30, 0x50	; 80
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	90 81       	ld	r25, Z
    254a:	92 60       	ori	r25, 0x02	; 2
    254c:	90 83       	st	Z, r25
    254e:	8f bf       	out	0x3f, r24	; 63
    2550:	81 81       	ldd	r24, Z+1	; 0x01
    2552:	81 ff       	sbrs	r24, 1
    2554:	fd cf       	rjmp	.-6      	; 0x2550 <sysclk_init+0x70>
    2556:	61 e0       	ldi	r22, 0x01	; 1
    2558:	80 e4       	ldi	r24, 0x40	; 64
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	1d d1       	rcall	.+570    	; 0x2798 <ccp_write_io>
    255e:	8f b7       	in	r24, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	e0 e5       	ldi	r30, 0x50	; 80
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	90 81       	ld	r25, Z
    2568:	9e 7f       	andi	r25, 0xFE	; 254
    256a:	90 83       	st	Z, r25
    256c:	8f bf       	out	0x3f, r24	; 63
    256e:	24 96       	adiw	r28, 0x04	; 4
    2570:	cd bf       	out	0x3d, r28	; 61
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	08 95       	ret

0000257a <sysclk_enable_module>:
    257a:	9f b7       	in	r25, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	e8 2f       	mov	r30, r24
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	e0 59       	subi	r30, 0x90	; 144
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	60 95       	com	r22
    2588:	80 81       	ld	r24, Z
    258a:	68 23       	and	r22, r24
    258c:	60 83       	st	Z, r22
    258e:	9f bf       	out	0x3f, r25	; 63
    2590:	08 95       	ret

00002592 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    2592:	86 30       	cpi	r24, 0x06	; 6
    2594:	11 f4       	brne	.+4      	; 0x259a <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    2596:	68 e1       	ldi	r22, 0x18	; 24
    2598:	01 c0       	rjmp	.+2      	; 0x259c <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    259a:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    259c:	e0 e5       	ldi	r30, 0x50	; 80
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    25a2:	81 fd       	sbrc	r24, 1
    25a4:	09 c0       	rjmp	.+18     	; 0x25b8 <sysclk_enable_usb+0x26>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    25a6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    25a8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    25aa:	90 81       	ld	r25, Z
    25ac:	92 60       	ori	r25, 0x02	; 2
    25ae:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    25b0:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    25b2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    25b4:	81 ff       	sbrs	r24, 1
    25b6:	fd cf       	rjmp	.-6      	; 0x25b2 <sysclk_enable_usb+0x20>
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    25b8:	63 60       	ori	r22, 0x03	; 3
    25ba:	84 e4       	ldi	r24, 0x44	; 68
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	ec d0       	rcall	.+472    	; 0x2798 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    25c0:	60 e4       	ldi	r22, 0x40	; 64
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	da cf       	rjmp	.-76     	; 0x257a <sysclk_enable_module>
    25c6:	08 95       	ret

000025c8 <nvm_eeprom_read_buffer>:
 * \param address   the address to where to read
 * \param buf       pointer to the data
 * \param len       the number of bytes to read
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	9b 01       	movw	r18, r22
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    25ce:	e0 ec       	ldi	r30, 0xC0	; 192
    25d0:	f1 e0       	ldi	r31, 0x01	; 1
    25d2:	67 85       	ldd	r22, Z+15	; 0x0f
    25d4:	66 23       	and	r22, r22
    25d6:	ec f3       	brlt	.-6      	; 0x25d2 <nvm_eeprom_read_buffer+0xa>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    25d8:	cc ec       	ldi	r28, 0xCC	; 204
    25da:	d1 e0       	ldi	r29, 0x01	; 1
    25dc:	68 81       	ld	r22, Y
    25de:	68 60       	ori	r22, 0x08	; 8
    25e0:	68 83       	st	Y, r22
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    25e2:	bc 01       	movw	r22, r24
    25e4:	70 5f       	subi	r23, 0xF0	; 240
    25e6:	c9 01       	movw	r24, r18
    25e8:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <memcpy>
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    25ec:	88 81       	ld	r24, Y
    25ee:	87 7f       	andi	r24, 0xF7	; 247
    25f0:	88 83       	st	Y, r24
	eeprom_disable_mapping();
}
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	08 95       	ret

000025f8 <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    25f8:	e0 ec       	ldi	r30, 0xC0	; 192
    25fa:	f1 e0       	ldi	r31, 0x01	; 1
    25fc:	87 85       	ldd	r24, Z+15	; 0x0f
    25fe:	88 23       	and	r24, r24
    2600:	ec f3       	brlt	.-6      	; 0x25fc <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    2602:	e0 ec       	ldi	r30, 0xC0	; 192
    2604:	f1 e0       	ldi	r31, 0x01	; 1
    2606:	87 85       	ldd	r24, Z+15	; 0x0f
    2608:	81 ff       	sbrs	r24, 1
    260a:	06 c0       	rjmp	.+12     	; 0x2618 <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    260c:	86 e3       	ldi	r24, 0x36	; 54
    260e:	82 87       	std	Z+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2610:	61 e0       	ldi	r22, 0x01	; 1
    2612:	8b ec       	ldi	r24, 0xCB	; 203
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	c0 c0       	rjmp	.+384    	; 0x2798 <ccp_write_io>
    2618:	08 95       	ret

0000261a <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    261a:	e0 ec       	ldi	r30, 0xC0	; 192
    261c:	f1 e0       	ldi	r31, 0x01	; 1
    261e:	97 85       	ldd	r25, Z+15	; 0x0f
    2620:	99 23       	and	r25, r25
    2622:	ec f3       	brlt	.-6      	; 0x261e <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    2624:	ec ec       	ldi	r30, 0xCC	; 204
    2626:	f1 e0       	ldi	r31, 0x01	; 1
    2628:	90 81       	ld	r25, Z
    262a:	98 60       	ori	r25, 0x08	; 8
    262c:	90 83       	st	Z, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    262e:	a8 2f       	mov	r26, r24
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	b0 5f       	subi	r27, 0xF0	; 240
    2634:	6c 93       	st	X, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    2636:	80 81       	ld	r24, Z
    2638:	87 7f       	andi	r24, 0xF7	; 247
    263a:	80 83       	st	Z, r24
    263c:	08 95       	ret

0000263e <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    263e:	ff 92       	push	r15
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	18 2f       	mov	r17, r24
    264a:	f9 2e       	mov	r15, r25
    264c:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    264e:	e0 ec       	ldi	r30, 0xC0	; 192
    2650:	f1 e0       	ldi	r31, 0x01	; 1
    2652:	02 85       	ldd	r16, Z+10	; 0x0a
	nvm_eeprom_flush_buffer();
    2654:	d1 df       	rcall	.-94     	; 0x25f8 <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2656:	e0 ec       	ldi	r30, 0xC0	; 192
    2658:	f1 e0       	ldi	r31, 0x01	; 1
    265a:	27 85       	ldd	r18, Z+15	; 0x0f
    265c:	22 23       	and	r18, r18
    265e:	ec f3       	brlt	.-6      	; 0x265a <nvm_eeprom_write_byte+0x1c>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    2660:	6c 2f       	mov	r22, r28
    2662:	81 2f       	mov	r24, r17
    2664:	da df       	rcall	.-76     	; 0x261a <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    2666:	c0 ec       	ldi	r28, 0xC0	; 192
    2668:	d1 e0       	ldi	r29, 0x01	; 1
    266a:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    266c:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    266e:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    2670:	85 e3       	ldi	r24, 0x35	; 53
    2672:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2674:	61 e0       	ldi	r22, 0x01	; 1
    2676:	8b ec       	ldi	r24, 0xCB	; 203
    2678:	91 e0       	ldi	r25, 0x01	; 1
    267a:	8e d0       	rcall	.+284    	; 0x2798 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    267c:	0a 87       	std	Y+10, r16	; 0x0a
}
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	08 95       	ret

0000268a <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    268a:	ef 92       	push	r14
    268c:	ff 92       	push	r15
    268e:	0f 93       	push	r16
    2690:	1f 93       	push	r17
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2698:	e0 ec       	ldi	r30, 0xC0	; 192
    269a:	f1 e0       	ldi	r31, 0x01	; 1
    269c:	87 85       	ldd	r24, Z+15	; 0x0f
    269e:	88 23       	and	r24, r24
    26a0:	ec f3       	brlt	.-6      	; 0x269c <nvm_eeprom_load_page_to_buffer+0x12>
    26a2:	78 01       	movw	r14, r16
    26a4:	80 e2       	ldi	r24, 0x20	; 32
    26a6:	e8 0e       	add	r14, r24
    26a8:	f1 1c       	adc	r15, r1
    26aa:	e8 01       	movw	r28, r16
    26ac:	8c 2f       	mov	r24, r28
    26ae:	80 1b       	sub	r24, r16
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
    26b0:	69 91       	ld	r22, Y+
    26b2:	b3 df       	rcall	.-154    	; 0x261a <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    26b4:	ce 15       	cp	r28, r14
    26b6:	df 05       	cpc	r29, r15
    26b8:	c9 f7       	brne	.-14     	; 0x26ac <nvm_eeprom_load_page_to_buffer+0x22>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	1f 91       	pop	r17
    26c0:	0f 91       	pop	r16
    26c2:	ff 90       	pop	r15
    26c4:	ef 90       	pop	r14
    26c6:	08 95       	ret

000026c8 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    26c8:	1f 93       	push	r17
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29
    26ce:	e0 ec       	ldi	r30, 0xC0	; 192
    26d0:	f1 e0       	ldi	r31, 0x01	; 1
    26d2:	97 85       	ldd	r25, Z+15	; 0x0f
    26d4:	99 23       	and	r25, r25
    26d6:	ec f3       	brlt	.-6      	; 0x26d2 <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    26d8:	20 e2       	ldi	r18, 0x20	; 32
    26da:	82 9f       	mul	r24, r18
    26dc:	c0 01       	movw	r24, r0
    26de:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    26e0:	c0 ec       	ldi	r28, 0xC0	; 192
    26e2:	d1 e0       	ldi	r29, 0x01	; 1
    26e4:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    26e6:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    26e8:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    26ea:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    26ec:	85 e3       	ldi	r24, 0x35	; 53
    26ee:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    26f0:	61 e0       	ldi	r22, 0x01	; 1
    26f2:	8b ec       	ldi	r24, 0xCB	; 203
    26f4:	91 e0       	ldi	r25, 0x01	; 1
    26f6:	50 d0       	rcall	.+160    	; 0x2798 <ccp_write_io>
	NVM.CMD = old_cmd;
    26f8:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	08 95       	ret

00002702 <nvm_eeprom_erase_and_write_buffer>:
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
    2702:	cf 92       	push	r12
    2704:	df 92       	push	r13
    2706:	ef 92       	push	r14
    2708:	ff 92       	push	r15
    270a:	0f 93       	push	r16
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	ec 01       	movw	r28, r24
    2714:	7b 01       	movw	r14, r22
    2716:	8a 01       	movw	r16, r20
	while (len) {
    2718:	41 15       	cp	r20, r1
    271a:	51 05       	cpc	r21, r1
    271c:	51 f1       	breq	.+84     	; 0x2772 <nvm_eeprom_erase_and_write_buffer+0x70>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
    271e:	ce 01       	movw	r24, r28
    2720:	8f 71       	andi	r24, 0x1F	; 31
    2722:	99 27       	eor	r25, r25
    2724:	89 2b       	or	r24, r25
    2726:	b1 f4       	brne	.+44     	; 0x2754 <nvm_eeprom_erase_and_write_buffer+0x52>
    2728:	00 32       	cpi	r16, 0x20	; 32
    272a:	11 05       	cpc	r17, r1
    272c:	98 f0       	brcs	.+38     	; 0x2754 <nvm_eeprom_erase_and_write_buffer+0x52>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
    272e:	c7 01       	movw	r24, r14
    2730:	ac df       	rcall	.-168    	; 0x268a <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
    2732:	ce 01       	movw	r24, r28
    2734:	96 95       	lsr	r25
    2736:	87 95       	ror	r24
    2738:	92 95       	swap	r25
    273a:	82 95       	swap	r24
    273c:	8f 70       	andi	r24, 0x0F	; 15
    273e:	89 27       	eor	r24, r25
    2740:	9f 70       	andi	r25, 0x0F	; 15
    2742:	89 27       	eor	r24, r25
    2744:	c1 df       	rcall	.-126    	; 0x26c8 <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
    2746:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
    2748:	80 e2       	ldi	r24, 0x20	; 32
    274a:	e8 0e       	add	r14, r24
    274c:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
    274e:	00 52       	subi	r16, 0x20	; 32
    2750:	11 09       	sbc	r17, r1
    2752:	0c c0       	rjmp	.+24     	; 0x276c <nvm_eeprom_erase_and_write_buffer+0x6a>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    2754:	6e 01       	movw	r12, r28
    2756:	ef ef       	ldi	r30, 0xFF	; 255
    2758:	ce 1a       	sub	r12, r30
    275a:	de 0a       	sbc	r13, r30
    275c:	f7 01       	movw	r30, r14
    275e:	61 91       	ld	r22, Z+
    2760:	7f 01       	movw	r14, r30
    2762:	ce 01       	movw	r24, r28
    2764:	6c df       	rcall	.-296    	; 0x263e <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
    2766:	01 50       	subi	r16, 0x01	; 1
    2768:	11 09       	sbc	r17, r1
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    276a:	e6 01       	movw	r28, r12
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
	while (len) {
    276c:	01 15       	cp	r16, r1
    276e:	11 05       	cpc	r17, r1
    2770:	b1 f6       	brne	.-84     	; 0x271e <nvm_eeprom_erase_and_write_buffer+0x1c>
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
    2772:	df 91       	pop	r29
    2774:	cf 91       	pop	r28
    2776:	1f 91       	pop	r17
    2778:	0f 91       	pop	r16
    277a:	ff 90       	pop	r15
    277c:	ef 90       	pop	r14
    277e:	df 90       	pop	r13
    2780:	cf 90       	pop	r12
    2782:	08 95       	ret

00002784 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2784:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    2788:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    278a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    278c:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    2790:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2792:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2796:	08 95       	ret

00002798 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2798:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    279a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    279c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    279e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    27a0:	60 83       	st	Z, r22
	ret                             // Return to caller
    27a2:	08 95       	ret

000027a4 <ble_init>:

	delay_ms(200);
	ble_conf_readables();
	delay_ms(200);
	usart_write_string("F\n"); //ToDo Add parameters of initial configuration
}
    27a4:	cf 93       	push	r28
    27a6:	df 93       	push	r29
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	27 97       	sbiw	r28, 0x07	; 7
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	80 91 b6 20 	lds	r24, 0x20B6
    27b6:	8d 83       	std	Y+5, r24	; 0x05
    27b8:	80 91 b7 20 	lds	r24, 0x20B7
    27bc:	8e 83       	std	Y+6, r24	; 0x06
    27be:	80 91 b8 20 	lds	r24, 0x20B8
    27c2:	8f 83       	std	Y+7, r24	; 0x07
    27c4:	80 91 b2 20 	lds	r24, 0x20B2
    27c8:	90 91 b3 20 	lds	r25, 0x20B3
    27cc:	a0 91 b4 20 	lds	r26, 0x20B4
    27d0:	b0 91 b5 20 	lds	r27, 0x20B5
    27d4:	89 83       	std	Y+1, r24	; 0x01
    27d6:	9a 83       	std	Y+2, r25	; 0x02
    27d8:	ab 83       	std	Y+3, r26	; 0x03
    27da:	bc 83       	std	Y+4, r27	; 0x04
    27dc:	60 e1       	ldi	r22, 0x10	; 16
    27de:	84 e0       	ldi	r24, 0x04	; 4
    27e0:	cc de       	rcall	.-616    	; 0x257a <sysclk_enable_module>
    27e2:	be 01       	movw	r22, r28
    27e4:	6f 5f       	subi	r22, 0xFF	; 255
    27e6:	7f 4f       	sbci	r23, 0xFF	; 255
    27e8:	80 ea       	ldi	r24, 0xA0	; 160
    27ea:	99 e0       	ldi	r25, 0x09	; 9
    27ec:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <usart_init_rs232>
    27f0:	27 96       	adiw	r28, 0x07	; 7
    27f2:	cd bf       	out	0x3d, r28	; 61
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	08 95       	ret

000027fc <usart_write_string>:
    27fc:	cf 93       	push	r28
    27fe:	df 93       	push	r29
    2800:	fc 01       	movw	r30, r24
    2802:	60 81       	ld	r22, Z
    2804:	66 23       	and	r22, r22
    2806:	49 f0       	breq	.+18     	; 0x281a <usart_write_string+0x1e>
    2808:	ec 01       	movw	r28, r24
    280a:	21 96       	adiw	r28, 0x01	; 1
    280c:	80 ea       	ldi	r24, 0xA0	; 160
    280e:	99 e0       	ldi	r25, 0x09	; 9
    2810:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <usart_putchar>
    2814:	69 91       	ld	r22, Y+
    2816:	61 11       	cpse	r22, r1
    2818:	f9 cf       	rjmp	.-14     	; 0x280c <usart_write_string+0x10>
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	08 95       	ret

00002820 <ble_conf_readables>:
    2820:	8e ef       	ldi	r24, 0xFE	; 254
    2822:	90 e2       	ldi	r25, 0x20	; 32
    2824:	eb cf       	rjmp	.-42     	; 0x27fc <usart_write_string>
    2826:	08 95       	ret

00002828 <ble_information>:
    2828:	8f 92       	push	r8
    282a:	9f 92       	push	r9
    282c:	af 92       	push	r10
    282e:	bf 92       	push	r11
    2830:	cf 92       	push	r12
    2832:	df 92       	push	r13
    2834:	ef 92       	push	r14
    2836:	ff 92       	push	r15
    2838:	0f 93       	push	r16
    283a:	1f 93       	push	r17
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	28 97       	sbiw	r28, 0x08	; 8
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	8c 01       	movw	r16, r24
    284c:	6b 01       	movw	r12, r22
    284e:	fc 01       	movw	r30, r24
    2850:	01 90       	ld	r0, Z+
    2852:	00 20       	and	r0, r0
    2854:	e9 f7       	brne	.-6      	; 0x2850 <ble_information+0x28>
    2856:	31 97       	sbiw	r30, 0x01	; 1
    2858:	7f 01       	movw	r14, r30
    285a:	e8 1a       	sub	r14, r24
    285c:	f9 0a       	sbc	r15, r25
    285e:	19 82       	std	Y+1, r1	; 0x01
    2860:	1a 82       	std	Y+2, r1	; 0x02
    2862:	1b 82       	std	Y+3, r1	; 0x03
    2864:	1c 82       	std	Y+4, r1	; 0x04
    2866:	1d 82       	std	Y+5, r1	; 0x05
    2868:	1e 82       	std	Y+6, r1	; 0x06
    286a:	1f 82       	std	Y+7, r1	; 0x07
    286c:	18 86       	std	Y+8, r1	; 0x08
    286e:	c7 01       	movw	r24, r14
    2870:	99 27       	eor	r25, r25
    2872:	9f 93       	push	r25
    2874:	8f 93       	push	r24
    2876:	22 e1       	ldi	r18, 0x12	; 18
    2878:	37 e2       	ldi	r19, 0x27	; 39
    287a:	3f 93       	push	r19
    287c:	2f 93       	push	r18
    287e:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <printf>
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	80 e5       	ldi	r24, 0x50	; 80
    288c:	e8 12       	cpse	r14, r24
    288e:	5d c0       	rjmp	.+186    	; 0x294a <ble_information+0x122>
    2890:	b8 01       	movw	r22, r16
    2892:	6f 5f       	subi	r22, 0xFF	; 255
    2894:	7f 4f       	sbci	r23, 0xFF	; 255
    2896:	4c e0       	ldi	r20, 0x0C	; 12
    2898:	50 e0       	ldi	r21, 0x00	; 0
    289a:	c6 01       	movw	r24, r12
    289c:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <strncpy>
    28a0:	b8 01       	movw	r22, r16
    28a2:	63 5d       	subi	r22, 0xD3	; 211
    28a4:	7f 4f       	sbci	r23, 0xFF	; 255
    28a6:	44 e1       	ldi	r20, 0x14	; 20
    28a8:	50 e0       	ldi	r21, 0x00	; 0
    28aa:	c6 01       	movw	r24, r12
    28ac:	0d 96       	adiw	r24, 0x0d	; 13
    28ae:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <strncpy>
    28b2:	b8 01       	movw	r22, r16
    28b4:	6f 5b       	subi	r22, 0xBF	; 191
    28b6:	7f 4f       	sbci	r23, 0xFF	; 255
    28b8:	4c e0       	ldi	r20, 0x0C	; 12
    28ba:	50 e0       	ldi	r21, 0x00	; 0
    28bc:	c6 01       	movw	r24, r12
    28be:	82 96       	adiw	r24, 0x22	; 34
    28c0:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <strncpy>
    28c4:	b8 01       	movw	r22, r16
    28c6:	60 5f       	subi	r22, 0xF0	; 240
    28c8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ca:	42 e0       	ldi	r20, 0x02	; 2
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	fe 01       	movw	r30, r28
    28d0:	31 96       	adiw	r30, 0x01	; 1
    28d2:	5f 01       	movw	r10, r30
    28d4:	cf 01       	movw	r24, r30
    28d6:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <strncpy>
    28da:	b8 01       	movw	r22, r16
    28dc:	65 5d       	subi	r22, 0xD5	; 213
    28de:	7f 4f       	sbci	r23, 0xFF	; 255
    28e0:	4e 01       	movw	r8, r28
    28e2:	f4 e0       	ldi	r31, 0x04	; 4
    28e4:	8f 0e       	add	r8, r31
    28e6:	91 1c       	adc	r9, r1
    28e8:	42 e0       	ldi	r20, 0x02	; 2
    28ea:	50 e0       	ldi	r21, 0x00	; 0
    28ec:	c4 01       	movw	r24, r8
    28ee:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <strncpy>
    28f2:	f6 01       	movw	r30, r12
    28f4:	14 86       	std	Z+12, r1	; 0x0c
    28f6:	11 a2       	std	Z+33, r1	; 0x21
    28f8:	16 a6       	std	Z+46, r1	; 0x2e
    28fa:	7e 01       	movw	r14, r28
    28fc:	f7 e0       	ldi	r31, 0x07	; 7
    28fe:	ef 0e       	add	r14, r31
    2900:	f1 1c       	adc	r15, r1
    2902:	ff 92       	push	r15
    2904:	ef 92       	push	r14
    2906:	06 e1       	ldi	r16, 0x16	; 22
    2908:	1a e2       	ldi	r17, 0x2A	; 42
    290a:	1f 93       	push	r17
    290c:	0f 93       	push	r16
    290e:	bf 92       	push	r11
    2910:	af 92       	push	r10
    2912:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <sscanf>
    2916:	8f 81       	ldd	r24, Y+7	; 0x07
    2918:	99 27       	eor	r25, r25
    291a:	87 fd       	sbrc	r24, 7
    291c:	90 95       	com	r25
    291e:	f6 01       	movw	r30, r12
    2920:	87 a7       	std	Z+47, r24	; 0x2f
    2922:	90 ab       	std	Z+48, r25	; 0x30
    2924:	ff 92       	push	r15
    2926:	ef 92       	push	r14
    2928:	1f 93       	push	r17
    292a:	0f 93       	push	r16
    292c:	9f 92       	push	r9
    292e:	8f 92       	push	r8
    2930:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <sscanf>
    2934:	8f 81       	ldd	r24, Y+7	; 0x07
    2936:	99 27       	eor	r25, r25
    2938:	87 fd       	sbrc	r24, 7
    293a:	90 95       	com	r25
    293c:	f6 01       	movw	r30, r12
    293e:	81 ab       	std	Z+49, r24	; 0x31
    2940:	92 ab       	std	Z+50, r25	; 0x32
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	01 c0       	rjmp	.+2      	; 0x294c <ble_information+0x124>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	28 96       	adiw	r28, 0x08	; 8
    294e:	cd bf       	out	0x3d, r28	; 61
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	df 91       	pop	r29
    2954:	cf 91       	pop	r28
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	df 90       	pop	r13
    2960:	cf 90       	pop	r12
    2962:	bf 90       	pop	r11
    2964:	af 90       	pop	r10
    2966:	9f 90       	pop	r9
    2968:	8f 90       	pop	r8
    296a:	08 95       	ret

0000296c <ble_init_read_beacons_isr>:

void ble_init_read_beacons_isr(void)
{
	char buffer[100];
	usart_write_string(BLE_CMD_MODE);
    296c:	87 e0       	ldi	r24, 0x07	; 7
    296e:	91 e2       	ldi	r25, 0x21	; 33
    2970:	45 df       	rcall	.-374    	; 0x27fc <usart_write_string>
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	94 ed       	ldi	r25, 0xD4	; 212
    2976:	a0 e3       	ldi	r26, 0x30	; 48
    2978:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	a1 09       	sbc	r26, r1
    297e:	b1 09       	sbc	r27, r1
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	a1 05       	cpc	r26, r1
    2984:	b1 05       	cpc	r27, r1
    2986:	c9 f7       	brne	.-14     	; 0x297a <ble_init_read_beacons_isr+0xe>

	delay_ms(400);
	ble_conf_readables();
    2988:	4b df       	rcall	.-362    	; 0x2820 <ble_conf_readables>
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	9a e6       	ldi	r25, 0x6A	; 106
    298e:	a8 e1       	ldi	r26, 0x18	; 24
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	a1 09       	sbc	r26, r1
    2996:	b1 09       	sbc	r27, r1
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	a1 05       	cpc	r26, r1
    299c:	b1 05       	cpc	r27, r1
    299e:	c9 f7       	brne	.-14     	; 0x2992 <ble_init_read_beacons_isr+0x26>
	delay_ms(200);
	usart_write_string("F\n"); //ToDo Add parameters of initial configuration
    29a0:	8b e0       	ldi	r24, 0x0B	; 11
    29a2:	91 e2       	ldi	r25, 0x21	; 33
    29a4:	2b cf       	rjmp	.-426    	; 0x27fc <usart_write_string>
    29a6:	08 95       	ret

000029a8 <dwt_writetodevice>:

    temp = dwt_read32bitoffsetreg(DIG_DIAG_ID, EVC_HPW_OFFSET); // Read half period warning events
    counters->HPW = temp & 0xFFF;
    counters->TXW = (temp >> 16) & 0xFFF;                       // Power-up warning events

}
    29a8:	0f 93       	push	r16
    29aa:	1f 93       	push	r17
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	00 d0       	rcall	.+0      	; 0x29b2 <dwt_writetodevice+0xa>
    29b2:	1f 92       	push	r1
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	61 15       	cp	r22, r1
    29ba:	71 05       	cpc	r23, r1
    29bc:	29 f4       	brne	.+10     	; 0x29c8 <dwt_writetodevice+0x20>
    29be:	80 68       	ori	r24, 0x80	; 128
    29c0:	89 83       	std	Y+1, r24	; 0x01
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	14 c0       	rjmp	.+40     	; 0x29f0 <dwt_writetodevice+0x48>
    29c8:	80 6c       	ori	r24, 0xC0	; 192
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	60 38       	cpi	r22, 0x80	; 128
    29ce:	71 05       	cpc	r23, r1
    29d0:	20 f4       	brcc	.+8      	; 0x29da <dwt_writetodevice+0x32>
    29d2:	6a 83       	std	Y+2, r22	; 0x02
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0b c0       	rjmp	.+22     	; 0x29f0 <dwt_writetodevice+0x48>
    29da:	86 2f       	mov	r24, r22
    29dc:	80 68       	ori	r24, 0x80	; 128
    29de:	8a 83       	std	Y+2, r24	; 0x02
    29e0:	66 0f       	add	r22, r22
    29e2:	67 2f       	mov	r22, r23
    29e4:	66 1f       	adc	r22, r22
    29e6:	77 0b       	sbc	r23, r23
    29e8:	71 95       	neg	r23
    29ea:	6b 83       	std	Y+3, r22	; 0x03
    29ec:	83 e0       	ldi	r24, 0x03	; 3
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	be 01       	movw	r22, r28
    29f2:	6f 5f       	subi	r22, 0xFF	; 255
    29f4:	7f 4f       	sbci	r23, 0xFF	; 255
    29f6:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <writetospi>
    29fa:	23 96       	adiw	r28, 0x03	; 3
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	df 91       	pop	r29
    2a02:	cf 91       	pop	r28
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	08 95       	ret

00002a0a <dwt_writetxdata>:
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
    2a0e:	fa 01       	movw	r30, r20
    2a10:	9a 01       	movw	r18, r20
    2a12:	28 0f       	add	r18, r24
    2a14:	39 1f       	adc	r19, r25
    2a16:	21 30       	cpi	r18, 0x01	; 1
    2a18:	34 40       	sbci	r19, 0x04	; 4
    2a1a:	68 f4       	brcc	.+26     	; 0x2a36 <dwt_writetxdata+0x2c>
    2a1c:	9c 01       	movw	r18, r24
    2a1e:	22 50       	subi	r18, 0x02	; 2
    2a20:	31 09       	sbc	r19, r1
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	8b 01       	movw	r16, r22
    2a28:	bf 01       	movw	r22, r30
    2a2a:	89 e0       	ldi	r24, 0x09	; 9
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	bc df       	rcall	.-136    	; 0x29a8 <dwt_writetodevice>
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <dwt_writetxdata+0x30>
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	9f ef       	ldi	r25, 0xFF	; 255
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	08 95       	ret

00002a40 <dwt_readfromdevice>:
    2a40:	0f 93       	push	r16
    2a42:	1f 93       	push	r17
    2a44:	cf 93       	push	r28
    2a46:	df 93       	push	r29
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <dwt_readfromdevice+0xa>
    2a4a:	1f 92       	push	r1
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	61 15       	cp	r22, r1
    2a52:	71 05       	cpc	r23, r1
    2a54:	21 f4       	brne	.+8      	; 0x2a5e <dwt_readfromdevice+0x1e>
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	14 c0       	rjmp	.+40     	; 0x2a86 <dwt_readfromdevice+0x46>
    2a5e:	80 64       	ori	r24, 0x40	; 64
    2a60:	89 83       	std	Y+1, r24	; 0x01
    2a62:	60 38       	cpi	r22, 0x80	; 128
    2a64:	71 05       	cpc	r23, r1
    2a66:	20 f4       	brcc	.+8      	; 0x2a70 <dwt_readfromdevice+0x30>
    2a68:	6a 83       	std	Y+2, r22	; 0x02
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	0b c0       	rjmp	.+22     	; 0x2a86 <dwt_readfromdevice+0x46>
    2a70:	86 2f       	mov	r24, r22
    2a72:	80 68       	ori	r24, 0x80	; 128
    2a74:	8a 83       	std	Y+2, r24	; 0x02
    2a76:	66 0f       	add	r22, r22
    2a78:	67 2f       	mov	r22, r23
    2a7a:	66 1f       	adc	r22, r22
    2a7c:	77 0b       	sbc	r23, r23
    2a7e:	71 95       	neg	r23
    2a80:	6b 83       	std	Y+3, r22	; 0x03
    2a82:	83 e0       	ldi	r24, 0x03	; 3
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	be 01       	movw	r22, r28
    2a88:	6f 5f       	subi	r22, 0xFF	; 255
    2a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a8c:	0e 94 25 22 	call	0x444a	; 0x444a <readfromspi>
    2a90:	23 96       	adiw	r28, 0x03	; 3
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	1f 91       	pop	r17
    2a9c:	0f 91       	pop	r16
    2a9e:	08 95       	ret

00002aa0 <dwt_readrxdata>:
    2aa0:	0f 93       	push	r16
    2aa2:	1f 93       	push	r17
    2aa4:	9b 01       	movw	r18, r22
    2aa6:	ba 01       	movw	r22, r20
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	50 e0       	ldi	r21, 0x00	; 0
    2aac:	8c 01       	movw	r16, r24
    2aae:	81 e1       	ldi	r24, 0x11	; 17
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	c6 df       	rcall	.-116    	; 0x2a40 <dwt_readfromdevice>
    2ab4:	1f 91       	pop	r17
    2ab6:	0f 91       	pop	r16
    2ab8:	08 95       	ret

00002aba <dwt_readtxtimestamp>:
    2aba:	0f 93       	push	r16
    2abc:	1f 93       	push	r17
    2abe:	8c 01       	movw	r16, r24
    2ac0:	25 e0       	ldi	r18, 0x05	; 5
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	70 e0       	ldi	r23, 0x00	; 0
    2acc:	87 e1       	ldi	r24, 0x17	; 23
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	b7 df       	rcall	.-146    	; 0x2a40 <dwt_readfromdevice>
    2ad2:	1f 91       	pop	r17
    2ad4:	0f 91       	pop	r16
    2ad6:	08 95       	ret

00002ad8 <dwt_readrxtimestamp>:
    2ad8:	0f 93       	push	r16
    2ada:	1f 93       	push	r17
    2adc:	8c 01       	movw	r16, r24
    2ade:	25 e0       	ldi	r18, 0x05	; 5
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	60 e0       	ldi	r22, 0x00	; 0
    2ae8:	70 e0       	ldi	r23, 0x00	; 0
    2aea:	85 e1       	ldi	r24, 0x15	; 21
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	a8 df       	rcall	.-176    	; 0x2a40 <dwt_readfromdevice>
    2af0:	1f 91       	pop	r17
    2af2:	0f 91       	pop	r16
    2af4:	08 95       	ret

00002af6 <dwt_read32bitoffsetreg>:
    2af6:	ef 92       	push	r14
    2af8:	ff 92       	push	r15
    2afa:	0f 93       	push	r16
    2afc:	1f 93       	push	r17
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	00 d0       	rcall	.+0      	; 0x2b04 <dwt_read32bitoffsetreg+0xe>
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <dwt_read32bitoffsetreg+0x10>
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	9e 01       	movw	r18, r28
    2b0c:	2f 5f       	subi	r18, 0xFF	; 255
    2b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b10:	89 01       	movw	r16, r18
    2b12:	24 e0       	ldi	r18, 0x04	; 4
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e0       	ldi	r20, 0x00	; 0
    2b18:	50 e0       	ldi	r21, 0x00	; 0
    2b1a:	92 df       	rcall	.-220    	; 0x2a40 <dwt_readfromdevice>
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	35 96       	adiw	r30, 0x05	; 5
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	70 e0       	ldi	r23, 0x00	; 0
    2b24:	cb 01       	movw	r24, r22
    2b26:	b8 2f       	mov	r27, r24
    2b28:	a7 2f       	mov	r26, r23
    2b2a:	96 2f       	mov	r25, r22
    2b2c:	88 27       	eor	r24, r24
    2b2e:	22 91       	ld	r18, -Z
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	62 0f       	add	r22, r18
    2b36:	71 1d       	adc	r23, r1
    2b38:	81 1d       	adc	r24, r1
    2b3a:	91 1d       	adc	r25, r1
    2b3c:	e0 17       	cp	r30, r16
    2b3e:	f1 07       	cpc	r31, r17
    2b40:	91 f7       	brne	.-28     	; 0x2b26 <dwt_read32bitoffsetreg+0x30>
    2b42:	24 96       	adiw	r28, 0x04	; 4
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	de bf       	out	0x3e, r29	; 62
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	1f 91       	pop	r17
    2b4e:	0f 91       	pop	r16
    2b50:	ff 90       	pop	r15
    2b52:	ef 90       	pop	r14
    2b54:	08 95       	ret

00002b56 <dwt_readdevid>:
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	70 e0       	ldi	r23, 0x00	; 0
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	cb cf       	rjmp	.-106    	; 0x2af6 <dwt_read32bitoffsetreg>
    2b60:	08 95       	ret

00002b62 <dwt_read16bitoffsetreg>:
    2b62:	0f 93       	push	r16
    2b64:	1f 93       	push	r17
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	00 d0       	rcall	.+0      	; 0x2b6c <dwt_read16bitoffsetreg+0xa>
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	8e 01       	movw	r16, r28
    2b72:	0f 5f       	subi	r16, 0xFF	; 255
    2b74:	1f 4f       	sbci	r17, 0xFF	; 255
    2b76:	22 e0       	ldi	r18, 0x02	; 2
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e0       	ldi	r20, 0x00	; 0
    2b7c:	50 e0       	ldi	r21, 0x00	; 0
    2b7e:	60 df       	rcall	.-320    	; 0x2a40 <dwt_readfromdevice>
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	98 2f       	mov	r25, r24
    2b86:	88 27       	eor	r24, r24
    2b88:	29 81       	ldd	r18, Y+1	; 0x01
    2b8a:	82 0f       	add	r24, r18
    2b8c:	91 1d       	adc	r25, r1
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	1f 91       	pop	r17
    2b98:	0f 91       	pop	r16
    2b9a:	08 95       	ret

00002b9c <dwt_read8bitoffsetreg>:
    2b9c:	0f 93       	push	r16
    2b9e:	1f 93       	push	r17
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
    2ba4:	1f 92       	push	r1
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	8e 01       	movw	r16, r28
    2bac:	0f 5f       	subi	r16, 0xFF	; 255
    2bae:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb0:	21 e0       	ldi	r18, 0x01	; 1
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	50 e0       	ldi	r21, 0x00	; 0
    2bb8:	43 df       	rcall	.-378    	; 0x2a40 <dwt_readfromdevice>
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	0f 90       	pop	r0
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	1f 91       	pop	r17
    2bc4:	0f 91       	pop	r16
    2bc6:	08 95       	ret

00002bc8 <dwt_write8bitoffsetreg>:
    2bc8:	0f 93       	push	r16
    2bca:	1f 93       	push	r17
    2bcc:	cf 93       	push	r28
    2bce:	df 93       	push	r29
    2bd0:	1f 92       	push	r1
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	49 83       	std	Y+1, r20	; 0x01
    2bd8:	8e 01       	movw	r16, r28
    2bda:	0f 5f       	subi	r16, 0xFF	; 255
    2bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bde:	21 e0       	ldi	r18, 0x01	; 1
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e0       	ldi	r20, 0x00	; 0
    2be4:	50 e0       	ldi	r21, 0x00	; 0
    2be6:	e0 de       	rcall	.-576    	; 0x29a8 <dwt_writetodevice>
    2be8:	0f 90       	pop	r0
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	1f 91       	pop	r17
    2bf0:	0f 91       	pop	r16
    2bf2:	08 95       	ret

00002bf4 <dwt_write16bitoffsetreg>:
    2bf4:	0f 93       	push	r16
    2bf6:	1f 93       	push	r17
    2bf8:	cf 93       	push	r28
    2bfa:	df 93       	push	r29
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <dwt_write16bitoffsetreg+0xa>
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	49 83       	std	Y+1, r20	; 0x01
    2c04:	5a 83       	std	Y+2, r21	; 0x02
    2c06:	8e 01       	movw	r16, r28
    2c08:	0f 5f       	subi	r16, 0xFF	; 255
    2c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0c:	22 e0       	ldi	r18, 0x02	; 2
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e0       	ldi	r20, 0x00	; 0
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	c9 de       	rcall	.-622    	; 0x29a8 <dwt_writetodevice>
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	08 95       	ret

00002c24 <dwt_setrxantennadelay>:
    2c24:	ac 01       	movw	r20, r24
    2c26:	64 e0       	ldi	r22, 0x04	; 4
    2c28:	78 e1       	ldi	r23, 0x18	; 24
    2c2a:	8e e2       	ldi	r24, 0x2E	; 46
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	e2 cf       	rjmp	.-60     	; 0x2bf4 <dwt_write16bitoffsetreg>
    2c30:	08 95       	ret

00002c32 <dwt_settxantennadelay>:
    2c32:	ac 01       	movw	r20, r24
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	88 e1       	ldi	r24, 0x18	; 24
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	db cf       	rjmp	.-74     	; 0x2bf4 <dwt_write16bitoffsetreg>
    2c3e:	08 95       	ret

00002c40 <dwt_write32bitoffsetreg>:
    2c40:	0f 93       	push	r16
    2c42:	1f 93       	push	r17
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29
    2c48:	00 d0       	rcall	.+0      	; 0x2c4a <dwt_write32bitoffsetreg+0xa>
    2c4a:	00 d0       	rcall	.+0      	; 0x2c4c <dwt_write32bitoffsetreg+0xc>
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	29 83       	std	Y+1, r18	; 0x01
    2c52:	3a 83       	std	Y+2, r19	; 0x02
    2c54:	4b 83       	std	Y+3, r20	; 0x03
    2c56:	5c 83       	std	Y+4, r21	; 0x04
    2c58:	8e 01       	movw	r16, r28
    2c5a:	0f 5f       	subi	r16, 0xFF	; 255
    2c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5e:	24 e0       	ldi	r18, 0x04	; 4
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	50 e0       	ldi	r21, 0x00	; 0
    2c66:	a0 de       	rcall	.-704    	; 0x29a8 <dwt_writetodevice>
    2c68:	24 96       	adiw	r28, 0x04	; 4
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	1f 91       	pop	r17
    2c74:	0f 91       	pop	r16
    2c76:	08 95       	ret

00002c78 <dwt_writetxfctrl>:
    2c78:	cf 92       	push	r12
    2c7a:	df 92       	push	r13
    2c7c:	ef 92       	push	r14
    2c7e:	ff 92       	push	r15
    2c80:	0f 93       	push	r16
    2c82:	1f 93       	push	r17
    2c84:	8c 01       	movw	r16, r24
    2c86:	ca 01       	movw	r24, r20
    2c88:	aa 27       	eor	r26, r26
    2c8a:	97 fd       	sbrc	r25, 7
    2c8c:	a0 95       	com	r26
    2c8e:	ba 2f       	mov	r27, r26
    2c90:	07 2e       	mov	r0, r23
    2c92:	7f e0       	ldi	r23, 0x0F	; 15
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	aa 1f       	adc	r26, r26
    2c9a:	bb 1f       	adc	r27, r27
    2c9c:	7a 95       	dec	r23
    2c9e:	d1 f7       	brne	.-12     	; 0x2c94 <dwt_writetxfctrl+0x1c>
    2ca0:	70 2d       	mov	r23, r0
    2ca2:	e0 91 b9 20 	lds	r30, 0x20B9
    2ca6:	f0 91 ba 20 	lds	r31, 0x20BA
    2caa:	c2 84       	ldd	r12, Z+10	; 0x0a
    2cac:	d3 84       	ldd	r13, Z+11	; 0x0b
    2cae:	e4 84       	ldd	r14, Z+12	; 0x0c
    2cb0:	f5 84       	ldd	r15, Z+13	; 0x0d
    2cb2:	8c 29       	or	r24, r12
    2cb4:	9d 29       	or	r25, r13
    2cb6:	ae 29       	or	r26, r14
    2cb8:	bf 29       	or	r27, r15
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	80 2b       	or	r24, r16
    2cc0:	91 2b       	or	r25, r17
    2cc2:	a2 2b       	or	r26, r18
    2cc4:	b3 2b       	or	r27, r19
    2cc6:	ab 01       	movw	r20, r22
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	03 2e       	mov	r0, r19
    2cce:	36 e1       	ldi	r19, 0x16	; 22
    2cd0:	44 0f       	add	r20, r20
    2cd2:	55 1f       	adc	r21, r21
    2cd4:	66 1f       	adc	r22, r22
    2cd6:	77 1f       	adc	r23, r23
    2cd8:	3a 95       	dec	r19
    2cda:	d1 f7       	brne	.-12     	; 0x2cd0 <dwt_writetxfctrl+0x58>
    2cdc:	30 2d       	mov	r19, r0
    2cde:	9a 01       	movw	r18, r20
    2ce0:	ab 01       	movw	r20, r22
    2ce2:	28 2b       	or	r18, r24
    2ce4:	39 2b       	or	r19, r25
    2ce6:	4a 2b       	or	r20, r26
    2ce8:	5b 2b       	or	r21, r27
    2cea:	60 e0       	ldi	r22, 0x00	; 0
    2cec:	70 e0       	ldi	r23, 0x00	; 0
    2cee:	88 e0       	ldi	r24, 0x08	; 8
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	a6 df       	rcall	.-180    	; 0x2c40 <dwt_write32bitoffsetreg>
    2cf4:	1f 91       	pop	r17
    2cf6:	0f 91       	pop	r16
    2cf8:	ff 90       	pop	r15
    2cfa:	ef 90       	pop	r14
    2cfc:	df 90       	pop	r13
    2cfe:	cf 90       	pop	r12
    2d00:	08 95       	ret

00002d02 <_dwt_otpread>:
    2d02:	ab 01       	movw	r20, r22
    2d04:	64 e0       	ldi	r22, 0x04	; 4
    2d06:	70 e0       	ldi	r23, 0x00	; 0
    2d08:	8d e2       	ldi	r24, 0x2D	; 45
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	73 df       	rcall	.-282    	; 0x2bf4 <dwt_write16bitoffsetreg>
    2d0e:	43 e0       	ldi	r20, 0x03	; 3
    2d10:	66 e0       	ldi	r22, 0x06	; 6
    2d12:	70 e0       	ldi	r23, 0x00	; 0
    2d14:	8d e2       	ldi	r24, 0x2D	; 45
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	57 df       	rcall	.-338    	; 0x2bc8 <dwt_write8bitoffsetreg>
    2d1a:	40 e0       	ldi	r20, 0x00	; 0
    2d1c:	66 e0       	ldi	r22, 0x06	; 6
    2d1e:	70 e0       	ldi	r23, 0x00	; 0
    2d20:	8d e2       	ldi	r24, 0x2D	; 45
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	51 df       	rcall	.-350    	; 0x2bc8 <dwt_write8bitoffsetreg>
    2d26:	6a e0       	ldi	r22, 0x0A	; 10
    2d28:	70 e0       	ldi	r23, 0x00	; 0
    2d2a:	8d e2       	ldi	r24, 0x2D	; 45
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	e3 ce       	rjmp	.-570    	; 0x2af6 <dwt_read32bitoffsetreg>
    2d30:	08 95       	ret

00002d32 <_dwt_aonarrayupload>:
    2d32:	40 e0       	ldi	r20, 0x00	; 0
    2d34:	62 e0       	ldi	r22, 0x02	; 2
    2d36:	70 e0       	ldi	r23, 0x00	; 0
    2d38:	8c e2       	ldi	r24, 0x2C	; 44
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	45 df       	rcall	.-374    	; 0x2bc8 <dwt_write8bitoffsetreg>
    2d3e:	42 e0       	ldi	r20, 0x02	; 2
    2d40:	62 e0       	ldi	r22, 0x02	; 2
    2d42:	70 e0       	ldi	r23, 0x00	; 0
    2d44:	8c e2       	ldi	r24, 0x2C	; 44
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	3f cf       	rjmp	.-386    	; 0x2bc8 <dwt_write8bitoffsetreg>
    2d4a:	08 95       	ret

00002d4c <_dwt_configlde>:
    2d4c:	cf 93       	push	r28
    2d4e:	df 93       	push	r29
    2d50:	ec 01       	movw	r28, r24
    2d52:	4d e6       	ldi	r20, 0x6D	; 109
    2d54:	66 e0       	ldi	r22, 0x06	; 6
    2d56:	78 e0       	ldi	r23, 0x08	; 8
    2d58:	8e e2       	ldi	r24, 0x2E	; 46
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	35 df       	rcall	.-406    	; 0x2bc8 <dwt_write8bitoffsetreg>
    2d5e:	cd 2b       	or	r28, r29
    2d60:	41 f0       	breq	.+16     	; 0x2d72 <_dwt_configlde+0x26>
    2d62:	47 e0       	ldi	r20, 0x07	; 7
    2d64:	56 e0       	ldi	r21, 0x06	; 6
    2d66:	66 e0       	ldi	r22, 0x06	; 6
    2d68:	78 e1       	ldi	r23, 0x18	; 24
    2d6a:	8e e2       	ldi	r24, 0x2E	; 46
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	42 df       	rcall	.-380    	; 0x2bf4 <dwt_write16bitoffsetreg>
    2d70:	07 c0       	rjmp	.+14     	; 0x2d80 <_dwt_configlde+0x34>
    2d72:	47 e0       	ldi	r20, 0x07	; 7
    2d74:	56 e1       	ldi	r21, 0x16	; 22
    2d76:	66 e0       	ldi	r22, 0x06	; 6
    2d78:	78 e1       	ldi	r23, 0x18	; 24
    2d7a:	8e e2       	ldi	r24, 0x2E	; 46
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	3a df       	rcall	.-396    	; 0x2bf4 <dwt_write16bitoffsetreg>
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	08 95       	ret

00002d86 <dwt_configure>:
    2d86:	4f 92       	push	r4
    2d88:	5f 92       	push	r5
    2d8a:	6f 92       	push	r6
    2d8c:	7f 92       	push	r7
    2d8e:	af 92       	push	r10
    2d90:	bf 92       	push	r11
    2d92:	cf 92       	push	r12
    2d94:	df 92       	push	r13
    2d96:	ef 92       	push	r14
    2d98:	ff 92       	push	r15
    2d9a:	0f 93       	push	r16
    2d9c:	1f 93       	push	r17
    2d9e:	cf 93       	push	r28
    2da0:	df 93       	push	r29
    2da2:	ec 01       	movw	r28, r24
    2da4:	48 80       	ld	r4, Y
    2da6:	59 80       	ldd	r5, Y+1	; 0x01
    2da8:	6a 80       	ldd	r6, Y+2	; 0x02
    2daa:	7b 80       	ldd	r7, Y+3	; 0x03
    2dac:	84 2d       	mov	r24, r4
    2dae:	ec 89       	ldd	r30, Y+20	; 0x14
    2db0:	fd 89       	ldd	r31, Y+21	; 0x15
    2db2:	ee 0f       	add	r30, r30
    2db4:	ff 1f       	adc	r31, r31
    2db6:	ed 5d       	subi	r30, 0xDD	; 221
    2db8:	fc 4d       	sbci	r31, 0xDC	; 220
    2dba:	c0 80       	ld	r12, Z
    2dbc:	d1 80       	ldd	r13, Z+1	; 0x01
    2dbe:	0c 81       	ldd	r16, Y+4	; 0x04
    2dc0:	01 50       	subi	r16, 0x01	; 1
    2dc2:	84 30       	cpi	r24, 0x04	; 4
    2dc4:	41 f0       	breq	.+16     	; 0x2dd6 <dwt_configure+0x50>
    2dc6:	21 e0       	ldi	r18, 0x01	; 1
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	87 30       	cpi	r24, 0x07	; 7
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <dwt_configure+0x4a>
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	e2 2e       	mov	r14, r18
    2dd2:	f9 2e       	mov	r15, r25
    2dd4:	03 c0       	rjmp	.+6      	; 0x2ddc <dwt_configure+0x56>
    2dd6:	ee 24       	eor	r14, r14
    2dd8:	e3 94       	inc	r14
    2dda:	f1 2c       	mov	r15, r1
    2ddc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dde:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2de0:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2de2:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2de4:	89 2b       	or	r24, r25
    2de6:	8a 2b       	or	r24, r26
    2de8:	8b 2b       	or	r24, r27
    2dea:	a1 f4       	brne	.+40     	; 0x2e14 <dwt_configure+0x8e>
    2dec:	e0 91 b9 20 	lds	r30, 0x20B9
    2df0:	f0 91 ba 20 	lds	r31, 0x20BA
    2df4:	80 89       	ldd	r24, Z+16	; 0x10
    2df6:	91 89       	ldd	r25, Z+17	; 0x11
    2df8:	a2 89       	ldd	r26, Z+18	; 0x12
    2dfa:	b3 89       	ldd	r27, Z+19	; 0x13
    2dfc:	a0 64       	ori	r26, 0x40	; 64
    2dfe:	80 8b       	std	Z+16, r24	; 0x10
    2e00:	91 8b       	std	Z+17, r25	; 0x11
    2e02:	a2 8b       	std	Z+18, r26	; 0x12
    2e04:	b3 8b       	std	Z+19, r27	; 0x13
    2e06:	d6 94       	lsr	r13
    2e08:	c7 94       	ror	r12
    2e0a:	d6 94       	lsr	r13
    2e0c:	c7 94       	ror	r12
    2e0e:	d6 94       	lsr	r13
    2e10:	c7 94       	ror	r12
    2e12:	0d c0       	rjmp	.+26     	; 0x2e2e <dwt_configure+0xa8>
    2e14:	e0 91 b9 20 	lds	r30, 0x20B9
    2e18:	f0 91 ba 20 	lds	r31, 0x20BA
    2e1c:	80 89       	ldd	r24, Z+16	; 0x10
    2e1e:	91 89       	ldd	r25, Z+17	; 0x11
    2e20:	a2 89       	ldd	r26, Z+18	; 0x12
    2e22:	b3 89       	ldd	r27, Z+19	; 0x13
    2e24:	af 7b       	andi	r26, 0xBF	; 191
    2e26:	80 8b       	std	Z+16, r24	; 0x10
    2e28:	91 8b       	std	Z+17, r25	; 0x11
    2e2a:	a2 8b       	std	Z+18, r26	; 0x12
    2e2c:	b3 8b       	std	Z+19, r27	; 0x13
    2e2e:	e0 91 b9 20 	lds	r30, 0x20B9
    2e32:	f0 91 ba 20 	lds	r31, 0x20BA
    2e36:	88 a1       	ldd	r24, Y+32	; 0x20
    2e38:	80 87       	std	Z+8, r24	; 0x08
    2e3a:	80 89       	ldd	r24, Z+16	; 0x10
    2e3c:	91 89       	ldd	r25, Z+17	; 0x11
    2e3e:	a2 89       	ldd	r26, Z+18	; 0x12
    2e40:	b3 89       	ldd	r27, Z+19	; 0x13
    2e42:	ac 7f       	andi	r26, 0xFC	; 252
    2e44:	80 8b       	std	Z+16, r24	; 0x10
    2e46:	91 8b       	std	Z+17, r25	; 0x11
    2e48:	a2 8b       	std	Z+18, r26	; 0x12
    2e4a:	b3 8b       	std	Z+19, r27	; 0x13
    2e4c:	48 a1       	ldd	r20, Y+32	; 0x20
    2e4e:	59 a1       	ldd	r21, Y+33	; 0x21
    2e50:	6a a1       	ldd	r22, Y+34	; 0x22
    2e52:	7b a1       	ldd	r23, Y+35	; 0x23
    2e54:	ba 01       	movw	r22, r20
    2e56:	55 27       	eor	r21, r21
    2e58:	44 27       	eor	r20, r20
    2e5a:	44 27       	eor	r20, r20
    2e5c:	55 27       	eor	r21, r21
    2e5e:	63 70       	andi	r22, 0x03	; 3
    2e60:	77 27       	eor	r23, r23
    2e62:	9a 01       	movw	r18, r20
    2e64:	ab 01       	movw	r20, r22
    2e66:	28 2b       	or	r18, r24
    2e68:	39 2b       	or	r19, r25
    2e6a:	4a 2b       	or	r20, r26
    2e6c:	5b 2b       	or	r21, r27
    2e6e:	20 8b       	std	Z+16, r18	; 0x10
    2e70:	31 8b       	std	Z+17, r19	; 0x11
    2e72:	42 8b       	std	Z+18, r20	; 0x12
    2e74:	53 8b       	std	Z+19, r21	; 0x13
    2e76:	60 e0       	ldi	r22, 0x00	; 0
    2e78:	70 e0       	ldi	r23, 0x00	; 0
    2e7a:	84 e0       	ldi	r24, 0x04	; 4
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	e0 de       	rcall	.-576    	; 0x2c40 <dwt_write32bitoffsetreg>
    2e80:	a6 01       	movw	r20, r12
    2e82:	64 e0       	ldi	r22, 0x04	; 4
    2e84:	78 e2       	ldi	r23, 0x28	; 40
    2e86:	8e e2       	ldi	r24, 0x2E	; 46
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	b4 de       	rcall	.-664    	; 0x2bf4 <dwt_write16bitoffsetreg>
    2e8c:	10 e0       	ldi	r17, 0x00	; 0
    2e8e:	c8 01       	movw	r24, r16
    2e90:	5d df       	rcall	.-326    	; 0x2d4c <_dwt_configlde>
    2e92:	e4 2d       	mov	r30, r4
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	e8 53       	subi	r30, 0x38	; 56
    2e98:	fc 4d       	sbci	r31, 0xDC	; 220
    2e9a:	a0 80       	ld	r10, Z
    2e9c:	b1 2c       	mov	r11, r1
    2e9e:	65 01       	movw	r12, r10
    2ea0:	cc 0c       	add	r12, r12
    2ea2:	dd 1c       	adc	r13, r13
    2ea4:	cc 0c       	add	r12, r12
    2ea6:	dd 1c       	adc	r13, r13
    2ea8:	f6 01       	movw	r30, r12
    2eaa:	e8 56       	subi	r30, 0x68	; 104
    2eac:	fc 4d       	sbci	r31, 0xDC	; 220
    2eae:	20 81       	ld	r18, Z
    2eb0:	31 81       	ldd	r19, Z+1	; 0x01
    2eb2:	42 81       	ldd	r20, Z+2	; 0x02
    2eb4:	53 81       	ldd	r21, Z+3	; 0x03
    2eb6:	67 e0       	ldi	r22, 0x07	; 7
    2eb8:	70 e0       	ldi	r23, 0x00	; 0
    2eba:	8b e2       	ldi	r24, 0x2B	; 43
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	c0 de       	rcall	.-640    	; 0x2c40 <dwt_write32bitoffsetreg>
    2ec0:	f5 01       	movw	r30, r10
    2ec2:	ee 56       	subi	r30, 0x6E	; 110
    2ec4:	fc 4d       	sbci	r31, 0xDC	; 220
    2ec6:	40 81       	ld	r20, Z
    2ec8:	6b e0       	ldi	r22, 0x0B	; 11
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	8b e2       	ldi	r24, 0x2B	; 43
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	7b de       	rcall	.-778    	; 0x2bc8 <dwt_write8bitoffsetreg>
    2ed2:	f7 01       	movw	r30, r14
    2ed4:	ff 27       	eor	r31, r31
    2ed6:	e0 57       	subi	r30, 0x70	; 112
    2ed8:	fc 4d       	sbci	r31, 0xDC	; 220
    2eda:	40 81       	ld	r20, Z
    2edc:	6b e0       	ldi	r22, 0x0B	; 11
    2ede:	70 e0       	ldi	r23, 0x00	; 0
    2ee0:	88 e2       	ldi	r24, 0x28	; 40
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	71 de       	rcall	.-798    	; 0x2bc8 <dwt_write8bitoffsetreg>
    2ee6:	f6 01       	movw	r30, r12
    2ee8:	e0 55       	subi	r30, 0x50	; 80
    2eea:	fc 4d       	sbci	r31, 0xDC	; 220
    2eec:	20 81       	ld	r18, Z
    2eee:	31 81       	ldd	r19, Z+1	; 0x01
    2ef0:	42 81       	ldd	r20, Z+2	; 0x02
    2ef2:	53 81       	ldd	r21, Z+3	; 0x03
    2ef4:	6c e0       	ldi	r22, 0x0C	; 12
    2ef6:	70 e0       	ldi	r23, 0x00	; 0
    2ef8:	88 e2       	ldi	r24, 0x28	; 40
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	a1 de       	rcall	.-702    	; 0x2c40 <dwt_write32bitoffsetreg>
    2efe:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2f00:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2f02:	ee 0f       	add	r30, r30
    2f04:	ff 1f       	adc	r31, r31
    2f06:	88 8d       	ldd	r24, Y+24	; 0x18
    2f08:	99 8d       	ldd	r25, Y+25	; 0x19
    2f0a:	e8 0f       	add	r30, r24
    2f0c:	f9 1f       	adc	r31, r25
    2f0e:	ee 0f       	add	r30, r30
    2f10:	ff 1f       	adc	r31, r31
    2f12:	e7 58       	subi	r30, 0x87	; 135
    2f14:	fc 4d       	sbci	r31, 0xDC	; 220
    2f16:	40 81       	ld	r20, Z
    2f18:	51 81       	ldd	r21, Z+1	; 0x01
    2f1a:	62 e0       	ldi	r22, 0x02	; 2
    2f1c:	70 e0       	ldi	r23, 0x00	; 0
    2f1e:	87 e2       	ldi	r24, 0x27	; 39
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	68 de       	rcall	.-816    	; 0x2bf4 <dwt_write16bitoffsetreg>
    2f24:	f8 01       	movw	r30, r16
    2f26:	ee 0f       	add	r30, r30
    2f28:	ff 1f       	adc	r31, r31
    2f2a:	eb 58       	subi	r30, 0x8B	; 139
    2f2c:	fc 4d       	sbci	r31, 0xDC	; 220
    2f2e:	40 81       	ld	r20, Z
    2f30:	51 81       	ldd	r21, Z+1	; 0x01
    2f32:	64 e0       	ldi	r22, 0x04	; 4
    2f34:	70 e0       	ldi	r23, 0x00	; 0
    2f36:	87 e2       	ldi	r24, 0x27	; 39
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	5c de       	rcall	.-840    	; 0x2bf4 <dwt_write16bitoffsetreg>
    2f3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f3e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f40:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2f42:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2f44:	89 2b       	or	r24, r25
    2f46:	8a 2b       	or	r24, r26
    2f48:	8b 2b       	or	r24, r27
    2f4a:	41 f4       	brne	.+16     	; 0x2f5c <dwt_configure+0x1d6>
    2f4c:	44 e6       	ldi	r20, 0x64	; 100
    2f4e:	50 e0       	ldi	r21, 0x00	; 0
    2f50:	66 e0       	ldi	r22, 0x06	; 6
    2f52:	70 e0       	ldi	r23, 0x00	; 0
    2f54:	87 e2       	ldi	r24, 0x27	; 39
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	4d de       	rcall	.-870    	; 0x2bf4 <dwt_write16bitoffsetreg>
    2f5a:	23 c0       	rjmp	.+70     	; 0x2fa2 <dwt_configure+0x21c>
    2f5c:	88 85       	ldd	r24, Y+8	; 0x08
    2f5e:	99 85       	ldd	r25, Y+9	; 0x09
    2f60:	aa 85       	ldd	r26, Y+10	; 0x0a
    2f62:	bb 85       	ldd	r27, Y+11	; 0x0b
    2f64:	04 97       	sbiw	r24, 0x04	; 4
    2f66:	a1 05       	cpc	r26, r1
    2f68:	b1 05       	cpc	r27, r1
    2f6a:	71 f4       	brne	.+28     	; 0x2f88 <dwt_configure+0x202>
    2f6c:	40 e1       	ldi	r20, 0x10	; 16
    2f6e:	50 e0       	ldi	r21, 0x00	; 0
    2f70:	66 e0       	ldi	r22, 0x06	; 6
    2f72:	70 e0       	ldi	r23, 0x00	; 0
    2f74:	87 e2       	ldi	r24, 0x27	; 39
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	3d de       	rcall	.-902    	; 0x2bf4 <dwt_write16bitoffsetreg>
    2f7a:	40 e1       	ldi	r20, 0x10	; 16
    2f7c:	66 e2       	ldi	r22, 0x26	; 38
    2f7e:	70 e0       	ldi	r23, 0x00	; 0
    2f80:	87 e2       	ldi	r24, 0x27	; 39
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	21 de       	rcall	.-958    	; 0x2bc8 <dwt_write8bitoffsetreg>
    2f86:	0d c0       	rjmp	.+26     	; 0x2fa2 <dwt_configure+0x21c>
    2f88:	40 e2       	ldi	r20, 0x20	; 32
    2f8a:	50 e0       	ldi	r21, 0x00	; 0
    2f8c:	66 e0       	ldi	r22, 0x06	; 6
    2f8e:	70 e0       	ldi	r23, 0x00	; 0
    2f90:	87 e2       	ldi	r24, 0x27	; 39
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	2f de       	rcall	.-930    	; 0x2bf4 <dwt_write16bitoffsetreg>
    2f96:	48 e2       	ldi	r20, 0x28	; 40
    2f98:	66 e2       	ldi	r22, 0x26	; 38
    2f9a:	70 e0       	ldi	r23, 0x00	; 0
    2f9c:	87 e2       	ldi	r24, 0x27	; 39
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	13 de       	rcall	.-986    	; 0x2bc8 <dwt_write8bitoffsetreg>
    2fa2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fa4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2fa6:	f8 01       	movw	r30, r16
    2fa8:	ee 0f       	add	r30, r30
    2faa:	ff 1f       	adc	r31, r31
    2fac:	ee 0f       	add	r30, r30
    2fae:	ff 1f       	adc	r31, r31
    2fb0:	e8 0f       	add	r30, r24
    2fb2:	f9 1f       	adc	r31, r25
    2fb4:	ee 0f       	add	r30, r30
    2fb6:	ff 1f       	adc	r31, r31
    2fb8:	ee 0f       	add	r30, r30
    2fba:	ff 1f       	adc	r31, r31
    2fbc:	eb 5a       	subi	r30, 0xAB	; 171
    2fbe:	fc 4d       	sbci	r31, 0xDC	; 220
    2fc0:	20 81       	ld	r18, Z
    2fc2:	31 81       	ldd	r19, Z+1	; 0x01
    2fc4:	42 81       	ldd	r20, Z+2	; 0x02
    2fc6:	53 81       	ldd	r21, Z+3	; 0x03
    2fc8:	68 e0       	ldi	r22, 0x08	; 8
    2fca:	70 e0       	ldi	r23, 0x00	; 0
    2fcc:	87 e2       	ldi	r24, 0x27	; 39
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	37 de       	rcall	.-914    	; 0x2c40 <dwt_write32bitoffsetreg>
    2fd2:	8c a1       	ldd	r24, Y+36	; 0x24
    2fd4:	9d a1       	ldd	r25, Y+37	; 0x25
    2fd6:	ae a1       	ldd	r26, Y+38	; 0x26
    2fd8:	bf a1       	ldd	r27, Y+39	; 0x27
    2fda:	89 2b       	or	r24, r25
    2fdc:	8a 2b       	or	r24, r26
    2fde:	8b 2b       	or	r24, r27
    2fe0:	41 f4       	brne	.+16     	; 0x2ff2 <dwt_configure+0x26c>
    2fe2:	81 e4       	ldi	r24, 0x41	; 65
    2fe4:	90 e1       	ldi	r25, 0x10	; 16
    2fe6:	a0 e0       	ldi	r26, 0x00	; 0
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	8c a3       	std	Y+36, r24	; 0x24
    2fec:	9d a3       	std	Y+37, r25	; 0x25
    2fee:	ae a3       	std	Y+38, r26	; 0x26
    2ff0:	bf a3       	std	Y+39, r27	; 0x27
    2ff2:	4c a1       	ldd	r20, Y+36	; 0x24
    2ff4:	5d a1       	ldd	r21, Y+37	; 0x25
    2ff6:	60 e2       	ldi	r22, 0x20	; 32
    2ff8:	70 e0       	ldi	r23, 0x00	; 0
    2ffa:	87 e2       	ldi	r24, 0x27	; 39
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	fa dd       	rcall	.-1036   	; 0x2bf4 <dwt_write16bitoffsetreg>
    3000:	20 91 88 23 	lds	r18, 0x2388
    3004:	30 91 89 23 	lds	r19, 0x2389
    3008:	40 91 8a 23 	lds	r20, 0x238A
    300c:	50 91 8b 23 	lds	r21, 0x238B
    3010:	6c e0       	ldi	r22, 0x0C	; 12
    3012:	70 e0       	ldi	r23, 0x00	; 0
    3014:	83 e2       	ldi	r24, 0x23	; 35
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	13 de       	rcall	.-986    	; 0x2c40 <dwt_write32bitoffsetreg>
    301a:	f8 01       	movw	r30, r16
    301c:	ee 0f       	add	r30, r30
    301e:	ff 1f       	adc	r31, r31
    3020:	e4 57       	subi	r30, 0x74	; 116
    3022:	fc 4d       	sbci	r31, 0xDC	; 220
    3024:	40 81       	ld	r20, Z
    3026:	51 81       	ldd	r21, Z+1	; 0x01
    3028:	64 e0       	ldi	r22, 0x04	; 4
    302a:	70 e0       	ldi	r23, 0x00	; 0
    302c:	83 e2       	ldi	r24, 0x23	; 35
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	e1 dd       	rcall	.-1086   	; 0x2bf4 <dwt_write16bitoffsetreg>
    3032:	88 8d       	ldd	r24, Y+24	; 0x18
    3034:	99 8d       	ldd	r25, Y+25	; 0x19
    3036:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3038:	bb 8d       	ldd	r27, Y+27	; 0x1b
    303a:	89 2b       	or	r24, r25
    303c:	8a 2b       	or	r24, r26
    303e:	8b 2b       	or	r24, r27
    3040:	69 f0       	breq	.+26     	; 0x305c <__stack+0x5d>
    3042:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3044:	fd 8d       	ldd	r31, Y+29	; 0x1d
    3046:	eb 57       	subi	r30, 0x7B	; 123
    3048:	fc 4d       	sbci	r31, 0xDC	; 220
    304a:	40 81       	ld	r20, Z
    304c:	60 e0       	ldi	r22, 0x00	; 0
    304e:	70 e0       	ldi	r23, 0x00	; 0
    3050:	81 e2       	ldi	r24, 0x21	; 33
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	b9 dd       	rcall	.-1166   	; 0x2bc8 <dwt_write8bitoffsetreg>
    3056:	e1 e0       	ldi	r30, 0x01	; 1
    3058:	83 e0       	ldi	r24, 0x03	; 3
    305a:	02 c0       	rjmp	.+4      	; 0x3060 <__stack+0x61>
    305c:	e0 e0       	ldi	r30, 0x00	; 0
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	0c 89       	ldd	r16, Y+20	; 0x14
    3062:	1d 89       	ldd	r17, Y+21	; 0x15
    3064:	2e 89       	ldd	r18, Y+22	; 0x16
    3066:	3f 89       	ldd	r19, Y+23	; 0x17
    3068:	0f 2e       	mov	r0, r31
    306a:	fb e1       	ldi	r31, 0x1B	; 27
    306c:	00 0f       	add	r16, r16
    306e:	11 1f       	adc	r17, r17
    3070:	22 1f       	adc	r18, r18
    3072:	33 1f       	adc	r19, r19
    3074:	fa 95       	dec	r31
    3076:	d1 f7       	brne	.-12     	; 0x306c <__stack+0x6d>
    3078:	f0 2d       	mov	r31, r0
    307a:	b3 01       	movw	r22, r6
    307c:	a2 01       	movw	r20, r4
    307e:	4f 70       	andi	r20, 0x0F	; 15
    3080:	55 27       	eor	r21, r21
    3082:	66 27       	eor	r22, r22
    3084:	77 27       	eor	r23, r23
    3086:	04 2b       	or	r16, r20
    3088:	15 2b       	or	r17, r21
    308a:	26 2b       	or	r18, r22
    308c:	37 2b       	or	r19, r23
    308e:	4c 81       	ldd	r20, Y+4	; 0x04
    3090:	5d 81       	ldd	r21, Y+5	; 0x05
    3092:	6e 81       	ldd	r22, Y+6	; 0x06
    3094:	7f 81       	ldd	r23, Y+7	; 0x07
    3096:	03 2e       	mov	r0, r19
    3098:	32 e1       	ldi	r19, 0x12	; 18
    309a:	44 0f       	add	r20, r20
    309c:	55 1f       	adc	r21, r21
    309e:	66 1f       	adc	r22, r22
    30a0:	77 1f       	adc	r23, r23
    30a2:	3a 95       	dec	r19
    30a4:	d1 f7       	brne	.-12     	; 0x309a <__stack+0x9b>
    30a6:	30 2d       	mov	r19, r0
    30a8:	44 27       	eor	r20, r20
    30aa:	55 27       	eor	r21, r21
    30ac:	6c 70       	andi	r22, 0x0C	; 12
    30ae:	77 27       	eor	r23, r23
    30b0:	04 2b       	or	r16, r20
    30b2:	15 2b       	or	r17, r21
    30b4:	26 2b       	or	r18, r22
    30b6:	37 2b       	or	r19, r23
    30b8:	48 89       	ldd	r20, Y+16	; 0x10
    30ba:	59 89       	ldd	r21, Y+17	; 0x11
    30bc:	6a 89       	ldd	r22, Y+18	; 0x12
    30be:	7b 89       	ldd	r23, Y+19	; 0x13
    30c0:	03 2e       	mov	r0, r19
    30c2:	36 e1       	ldi	r19, 0x16	; 22
    30c4:	44 0f       	add	r20, r20
    30c6:	55 1f       	adc	r21, r21
    30c8:	66 1f       	adc	r22, r22
    30ca:	77 1f       	adc	r23, r23
    30cc:	3a 95       	dec	r19
    30ce:	d1 f7       	brne	.-12     	; 0x30c4 <__stack+0xc5>
    30d0:	30 2d       	mov	r19, r0
    30d2:	44 27       	eor	r20, r20
    30d4:	55 27       	eor	r21, r21
    30d6:	60 7c       	andi	r22, 0xC0	; 192
    30d8:	77 70       	andi	r23, 0x07	; 7
    30da:	04 2b       	or	r16, r20
    30dc:	15 2b       	or	r17, r21
    30de:	26 2b       	or	r18, r22
    30e0:	37 2b       	or	r19, r23
    30e2:	55 24       	eor	r5, r5
    30e4:	66 24       	eor	r6, r6
    30e6:	77 24       	eor	r7, r7
    30e8:	b3 01       	movw	r22, r6
    30ea:	a2 01       	movw	r20, r4
    30ec:	44 0f       	add	r20, r20
    30ee:	55 1f       	adc	r21, r21
    30f0:	66 1f       	adc	r22, r22
    30f2:	77 1f       	adc	r23, r23
    30f4:	44 0f       	add	r20, r20
    30f6:	55 1f       	adc	r21, r21
    30f8:	66 1f       	adc	r22, r22
    30fa:	77 1f       	adc	r23, r23
    30fc:	44 0f       	add	r20, r20
    30fe:	55 1f       	adc	r21, r21
    3100:	66 1f       	adc	r22, r22
    3102:	77 1f       	adc	r23, r23
    3104:	44 0f       	add	r20, r20
    3106:	55 1f       	adc	r21, r21
    3108:	66 1f       	adc	r22, r22
    310a:	77 1f       	adc	r23, r23
    310c:	55 27       	eor	r21, r21
    310e:	66 27       	eor	r22, r22
    3110:	77 27       	eor	r23, r23
    3112:	40 2b       	or	r20, r16
    3114:	51 2b       	or	r21, r17
    3116:	62 2b       	or	r22, r18
    3118:	73 2b       	or	r23, r19
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	a0 e0       	ldi	r26, 0x00	; 0
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	07 2e       	mov	r0, r23
    3122:	74 e1       	ldi	r23, 0x14	; 20
    3124:	88 0f       	add	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	aa 1f       	adc	r26, r26
    312a:	bb 1f       	adc	r27, r27
    312c:	7a 95       	dec	r23
    312e:	d1 f7       	brne	.-12     	; 0x3124 <__stack+0x125>
    3130:	70 2d       	mov	r23, r0
    3132:	84 2b       	or	r24, r20
    3134:	95 2b       	or	r25, r21
    3136:	a6 2b       	or	r26, r22
    3138:	b7 2b       	or	r27, r23
    313a:	4e 2e       	mov	r4, r30
    313c:	51 2c       	mov	r5, r1
    313e:	61 2c       	mov	r6, r1
    3140:	71 2c       	mov	r7, r1
    3142:	03 2e       	mov	r0, r19
    3144:	31 e1       	ldi	r19, 0x11	; 17
    3146:	44 0c       	add	r4, r4
    3148:	55 1c       	adc	r5, r5
    314a:	66 1c       	adc	r6, r6
    314c:	77 1c       	adc	r7, r7
    314e:	3a 95       	dec	r19
    3150:	d1 f7       	brne	.-12     	; 0x3146 <__stack+0x147>
    3152:	30 2d       	mov	r19, r0
    3154:	a3 01       	movw	r20, r6
    3156:	92 01       	movw	r18, r4
    3158:	28 2b       	or	r18, r24
    315a:	39 2b       	or	r19, r25
    315c:	4a 2b       	or	r20, r26
    315e:	5b 2b       	or	r21, r27
    3160:	60 e0       	ldi	r22, 0x00	; 0
    3162:	70 e0       	ldi	r23, 0x00	; 0
    3164:	8f e1       	ldi	r24, 0x1F	; 31
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	6b dd       	rcall	.-1322   	; 0x2c40 <dwt_write32bitoffsetreg>
    316a:	4c 81       	ldd	r20, Y+4	; 0x04
    316c:	5d 81       	ldd	r21, Y+5	; 0x05
    316e:	6e 81       	ldd	r22, Y+6	; 0x06
    3170:	7f 81       	ldd	r23, Y+7	; 0x07
    3172:	88 85       	ldd	r24, Y+8	; 0x08
    3174:	99 85       	ldd	r25, Y+9	; 0x09
    3176:	aa 85       	ldd	r26, Y+10	; 0x0a
    3178:	bb 85       	ldd	r27, Y+11	; 0x0b
    317a:	84 2b       	or	r24, r20
    317c:	95 2b       	or	r25, r21
    317e:	a6 2b       	or	r26, r22
    3180:	b7 2b       	or	r27, r23
    3182:	bc 01       	movw	r22, r24
    3184:	55 27       	eor	r21, r21
    3186:	44 27       	eor	r20, r20
    3188:	8c 8d       	ldd	r24, Y+28	; 0x1c
    318a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    318c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    318e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3190:	07 2e       	mov	r0, r23
    3192:	7d e0       	ldi	r23, 0x0D	; 13
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	aa 1f       	adc	r26, r26
    319a:	bb 1f       	adc	r27, r27
    319c:	7a 95       	dec	r23
    319e:	d1 f7       	brne	.-12     	; 0x3194 <__stack+0x195>
    31a0:	70 2d       	mov	r23, r0
    31a2:	9a 01       	movw	r18, r20
    31a4:	ab 01       	movw	r20, r22
    31a6:	28 2b       	or	r18, r24
    31a8:	39 2b       	or	r19, r25
    31aa:	4a 2b       	or	r20, r26
    31ac:	5b 2b       	or	r21, r27
    31ae:	e0 91 b9 20 	lds	r30, 0x20B9
    31b2:	f0 91 ba 20 	lds	r31, 0x20BA
    31b6:	22 87       	std	Z+10, r18	; 0x0a
    31b8:	33 87       	std	Z+11, r19	; 0x0b
    31ba:	44 87       	std	Z+12, r20	; 0x0c
    31bc:	55 87       	std	Z+13, r21	; 0x0d
    31be:	60 e0       	ldi	r22, 0x00	; 0
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	88 e0       	ldi	r24, 0x08	; 8
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	3c dd       	rcall	.-1416   	; 0x2c40 <dwt_write32bitoffsetreg>
    31c8:	42 e4       	ldi	r20, 0x42	; 66
    31ca:	60 e0       	ldi	r22, 0x00	; 0
    31cc:	70 e0       	ldi	r23, 0x00	; 0
    31ce:	8d e0       	ldi	r24, 0x0D	; 13
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	fa dc       	rcall	.-1548   	; 0x2bc8 <dwt_write8bitoffsetreg>
    31d4:	df 91       	pop	r29
    31d6:	cf 91       	pop	r28
    31d8:	1f 91       	pop	r17
    31da:	0f 91       	pop	r16
    31dc:	ff 90       	pop	r15
    31de:	ef 90       	pop	r14
    31e0:	df 90       	pop	r13
    31e2:	cf 90       	pop	r12
    31e4:	bf 90       	pop	r11
    31e6:	af 90       	pop	r10
    31e8:	7f 90       	pop	r7
    31ea:	6f 90       	pop	r6
    31ec:	5f 90       	pop	r5
    31ee:	4f 90       	pop	r4
    31f0:	08 95       	ret

000031f2 <dwt_setrxaftertxdelay>:
    31f2:	cf 92       	push	r12
    31f4:	df 92       	push	r13
    31f6:	ef 92       	push	r14
    31f8:	ff 92       	push	r15
    31fa:	6b 01       	movw	r12, r22
    31fc:	7c 01       	movw	r14, r24
    31fe:	60 e0       	ldi	r22, 0x00	; 0
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	8a e1       	ldi	r24, 0x1A	; 26
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	77 dc       	rcall	.-1810   	; 0x2af6 <dwt_read32bitoffsetreg>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	88 27       	eor	r24, r24
    320e:	99 27       	eor	r25, r25
    3210:	a0 7f       	andi	r26, 0xF0	; 240
    3212:	2f e0       	ldi	r18, 0x0F	; 15
    3214:	e2 22       	and	r14, r18
    3216:	ff 24       	eor	r15, r15
    3218:	9c 01       	movw	r18, r24
    321a:	ad 01       	movw	r20, r26
    321c:	2c 29       	or	r18, r12
    321e:	3d 29       	or	r19, r13
    3220:	4e 29       	or	r20, r14
    3222:	5f 29       	or	r21, r15
    3224:	60 e0       	ldi	r22, 0x00	; 0
    3226:	70 e0       	ldi	r23, 0x00	; 0
    3228:	8a e1       	ldi	r24, 0x1A	; 26
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	09 dd       	rcall	.-1518   	; 0x2c40 <dwt_write32bitoffsetreg>
    322e:	ff 90       	pop	r15
    3230:	ef 90       	pop	r14
    3232:	df 90       	pop	r13
    3234:	cf 90       	pop	r12
    3236:	08 95       	ret

00003238 <dwt_setcallbacks>:
    3238:	e0 91 b9 20 	lds	r30, 0x20B9
    323c:	f0 91 ba 20 	lds	r31, 0x20BA
    3240:	80 a3       	std	Z+32, r24	; 0x20
    3242:	91 a3       	std	Z+33, r25	; 0x21
    3244:	62 a3       	std	Z+34, r22	; 0x22
    3246:	73 a3       	std	Z+35, r23	; 0x23
    3248:	44 a3       	std	Z+36, r20	; 0x24
    324a:	55 a3       	std	Z+37, r21	; 0x25
    324c:	26 a3       	std	Z+38, r18	; 0x26
    324e:	37 a3       	std	Z+39, r19	; 0x27
    3250:	08 95       	ret

00003252 <dwt_setleds>:
    3252:	cf 93       	push	r28
    3254:	c8 2f       	mov	r28, r24
    3256:	80 ff       	sbrs	r24, 0
    3258:	20 c0       	rjmp	.+64     	; 0x329a <dwt_setleds+0x48>
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	86 e2       	ldi	r24, 0x26	; 38
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	49 dc       	rcall	.-1902   	; 0x2af6 <dwt_read32bitoffsetreg>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	93 7c       	andi	r25, 0xC3	; 195
    326a:	9c 01       	movw	r18, r24
    326c:	ad 01       	movw	r20, r26
    326e:	34 61       	ori	r19, 0x14	; 20
    3270:	60 e0       	ldi	r22, 0x00	; 0
    3272:	70 e0       	ldi	r23, 0x00	; 0
    3274:	86 e2       	ldi	r24, 0x26	; 38
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	e3 dc       	rcall	.-1594   	; 0x2c40 <dwt_write32bitoffsetreg>
    327a:	60 e0       	ldi	r22, 0x00	; 0
    327c:	70 e0       	ldi	r23, 0x00	; 0
    327e:	86 e3       	ldi	r24, 0x36	; 54
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	39 dc       	rcall	.-1934   	; 0x2af6 <dwt_read32bitoffsetreg>
    3284:	9b 01       	movw	r18, r22
    3286:	ac 01       	movw	r20, r24
    3288:	44 68       	ori	r20, 0x84	; 132
    328a:	60 e0       	ldi	r22, 0x00	; 0
    328c:	70 e0       	ldi	r23, 0x00	; 0
    328e:	86 e3       	ldi	r24, 0x36	; 54
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	d6 dc       	rcall	.-1620   	; 0x2c40 <dwt_write32bitoffsetreg>
    3294:	c1 fd       	sbrc	r28, 1
    3296:	19 c0       	rjmp	.+50     	; 0x32ca <dwt_setleds+0x78>
    3298:	0e c0       	rjmp	.+28     	; 0x32b6 <dwt_setleds+0x64>
    329a:	60 e0       	ldi	r22, 0x00	; 0
    329c:	70 e0       	ldi	r23, 0x00	; 0
    329e:	86 e2       	ldi	r24, 0x26	; 38
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	29 dc       	rcall	.-1966   	; 0x2af6 <dwt_read32bitoffsetreg>
    32a4:	9b 01       	movw	r18, r22
    32a6:	ac 01       	movw	r20, r24
    32a8:	33 7c       	andi	r19, 0xC3	; 195
    32aa:	60 e0       	ldi	r22, 0x00	; 0
    32ac:	70 e0       	ldi	r23, 0x00	; 0
    32ae:	86 e2       	ldi	r24, 0x26	; 38
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	c6 dc       	rcall	.-1652   	; 0x2c40 <dwt_write32bitoffsetreg>
    32b4:	1c c0       	rjmp	.+56     	; 0x32ee <dwt_setleds+0x9c>
    32b6:	20 e1       	ldi	r18, 0x10	; 16
    32b8:	31 e0       	ldi	r19, 0x01	; 1
    32ba:	40 e0       	ldi	r20, 0x00	; 0
    32bc:	50 e0       	ldi	r21, 0x00	; 0
    32be:	68 e2       	ldi	r22, 0x28	; 40
    32c0:	70 e0       	ldi	r23, 0x00	; 0
    32c2:	86 e3       	ldi	r24, 0x36	; 54
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	bc dc       	rcall	.-1672   	; 0x2c40 <dwt_write32bitoffsetreg>
    32c8:	12 c0       	rjmp	.+36     	; 0x32ee <dwt_setleds+0x9c>
    32ca:	20 e1       	ldi	r18, 0x10	; 16
    32cc:	31 e0       	ldi	r19, 0x01	; 1
    32ce:	4f e0       	ldi	r20, 0x0F	; 15
    32d0:	50 e0       	ldi	r21, 0x00	; 0
    32d2:	68 e2       	ldi	r22, 0x28	; 40
    32d4:	70 e0       	ldi	r23, 0x00	; 0
    32d6:	86 e3       	ldi	r24, 0x36	; 54
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	b2 dc       	rcall	.-1692   	; 0x2c40 <dwt_write32bitoffsetreg>
    32dc:	20 e1       	ldi	r18, 0x10	; 16
    32de:	31 e0       	ldi	r19, 0x01	; 1
    32e0:	40 e0       	ldi	r20, 0x00	; 0
    32e2:	50 e0       	ldi	r21, 0x00	; 0
    32e4:	68 e2       	ldi	r22, 0x28	; 40
    32e6:	70 e0       	ldi	r23, 0x00	; 0
    32e8:	86 e3       	ldi	r24, 0x36	; 54
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	a9 dc       	rcall	.-1710   	; 0x2c40 <dwt_write32bitoffsetreg>
    32ee:	cf 91       	pop	r28
    32f0:	08 95       	ret

000032f2 <_dwt_enableclocks>:
    32f2:	ef 92       	push	r14
    32f4:	ff 92       	push	r15
    32f6:	0f 93       	push	r16
    32f8:	1f 93       	push	r17
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	00 d0       	rcall	.+0      	; 0x3300 <_dwt_enableclocks+0xe>
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	7c 01       	movw	r14, r24
    3306:	8e 01       	movw	r16, r28
    3308:	0f 5f       	subi	r16, 0xFF	; 255
    330a:	1f 4f       	sbci	r17, 0xFF	; 255
    330c:	22 e0       	ldi	r18, 0x02	; 2
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e0       	ldi	r20, 0x00	; 0
    3312:	50 e0       	ldi	r21, 0x00	; 0
    3314:	60 e0       	ldi	r22, 0x00	; 0
    3316:	70 e0       	ldi	r23, 0x00	; 0
    3318:	86 e3       	ldi	r24, 0x36	; 54
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	91 db       	rcall	.-2270   	; 0x2a40 <dwt_readfromdevice>
    331e:	8f e0       	ldi	r24, 0x0F	; 15
    3320:	e8 16       	cp	r14, r24
    3322:	f1 04       	cpc	r15, r1
    3324:	a0 f5       	brcc	.+104    	; 0x338e <_dwt_enableclocks+0x9c>
    3326:	f7 01       	movw	r30, r14
    3328:	eb 5f       	subi	r30, 0xFB	; 251
    332a:	fe 4f       	sbci	r31, 0xFE	; 254
    332c:	0c 94 b5 2c 	jmp	0x596a	; 0x596a <__tablejump2__>
    3330:	19 82       	std	Y+1, r1	; 0x01
    3332:	8a 81       	ldd	r24, Y+2	; 0x02
    3334:	8e 7f       	andi	r24, 0xFE	; 254
    3336:	8a 83       	std	Y+2, r24	; 0x02
    3338:	2a c0       	rjmp	.+84     	; 0x338e <_dwt_enableclocks+0x9c>
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	8c 7f       	andi	r24, 0xFC	; 252
    333e:	81 60       	ori	r24, 0x01	; 1
    3340:	89 83       	std	Y+1, r24	; 0x01
    3342:	25 c0       	rjmp	.+74     	; 0x338e <_dwt_enableclocks+0x9c>
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	8c 7f       	andi	r24, 0xFC	; 252
    3348:	82 60       	ori	r24, 0x02	; 2
    334a:	89 83       	std	Y+1, r24	; 0x01
    334c:	20 c0       	rjmp	.+64     	; 0x338e <_dwt_enableclocks+0x9c>
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	83 7b       	andi	r24, 0xB3	; 179
    3352:	88 64       	ori	r24, 0x48	; 72
    3354:	89 83       	std	Y+1, r24	; 0x01
    3356:	8a 81       	ldd	r24, Y+2	; 0x02
    3358:	80 68       	ori	r24, 0x80	; 128
    335a:	8a 83       	std	Y+2, r24	; 0x02
    335c:	18 c0       	rjmp	.+48     	; 0x338e <_dwt_enableclocks+0x9c>
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	83 7b       	andi	r24, 0xB3	; 179
    3362:	89 83       	std	Y+1, r24	; 0x01
    3364:	8a 81       	ldd	r24, Y+2	; 0x02
    3366:	8f 77       	andi	r24, 0x7F	; 127
    3368:	8a 83       	std	Y+2, r24	; 0x02
    336a:	11 c0       	rjmp	.+34     	; 0x338e <_dwt_enableclocks+0x9c>
    336c:	8a 81       	ldd	r24, Y+2	; 0x02
    336e:	82 60       	ori	r24, 0x02	; 2
    3370:	8a 83       	std	Y+2, r24	; 0x02
    3372:	0d c0       	rjmp	.+26     	; 0x338e <_dwt_enableclocks+0x9c>
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
    3376:	8d 7f       	andi	r24, 0xFD	; 253
    3378:	8a 83       	std	Y+2, r24	; 0x02
    337a:	09 c0       	rjmp	.+18     	; 0x338e <_dwt_enableclocks+0x9c>
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	8f 7c       	andi	r24, 0xCF	; 207
    3380:	80 62       	ori	r24, 0x20	; 32
    3382:	89 83       	std	Y+1, r24	; 0x01
    3384:	04 c0       	rjmp	.+8      	; 0x338e <_dwt_enableclocks+0x9c>
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	89 83       	std	Y+1, r24	; 0x01
    338a:	83 e0       	ldi	r24, 0x03	; 3
    338c:	8a 83       	std	Y+2, r24	; 0x02
    338e:	8e 01       	movw	r16, r28
    3390:	0f 5f       	subi	r16, 0xFF	; 255
    3392:	1f 4f       	sbci	r17, 0xFF	; 255
    3394:	21 e0       	ldi	r18, 0x01	; 1
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	40 e0       	ldi	r20, 0x00	; 0
    339a:	50 e0       	ldi	r21, 0x00	; 0
    339c:	60 e0       	ldi	r22, 0x00	; 0
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	86 e3       	ldi	r24, 0x36	; 54
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	01 db       	rcall	.-2558   	; 0x29a8 <dwt_writetodevice>
    33a6:	0f 5f       	subi	r16, 0xFF	; 255
    33a8:	1f 4f       	sbci	r17, 0xFF	; 255
    33aa:	21 e0       	ldi	r18, 0x01	; 1
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e0       	ldi	r20, 0x00	; 0
    33b0:	50 e0       	ldi	r21, 0x00	; 0
    33b2:	61 e0       	ldi	r22, 0x01	; 1
    33b4:	70 e0       	ldi	r23, 0x00	; 0
    33b6:	86 e3       	ldi	r24, 0x36	; 54
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	f6 da       	rcall	.-2580   	; 0x29a8 <dwt_writetodevice>
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	df 91       	pop	r29
    33c2:	cf 91       	pop	r28
    33c4:	1f 91       	pop	r17
    33c6:	0f 91       	pop	r16
    33c8:	ff 90       	pop	r15
    33ca:	ef 90       	pop	r14
    33cc:	08 95       	ret

000033ce <_dwt_loaducodefromrom>:
    33ce:	8e e0       	ldi	r24, 0x0E	; 14
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	8f df       	rcall	.-226    	; 0x32f2 <_dwt_enableclocks>
    33d4:	40 e0       	ldi	r20, 0x00	; 0
    33d6:	50 e8       	ldi	r21, 0x80	; 128
    33d8:	66 e0       	ldi	r22, 0x06	; 6
    33da:	70 e0       	ldi	r23, 0x00	; 0
    33dc:	8d e2       	ldi	r24, 0x2D	; 45
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	09 dc       	rcall	.-2030   	; 0x2bf4 <dwt_write16bitoffsetreg>
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	64 d7       	rcall	.+3784   	; 0x42b0 <deca_sleep>
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	82 cf       	rjmp	.-252    	; 0x32f2 <_dwt_enableclocks>
    33ee:	08 95       	ret

000033f0 <_dwt_disablesequencing>:
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	7e df       	rcall	.-260    	; 0x32f2 <_dwt_enableclocks>
    33f6:	40 e0       	ldi	r20, 0x00	; 0
    33f8:	50 e0       	ldi	r21, 0x00	; 0
    33fa:	64 e0       	ldi	r22, 0x04	; 4
    33fc:	70 e0       	ldi	r23, 0x00	; 0
    33fe:	86 e3       	ldi	r24, 0x36	; 54
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	f8 cb       	rjmp	.-2064   	; 0x2bf4 <dwt_write16bitoffsetreg>
    3404:	08 95       	ret

00003406 <dwt_setdelayedtrxtime>:
    3406:	9b 01       	movw	r18, r22
    3408:	ac 01       	movw	r20, r24
    340a:	61 e0       	ldi	r22, 0x01	; 1
    340c:	70 e0       	ldi	r23, 0x00	; 0
    340e:	8a e0       	ldi	r24, 0x0A	; 10
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	16 cc       	rjmp	.-2004   	; 0x2c40 <dwt_write32bitoffsetreg>
    3414:	08 95       	ret

00003416 <dwt_starttx>:
    3416:	cf 93       	push	r28
    3418:	c8 2f       	mov	r28, r24
    341a:	81 ff       	sbrs	r24, 1
    341c:	0e c0       	rjmp	.+28     	; 0x343a <dwt_starttx+0x24>
    341e:	40 e8       	ldi	r20, 0x80	; 128
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	70 e0       	ldi	r23, 0x00	; 0
    3424:	8d e0       	ldi	r24, 0x0D	; 13
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	cf db       	rcall	.-2146   	; 0x2bc8 <dwt_write8bitoffsetreg>
    342a:	e0 91 b9 20 	lds	r30, 0x20B9
    342e:	f0 91 ba 20 	lds	r31, 0x20BA
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	86 8b       	std	Z+22, r24	; 0x16
    3436:	40 e8       	ldi	r20, 0x80	; 128
    3438:	01 c0       	rjmp	.+2      	; 0x343c <dwt_starttx+0x26>
    343a:	40 e0       	ldi	r20, 0x00	; 0
    343c:	c0 ff       	sbrs	r28, 0
    343e:	1d c0       	rjmp	.+58     	; 0x347a <dwt_starttx+0x64>
    3440:	46 60       	ori	r20, 0x06	; 6
    3442:	60 e0       	ldi	r22, 0x00	; 0
    3444:	70 e0       	ldi	r23, 0x00	; 0
    3446:	8d e0       	ldi	r24, 0x0D	; 13
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	be db       	rcall	.-2180   	; 0x2bc8 <dwt_write8bitoffsetreg>
    344c:	63 e0       	ldi	r22, 0x03	; 3
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	8f e0       	ldi	r24, 0x0F	; 15
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	86 db       	rcall	.-2292   	; 0x2b62 <dwt_read16bitoffsetreg>
    3456:	88 70       	andi	r24, 0x08	; 8
    3458:	94 70       	andi	r25, 0x04	; 4
    345a:	89 2b       	or	r24, r25
    345c:	b9 f0       	breq	.+46     	; 0x348c <dwt_starttx+0x76>
    345e:	40 e4       	ldi	r20, 0x40	; 64
    3460:	60 e0       	ldi	r22, 0x00	; 0
    3462:	70 e0       	ldi	r23, 0x00	; 0
    3464:	8d e0       	ldi	r24, 0x0D	; 13
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	af db       	rcall	.-2210   	; 0x2bc8 <dwt_write8bitoffsetreg>
    346a:	e0 91 b9 20 	lds	r30, 0x20B9
    346e:	f0 91 ba 20 	lds	r31, 0x20BA
    3472:	16 8a       	std	Z+22, r1	; 0x16
    3474:	8f ef       	ldi	r24, 0xFF	; 255
    3476:	9f ef       	ldi	r25, 0xFF	; 255
    3478:	0b c0       	rjmp	.+22     	; 0x3490 <dwt_starttx+0x7a>
    347a:	42 60       	ori	r20, 0x02	; 2
    347c:	60 e0       	ldi	r22, 0x00	; 0
    347e:	70 e0       	ldi	r23, 0x00	; 0
    3480:	8d e0       	ldi	r24, 0x0D	; 13
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	a1 db       	rcall	.-2238   	; 0x2bc8 <dwt_write8bitoffsetreg>
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	02 c0       	rjmp	.+4      	; 0x3490 <dwt_starttx+0x7a>
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	cf 91       	pop	r28
    3492:	08 95       	ret

00003494 <dwt_syncrxbufptrs>:
    3494:	63 e0       	ldi	r22, 0x03	; 3
    3496:	70 e0       	ldi	r23, 0x00	; 0
    3498:	8f e0       	ldi	r24, 0x0F	; 15
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	7f db       	rcall	.-2306   	; 0x2b9c <dwt_read8bitoffsetreg>
    349e:	48 2f       	mov	r20, r24
    34a0:	40 78       	andi	r20, 0x80	; 128
    34a2:	50 e0       	ldi	r21, 0x00	; 0
    34a4:	60 e0       	ldi	r22, 0x00	; 0
    34a6:	70 e0       	ldi	r23, 0x00	; 0
    34a8:	80 74       	andi	r24, 0x40	; 64
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	a0 e0       	ldi	r26, 0x00	; 0
    34ae:	b0 e0       	ldi	r27, 0x00	; 0
    34b0:	88 0f       	add	r24, r24
    34b2:	99 1f       	adc	r25, r25
    34b4:	aa 1f       	adc	r26, r26
    34b6:	bb 1f       	adc	r27, r27
    34b8:	48 17       	cp	r20, r24
    34ba:	59 07       	cpc	r21, r25
    34bc:	6a 07       	cpc	r22, r26
    34be:	7b 07       	cpc	r23, r27
    34c0:	31 f0       	breq	.+12     	; 0x34ce <dwt_syncrxbufptrs+0x3a>
    34c2:	41 e0       	ldi	r20, 0x01	; 1
    34c4:	63 e0       	ldi	r22, 0x03	; 3
    34c6:	70 e0       	ldi	r23, 0x00	; 0
    34c8:	8d e0       	ldi	r24, 0x0D	; 13
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	7d cb       	rjmp	.-2310   	; 0x2bc8 <dwt_write8bitoffsetreg>
    34ce:	08 95       	ret

000034d0 <dwt_forcetrxoff>:
    34d0:	cf 92       	push	r12
    34d2:	df 92       	push	r13
    34d4:	ef 92       	push	r14
    34d6:	ff 92       	push	r15
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	60 e0       	ldi	r22, 0x00	; 0
    34de:	70 e0       	ldi	r23, 0x00	; 0
    34e0:	8e e0       	ldi	r24, 0x0E	; 14
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	08 db       	rcall	.-2544   	; 0x2af6 <dwt_read32bitoffsetreg>
    34e6:	6b 01       	movw	r12, r22
    34e8:	7c 01       	movw	r14, r24
    34ea:	bf d2       	rcall	.+1406   	; 0x3a6a <decamutexon>
    34ec:	ec 01       	movw	r28, r24
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	a9 01       	movw	r20, r18
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	70 e0       	ldi	r23, 0x00	; 0
    34f8:	8e e0       	ldi	r24, 0x0E	; 14
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	a1 db       	rcall	.-2238   	; 0x2c40 <dwt_write32bitoffsetreg>
    34fe:	40 e4       	ldi	r20, 0x40	; 64
    3500:	60 e0       	ldi	r22, 0x00	; 0
    3502:	70 e0       	ldi	r23, 0x00	; 0
    3504:	8d e0       	ldi	r24, 0x0D	; 13
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	5f db       	rcall	.-2370   	; 0x2bc8 <dwt_write8bitoffsetreg>
    350a:	28 ef       	ldi	r18, 0xF8	; 248
    350c:	3f ef       	ldi	r19, 0xFF	; 255
    350e:	47 e2       	ldi	r20, 0x27	; 39
    3510:	54 e2       	ldi	r21, 0x24	; 36
    3512:	60 e0       	ldi	r22, 0x00	; 0
    3514:	70 e0       	ldi	r23, 0x00	; 0
    3516:	8f e0       	ldi	r24, 0x0F	; 15
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	92 db       	rcall	.-2268   	; 0x2c40 <dwt_write32bitoffsetreg>
    351c:	bb df       	rcall	.-138    	; 0x3494 <dwt_syncrxbufptrs>
    351e:	a7 01       	movw	r20, r14
    3520:	96 01       	movw	r18, r12
    3522:	60 e0       	ldi	r22, 0x00	; 0
    3524:	70 e0       	ldi	r23, 0x00	; 0
    3526:	8e e0       	ldi	r24, 0x0E	; 14
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	8a db       	rcall	.-2284   	; 0x2c40 <dwt_write32bitoffsetreg>
    352c:	ce 01       	movw	r24, r28
    352e:	a1 d2       	rcall	.+1346   	; 0x3a72 <decamutexoff>
    3530:	e0 91 b9 20 	lds	r30, 0x20B9
    3534:	f0 91 ba 20 	lds	r31, 0x20BA
    3538:	16 8a       	std	Z+22, r1	; 0x16
    353a:	df 91       	pop	r29
    353c:	cf 91       	pop	r28
    353e:	ff 90       	pop	r15
    3540:	ef 90       	pop	r14
    3542:	df 90       	pop	r13
    3544:	cf 90       	pop	r12
    3546:	08 95       	ret

00003548 <dwt_rxenable>:
    3548:	0f 93       	push	r16
    354a:	1f 93       	push	r17
    354c:	cf 93       	push	r28
    354e:	df 93       	push	r29
    3550:	ec 01       	movw	r28, r24
    3552:	82 ff       	sbrs	r24, 2
    3554:	9f df       	rcall	.-194    	; 0x3494 <dwt_syncrxbufptrs>
    3556:	8e 01       	movw	r16, r28
    3558:	01 70       	andi	r16, 0x01	; 1
    355a:	11 27       	eor	r17, r17
    355c:	c0 fd       	sbrc	r28, 0
    355e:	11 c0       	rjmp	.+34     	; 0x3582 <dwt_rxenable+0x3a>
    3560:	21 c0       	rjmp	.+66     	; 0x35a4 <dwt_rxenable+0x5c>
    3562:	b6 df       	rcall	.-148    	; 0x34d0 <dwt_forcetrxoff>
    3564:	c1 fd       	sbrc	r28, 1
    3566:	0a c0       	rjmp	.+20     	; 0x357c <dwt_rxenable+0x34>
    3568:	40 e0       	ldi	r20, 0x00	; 0
    356a:	51 e0       	ldi	r21, 0x01	; 1
    356c:	60 e0       	ldi	r22, 0x00	; 0
    356e:	70 e0       	ldi	r23, 0x00	; 0
    3570:	8d e0       	ldi	r24, 0x0D	; 13
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	3f db       	rcall	.-2434   	; 0x2bf4 <dwt_write16bitoffsetreg>
    3576:	0f ef       	ldi	r16, 0xFF	; 255
    3578:	1f ef       	ldi	r17, 0xFF	; 255
    357a:	1b c0       	rjmp	.+54     	; 0x35b2 <dwt_rxenable+0x6a>
    357c:	0f ef       	ldi	r16, 0xFF	; 255
    357e:	1f ef       	ldi	r17, 0xFF	; 255
    3580:	18 c0       	rjmp	.+48     	; 0x35b2 <dwt_rxenable+0x6a>
    3582:	40 e0       	ldi	r20, 0x00	; 0
    3584:	53 e0       	ldi	r21, 0x03	; 3
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	8d e0       	ldi	r24, 0x0D	; 13
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	32 db       	rcall	.-2460   	; 0x2bf4 <dwt_write16bitoffsetreg>
    3590:	63 e0       	ldi	r22, 0x03	; 3
    3592:	70 e0       	ldi	r23, 0x00	; 0
    3594:	8f e0       	ldi	r24, 0x0F	; 15
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	01 db       	rcall	.-2558   	; 0x2b9c <dwt_read8bitoffsetreg>
    359a:	83 fd       	sbrc	r24, 3
    359c:	e2 cf       	rjmp	.-60     	; 0x3562 <dwt_rxenable+0x1a>
    359e:	00 e0       	ldi	r16, 0x00	; 0
    35a0:	10 e0       	ldi	r17, 0x00	; 0
    35a2:	07 c0       	rjmp	.+14     	; 0x35b2 <dwt_rxenable+0x6a>
    35a4:	40 e0       	ldi	r20, 0x00	; 0
    35a6:	51 e0       	ldi	r21, 0x01	; 1
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	8d e0       	ldi	r24, 0x0D	; 13
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	21 db       	rcall	.-2494   	; 0x2bf4 <dwt_write16bitoffsetreg>
    35b2:	c8 01       	movw	r24, r16
    35b4:	df 91       	pop	r29
    35b6:	cf 91       	pop	r28
    35b8:	1f 91       	pop	r17
    35ba:	0f 91       	pop	r16
    35bc:	08 95       	ret

000035be <dwt_setrxtimeout>:
    35be:	0f 93       	push	r16
    35c0:	1f 93       	push	r17
    35c2:	cf 93       	push	r28
    35c4:	8c 01       	movw	r16, r24
    35c6:	63 e0       	ldi	r22, 0x03	; 3
    35c8:	70 e0       	ldi	r23, 0x00	; 0
    35ca:	84 e0       	ldi	r24, 0x04	; 4
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	e6 da       	rcall	.-2612   	; 0x2b9c <dwt_read8bitoffsetreg>
    35d0:	c8 2f       	mov	r28, r24
    35d2:	01 15       	cp	r16, r1
    35d4:	11 05       	cpc	r17, r1
    35d6:	d9 f0       	breq	.+54     	; 0x360e <dwt_setrxtimeout+0x50>
    35d8:	a8 01       	movw	r20, r16
    35da:	60 e0       	ldi	r22, 0x00	; 0
    35dc:	70 e0       	ldi	r23, 0x00	; 0
    35de:	8c e0       	ldi	r24, 0x0C	; 12
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	08 db       	rcall	.-2544   	; 0x2bf4 <dwt_write16bitoffsetreg>
    35e4:	e0 91 b9 20 	lds	r30, 0x20B9
    35e8:	f0 91 ba 20 	lds	r31, 0x20BA
    35ec:	00 89       	ldd	r16, Z+16	; 0x10
    35ee:	11 89       	ldd	r17, Z+17	; 0x11
    35f0:	22 89       	ldd	r18, Z+18	; 0x12
    35f2:	33 89       	ldd	r19, Z+19	; 0x13
    35f4:	30 61       	ori	r19, 0x10	; 16
    35f6:	00 8b       	std	Z+16, r16	; 0x10
    35f8:	11 8b       	std	Z+17, r17	; 0x11
    35fa:	22 8b       	std	Z+18, r18	; 0x12
    35fc:	33 8b       	std	Z+19, r19	; 0x13
    35fe:	4c 2f       	mov	r20, r28
    3600:	40 61       	ori	r20, 0x10	; 16
    3602:	63 e0       	ldi	r22, 0x03	; 3
    3604:	70 e0       	ldi	r23, 0x00	; 0
    3606:	84 e0       	ldi	r24, 0x04	; 4
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	de da       	rcall	.-2628   	; 0x2bc8 <dwt_write8bitoffsetreg>
    360c:	14 c0       	rjmp	.+40     	; 0x3636 <dwt_setrxtimeout+0x78>
    360e:	e0 91 b9 20 	lds	r30, 0x20B9
    3612:	f0 91 ba 20 	lds	r31, 0x20BA
    3616:	00 89       	ldd	r16, Z+16	; 0x10
    3618:	11 89       	ldd	r17, Z+17	; 0x11
    361a:	22 89       	ldd	r18, Z+18	; 0x12
    361c:	33 89       	ldd	r19, Z+19	; 0x13
    361e:	3f 7e       	andi	r19, 0xEF	; 239
    3620:	00 8b       	std	Z+16, r16	; 0x10
    3622:	11 8b       	std	Z+17, r17	; 0x11
    3624:	22 8b       	std	Z+18, r18	; 0x12
    3626:	33 8b       	std	Z+19, r19	; 0x13
    3628:	48 2f       	mov	r20, r24
    362a:	4f 7e       	andi	r20, 0xEF	; 239
    362c:	63 e0       	ldi	r22, 0x03	; 3
    362e:	70 e0       	ldi	r23, 0x00	; 0
    3630:	84 e0       	ldi	r24, 0x04	; 4
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	c9 da       	rcall	.-2670   	; 0x2bc8 <dwt_write8bitoffsetreg>
    3636:	cf 91       	pop	r28
    3638:	1f 91       	pop	r17
    363a:	0f 91       	pop	r16
    363c:	08 95       	ret

0000363e <dwt_setinterrupt>:
    363e:	cf 92       	push	r12
    3640:	df 92       	push	r13
    3642:	ef 92       	push	r14
    3644:	ff 92       	push	r15
    3646:	1f 93       	push	r17
    3648:	cf 93       	push	r28
    364a:	df 93       	push	r29
    364c:	6b 01       	movw	r12, r22
    364e:	7c 01       	movw	r14, r24
    3650:	14 2f       	mov	r17, r20
    3652:	0b d2       	rcall	.+1046   	; 0x3a6a <decamutexon>
    3654:	ec 01       	movw	r28, r24
    3656:	60 e0       	ldi	r22, 0x00	; 0
    3658:	70 e0       	ldi	r23, 0x00	; 0
    365a:	8e e0       	ldi	r24, 0x0E	; 14
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	4b da       	rcall	.-2922   	; 0x2af6 <dwt_read32bitoffsetreg>
    3660:	11 23       	and	r17, r17
    3662:	39 f0       	breq	.+14     	; 0x3672 <dwt_setinterrupt+0x34>
    3664:	9b 01       	movw	r18, r22
    3666:	ac 01       	movw	r20, r24
    3668:	2c 29       	or	r18, r12
    366a:	3d 29       	or	r19, r13
    366c:	4e 29       	or	r20, r14
    366e:	5f 29       	or	r21, r15
    3670:	0a c0       	rjmp	.+20     	; 0x3686 <dwt_setinterrupt+0x48>
    3672:	c0 94       	com	r12
    3674:	d0 94       	com	r13
    3676:	e0 94       	com	r14
    3678:	f0 94       	com	r15
    367a:	9b 01       	movw	r18, r22
    367c:	ac 01       	movw	r20, r24
    367e:	2c 21       	and	r18, r12
    3680:	3d 21       	and	r19, r13
    3682:	4e 21       	and	r20, r14
    3684:	5f 21       	and	r21, r15
    3686:	60 e0       	ldi	r22, 0x00	; 0
    3688:	70 e0       	ldi	r23, 0x00	; 0
    368a:	8e e0       	ldi	r24, 0x0E	; 14
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	d8 da       	rcall	.-2640   	; 0x2c40 <dwt_write32bitoffsetreg>
    3690:	ce 01       	movw	r24, r28
    3692:	ef d1       	rcall	.+990    	; 0x3a72 <decamutexoff>
    3694:	df 91       	pop	r29
    3696:	cf 91       	pop	r28
    3698:	1f 91       	pop	r17
    369a:	ff 90       	pop	r15
    369c:	ef 90       	pop	r14
    369e:	df 90       	pop	r13
    36a0:	cf 90       	pop	r12
    36a2:	08 95       	ret

000036a4 <dwt_rxreset>:
 * no return value
 */
void dwt_rxreset(void)
{
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
    36a4:	40 ee       	ldi	r20, 0xE0	; 224
    36a6:	63 e0       	ldi	r22, 0x03	; 3
    36a8:	70 e0       	ldi	r23, 0x00	; 0
    36aa:	86 e3       	ldi	r24, 0x36	; 54
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	8c da       	rcall	.-2792   	; 0x2bc8 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
    36b0:	40 ef       	ldi	r20, 0xF0	; 240
    36b2:	63 e0       	ldi	r22, 0x03	; 3
    36b4:	70 e0       	ldi	r23, 0x00	; 0
    36b6:	86 e3       	ldi	r24, 0x36	; 54
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	86 ca       	rjmp	.-2804   	; 0x2bc8 <dwt_write8bitoffsetreg>
    36bc:	08 95       	ret

000036be <dwt_isr>:
 * output parameters
 *
 * no return value
 */
void dwt_isr(void)
{
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
    36ce:	c0 91 b9 20 	lds	r28, 0x20B9
    36d2:	d0 91 ba 20 	lds	r29, 0x20BA
    36d6:	60 e0       	ldi	r22, 0x00	; 0
    36d8:	70 e0       	ldi	r23, 0x00	; 0
    36da:	8f e0       	ldi	r24, 0x0F	; 15
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	0b da       	rcall	.-3050   	; 0x2af6 <dwt_read32bitoffsetreg>
    36e0:	6b 01       	movw	r12, r22
    36e2:	7c 01       	movw	r14, r24
    36e4:	6f 8b       	std	Y+23, r22	; 0x17
    36e6:	78 8f       	std	Y+24, r23	; 0x18
    36e8:	89 8f       	std	Y+25, r24	; 0x19
    36ea:	9a 8f       	std	Y+26, r25	; 0x1a

    // Handle RX good frame event
    if(status & SYS_STATUS_RXFCG)
    36ec:	76 ff       	sbrs	r23, 6
    36ee:	6d c0       	rjmp	.+218    	; 0x37ca <dwt_isr+0x10c>
    {
        uint16 finfo16;
        uint16 len;

        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	3f e6       	ldi	r19, 0x6F	; 111
    36f4:	40 e0       	ldi	r20, 0x00	; 0
    36f6:	50 e0       	ldi	r21, 0x00	; 0
    36f8:	60 e0       	ldi	r22, 0x00	; 0
    36fa:	70 e0       	ldi	r23, 0x00	; 0
    36fc:	8f e0       	ldi	r24, 0x0F	; 15
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	9f da       	rcall	.-2754   	; 0x2c40 <dwt_write32bitoffsetreg>

        pdw1000local->cbData.rx_flags = 0;
    3702:	e0 91 b9 20 	lds	r30, 0x20B9
    3706:	f0 91 ba 20 	lds	r31, 0x20BA
    370a:	17 8e       	std	Z+31, r1	; 0x1f

        // Read frame info - Only the first two bytes of the register are used here.
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
    370c:	60 e0       	ldi	r22, 0x00	; 0
    370e:	70 e0       	ldi	r23, 0x00	; 0
    3710:	80 e1       	ldi	r24, 0x10	; 16
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	26 da       	rcall	.-2996   	; 0x2b62 <dwt_read16bitoffsetreg>

        // Report frame length - Standard frame length up to 127, extended frame length up to 1023 bytes
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
        if(pdw1000local->longFrames == 0)
    3716:	e0 91 b9 20 	lds	r30, 0x20B9
    371a:	f0 91 ba 20 	lds	r31, 0x20BA
    371e:	20 85       	ldd	r18, Z+8	; 0x08
    3720:	22 23       	and	r18, r18
    3722:	19 f0       	breq	.+6      	; 0x372a <dwt_isr+0x6c>

        // Read frame info - Only the first two bytes of the register are used here.
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);

        // Report frame length - Standard frame length up to 127, extended frame length up to 1023 bytes
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
    3724:	9c 01       	movw	r18, r24
    3726:	33 70       	andi	r19, 0x03	; 3
    3728:	03 c0       	rjmp	.+6      	; 0x3730 <dwt_isr+0x72>
        if(pdw1000local->longFrames == 0)
        {
            len &= RX_FINFO_RXFLEN_MASK;
    372a:	9c 01       	movw	r18, r24
    372c:	2f 77       	andi	r18, 0x7F	; 127
    372e:	33 27       	eor	r19, r19
        }
        pdw1000local->cbData.datalength = len;
    3730:	23 8f       	std	Z+27, r18	; 0x1b
    3732:	34 8f       	std	Z+28, r19	; 0x1c

        // Report ranging bit
        if(finfo16 & RX_FINFO_RNG)
    3734:	99 23       	and	r25, r25
    3736:	1c f4       	brge	.+6      	; 0x373e <dwt_isr+0x80>
        {
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
    3738:	87 8d       	ldd	r24, Z+31	; 0x1f
    373a:	81 60       	ori	r24, 0x01	; 1
    373c:	87 8f       	std	Z+31, r24	; 0x1f
        }

        // Report frame control - First bytes of the received frame.
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, pdw1000local->cbData.fctrl);
    373e:	8f 01       	movw	r16, r30
    3740:	03 5e       	subi	r16, 0xE3	; 227
    3742:	1f 4f       	sbci	r17, 0xFF	; 255
    3744:	22 e0       	ldi	r18, 0x02	; 2
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	40 e0       	ldi	r20, 0x00	; 0
    374a:	50 e0       	ldi	r21, 0x00	; 0
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	70 e0       	ldi	r23, 0x00	; 0
    3750:	81 e1       	ldi	r24, 0x11	; 17
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	75 d9       	rcall	.-3350   	; 0x2a40 <dwt_readfromdevice>

        // Because of a previous frame not being received properly, AAT bit can be set upon the proper reception of a frame not requesting for
        // acknowledgement (ACK frame is not actually sent though). If the AAT bit is set, check ACK request bit in frame control to confirm (this
        // implementation works only for IEEE802.15.4-2011 compliant frames).
        // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
    3756:	c3 fe       	sbrs	r12, 3
    3758:	1e c0       	rjmp	.+60     	; 0x3796 <dwt_isr+0xd8>
    375a:	e0 91 b9 20 	lds	r30, 0x20B9
    375e:	f0 91 ba 20 	lds	r31, 0x20BA
    3762:	85 8d       	ldd	r24, Z+29	; 0x1d
    3764:	85 fd       	sbrc	r24, 5
    3766:	17 c0       	rjmp	.+46     	; 0x3796 <dwt_isr+0xd8>
        {
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
    3768:	28 e0       	ldi	r18, 0x08	; 8
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	40 e0       	ldi	r20, 0x00	; 0
    376e:	50 e0       	ldi	r21, 0x00	; 0
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	70 e0       	ldi	r23, 0x00	; 0
    3774:	8f e0       	ldi	r24, 0x0F	; 15
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	63 da       	rcall	.-2874   	; 0x2c40 <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
    377a:	e0 91 b9 20 	lds	r30, 0x20B9
    377e:	f0 91 ba 20 	lds	r31, 0x20BA
    3782:	87 89       	ldd	r24, Z+23	; 0x17
    3784:	90 8d       	ldd	r25, Z+24	; 0x18
    3786:	a1 8d       	ldd	r26, Z+25	; 0x19
    3788:	b2 8d       	ldd	r27, Z+26	; 0x1a
    378a:	87 7f       	andi	r24, 0xF7	; 247
    378c:	87 8b       	std	Z+23, r24	; 0x17
    378e:	90 8f       	std	Z+24, r25	; 0x18
    3790:	a1 8f       	std	Z+25, r26	; 0x19
    3792:	b2 8f       	std	Z+26, r27	; 0x1a
            pdw1000local->wait4resp = 0;
    3794:	16 8a       	std	Z+22, r1	; 0x16
        }

        // Call the corresponding callback if present
        if(pdw1000local->cbRxOk != NULL)
    3796:	a0 91 b9 20 	lds	r26, 0x20B9
    379a:	b0 91 ba 20 	lds	r27, 0x20BA
    379e:	92 96       	adiw	r26, 0x22	; 34
    37a0:	ed 91       	ld	r30, X+
    37a2:	fc 91       	ld	r31, X
    37a4:	93 97       	sbiw	r26, 0x23	; 35
    37a6:	30 97       	sbiw	r30, 0x00	; 0
    37a8:	19 f0       	breq	.+6      	; 0x37b0 <dwt_isr+0xf2>
        {
            pdw1000local->cbRxOk(&pdw1000local->cbData);
    37aa:	cd 01       	movw	r24, r26
    37ac:	47 96       	adiw	r24, 0x17	; 23
    37ae:	09 95       	icall
        }

        if (pdw1000local->dblbuffon)
    37b0:	e0 91 b9 20 	lds	r30, 0x20B9
    37b4:	f0 91 ba 20 	lds	r31, 0x20BA
    37b8:	87 85       	ldd	r24, Z+15	; 0x0f
    37ba:	88 23       	and	r24, r24
    37bc:	31 f0       	breq	.+12     	; 0x37ca <dwt_isr+0x10c>
        {
            // Toggle the Host side Receive Buffer Pointer
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1);
    37be:	41 e0       	ldi	r20, 0x01	; 1
    37c0:	63 e0       	ldi	r22, 0x03	; 3
    37c2:	70 e0       	ldi	r23, 0x00	; 0
    37c4:	8d e0       	ldi	r24, 0x0D	; 13
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	ff d9       	rcall	.-3074   	; 0x2bc8 <dwt_write8bitoffsetreg>
        }
    }

    // Handle TX confirmation event
    if(status & SYS_STATUS_TXFRS)
    37ca:	c7 fe       	sbrs	r12, 7
    37cc:	21 c0       	rjmp	.+66     	; 0x3810 <dwt_isr+0x152>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
    37ce:	28 ef       	ldi	r18, 0xF8	; 248
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	40 e0       	ldi	r20, 0x00	; 0
    37d4:	50 e0       	ldi	r21, 0x00	; 0
    37d6:	60 e0       	ldi	r22, 0x00	; 0
    37d8:	70 e0       	ldi	r23, 0x00	; 0
    37da:	8f e0       	ldi	r24, 0x0F	; 15
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	30 da       	rcall	.-2976   	; 0x2c40 <dwt_write32bitoffsetreg>
        // In the case where this TXFRS interrupt is due to the automatic transmission of an ACK solicited by a response (with ACK request bit set)
        // that we receive through using wait4resp to a previous TX (and assuming that the IRQ processing of that TX has already been handled), then
        // we need to handle the IC issue which turns on the RX again in this situation (i.e. because it is wrongly applying the wait4resp after the
        // ACK TX).
        // See section "Transmit and automatically wait for response" in DW1000 User Manual
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)
    37e0:	c3 fe       	sbrs	r12, 3
    37e2:	09 c0       	rjmp	.+18     	; 0x37f6 <dwt_isr+0x138>
    37e4:	e0 91 b9 20 	lds	r30, 0x20B9
    37e8:	f0 91 ba 20 	lds	r31, 0x20BA
    37ec:	86 89       	ldd	r24, Z+22	; 0x16
    37ee:	88 23       	and	r24, r24
    37f0:	11 f0       	breq	.+4      	; 0x37f6 <dwt_isr+0x138>
        {
            dwt_forcetrxoff(); // Turn the RX off
    37f2:	6e de       	rcall	.-804    	; 0x34d0 <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
    37f4:	57 df       	rcall	.-338    	; 0x36a4 <dwt_rxreset>
        }

        // Call the corresponding callback if present
        if(pdw1000local->cbTxDone != NULL)
    37f6:	a0 91 b9 20 	lds	r26, 0x20B9
    37fa:	b0 91 ba 20 	lds	r27, 0x20BA
    37fe:	90 96       	adiw	r26, 0x20	; 32
    3800:	ed 91       	ld	r30, X+
    3802:	fc 91       	ld	r31, X
    3804:	91 97       	sbiw	r26, 0x21	; 33
    3806:	30 97       	sbiw	r30, 0x00	; 0
    3808:	19 f0       	breq	.+6      	; 0x3810 <dwt_isr+0x152>
        {
            pdw1000local->cbTxDone(&pdw1000local->cbData);
    380a:	cd 01       	movw	r24, r26
    380c:	47 96       	adiw	r24, 0x17	; 23
    380e:	09 95       	icall
        }
    }

    // Handle frame reception/preamble detect timeout events
    if(status & SYS_STATUS_ALL_RX_TO)
    3810:	d7 01       	movw	r26, r14
    3812:	c6 01       	movw	r24, r12
    3814:	88 27       	eor	r24, r24
    3816:	99 27       	eor	r25, r25
    3818:	a2 72       	andi	r26, 0x22	; 34
    381a:	bb 27       	eor	r27, r27
    381c:	89 2b       	or	r24, r25
    381e:	8a 2b       	or	r24, r26
    3820:	8b 2b       	or	r24, r27
    3822:	e9 f0       	breq	.+58     	; 0x385e <dwt_isr+0x1a0>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	42 e0       	ldi	r20, 0x02	; 2
    382a:	50 e0       	ldi	r21, 0x00	; 0
    382c:	60 e0       	ldi	r22, 0x00	; 0
    382e:	70 e0       	ldi	r23, 0x00	; 0
    3830:	8f e0       	ldi	r24, 0x0F	; 15
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	05 da       	rcall	.-3062   	; 0x2c40 <dwt_write32bitoffsetreg>

        pdw1000local->wait4resp = 0;
    3836:	e0 91 b9 20 	lds	r30, 0x20B9
    383a:	f0 91 ba 20 	lds	r31, 0x20BA
    383e:	16 8a       	std	Z+22, r1	; 0x16

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        dwt_forcetrxoff();
    3840:	47 de       	rcall	.-882    	; 0x34d0 <dwt_forcetrxoff>
        dwt_rxreset();
    3842:	30 df       	rcall	.-416    	; 0x36a4 <dwt_rxreset>

        // Call the corresponding callback if present
        if(pdw1000local->cbRxTo != NULL)
    3844:	a0 91 b9 20 	lds	r26, 0x20B9
    3848:	b0 91 ba 20 	lds	r27, 0x20BA
    384c:	94 96       	adiw	r26, 0x24	; 36
    384e:	ed 91       	ld	r30, X+
    3850:	fc 91       	ld	r31, X
    3852:	95 97       	sbiw	r26, 0x25	; 37
    3854:	30 97       	sbiw	r30, 0x00	; 0
    3856:	19 f0       	breq	.+6      	; 0x385e <dwt_isr+0x1a0>
        {
            pdw1000local->cbRxTo(&pdw1000local->cbData);
    3858:	cd 01       	movw	r24, r26
    385a:	47 96       	adiw	r24, 0x17	; 23
    385c:	09 95       	icall
        }
    }

    // Handle RX errors events
    if(status & SYS_STATUS_ALL_RX_ERR)
    385e:	cc 24       	eor	r12, r12
    3860:	80 e9       	ldi	r24, 0x90	; 144
    3862:	d8 22       	and	r13, r24
    3864:	85 e0       	ldi	r24, 0x05	; 5
    3866:	e8 22       	and	r14, r24
    3868:	84 e2       	ldi	r24, 0x24	; 36
    386a:	f8 22       	and	r15, r24
    386c:	cd 28       	or	r12, r13
    386e:	ce 28       	or	r12, r14
    3870:	cf 28       	or	r12, r15
    3872:	e9 f0       	breq	.+58     	; 0x38ae <dwt_isr+0x1f0>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e9       	ldi	r19, 0x90	; 144
    3878:	45 e0       	ldi	r20, 0x05	; 5
    387a:	54 e2       	ldi	r21, 0x24	; 36
    387c:	60 e0       	ldi	r22, 0x00	; 0
    387e:	70 e0       	ldi	r23, 0x00	; 0
    3880:	8f e0       	ldi	r24, 0x0F	; 15
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	dd d9       	rcall	.-3142   	; 0x2c40 <dwt_write32bitoffsetreg>

        pdw1000local->wait4resp = 0;
    3886:	e0 91 b9 20 	lds	r30, 0x20B9
    388a:	f0 91 ba 20 	lds	r31, 0x20BA
    388e:	16 8a       	std	Z+22, r1	; 0x16

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        dwt_forcetrxoff();
    3890:	1f de       	rcall	.-962    	; 0x34d0 <dwt_forcetrxoff>
        dwt_rxreset();
    3892:	08 df       	rcall	.-496    	; 0x36a4 <dwt_rxreset>

        // Call the corresponding callback if present
        if(pdw1000local->cbRxErr != NULL)
    3894:	a0 91 b9 20 	lds	r26, 0x20B9
    3898:	b0 91 ba 20 	lds	r27, 0x20BA
    389c:	96 96       	adiw	r26, 0x26	; 38
    389e:	ed 91       	ld	r30, X+
    38a0:	fc 91       	ld	r31, X
    38a2:	97 97       	sbiw	r26, 0x27	; 39
    38a4:	30 97       	sbiw	r30, 0x00	; 0
    38a6:	19 f0       	breq	.+6      	; 0x38ae <dwt_isr+0x1f0>
        {
            pdw1000local->cbRxErr(&pdw1000local->cbData);
    38a8:	cd 01       	movw	r24, r26
    38aa:	47 96       	adiw	r24, 0x17	; 23
    38ac:	09 95       	icall
        }
    }
}
    38ae:	df 91       	pop	r29
    38b0:	cf 91       	pop	r28
    38b2:	1f 91       	pop	r17
    38b4:	0f 91       	pop	r16
    38b6:	ff 90       	pop	r15
    38b8:	ef 90       	pop	r14
    38ba:	df 90       	pop	r13
    38bc:	cf 90       	pop	r12
    38be:	08 95       	ret

000038c0 <dwt_softreset>:
 *
 * no return value
 */
void dwt_softreset(void)
{
    _dwt_disablesequencing();
    38c0:	97 dd       	rcall	.-1234   	; 0x33f0 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
    38c2:	40 e0       	ldi	r20, 0x00	; 0
    38c4:	50 e0       	ldi	r21, 0x00	; 0
    38c6:	60 e0       	ldi	r22, 0x00	; 0
    38c8:	70 e0       	ldi	r23, 0x00	; 0
    38ca:	8c e2       	ldi	r24, 0x2C	; 44
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	92 d9       	rcall	.-3292   	; 0x2bf4 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
    38d0:	40 e0       	ldi	r20, 0x00	; 0
    38d2:	66 e0       	ldi	r22, 0x06	; 6
    38d4:	70 e0       	ldi	r23, 0x00	; 0
    38d6:	8c e2       	ldi	r24, 0x2C	; 44
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	76 d9       	rcall	.-3348   	; 0x2bc8 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
    38dc:	2a da       	rcall	.-2988   	; 0x2d32 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
    38de:	40 e0       	ldi	r20, 0x00	; 0
    38e0:	63 e0       	ldi	r22, 0x03	; 3
    38e2:	70 e0       	ldi	r23, 0x00	; 0
    38e4:	86 e3       	ldi	r24, 0x36	; 54
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	6f d9       	rcall	.-3362   	; 0x2bc8 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	e0 d4       	rcall	.+2496   	; 0x42b0 <deca_sleep>

    // Clear reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
    38f0:	40 ef       	ldi	r20, 0xF0	; 240
    38f2:	63 e0       	ldi	r22, 0x03	; 3
    38f4:	70 e0       	ldi	r23, 0x00	; 0
    38f6:	86 e3       	ldi	r24, 0x36	; 54
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	66 d9       	rcall	.-3380   	; 0x2bc8 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
    38fc:	e0 91 b9 20 	lds	r30, 0x20B9
    3900:	f0 91 ba 20 	lds	r31, 0x20BA
    3904:	16 8a       	std	Z+22, r1	; 0x16
    3906:	08 95       	ret

00003908 <dwt_setxtaltrim>:
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
    3908:	8f 71       	andi	r24, 0x1F	; 31
    390a:	48 2f       	mov	r20, r24
    390c:	40 66       	ori	r20, 0x60	; 96
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
    390e:	6e e0       	ldi	r22, 0x0E	; 14
    3910:	70 e0       	ldi	r23, 0x00	; 0
    3912:	8b e2       	ldi	r24, 0x2B	; 43
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	58 c9       	rjmp	.-3408   	; 0x2bc8 <dwt_write8bitoffsetreg>
    3918:	08 95       	ret

0000391a <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(uint16 config)
{
    391a:	0f 93       	push	r16
    391c:	1f 93       	push	r17
    391e:	cf 93       	push	r28
    3920:	df 93       	push	r29
    3922:	c8 2f       	mov	r28, r24
    uint16 otp_addr = 0;
    uint32 ldo_tune = 0;

    pdw1000local->dblbuffon = 0; // Double buffer mode off by default
    3924:	e0 91 b9 20 	lds	r30, 0x20B9
    3928:	f0 91 ba 20 	lds	r31, 0x20BA
    392c:	17 86       	std	Z+15, r1	; 0x0f
    pdw1000local->wait4resp = 0;
    392e:	16 8a       	std	Z+22, r1	; 0x16
    pdw1000local->sleep_mode = 0;
    3930:	14 8a       	std	Z+20, r1	; 0x14
    3932:	15 8a       	std	Z+21, r1	; 0x15

    pdw1000local->cbTxDone = NULL;
    3934:	10 a2       	std	Z+32, r1	; 0x20
    3936:	11 a2       	std	Z+33, r1	; 0x21
    pdw1000local->cbRxOk = NULL;
    3938:	12 a2       	std	Z+34, r1	; 0x22
    393a:	13 a2       	std	Z+35, r1	; 0x23
    pdw1000local->cbRxTo = NULL;
    393c:	14 a2       	std	Z+36, r1	; 0x24
    393e:	15 a2       	std	Z+37, r1	; 0x25
    pdw1000local->cbRxErr = NULL;
    3940:	16 a2       	std	Z+38, r1	; 0x26
    3942:	17 a2       	std	Z+39, r1	; 0x27

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
    3944:	08 d9       	rcall	.-3568   	; 0x2b56 <dwt_readdevid>
    3946:	60 33       	cpi	r22, 0x30	; 48
    3948:	71 40       	sbci	r23, 0x01	; 1
    394a:	8a 4c       	sbci	r24, 0xCA	; 202
    394c:	9e 4d       	sbci	r25, 0xDE	; 222
    394e:	09 f0       	breq	.+2      	; 0x3952 <dwt_initialise+0x38>
    3950:	85 c0       	rjmp	.+266    	; 0x3a5c <dwt_initialise+0x142>
    {
        return DWT_ERROR ;
    }

    // Make sure the device is completely reset before starting initialisation
    dwt_softreset();
    3952:	b6 df       	rcall	.-148    	; 0x38c0 <dwt_softreset>

    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
    3954:	80 e0       	ldi	r24, 0x00	; 0
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	cc dc       	rcall	.-1640   	; 0x32f2 <_dwt_enableclocks>

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
    395a:	44 e0       	ldi	r20, 0x04	; 4
    395c:	60 e0       	ldi	r22, 0x00	; 0
    395e:	70 e0       	ldi	r23, 0x00	; 0
    3960:	84 e2       	ldi	r24, 0x24	; 36
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	31 d9       	rcall	.-3486   	; 0x2bc8 <dwt_write8bitoffsetreg>

    // Read OTP revision number
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
    3966:	6e e1       	ldi	r22, 0x1E	; 30
    3968:	70 e0       	ldi	r23, 0x00	; 0
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	c9 d9       	rcall	.-3182   	; 0x2d02 <_dwt_otpread>
    3970:	d6 2f       	mov	r29, r22
    pdw1000local->otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
    3972:	e0 91 b9 20 	lds	r30, 0x20B9
    3976:	f0 91 ba 20 	lds	r31, 0x20BA
    397a:	71 87       	std	Z+9, r23	; 0x09

    // Load LDO tune from OTP and kick it if there is a value actually programmed.
    ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
    397c:	64 e0       	ldi	r22, 0x04	; 4
    397e:	70 e0       	ldi	r23, 0x00	; 0
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	be d9       	rcall	.-3204   	; 0x2d02 <_dwt_otpread>
    if((ldo_tune & 0xFF) != 0)
    3986:	66 23       	and	r22, r22
    3988:	79 f0       	breq	.+30     	; 0x39a8 <dwt_initialise+0x8e>
    {
        // Kick LDO tune
        dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDE kick bit
    398a:	42 e0       	ldi	r20, 0x02	; 2
    398c:	62 e1       	ldi	r22, 0x12	; 18
    398e:	70 e0       	ldi	r23, 0x00	; 0
    3990:	8d e2       	ldi	r24, 0x2D	; 45
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	19 d9       	rcall	.-3534   	; 0x2bc8 <dwt_write8bitoffsetreg>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
    3996:	e0 91 b9 20 	lds	r30, 0x20B9
    399a:	f0 91 ba 20 	lds	r31, 0x20BA
    399e:	84 89       	ldd	r24, Z+20	; 0x14
    39a0:	95 89       	ldd	r25, Z+21	; 0x15
    39a2:	90 61       	ori	r25, 0x10	; 16
    39a4:	84 8b       	std	Z+20, r24	; 0x14
    39a6:	95 8b       	std	Z+21, r25	; 0x15
    }

    // Load Part and Lot ID from OTP
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
    39a8:	00 91 b9 20 	lds	r16, 0x20B9
    39ac:	10 91 ba 20 	lds	r17, 0x20BA
    39b0:	66 e0       	ldi	r22, 0x06	; 6
    39b2:	70 e0       	ldi	r23, 0x00	; 0
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	a4 d9       	rcall	.-3256   	; 0x2d02 <_dwt_otpread>
    39ba:	f8 01       	movw	r30, r16
    39bc:	60 83       	st	Z, r22
    39be:	71 83       	std	Z+1, r23	; 0x01
    39c0:	82 83       	std	Z+2, r24	; 0x02
    39c2:	93 83       	std	Z+3, r25	; 0x03
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
    39c4:	00 91 b9 20 	lds	r16, 0x20B9
    39c8:	10 91 ba 20 	lds	r17, 0x20BA
    39cc:	67 e0       	ldi	r22, 0x07	; 7
    39ce:	70 e0       	ldi	r23, 0x00	; 0
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	96 d9       	rcall	.-3284   	; 0x2d02 <_dwt_otpread>
    39d6:	f8 01       	movw	r30, r16
    39d8:	64 83       	std	Z+4, r22	; 0x04
    39da:	75 83       	std	Z+5, r23	; 0x05
    39dc:	86 83       	std	Z+6, r24	; 0x06
    39de:	97 83       	std	Z+7, r25	; 0x07

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    pdw1000local->init_xtrim = otp_addr & 0x1F;
    39e0:	e0 91 b9 20 	lds	r30, 0x20B9
    39e4:	f0 91 ba 20 	lds	r31, 0x20BA
    39e8:	df 71       	andi	r29, 0x1F	; 31
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
    39ea:	11 f0       	breq	.+4      	; 0x39f0 <dwt_initialise+0xd6>
    // Load Part and Lot ID from OTP
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    pdw1000local->init_xtrim = otp_addr & 0x1F;
    39ec:	d6 87       	std	Z+14, r29	; 0x0e
    39ee:	02 c0       	rjmp	.+4      	; 0x39f4 <dwt_initialise+0xda>
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
    {
        pdw1000local->init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
    39f0:	80 e1       	ldi	r24, 0x10	; 16
    39f2:	86 87       	std	Z+14, r24	; 0x0e
    }
    // Configure XTAL trim
    dwt_setxtaltrim(pdw1000local->init_xtrim);
    39f4:	86 85       	ldd	r24, Z+14	; 0x0e
    39f6:	88 df       	rcall	.-240    	; 0x3908 <dwt_setxtaltrim>

    // Load leading edge detect code
    if(config & DWT_LOADUCODE)
    39f8:	c0 ff       	sbrs	r28, 0
    39fa:	0b c0       	rjmp	.+22     	; 0x3a12 <dwt_initialise+0xf8>
    {
        _dwt_loaducodefromrom();
    39fc:	e8 dc       	rcall	.-1584   	; 0x33ce <_dwt_loaducodefromrom>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up
    39fe:	e0 91 b9 20 	lds	r30, 0x20B9
    3a02:	f0 91 ba 20 	lds	r31, 0x20BA
    3a06:	84 89       	ldd	r24, Z+20	; 0x14
    3a08:	95 89       	ldd	r25, Z+21	; 0x15
    3a0a:	98 60       	ori	r25, 0x08	; 8
    3a0c:	84 8b       	std	Z+20, r24	; 0x14
    3a0e:	95 8b       	std	Z+21, r25	; 0x15
    3a10:	0c c0       	rjmp	.+24     	; 0x3a2a <dwt_initialise+0x110>
    }
    else // Should disable the LDERUN enable bit in 0x36, 0x4
    {
        uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
    3a12:	65 e0       	ldi	r22, 0x05	; 5
    3a14:	70 e0       	ldi	r23, 0x00	; 0
    3a16:	86 e3       	ldi	r24, 0x36	; 54
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	a3 d8       	rcall	.-3770   	; 0x2b62 <dwt_read16bitoffsetreg>
        rega &= 0xFDFF ; // Clear LDERUN bit
    3a1c:	ac 01       	movw	r20, r24
    3a1e:	5d 7f       	andi	r21, 0xFD	; 253
        dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
    3a20:	65 e0       	ldi	r22, 0x05	; 5
    3a22:	70 e0       	ldi	r23, 0x00	; 0
    3a24:	86 e3       	ldi	r24, 0x36	; 54
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	e5 d8       	rcall	.-3638   	; 0x2bf4 <dwt_write16bitoffsetreg>
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	61 dc       	rcall	.-1854   	; 0x32f2 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
    3a30:	40 e0       	ldi	r20, 0x00	; 0
    3a32:	6a e0       	ldi	r22, 0x0A	; 10
    3a34:	70 e0       	ldi	r23, 0x00	; 0
    3a36:	8c e2       	ldi	r24, 0x2C	; 44
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	c6 d8       	rcall	.-3700   	; 0x2bc8 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
    3a3c:	c0 91 b9 20 	lds	r28, 0x20B9
    3a40:	d0 91 ba 20 	lds	r29, 0x20BA
    3a44:	60 e0       	ldi	r22, 0x00	; 0
    3a46:	70 e0       	ldi	r23, 0x00	; 0
    3a48:	84 e0       	ldi	r24, 0x04	; 4
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	54 d8       	rcall	.-3928   	; 0x2af6 <dwt_read32bitoffsetreg>
    3a4e:	68 8b       	std	Y+16, r22	; 0x10
    3a50:	79 8b       	std	Y+17, r23	; 0x11
    3a52:	8a 8b       	std	Y+18, r24	; 0x12
    3a54:	9b 8b       	std	Y+19, r25	; 0x13

    return DWT_SUCCESS ;
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	02 c0       	rjmp	.+4      	; 0x3a60 <dwt_initialise+0x146>
    pdw1000local->cbRxErr = NULL;

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
    {
        return DWT_ERROR ;
    3a5c:	8f ef       	ldi	r24, 0xFF	; 255
    3a5e:	9f ef       	ldi	r25, 0xFF	; 255
    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register

    return DWT_SUCCESS ;

} // end dwt_initialise()
    3a60:	df 91       	pop	r29
    3a62:	cf 91       	pop	r28
    3a64:	1f 91       	pop	r17
    3a66:	0f 91       	pop	r16
    3a68:	08 95       	ret

00003a6a <decamutexon>:
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
	decaIrqStatus_t s = 1;
	cli();
    3a6a:	f8 94       	cli
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	08 95       	ret

00003a72 <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	sei();
    3a72:	78 94       	sei
    3a74:	08 95       	ret

00003a76 <final_msg_get_ts>:
		dwt_rxreset();
	}

	return UWB_RX_FAILED;

}
    3a76:	8f 92       	push	r8
    3a78:	9f 92       	push	r9
    3a7a:	af 92       	push	r10
    3a7c:	bf 92       	push	r11
    3a7e:	cf 92       	push	r12
    3a80:	df 92       	push	r13
    3a82:	ef 92       	push	r14
    3a84:	ff 92       	push	r15
    3a86:	0f 93       	push	r16
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29
    3a8c:	db 01       	movw	r26, r22
    3a8e:	1d 92       	st	X+, r1
    3a90:	1d 92       	st	X+, r1
    3a92:	1d 92       	st	X+, r1
    3a94:	1c 92       	st	X, r1
    3a96:	13 97       	sbiw	r26, 0x03	; 3
    3a98:	ec 01       	movw	r28, r24
    3a9a:	e0 e0       	ldi	r30, 0x00	; 0
    3a9c:	f0 e0       	ldi	r31, 0x00	; 0
    3a9e:	29 91       	ld	r18, Y+
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	40 e0       	ldi	r20, 0x00	; 0
    3aa4:	50 e0       	ldi	r21, 0x00	; 0
    3aa6:	60 e0       	ldi	r22, 0x00	; 0
    3aa8:	70 e0       	ldi	r23, 0x00	; 0
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	0e 2f       	mov	r16, r30
    3ab0:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <__ashldi3>
    3ab4:	82 2e       	mov	r8, r18
    3ab6:	93 2e       	mov	r9, r19
    3ab8:	a4 2e       	mov	r10, r20
    3aba:	b5 2e       	mov	r11, r21
    3abc:	4d 91       	ld	r20, X+
    3abe:	5d 91       	ld	r21, X+
    3ac0:	6d 91       	ld	r22, X+
    3ac2:	7c 91       	ld	r23, X
    3ac4:	13 97       	sbiw	r26, 0x03	; 3
    3ac6:	84 0e       	add	r8, r20
    3ac8:	95 1e       	adc	r9, r21
    3aca:	a6 1e       	adc	r10, r22
    3acc:	b7 1e       	adc	r11, r23
    3ace:	8d 92       	st	X+, r8
    3ad0:	9d 92       	st	X+, r9
    3ad2:	ad 92       	st	X+, r10
    3ad4:	bc 92       	st	X, r11
    3ad6:	13 97       	sbiw	r26, 0x03	; 3
    3ad8:	38 96       	adiw	r30, 0x08	; 8
    3ada:	e0 32       	cpi	r30, 0x20	; 32
    3adc:	f1 05       	cpc	r31, r1
    3ade:	f9 f6       	brne	.-66     	; 0x3a9e <final_msg_get_ts+0x28>
    3ae0:	df 91       	pop	r29
    3ae2:	cf 91       	pop	r28
    3ae4:	0f 91       	pop	r16
    3ae6:	ff 90       	pop	r15
    3ae8:	ef 90       	pop	r14
    3aea:	df 90       	pop	r13
    3aec:	cf 90       	pop	r12
    3aee:	bf 90       	pop	r11
    3af0:	af 90       	pop	r10
    3af2:	9f 90       	pop	r9
    3af4:	8f 90       	pop	r8
    3af6:	08 95       	ret

00003af8 <rx_to_cb>:
    3af8:	88 eb       	ldi	r24, 0xB8	; 184
    3afa:	9b e0       	ldi	r25, 0x0B	; 11
    3afc:	a0 e0       	ldi	r26, 0x00	; 0
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	80 93 e3 20 	sts	0x20E3, r24
    3b04:	90 93 e4 20 	sts	0x20E4, r25
    3b08:	a0 93 e5 20 	sts	0x20E5, r26
    3b0c:	b0 93 e6 20 	sts	0x20E6, r27
    3b10:	81 e0       	ldi	r24, 0x01	; 1
    3b12:	80 93 10 2f 	sts	0x2F10, r24
    3b16:	08 95       	ret

00003b18 <rx_err_cb>:
    3b18:	10 92 e3 20 	sts	0x20E3, r1
    3b1c:	10 92 e4 20 	sts	0x20E4, r1
    3b20:	10 92 e5 20 	sts	0x20E5, r1
    3b24:	10 92 e6 20 	sts	0x20E6, r1
    3b28:	82 e0       	ldi	r24, 0x02	; 2
    3b2a:	80 93 10 2f 	sts	0x2F10, r24
    3b2e:	08 95       	ret

00003b30 <tx_conf_cb>:
    3b30:	08 95       	ret

00003b32 <rx_ok_cb>:
    3b32:	cf 93       	push	r28
    3b34:	df 93       	push	r29
    3b36:	ea ec       	ldi	r30, 0xCA	; 202
    3b38:	fd e2       	ldi	r31, 0x2D	; 45
    3b3a:	29 e4       	ldi	r18, 0x49	; 73
    3b3c:	3e e2       	ldi	r19, 0x2E	; 46
    3b3e:	11 92       	st	Z+, r1
    3b40:	e2 17       	cp	r30, r18
    3b42:	f3 07       	cpc	r31, r19
    3b44:	e1 f7       	brne	.-8      	; 0x3b3e <rx_ok_cb+0xc>
    3b46:	fc 01       	movw	r30, r24
    3b48:	64 81       	ldd	r22, Z+4	; 0x04
    3b4a:	75 81       	ldd	r23, Z+5	; 0x05
    3b4c:	60 38       	cpi	r22, 0x80	; 128
    3b4e:	71 05       	cpc	r23, r1
    3b50:	30 f4       	brcc	.+12     	; 0x3b5e <rx_ok_cb+0x2c>
    3b52:	40 e0       	ldi	r20, 0x00	; 0
    3b54:	50 e0       	ldi	r21, 0x00	; 0
    3b56:	8a ec       	ldi	r24, 0xCA	; 202
    3b58:	9d e2       	ldi	r25, 0x2D	; 45
    3b5a:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <dwt_readrxdata>
    3b5e:	80 91 ca 2d 	lds	r24, 0x2DCA
    3b62:	81 34       	cpi	r24, 0x41	; 65
    3b64:	09 f0       	breq	.+2      	; 0x3b68 <rx_ok_cb+0x36>
    3b66:	6b c0       	rjmp	.+214    	; 0x3c3e <rx_ok_cb+0x10c>
    3b68:	80 91 cb 2d 	lds	r24, 0x2DCB
    3b6c:	88 38       	cpi	r24, 0x88	; 136
    3b6e:	09 f0       	breq	.+2      	; 0x3b72 <rx_ok_cb+0x40>
    3b70:	66 c0       	rjmp	.+204    	; 0x3c3e <rx_ok_cb+0x10c>
    3b72:	80 91 cc 2d 	lds	r24, 0x2DCC
    3b76:	80 93 60 2e 	sts	0x2E60, r24
    3b7a:	80 91 cd 2d 	lds	r24, 0x2DCD
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	98 2f       	mov	r25, r24
    3b82:	88 27       	eor	r24, r24
    3b84:	20 91 ce 2d 	lds	r18, 0x2DCE
    3b88:	82 2b       	or	r24, r18
    3b8a:	80 93 61 2e 	sts	0x2E61, r24
    3b8e:	90 93 62 2e 	sts	0x2E62, r25
    3b92:	c0 91 cf 2d 	lds	r28, 0x2DCF
    3b96:	d0 e0       	ldi	r29, 0x00	; 0
    3b98:	dc 2f       	mov	r29, r28
    3b9a:	cc 27       	eor	r28, r28
    3b9c:	80 91 d0 2d 	lds	r24, 0x2DD0
    3ba0:	c8 2b       	or	r28, r24
    3ba2:	c0 93 63 2e 	sts	0x2E63, r28
    3ba6:	d0 93 64 2e 	sts	0x2E64, r29
    3baa:	80 91 d1 2d 	lds	r24, 0x2DD1
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	98 2f       	mov	r25, r24
    3bb2:	88 27       	eor	r24, r24
    3bb4:	20 91 d2 2d 	lds	r18, 0x2DD2
    3bb8:	82 2b       	or	r24, r18
    3bba:	80 93 65 2e 	sts	0x2E65, r24
    3bbe:	90 93 66 2e 	sts	0x2E66, r25
    3bc2:	10 92 67 2e 	sts	0x2E67, r1
    3bc6:	b5 d6       	rcall	.+3434   	; 0x4932 <onepos_get_node_id>
    3bc8:	c8 17       	cp	r28, r24
    3bca:	d9 07       	cpc	r29, r25
    3bcc:	51 f5       	brne	.+84     	; 0x3c22 <rx_ok_cb+0xf0>
    3bce:	80 91 d3 2d 	lds	r24, 0x2DD3
    3bd2:	80 33       	cpi	r24, 0x30	; 48
    3bd4:	71 f4       	brne	.+28     	; 0x3bf2 <rx_ok_cb+0xc0>
    3bd6:	40 91 d4 2d 	lds	r20, 0x2DD4
    3bda:	40 93 67 2e 	sts	0x2E67, r20
    3bde:	50 e0       	ldi	r21, 0x00	; 0
    3be0:	65 ed       	ldi	r22, 0xD5	; 213
    3be2:	7d e2       	ldi	r23, 0x2D	; 45
    3be4:	88 e6       	ldi	r24, 0x68	; 104
    3be6:	9e e2       	ldi	r25, 0x2E	; 46
    3be8:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <strncpy>
    3bec:	10 92 10 2f 	sts	0x2F10, r1
    3bf0:	26 c0       	rjmp	.+76     	; 0x3c3e <rx_ok_cb+0x10c>
    3bf2:	82 33       	cpi	r24, 0x32	; 50
    3bf4:	21 f4       	brne	.+8      	; 0x3bfe <rx_ok_cb+0xcc>
    3bf6:	85 e0       	ldi	r24, 0x05	; 5
    3bf8:	80 93 10 2f 	sts	0x2F10, r24
    3bfc:	20 c0       	rjmp	.+64     	; 0x3c3e <rx_ok_cb+0x10c>
    3bfe:	81 36       	cpi	r24, 0x61	; 97
    3c00:	21 f4       	brne	.+8      	; 0x3c0a <rx_ok_cb+0xd8>
    3c02:	86 e0       	ldi	r24, 0x06	; 6
    3c04:	80 93 10 2f 	sts	0x2F10, r24
    3c08:	1a c0       	rjmp	.+52     	; 0x3c3e <rx_ok_cb+0x10c>
    3c0a:	89 36       	cpi	r24, 0x69	; 105
    3c0c:	21 f4       	brne	.+8      	; 0x3c16 <rx_ok_cb+0xe4>
    3c0e:	88 e0       	ldi	r24, 0x08	; 8
    3c10:	80 93 10 2f 	sts	0x2F10, r24
    3c14:	14 c0       	rjmp	.+40     	; 0x3c3e <rx_ok_cb+0x10c>
    3c16:	80 35       	cpi	r24, 0x50	; 80
    3c18:	91 f4       	brne	.+36     	; 0x3c3e <rx_ok_cb+0x10c>
    3c1a:	87 e0       	ldi	r24, 0x07	; 7
    3c1c:	80 93 10 2f 	sts	0x2F10, r24
    3c20:	0e c0       	rjmp	.+28     	; 0x3c3e <rx_ok_cb+0x10c>
    3c22:	80 91 63 2e 	lds	r24, 0x2E63
    3c26:	90 91 64 2e 	lds	r25, 0x2E64
    3c2a:	8f 3f       	cpi	r24, 0xFF	; 255
    3c2c:	91 05       	cpc	r25, r1
    3c2e:	21 f4       	brne	.+8      	; 0x3c38 <rx_ok_cb+0x106>
    3c30:	83 e0       	ldi	r24, 0x03	; 3
    3c32:	80 93 10 2f 	sts	0x2F10, r24
    3c36:	03 c0       	rjmp	.+6      	; 0x3c3e <rx_ok_cb+0x10c>
    3c38:	84 e0       	ldi	r24, 0x04	; 4
    3c3a:	80 93 10 2f 	sts	0x2F10, r24
    3c3e:	88 ee       	ldi	r24, 0xE8	; 232
    3c40:	93 e0       	ldi	r25, 0x03	; 3
    3c42:	a0 e0       	ldi	r26, 0x00	; 0
    3c44:	b0 e0       	ldi	r27, 0x00	; 0
    3c46:	80 93 e3 20 	sts	0x20E3, r24
    3c4a:	90 93 e4 20 	sts	0x20E4, r25
    3c4e:	a0 93 e5 20 	sts	0x20E5, r26
    3c52:	b0 93 e6 20 	sts	0x20E6, r27
    3c56:	df 91       	pop	r29
    3c58:	cf 91       	pop	r28
    3c5a:	08 95       	ret

00003c5c <get_rx_timestamp_u64>:
    3c5c:	0f 93       	push	r16
    3c5e:	1f 93       	push	r17
    3c60:	cf 93       	push	r28
    3c62:	df 93       	push	r29
    3c64:	cd b7       	in	r28, 0x3d	; 61
    3c66:	de b7       	in	r29, 0x3e	; 62
    3c68:	25 97       	sbiw	r28, 0x05	; 5
    3c6a:	cd bf       	out	0x3d, r28	; 61
    3c6c:	de bf       	out	0x3e, r29	; 62
    3c6e:	8e 01       	movw	r16, r28
    3c70:	0f 5f       	subi	r16, 0xFF	; 255
    3c72:	1f 4f       	sbci	r17, 0xFF	; 255
    3c74:	c8 01       	movw	r24, r16
    3c76:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <dwt_readrxtimestamp>
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	36 96       	adiw	r30, 0x06	; 6
    3c7e:	d8 01       	movw	r26, r16
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	40 e0       	ldi	r20, 0x00	; 0
    3c86:	50 e0       	ldi	r21, 0x00	; 0
    3c88:	60 e0       	ldi	r22, 0x00	; 0
    3c8a:	70 e0       	ldi	r23, 0x00	; 0
    3c8c:	80 e0       	ldi	r24, 0x00	; 0
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	08 e0       	ldi	r16, 0x08	; 8
    3c92:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <__ashldi3>
    3c96:	12 91       	ld	r17, -Z
    3c98:	21 2b       	or	r18, r17
    3c9a:	ea 17       	cp	r30, r26
    3c9c:	fb 07       	cpc	r31, r27
    3c9e:	c1 f7       	brne	.-16     	; 0x3c90 <get_rx_timestamp_u64+0x34>
    3ca0:	25 96       	adiw	r28, 0x05	; 5
    3ca2:	cd bf       	out	0x3d, r28	; 61
    3ca4:	de bf       	out	0x3e, r29	; 62
    3ca6:	df 91       	pop	r29
    3ca8:	cf 91       	pop	r28
    3caa:	1f 91       	pop	r17
    3cac:	0f 91       	pop	r16
    3cae:	08 95       	ret

00003cb0 <dwt_onepos_init>:
    3cb0:	cf 93       	push	r28
    3cb2:	c8 2f       	mov	r28, r24
    3cb4:	4b d3       	rcall	.+1686   	; 0x434c <openspi>
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	2f de       	rcall	.-930    	; 0x391a <dwt_initialise>
    3cbc:	01 96       	adiw	r24, 0x01	; 1
    3cbe:	49 f4       	brne	.+18     	; 0x3cd2 <dwt_onepos_init+0x22>
    3cc0:	8e e0       	ldi	r24, 0x0E	; 14
    3cc2:	91 e2       	ldi	r25, 0x21	; 33
    3cc4:	9f 93       	push	r25
    3cc6:	8f 93       	push	r24
    3cc8:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <printf>
    3ccc:	0f 90       	pop	r0
    3cce:	0f 90       	pop	r0
    3cd0:	ff cf       	rjmp	.-2      	; 0x3cd0 <dwt_onepos_init+0x20>
    3cd2:	65 d3       	rcall	.+1738   	; 0x439e <fast_spi>
    3cd4:	8b eb       	ldi	r24, 0xBB	; 187
    3cd6:	90 e2       	ldi	r25, 0x20	; 32
    3cd8:	56 d8       	rcall	.-3924   	; 0x2d86 <dwt_configure>
    3cda:	cc 23       	and	r28, r28
    3cdc:	11 f0       	breq	.+4      	; 0x3ce2 <dwt_onepos_init+0x32>
    3cde:	83 e0       	ldi	r24, 0x03	; 3
    3ce0:	b8 da       	rcall	.-2704   	; 0x3252 <dwt_setleds>
    3ce2:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <onepos_get_uwb_rx_antenna_delay>
    3ce6:	0e 94 12 16 	call	0x2c24	; 0x2c24 <dwt_setrxantennadelay>
    3cea:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <onepos_get_uwb_tx_antenna_delay>
    3cee:	0e 94 19 16 	call	0x2c32	; 0x2c32 <dwt_settxantennadelay>
    3cf2:	2c e8       	ldi	r18, 0x8C	; 140
    3cf4:	3d e1       	ldi	r19, 0x1D	; 29
    3cf6:	4c e7       	ldi	r20, 0x7C	; 124
    3cf8:	5d e1       	ldi	r21, 0x1D	; 29
    3cfa:	69 e9       	ldi	r22, 0x99	; 153
    3cfc:	7d e1       	ldi	r23, 0x1D	; 29
    3cfe:	88 e9       	ldi	r24, 0x98	; 152
    3d00:	9d e1       	ldi	r25, 0x1D	; 29
    3d02:	9a da       	rcall	.-2764   	; 0x3238 <dwt_setcallbacks>
    3d04:	41 e0       	ldi	r20, 0x01	; 1
    3d06:	60 e8       	ldi	r22, 0x80	; 128
    3d08:	70 ed       	ldi	r23, 0xD0	; 208
    3d0a:	83 e2       	ldi	r24, 0x23	; 35
    3d0c:	94 e0       	ldi	r25, 0x04	; 4
    3d0e:	97 dc       	rcall	.-1746   	; 0x363e <dwt_setinterrupt>
    3d10:	cf 91       	pop	r28
    3d12:	08 95       	ret

00003d14 <dwt_send_msg_w_ack>:
    3d14:	af 92       	push	r10
    3d16:	bf 92       	push	r11
    3d18:	cf 92       	push	r12
    3d1a:	df 92       	push	r13
    3d1c:	ef 92       	push	r14
    3d1e:	ff 92       	push	r15
    3d20:	0f 93       	push	r16
    3d22:	1f 93       	push	r17
    3d24:	cf 93       	push	r28
    3d26:	df 93       	push	r29
    3d28:	cd b7       	in	r28, 0x3d	; 61
    3d2a:	de b7       	in	r29, 0x3e	; 62
    3d2c:	5c 01       	movw	r10, r24
    3d2e:	0d b7       	in	r16, 0x3d	; 61
    3d30:	1e b7       	in	r17, 0x3e	; 62
    3d32:	fc 01       	movw	r30, r24
    3d34:	01 90       	ld	r0, Z+
    3d36:	00 20       	and	r0, r0
    3d38:	e9 f7       	brne	.-6      	; 0x3d34 <dwt_send_msg_w_ack+0x20>
    3d3a:	cf 01       	movw	r24, r30
    3d3c:	8a 19       	sub	r24, r10
    3d3e:	9b 09       	sbc	r25, r11
    3d40:	9c 01       	movw	r18, r24
    3d42:	24 5f       	subi	r18, 0xF4	; 244
    3d44:	3f 4f       	sbci	r19, 0xFF	; 255
    3d46:	79 01       	movw	r14, r18
    3d48:	8d b7       	in	r24, 0x3d	; 61
    3d4a:	9e b7       	in	r25, 0x3e	; 62
    3d4c:	82 1b       	sub	r24, r18
    3d4e:	93 0b       	sbc	r25, r19
    3d50:	8d bf       	out	0x3d, r24	; 61
    3d52:	9e bf       	out	0x3e, r25	; 62
    3d54:	ad b7       	in	r26, 0x3d	; 61
    3d56:	be b7       	in	r27, 0x3e	; 62
    3d58:	11 96       	adiw	r26, 0x01	; 1
    3d5a:	6d 01       	movw	r12, r26
    3d5c:	81 e4       	ldi	r24, 0x41	; 65
    3d5e:	ed b7       	in	r30, 0x3d	; 61
    3d60:	fe b7       	in	r31, 0x3e	; 62
    3d62:	81 83       	std	Z+1, r24	; 0x01
    3d64:	88 e8       	ldi	r24, 0x88	; 136
    3d66:	11 96       	adiw	r26, 0x01	; 1
    3d68:	8c 93       	st	X, r24
    3d6a:	11 97       	sbiw	r26, 0x01	; 1
    3d6c:	80 91 c9 2d 	lds	r24, 0x2DC9
    3d70:	12 96       	adiw	r26, 0x02	; 2
    3d72:	8c 93       	st	X, r24
    3d74:	12 97       	sbiw	r26, 0x02	; 2
    3d76:	13 96       	adiw	r26, 0x03	; 3
    3d78:	1c 92       	st	X, r1
    3d7a:	13 97       	sbiw	r26, 0x03	; 3
    3d7c:	14 96       	adiw	r26, 0x04	; 4
    3d7e:	1c 92       	st	X, r1
    3d80:	14 97       	sbiw	r26, 0x04	; 4
    3d82:	15 96       	adiw	r26, 0x05	; 5
    3d84:	7c 93       	st	X, r23
    3d86:	15 97       	sbiw	r26, 0x05	; 5
    3d88:	16 96       	adiw	r26, 0x06	; 6
    3d8a:	6c 93       	st	X, r22
    3d8c:	16 97       	sbiw	r26, 0x06	; 6
    3d8e:	17 96       	adiw	r26, 0x07	; 7
    3d90:	1c 92       	st	X, r1
    3d92:	cf d5       	rcall	.+2974   	; 0x4932 <onepos_get_node_id>
    3d94:	d6 01       	movw	r26, r12
    3d96:	18 96       	adiw	r26, 0x08	; 8
    3d98:	8c 93       	st	X, r24
    3d9a:	18 97       	sbiw	r26, 0x08	; 8
    3d9c:	80 e3       	ldi	r24, 0x30	; 48
    3d9e:	19 96       	adiw	r26, 0x09	; 9
    3da0:	8c 93       	st	X, r24
    3da2:	19 97       	sbiw	r26, 0x09	; 9
    3da4:	f5 01       	movw	r30, r10
    3da6:	01 90       	ld	r0, Z+
    3da8:	00 20       	and	r0, r0
    3daa:	e9 f7       	brne	.-6      	; 0x3da6 <dwt_send_msg_w_ack+0x92>
    3dac:	31 97       	sbiw	r30, 0x01	; 1
    3dae:	ea 19       	sub	r30, r10
    3db0:	fb 09       	sbc	r31, r11
    3db2:	1a 96       	adiw	r26, 0x0a	; 10
    3db4:	ec 93       	st	X, r30
    3db6:	f5 01       	movw	r30, r10
    3db8:	01 90       	ld	r0, Z+
    3dba:	00 20       	and	r0, r0
    3dbc:	e9 f7       	brne	.-6      	; 0x3db8 <dwt_send_msg_w_ack+0xa4>
    3dbe:	31 97       	sbiw	r30, 0x01	; 1
    3dc0:	ea 19       	sub	r30, r10
    3dc2:	fb 09       	sbc	r31, r11
    3dc4:	ec 0d       	add	r30, r12
    3dc6:	fd 1d       	adc	r31, r13
    3dc8:	13 86       	std	Z+11, r1	; 0x0b
    3dca:	f5 01       	movw	r30, r10
    3dcc:	01 90       	ld	r0, Z+
    3dce:	00 20       	and	r0, r0
    3dd0:	e9 f7       	brne	.-6      	; 0x3dcc <dwt_send_msg_w_ack+0xb8>
    3dd2:	31 97       	sbiw	r30, 0x01	; 1
    3dd4:	ea 19       	sub	r30, r10
    3dd6:	fb 09       	sbc	r31, r11
    3dd8:	ec 0d       	add	r30, r12
    3dda:	fd 1d       	adc	r31, r13
    3ddc:	14 86       	std	Z+12, r1	; 0x0c
    3dde:	f5 01       	movw	r30, r10
    3de0:	01 90       	ld	r0, Z+
    3de2:	00 20       	and	r0, r0
    3de4:	e9 f7       	brne	.-6      	; 0x3de0 <dwt_send_msg_w_ack+0xcc>
    3de6:	31 97       	sbiw	r30, 0x01	; 1
    3de8:	af 01       	movw	r20, r30
    3dea:	4a 19       	sub	r20, r10
    3dec:	5b 09       	sbc	r21, r11
    3dee:	b5 01       	movw	r22, r10
    3df0:	c6 01       	movw	r24, r12
    3df2:	0b 96       	adiw	r24, 0x0b	; 11
    3df4:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <strncpy>
    3df8:	4f ef       	ldi	r20, 0xFF	; 255
    3dfa:	5f ef       	ldi	r21, 0xFF	; 255
    3dfc:	ba 01       	movw	r22, r20
    3dfe:	40 93 e3 20 	sts	0x20E3, r20
    3e02:	50 93 e4 20 	sts	0x20E4, r21
    3e06:	60 93 e5 20 	sts	0x20E5, r22
    3e0a:	70 93 e6 20 	sts	0x20E6, r23
    3e0e:	8f ef       	ldi	r24, 0xFF	; 255
    3e10:	80 93 10 2f 	sts	0x2F10, r24
    3e14:	40 e0       	ldi	r20, 0x00	; 0
    3e16:	50 e0       	ldi	r21, 0x00	; 0
    3e18:	b6 01       	movw	r22, r12
    3e1a:	c7 01       	movw	r24, r14
    3e1c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <dwt_writetxdata>
    3e20:	40 e0       	ldi	r20, 0x00	; 0
    3e22:	50 e0       	ldi	r21, 0x00	; 0
    3e24:	60 e0       	ldi	r22, 0x00	; 0
    3e26:	70 e0       	ldi	r23, 0x00	; 0
    3e28:	c7 01       	movw	r24, r14
    3e2a:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <dwt_writetxfctrl>
    3e2e:	82 e0       	ldi	r24, 0x02	; 2
    3e30:	f2 da       	rcall	.-2588   	; 0x3416 <dwt_starttx>
    3e32:	0f 2e       	mov	r0, r31
    3e34:	f0 e8       	ldi	r31, 0x80	; 128
    3e36:	ef 2e       	mov	r14, r31
    3e38:	f6 e0       	ldi	r31, 0x06	; 6
    3e3a:	ff 2e       	mov	r15, r31
    3e3c:	f0 2d       	mov	r31, r0
    3e3e:	05 c0       	rjmp	.+10     	; 0x3e4a <dwt_send_msg_w_ack+0x136>
    3e40:	f7 01       	movw	r30, r14
    3e42:	80 85       	ldd	r24, Z+8	; 0x08
    3e44:	80 ff       	sbrs	r24, 0
    3e46:	fc cf       	rjmp	.-8      	; 0x3e40 <dwt_send_msg_w_ack+0x12c>
    3e48:	3a dc       	rcall	.-1932   	; 0x36be <dwt_isr>
    3e4a:	80 91 e3 20 	lds	r24, 0x20E3
    3e4e:	90 91 e4 20 	lds	r25, 0x20E4
    3e52:	a0 91 e5 20 	lds	r26, 0x20E5
    3e56:	b0 91 e6 20 	lds	r27, 0x20E6
    3e5a:	8f 3f       	cpi	r24, 0xFF	; 255
    3e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e5e:	af 4f       	sbci	r26, 0xFF	; 255
    3e60:	bf 4f       	sbci	r27, 0xFF	; 255
    3e62:	71 f3       	breq	.-36     	; 0x3e40 <dwt_send_msg_w_ack+0x12c>
    3e64:	80 91 10 2f 	lds	r24, 0x2F10
    3e68:	85 30       	cpi	r24, 0x05	; 5
    3e6a:	59 f4       	brne	.+22     	; 0x3e82 <dwt_send_msg_w_ack+0x16e>
    3e6c:	80 91 60 2e 	lds	r24, 0x2E60
    3e70:	90 91 c9 2d 	lds	r25, 0x2DC9
    3e74:	89 13       	cpse	r24, r25
    3e76:	05 c0       	rjmp	.+10     	; 0x3e82 <dwt_send_msg_w_ack+0x16e>
    3e78:	10 92 10 2f 	sts	0x2F10, r1
    3e7c:	8f 5f       	subi	r24, 0xFF	; 255
    3e7e:	80 93 c9 2d 	sts	0x2DC9, r24
    3e82:	80 91 10 2f 	lds	r24, 0x2F10
    3e86:	0d bf       	out	0x3d, r16	; 61
    3e88:	1e bf       	out	0x3e, r17	; 62
    3e8a:	df 91       	pop	r29
    3e8c:	cf 91       	pop	r28
    3e8e:	1f 91       	pop	r17
    3e90:	0f 91       	pop	r16
    3e92:	ff 90       	pop	r15
    3e94:	ef 90       	pop	r14
    3e96:	df 90       	pop	r13
    3e98:	cf 90       	pop	r12
    3e9a:	bf 90       	pop	r11
    3e9c:	af 90       	pop	r10
    3e9e:	08 95       	ret

00003ea0 <dwt_receive_msg_w_ack>:
    3ea0:	ef 92       	push	r14
    3ea2:	ff 92       	push	r15
    3ea4:	0f 93       	push	r16
    3ea6:	1f 93       	push	r17
    3ea8:	cf 93       	push	r28
    3eaa:	df 93       	push	r29
    3eac:	cd b7       	in	r28, 0x3d	; 61
    3eae:	de b7       	in	r29, 0x3e	; 62
    3eb0:	2c 97       	sbiw	r28, 0x0c	; 12
    3eb2:	cd bf       	out	0x3d, r28	; 61
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	7c 01       	movw	r14, r24
    3eb8:	8f ef       	ldi	r24, 0xFF	; 255
    3eba:	80 93 10 2f 	sts	0x2F10, r24
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	42 db       	rcall	.-2428   	; 0x3548 <dwt_rxenable>
    3ec4:	8f ef       	ldi	r24, 0xFF	; 255
    3ec6:	9f e0       	ldi	r25, 0x0F	; 15
    3ec8:	7a db       	rcall	.-2316   	; 0x35be <dwt_setrxtimeout>
    3eca:	00 e8       	ldi	r16, 0x80	; 128
    3ecc:	16 e0       	ldi	r17, 0x06	; 6
    3ece:	05 c0       	rjmp	.+10     	; 0x3eda <dwt_receive_msg_w_ack+0x3a>
    3ed0:	f8 01       	movw	r30, r16
    3ed2:	80 85       	ldd	r24, Z+8	; 0x08
    3ed4:	80 ff       	sbrs	r24, 0
    3ed6:	fc cf       	rjmp	.-8      	; 0x3ed0 <dwt_receive_msg_w_ack+0x30>
    3ed8:	f2 db       	rcall	.-2076   	; 0x36be <dwt_isr>
    3eda:	80 91 10 2f 	lds	r24, 0x2F10
    3ede:	8f 3f       	cpi	r24, 0xFF	; 255
    3ee0:	b9 f3       	breq	.-18     	; 0x3ed0 <dwt_receive_msg_w_ack+0x30>
    3ee2:	81 11       	cpse	r24, r1
    3ee4:	40 c0       	rjmp	.+128    	; 0x3f66 <dwt_receive_msg_w_ack+0xc6>
    3ee6:	81 e4       	ldi	r24, 0x41	; 65
    3ee8:	89 83       	std	Y+1, r24	; 0x01
    3eea:	88 e8       	ldi	r24, 0x88	; 136
    3eec:	8a 83       	std	Y+2, r24	; 0x02
    3eee:	80 91 60 2e 	lds	r24, 0x2E60
    3ef2:	8b 83       	std	Y+3, r24	; 0x03
    3ef4:	1c 82       	std	Y+4, r1	; 0x04
    3ef6:	1d 82       	std	Y+5, r1	; 0x05
    3ef8:	e5 e6       	ldi	r30, 0x65	; 101
    3efa:	fe e2       	ldi	r31, 0x2E	; 46
    3efc:	80 81       	ld	r24, Z
    3efe:	91 81       	ldd	r25, Z+1	; 0x01
    3f00:	9e 83       	std	Y+6, r25	; 0x06
    3f02:	8f 83       	std	Y+7, r24	; 0x07
    3f04:	18 86       	std	Y+8, r1	; 0x08
    3f06:	15 d5       	rcall	.+2602   	; 0x4932 <onepos_get_node_id>
    3f08:	89 87       	std	Y+9, r24	; 0x09
    3f0a:	82 e3       	ldi	r24, 0x32	; 50
    3f0c:	8a 87       	std	Y+10, r24	; 0x0a
    3f0e:	1b 86       	std	Y+11, r1	; 0x0b
    3f10:	1c 86       	std	Y+12, r1	; 0x0c
    3f12:	40 e0       	ldi	r20, 0x00	; 0
    3f14:	50 e0       	ldi	r21, 0x00	; 0
    3f16:	be 01       	movw	r22, r28
    3f18:	6f 5f       	subi	r22, 0xFF	; 255
    3f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1c:	8c e0       	ldi	r24, 0x0C	; 12
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <dwt_writetxdata>
    3f24:	40 e0       	ldi	r20, 0x00	; 0
    3f26:	50 e0       	ldi	r21, 0x00	; 0
    3f28:	60 e0       	ldi	r22, 0x00	; 0
    3f2a:	70 e0       	ldi	r23, 0x00	; 0
    3f2c:	8c e0       	ldi	r24, 0x0C	; 12
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <dwt_writetxfctrl>
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	6f da       	rcall	.-2850   	; 0x3416 <dwt_starttx>
    3f38:	60 e0       	ldi	r22, 0x00	; 0
    3f3a:	70 e0       	ldi	r23, 0x00	; 0
    3f3c:	8f e0       	ldi	r24, 0x0F	; 15
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <dwt_read32bitoffsetreg>
    3f44:	67 ff       	sbrs	r22, 7
    3f46:	f8 cf       	rjmp	.-16     	; 0x3f38 <dwt_receive_msg_w_ack+0x98>
    3f48:	20 e8       	ldi	r18, 0x80	; 128
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	40 e0       	ldi	r20, 0x00	; 0
    3f4e:	50 e0       	ldi	r21, 0x00	; 0
    3f50:	60 e0       	ldi	r22, 0x00	; 0
    3f52:	70 e0       	ldi	r23, 0x00	; 0
    3f54:	8f e0       	ldi	r24, 0x0F	; 15
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	0e 94 20 16 	call	0x2c40	; 0x2c40 <dwt_write32bitoffsetreg>
    3f5c:	68 e6       	ldi	r22, 0x68	; 104
    3f5e:	7e e2       	ldi	r23, 0x2E	; 46
    3f60:	c7 01       	movw	r24, r14
    3f62:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <strcpy>
    3f66:	80 91 10 2f 	lds	r24, 0x2F10
    3f6a:	2c 96       	adiw	r28, 0x0c	; 12
    3f6c:	cd bf       	out	0x3d, r28	; 61
    3f6e:	de bf       	out	0x3e, r29	; 62
    3f70:	df 91       	pop	r29
    3f72:	cf 91       	pop	r28
    3f74:	1f 91       	pop	r17
    3f76:	0f 91       	pop	r16
    3f78:	ff 90       	pop	r15
    3f7a:	ef 90       	pop	r14
    3f7c:	08 95       	ret

00003f7e <dwt_resp_twr>:

uint8_t dwt_resp_twr(uint16_t * final_distance)
{
    3f7e:	2f 92       	push	r2
    3f80:	3f 92       	push	r3
    3f82:	4f 92       	push	r4
    3f84:	5f 92       	push	r5
    3f86:	6f 92       	push	r6
    3f88:	7f 92       	push	r7
    3f8a:	8f 92       	push	r8
    3f8c:	9f 92       	push	r9
    3f8e:	af 92       	push	r10
    3f90:	bf 92       	push	r11
    3f92:	cf 92       	push	r12
    3f94:	df 92       	push	r13
    3f96:	ef 92       	push	r14
    3f98:	ff 92       	push	r15
    3f9a:	0f 93       	push	r16
    3f9c:	1f 93       	push	r17
    3f9e:	cf 93       	push	r28
    3fa0:	df 93       	push	r29
    3fa2:	cd b7       	in	r28, 0x3d	; 61
    3fa4:	de b7       	in	r29, 0x3e	; 62
    3fa6:	ab 97       	sbiw	r28, 0x2b	; 43
    3fa8:	cd bf       	out	0x3d, r28	; 61
    3faa:	de bf       	out	0x3e, r29	; 62
    3fac:	1c 01       	movw	r2, r24
	rx_flag = -1;
    3fae:	8f ef       	ldi	r24, 0xFF	; 255
    3fb0:	80 93 10 2f 	sts	0x2F10, r24
	/* Hold copies of computed time of flight and distance here for reference so that it can be examined at a debug breakpoint. */
	double tof;
	double distance;
	
	uint8_t tx_resp_msg[10+2+2];
	tx_resp_msg[0] = 0x41; //MSG Sequence start
    3fb4:	81 e4       	ldi	r24, 0x41	; 65
    3fb6:	89 83       	std	Y+1, r24	; 0x01
	tx_resp_msg[1] = 0x88; //MSG sequence start
    3fb8:	88 e8       	ldi	r24, 0x88	; 136
    3fba:	8a 83       	std	Y+2, r24	; 0x02
	tx_resp_msg[2] = msg_counter; //Sequence number
    3fbc:	80 91 c9 2d 	lds	r24, 0x2DC9
    3fc0:	8b 83       	std	Y+3, r24	; 0x03
	tx_resp_msg[3] = 0x00; //PAN ID MSB
    3fc2:	1c 82       	std	Y+4, r1	; 0x04
	tx_resp_msg[4] = 0x00; //PAN ID LSB
    3fc4:	1d 82       	std	Y+5, r1	; 0x05
	tx_resp_msg[5] = (uint8_t)(uwb_rx_message.source_address >> 8);; //Dest address MSB
    3fc6:	e5 e6       	ldi	r30, 0x65	; 101
    3fc8:	fe e2       	ldi	r31, 0x2E	; 46
    3fca:	80 81       	ld	r24, Z
    3fcc:	91 81       	ldd	r25, Z+1	; 0x01
    3fce:	9e 83       	std	Y+6, r25	; 0x06
	tx_resp_msg[6] = (uint8_t)(uwb_rx_message.source_address); //Dest address LSB
    3fd0:	8f 83       	std	Y+7, r24	; 0x07
	tx_resp_msg[7] = 0x0; //Source address MSB
    3fd2:	18 86       	std	Y+8, r1	; 0x08
	tx_resp_msg[8] = (uint8_t)onepos_get_node_id(); //Source address LSB
    3fd4:	ae d4       	rcall	.+2396   	; 0x4932 <onepos_get_node_id>
    3fd6:	89 87       	std	Y+9, r24	; 0x09
	tx_resp_msg[9] = DECA_RESP_MSG; //type of message code
    3fd8:	80 e5       	ldi	r24, 0x50	; 80
    3fda:	8a 87       	std	Y+10, r24	; 0x0a
	tx_resp_msg[10] = 0x00;
    3fdc:	1b 86       	std	Y+11, r1	; 0x0b
	tx_resp_msg[11] = 0x00;
    3fde:	1c 86       	std	Y+12, r1	; 0x0c
	tx_resp_msg[12] = 0x00; //CRC
    3fe0:	1d 86       	std	Y+13, r1	; 0x0d
	tx_resp_msg[13] = 0x00; //CRC
    3fe2:	1e 86       	std	Y+14, r1	; 0x0e
	
	/* Set preamble timeout for expected frames. See NOTE 6 below. */
	//dwt_setpreambledetecttimeout(PRE_TIMEOUT);

	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0xffff);
    3fe4:	8f ef       	ldi	r24, 0xFF	; 255
    3fe6:	9f ef       	ldi	r25, 0xFF	; 255
    3fe8:	ea da       	rcall	.-2604   	; 0x35be <dwt_setrxtimeout>
	//dwt_setrxtimeout(0xff);

	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE);
    3fea:	80 e0       	ldi	r24, 0x00	; 0
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	ac da       	rcall	.-2728   	; 0x3548 <dwt_rxenable>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    3ff0:	00 e8       	ldi	r16, 0x80	; 128
    3ff2:	16 e0       	ldi	r17, 0x06	; 6

	while (rx_flag == -1)
    3ff4:	06 c0       	rjmp	.+12     	; 0x4002 <dwt_resp_twr+0x84>
    3ff6:	d8 01       	movw	r26, r16
    3ff8:	18 96       	adiw	r26, 0x08	; 8
    3ffa:	8c 91       	ld	r24, X
	{
		if (ioport_get_pin_level(UWB_INTERRUPT))
    3ffc:	80 ff       	sbrs	r24, 0
    3ffe:	fb cf       	rjmp	.-10     	; 0x3ff6 <dwt_resp_twr+0x78>
		{
			dwt_isr();
    4000:	5e db       	rcall	.-2372   	; 0x36be <dwt_isr>
	//dwt_setrxtimeout(0xff);

	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE);

	while (rx_flag == -1)
    4002:	80 91 10 2f 	lds	r24, 0x2F10
    4006:	8f 3f       	cpi	r24, 0xFF	; 255
    4008:	b1 f3       	breq	.-20     	; 0x3ff6 <dwt_resp_twr+0x78>
		{
			dwt_isr();
		}
	}
	
	if (rx_flag == UWB_RX_POLL)
    400a:	86 30       	cpi	r24, 0x06	; 6
    400c:	09 f0       	breq	.+2      	; 0x4010 <dwt_resp_twr+0x92>
    400e:	2e c1       	rjmp	.+604    	; 0x426c <dwt_resp_twr+0x2ee>
	{
		uint32 resp_tx_time;
		int ret;

		/* Retrieve poll reception timestamp. */
		poll_rx_ts = get_rx_timestamp_u64();
    4010:	25 de       	rcall	.-950    	; 0x3c5c <get_rx_timestamp_u64>
    4012:	42 2e       	mov	r4, r18
    4014:	53 2e       	mov	r5, r19
    4016:	64 2e       	mov	r6, r20
    4018:	75 2e       	mov	r7, r21

		/* Set send time for response. See NOTE 9 below. */
		resp_tx_time = (uint64_t)(poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
    401a:	44 5c       	subi	r20, 0xC4	; 196
    401c:	50 4f       	sbci	r21, 0xF0	; 240
    401e:	6f 4f       	sbci	r22, 0xFF	; 255
    4020:	7f 4f       	sbci	r23, 0xFF	; 255
    4022:	8f 4f       	sbci	r24, 0xFF	; 255
    4024:	9f 4f       	sbci	r25, 0xFF	; 255
    4026:	08 e0       	ldi	r16, 0x08	; 8
    4028:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__lshrdi3>
		dwt_setdelayedtrxtime(resp_tx_time);
    402c:	62 2f       	mov	r22, r18
    402e:	73 2f       	mov	r23, r19
    4030:	84 2f       	mov	r24, r20
    4032:	95 2f       	mov	r25, r21
    4034:	e8 d9       	rcall	.-3120   	; 0x3406 <dwt_setdelayedtrxtime>
		
		/* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
		dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
    4036:	64 ef       	ldi	r22, 0xF4	; 244
    4038:	71 e0       	ldi	r23, 0x01	; 1
    403a:	80 e0       	ldi	r24, 0x00	; 0
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	d9 d8       	rcall	.-3662   	; 0x31f2 <dwt_setrxaftertxdelay>
		dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
    4040:	84 ee       	ldi	r24, 0xE4	; 228
    4042:	9c e0       	ldi	r25, 0x0C	; 12
    4044:	bc da       	rcall	.-2696   	; 0x35be <dwt_setrxtimeout>

		/* Write and send the response message. See NOTE 10 below.*/
		tx_resp_msg[ALL_MSG_SN_IDX] = msg_counter;
    4046:	80 91 c9 2d 	lds	r24, 0x2DC9
    404a:	8b 83       	std	Y+3, r24	; 0x03
		dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
    404c:	40 e0       	ldi	r20, 0x00	; 0
    404e:	50 e0       	ldi	r21, 0x00	; 0
    4050:	be 01       	movw	r22, r28
    4052:	6f 5f       	subi	r22, 0xFF	; 255
    4054:	7f 4f       	sbci	r23, 0xFF	; 255
    4056:	8e e0       	ldi	r24, 0x0E	; 14
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <dwt_writetxdata>
		dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
    405e:	41 e0       	ldi	r20, 0x01	; 1
    4060:	50 e0       	ldi	r21, 0x00	; 0
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	70 e0       	ldi	r23, 0x00	; 0
    4066:	8e e0       	ldi	r24, 0x0E	; 14
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <dwt_writetxfctrl>
		
		ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
    406e:	83 e0       	ldi	r24, 0x03	; 3
    4070:	d2 d9       	rcall	.-3164   	; 0x3416 <dwt_starttx>
		
		/* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
		if (ret == DWT_ERROR)
    4072:	01 96       	adiw	r24, 0x01	; 1
    4074:	31 f4       	brne	.+12     	; 0x4082 <dwt_resp_twr+0x104>
		{
			printf("DWT_ERROR\n");
    4076:	87 ed       	ldi	r24, 0xD7	; 215
    4078:	92 e2       	ldi	r25, 0x22	; 34
    407a:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <puts>
			return UWB_RX_FAILED;
    407e:	82 e0       	ldi	r24, 0x02	; 2
    4080:	01 c1       	rjmp	.+514    	; 0x4284 <dwt_resp_twr+0x306>
		}
		
		rx_flag = -1;
    4082:	8f ef       	ldi	r24, 0xFF	; 255
    4084:	80 93 10 2f 	sts	0x2F10, r24
    4088:	00 e8       	ldi	r16, 0x80	; 128
    408a:	16 e0       	ldi	r17, 0x06	; 6
		
		while (rx_flag == -1)
    408c:	05 c0       	rjmp	.+10     	; 0x4098 <dwt_resp_twr+0x11a>
    408e:	f8 01       	movw	r30, r16
    4090:	80 85       	ldd	r24, Z+8	; 0x08
		{
			if (ioport_get_pin_level(UWB_INTERRUPT))
    4092:	80 ff       	sbrs	r24, 0
    4094:	fc cf       	rjmp	.-8      	; 0x408e <dwt_resp_twr+0x110>
			{
				dwt_isr();
    4096:	13 db       	rcall	.-2522   	; 0x36be <dwt_isr>
			return UWB_RX_FAILED;
		}
		
		rx_flag = -1;
		
		while (rx_flag == -1)
    4098:	80 91 10 2f 	lds	r24, 0x2F10
    409c:	8f 3f       	cpi	r24, 0xFF	; 255
    409e:	b9 f3       	breq	.-18     	; 0x408e <dwt_resp_twr+0x110>
			{
				dwt_isr();
			}
		}
		
		if (rx_flag == UWB_RX_FINAL)
    40a0:	88 30       	cpi	r24, 0x08	; 8
    40a2:	09 f0       	breq	.+2      	; 0x40a6 <dwt_resp_twr+0x128>
    40a4:	d6 c0       	rjmp	.+428    	; 0x4252 <dwt_resp_twr+0x2d4>
static uint64_t get_tx_timestamp_u64(void)
	{
		uint8 ts_tab[5];
		uint64_t ts = 0;
		int i;
		dwt_readtxtimestamp(ts_tab);
    40a6:	8e 01       	movw	r16, r28
    40a8:	01 5f       	subi	r16, 0xF1	; 241
    40aa:	1f 4f       	sbci	r17, 0xFF	; 255
    40ac:	c8 01       	movw	r24, r16
    40ae:	0e 94 5d 15 	call	0x2aba	; 0x2aba <dwt_readtxtimestamp>
    40b2:	fe 01       	movw	r30, r28
    40b4:	74 96       	adiw	r30, 0x14	; 20
    40b6:	d8 01       	movw	r26, r16
	* @return  64-bit value of the read time-stamp.
	*/
static uint64_t get_tx_timestamp_u64(void)
	{
		uint8 ts_tab[5];
		uint64_t ts = 0;
    40b8:	10 e0       	ldi	r17, 0x00	; 0
    40ba:	00 e0       	ldi	r16, 0x00	; 0
    40bc:	f1 2c       	mov	r15, r1
    40be:	e1 2c       	mov	r14, r1
    40c0:	60 e0       	ldi	r22, 0x00	; 0
    40c2:	70 e0       	ldi	r23, 0x00	; 0
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	90 e0       	ldi	r25, 0x00	; 0
		int i;
		dwt_readtxtimestamp(ts_tab);
		for (i = 4; i >= 0; i--)
		{
			ts <<= 8;
    40c8:	21 2f       	mov	r18, r17
    40ca:	30 2f       	mov	r19, r16
    40cc:	4f 2d       	mov	r20, r15
    40ce:	5e 2d       	mov	r21, r14
    40d0:	08 e0       	ldi	r16, 0x08	; 8
    40d2:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <__ashldi3>
			ts |= ts_tab[i];
    40d6:	12 91       	ld	r17, -Z
    40d8:	12 2b       	or	r17, r18
    40da:	03 2f       	mov	r16, r19
    40dc:	f4 2e       	mov	r15, r20
    40de:	e5 2e       	mov	r14, r21
	{
		uint8 ts_tab[5];
		uint64_t ts = 0;
		int i;
		dwt_readtxtimestamp(ts_tab);
		for (i = 4; i >= 0; i--)
    40e0:	ea 17       	cp	r30, r26
    40e2:	fb 07       	cpc	r31, r27
    40e4:	89 f7       	brne	.-30     	; 0x40c8 <dwt_resp_twr+0x14a>
			double Ra, Rb, Da, Db;
			int64_t tof_dtu;

			/* Retrieve response transmission and final reception timestamps. */
			resp_tx_ts = get_tx_timestamp_u64();
			final_rx_ts = get_rx_timestamp_u64();
    40e6:	ba dd       	rcall	.-1164   	; 0x3c5c <get_rx_timestamp_u64>
    40e8:	2c 8f       	std	Y+28, r18	; 0x1c
    40ea:	3d 8f       	std	Y+29, r19	; 0x1d
    40ec:	4e 8f       	std	Y+30, r20	; 0x1e
    40ee:	5f 8f       	std	Y+31, r21	; 0x1f
    40f0:	68 a3       	std	Y+32, r22	; 0x20
    40f2:	79 a3       	std	Y+33, r23	; 0x21
    40f4:	8a a3       	std	Y+34, r24	; 0x22
    40f6:	9b a3       	std	Y+35, r25	; 0x23

			/* Get timestamps embedded in the final message. */
			final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
    40f8:	be 01       	movw	r22, r28
    40fa:	68 5e       	subi	r22, 0xE8	; 232
    40fc:	7f 4f       	sbci	r23, 0xFF	; 255
    40fe:	84 ed       	ldi	r24, 0xD4	; 212
    4100:	9d e2       	ldi	r25, 0x2D	; 45
    4102:	b9 dc       	rcall	.-1678   	; 0x3a76 <final_msg_get_ts>
			final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
    4104:	be 01       	movw	r22, r28
    4106:	6c 5e       	subi	r22, 0xEC	; 236
    4108:	7f 4f       	sbci	r23, 0xFF	; 255
    410a:	88 ed       	ldi	r24, 0xD8	; 216
    410c:	9d e2       	ldi	r25, 0x2D	; 45
    410e:	b3 dc       	rcall	.-1690   	; 0x3a76 <final_msg_get_ts>
			final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
    4110:	be 01       	movw	r22, r28
    4112:	61 5f       	subi	r22, 0xF1	; 241
    4114:	7f 4f       	sbci	r23, 0xFF	; 255
    4116:	8c ed       	ldi	r24, 0xDC	; 220
    4118:	9d e2       	ldi	r25, 0x2D	; 45
    411a:	ad dc       	rcall	.-1702   	; 0x3a76 <final_msg_get_ts>

			/* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
			poll_rx_ts_32 = (uint32)poll_rx_ts;
			resp_tx_ts_32 = (uint32)resp_tx_ts;
    411c:	1c a3       	std	Y+36, r17	; 0x24
    411e:	0d a3       	std	Y+37, r16	; 0x25
    4120:	fe a2       	std	Y+38, r15	; 0x26
    4122:	ef a2       	std	Y+39, r14	; 0x27
			final_rx_ts_32 = (uint32)final_rx_ts;
			Ra = (double)(resp_rx_ts - poll_tx_ts);
    4124:	2c 89       	ldd	r18, Y+20	; 0x14
    4126:	3d 89       	ldd	r19, Y+21	; 0x15
    4128:	4e 89       	ldd	r20, Y+22	; 0x16
    412a:	5f 89       	ldd	r21, Y+23	; 0x17
    412c:	28 a7       	std	Y+40, r18	; 0x28
    412e:	39 a7       	std	Y+41, r19	; 0x29
    4130:	4a a7       	std	Y+42, r20	; 0x2a
    4132:	5b a7       	std	Y+43, r21	; 0x2b
    4134:	88 8d       	ldd	r24, Y+24	; 0x18
    4136:	99 8d       	ldd	r25, Y+25	; 0x19
    4138:	aa 8d       	ldd	r26, Y+26	; 0x1a
    413a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    413c:	28 1b       	sub	r18, r24
    413e:	39 0b       	sbc	r19, r25
    4140:	4a 0b       	sbc	r20, r26
    4142:	5b 0b       	sbc	r21, r27
    4144:	ca 01       	movw	r24, r20
    4146:	b9 01       	movw	r22, r18
    4148:	0e 94 40 2b 	call	0x5680	; 0x5680 <__floatunsisf>
    414c:	6b 01       	movw	r12, r22
    414e:	7c 01       	movw	r14, r24
			Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
    4150:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4152:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4154:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4156:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4158:	2c a1       	ldd	r18, Y+36	; 0x24
    415a:	3d a1       	ldd	r19, Y+37	; 0x25
    415c:	4e a1       	ldd	r20, Y+38	; 0x26
    415e:	5f a1       	ldd	r21, Y+39	; 0x27
    4160:	62 1b       	sub	r22, r18
    4162:	73 0b       	sbc	r23, r19
    4164:	84 0b       	sbc	r24, r20
    4166:	95 0b       	sbc	r25, r21
    4168:	0e 94 40 2b 	call	0x5680	; 0x5680 <__floatunsisf>
    416c:	6c 8f       	std	Y+28, r22	; 0x1c
    416e:	7d 8f       	std	Y+29, r23	; 0x1d
    4170:	8e 8f       	std	Y+30, r24	; 0x1e
    4172:	9f 8f       	std	Y+31, r25	; 0x1f
			Da = (double)(final_tx_ts - resp_rx_ts);
    4174:	8f 85       	ldd	r24, Y+15	; 0x0f
    4176:	98 89       	ldd	r25, Y+16	; 0x10
    4178:	a9 89       	ldd	r26, Y+17	; 0x11
    417a:	ba 89       	ldd	r27, Y+18	; 0x12
    417c:	bc 01       	movw	r22, r24
    417e:	cd 01       	movw	r24, r26
    4180:	28 a5       	ldd	r18, Y+40	; 0x28
    4182:	39 a5       	ldd	r19, Y+41	; 0x29
    4184:	4a a5       	ldd	r20, Y+42	; 0x2a
    4186:	5b a5       	ldd	r21, Y+43	; 0x2b
    4188:	62 1b       	sub	r22, r18
    418a:	73 0b       	sbc	r23, r19
    418c:	84 0b       	sbc	r24, r20
    418e:	95 0b       	sbc	r25, r21
    4190:	0e 94 40 2b 	call	0x5680	; 0x5680 <__floatunsisf>
    4194:	68 a7       	std	Y+40, r22	; 0x28
    4196:	79 a7       	std	Y+41, r23	; 0x29
    4198:	8a a7       	std	Y+42, r24	; 0x2a
    419a:	9b a7       	std	Y+43, r25	; 0x2b
			Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
    419c:	6c a1       	ldd	r22, Y+36	; 0x24
    419e:	7d a1       	ldd	r23, Y+37	; 0x25
    41a0:	8e a1       	ldd	r24, Y+38	; 0x26
    41a2:	9f a1       	ldd	r25, Y+39	; 0x27
    41a4:	64 19       	sub	r22, r4
    41a6:	75 09       	sbc	r23, r5
    41a8:	86 09       	sbc	r24, r6
    41aa:	97 09       	sbc	r25, r7
    41ac:	0e 94 40 2b 	call	0x5680	; 0x5680 <__floatunsisf>
    41b0:	2b 01       	movw	r4, r22
    41b2:	3c 01       	movw	r6, r24
			tof_dtu = (int64_t)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
    41b4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    41b6:	3d 8d       	ldd	r19, Y+29	; 0x1d
    41b8:	4e 8d       	ldd	r20, Y+30	; 0x1e
    41ba:	5f 8d       	ldd	r21, Y+31	; 0x1f
    41bc:	c7 01       	movw	r24, r14
    41be:	b6 01       	movw	r22, r12
    41c0:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__mulsf3>
    41c4:	4b 01       	movw	r8, r22
    41c6:	5c 01       	movw	r10, r24
    41c8:	a3 01       	movw	r20, r6
    41ca:	92 01       	movw	r18, r4
    41cc:	68 a5       	ldd	r22, Y+40	; 0x28
    41ce:	79 a5       	ldd	r23, Y+41	; 0x29
    41d0:	8a a5       	ldd	r24, Y+42	; 0x2a
    41d2:	9b a5       	ldd	r25, Y+43	; 0x2b
    41d4:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__mulsf3>
    41d8:	9b 01       	movw	r18, r22
    41da:	ac 01       	movw	r20, r24
    41dc:	c5 01       	movw	r24, r10
    41de:	b4 01       	movw	r22, r8
    41e0:	0e 94 09 2a 	call	0x5412	; 0x5412 <__subsf3>
    41e4:	4b 01       	movw	r8, r22
    41e6:	5c 01       	movw	r10, r24
    41e8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    41ea:	3d 8d       	ldd	r19, Y+29	; 0x1d
    41ec:	4e 8d       	ldd	r20, Y+30	; 0x1e
    41ee:	5f 8d       	ldd	r21, Y+31	; 0x1f
    41f0:	c7 01       	movw	r24, r14
    41f2:	b6 01       	movw	r22, r12
    41f4:	0e 94 0a 2a 	call	0x5414	; 0x5414 <__addsf3>
    41f8:	28 a5       	ldd	r18, Y+40	; 0x28
    41fa:	39 a5       	ldd	r19, Y+41	; 0x29
    41fc:	4a a5       	ldd	r20, Y+42	; 0x2a
    41fe:	5b a5       	ldd	r21, Y+43	; 0x2b
    4200:	0e 94 0a 2a 	call	0x5414	; 0x5414 <__addsf3>
    4204:	a3 01       	movw	r20, r6
    4206:	92 01       	movw	r18, r4
    4208:	0e 94 0a 2a 	call	0x5414	; 0x5414 <__addsf3>
    420c:	9b 01       	movw	r18, r22
    420e:	ac 01       	movw	r20, r24
    4210:	c5 01       	movw	r24, r10
    4212:	b4 01       	movw	r22, r8
    4214:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <__divsf3>
    4218:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <__fixsfdi>

			tof = tof_dtu * DWT_TIME_UNITS;
    421c:	0e 94 3c 2b 	call	0x5678	; 0x5678 <__floatdisf>
    4220:	22 ec       	ldi	r18, 0xC2	; 194
    4222:	38 ea       	ldi	r19, 0xA8	; 168
    4224:	49 e8       	ldi	r20, 0x89	; 137
    4226:	5d e2       	ldi	r21, 0x2D	; 45
    4228:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__mulsf3>
			distance = tof * SPEED_OF_LIGHT;
    422c:	29 ec       	ldi	r18, 0xC9	; 201
    422e:	38 ee       	ldi	r19, 0xE8	; 232
    4230:	4e e8       	ldi	r20, 0x8E	; 142
    4232:	5d e4       	ldi	r21, 0x4D	; 77
    4234:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__mulsf3>
			printf("DIST: %d mm\n", (uint16_t)(distance*100));
			printf("poll_tx_ts: %lX%lX, resp_rx_ts: %lX%lX, final_tx_ts: %lX%lX\n",(uint32_t)(poll_tx_ts >> 32),(uint32_t)(poll_tx_ts), (uint32_t)(resp_rx_ts>>32), (uint32_t)(resp_rx_ts) ,(uint32_t)(final_tx_ts>>32), (uint32_t)(final_tx_ts));
			printf("poll_rx_ts: %lX, resp_tx_ts: %lX, final_rx_ts: %lX\n\n",poll_rx_ts_32,resp_tx_ts_32,final_rx_ts_32);
			#endif 
			
			*final_distance = (uint16_t)(distance*100);
    4238:	20 e0       	ldi	r18, 0x00	; 0
    423a:	30 e0       	ldi	r19, 0x00	; 0
    423c:	48 ec       	ldi	r20, 0xC8	; 200
    423e:	52 e4       	ldi	r21, 0x42	; 66
    4240:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__mulsf3>
    4244:	0e 94 10 2b 	call	0x5620	; 0x5620 <__fixunssfsi>
    4248:	d1 01       	movw	r26, r2
    424a:	6d 93       	st	X+, r22
    424c:	7c 93       	st	X, r23
			return UWB_RX_OK;
    424e:	80 e0       	ldi	r24, 0x00	; 0
    4250:	19 c0       	rjmp	.+50     	; 0x4284 <dwt_resp_twr+0x306>
			
		}
		else
		{
			/* Clear RX error/timeout events in the DW1000 status register. */
			dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e9       	ldi	r19, 0x90	; 144
    4256:	47 e2       	ldi	r20, 0x27	; 39
    4258:	54 e2       	ldi	r21, 0x24	; 36
    425a:	60 e0       	ldi	r22, 0x00	; 0
    425c:	70 e0       	ldi	r23, 0x00	; 0
    425e:	8f e0       	ldi	r24, 0x0F	; 15
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	0e 94 20 16 	call	0x2c40	; 0x2c40 <dwt_write32bitoffsetreg>

			/* Reset RX to properly reinitialise LDE operation. */
			dwt_rxreset();
    4266:	1e da       	rcall	.-3012   	; 0x36a4 <dwt_rxreset>

		/* Reset RX to properly reinitialise LDE operation. */
		dwt_rxreset();
	}
	
	return UWB_RX_FAILED;
    4268:	82 e0       	ldi	r24, 0x02	; 2
    426a:	0c c0       	rjmp	.+24     	; 0x4284 <dwt_resp_twr+0x306>

	}
	else
	{
		/* Clear RX error/timeout events in the DW1000 status register. */
		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
    426c:	20 e0       	ldi	r18, 0x00	; 0
    426e:	30 e9       	ldi	r19, 0x90	; 144
    4270:	47 e2       	ldi	r20, 0x27	; 39
    4272:	54 e2       	ldi	r21, 0x24	; 36
    4274:	60 e0       	ldi	r22, 0x00	; 0
    4276:	70 e0       	ldi	r23, 0x00	; 0
    4278:	8f e0       	ldi	r24, 0x0F	; 15
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <dwt_write32bitoffsetreg>

		/* Reset RX to properly reinitialise LDE operation. */
		dwt_rxreset();
    4280:	11 da       	rcall	.-3038   	; 0x36a4 <dwt_rxreset>
	}
	
	return UWB_RX_FAILED;
    4282:	82 e0       	ldi	r24, 0x02	; 2
}
    4284:	ab 96       	adiw	r28, 0x2b	; 43
    4286:	cd bf       	out	0x3d, r28	; 61
    4288:	de bf       	out	0x3e, r29	; 62
    428a:	df 91       	pop	r29
    428c:	cf 91       	pop	r28
    428e:	1f 91       	pop	r17
    4290:	0f 91       	pop	r16
    4292:	ff 90       	pop	r15
    4294:	ef 90       	pop	r14
    4296:	df 90       	pop	r13
    4298:	cf 90       	pop	r12
    429a:	bf 90       	pop	r11
    429c:	af 90       	pop	r10
    429e:	9f 90       	pop	r9
    42a0:	8f 90       	pop	r8
    42a2:	7f 90       	pop	r7
    42a4:	6f 90       	pop	r6
    42a6:	5f 90       	pop	r5
    42a8:	4f 90       	pop	r4
    42aa:	3f 90       	pop	r3
    42ac:	2f 90       	pop	r2
    42ae:	08 95       	ret

000042b0 <deca_sleep>:

#include "../include/deca_device_api.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
    42b0:	af 92       	push	r10
    42b2:	bf 92       	push	r11
    42b4:	cf 92       	push	r12
    42b6:	df 92       	push	r13
    42b8:	ef 92       	push	r14
    42ba:	ff 92       	push	r15
    42bc:	0f 93       	push	r16
    42be:	1f 93       	push	r17
    42c0:	cf 93       	push	r28
    42c2:	df 93       	push	r29
    delay_ms(time_ms);
    42c4:	a1 2c       	mov	r10, r1
    42c6:	0f 2e       	mov	r0, r31
    42c8:	fc e6       	ldi	r31, 0x6C	; 108
    42ca:	bf 2e       	mov	r11, r31
    42cc:	f0 2d       	mov	r31, r0
    42ce:	0f 2e       	mov	r0, r31
    42d0:	fc ed       	ldi	r31, 0xDC	; 220
    42d2:	cf 2e       	mov	r12, r31
    42d4:	f0 2d       	mov	r31, r0
    42d6:	68 94       	set
    42d8:	dd 24       	eor	r13, r13
    42da:	d1 f8       	bld	r13, 1
    42dc:	e1 2c       	mov	r14, r1
    42de:	f1 2c       	mov	r15, r1
    42e0:	00 e0       	ldi	r16, 0x00	; 0
    42e2:	10 e0       	ldi	r17, 0x00	; 0
    42e4:	28 2f       	mov	r18, r24
    42e6:	39 2f       	mov	r19, r25
    42e8:	40 e0       	ldi	r20, 0x00	; 0
    42ea:	50 e0       	ldi	r21, 0x00	; 0
    42ec:	60 e0       	ldi	r22, 0x00	; 0
    42ee:	70 e0       	ldi	r23, 0x00	; 0
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	0e 94 bb 2c 	call	0x5976	; 0x5976 <__muldi3>
    42f8:	29 51       	subi	r18, 0x19	; 25
    42fa:	3c 4f       	sbci	r19, 0xFC	; 252
    42fc:	4f 4f       	sbci	r20, 0xFF	; 255
    42fe:	5f 4f       	sbci	r21, 0xFF	; 255
    4300:	6f 4f       	sbci	r22, 0xFF	; 255
    4302:	7f 4f       	sbci	r23, 0xFF	; 255
    4304:	8f 4f       	sbci	r24, 0xFF	; 255
    4306:	9f 4f       	sbci	r25, 0xFF	; 255
    4308:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__floatundisf>
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e8       	ldi	r19, 0x80	; 128
    4310:	4b eb       	ldi	r20, 0xBB	; 187
    4312:	55 e4       	ldi	r21, 0x45	; 69
    4314:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <__divsf3>
    4318:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <__fixunssfdi>
    431c:	f2 2f       	mov	r31, r18
    431e:	e3 2f       	mov	r30, r19
    4320:	8f 2f       	mov	r24, r31
    4322:	9e 2f       	mov	r25, r30
    4324:	a4 2f       	mov	r26, r20
    4326:	b5 2f       	mov	r27, r21
    4328:	01 97       	sbiw	r24, 0x01	; 1
    432a:	a1 09       	sbc	r26, r1
    432c:	b1 09       	sbc	r27, r1
    432e:	00 97       	sbiw	r24, 0x00	; 0
    4330:	a1 05       	cpc	r26, r1
    4332:	b1 05       	cpc	r27, r1
    4334:	c9 f7       	brne	.-14     	; 0x4328 <deca_sleep+0x78>
}
    4336:	df 91       	pop	r29
    4338:	cf 91       	pop	r28
    433a:	1f 91       	pop	r17
    433c:	0f 91       	pop	r16
    433e:	ff 90       	pop	r15
    4340:	ef 90       	pop	r14
    4342:	df 90       	pop	r13
    4344:	cf 90       	pop	r12
    4346:	bf 90       	pop	r11
    4348:	af 90       	pop	r10
    434a:	08 95       	ret

0000434c <openspi>:
	spi_disable(&SPIC);


	return 0;

} // end closespi()
    434c:	cf 92       	push	r12
    434e:	df 92       	push	r13
    4350:	ef 92       	push	r14
    4352:	ff 92       	push	r15
    4354:	0f 93       	push	r16
    4356:	1f 93       	push	r17
    4358:	84 e1       	ldi	r24, 0x14	; 20
    435a:	80 93 0f 2f 	sts	0x2F0F, r24
    435e:	80 ec       	ldi	r24, 0xC0	; 192
    4360:	98 e0       	ldi	r25, 0x08	; 8
    4362:	0e 94 40 01 	call	0x280	; 0x280 <spi_master_init>
    4366:	c1 2c       	mov	r12, r1
    4368:	d1 2c       	mov	r13, r1
    436a:	76 01       	movw	r14, r12
    436c:	00 e2       	ldi	r16, 0x20	; 32
    436e:	11 ea       	ldi	r17, 0xA1	; 161
    4370:	27 e0       	ldi	r18, 0x07	; 7
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	40 e0       	ldi	r20, 0x00	; 0
    4376:	6f e0       	ldi	r22, 0x0F	; 15
    4378:	7f e2       	ldi	r23, 0x2F	; 47
    437a:	80 ec       	ldi	r24, 0xC0	; 192
    437c:	98 e0       	ldi	r25, 0x08	; 8
    437e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <spi_master_setup_device>
    4382:	e0 ec       	ldi	r30, 0xC0	; 192
    4384:	f8 e0       	ldi	r31, 0x08	; 8
    4386:	80 81       	ld	r24, Z
    4388:	80 64       	ori	r24, 0x40	; 64
    438a:	80 83       	st	Z, r24
    438c:	80 e0       	ldi	r24, 0x00	; 0
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	1f 91       	pop	r17
    4392:	0f 91       	pop	r16
    4394:	ff 90       	pop	r15
    4396:	ef 90       	pop	r14
    4398:	df 90       	pop	r13
    439a:	cf 90       	pop	r12
    439c:	08 95       	ret

0000439e <fast_spi>:
    439e:	cf 92       	push	r12
    43a0:	df 92       	push	r13
    43a2:	ef 92       	push	r14
    43a4:	ff 92       	push	r15
    43a6:	0f 93       	push	r16
    43a8:	1f 93       	push	r17
    43aa:	c1 2c       	mov	r12, r1
    43ac:	d1 2c       	mov	r13, r1
    43ae:	76 01       	movw	r14, r12
    43b0:	00 ec       	ldi	r16, 0xC0	; 192
    43b2:	11 ee       	ldi	r17, 0xE1	; 225
    43b4:	24 ee       	ldi	r18, 0xE4	; 228
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	40 e0       	ldi	r20, 0x00	; 0
    43ba:	6f e0       	ldi	r22, 0x0F	; 15
    43bc:	7f e2       	ldi	r23, 0x2F	; 47
    43be:	80 ec       	ldi	r24, 0xC0	; 192
    43c0:	98 e0       	ldi	r25, 0x08	; 8
    43c2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <spi_master_setup_device>
    43c6:	1f 91       	pop	r17
    43c8:	0f 91       	pop	r16
    43ca:	ff 90       	pop	r15
    43cc:	ef 90       	pop	r14
    43ce:	df 90       	pop	r13
    43d0:	cf 90       	pop	r12
    43d2:	08 95       	ret

000043d4 <writetospi>:
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
#pragma GCC optimize ("O3")
int writetospi(uint16 headerLength, const uint8 *headerBuffer, uint32 bodylength, const uint8 *bodyBuffer)
{
    43d4:	8f 92       	push	r8
    43d6:	9f 92       	push	r9
    43d8:	af 92       	push	r10
    43da:	bf 92       	push	r11
    43dc:	cf 92       	push	r12
    43de:	df 92       	push	r13
    43e0:	ef 92       	push	r14
    43e2:	ff 92       	push	r15
    43e4:	0f 93       	push	r16
    43e6:	1f 93       	push	r17
    43e8:	cf 93       	push	r28
    43ea:	df 93       	push	r29
    43ec:	7c 01       	movw	r14, r24
    43ee:	eb 01       	movw	r28, r22
    43f0:	49 01       	movw	r8, r18
    43f2:	5a 01       	movw	r10, r20

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
    43f4:	3a db       	rcall	.-2444   	; 0x3a6a <decamutexon>
    43f6:	6c 01       	movw	r12, r24

    spi_select_device(&SPIC, &spi_device_conf);
    43f8:	6f e0       	ldi	r22, 0x0F	; 15
    43fa:	7f e2       	ldi	r23, 0x2F	; 47
    43fc:	80 ec       	ldi	r24, 0xC0	; 192
    43fe:	98 e0       	ldi	r25, 0x08	; 8
    4400:	0e 94 9a 01 	call	0x334	; 0x334 <spi_select_device>
    spi_write_packet(&SPIC, headerBuffer, headerLength);
    4404:	a7 01       	movw	r20, r14
    4406:	be 01       	movw	r22, r28
    4408:	80 ec       	ldi	r24, 0xC0	; 192
    440a:	98 e0       	ldi	r25, 0x08	; 8
    440c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <spi_write_packet>
    spi_write_packet(&SPIC, bodyBuffer, bodylength);
    4410:	a4 01       	movw	r20, r8
    4412:	b8 01       	movw	r22, r16
    4414:	80 ec       	ldi	r24, 0xC0	; 192
    4416:	98 e0       	ldi	r25, 0x08	; 8
    4418:	0e 94 78 01 	call	0x2f0	; 0x2f0 <spi_write_packet>
    spi_deselect_device(&SPIC, &spi_device_conf);
    441c:	6f e0       	ldi	r22, 0x0F	; 15
    441e:	7f e2       	ldi	r23, 0x2F	; 47
    4420:	80 ec       	ldi	r24, 0xC0	; 192
    4422:	98 e0       	ldi	r25, 0x08	; 8
    4424:	0e 94 b0 01 	call	0x360	; 0x360 <spi_deselect_device>

    decamutexoff(stat) ;
    4428:	c6 01       	movw	r24, r12
    442a:	23 db       	rcall	.-2490   	; 0x3a72 <decamutexoff>

    return 0;
} // end writetospi()
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	df 91       	pop	r29
    4432:	cf 91       	pop	r28
    4434:	1f 91       	pop	r17
    4436:	0f 91       	pop	r16
    4438:	ff 90       	pop	r15
    443a:	ef 90       	pop	r14
    443c:	df 90       	pop	r13
    443e:	cf 90       	pop	r12
    4440:	bf 90       	pop	r11
    4442:	af 90       	pop	r10
    4444:	9f 90       	pop	r9
    4446:	8f 90       	pop	r8
    4448:	08 95       	ret

0000444a <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
#pragma GCC optimize ("O3")
int readfromspi(uint16 headerLength, const uint8 *headerBuffer, uint32 readlength, uint8 *readBuffer)
{
    444a:	8f 92       	push	r8
    444c:	9f 92       	push	r9
    444e:	af 92       	push	r10
    4450:	bf 92       	push	r11
    4452:	cf 92       	push	r12
    4454:	df 92       	push	r13
    4456:	ef 92       	push	r14
    4458:	ff 92       	push	r15
    445a:	0f 93       	push	r16
    445c:	1f 93       	push	r17
    445e:	cf 93       	push	r28
    4460:	df 93       	push	r29
    4462:	7c 01       	movw	r14, r24
    4464:	eb 01       	movw	r28, r22
    4466:	49 01       	movw	r8, r18
    4468:	5a 01       	movw	r10, r20

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
    446a:	ff da       	rcall	.-2562   	; 0x3a6a <decamutexon>
    446c:	6c 01       	movw	r12, r24

    spi_select_device(&SPIC, &spi_device_conf);
    446e:	6f e0       	ldi	r22, 0x0F	; 15
    4470:	7f e2       	ldi	r23, 0x2F	; 47
    4472:	80 ec       	ldi	r24, 0xC0	; 192
    4474:	98 e0       	ldi	r25, 0x08	; 8
    4476:	0e 94 9a 01 	call	0x334	; 0x334 <spi_select_device>
    spi_write_packet(&SPIC, headerBuffer, headerLength);
    447a:	a7 01       	movw	r20, r14
    447c:	be 01       	movw	r22, r28
    447e:	80 ec       	ldi	r24, 0xC0	; 192
    4480:	98 e0       	ldi	r25, 0x08	; 8
    4482:	0e 94 78 01 	call	0x2f0	; 0x2f0 <spi_write_packet>
    spi_read_packet(&SPIC, readBuffer, readlength);
    4486:	a4 01       	movw	r20, r8
    4488:	b8 01       	movw	r22, r16
    448a:	80 ec       	ldi	r24, 0xC0	; 192
    448c:	98 e0       	ldi	r25, 0x08	; 8
    448e:	0e 94 87 01 	call	0x30e	; 0x30e <spi_read_packet>
    spi_deselect_device(&SPIC, &spi_device_conf);
    4492:	6f e0       	ldi	r22, 0x0F	; 15
    4494:	7f e2       	ldi	r23, 0x2F	; 47
    4496:	80 ec       	ldi	r24, 0xC0	; 192
    4498:	98 e0       	ldi	r25, 0x08	; 8
    449a:	0e 94 b0 01 	call	0x360	; 0x360 <spi_deselect_device>

    decamutexoff(stat) ;
    449e:	c6 01       	movw	r24, r12
    44a0:	e8 da       	rcall	.-2608   	; 0x3a72 <decamutexoff>

    return 0;
} // end readfromspi()
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	df 91       	pop	r29
    44a8:	cf 91       	pop	r28
    44aa:	1f 91       	pop	r17
    44ac:	0f 91       	pop	r16
    44ae:	ff 90       	pop	r15
    44b0:	ef 90       	pop	r14
    44b2:	df 90       	pop	r13
    44b4:	cf 90       	pop	r12
    44b6:	bf 90       	pop	r11
    44b8:	af 90       	pop	r10
    44ba:	9f 90       	pop	r9
    44bc:	8f 90       	pop	r8
    44be:	08 95       	ret

000044c0 <init_onepos>:

#include "../onepos.h"

void init_onepos(void)
{
	sysclk_init();
    44c0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <sysclk_init>
    44c4:	80 e0       	ldi	r24, 0x00	; 0
    44c6:	9a e6       	ldi	r25, 0x6A	; 106
    44c8:	a8 e1       	ldi	r26, 0x18	; 24
    44ca:	b0 e0       	ldi	r27, 0x00	; 0
    44cc:	01 97       	sbiw	r24, 0x01	; 1
    44ce:	a1 09       	sbc	r26, r1
    44d0:	b1 09       	sbc	r27, r1
    44d2:	00 97       	sbiw	r24, 0x00	; 0
    44d4:	a1 05       	cpc	r26, r1
    44d6:	b1 05       	cpc	r27, r1
    44d8:	c9 f7       	brne	.-14     	; 0x44cc <init_onepos+0xc>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    44da:	e0 e4       	ldi	r30, 0x40	; 64
    44dc:	f6 e0       	ldi	r31, 0x06	; 6
    44de:	88 e0       	ldi	r24, 0x08	; 8
    44e0:	82 83       	std	Z+2, r24	; 0x02
    44e2:	34 e0       	ldi	r19, 0x04	; 4
    44e4:	32 83       	std	Z+2, r19	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    44e6:	a0 e0       	ldi	r26, 0x00	; 0
    44e8:	b6 e0       	ldi	r27, 0x06	; 6
    44ea:	90 e4       	ldi	r25, 0x40	; 64
    44ec:	11 96       	adiw	r26, 0x01	; 1
    44ee:	9c 93       	st	X, r25
    44f0:	11 97       	sbiw	r26, 0x01	; 1
    44f2:	20 e8       	ldi	r18, 0x80	; 128
    44f4:	11 96       	adiw	r26, 0x01	; 1
    44f6:	2c 93       	st	X, r18
    44f8:	a0 e2       	ldi	r26, 0x20	; 32
    44fa:	b6 e0       	ldi	r27, 0x06	; 6
    44fc:	41 e0       	ldi	r20, 0x01	; 1
    44fe:	11 96       	adiw	r26, 0x01	; 1
    4500:	4c 93       	st	X, r20
    4502:	11 97       	sbiw	r26, 0x01	; 1
    4504:	42 e0       	ldi	r20, 0x02	; 2
    4506:	11 96       	adiw	r26, 0x01	; 1
    4508:	4c 93       	st	X, r20
    450a:	a0 e8       	ldi	r26, 0x80	; 128
    450c:	b6 e0       	ldi	r27, 0x06	; 6
    450e:	11 96       	adiw	r26, 0x01	; 1
    4510:	4c 93       	st	X, r20
    4512:	11 97       	sbiw	r26, 0x01	; 1
    4514:	11 96       	adiw	r26, 0x01	; 1
    4516:	8c 93       	st	X, r24
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    4518:	a0 e6       	ldi	r26, 0x60	; 96
    451a:	b6 e0       	ldi	r27, 0x06	; 6
    451c:	12 96       	adiw	r26, 0x02	; 2
    451e:	3c 93       	st	X, r19
    4520:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    4522:	11 96       	adiw	r26, 0x01	; 1
    4524:	8c 93       	st	X, r24
    4526:	80 e1       	ldi	r24, 0x10	; 16
    4528:	81 83       	std	Z+1, r24	; 0x01
    452a:	80 e2       	ldi	r24, 0x20	; 32
    452c:	81 83       	std	Z+1, r24	; 0x01
    452e:	21 83       	std	Z+1, r18	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    4530:	92 83       	std	Z+2, r25	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4532:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    4534:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    4536:	e6 e5       	ldi	r30, 0x56	; 86
    4538:	f6 e0       	ldi	r31, 0x06	; 6
    453a:	90 81       	ld	r25, Z
    453c:	97 70       	andi	r25, 0x07	; 7
    453e:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    4540:	90 81       	ld	r25, Z
    4542:	90 61       	ori	r25, 0x10	; 16
    4544:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4546:	8f bf       	out	0x3f, r24	; 63
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    4548:	81 e0       	ldi	r24, 0x01	; 1
    454a:	e0 e8       	ldi	r30, 0x80	; 128
    454c:	f6 e0       	ldi	r31, 0x06	; 6
    454e:	82 83       	std	Z+2, r24	; 0x02
	
	#ifdef ENABLE_RTC
	// 	rtc_init();
	#endif
	#ifdef ENABLE_USB
	usb_init();
    4550:	2c c5       	rjmp	.+2648   	; 0x4faa <usb_init>
    4552:	08 95       	ret

00004554 <init_animation>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4554:	80 e4       	ldi	r24, 0x40	; 64
    4556:	e0 e0       	ldi	r30, 0x00	; 0
    4558:	f6 e0       	ldi	r31, 0x06	; 6
    455a:	85 83       	std	Z+5, r24	; 0x05
    455c:	80 e0       	ldi	r24, 0x00	; 0
    455e:	92 ee       	ldi	r25, 0xE2	; 226
    4560:	a4 e0       	ldi	r26, 0x04	; 4
    4562:	b0 e0       	ldi	r27, 0x00	; 0
    4564:	01 97       	sbiw	r24, 0x01	; 1
    4566:	a1 09       	sbc	r26, r1
    4568:	b1 09       	sbc	r27, r1
    456a:	00 97       	sbiw	r24, 0x00	; 0
    456c:	a1 05       	cpc	r26, r1
    456e:	b1 05       	cpc	r27, r1
    4570:	c9 f7       	brne	.-14     	; 0x4564 <init_animation+0x10>
    4572:	80 e8       	ldi	r24, 0x80	; 128
    4574:	e0 e0       	ldi	r30, 0x00	; 0
    4576:	f6 e0       	ldi	r31, 0x06	; 6
    4578:	85 83       	std	Z+5, r24	; 0x05
    457a:	80 e0       	ldi	r24, 0x00	; 0
    457c:	92 ee       	ldi	r25, 0xE2	; 226
    457e:	a4 e0       	ldi	r26, 0x04	; 4
    4580:	b0 e0       	ldi	r27, 0x00	; 0
    4582:	01 97       	sbiw	r24, 0x01	; 1
    4584:	a1 09       	sbc	r26, r1
    4586:	b1 09       	sbc	r27, r1
    4588:	00 97       	sbiw	r24, 0x00	; 0
    458a:	a1 05       	cpc	r26, r1
    458c:	b1 05       	cpc	r27, r1
    458e:	c9 f7       	brne	.-14     	; 0x4582 <init_animation+0x2e>
    4590:	81 e0       	ldi	r24, 0x01	; 1
    4592:	e0 e2       	ldi	r30, 0x20	; 32
    4594:	f6 e0       	ldi	r31, 0x06	; 6
    4596:	85 83       	std	Z+5, r24	; 0x05
    4598:	80 e0       	ldi	r24, 0x00	; 0
    459a:	92 ee       	ldi	r25, 0xE2	; 226
    459c:	a4 e0       	ldi	r26, 0x04	; 4
    459e:	b0 e0       	ldi	r27, 0x00	; 0
    45a0:	01 97       	sbiw	r24, 0x01	; 1
    45a2:	a1 09       	sbc	r26, r1
    45a4:	b1 09       	sbc	r27, r1
    45a6:	00 97       	sbiw	r24, 0x00	; 0
    45a8:	a1 05       	cpc	r26, r1
    45aa:	b1 05       	cpc	r27, r1
    45ac:	c9 f7       	brne	.-14     	; 0x45a0 <init_animation+0x4c>
    45ae:	82 e0       	ldi	r24, 0x02	; 2
    45b0:	e0 e2       	ldi	r30, 0x20	; 32
    45b2:	f6 e0       	ldi	r31, 0x06	; 6
    45b4:	85 83       	std	Z+5, r24	; 0x05
    45b6:	80 e0       	ldi	r24, 0x00	; 0
    45b8:	92 ee       	ldi	r25, 0xE2	; 226
    45ba:	a4 e0       	ldi	r26, 0x04	; 4
    45bc:	b0 e0       	ldi	r27, 0x00	; 0
    45be:	01 97       	sbiw	r24, 0x01	; 1
    45c0:	a1 09       	sbc	r26, r1
    45c2:	b1 09       	sbc	r27, r1
    45c4:	00 97       	sbiw	r24, 0x00	; 0
    45c6:	a1 05       	cpc	r26, r1
    45c8:	b1 05       	cpc	r27, r1
    45ca:	c9 f7       	brne	.-14     	; 0x45be <init_animation+0x6a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    45cc:	80 e4       	ldi	r24, 0x40	; 64
    45ce:	e0 e0       	ldi	r30, 0x00	; 0
    45d0:	f6 e0       	ldi	r31, 0x06	; 6
    45d2:	86 83       	std	Z+6, r24	; 0x06
    45d4:	80 e0       	ldi	r24, 0x00	; 0
    45d6:	92 ee       	ldi	r25, 0xE2	; 226
    45d8:	a4 e0       	ldi	r26, 0x04	; 4
    45da:	b0 e0       	ldi	r27, 0x00	; 0
    45dc:	01 97       	sbiw	r24, 0x01	; 1
    45de:	a1 09       	sbc	r26, r1
    45e0:	b1 09       	sbc	r27, r1
    45e2:	00 97       	sbiw	r24, 0x00	; 0
    45e4:	a1 05       	cpc	r26, r1
    45e6:	b1 05       	cpc	r27, r1
    45e8:	c9 f7       	brne	.-14     	; 0x45dc <init_animation+0x88>
    45ea:	80 e8       	ldi	r24, 0x80	; 128
    45ec:	e0 e0       	ldi	r30, 0x00	; 0
    45ee:	f6 e0       	ldi	r31, 0x06	; 6
    45f0:	86 83       	std	Z+6, r24	; 0x06
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	92 ee       	ldi	r25, 0xE2	; 226
    45f6:	a4 e0       	ldi	r26, 0x04	; 4
    45f8:	b0 e0       	ldi	r27, 0x00	; 0
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	a1 09       	sbc	r26, r1
    45fe:	b1 09       	sbc	r27, r1
    4600:	00 97       	sbiw	r24, 0x00	; 0
    4602:	a1 05       	cpc	r26, r1
    4604:	b1 05       	cpc	r27, r1
    4606:	c9 f7       	brne	.-14     	; 0x45fa <init_animation+0xa6>
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	e0 e2       	ldi	r30, 0x20	; 32
    460c:	f6 e0       	ldi	r31, 0x06	; 6
    460e:	86 83       	std	Z+6, r24	; 0x06
    4610:	80 e0       	ldi	r24, 0x00	; 0
    4612:	92 ee       	ldi	r25, 0xE2	; 226
    4614:	a4 e0       	ldi	r26, 0x04	; 4
    4616:	b0 e0       	ldi	r27, 0x00	; 0
    4618:	01 97       	sbiw	r24, 0x01	; 1
    461a:	a1 09       	sbc	r26, r1
    461c:	b1 09       	sbc	r27, r1
    461e:	00 97       	sbiw	r24, 0x00	; 0
    4620:	a1 05       	cpc	r26, r1
    4622:	b1 05       	cpc	r27, r1
    4624:	c9 f7       	brne	.-14     	; 0x4618 <init_animation+0xc4>
    4626:	82 e0       	ldi	r24, 0x02	; 2
    4628:	e0 e2       	ldi	r30, 0x20	; 32
    462a:	f6 e0       	ldi	r31, 0x06	; 6
    462c:	86 83       	std	Z+6, r24	; 0x06
    462e:	80 e0       	ldi	r24, 0x00	; 0
    4630:	92 ee       	ldi	r25, 0xE2	; 226
    4632:	a4 e0       	ldi	r26, 0x04	; 4
    4634:	b0 e0       	ldi	r27, 0x00	; 0
    4636:	01 97       	sbiw	r24, 0x01	; 1
    4638:	a1 09       	sbc	r26, r1
    463a:	b1 09       	sbc	r27, r1
    463c:	00 97       	sbiw	r24, 0x00	; 0
    463e:	a1 05       	cpc	r26, r1
    4640:	b1 05       	cpc	r27, r1
    4642:	c9 f7       	brne	.-14     	; 0x4636 <init_animation+0xe2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4644:	80 e4       	ldi	r24, 0x40	; 64
    4646:	e0 e0       	ldi	r30, 0x00	; 0
    4648:	f6 e0       	ldi	r31, 0x06	; 6
    464a:	85 83       	std	Z+5, r24	; 0x05
    464c:	80 e0       	ldi	r24, 0x00	; 0
    464e:	94 ec       	ldi	r25, 0xC4	; 196
    4650:	a9 e0       	ldi	r26, 0x09	; 9
    4652:	b0 e0       	ldi	r27, 0x00	; 0
    4654:	01 97       	sbiw	r24, 0x01	; 1
    4656:	a1 09       	sbc	r26, r1
    4658:	b1 09       	sbc	r27, r1
    465a:	00 97       	sbiw	r24, 0x00	; 0
    465c:	a1 05       	cpc	r26, r1
    465e:	b1 05       	cpc	r27, r1
    4660:	c9 f7       	brne	.-14     	; 0x4654 <init_animation+0x100>
    4662:	80 e8       	ldi	r24, 0x80	; 128
    4664:	e0 e0       	ldi	r30, 0x00	; 0
    4666:	f6 e0       	ldi	r31, 0x06	; 6
    4668:	85 83       	std	Z+5, r24	; 0x05
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	94 ec       	ldi	r25, 0xC4	; 196
    466e:	a9 e0       	ldi	r26, 0x09	; 9
    4670:	b0 e0       	ldi	r27, 0x00	; 0
    4672:	01 97       	sbiw	r24, 0x01	; 1
    4674:	a1 09       	sbc	r26, r1
    4676:	b1 09       	sbc	r27, r1
    4678:	00 97       	sbiw	r24, 0x00	; 0
    467a:	a1 05       	cpc	r26, r1
    467c:	b1 05       	cpc	r27, r1
    467e:	c9 f7       	brne	.-14     	; 0x4672 <init_animation+0x11e>
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	e0 e2       	ldi	r30, 0x20	; 32
    4684:	f6 e0       	ldi	r31, 0x06	; 6
    4686:	85 83       	std	Z+5, r24	; 0x05
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	94 ec       	ldi	r25, 0xC4	; 196
    468c:	a9 e0       	ldi	r26, 0x09	; 9
    468e:	b0 e0       	ldi	r27, 0x00	; 0
    4690:	01 97       	sbiw	r24, 0x01	; 1
    4692:	a1 09       	sbc	r26, r1
    4694:	b1 09       	sbc	r27, r1
    4696:	00 97       	sbiw	r24, 0x00	; 0
    4698:	a1 05       	cpc	r26, r1
    469a:	b1 05       	cpc	r27, r1
    469c:	c9 f7       	brne	.-14     	; 0x4690 <init_animation+0x13c>
    469e:	82 e0       	ldi	r24, 0x02	; 2
    46a0:	e0 e2       	ldi	r30, 0x20	; 32
    46a2:	f6 e0       	ldi	r31, 0x06	; 6
    46a4:	85 83       	std	Z+5, r24	; 0x05
    46a6:	80 e0       	ldi	r24, 0x00	; 0
    46a8:	94 ec       	ldi	r25, 0xC4	; 196
    46aa:	a9 e0       	ldi	r26, 0x09	; 9
    46ac:	b0 e0       	ldi	r27, 0x00	; 0
    46ae:	01 97       	sbiw	r24, 0x01	; 1
    46b0:	a1 09       	sbc	r26, r1
    46b2:	b1 09       	sbc	r27, r1
    46b4:	00 97       	sbiw	r24, 0x00	; 0
    46b6:	a1 05       	cpc	r26, r1
    46b8:	b1 05       	cpc	r27, r1
    46ba:	c9 f7       	brne	.-14     	; 0x46ae <init_animation+0x15a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    46bc:	80 e4       	ldi	r24, 0x40	; 64
    46be:	e0 e0       	ldi	r30, 0x00	; 0
    46c0:	f6 e0       	ldi	r31, 0x06	; 6
    46c2:	86 83       	std	Z+6, r24	; 0x06
    46c4:	80 e0       	ldi	r24, 0x00	; 0
    46c6:	94 ec       	ldi	r25, 0xC4	; 196
    46c8:	a9 e0       	ldi	r26, 0x09	; 9
    46ca:	b0 e0       	ldi	r27, 0x00	; 0
    46cc:	01 97       	sbiw	r24, 0x01	; 1
    46ce:	a1 09       	sbc	r26, r1
    46d0:	b1 09       	sbc	r27, r1
    46d2:	00 97       	sbiw	r24, 0x00	; 0
    46d4:	a1 05       	cpc	r26, r1
    46d6:	b1 05       	cpc	r27, r1
    46d8:	c9 f7       	brne	.-14     	; 0x46cc <init_animation+0x178>
    46da:	80 e8       	ldi	r24, 0x80	; 128
    46dc:	e0 e0       	ldi	r30, 0x00	; 0
    46de:	f6 e0       	ldi	r31, 0x06	; 6
    46e0:	86 83       	std	Z+6, r24	; 0x06
    46e2:	80 e0       	ldi	r24, 0x00	; 0
    46e4:	94 ec       	ldi	r25, 0xC4	; 196
    46e6:	a9 e0       	ldi	r26, 0x09	; 9
    46e8:	b0 e0       	ldi	r27, 0x00	; 0
    46ea:	01 97       	sbiw	r24, 0x01	; 1
    46ec:	a1 09       	sbc	r26, r1
    46ee:	b1 09       	sbc	r27, r1
    46f0:	00 97       	sbiw	r24, 0x00	; 0
    46f2:	a1 05       	cpc	r26, r1
    46f4:	b1 05       	cpc	r27, r1
    46f6:	c9 f7       	brne	.-14     	; 0x46ea <init_animation+0x196>
    46f8:	81 e0       	ldi	r24, 0x01	; 1
    46fa:	e0 e2       	ldi	r30, 0x20	; 32
    46fc:	f6 e0       	ldi	r31, 0x06	; 6
    46fe:	86 83       	std	Z+6, r24	; 0x06
    4700:	80 e0       	ldi	r24, 0x00	; 0
    4702:	94 ec       	ldi	r25, 0xC4	; 196
    4704:	a9 e0       	ldi	r26, 0x09	; 9
    4706:	b0 e0       	ldi	r27, 0x00	; 0
    4708:	01 97       	sbiw	r24, 0x01	; 1
    470a:	a1 09       	sbc	r26, r1
    470c:	b1 09       	sbc	r27, r1
    470e:	00 97       	sbiw	r24, 0x00	; 0
    4710:	a1 05       	cpc	r26, r1
    4712:	b1 05       	cpc	r27, r1
    4714:	c9 f7       	brne	.-14     	; 0x4708 <init_animation+0x1b4>
    4716:	82 e0       	ldi	r24, 0x02	; 2
    4718:	e0 e2       	ldi	r30, 0x20	; 32
    471a:	f6 e0       	ldi	r31, 0x06	; 6
    471c:	86 83       	std	Z+6, r24	; 0x06
    471e:	80 e0       	ldi	r24, 0x00	; 0
    4720:	94 ec       	ldi	r25, 0xC4	; 196
    4722:	a9 e0       	ldi	r26, 0x09	; 9
    4724:	b0 e0       	ldi	r27, 0x00	; 0
    4726:	01 97       	sbiw	r24, 0x01	; 1
    4728:	a1 09       	sbc	r26, r1
    472a:	b1 09       	sbc	r27, r1
    472c:	00 97       	sbiw	r24, 0x00	; 0
    472e:	a1 05       	cpc	r26, r1
    4730:	b1 05       	cpc	r27, r1
    4732:	c9 f7       	brne	.-14     	; 0x4726 <init_animation+0x1d2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4734:	80 e4       	ldi	r24, 0x40	; 64
    4736:	e0 e0       	ldi	r30, 0x00	; 0
    4738:	f6 e0       	ldi	r31, 0x06	; 6
    473a:	85 83       	std	Z+5, r24	; 0x05
    473c:	80 e0       	ldi	r24, 0x00	; 0
    473e:	96 ea       	ldi	r25, 0xA6	; 166
    4740:	ae e0       	ldi	r26, 0x0E	; 14
    4742:	b0 e0       	ldi	r27, 0x00	; 0
    4744:	01 97       	sbiw	r24, 0x01	; 1
    4746:	a1 09       	sbc	r26, r1
    4748:	b1 09       	sbc	r27, r1
    474a:	00 97       	sbiw	r24, 0x00	; 0
    474c:	a1 05       	cpc	r26, r1
    474e:	b1 05       	cpc	r27, r1
    4750:	c9 f7       	brne	.-14     	; 0x4744 <init_animation+0x1f0>
    4752:	80 e8       	ldi	r24, 0x80	; 128
    4754:	e0 e0       	ldi	r30, 0x00	; 0
    4756:	f6 e0       	ldi	r31, 0x06	; 6
    4758:	85 83       	std	Z+5, r24	; 0x05
    475a:	80 e0       	ldi	r24, 0x00	; 0
    475c:	96 ea       	ldi	r25, 0xA6	; 166
    475e:	ae e0       	ldi	r26, 0x0E	; 14
    4760:	b0 e0       	ldi	r27, 0x00	; 0
    4762:	01 97       	sbiw	r24, 0x01	; 1
    4764:	a1 09       	sbc	r26, r1
    4766:	b1 09       	sbc	r27, r1
    4768:	00 97       	sbiw	r24, 0x00	; 0
    476a:	a1 05       	cpc	r26, r1
    476c:	b1 05       	cpc	r27, r1
    476e:	c9 f7       	brne	.-14     	; 0x4762 <init_animation+0x20e>
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	e0 e2       	ldi	r30, 0x20	; 32
    4774:	f6 e0       	ldi	r31, 0x06	; 6
    4776:	85 83       	std	Z+5, r24	; 0x05
    4778:	80 e0       	ldi	r24, 0x00	; 0
    477a:	96 ea       	ldi	r25, 0xA6	; 166
    477c:	ae e0       	ldi	r26, 0x0E	; 14
    477e:	b0 e0       	ldi	r27, 0x00	; 0
    4780:	01 97       	sbiw	r24, 0x01	; 1
    4782:	a1 09       	sbc	r26, r1
    4784:	b1 09       	sbc	r27, r1
    4786:	00 97       	sbiw	r24, 0x00	; 0
    4788:	a1 05       	cpc	r26, r1
    478a:	b1 05       	cpc	r27, r1
    478c:	c9 f7       	brne	.-14     	; 0x4780 <init_animation+0x22c>
    478e:	82 e0       	ldi	r24, 0x02	; 2
    4790:	e0 e2       	ldi	r30, 0x20	; 32
    4792:	f6 e0       	ldi	r31, 0x06	; 6
    4794:	85 83       	std	Z+5, r24	; 0x05
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	96 ea       	ldi	r25, 0xA6	; 166
    479a:	ae e0       	ldi	r26, 0x0E	; 14
    479c:	b0 e0       	ldi	r27, 0x00	; 0
    479e:	01 97       	sbiw	r24, 0x01	; 1
    47a0:	a1 09       	sbc	r26, r1
    47a2:	b1 09       	sbc	r27, r1
    47a4:	00 97       	sbiw	r24, 0x00	; 0
    47a6:	a1 05       	cpc	r26, r1
    47a8:	b1 05       	cpc	r27, r1
    47aa:	c9 f7       	brne	.-14     	; 0x479e <init_animation+0x24a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    47ac:	80 e4       	ldi	r24, 0x40	; 64
    47ae:	e0 e0       	ldi	r30, 0x00	; 0
    47b0:	f6 e0       	ldi	r31, 0x06	; 6
    47b2:	86 83       	std	Z+6, r24	; 0x06
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	96 ea       	ldi	r25, 0xA6	; 166
    47b8:	ae e0       	ldi	r26, 0x0E	; 14
    47ba:	b0 e0       	ldi	r27, 0x00	; 0
    47bc:	01 97       	sbiw	r24, 0x01	; 1
    47be:	a1 09       	sbc	r26, r1
    47c0:	b1 09       	sbc	r27, r1
    47c2:	00 97       	sbiw	r24, 0x00	; 0
    47c4:	a1 05       	cpc	r26, r1
    47c6:	b1 05       	cpc	r27, r1
    47c8:	c9 f7       	brne	.-14     	; 0x47bc <init_animation+0x268>
    47ca:	80 e8       	ldi	r24, 0x80	; 128
    47cc:	e0 e0       	ldi	r30, 0x00	; 0
    47ce:	f6 e0       	ldi	r31, 0x06	; 6
    47d0:	86 83       	std	Z+6, r24	; 0x06
    47d2:	80 e0       	ldi	r24, 0x00	; 0
    47d4:	96 ea       	ldi	r25, 0xA6	; 166
    47d6:	ae e0       	ldi	r26, 0x0E	; 14
    47d8:	b0 e0       	ldi	r27, 0x00	; 0
    47da:	01 97       	sbiw	r24, 0x01	; 1
    47dc:	a1 09       	sbc	r26, r1
    47de:	b1 09       	sbc	r27, r1
    47e0:	00 97       	sbiw	r24, 0x00	; 0
    47e2:	a1 05       	cpc	r26, r1
    47e4:	b1 05       	cpc	r27, r1
    47e6:	c9 f7       	brne	.-14     	; 0x47da <init_animation+0x286>
    47e8:	81 e0       	ldi	r24, 0x01	; 1
    47ea:	e0 e2       	ldi	r30, 0x20	; 32
    47ec:	f6 e0       	ldi	r31, 0x06	; 6
    47ee:	86 83       	std	Z+6, r24	; 0x06
    47f0:	80 e0       	ldi	r24, 0x00	; 0
    47f2:	96 ea       	ldi	r25, 0xA6	; 166
    47f4:	ae e0       	ldi	r26, 0x0E	; 14
    47f6:	b0 e0       	ldi	r27, 0x00	; 0
    47f8:	01 97       	sbiw	r24, 0x01	; 1
    47fa:	a1 09       	sbc	r26, r1
    47fc:	b1 09       	sbc	r27, r1
    47fe:	00 97       	sbiw	r24, 0x00	; 0
    4800:	a1 05       	cpc	r26, r1
    4802:	b1 05       	cpc	r27, r1
    4804:	c9 f7       	brne	.-14     	; 0x47f8 <init_animation+0x2a4>
    4806:	82 e0       	ldi	r24, 0x02	; 2
    4808:	e0 e2       	ldi	r30, 0x20	; 32
    480a:	f6 e0       	ldi	r31, 0x06	; 6
    480c:	86 83       	std	Z+6, r24	; 0x06
    480e:	80 e0       	ldi	r24, 0x00	; 0
    4810:	96 ea       	ldi	r25, 0xA6	; 166
    4812:	ae e0       	ldi	r26, 0x0E	; 14
    4814:	b0 e0       	ldi	r27, 0x00	; 0
    4816:	01 97       	sbiw	r24, 0x01	; 1
    4818:	a1 09       	sbc	r26, r1
    481a:	b1 09       	sbc	r27, r1
    481c:	00 97       	sbiw	r24, 0x00	; 0
    481e:	a1 05       	cpc	r26, r1
    4820:	b1 05       	cpc	r27, r1
    4822:	c9 f7       	brne	.-14     	; 0x4816 <init_animation+0x2c2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4824:	80 e4       	ldi	r24, 0x40	; 64
    4826:	e0 e0       	ldi	r30, 0x00	; 0
    4828:	f6 e0       	ldi	r31, 0x06	; 6
    482a:	85 83       	std	Z+5, r24	; 0x05
    482c:	80 e0       	ldi	r24, 0x00	; 0
    482e:	98 e8       	ldi	r25, 0x88	; 136
    4830:	a3 e1       	ldi	r26, 0x13	; 19
    4832:	b0 e0       	ldi	r27, 0x00	; 0
    4834:	01 97       	sbiw	r24, 0x01	; 1
    4836:	a1 09       	sbc	r26, r1
    4838:	b1 09       	sbc	r27, r1
    483a:	00 97       	sbiw	r24, 0x00	; 0
    483c:	a1 05       	cpc	r26, r1
    483e:	b1 05       	cpc	r27, r1
    4840:	c9 f7       	brne	.-14     	; 0x4834 <init_animation+0x2e0>
    4842:	80 e8       	ldi	r24, 0x80	; 128
    4844:	e0 e0       	ldi	r30, 0x00	; 0
    4846:	f6 e0       	ldi	r31, 0x06	; 6
    4848:	85 83       	std	Z+5, r24	; 0x05
    484a:	80 e0       	ldi	r24, 0x00	; 0
    484c:	98 e8       	ldi	r25, 0x88	; 136
    484e:	a3 e1       	ldi	r26, 0x13	; 19
    4850:	b0 e0       	ldi	r27, 0x00	; 0
    4852:	01 97       	sbiw	r24, 0x01	; 1
    4854:	a1 09       	sbc	r26, r1
    4856:	b1 09       	sbc	r27, r1
    4858:	00 97       	sbiw	r24, 0x00	; 0
    485a:	a1 05       	cpc	r26, r1
    485c:	b1 05       	cpc	r27, r1
    485e:	c9 f7       	brne	.-14     	; 0x4852 <init_animation+0x2fe>
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	e0 e2       	ldi	r30, 0x20	; 32
    4864:	f6 e0       	ldi	r31, 0x06	; 6
    4866:	85 83       	std	Z+5, r24	; 0x05
    4868:	80 e0       	ldi	r24, 0x00	; 0
    486a:	98 e8       	ldi	r25, 0x88	; 136
    486c:	a3 e1       	ldi	r26, 0x13	; 19
    486e:	b0 e0       	ldi	r27, 0x00	; 0
    4870:	01 97       	sbiw	r24, 0x01	; 1
    4872:	a1 09       	sbc	r26, r1
    4874:	b1 09       	sbc	r27, r1
    4876:	00 97       	sbiw	r24, 0x00	; 0
    4878:	a1 05       	cpc	r26, r1
    487a:	b1 05       	cpc	r27, r1
    487c:	c9 f7       	brne	.-14     	; 0x4870 <init_animation+0x31c>
    487e:	82 e0       	ldi	r24, 0x02	; 2
    4880:	e0 e2       	ldi	r30, 0x20	; 32
    4882:	f6 e0       	ldi	r31, 0x06	; 6
    4884:	85 83       	std	Z+5, r24	; 0x05
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	98 e8       	ldi	r25, 0x88	; 136
    488a:	a3 e1       	ldi	r26, 0x13	; 19
    488c:	b0 e0       	ldi	r27, 0x00	; 0
    488e:	01 97       	sbiw	r24, 0x01	; 1
    4890:	a1 09       	sbc	r26, r1
    4892:	b1 09       	sbc	r27, r1
    4894:	00 97       	sbiw	r24, 0x00	; 0
    4896:	a1 05       	cpc	r26, r1
    4898:	b1 05       	cpc	r27, r1
    489a:	c9 f7       	brne	.-14     	; 0x488e <init_animation+0x33a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    489c:	80 e4       	ldi	r24, 0x40	; 64
    489e:	e0 e0       	ldi	r30, 0x00	; 0
    48a0:	f6 e0       	ldi	r31, 0x06	; 6
    48a2:	86 83       	std	Z+6, r24	; 0x06
    48a4:	80 e0       	ldi	r24, 0x00	; 0
    48a6:	98 e8       	ldi	r25, 0x88	; 136
    48a8:	a3 e1       	ldi	r26, 0x13	; 19
    48aa:	b0 e0       	ldi	r27, 0x00	; 0
    48ac:	01 97       	sbiw	r24, 0x01	; 1
    48ae:	a1 09       	sbc	r26, r1
    48b0:	b1 09       	sbc	r27, r1
    48b2:	00 97       	sbiw	r24, 0x00	; 0
    48b4:	a1 05       	cpc	r26, r1
    48b6:	b1 05       	cpc	r27, r1
    48b8:	c9 f7       	brne	.-14     	; 0x48ac <init_animation+0x358>
    48ba:	80 e8       	ldi	r24, 0x80	; 128
    48bc:	e0 e0       	ldi	r30, 0x00	; 0
    48be:	f6 e0       	ldi	r31, 0x06	; 6
    48c0:	86 83       	std	Z+6, r24	; 0x06
    48c2:	80 e0       	ldi	r24, 0x00	; 0
    48c4:	98 e8       	ldi	r25, 0x88	; 136
    48c6:	a3 e1       	ldi	r26, 0x13	; 19
    48c8:	b0 e0       	ldi	r27, 0x00	; 0
    48ca:	01 97       	sbiw	r24, 0x01	; 1
    48cc:	a1 09       	sbc	r26, r1
    48ce:	b1 09       	sbc	r27, r1
    48d0:	00 97       	sbiw	r24, 0x00	; 0
    48d2:	a1 05       	cpc	r26, r1
    48d4:	b1 05       	cpc	r27, r1
    48d6:	c9 f7       	brne	.-14     	; 0x48ca <init_animation+0x376>
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	e0 e2       	ldi	r30, 0x20	; 32
    48dc:	f6 e0       	ldi	r31, 0x06	; 6
    48de:	86 83       	std	Z+6, r24	; 0x06
    48e0:	80 e0       	ldi	r24, 0x00	; 0
    48e2:	98 e8       	ldi	r25, 0x88	; 136
    48e4:	a3 e1       	ldi	r26, 0x13	; 19
    48e6:	b0 e0       	ldi	r27, 0x00	; 0
    48e8:	01 97       	sbiw	r24, 0x01	; 1
    48ea:	a1 09       	sbc	r26, r1
    48ec:	b1 09       	sbc	r27, r1
    48ee:	00 97       	sbiw	r24, 0x00	; 0
    48f0:	a1 05       	cpc	r26, r1
    48f2:	b1 05       	cpc	r27, r1
    48f4:	c9 f7       	brne	.-14     	; 0x48e8 <init_animation+0x394>
    48f6:	82 e0       	ldi	r24, 0x02	; 2
    48f8:	e0 e2       	ldi	r30, 0x20	; 32
    48fa:	f6 e0       	ldi	r31, 0x06	; 6
    48fc:	86 83       	std	Z+6, r24	; 0x06
    48fe:	80 e0       	ldi	r24, 0x00	; 0
    4900:	98 e8       	ldi	r25, 0x88	; 136
    4902:	a3 e1       	ldi	r26, 0x13	; 19
    4904:	b0 e0       	ldi	r27, 0x00	; 0
    4906:	01 97       	sbiw	r24, 0x01	; 1
    4908:	a1 09       	sbc	r26, r1
    490a:	b1 09       	sbc	r27, r1
    490c:	00 97       	sbiw	r24, 0x00	; 0
    490e:	a1 05       	cpc	r26, r1
    4910:	b1 05       	cpc	r27, r1
    4912:	c9 f7       	brne	.-14     	; 0x4906 <init_animation+0x3b2>
	delay_ms(160);
	led3(OFF);
	delay_ms(160);
	led4(OFF);
	delay_ms(160);
    4914:	08 95       	ret

00004916 <onepos_save_cfg>:
	return onepos_config.uwb_rx_antenna_delay;
}

void onepos_set_uwb_rx_antenna_delay(uint16_t delay)
{
	onepos_config.uwb_rx_antenna_delay = delay;
    4916:	48 e2       	ldi	r20, 0x28	; 40
    4918:	50 e0       	ldi	r21, 0x00	; 0
    491a:	67 ee       	ldi	r22, 0xE7	; 231
    491c:	7e e2       	ldi	r23, 0x2E	; 46
    491e:	80 e0       	ldi	r24, 0x00	; 0
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	0c 94 81 13 	jmp	0x2702	; 0x2702 <nvm_eeprom_erase_and_write_buffer>
    4926:	08 95       	ret

00004928 <onepos_get_mem_check>:
    4928:	80 91 e7 2e 	lds	r24, 0x2EE7
    492c:	90 91 e8 2e 	lds	r25, 0x2EE8
    4930:	08 95       	ret

00004932 <onepos_get_node_id>:
    4932:	60 e0       	ldi	r22, 0x00	; 0
    4934:	70 e0       	ldi	r23, 0x00	; 0
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	0e 94 c2 13 	call	0x2784	; 0x2784 <nvm_read_byte>
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	08 95       	ret

00004940 <onepos_write_default_cfg>:
    4940:	cf 93       	push	r28
    4942:	df 93       	push	r29
    4944:	88 ec       	ldi	r24, 0xC8	; 200
    4946:	90 e1       	ldi	r25, 0x10	; 16
    4948:	80 93 e7 2e 	sts	0x2EE7, r24
    494c:	90 93 e8 2e 	sts	0x2EE8, r25
    4950:	f0 df       	rcall	.-32     	; 0x4932 <onepos_get_node_id>
    4952:	c9 ee       	ldi	r28, 0xE9	; 233
    4954:	de e2       	ldi	r29, 0x2E	; 46
    4956:	88 83       	st	Y, r24
    4958:	99 83       	std	Y+1, r25	; 0x01
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	80 93 eb 2e 	sts	0x2EEB, r24
    4960:	85 e1       	ldi	r24, 0x15	; 21
    4962:	e0 ed       	ldi	r30, 0xD0	; 208
    4964:	f3 e2       	ldi	r31, 0x23	; 35
    4966:	ac ee       	ldi	r26, 0xEC	; 236
    4968:	be e2       	ldi	r27, 0x2E	; 46
    496a:	01 90       	ld	r0, Z+
    496c:	0d 92       	st	X+, r0
    496e:	8a 95       	dec	r24
    4970:	e1 f7       	brne	.-8      	; 0x496a <onepos_write_default_cfg+0x2a>
    4972:	85 e0       	ldi	r24, 0x05	; 5
    4974:	e5 ee       	ldi	r30, 0xE5	; 229
    4976:	f3 e2       	ldi	r31, 0x23	; 35
    4978:	a1 e0       	ldi	r26, 0x01	; 1
    497a:	bf e2       	ldi	r27, 0x2F	; 47
    497c:	01 90       	ld	r0, Z+
    497e:	0d 92       	st	X+, r0
    4980:	8a 95       	dec	r24
    4982:	e1 f7       	brne	.-8      	; 0x497c <onepos_write_default_cfg+0x3c>
    4984:	85 e0       	ldi	r24, 0x05	; 5
    4986:	ea ee       	ldi	r30, 0xEA	; 234
    4988:	f3 e2       	ldi	r31, 0x23	; 35
    498a:	a6 e0       	ldi	r26, 0x06	; 6
    498c:	bf e2       	ldi	r27, 0x2F	; 47
    498e:	01 90       	ld	r0, Z+
    4990:	0d 92       	st	X+, r0
    4992:	8a 95       	dec	r24
    4994:	e1 f7       	brne	.-8      	; 0x498e <onepos_write_default_cfg+0x4e>
    4996:	88 81       	ld	r24, Y
    4998:	99 81       	ldd	r25, Y+1	; 0x01
    499a:	83 30       	cpi	r24, 0x03	; 3
    499c:	91 05       	cpc	r25, r1
    499e:	39 f1       	breq	.+78     	; 0x49ee <onepos_write_default_cfg+0xae>
    49a0:	30 f4       	brcc	.+12     	; 0x49ae <onepos_write_default_cfg+0x6e>
    49a2:	81 30       	cpi	r24, 0x01	; 1
    49a4:	91 05       	cpc	r25, r1
    49a6:	49 f0       	breq	.+18     	; 0x49ba <onepos_write_default_cfg+0x7a>
    49a8:	02 97       	sbiw	r24, 0x02	; 2
    49aa:	a1 f0       	breq	.+40     	; 0x49d4 <onepos_write_default_cfg+0x94>
    49ac:	47 c0       	rjmp	.+142    	; 0x4a3c <onepos_write_default_cfg+0xfc>
    49ae:	84 30       	cpi	r24, 0x04	; 4
    49b0:	91 05       	cpc	r25, r1
    49b2:	51 f1       	breq	.+84     	; 0x4a08 <onepos_write_default_cfg+0xc8>
    49b4:	05 97       	sbiw	r24, 0x05	; 5
    49b6:	a9 f1       	breq	.+106    	; 0x4a22 <onepos_write_default_cfg+0xe2>
    49b8:	41 c0       	rjmp	.+130    	; 0x4a3c <onepos_write_default_cfg+0xfc>
    49ba:	84 ef       	ldi	r24, 0xF4	; 244
    49bc:	97 e4       	ldi	r25, 0x47	; 71
    49be:	80 93 0b 2f 	sts	0x2F0B, r24
    49c2:	90 93 0c 2f 	sts	0x2F0C, r25
    49c6:	89 e8       	ldi	r24, 0x89	; 137
    49c8:	98 e3       	ldi	r25, 0x38	; 56
    49ca:	80 93 0d 2f 	sts	0x2F0D, r24
    49ce:	90 93 0e 2f 	sts	0x2F0E, r25
    49d2:	3e c0       	rjmp	.+124    	; 0x4a50 <onepos_write_default_cfg+0x110>
    49d4:	8d ee       	ldi	r24, 0xED	; 237
    49d6:	97 e4       	ldi	r25, 0x47	; 71
    49d8:	80 93 0b 2f 	sts	0x2F0B, r24
    49dc:	90 93 0c 2f 	sts	0x2F0C, r25
    49e0:	83 e8       	ldi	r24, 0x83	; 131
    49e2:	98 e3       	ldi	r25, 0x38	; 56
    49e4:	80 93 0d 2f 	sts	0x2F0D, r24
    49e8:	90 93 0e 2f 	sts	0x2F0E, r25
    49ec:	31 c0       	rjmp	.+98     	; 0x4a50 <onepos_write_default_cfg+0x110>
    49ee:	83 e0       	ldi	r24, 0x03	; 3
    49f0:	98 e4       	ldi	r25, 0x48	; 72
    49f2:	80 93 0b 2f 	sts	0x2F0B, r24
    49f6:	90 93 0c 2f 	sts	0x2F0C, r25
    49fa:	85 e9       	ldi	r24, 0x95	; 149
    49fc:	98 e3       	ldi	r25, 0x38	; 56
    49fe:	80 93 0d 2f 	sts	0x2F0D, r24
    4a02:	90 93 0e 2f 	sts	0x2F0E, r25
    4a06:	24 c0       	rjmp	.+72     	; 0x4a50 <onepos_write_default_cfg+0x110>
    4a08:	8b ee       	ldi	r24, 0xEB	; 235
    4a0a:	97 e4       	ldi	r25, 0x47	; 71
    4a0c:	80 93 0b 2f 	sts	0x2F0B, r24
    4a10:	90 93 0c 2f 	sts	0x2F0C, r25
    4a14:	82 e8       	ldi	r24, 0x82	; 130
    4a16:	98 e3       	ldi	r25, 0x38	; 56
    4a18:	80 93 0d 2f 	sts	0x2F0D, r24
    4a1c:	90 93 0e 2f 	sts	0x2F0E, r25
    4a20:	17 c0       	rjmp	.+46     	; 0x4a50 <onepos_write_default_cfg+0x110>
    4a22:	86 ee       	ldi	r24, 0xE6	; 230
    4a24:	97 e4       	ldi	r25, 0x47	; 71
    4a26:	80 93 0b 2f 	sts	0x2F0B, r24
    4a2a:	90 93 0c 2f 	sts	0x2F0C, r25
    4a2e:	8d e7       	ldi	r24, 0x7D	; 125
    4a30:	98 e3       	ldi	r25, 0x38	; 56
    4a32:	80 93 0d 2f 	sts	0x2F0D, r24
    4a36:	90 93 0e 2f 	sts	0x2F0E, r25
    4a3a:	0a c0       	rjmp	.+20     	; 0x4a50 <onepos_write_default_cfg+0x110>
    4a3c:	86 e3       	ldi	r24, 0x36	; 54
    4a3e:	90 e4       	ldi	r25, 0x40	; 64
    4a40:	80 93 0b 2f 	sts	0x2F0B, r24
    4a44:	90 93 0c 2f 	sts	0x2F0C, r25
    4a48:	80 93 0d 2f 	sts	0x2F0D, r24
    4a4c:	90 93 0e 2f 	sts	0x2F0E, r25
    4a50:	62 df       	rcall	.-316    	; 0x4916 <onepos_save_cfg>
    4a52:	df 91       	pop	r29
    4a54:	cf 91       	pop	r28
    4a56:	08 95       	ret

00004a58 <onepos_read_cfg>:
    4a58:	48 e2       	ldi	r20, 0x28	; 40
    4a5a:	50 e0       	ldi	r21, 0x00	; 0
    4a5c:	67 ee       	ldi	r22, 0xE7	; 231
    4a5e:	7e e2       	ldi	r23, 0x2E	; 46
    4a60:	80 e0       	ldi	r24, 0x00	; 0
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <nvm_eeprom_read_buffer>
    4a68:	80 91 e7 2e 	lds	r24, 0x2EE7
    4a6c:	90 91 e8 2e 	lds	r25, 0x2EE8
    4a70:	88 3c       	cpi	r24, 0xC8	; 200
    4a72:	90 41       	sbci	r25, 0x10	; 16
    4a74:	19 f0       	breq	.+6      	; 0x4a7c <onepos_read_cfg+0x24>
    4a76:	64 df       	rcall	.-312    	; 0x4940 <onepos_write_default_cfg>
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	08 95       	ret
    4a7c:	80 e0       	ldi	r24, 0x00	; 0
    4a7e:	08 95       	ret

00004a80 <onepos_get_namespaceID>:
    4a80:	6c ee       	ldi	r22, 0xEC	; 236
    4a82:	7e e2       	ldi	r23, 0x2E	; 46
    4a84:	0c 94 5b 2d 	jmp	0x5ab6	; 0x5ab6 <strcpy>
    4a88:	08 95       	ret

00004a8a <onepos_get_ble_scan_interval>:
    4a8a:	61 e0       	ldi	r22, 0x01	; 1
    4a8c:	7f e2       	ldi	r23, 0x2F	; 47
    4a8e:	0c 94 5b 2d 	jmp	0x5ab6	; 0x5ab6 <strcpy>
    4a92:	08 95       	ret

00004a94 <onepos_get_ble_scan_window>:
    4a94:	66 e0       	ldi	r22, 0x06	; 6
    4a96:	7f e2       	ldi	r23, 0x2F	; 47
    4a98:	0c 94 5b 2d 	jmp	0x5ab6	; 0x5ab6 <strcpy>
    4a9c:	08 95       	ret

00004a9e <onepos_print_current_configuration>:
    4a9e:	cf 93       	push	r28
    4aa0:	df 93       	push	r29
    4aa2:	cd b7       	in	r28, 0x3d	; 61
    4aa4:	de b7       	in	r29, 0x3e	; 62
    4aa6:	6f 97       	sbiw	r28, 0x1f	; 31
    4aa8:	cd bf       	out	0x3d, r28	; 61
    4aaa:	de bf       	out	0x3e, r29	; 62
    4aac:	ce 01       	movw	r24, r28
    4aae:	01 96       	adiw	r24, 0x01	; 1
    4ab0:	e7 df       	rcall	.-50     	; 0x4a80 <onepos_get_namespaceID>
    4ab2:	ce 01       	movw	r24, r28
    4ab4:	46 96       	adiw	r24, 0x16	; 22
    4ab6:	e9 df       	rcall	.-46     	; 0x4a8a <onepos_get_ble_scan_interval>
    4ab8:	ce 01       	movw	r24, r28
    4aba:	4b 96       	adiw	r24, 0x1b	; 27
    4abc:	eb df       	rcall	.-42     	; 0x4a94 <onepos_get_ble_scan_window>
    4abe:	8f e0       	ldi	r24, 0x0F	; 15
    4ac0:	94 e2       	ldi	r25, 0x24	; 36
    4ac2:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <puts>
    4ac6:	82 e5       	ldi	r24, 0x52	; 82
    4ac8:	94 e2       	ldi	r25, 0x24	; 36
    4aca:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <puts>
    4ace:	85 e9       	ldi	r24, 0x95	; 149
    4ad0:	94 e2       	ldi	r25, 0x24	; 36
    4ad2:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <puts>
    4ad6:	88 ed       	ldi	r24, 0xD8	; 216
    4ad8:	94 e2       	ldi	r25, 0x24	; 36
    4ada:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <puts>
    4ade:	8b e1       	ldi	r24, 0x1B	; 27
    4ae0:	95 e2       	ldi	r25, 0x25	; 37
    4ae2:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <puts>
    4ae6:	8e e5       	ldi	r24, 0x5E	; 94
    4ae8:	95 e2       	ldi	r25, 0x25	; 37
    4aea:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <puts>
    4aee:	81 ea       	ldi	r24, 0xA1	; 161
    4af0:	95 e2       	ldi	r25, 0x25	; 37
    4af2:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <puts>
    4af6:	84 ee       	ldi	r24, 0xE4	; 228
    4af8:	95 e2       	ldi	r25, 0x25	; 37
    4afa:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <puts>
    4afe:	87 e2       	ldi	r24, 0x27	; 39
    4b00:	96 e2       	ldi	r25, 0x26	; 38
    4b02:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <puts>
    4b06:	8a e6       	ldi	r24, 0x6A	; 106
    4b08:	96 e2       	ldi	r25, 0x26	; 38
    4b0a:	fc d7       	rcall	.+4088   	; 0x5b04 <puts>
    4b0c:	8d ea       	ldi	r24, 0xAD	; 173
    4b0e:	96 e2       	ldi	r25, 0x26	; 38
    4b10:	f9 d7       	rcall	.+4082   	; 0x5b04 <puts>
    4b12:	80 91 e7 2e 	lds	r24, 0x2EE7
    4b16:	90 91 e8 2e 	lds	r25, 0x2EE8
    4b1a:	9f 93       	push	r25
    4b1c:	8f 93       	push	r24
    4b1e:	82 ee       	ldi	r24, 0xE2	; 226
    4b20:	96 e2       	ldi	r25, 0x26	; 38
    4b22:	9f 93       	push	r25
    4b24:	8f 93       	push	r24
    4b26:	dd d7       	rcall	.+4026   	; 0x5ae2 <printf>
    4b28:	04 df       	rcall	.-504    	; 0x4932 <onepos_get_node_id>
    4b2a:	9f 93       	push	r25
    4b2c:	8f 93       	push	r24
    4b2e:	8e ef       	ldi	r24, 0xFE	; 254
    4b30:	96 e2       	ldi	r25, 0x26	; 38
    4b32:	9f 93       	push	r25
    4b34:	8f 93       	push	r24
    4b36:	d5 d7       	rcall	.+4010   	; 0x5ae2 <printf>
    4b38:	80 91 eb 2e 	lds	r24, 0x2EEB
    4b3c:	cd bf       	out	0x3d, r28	; 61
    4b3e:	de bf       	out	0x3e, r29	; 62
    4b40:	88 23       	and	r24, r24
    4b42:	19 f0       	breq	.+6      	; 0x4b4a <onepos_print_current_configuration+0xac>
    4b44:	8f ee       	ldi	r24, 0xEF	; 239
    4b46:	93 e2       	ldi	r25, 0x23	; 35
    4b48:	02 c0       	rjmp	.+4      	; 0x4b4e <onepos_print_current_configuration+0xb0>
    4b4a:	8f ef       	ldi	r24, 0xFF	; 255
    4b4c:	93 e2       	ldi	r25, 0x23	; 35
    4b4e:	9f 93       	push	r25
    4b50:	8f 93       	push	r24
    4b52:	89 e1       	ldi	r24, 0x19	; 25
    4b54:	97 e2       	ldi	r25, 0x27	; 39
    4b56:	9f 93       	push	r25
    4b58:	8f 93       	push	r24
    4b5a:	c3 d7       	rcall	.+3974   	; 0x5ae2 <printf>
    4b5c:	ce 01       	movw	r24, r28
    4b5e:	01 96       	adiw	r24, 0x01	; 1
    4b60:	9f 93       	push	r25
    4b62:	8f 93       	push	r24
    4b64:	84 e3       	ldi	r24, 0x34	; 52
    4b66:	97 e2       	ldi	r25, 0x27	; 39
    4b68:	9f 93       	push	r25
    4b6a:	8f 93       	push	r24
    4b6c:	ba d7       	rcall	.+3956   	; 0x5ae2 <printf>
    4b6e:	ce 01       	movw	r24, r28
    4b70:	46 96       	adiw	r24, 0x16	; 22
    4b72:	9f 93       	push	r25
    4b74:	8f 93       	push	r24
    4b76:	8f e4       	ldi	r24, 0x4F	; 79
    4b78:	97 e2       	ldi	r25, 0x27	; 39
    4b7a:	9f 93       	push	r25
    4b7c:	8f 93       	push	r24
    4b7e:	b1 d7       	rcall	.+3938   	; 0x5ae2 <printf>
    4b80:	ce 01       	movw	r24, r28
    4b82:	4b 96       	adiw	r24, 0x1b	; 27
    4b84:	9f 93       	push	r25
    4b86:	8f 93       	push	r24
    4b88:	8a e6       	ldi	r24, 0x6A	; 106
    4b8a:	97 e2       	ldi	r25, 0x27	; 39
    4b8c:	9f 93       	push	r25
    4b8e:	8f 93       	push	r24
    4b90:	a8 d7       	rcall	.+3920   	; 0x5ae2 <printf>
    4b92:	80 91 0b 2f 	lds	r24, 0x2F0B
    4b96:	90 91 0c 2f 	lds	r25, 0x2F0C
    4b9a:	9f 93       	push	r25
    4b9c:	8f 93       	push	r24
    4b9e:	85 e8       	ldi	r24, 0x85	; 133
    4ba0:	97 e2       	ldi	r25, 0x27	; 39
    4ba2:	9f 93       	push	r25
    4ba4:	8f 93       	push	r24
    4ba6:	9d d7       	rcall	.+3898   	; 0x5ae2 <printf>
    4ba8:	80 91 0d 2f 	lds	r24, 0x2F0D
    4bac:	90 91 0e 2f 	lds	r25, 0x2F0E
    4bb0:	9f 93       	push	r25
    4bb2:	8f 93       	push	r24
    4bb4:	80 ea       	ldi	r24, 0xA0	; 160
    4bb6:	97 e2       	ldi	r25, 0x27	; 39
    4bb8:	9f 93       	push	r25
    4bba:	8f 93       	push	r24
    4bbc:	92 d7       	rcall	.+3876   	; 0x5ae2 <printf>
    4bbe:	cd bf       	out	0x3d, r28	; 61
    4bc0:	de bf       	out	0x3e, r29	; 62
    4bc2:	6f 96       	adiw	r28, 0x1f	; 31
    4bc4:	cd bf       	out	0x3d, r28	; 61
    4bc6:	de bf       	out	0x3e, r29	; 62
    4bc8:	df 91       	pop	r29
    4bca:	cf 91       	pop	r28
    4bcc:	08 95       	ret

00004bce <onepos_set_namespaceID>:
    4bce:	bc 01       	movw	r22, r24
    4bd0:	8c ee       	ldi	r24, 0xEC	; 236
    4bd2:	9e e2       	ldi	r25, 0x2E	; 46
    4bd4:	70 c7       	rjmp	.+3808   	; 0x5ab6 <strcpy>
    4bd6:	08 95       	ret

00004bd8 <onepos_set_ble_scan_interval>:
    4bd8:	bc 01       	movw	r22, r24
    4bda:	81 e0       	ldi	r24, 0x01	; 1
    4bdc:	9f e2       	ldi	r25, 0x2F	; 47
    4bde:	6b c7       	rjmp	.+3798   	; 0x5ab6 <strcpy>
    4be0:	08 95       	ret

00004be2 <onepos_set_ble_scan_window>:
    4be2:	bc 01       	movw	r22, r24
    4be4:	86 e0       	ldi	r24, 0x06	; 6
    4be6:	9f e2       	ldi	r25, 0x2F	; 47
    4be8:	66 c7       	rjmp	.+3788   	; 0x5ab6 <strcpy>
    4bea:	08 95       	ret

00004bec <onepos_configure_interface>:
    4bec:	2f 92       	push	r2
    4bee:	3f 92       	push	r3
    4bf0:	4f 92       	push	r4
    4bf2:	5f 92       	push	r5
    4bf4:	6f 92       	push	r6
    4bf6:	7f 92       	push	r7
    4bf8:	8f 92       	push	r8
    4bfa:	9f 92       	push	r9
    4bfc:	af 92       	push	r10
    4bfe:	bf 92       	push	r11
    4c00:	cf 92       	push	r12
    4c02:	df 92       	push	r13
    4c04:	ef 92       	push	r14
    4c06:	ff 92       	push	r15
    4c08:	0f 93       	push	r16
    4c0a:	1f 93       	push	r17
    4c0c:	cf 93       	push	r28
    4c0e:	df 93       	push	r29
    4c10:	cd b7       	in	r28, 0x3d	; 61
    4c12:	de b7       	in	r29, 0x3e	; 62
    4c14:	ce 54       	subi	r28, 0x4E	; 78
    4c16:	d1 09       	sbc	r29, r1
    4c18:	cd bf       	out	0x3d, r28	; 61
    4c1a:	de bf       	out	0x3e, r29	; 62
    4c1c:	18 a2       	std	Y+32, r1	; 0x20
    4c1e:	1a a2       	std	Y+34, r1	; 0x22
    4c20:	1b a2       	std	Y+35, r1	; 0x23
    4c22:	1c a2       	std	Y+36, r1	; 0x24
    4c24:	1d a2       	std	Y+37, r1	; 0x25
    4c26:	51 2c       	mov	r5, r1
    4c28:	6e 01       	movw	r12, r28
    4c2a:	26 e2       	ldi	r18, 0x26	; 38
    4c2c:	c2 0e       	add	r12, r18
    4c2e:	d1 1c       	adc	r13, r1
    4c30:	7e 01       	movw	r14, r28
    4c32:	30 e4       	ldi	r19, 0x40	; 64
    4c34:	e3 0e       	add	r14, r19
    4c36:	f1 1c       	adc	r15, r1
    4c38:	8e 01       	movw	r16, r28
    4c3a:	05 5c       	subi	r16, 0xC5	; 197
    4c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c3e:	0f 2e       	mov	r0, r31
    4c40:	f7 ee       	ldi	r31, 0xE7	; 231
    4c42:	6f 2e       	mov	r6, r31
    4c44:	fe e2       	ldi	r31, 0x2E	; 46
    4c46:	7f 2e       	mov	r7, r31
    4c48:	f0 2d       	mov	r31, r0
    4c4a:	0f 2e       	mov	r0, r31
    4c4c:	ff ed       	ldi	r31, 0xDF	; 223
    4c4e:	8f 2e       	mov	r8, r31
    4c50:	f6 e2       	ldi	r31, 0x26	; 38
    4c52:	9f 2e       	mov	r9, r31
    4c54:	f0 2d       	mov	r31, r0
    4c56:	5e 01       	movw	r10, r28
    4c58:	81 e2       	ldi	r24, 0x21	; 33
    4c5a:	a8 0e       	add	r10, r24
    4c5c:	b1 1c       	adc	r11, r1
    4c5e:	fe 01       	movw	r30, r28
    4c60:	b4 96       	adiw	r30, 0x24	; 36
    4c62:	27 96       	adiw	r28, 0x07	; 7
    4c64:	ee af       	std	Y+62, r30	; 0x3e
    4c66:	ff af       	std	Y+63, r31	; 0x3f
    4c68:	27 97       	sbiw	r28, 0x07	; 7
    4c6a:	9e 01       	movw	r18, r28
    4c6c:	2e 5d       	subi	r18, 0xDE	; 222
    4c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c70:	29 96       	adiw	r28, 0x09	; 9
    4c72:	2e af       	std	Y+62, r18	; 0x3e
    4c74:	3f af       	std	Y+63, r19	; 0x3f
    4c76:	29 97       	sbiw	r28, 0x09	; 9
    4c78:	ce 01       	movw	r24, r28
    4c7a:	4b 96       	adiw	r24, 0x1b	; 27
    4c7c:	2b 96       	adiw	r28, 0x0b	; 11
    4c7e:	8e af       	std	Y+62, r24	; 0x3e
    4c80:	9f af       	std	Y+63, r25	; 0x3f
    4c82:	2b 97       	sbiw	r28, 0x0b	; 11
    4c84:	1e 01       	movw	r2, r28
    4c86:	96 e1       	ldi	r25, 0x16	; 22
    4c88:	29 0e       	add	r2, r25
    4c8a:	31 1c       	adc	r3, r1
    4c8c:	b3 97       	sbiw	r30, 0x23	; 35
    4c8e:	2d 96       	adiw	r28, 0x0d	; 13
    4c90:	ee af       	std	Y+62, r30	; 0x3e
    4c92:	ff af       	std	Y+63, r31	; 0x3f
    4c94:	2d 97       	sbiw	r28, 0x0d	; 13
    4c96:	22 50       	subi	r18, 0x02	; 2
    4c98:	31 09       	sbc	r19, r1
    4c9a:	2f 96       	adiw	r28, 0x0f	; 15
    4c9c:	2e af       	std	Y+62, r18	; 0x3e
    4c9e:	3f af       	std	Y+63, r19	; 0x3f
    4ca0:	2f 97       	sbiw	r28, 0x0f	; 15
    4ca2:	41 2c       	mov	r4, r1
    4ca4:	c6 01       	movw	r24, r12
    4ca6:	ec de       	rcall	.-552    	; 0x4a80 <onepos_get_namespaceID>
    4ca8:	c7 01       	movw	r24, r14
    4caa:	ef de       	rcall	.-546    	; 0x4a8a <onepos_get_ble_scan_interval>
    4cac:	c8 01       	movw	r24, r16
    4cae:	f2 de       	rcall	.-540    	; 0x4a94 <onepos_get_ble_scan_window>
    4cb0:	86 ec       	ldi	r24, 0xC6	; 198
    4cb2:	96 e2       	ldi	r25, 0x26	; 38
    4cb4:	27 d7       	rcall	.+3662   	; 0x5b04 <puts>
    4cb6:	8e ea       	ldi	r24, 0xAE	; 174
    4cb8:	96 e2       	ldi	r25, 0x26	; 38
    4cba:	24 d7       	rcall	.+3656   	; 0x5b04 <puts>
    4cbc:	f3 01       	movw	r30, r6
    4cbe:	80 81       	ld	r24, Z
    4cc0:	91 81       	ldd	r25, Z+1	; 0x01
    4cc2:	9f 93       	push	r25
    4cc4:	8f 93       	push	r24
    4cc6:	9f 92       	push	r9
    4cc8:	8f 92       	push	r8
    4cca:	0b d7       	rcall	.+3606   	; 0x5ae2 <printf>
    4ccc:	32 de       	rcall	.-924    	; 0x4932 <onepos_get_node_id>
    4cce:	9f 93       	push	r25
    4cd0:	8f 93       	push	r24
    4cd2:	8b ef       	ldi	r24, 0xFB	; 251
    4cd4:	96 e2       	ldi	r25, 0x26	; 38
    4cd6:	9f 93       	push	r25
    4cd8:	8f 93       	push	r24
    4cda:	03 d7       	rcall	.+3590   	; 0x5ae2 <printf>
    4cdc:	80 91 eb 2e 	lds	r24, 0x2EEB
    4ce0:	cd bf       	out	0x3d, r28	; 61
    4ce2:	de bf       	out	0x3e, r29	; 62
    4ce4:	88 23       	and	r24, r24
    4ce6:	19 f0       	breq	.+6      	; 0x4cee <onepos_configure_interface+0x102>
    4ce8:	8f ee       	ldi	r24, 0xEF	; 239
    4cea:	93 e2       	ldi	r25, 0x23	; 35
    4cec:	02 c0       	rjmp	.+4      	; 0x4cf2 <onepos_configure_interface+0x106>
    4cee:	8f ef       	ldi	r24, 0xFF	; 255
    4cf0:	93 e2       	ldi	r25, 0x23	; 35
    4cf2:	9f 93       	push	r25
    4cf4:	8f 93       	push	r24
    4cf6:	86 e1       	ldi	r24, 0x16	; 22
    4cf8:	97 e2       	ldi	r25, 0x27	; 39
    4cfa:	9f 93       	push	r25
    4cfc:	8f 93       	push	r24
    4cfe:	f1 d6       	rcall	.+3554   	; 0x5ae2 <printf>
    4d00:	df 92       	push	r13
    4d02:	cf 92       	push	r12
    4d04:	81 e3       	ldi	r24, 0x31	; 49
    4d06:	97 e2       	ldi	r25, 0x27	; 39
    4d08:	9f 93       	push	r25
    4d0a:	8f 93       	push	r24
    4d0c:	ea d6       	rcall	.+3540   	; 0x5ae2 <printf>
    4d0e:	ff 92       	push	r15
    4d10:	ef 92       	push	r14
    4d12:	8c e4       	ldi	r24, 0x4C	; 76
    4d14:	97 e2       	ldi	r25, 0x27	; 39
    4d16:	9f 93       	push	r25
    4d18:	8f 93       	push	r24
    4d1a:	e3 d6       	rcall	.+3526   	; 0x5ae2 <printf>
    4d1c:	1f 93       	push	r17
    4d1e:	0f 93       	push	r16
    4d20:	87 e6       	ldi	r24, 0x67	; 103
    4d22:	97 e2       	ldi	r25, 0x27	; 39
    4d24:	9f 93       	push	r25
    4d26:	8f 93       	push	r24
    4d28:	dc d6       	rcall	.+3512   	; 0x5ae2 <printf>
    4d2a:	80 91 0b 2f 	lds	r24, 0x2F0B
    4d2e:	90 91 0c 2f 	lds	r25, 0x2F0C
    4d32:	9f 93       	push	r25
    4d34:	8f 93       	push	r24
    4d36:	82 e8       	ldi	r24, 0x82	; 130
    4d38:	97 e2       	ldi	r25, 0x27	; 39
    4d3a:	9f 93       	push	r25
    4d3c:	8f 93       	push	r24
    4d3e:	d1 d6       	rcall	.+3490   	; 0x5ae2 <printf>
    4d40:	80 91 0d 2f 	lds	r24, 0x2F0D
    4d44:	90 91 0e 2f 	lds	r25, 0x2F0E
    4d48:	9f 93       	push	r25
    4d4a:	8f 93       	push	r24
    4d4c:	8d e9       	ldi	r24, 0x9D	; 157
    4d4e:	97 e2       	ldi	r25, 0x27	; 39
    4d50:	9f 93       	push	r25
    4d52:	8f 93       	push	r24
    4d54:	c6 d6       	rcall	.+3468   	; 0x5ae2 <printf>
    4d56:	88 eb       	ldi	r24, 0xB8	; 184
    4d58:	97 e2       	ldi	r25, 0x27	; 39
    4d5a:	d4 d6       	rcall	.+3496   	; 0x5b04 <puts>
    4d5c:	89 ec       	ldi	r24, 0xC9	; 201
    4d5e:	97 e2       	ldi	r25, 0x27	; 39
    4d60:	9f 93       	push	r25
    4d62:	8f 93       	push	r24
    4d64:	be d6       	rcall	.+3452   	; 0x5ae2 <printf>
    4d66:	bf 92       	push	r11
    4d68:	af 92       	push	r10
    4d6a:	8d e4       	ldi	r24, 0x4D	; 77
    4d6c:	9a e2       	ldi	r25, 0x2A	; 42
    4d6e:	9f 93       	push	r25
    4d70:	8f 93       	push	r24
    4d72:	f5 d6       	rcall	.+3562   	; 0x5b5e <scanf>
    4d74:	cd bf       	out	0x3d, r28	; 61
    4d76:	de bf       	out	0x3e, r29	; 62
    4d78:	89 a1       	ldd	r24, Y+33	; 0x21
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	88 30       	cpi	r24, 0x08	; 8
    4d7e:	91 05       	cpc	r25, r1
    4d80:	08 f0       	brcs	.+2      	; 0x4d84 <onepos_configure_interface+0x198>
    4d82:	c8 c0       	rjmp	.+400    	; 0x4f14 <onepos_configure_interface+0x328>
    4d84:	fc 01       	movw	r30, r24
    4d86:	ec 5e       	subi	r30, 0xEC	; 236
    4d88:	fe 4f       	sbci	r31, 0xFE	; 254
    4d8a:	ef c5       	rjmp	.+3038   	; 0x596a <__tablejump2__>
    4d8c:	8f ef       	ldi	r24, 0xFF	; 255
    4d8e:	97 e2       	ldi	r25, 0x27	; 39
    4d90:	b9 d6       	rcall	.+3442   	; 0x5b04 <puts>
    4d92:	80 e0       	ldi	r24, 0x00	; 0
    4d94:	94 e2       	ldi	r25, 0x24	; 36
    4d96:	a4 ef       	ldi	r26, 0xF4	; 244
    4d98:	b4 2d       	mov	r27, r4
    4d9a:	01 97       	sbiw	r24, 0x01	; 1
    4d9c:	a1 09       	sbc	r26, r1
    4d9e:	b1 09       	sbc	r27, r1
    4da0:	00 97       	sbiw	r24, 0x00	; 0
    4da2:	a1 05       	cpc	r26, r1
    4da4:	b1 05       	cpc	r27, r1
    4da6:	c9 f7       	brne	.-14     	; 0x4d9a <onepos_configure_interface+0x1ae>
    4da8:	b1 c0       	rjmp	.+354    	; 0x4f0c <onepos_configure_interface+0x320>
    4daa:	84 e4       	ldi	r24, 0x44	; 68
    4dac:	98 e2       	ldi	r25, 0x28	; 40
    4dae:	9f 93       	push	r25
    4db0:	8f 93       	push	r24
    4db2:	97 d6       	rcall	.+3374   	; 0x5ae2 <printf>
    4db4:	2f 96       	adiw	r28, 0x0f	; 15
    4db6:	9f ad       	ldd	r25, Y+63	; 0x3f
    4db8:	2f 97       	sbiw	r28, 0x0f	; 15
    4dba:	9f 93       	push	r25
    4dbc:	2e 96       	adiw	r28, 0x0e	; 14
    4dbe:	ef ad       	ldd	r30, Y+63	; 0x3f
    4dc0:	2e 97       	sbiw	r28, 0x0e	; 14
    4dc2:	ef 93       	push	r30
    4dc4:	8d e4       	ldi	r24, 0x4D	; 77
    4dc6:	9a e2       	ldi	r25, 0x2A	; 42
    4dc8:	9f 93       	push	r25
    4dca:	8f 93       	push	r24
    4dcc:	c8 d6       	rcall	.+3472   	; 0x5b5e <scanf>
    4dce:	0f 90       	pop	r0
    4dd0:	0f 90       	pop	r0
    4dd2:	0f 90       	pop	r0
    4dd4:	0f 90       	pop	r0
    4dd6:	0f 90       	pop	r0
    4dd8:	0f 90       	pop	r0
    4dda:	88 a1       	ldd	r24, Y+32	; 0x20
    4ddc:	88 23       	and	r24, r24
    4dde:	11 f0       	breq	.+4      	; 0x4de4 <onepos_configure_interface+0x1f8>
    4de0:	81 e0       	ldi	r24, 0x01	; 1
    4de2:	88 a3       	std	Y+32, r24	; 0x20
    4de4:	88 a1       	ldd	r24, Y+32	; 0x20
    4de6:	80 93 eb 2e 	sts	0x2EEB, r24
    4dea:	90 c0       	rjmp	.+288    	; 0x4f0c <onepos_configure_interface+0x320>
    4dec:	8b e7       	ldi	r24, 0x7B	; 123
    4dee:	98 e2       	ldi	r25, 0x28	; 40
    4df0:	9f 93       	push	r25
    4df2:	8f 93       	push	r24
    4df4:	76 d6       	rcall	.+3308   	; 0x5ae2 <printf>
    4df6:	2d 96       	adiw	r28, 0x0d	; 13
    4df8:	ff ad       	ldd	r31, Y+63	; 0x3f
    4dfa:	2d 97       	sbiw	r28, 0x0d	; 13
    4dfc:	ff 93       	push	r31
    4dfe:	2c 96       	adiw	r28, 0x0c	; 12
    4e00:	2f ad       	ldd	r18, Y+63	; 0x3f
    4e02:	2c 97       	sbiw	r28, 0x0c	; 12
    4e04:	2f 93       	push	r18
    4e06:	89 e9       	ldi	r24, 0x99	; 153
    4e08:	98 e2       	ldi	r25, 0x28	; 40
    4e0a:	9f 93       	push	r25
    4e0c:	8f 93       	push	r24
    4e0e:	a7 d6       	rcall	.+3406   	; 0x5b5e <scanf>
    4e10:	ce 01       	movw	r24, r28
    4e12:	01 96       	adiw	r24, 0x01	; 1
    4e14:	dc de       	rcall	.-584    	; 0x4bce <onepos_set_namespaceID>
    4e16:	0f 90       	pop	r0
    4e18:	0f 90       	pop	r0
    4e1a:	0f 90       	pop	r0
    4e1c:	0f 90       	pop	r0
    4e1e:	0f 90       	pop	r0
    4e20:	0f 90       	pop	r0
    4e22:	74 c0       	rjmp	.+232    	; 0x4f0c <onepos_configure_interface+0x320>
    4e24:	8e e9       	ldi	r24, 0x9E	; 158
    4e26:	98 e2       	ldi	r25, 0x28	; 40
    4e28:	9f 93       	push	r25
    4e2a:	8f 93       	push	r24
    4e2c:	5a d6       	rcall	.+3252   	; 0x5ae2 <printf>
    4e2e:	3f 92       	push	r3
    4e30:	2f 92       	push	r2
    4e32:	89 ec       	ldi	r24, 0xC9	; 201
    4e34:	98 e2       	ldi	r25, 0x28	; 40
    4e36:	9f 93       	push	r25
    4e38:	8f 93       	push	r24
    4e3a:	91 d6       	rcall	.+3362   	; 0x5b5e <scanf>
    4e3c:	c1 01       	movw	r24, r2
    4e3e:	cc de       	rcall	.-616    	; 0x4bd8 <onepos_set_ble_scan_interval>
    4e40:	0f 90       	pop	r0
    4e42:	0f 90       	pop	r0
    4e44:	0f 90       	pop	r0
    4e46:	0f 90       	pop	r0
    4e48:	0f 90       	pop	r0
    4e4a:	0f 90       	pop	r0
    4e4c:	5f c0       	rjmp	.+190    	; 0x4f0c <onepos_configure_interface+0x320>
    4e4e:	8d ec       	ldi	r24, 0xCD	; 205
    4e50:	98 e2       	ldi	r25, 0x28	; 40
    4e52:	9f 93       	push	r25
    4e54:	8f 93       	push	r24
    4e56:	45 d6       	rcall	.+3210   	; 0x5ae2 <printf>
    4e58:	2b 96       	adiw	r28, 0x0b	; 11
    4e5a:	3f ad       	ldd	r19, Y+63	; 0x3f
    4e5c:	2b 97       	sbiw	r28, 0x0b	; 11
    4e5e:	3f 93       	push	r19
    4e60:	2a 96       	adiw	r28, 0x0a	; 10
    4e62:	8f ad       	ldd	r24, Y+63	; 0x3f
    4e64:	2a 97       	sbiw	r28, 0x0a	; 10
    4e66:	8f 93       	push	r24
    4e68:	89 ec       	ldi	r24, 0xC9	; 201
    4e6a:	98 e2       	ldi	r25, 0x28	; 40
    4e6c:	9f 93       	push	r25
    4e6e:	8f 93       	push	r24
    4e70:	76 d6       	rcall	.+3308   	; 0x5b5e <scanf>
    4e72:	ce 01       	movw	r24, r28
    4e74:	4b 96       	adiw	r24, 0x1b	; 27
    4e76:	b5 de       	rcall	.-662    	; 0x4be2 <onepos_set_ble_scan_window>
    4e78:	0f 90       	pop	r0
    4e7a:	0f 90       	pop	r0
    4e7c:	0f 90       	pop	r0
    4e7e:	0f 90       	pop	r0
    4e80:	0f 90       	pop	r0
    4e82:	0f 90       	pop	r0
    4e84:	43 c0       	rjmp	.+134    	; 0x4f0c <onepos_configure_interface+0x320>
    4e86:	87 ef       	ldi	r24, 0xF7	; 247
    4e88:	98 e2       	ldi	r25, 0x28	; 40
    4e8a:	9f 93       	push	r25
    4e8c:	8f 93       	push	r24
    4e8e:	29 d6       	rcall	.+3154   	; 0x5ae2 <printf>
    4e90:	29 96       	adiw	r28, 0x09	; 9
    4e92:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e94:	29 97       	sbiw	r28, 0x09	; 9
    4e96:	9f 93       	push	r25
    4e98:	28 96       	adiw	r28, 0x08	; 8
    4e9a:	ef ad       	ldd	r30, Y+63	; 0x3f
    4e9c:	28 97       	sbiw	r28, 0x08	; 8
    4e9e:	ef 93       	push	r30
    4ea0:	8d e1       	ldi	r24, 0x1D	; 29
    4ea2:	99 e2       	ldi	r25, 0x29	; 41
    4ea4:	9f 93       	push	r25
    4ea6:	8f 93       	push	r24
    4ea8:	5a d6       	rcall	.+3252   	; 0x5b5e <scanf>
    4eaa:	8a a1       	ldd	r24, Y+34	; 0x22
    4eac:	9b a1       	ldd	r25, Y+35	; 0x23
    4eae:	80 93 0b 2f 	sts	0x2F0B, r24
    4eb2:	90 93 0c 2f 	sts	0x2F0C, r25
    4eb6:	0f 90       	pop	r0
    4eb8:	0f 90       	pop	r0
    4eba:	0f 90       	pop	r0
    4ebc:	0f 90       	pop	r0
    4ebe:	0f 90       	pop	r0
    4ec0:	0f 90       	pop	r0
    4ec2:	24 c0       	rjmp	.+72     	; 0x4f0c <onepos_configure_interface+0x320>
    4ec4:	81 e2       	ldi	r24, 0x21	; 33
    4ec6:	99 e2       	ldi	r25, 0x29	; 41
    4ec8:	9f 93       	push	r25
    4eca:	8f 93       	push	r24
    4ecc:	0a d6       	rcall	.+3092   	; 0x5ae2 <printf>
    4ece:	27 96       	adiw	r28, 0x07	; 7
    4ed0:	ff ad       	ldd	r31, Y+63	; 0x3f
    4ed2:	27 97       	sbiw	r28, 0x07	; 7
    4ed4:	ff 93       	push	r31
    4ed6:	26 96       	adiw	r28, 0x06	; 6
    4ed8:	2f ad       	ldd	r18, Y+63	; 0x3f
    4eda:	26 97       	sbiw	r28, 0x06	; 6
    4edc:	2f 93       	push	r18
    4ede:	8d e1       	ldi	r24, 0x1D	; 29
    4ee0:	99 e2       	ldi	r25, 0x29	; 41
    4ee2:	9f 93       	push	r25
    4ee4:	8f 93       	push	r24
    4ee6:	3b d6       	rcall	.+3190   	; 0x5b5e <scanf>
    4ee8:	8c a1       	ldd	r24, Y+36	; 0x24
    4eea:	9d a1       	ldd	r25, Y+37	; 0x25
    4eec:	80 93 0d 2f 	sts	0x2F0D, r24
    4ef0:	90 93 0e 2f 	sts	0x2F0E, r25
    4ef4:	0f 90       	pop	r0
    4ef6:	0f 90       	pop	r0
    4ef8:	0f 90       	pop	r0
    4efa:	0f 90       	pop	r0
    4efc:	0f 90       	pop	r0
    4efe:	0f 90       	pop	r0
    4f00:	05 c0       	rjmp	.+10     	; 0x4f0c <onepos_configure_interface+0x320>
    4f02:	09 dd       	rcall	.-1518   	; 0x4916 <onepos_save_cfg>
    4f04:	87 e4       	ldi	r24, 0x47	; 71
    4f06:	99 e2       	ldi	r25, 0x29	; 41
    4f08:	fd d5       	rcall	.+3066   	; 0x5b04 <puts>
    4f0a:	07 c0       	rjmp	.+14     	; 0x4f1a <onepos_configure_interface+0x32e>
    4f0c:	55 20       	and	r5, r5
    4f0e:	09 f4       	brne	.+2      	; 0x4f12 <onepos_configure_interface+0x326>
    4f10:	c9 ce       	rjmp	.-622    	; 0x4ca4 <onepos_configure_interface+0xb8>
    4f12:	03 c0       	rjmp	.+6      	; 0x4f1a <onepos_configure_interface+0x32e>
    4f14:	55 20       	and	r5, r5
    4f16:	09 f4       	brne	.+2      	; 0x4f1a <onepos_configure_interface+0x32e>
    4f18:	c5 ce       	rjmp	.-630    	; 0x4ca4 <onepos_configure_interface+0xb8>
    4f1a:	c2 5b       	subi	r28, 0xB2	; 178
    4f1c:	df 4f       	sbci	r29, 0xFF	; 255
    4f1e:	cd bf       	out	0x3d, r28	; 61
    4f20:	de bf       	out	0x3e, r29	; 62
    4f22:	df 91       	pop	r29
    4f24:	cf 91       	pop	r28
    4f26:	1f 91       	pop	r17
    4f28:	0f 91       	pop	r16
    4f2a:	ff 90       	pop	r15
    4f2c:	ef 90       	pop	r14
    4f2e:	df 90       	pop	r13
    4f30:	cf 90       	pop	r12
    4f32:	bf 90       	pop	r11
    4f34:	af 90       	pop	r10
    4f36:	9f 90       	pop	r9
    4f38:	8f 90       	pop	r8
    4f3a:	7f 90       	pop	r7
    4f3c:	6f 90       	pop	r6
    4f3e:	5f 90       	pop	r5
    4f40:	4f 90       	pop	r4
    4f42:	3f 90       	pop	r3
    4f44:	2f 90       	pop	r2
    4f46:	08 95       	ret

00004f48 <onepos_get_uwb_rx_antenna_delay>:
    4f48:	80 91 0b 2f 	lds	r24, 0x2F0B
    4f4c:	90 91 0c 2f 	lds	r25, 0x2F0C
    4f50:	08 95       	ret

00004f52 <onepos_get_uwb_tx_antenna_delay>:
}

uint16_t onepos_get_uwb_tx_antenna_delay(void)
{
	return onepos_config.uwb_tx_antenna_delay;
    4f52:	80 91 0d 2f 	lds	r24, 0x2F0D
    4f56:	90 91 0e 2f 	lds	r25, 0x2F0E
}
    4f5a:	08 95       	ret

00004f5c <usb_putchar_printf>:
	usb_putchar(*string++);
}


#ifdef PRINTF_USB
int usb_putchar_printf(char var, FILE *stream) {
    4f5c:	cf 93       	push	r28
    4f5e:	c8 2f       	mov	r28, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
    4f60:	8a 30       	cpi	r24, 0x0A	; 10
    4f62:	21 f4       	brne	.+8      	; 0x4f6c <usb_putchar_printf+0x10>
	
}

void usb_putchar(char a)
{
	udi_cdc_putc(a);
    4f64:	8d e0       	ldi	r24, 0x0D	; 13
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	0e 94 ae 04 	call	0x95c	; 0x95c <udi_cdc_putc>
    4f6c:	8c 2f       	mov	r24, r28
    4f6e:	99 27       	eor	r25, r25
    4f70:	87 fd       	sbrc	r24, 7
    4f72:	90 95       	com	r25
    4f74:	0e 94 ae 04 	call	0x95c	; 0x95c <udi_cdc_putc>
int usb_putchar_printf(char var, FILE *stream) {
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
	usb_putchar(var);
	return 0;
}
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	cf 91       	pop	r28
    4f7e:	08 95       	ret

00004f80 <usb_getchar_scanf>:

int usb_getchar_scanf(FILE *stream)
{
    4f80:	0f 93       	push	r16
    4f82:	1f 93       	push	r17
    4f84:	cf 93       	push	r28
    4f86:	df 93       	push	r29
    4f88:	8c 01       	movw	r16, r24
	return udi_cdc_getc();
}

int usb_is_rx_ready(void)
{
	return udi_cdc_is_rx_ready();
    4f8a:	0e 94 ed 03 	call	0x7da	; 0x7da <udi_cdc_is_rx_ready>

int usb_getchar_scanf(FILE *stream)
{
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
    4f8e:	88 23       	and	r24, r24
    4f90:	e1 f3       	breq	.-8      	; 0x4f8a <usb_getchar_scanf+0xa>
	udi_cdc_putc(a);
}

char usb_getchar(void)
{
	return udi_cdc_getc();
    4f92:	0e 94 39 04 	call	0x872	; 0x872 <udi_cdc_getc>
    4f96:	ec 01       	movw	r28, r24
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
	u8Data=usb_getchar();
	//echo input data
	usb_putchar_printf(u8Data,stream);
    4f98:	b8 01       	movw	r22, r16
    4f9a:	e0 df       	rcall	.-64     	; 0x4f5c <usb_putchar_printf>
	// Return received data
	return u8Data;
}
    4f9c:	ce 01       	movw	r24, r28
    4f9e:	99 27       	eor	r25, r25
    4fa0:	df 91       	pop	r29
    4fa2:	cf 91       	pop	r28
    4fa4:	1f 91       	pop	r17
    4fa6:	0f 91       	pop	r16
    4fa8:	08 95       	ret

00004faa <usb_init>:

#include "./../include/usb_serial.h"

void usb_init(void)
{
	irq_initialize_vectors();
    4faa:	87 e0       	ldi	r24, 0x07	; 7
    4fac:	e0 ea       	ldi	r30, 0xA0	; 160
    4fae:	f0 e0       	ldi	r31, 0x00	; 0
    4fb0:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    4fb2:	78 94       	sei
	udc_start();
    4fb4:	0e 94 9c 05 	call	0xb38	; 0xb38 <udc_start>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    4fb8:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <udd_attach>
	udc_attach();
	
	#ifdef PRINTF_USB
	// setup our stdio stream
	stdout = &mystdout;
    4fbc:	87 ee       	ldi	r24, 0xE7	; 231
    4fbe:	90 e2       	ldi	r25, 0x20	; 32
    4fc0:	80 93 a1 2f 	sts	0x2FA1, r24
    4fc4:	90 93 a2 2f 	sts	0x2FA2, r25
	stdin = &mystdout;
    4fc8:	80 93 9f 2f 	sts	0x2F9F, r24
    4fcc:	90 93 a0 2f 	sts	0x2FA0, r25
    4fd0:	08 95       	ret

00004fd2 <rs485_init>:
			{
				led2_toogle();
				cli();
				sprintf(msg,"%d,%d",dist,ble_beacon.rssi);
				sei();
				dwt_send_msg_w_ack(msg,1);
    4fd2:	cf 93       	push	r28
    4fd4:	df 93       	push	r29
    4fd6:	cd b7       	in	r28, 0x3d	; 61
    4fd8:	de b7       	in	r29, 0x3e	; 62
    4fda:	27 97       	sbiw	r28, 0x07	; 7
    4fdc:	cd bf       	out	0x3d, r28	; 61
    4fde:	de bf       	out	0x3e, r29	; 62
    4fe0:	80 91 f9 20 	lds	r24, 0x20F9
    4fe4:	8d 83       	std	Y+5, r24	; 0x05
    4fe6:	80 91 fa 20 	lds	r24, 0x20FA
    4fea:	8e 83       	std	Y+6, r24	; 0x06
    4fec:	80 91 fb 20 	lds	r24, 0x20FB
    4ff0:	8f 83       	std	Y+7, r24	; 0x07
    4ff2:	80 91 f5 20 	lds	r24, 0x20F5
    4ff6:	90 91 f6 20 	lds	r25, 0x20F6
    4ffa:	a0 91 f7 20 	lds	r26, 0x20F7
    4ffe:	b0 91 f8 20 	lds	r27, 0x20F8
    5002:	89 83       	std	Y+1, r24	; 0x01
    5004:	9a 83       	std	Y+2, r25	; 0x02
    5006:	ab 83       	std	Y+3, r26	; 0x03
    5008:	bc 83       	std	Y+4, r27	; 0x04
    500a:	60 e1       	ldi	r22, 0x10	; 16
    500c:	85 e0       	ldi	r24, 0x05	; 5
    500e:	0e 94 bd 12 	call	0x257a	; 0x257a <sysclk_enable_module>
    5012:	be 01       	movw	r22, r28
    5014:	6f 5f       	subi	r22, 0xFF	; 255
    5016:	7f 4f       	sbci	r23, 0xFF	; 255
    5018:	80 ea       	ldi	r24, 0xA0	; 160
    501a:	9a e0       	ldi	r25, 0x0A	; 10
    501c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <usart_init_rs232>
    5020:	82 e0       	ldi	r24, 0x02	; 2
    5022:	e0 e8       	ldi	r30, 0x80	; 128
    5024:	f6 e0       	ldi	r31, 0x06	; 6
    5026:	86 83       	std	Z+6, r24	; 0x06
    5028:	27 96       	adiw	r28, 0x07	; 7
    502a:	cd bf       	out	0x3d, r28	; 61
    502c:	de bf       	out	0x3e, r29	; 62
    502e:	df 91       	pop	r29
    5030:	cf 91       	pop	r28
    5032:	08 95       	ret

00005034 <rs485_write_string>:
    5034:	cf 93       	push	r28
    5036:	df 93       	push	r29
    5038:	22 e0       	ldi	r18, 0x02	; 2
    503a:	e0 e8       	ldi	r30, 0x80	; 128
    503c:	f6 e0       	ldi	r31, 0x06	; 6
    503e:	25 83       	std	Z+5, r18	; 0x05
    5040:	20 e0       	ldi	r18, 0x00	; 0
    5042:	30 e0       	ldi	r19, 0x00	; 0
    5044:	2f 5f       	subi	r18, 0xFF	; 255
    5046:	3f 4f       	sbci	r19, 0xFF	; 255
    5048:	20 34       	cpi	r18, 0x40	; 64
    504a:	4f e1       	ldi	r20, 0x1F	; 31
    504c:	34 07       	cpc	r19, r20
    504e:	d1 f7       	brne	.-12     	; 0x5044 <rs485_write_string+0x10>
    5050:	fc 01       	movw	r30, r24
    5052:	60 81       	ld	r22, Z
    5054:	66 23       	and	r22, r22
    5056:	49 f0       	breq	.+18     	; 0x506a <rs485_write_string+0x36>
    5058:	ec 01       	movw	r28, r24
    505a:	21 96       	adiw	r28, 0x01	; 1
    505c:	80 ea       	ldi	r24, 0xA0	; 160
    505e:	9a e0       	ldi	r25, 0x0A	; 10
    5060:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <usart_putchar>
    5064:	69 91       	ld	r22, Y+
    5066:	61 11       	cpse	r22, r1
    5068:	f9 cf       	rjmp	.-14     	; 0x505c <rs485_write_string+0x28>
    506a:	80 e0       	ldi	r24, 0x00	; 0
    506c:	90 e0       	ldi	r25, 0x00	; 0
    506e:	01 96       	adiw	r24, 0x01	; 1
    5070:	80 34       	cpi	r24, 0x40	; 64
    5072:	fc e9       	ldi	r31, 0x9C	; 156
    5074:	9f 07       	cpc	r25, r31
    5076:	d9 f7       	brne	.-10     	; 0x506e <rs485_write_string+0x3a>
    5078:	82 e0       	ldi	r24, 0x02	; 2
    507a:	e0 e8       	ldi	r30, 0x80	; 128
    507c:	f6 e0       	ldi	r31, 0x06	; 6
    507e:	86 83       	std	Z+6, r24	; 0x06
    5080:	df 91       	pop	r29
    5082:	cf 91       	pop	r28
    5084:	08 95       	ret

00005086 <send_pos_info>:
    5086:	af 92       	push	r10
    5088:	bf 92       	push	r11
    508a:	cf 92       	push	r12
    508c:	df 92       	push	r13
    508e:	ef 92       	push	r14
    5090:	ff 92       	push	r15
    5092:	0f 93       	push	r16
    5094:	1f 93       	push	r17
    5096:	cf 93       	push	r28
    5098:	df 93       	push	r29
    509a:	cd b7       	in	r28, 0x3d	; 61
    509c:	de b7       	in	r29, 0x3e	; 62
    509e:	c8 57       	subi	r28, 0x78	; 120
    50a0:	d1 09       	sbc	r29, r1
    50a2:	cd bf       	out	0x3d, r28	; 61
    50a4:	de bf       	out	0x3e, r29	; 62
    50a6:	bf 92       	push	r11
    50a8:	af 92       	push	r10
    50aa:	df 92       	push	r13
    50ac:	cf 92       	push	r12
    50ae:	ff 92       	push	r15
    50b0:	ef 92       	push	r14
    50b2:	1f 93       	push	r17
    50b4:	0f 93       	push	r16
    50b6:	3f 93       	push	r19
    50b8:	2f 93       	push	r18
    50ba:	5f 93       	push	r21
    50bc:	4f 93       	push	r20
    50be:	7f 93       	push	r23
    50c0:	6f 93       	push	r22
    50c2:	9f 93       	push	r25
    50c4:	8f 93       	push	r24
    50c6:	87 e7       	ldi	r24, 0x77	; 119
    50c8:	99 e2       	ldi	r25, 0x29	; 41
    50ca:	9f 93       	push	r25
    50cc:	8f 93       	push	r24
    50ce:	8e 01       	movw	r16, r28
    50d0:	0f 5f       	subi	r16, 0xFF	; 255
    50d2:	1f 4f       	sbci	r17, 0xFF	; 255
    50d4:	1f 93       	push	r17
    50d6:	0f 93       	push	r16
    50d8:	53 d5       	rcall	.+2726   	; 0x5b80 <sprintf>
    50da:	c8 01       	movw	r24, r16
    50dc:	ab df       	rcall	.-170    	; 0x5034 <rs485_write_string>
    50de:	cd bf       	out	0x3d, r28	; 61
    50e0:	de bf       	out	0x3e, r29	; 62
    50e2:	c8 58       	subi	r28, 0x88	; 136
    50e4:	df 4f       	sbci	r29, 0xFF	; 255
    50e6:	cd bf       	out	0x3d, r28	; 61
    50e8:	de bf       	out	0x3e, r29	; 62
    50ea:	df 91       	pop	r29
    50ec:	cf 91       	pop	r28
    50ee:	1f 91       	pop	r17
    50f0:	0f 91       	pop	r16
    50f2:	ff 90       	pop	r15
    50f4:	ef 90       	pop	r14
    50f6:	df 90       	pop	r13
    50f8:	cf 90       	pop	r12
    50fa:	bf 90       	pop	r11
    50fc:	af 90       	pop	r10
    50fe:	08 95       	ret

00005100 <__vector_88>:
    5100:	1f 92       	push	r1
    5102:	0f 92       	push	r0
    5104:	0f b6       	in	r0, 0x3f	; 63
    5106:	0f 92       	push	r0
    5108:	11 24       	eor	r1, r1
    510a:	2f 93       	push	r18
    510c:	3f 93       	push	r19
    510e:	4f 93       	push	r20
    5110:	5f 93       	push	r21
    5112:	6f 93       	push	r22
    5114:	7f 93       	push	r23
    5116:	8f 93       	push	r24
    5118:	9f 93       	push	r25
    511a:	af 93       	push	r26
    511c:	bf 93       	push	r27
    511e:	ef 93       	push	r30
    5120:	ff 93       	push	r31
    5122:	82 e0       	ldi	r24, 0x02	; 2
    5124:	e0 e2       	ldi	r30, 0x20	; 32
    5126:	f6 e0       	ldi	r31, 0x06	; 6
    5128:	87 83       	std	Z+7, r24	; 0x07
    512a:	80 91 a0 09 	lds	r24, 0x09A0
    512e:	80 93 6b 2f 	sts	0x2F6B, r24
    5132:	90 91 49 2e 	lds	r25, 0x2E49
    5136:	e9 2f       	mov	r30, r25
    5138:	f0 e0       	ldi	r31, 0x00	; 0
    513a:	ef 5e       	subi	r30, 0xEF	; 239
    513c:	f0 4d       	sbci	r31, 0xD0	; 208
    513e:	80 83       	st	Z, r24
    5140:	9f 5f       	subi	r25, 0xFF	; 255
    5142:	90 93 49 2e 	sts	0x2E49, r25
    5146:	8a 30       	cpi	r24, 0x0A	; 10
    5148:	21 f5       	brne	.+72     	; 0x5192 <__vector_88+0x92>
    514a:	81 e0       	ldi	r24, 0x01	; 1
    514c:	a0 e2       	ldi	r26, 0x20	; 32
    514e:	b6 e0       	ldi	r27, 0x06	; 6
    5150:	17 96       	adiw	r26, 0x07	; 7
    5152:	8c 93       	st	X, r24
    5154:	e9 2f       	mov	r30, r25
    5156:	f0 e0       	ldi	r31, 0x00	; 0
    5158:	ef 5e       	subi	r30, 0xEF	; 239
    515a:	f0 4d       	sbci	r31, 0xD0	; 208
    515c:	10 82       	st	Z, r1
    515e:	6c e6       	ldi	r22, 0x6C	; 108
    5160:	7f e2       	ldi	r23, 0x2F	; 47
    5162:	81 e1       	ldi	r24, 0x11	; 17
    5164:	9f e2       	ldi	r25, 0x2F	; 47
    5166:	0e 94 14 14 	call	0x2828	; 0x2828 <ble_information>
    516a:	88 23       	and	r24, r24
    516c:	79 f0       	breq	.+30     	; 0x518c <__vector_88+0x8c>
    516e:	eb e9       	ldi	r30, 0x9B	; 155
    5170:	ff e2       	ldi	r31, 0x2F	; 47
    5172:	81 81       	ldd	r24, Z+1	; 0x01
    5174:	8f 93       	push	r24
    5176:	80 81       	ld	r24, Z
    5178:	8f 93       	push	r24
    517a:	82 e1       	ldi	r24, 0x12	; 18
    517c:	97 e2       	ldi	r25, 0x27	; 39
    517e:	9f 93       	push	r25
    5180:	8f 93       	push	r24
    5182:	af d4       	rcall	.+2398   	; 0x5ae2 <printf>
    5184:	0f 90       	pop	r0
    5186:	0f 90       	pop	r0
    5188:	0f 90       	pop	r0
    518a:	0f 90       	pop	r0
    518c:	10 92 49 2e 	sts	0x2E49, r1
    5190:	08 c0       	rjmp	.+16     	; 0x51a2 <__vector_88+0xa2>
    5192:	99 35       	cpi	r25, 0x59	; 89
    5194:	31 f4       	brne	.+12     	; 0x51a2 <__vector_88+0xa2>
    5196:	10 92 49 2e 	sts	0x2E49, r1
    519a:	80 e8       	ldi	r24, 0x80	; 128
    519c:	e0 e0       	ldi	r30, 0x00	; 0
    519e:	f6 e0       	ldi	r31, 0x06	; 6
    51a0:	87 83       	std	Z+7, r24	; 0x07
    51a2:	ff 91       	pop	r31
    51a4:	ef 91       	pop	r30
    51a6:	bf 91       	pop	r27
    51a8:	af 91       	pop	r26
    51aa:	9f 91       	pop	r25
    51ac:	8f 91       	pop	r24
    51ae:	7f 91       	pop	r23
    51b0:	6f 91       	pop	r22
    51b2:	5f 91       	pop	r21
    51b4:	4f 91       	pop	r20
    51b6:	3f 91       	pop	r19
    51b8:	2f 91       	pop	r18
    51ba:	0f 90       	pop	r0
    51bc:	0f be       	out	0x3f, r0	; 63
    51be:	0f 90       	pop	r0
    51c0:	1f 90       	pop	r1
    51c2:	18 95       	reti

000051c4 <base_node>:
    51c4:	cf 93       	push	r28
    51c6:	df 93       	push	r29
    51c8:	cd b7       	in	r28, 0x3d	; 61
    51ca:	de b7       	in	r29, 0x3e	; 62
    51cc:	ae 97       	sbiw	r28, 0x2e	; 46
    51ce:	cd bf       	out	0x3d, r28	; 61
    51d0:	de bf       	out	0x3e, r29	; 62
    51d2:	88 e0       	ldi	r24, 0x08	; 8
    51d4:	fe 01       	movw	r30, r28
    51d6:	31 96       	adiw	r30, 0x01	; 1
    51d8:	df 01       	movw	r26, r30
    51da:	98 2f       	mov	r25, r24
    51dc:	1d 92       	st	X+, r1
    51de:	9a 95       	dec	r25
    51e0:	e9 f7       	brne	.-6      	; 0x51dc <base_node+0x18>
    51e2:	38 96       	adiw	r30, 0x08	; 8
    51e4:	df 01       	movw	r26, r30
    51e6:	1d 92       	st	X+, r1
    51e8:	8a 95       	dec	r24
    51ea:	e9 f7       	brne	.-6      	; 0x51e6 <base_node+0x22>
    51ec:	89 e1       	ldi	r24, 0x19	; 25
    51ee:	9a e2       	ldi	r25, 0x2A	; 42
    51f0:	89 d4       	rcall	.+2322   	; 0x5b04 <puts>
    51f2:	0e 94 b6 14 	call	0x296c	; 0x296c <ble_init_read_beacons_isr>
    51f6:	0f 2e       	mov	r0, r31
    51f8:	fb e9       	ldi	r31, 0x9B	; 155
    51fa:	8f 2e       	mov	r8, r31
    51fc:	ff e2       	ldi	r31, 0x2F	; 47
    51fe:	9f 2e       	mov	r9, r31
    5200:	f0 2d       	mov	r31, r0
    5202:	0f 2e       	mov	r0, r31
    5204:	41 2c       	mov	r4, r1
    5206:	f6 e0       	ldi	r31, 0x06	; 6
    5208:	5f 2e       	mov	r5, r31
    520a:	f0 2d       	mov	r31, r0
    520c:	3e 01       	movw	r6, r28
    520e:	b1 e1       	ldi	r27, 0x11	; 17
    5210:	6b 0e       	add	r6, r27
    5212:	71 1c       	adc	r7, r1
    5214:	fe 01       	movw	r30, r28
    5216:	3f 96       	adiw	r30, 0x0f	; 15
    5218:	ed a3       	std	Y+37, r30	; 0x25
    521a:	fe a3       	std	Y+38, r31	; 0x26
    521c:	ce 01       	movw	r24, r28
    521e:	07 96       	adiw	r24, 0x07	; 7
    5220:	8f a3       	std	Y+39, r24	; 0x27
    5222:	98 a7       	std	Y+40, r25	; 0x28
    5224:	de 01       	movw	r26, r28
    5226:	1d 96       	adiw	r26, 0x0d	; 13
    5228:	a9 a7       	std	Y+41, r26	; 0x29
    522a:	ba a7       	std	Y+42, r27	; 0x2a
    522c:	3a 97       	sbiw	r30, 0x0a	; 10
    522e:	eb a7       	std	Y+43, r30	; 0x2b
    5230:	fc a7       	std	Y+44, r31	; 0x2c
    5232:	04 96       	adiw	r24, 0x04	; 4
    5234:	8d a7       	std	Y+45, r24	; 0x2d
    5236:	9e a7       	std	Y+46, r25	; 0x2e
    5238:	1e 01       	movw	r2, r28
    523a:	93 e0       	ldi	r25, 0x03	; 3
    523c:	29 0e       	add	r2, r25
    523e:	31 1c       	adc	r3, r1
    5240:	ce 01       	movw	r24, r28
    5242:	01 96       	adiw	r24, 0x01	; 1
    5244:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <dwt_resp_twr>
    5248:	d4 01       	movw	r26, r8
    524a:	2d 91       	ld	r18, X+
    524c:	3c 91       	ld	r19, X
    524e:	29 87       	std	Y+9, r18	; 0x09
    5250:	3a 87       	std	Y+10, r19	; 0x0a
    5252:	81 11       	cpse	r24, r1
    5254:	f5 cf       	rjmp	.-22     	; 0x5240 <base_node+0x7c>
    5256:	80 e4       	ldi	r24, 0x40	; 64
    5258:	f2 01       	movw	r30, r4
    525a:	87 83       	std	Z+7, r24	; 0x07
    525c:	64 e0       	ldi	r22, 0x04	; 4
    525e:	70 e0       	ldi	r23, 0x00	; 0
    5260:	87 e3       	ldi	r24, 0x37	; 55
    5262:	9a e2       	ldi	r25, 0x2A	; 42
    5264:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <dwt_send_msg_w_ack>
    5268:	c3 01       	movw	r24, r6
    526a:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <dwt_receive_msg_w_ack>
    526e:	81 11       	cpse	r24, r1
    5270:	17 c0       	rjmp	.+46     	; 0x52a0 <base_node+0xdc>
    5272:	82 e0       	ldi	r24, 0x02	; 2
    5274:	80 93 27 06 	sts	0x0627, r24
    5278:	8b e3       	ldi	r24, 0x3B	; 59
    527a:	9a e2       	ldi	r25, 0x2A	; 42
    527c:	43 d4       	rcall	.+2182   	; 0x5b04 <puts>
    527e:	fe a1       	ldd	r31, Y+38	; 0x26
    5280:	ff 93       	push	r31
    5282:	8d a1       	ldd	r24, Y+37	; 0x25
    5284:	8f 93       	push	r24
    5286:	98 a5       	ldd	r25, Y+40	; 0x28
    5288:	9f 93       	push	r25
    528a:	af a1       	ldd	r26, Y+39	; 0x27
    528c:	af 93       	push	r26
    528e:	8a e4       	ldi	r24, 0x4A	; 74
    5290:	9a e2       	ldi	r25, 0x2A	; 42
    5292:	9f 93       	push	r25
    5294:	8f 93       	push	r24
    5296:	7f 92       	push	r7
    5298:	6f 92       	push	r6
    529a:	91 d4       	rcall	.+2338   	; 0x5bbe <sscanf>
    529c:	cd bf       	out	0x3d, r28	; 61
    529e:	de bf       	out	0x3e, r29	; 62
    52a0:	63 e0       	ldi	r22, 0x03	; 3
    52a2:	70 e0       	ldi	r23, 0x00	; 0
    52a4:	87 e3       	ldi	r24, 0x37	; 55
    52a6:	9a e2       	ldi	r25, 0x2A	; 42
    52a8:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <dwt_send_msg_w_ack>
    52ac:	c3 01       	movw	r24, r6
    52ae:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <dwt_receive_msg_w_ack>
    52b2:	81 11       	cpse	r24, r1
    52b4:	17 c0       	rjmp	.+46     	; 0x52e4 <base_node+0x120>
    52b6:	81 e0       	ldi	r24, 0x01	; 1
    52b8:	80 93 27 06 	sts	0x0627, r24
    52bc:	80 e5       	ldi	r24, 0x50	; 80
    52be:	9a e2       	ldi	r25, 0x2A	; 42
    52c0:	21 d4       	rcall	.+2114   	; 0x5b04 <puts>
    52c2:	fa a5       	ldd	r31, Y+42	; 0x2a
    52c4:	ff 93       	push	r31
    52c6:	89 a5       	ldd	r24, Y+41	; 0x29
    52c8:	8f 93       	push	r24
    52ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    52cc:	9f 93       	push	r25
    52ce:	ab a5       	ldd	r26, Y+43	; 0x2b
    52d0:	af 93       	push	r26
    52d2:	8a e4       	ldi	r24, 0x4A	; 74
    52d4:	9a e2       	ldi	r25, 0x2A	; 42
    52d6:	9f 93       	push	r25
    52d8:	8f 93       	push	r24
    52da:	7f 92       	push	r7
    52dc:	6f 92       	push	r6
    52de:	6f d4       	rcall	.+2270   	; 0x5bbe <sscanf>
    52e0:	cd bf       	out	0x3d, r28	; 61
    52e2:	de bf       	out	0x3e, r29	; 62
    52e4:	62 e0       	ldi	r22, 0x02	; 2
    52e6:	70 e0       	ldi	r23, 0x00	; 0
    52e8:	87 e3       	ldi	r24, 0x37	; 55
    52ea:	9a e2       	ldi	r25, 0x2A	; 42
    52ec:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <dwt_send_msg_w_ack>
    52f0:	c3 01       	movw	r24, r6
    52f2:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <dwt_receive_msg_w_ack>
    52f6:	81 11       	cpse	r24, r1
    52f8:	16 c0       	rjmp	.+44     	; 0x5326 <base_node+0x162>
    52fa:	80 e8       	ldi	r24, 0x80	; 128
    52fc:	d2 01       	movw	r26, r4
    52fe:	17 96       	adiw	r26, 0x07	; 7
    5300:	8c 93       	st	X, r24
    5302:	84 e6       	ldi	r24, 0x64	; 100
    5304:	9a e2       	ldi	r25, 0x2A	; 42
    5306:	fe d3       	rcall	.+2044   	; 0x5b04 <puts>
    5308:	be a5       	ldd	r27, Y+46	; 0x2e
    530a:	bf 93       	push	r27
    530c:	ed a5       	ldd	r30, Y+45	; 0x2d
    530e:	ef 93       	push	r30
    5310:	3f 92       	push	r3
    5312:	2f 92       	push	r2
    5314:	8a e4       	ldi	r24, 0x4A	; 74
    5316:	9a e2       	ldi	r25, 0x2A	; 42
    5318:	9f 93       	push	r25
    531a:	8f 93       	push	r24
    531c:	7f 92       	push	r7
    531e:	6f 92       	push	r6
    5320:	4e d4       	rcall	.+2204   	; 0x5bbe <sscanf>
    5322:	cd bf       	out	0x3d, r28	; 61
    5324:	de bf       	out	0x3e, r29	; 62
    5326:	88 85       	ldd	r24, Y+8	; 0x08
    5328:	8f 93       	push	r24
    532a:	8f 81       	ldd	r24, Y+7	; 0x07
    532c:	8f 93       	push	r24
    532e:	8e 81       	ldd	r24, Y+6	; 0x06
    5330:	8f 93       	push	r24
    5332:	8d 81       	ldd	r24, Y+5	; 0x05
    5334:	8f 93       	push	r24
    5336:	8c 81       	ldd	r24, Y+4	; 0x04
    5338:	8f 93       	push	r24
    533a:	8b 81       	ldd	r24, Y+3	; 0x03
    533c:	8f 93       	push	r24
    533e:	8a 81       	ldd	r24, Y+2	; 0x02
    5340:	8f 93       	push	r24
    5342:	89 81       	ldd	r24, Y+1	; 0x01
    5344:	8f 93       	push	r24
    5346:	86 e7       	ldi	r24, 0x76	; 118
    5348:	9a e2       	ldi	r25, 0x2A	; 42
    534a:	9f 93       	push	r25
    534c:	8f 93       	push	r24
    534e:	c9 d3       	rcall	.+1938   	; 0x5ae2 <printf>
    5350:	88 89       	ldd	r24, Y+16	; 0x10
    5352:	8f 93       	push	r24
    5354:	8f 85       	ldd	r24, Y+15	; 0x0f
    5356:	8f 93       	push	r24
    5358:	8e 85       	ldd	r24, Y+14	; 0x0e
    535a:	8f 93       	push	r24
    535c:	8d 85       	ldd	r24, Y+13	; 0x0d
    535e:	8f 93       	push	r24
    5360:	8c 85       	ldd	r24, Y+12	; 0x0c
    5362:	8f 93       	push	r24
    5364:	8b 85       	ldd	r24, Y+11	; 0x0b
    5366:	8f 93       	push	r24
    5368:	8a 85       	ldd	r24, Y+10	; 0x0a
    536a:	8f 93       	push	r24
    536c:	89 85       	ldd	r24, Y+9	; 0x09
    536e:	8f 93       	push	r24
    5370:	8f e9       	ldi	r24, 0x9F	; 159
    5372:	9a e2       	ldi	r25, 0x2A	; 42
    5374:	9f 93       	push	r25
    5376:	8f 93       	push	r24
    5378:	b4 d3       	rcall	.+1896   	; 0x5ae2 <printf>
    537a:	69 81       	ldd	r22, Y+1	; 0x01
    537c:	7a 81       	ldd	r23, Y+2	; 0x02
    537e:	cf 84       	ldd	r12, Y+15	; 0x0f
    5380:	d8 88       	ldd	r13, Y+16	; 0x10
    5382:	ed 80       	ldd	r14, Y+5	; 0x05
    5384:	fe 80       	ldd	r15, Y+6	; 0x06
    5386:	0d 85       	ldd	r16, Y+13	; 0x0d
    5388:	1e 85       	ldd	r17, Y+14	; 0x0e
    538a:	2b 81       	ldd	r18, Y+3	; 0x03
    538c:	3c 81       	ldd	r19, Y+4	; 0x04
    538e:	4b 85       	ldd	r20, Y+11	; 0x0b
    5390:	5c 85       	ldd	r21, Y+12	; 0x0c
    5392:	5b 01       	movw	r10, r22
    5394:	89 85       	ldd	r24, Y+9	; 0x09
    5396:	9a 85       	ldd	r25, Y+10	; 0x0a
    5398:	76 de       	rcall	.-788    	; 0x5086 <send_pos_info>
    539a:	19 82       	std	Y+1, r1	; 0x01
    539c:	1a 82       	std	Y+2, r1	; 0x02
    539e:	1b 82       	std	Y+3, r1	; 0x03
    53a0:	1c 82       	std	Y+4, r1	; 0x04
    53a2:	1d 82       	std	Y+5, r1	; 0x05
    53a4:	1e 82       	std	Y+6, r1	; 0x06
    53a6:	1f 82       	std	Y+7, r1	; 0x07
    53a8:	18 86       	std	Y+8, r1	; 0x08
    53aa:	19 86       	std	Y+9, r1	; 0x09
    53ac:	1a 86       	std	Y+10, r1	; 0x0a
    53ae:	1b 86       	std	Y+11, r1	; 0x0b
    53b0:	1c 86       	std	Y+12, r1	; 0x0c
    53b2:	1d 86       	std	Y+13, r1	; 0x0d
    53b4:	1e 86       	std	Y+14, r1	; 0x0e
    53b6:	1f 86       	std	Y+15, r1	; 0x0f
    53b8:	18 8a       	std	Y+16, r1	; 0x10
    53ba:	cd bf       	out	0x3d, r28	; 61
    53bc:	de bf       	out	0x3e, r29	; 62
    53be:	40 cf       	rjmp	.-384    	; 0x5240 <base_node+0x7c>

000053c0 <main>:
}


int main (void)
{
	init_onepos();
    53c0:	7f d8       	rcall	.-3842   	; 0x44c0 <init_onepos>
	
	rs485_init();
    53c2:	07 de       	rcall	.-1010   	; 0x4fd2 <rs485_init>
	ble_init();
    53c4:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <ble_init>
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
    53c8:	e0 ea       	ldi	r30, 0xA0	; 160
    53ca:	f9 e0       	ldi	r31, 0x09	; 9
    53cc:	83 81       	ldd	r24, Z+3	; 0x03
    53ce:	8f 7c       	andi	r24, 0xCF	; 207
    53d0:	80 61       	ori	r24, 0x10	; 16
    53d2:	83 83       	std	Z+3, r24	; 0x03
	usart_set_rx_interrupt_level(USART_BLE, USART_INT_LVL_LO);
	
	init_animation();
    53d4:	bf d8       	rcall	.-3714   	; 0x4554 <init_animation>
	
	uint8_t ret;
	ret = onepos_read_cfg();
    53d6:	40 db       	rcall	.-2432   	; 0x4a58 <onepos_read_cfg>
    53d8:	c8 2f       	mov	r28, r24
	printf("READ_CFG: %d. MEMCHECK = %x\n",ret,onepos_get_mem_check());
    53da:	a6 da       	rcall	.-2740   	; 0x4928 <onepos_get_mem_check>
    53dc:	9f 93       	push	r25
    53de:	8f 93       	push	r24
    53e0:	1f 92       	push	r1
    53e2:	cf 93       	push	r28
    53e4:	83 e1       	ldi	r24, 0x13	; 19
    53e6:	9b e2       	ldi	r25, 0x2B	; 43
    53e8:	9f 93       	push	r25
    53ea:	8f 93       	push	r24
    53ec:	7a d3       	rcall	.+1780   	; 0x5ae2 <printf>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    53ee:	e0 e4       	ldi	r30, 0x40	; 64
    53f0:	f6 e0       	ldi	r31, 0x06	; 6
    53f2:	80 85       	ldd	r24, Z+8	; 0x08
	
	if (sw2_status())
    53f4:	0f 90       	pop	r0
    53f6:	0f 90       	pop	r0
    53f8:	0f 90       	pop	r0
    53fa:	0f 90       	pop	r0
    53fc:	0f 90       	pop	r0
    53fe:	0f 90       	pop	r0
    5400:	82 fd       	sbrc	r24, 2
    5402:	02 c0       	rjmp	.+4      	; 0x5408 <main+0x48>
	{
		onepos_configure_interface();
    5404:	f3 db       	rcall	.-2074   	; 0x4bec <onepos_configure_interface>
    5406:	01 c0       	rjmp	.+2      	; 0x540a <main+0x4a>
	}
	else
	{
		onepos_print_current_configuration();
    5408:	4a db       	rcall	.-2412   	; 0x4a9e <onepos_print_current_configuration>
	}
	
	dwt_onepos_init(1);
    540a:	81 e0       	ldi	r24, 0x01	; 1
    540c:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <dwt_onepos_init>
	
	//support_node();
	base_node();
    5410:	d9 de       	rcall	.-590    	; 0x51c4 <base_node>

00005412 <__subsf3>:
    5412:	50 58       	subi	r21, 0x80	; 128

00005414 <__addsf3>:
    5414:	bb 27       	eor	r27, r27
    5416:	aa 27       	eor	r26, r26
    5418:	0e d0       	rcall	.+28     	; 0x5436 <__addsf3x>
    541a:	d4 c1       	rjmp	.+936    	; 0x57c4 <__fp_round>
    541c:	c5 d1       	rcall	.+906    	; 0x57a8 <__fp_pscA>
    541e:	30 f0       	brcs	.+12     	; 0x542c <__addsf3+0x18>
    5420:	ca d1       	rcall	.+916    	; 0x57b6 <__fp_pscB>
    5422:	20 f0       	brcs	.+8      	; 0x542c <__addsf3+0x18>
    5424:	31 f4       	brne	.+12     	; 0x5432 <__addsf3+0x1e>
    5426:	9f 3f       	cpi	r25, 0xFF	; 255
    5428:	11 f4       	brne	.+4      	; 0x542e <__addsf3+0x1a>
    542a:	1e f4       	brtc	.+6      	; 0x5432 <__addsf3+0x1e>
    542c:	aa c1       	rjmp	.+852    	; 0x5782 <__fp_nan>
    542e:	0e f4       	brtc	.+2      	; 0x5432 <__addsf3+0x1e>
    5430:	e0 95       	com	r30
    5432:	e7 fb       	bst	r30, 7
    5434:	a0 c1       	rjmp	.+832    	; 0x5776 <__fp_inf>

00005436 <__addsf3x>:
    5436:	e9 2f       	mov	r30, r25
    5438:	d6 d1       	rcall	.+940    	; 0x57e6 <__fp_split3>
    543a:	80 f3       	brcs	.-32     	; 0x541c <__addsf3+0x8>
    543c:	ba 17       	cp	r27, r26
    543e:	62 07       	cpc	r22, r18
    5440:	73 07       	cpc	r23, r19
    5442:	84 07       	cpc	r24, r20
    5444:	95 07       	cpc	r25, r21
    5446:	18 f0       	brcs	.+6      	; 0x544e <__addsf3x+0x18>
    5448:	71 f4       	brne	.+28     	; 0x5466 <__addsf3x+0x30>
    544a:	9e f5       	brtc	.+102    	; 0x54b2 <__addsf3x+0x7c>
    544c:	ee c1       	rjmp	.+988    	; 0x582a <__fp_zero>
    544e:	0e f4       	brtc	.+2      	; 0x5452 <__addsf3x+0x1c>
    5450:	e0 95       	com	r30
    5452:	0b 2e       	mov	r0, r27
    5454:	ba 2f       	mov	r27, r26
    5456:	a0 2d       	mov	r26, r0
    5458:	0b 01       	movw	r0, r22
    545a:	b9 01       	movw	r22, r18
    545c:	90 01       	movw	r18, r0
    545e:	0c 01       	movw	r0, r24
    5460:	ca 01       	movw	r24, r20
    5462:	a0 01       	movw	r20, r0
    5464:	11 24       	eor	r1, r1
    5466:	ff 27       	eor	r31, r31
    5468:	59 1b       	sub	r21, r25
    546a:	99 f0       	breq	.+38     	; 0x5492 <__addsf3x+0x5c>
    546c:	59 3f       	cpi	r21, 0xF9	; 249
    546e:	50 f4       	brcc	.+20     	; 0x5484 <__addsf3x+0x4e>
    5470:	50 3e       	cpi	r21, 0xE0	; 224
    5472:	68 f1       	brcs	.+90     	; 0x54ce <__addsf3x+0x98>
    5474:	1a 16       	cp	r1, r26
    5476:	f0 40       	sbci	r31, 0x00	; 0
    5478:	a2 2f       	mov	r26, r18
    547a:	23 2f       	mov	r18, r19
    547c:	34 2f       	mov	r19, r20
    547e:	44 27       	eor	r20, r20
    5480:	58 5f       	subi	r21, 0xF8	; 248
    5482:	f3 cf       	rjmp	.-26     	; 0x546a <__addsf3x+0x34>
    5484:	46 95       	lsr	r20
    5486:	37 95       	ror	r19
    5488:	27 95       	ror	r18
    548a:	a7 95       	ror	r26
    548c:	f0 40       	sbci	r31, 0x00	; 0
    548e:	53 95       	inc	r21
    5490:	c9 f7       	brne	.-14     	; 0x5484 <__addsf3x+0x4e>
    5492:	7e f4       	brtc	.+30     	; 0x54b2 <__addsf3x+0x7c>
    5494:	1f 16       	cp	r1, r31
    5496:	ba 0b       	sbc	r27, r26
    5498:	62 0b       	sbc	r22, r18
    549a:	73 0b       	sbc	r23, r19
    549c:	84 0b       	sbc	r24, r20
    549e:	ba f0       	brmi	.+46     	; 0x54ce <__addsf3x+0x98>
    54a0:	91 50       	subi	r25, 0x01	; 1
    54a2:	a1 f0       	breq	.+40     	; 0x54cc <__addsf3x+0x96>
    54a4:	ff 0f       	add	r31, r31
    54a6:	bb 1f       	adc	r27, r27
    54a8:	66 1f       	adc	r22, r22
    54aa:	77 1f       	adc	r23, r23
    54ac:	88 1f       	adc	r24, r24
    54ae:	c2 f7       	brpl	.-16     	; 0x54a0 <__addsf3x+0x6a>
    54b0:	0e c0       	rjmp	.+28     	; 0x54ce <__addsf3x+0x98>
    54b2:	ba 0f       	add	r27, r26
    54b4:	62 1f       	adc	r22, r18
    54b6:	73 1f       	adc	r23, r19
    54b8:	84 1f       	adc	r24, r20
    54ba:	48 f4       	brcc	.+18     	; 0x54ce <__addsf3x+0x98>
    54bc:	87 95       	ror	r24
    54be:	77 95       	ror	r23
    54c0:	67 95       	ror	r22
    54c2:	b7 95       	ror	r27
    54c4:	f7 95       	ror	r31
    54c6:	9e 3f       	cpi	r25, 0xFE	; 254
    54c8:	08 f0       	brcs	.+2      	; 0x54cc <__addsf3x+0x96>
    54ca:	b3 cf       	rjmp	.-154    	; 0x5432 <__addsf3+0x1e>
    54cc:	93 95       	inc	r25
    54ce:	88 0f       	add	r24, r24
    54d0:	08 f0       	brcs	.+2      	; 0x54d4 <__addsf3x+0x9e>
    54d2:	99 27       	eor	r25, r25
    54d4:	ee 0f       	add	r30, r30
    54d6:	97 95       	ror	r25
    54d8:	87 95       	ror	r24
    54da:	08 95       	ret

000054dc <__divsf3>:
    54dc:	0c d0       	rcall	.+24     	; 0x54f6 <__divsf3x>
    54de:	72 c1       	rjmp	.+740    	; 0x57c4 <__fp_round>
    54e0:	6a d1       	rcall	.+724    	; 0x57b6 <__fp_pscB>
    54e2:	40 f0       	brcs	.+16     	; 0x54f4 <__divsf3+0x18>
    54e4:	61 d1       	rcall	.+706    	; 0x57a8 <__fp_pscA>
    54e6:	30 f0       	brcs	.+12     	; 0x54f4 <__divsf3+0x18>
    54e8:	21 f4       	brne	.+8      	; 0x54f2 <__divsf3+0x16>
    54ea:	5f 3f       	cpi	r21, 0xFF	; 255
    54ec:	19 f0       	breq	.+6      	; 0x54f4 <__divsf3+0x18>
    54ee:	43 c1       	rjmp	.+646    	; 0x5776 <__fp_inf>
    54f0:	51 11       	cpse	r21, r1
    54f2:	9c c1       	rjmp	.+824    	; 0x582c <__fp_szero>
    54f4:	46 c1       	rjmp	.+652    	; 0x5782 <__fp_nan>

000054f6 <__divsf3x>:
    54f6:	77 d1       	rcall	.+750    	; 0x57e6 <__fp_split3>
    54f8:	98 f3       	brcs	.-26     	; 0x54e0 <__divsf3+0x4>

000054fa <__divsf3_pse>:
    54fa:	99 23       	and	r25, r25
    54fc:	c9 f3       	breq	.-14     	; 0x54f0 <__divsf3+0x14>
    54fe:	55 23       	and	r21, r21
    5500:	b1 f3       	breq	.-20     	; 0x54ee <__divsf3+0x12>
    5502:	95 1b       	sub	r25, r21
    5504:	55 0b       	sbc	r21, r21
    5506:	bb 27       	eor	r27, r27
    5508:	aa 27       	eor	r26, r26
    550a:	62 17       	cp	r22, r18
    550c:	73 07       	cpc	r23, r19
    550e:	84 07       	cpc	r24, r20
    5510:	38 f0       	brcs	.+14     	; 0x5520 <__divsf3_pse+0x26>
    5512:	9f 5f       	subi	r25, 0xFF	; 255
    5514:	5f 4f       	sbci	r21, 0xFF	; 255
    5516:	22 0f       	add	r18, r18
    5518:	33 1f       	adc	r19, r19
    551a:	44 1f       	adc	r20, r20
    551c:	aa 1f       	adc	r26, r26
    551e:	a9 f3       	breq	.-22     	; 0x550a <__divsf3_pse+0x10>
    5520:	33 d0       	rcall	.+102    	; 0x5588 <__divsf3_pse+0x8e>
    5522:	0e 2e       	mov	r0, r30
    5524:	3a f0       	brmi	.+14     	; 0x5534 <__divsf3_pse+0x3a>
    5526:	e0 e8       	ldi	r30, 0x80	; 128
    5528:	30 d0       	rcall	.+96     	; 0x558a <__divsf3_pse+0x90>
    552a:	91 50       	subi	r25, 0x01	; 1
    552c:	50 40       	sbci	r21, 0x00	; 0
    552e:	e6 95       	lsr	r30
    5530:	00 1c       	adc	r0, r0
    5532:	ca f7       	brpl	.-14     	; 0x5526 <__divsf3_pse+0x2c>
    5534:	29 d0       	rcall	.+82     	; 0x5588 <__divsf3_pse+0x8e>
    5536:	fe 2f       	mov	r31, r30
    5538:	27 d0       	rcall	.+78     	; 0x5588 <__divsf3_pse+0x8e>
    553a:	66 0f       	add	r22, r22
    553c:	77 1f       	adc	r23, r23
    553e:	88 1f       	adc	r24, r24
    5540:	bb 1f       	adc	r27, r27
    5542:	26 17       	cp	r18, r22
    5544:	37 07       	cpc	r19, r23
    5546:	48 07       	cpc	r20, r24
    5548:	ab 07       	cpc	r26, r27
    554a:	b0 e8       	ldi	r27, 0x80	; 128
    554c:	09 f0       	breq	.+2      	; 0x5550 <__divsf3_pse+0x56>
    554e:	bb 0b       	sbc	r27, r27
    5550:	80 2d       	mov	r24, r0
    5552:	bf 01       	movw	r22, r30
    5554:	ff 27       	eor	r31, r31
    5556:	93 58       	subi	r25, 0x83	; 131
    5558:	5f 4f       	sbci	r21, 0xFF	; 255
    555a:	2a f0       	brmi	.+10     	; 0x5566 <__divsf3_pse+0x6c>
    555c:	9e 3f       	cpi	r25, 0xFE	; 254
    555e:	51 05       	cpc	r21, r1
    5560:	68 f0       	brcs	.+26     	; 0x557c <__divsf3_pse+0x82>
    5562:	09 c1       	rjmp	.+530    	; 0x5776 <__fp_inf>
    5564:	63 c1       	rjmp	.+710    	; 0x582c <__fp_szero>
    5566:	5f 3f       	cpi	r21, 0xFF	; 255
    5568:	ec f3       	brlt	.-6      	; 0x5564 <__divsf3_pse+0x6a>
    556a:	98 3e       	cpi	r25, 0xE8	; 232
    556c:	dc f3       	brlt	.-10     	; 0x5564 <__divsf3_pse+0x6a>
    556e:	86 95       	lsr	r24
    5570:	77 95       	ror	r23
    5572:	67 95       	ror	r22
    5574:	b7 95       	ror	r27
    5576:	f7 95       	ror	r31
    5578:	9f 5f       	subi	r25, 0xFF	; 255
    557a:	c9 f7       	brne	.-14     	; 0x556e <__divsf3_pse+0x74>
    557c:	88 0f       	add	r24, r24
    557e:	91 1d       	adc	r25, r1
    5580:	96 95       	lsr	r25
    5582:	87 95       	ror	r24
    5584:	97 f9       	bld	r25, 7
    5586:	08 95       	ret
    5588:	e1 e0       	ldi	r30, 0x01	; 1
    558a:	66 0f       	add	r22, r22
    558c:	77 1f       	adc	r23, r23
    558e:	88 1f       	adc	r24, r24
    5590:	bb 1f       	adc	r27, r27
    5592:	62 17       	cp	r22, r18
    5594:	73 07       	cpc	r23, r19
    5596:	84 07       	cpc	r24, r20
    5598:	ba 07       	cpc	r27, r26
    559a:	20 f0       	brcs	.+8      	; 0x55a4 <__divsf3_pse+0xaa>
    559c:	62 1b       	sub	r22, r18
    559e:	73 0b       	sbc	r23, r19
    55a0:	84 0b       	sbc	r24, r20
    55a2:	ba 0b       	sbc	r27, r26
    55a4:	ee 1f       	adc	r30, r30
    55a6:	88 f7       	brcc	.-30     	; 0x558a <__divsf3_pse+0x90>
    55a8:	e0 95       	com	r30
    55aa:	08 95       	ret

000055ac <__fixsfdi>:
    55ac:	be e3       	ldi	r27, 0x3E	; 62
    55ae:	04 d0       	rcall	.+8      	; 0x55b8 <__fixunssfdi+0x2>
    55b0:	08 f4       	brcc	.+2      	; 0x55b4 <__fixsfdi+0x8>
    55b2:	90 e8       	ldi	r25, 0x80	; 128
    55b4:	08 95       	ret

000055b6 <__fixunssfdi>:
    55b6:	bf e3       	ldi	r27, 0x3F	; 63
    55b8:	22 27       	eor	r18, r18
    55ba:	33 27       	eor	r19, r19
    55bc:	a9 01       	movw	r20, r18
    55be:	1b d1       	rcall	.+566    	; 0x57f6 <__fp_splitA>
    55c0:	58 f1       	brcs	.+86     	; 0x5618 <__fixunssfdi+0x62>
    55c2:	9f 57       	subi	r25, 0x7F	; 127
    55c4:	40 f1       	brcs	.+80     	; 0x5616 <__fixunssfdi+0x60>
    55c6:	b9 17       	cp	r27, r25
    55c8:	38 f1       	brcs	.+78     	; 0x5618 <__fixunssfdi+0x62>
    55ca:	bf e3       	ldi	r27, 0x3F	; 63
    55cc:	b9 1b       	sub	r27, r25
    55ce:	99 27       	eor	r25, r25
    55d0:	b8 50       	subi	r27, 0x08	; 8
    55d2:	3a f4       	brpl	.+14     	; 0x55e2 <__fixunssfdi+0x2c>
    55d4:	66 0f       	add	r22, r22
    55d6:	77 1f       	adc	r23, r23
    55d8:	88 1f       	adc	r24, r24
    55da:	99 1f       	adc	r25, r25
    55dc:	b3 95       	inc	r27
    55de:	d2 f3       	brmi	.-12     	; 0x55d4 <__fixunssfdi+0x1e>
    55e0:	16 c0       	rjmp	.+44     	; 0x560e <__fixunssfdi+0x58>
    55e2:	b8 50       	subi	r27, 0x08	; 8
    55e4:	4a f0       	brmi	.+18     	; 0x55f8 <__fixunssfdi+0x42>
    55e6:	23 2f       	mov	r18, r19
    55e8:	34 2f       	mov	r19, r20
    55ea:	45 2f       	mov	r20, r21
    55ec:	56 2f       	mov	r21, r22
    55ee:	67 2f       	mov	r22, r23
    55f0:	78 2f       	mov	r23, r24
    55f2:	88 27       	eor	r24, r24
    55f4:	b8 50       	subi	r27, 0x08	; 8
    55f6:	ba f7       	brpl	.-18     	; 0x55e6 <__fixunssfdi+0x30>
    55f8:	b8 5f       	subi	r27, 0xF8	; 248
    55fa:	49 f0       	breq	.+18     	; 0x560e <__fixunssfdi+0x58>
    55fc:	86 95       	lsr	r24
    55fe:	77 95       	ror	r23
    5600:	67 95       	ror	r22
    5602:	57 95       	ror	r21
    5604:	47 95       	ror	r20
    5606:	37 95       	ror	r19
    5608:	27 95       	ror	r18
    560a:	ba 95       	dec	r27
    560c:	b9 f7       	brne	.-18     	; 0x55fc <__fixunssfdi+0x46>
    560e:	0e f4       	brtc	.+2      	; 0x5612 <__fixunssfdi+0x5c>
    5610:	bb d0       	rcall	.+374    	; 0x5788 <__fp_negdi>
    5612:	88 94       	clc
    5614:	08 95       	ret
    5616:	88 94       	clc
    5618:	60 e0       	ldi	r22, 0x00	; 0
    561a:	70 e0       	ldi	r23, 0x00	; 0
    561c:	cb 01       	movw	r24, r22
    561e:	08 95       	ret

00005620 <__fixunssfsi>:
    5620:	ea d0       	rcall	.+468    	; 0x57f6 <__fp_splitA>
    5622:	88 f0       	brcs	.+34     	; 0x5646 <__fixunssfsi+0x26>
    5624:	9f 57       	subi	r25, 0x7F	; 127
    5626:	90 f0       	brcs	.+36     	; 0x564c <__fixunssfsi+0x2c>
    5628:	b9 2f       	mov	r27, r25
    562a:	99 27       	eor	r25, r25
    562c:	b7 51       	subi	r27, 0x17	; 23
    562e:	a0 f0       	brcs	.+40     	; 0x5658 <__fixunssfsi+0x38>
    5630:	d1 f0       	breq	.+52     	; 0x5666 <__fixunssfsi+0x46>
    5632:	66 0f       	add	r22, r22
    5634:	77 1f       	adc	r23, r23
    5636:	88 1f       	adc	r24, r24
    5638:	99 1f       	adc	r25, r25
    563a:	1a f0       	brmi	.+6      	; 0x5642 <__fixunssfsi+0x22>
    563c:	ba 95       	dec	r27
    563e:	c9 f7       	brne	.-14     	; 0x5632 <__fixunssfsi+0x12>
    5640:	12 c0       	rjmp	.+36     	; 0x5666 <__fixunssfsi+0x46>
    5642:	b1 30       	cpi	r27, 0x01	; 1
    5644:	81 f0       	breq	.+32     	; 0x5666 <__fixunssfsi+0x46>
    5646:	f1 d0       	rcall	.+482    	; 0x582a <__fp_zero>
    5648:	b1 e0       	ldi	r27, 0x01	; 1
    564a:	08 95       	ret
    564c:	ee c0       	rjmp	.+476    	; 0x582a <__fp_zero>
    564e:	67 2f       	mov	r22, r23
    5650:	78 2f       	mov	r23, r24
    5652:	88 27       	eor	r24, r24
    5654:	b8 5f       	subi	r27, 0xF8	; 248
    5656:	39 f0       	breq	.+14     	; 0x5666 <__fixunssfsi+0x46>
    5658:	b9 3f       	cpi	r27, 0xF9	; 249
    565a:	cc f3       	brlt	.-14     	; 0x564e <__fixunssfsi+0x2e>
    565c:	86 95       	lsr	r24
    565e:	77 95       	ror	r23
    5660:	67 95       	ror	r22
    5662:	b3 95       	inc	r27
    5664:	d9 f7       	brne	.-10     	; 0x565c <__fixunssfsi+0x3c>
    5666:	3e f4       	brtc	.+14     	; 0x5676 <__fixunssfsi+0x56>
    5668:	90 95       	com	r25
    566a:	80 95       	com	r24
    566c:	70 95       	com	r23
    566e:	61 95       	neg	r22
    5670:	7f 4f       	sbci	r23, 0xFF	; 255
    5672:	8f 4f       	sbci	r24, 0xFF	; 255
    5674:	9f 4f       	sbci	r25, 0xFF	; 255
    5676:	08 95       	ret

00005678 <__floatdisf>:
    5678:	97 fb       	bst	r25, 7
    567a:	0e f4       	brtc	.+2      	; 0x567e <__floatdisf+0x6>
    567c:	85 d0       	rcall	.+266    	; 0x5788 <__fp_negdi>
    567e:	3e c0       	rjmp	.+124    	; 0x56fc <__fp_di2sf>

00005680 <__floatunsisf>:
    5680:	e8 94       	clt
    5682:	09 c0       	rjmp	.+18     	; 0x5696 <__floatsisf+0x12>

00005684 <__floatsisf>:
    5684:	97 fb       	bst	r25, 7
    5686:	3e f4       	brtc	.+14     	; 0x5696 <__floatsisf+0x12>
    5688:	90 95       	com	r25
    568a:	80 95       	com	r24
    568c:	70 95       	com	r23
    568e:	61 95       	neg	r22
    5690:	7f 4f       	sbci	r23, 0xFF	; 255
    5692:	8f 4f       	sbci	r24, 0xFF	; 255
    5694:	9f 4f       	sbci	r25, 0xFF	; 255
    5696:	99 23       	and	r25, r25
    5698:	a9 f0       	breq	.+42     	; 0x56c4 <__floatsisf+0x40>
    569a:	f9 2f       	mov	r31, r25
    569c:	96 e9       	ldi	r25, 0x96	; 150
    569e:	bb 27       	eor	r27, r27
    56a0:	93 95       	inc	r25
    56a2:	f6 95       	lsr	r31
    56a4:	87 95       	ror	r24
    56a6:	77 95       	ror	r23
    56a8:	67 95       	ror	r22
    56aa:	b7 95       	ror	r27
    56ac:	f1 11       	cpse	r31, r1
    56ae:	f8 cf       	rjmp	.-16     	; 0x56a0 <__floatsisf+0x1c>
    56b0:	fa f4       	brpl	.+62     	; 0x56f0 <__floatsisf+0x6c>
    56b2:	bb 0f       	add	r27, r27
    56b4:	11 f4       	brne	.+4      	; 0x56ba <__floatsisf+0x36>
    56b6:	60 ff       	sbrs	r22, 0
    56b8:	1b c0       	rjmp	.+54     	; 0x56f0 <__floatsisf+0x6c>
    56ba:	6f 5f       	subi	r22, 0xFF	; 255
    56bc:	7f 4f       	sbci	r23, 0xFF	; 255
    56be:	8f 4f       	sbci	r24, 0xFF	; 255
    56c0:	9f 4f       	sbci	r25, 0xFF	; 255
    56c2:	16 c0       	rjmp	.+44     	; 0x56f0 <__floatsisf+0x6c>
    56c4:	88 23       	and	r24, r24
    56c6:	11 f0       	breq	.+4      	; 0x56cc <__floatsisf+0x48>
    56c8:	96 e9       	ldi	r25, 0x96	; 150
    56ca:	11 c0       	rjmp	.+34     	; 0x56ee <__floatsisf+0x6a>
    56cc:	77 23       	and	r23, r23
    56ce:	21 f0       	breq	.+8      	; 0x56d8 <__floatsisf+0x54>
    56d0:	9e e8       	ldi	r25, 0x8E	; 142
    56d2:	87 2f       	mov	r24, r23
    56d4:	76 2f       	mov	r23, r22
    56d6:	05 c0       	rjmp	.+10     	; 0x56e2 <__floatsisf+0x5e>
    56d8:	66 23       	and	r22, r22
    56da:	71 f0       	breq	.+28     	; 0x56f8 <__floatsisf+0x74>
    56dc:	96 e8       	ldi	r25, 0x86	; 134
    56de:	86 2f       	mov	r24, r22
    56e0:	70 e0       	ldi	r23, 0x00	; 0
    56e2:	60 e0       	ldi	r22, 0x00	; 0
    56e4:	2a f0       	brmi	.+10     	; 0x56f0 <__floatsisf+0x6c>
    56e6:	9a 95       	dec	r25
    56e8:	66 0f       	add	r22, r22
    56ea:	77 1f       	adc	r23, r23
    56ec:	88 1f       	adc	r24, r24
    56ee:	da f7       	brpl	.-10     	; 0x56e6 <__floatsisf+0x62>
    56f0:	88 0f       	add	r24, r24
    56f2:	96 95       	lsr	r25
    56f4:	87 95       	ror	r24
    56f6:	97 f9       	bld	r25, 7
    56f8:	08 95       	ret

000056fa <__floatundisf>:
    56fa:	e8 94       	clt

000056fc <__fp_di2sf>:
    56fc:	f9 2f       	mov	r31, r25
    56fe:	96 eb       	ldi	r25, 0xB6	; 182
    5700:	ff 23       	and	r31, r31
    5702:	81 f0       	breq	.+32     	; 0x5724 <__fp_di2sf+0x28>
    5704:	12 16       	cp	r1, r18
    5706:	13 06       	cpc	r1, r19
    5708:	14 06       	cpc	r1, r20
    570a:	44 0b       	sbc	r20, r20
    570c:	93 95       	inc	r25
    570e:	f6 95       	lsr	r31
    5710:	87 95       	ror	r24
    5712:	77 95       	ror	r23
    5714:	67 95       	ror	r22
    5716:	57 95       	ror	r21
    5718:	40 40       	sbci	r20, 0x00	; 0
    571a:	ff 23       	and	r31, r31
    571c:	b9 f7       	brne	.-18     	; 0x570c <__fp_di2sf+0x10>
    571e:	1b c0       	rjmp	.+54     	; 0x5756 <__fp_di2sf+0x5a>
    5720:	99 27       	eor	r25, r25
    5722:	08 95       	ret
    5724:	88 23       	and	r24, r24
    5726:	51 f4       	brne	.+20     	; 0x573c <__fp_di2sf+0x40>
    5728:	98 50       	subi	r25, 0x08	; 8
    572a:	d2 f7       	brpl	.-12     	; 0x5720 <__fp_di2sf+0x24>
    572c:	87 2b       	or	r24, r23
    572e:	76 2f       	mov	r23, r22
    5730:	65 2f       	mov	r22, r21
    5732:	54 2f       	mov	r21, r20
    5734:	43 2f       	mov	r20, r19
    5736:	32 2f       	mov	r19, r18
    5738:	20 e0       	ldi	r18, 0x00	; 0
    573a:	b1 f3       	breq	.-20     	; 0x5728 <__fp_di2sf+0x2c>
    573c:	12 16       	cp	r1, r18
    573e:	13 06       	cpc	r1, r19
    5740:	14 06       	cpc	r1, r20
    5742:	44 0b       	sbc	r20, r20
    5744:	88 23       	and	r24, r24
    5746:	3a f0       	brmi	.+14     	; 0x5756 <__fp_di2sf+0x5a>
    5748:	9a 95       	dec	r25
    574a:	44 0f       	add	r20, r20
    574c:	55 1f       	adc	r21, r21
    574e:	66 1f       	adc	r22, r22
    5750:	77 1f       	adc	r23, r23
    5752:	88 1f       	adc	r24, r24
    5754:	ca f7       	brpl	.-14     	; 0x5748 <__fp_di2sf+0x4c>
    5756:	55 23       	and	r21, r21
    5758:	4a f4       	brpl	.+18     	; 0x576c <__fp_di2sf+0x70>
    575a:	44 0f       	add	r20, r20
    575c:	55 1f       	adc	r21, r21
    575e:	11 f4       	brne	.+4      	; 0x5764 <__fp_di2sf+0x68>
    5760:	60 ff       	sbrs	r22, 0
    5762:	04 c0       	rjmp	.+8      	; 0x576c <__fp_di2sf+0x70>
    5764:	6f 5f       	subi	r22, 0xFF	; 255
    5766:	7f 4f       	sbci	r23, 0xFF	; 255
    5768:	8f 4f       	sbci	r24, 0xFF	; 255
    576a:	9f 4f       	sbci	r25, 0xFF	; 255
    576c:	88 0f       	add	r24, r24
    576e:	96 95       	lsr	r25
    5770:	87 95       	ror	r24
    5772:	97 f9       	bld	r25, 7
    5774:	08 95       	ret

00005776 <__fp_inf>:
    5776:	97 f9       	bld	r25, 7
    5778:	9f 67       	ori	r25, 0x7F	; 127
    577a:	80 e8       	ldi	r24, 0x80	; 128
    577c:	70 e0       	ldi	r23, 0x00	; 0
    577e:	60 e0       	ldi	r22, 0x00	; 0
    5780:	08 95       	ret

00005782 <__fp_nan>:
    5782:	9f ef       	ldi	r25, 0xFF	; 255
    5784:	80 ec       	ldi	r24, 0xC0	; 192
    5786:	08 95       	ret

00005788 <__fp_negdi>:
    5788:	90 95       	com	r25
    578a:	80 95       	com	r24
    578c:	70 95       	com	r23
    578e:	60 95       	com	r22
    5790:	50 95       	com	r21
    5792:	40 95       	com	r20
    5794:	30 95       	com	r19
    5796:	21 95       	neg	r18
    5798:	3f 4f       	sbci	r19, 0xFF	; 255
    579a:	4f 4f       	sbci	r20, 0xFF	; 255
    579c:	5f 4f       	sbci	r21, 0xFF	; 255
    579e:	6f 4f       	sbci	r22, 0xFF	; 255
    57a0:	7f 4f       	sbci	r23, 0xFF	; 255
    57a2:	8f 4f       	sbci	r24, 0xFF	; 255
    57a4:	9f 4f       	sbci	r25, 0xFF	; 255
    57a6:	08 95       	ret

000057a8 <__fp_pscA>:
    57a8:	00 24       	eor	r0, r0
    57aa:	0a 94       	dec	r0
    57ac:	16 16       	cp	r1, r22
    57ae:	17 06       	cpc	r1, r23
    57b0:	18 06       	cpc	r1, r24
    57b2:	09 06       	cpc	r0, r25
    57b4:	08 95       	ret

000057b6 <__fp_pscB>:
    57b6:	00 24       	eor	r0, r0
    57b8:	0a 94       	dec	r0
    57ba:	12 16       	cp	r1, r18
    57bc:	13 06       	cpc	r1, r19
    57be:	14 06       	cpc	r1, r20
    57c0:	05 06       	cpc	r0, r21
    57c2:	08 95       	ret

000057c4 <__fp_round>:
    57c4:	09 2e       	mov	r0, r25
    57c6:	03 94       	inc	r0
    57c8:	00 0c       	add	r0, r0
    57ca:	11 f4       	brne	.+4      	; 0x57d0 <__fp_round+0xc>
    57cc:	88 23       	and	r24, r24
    57ce:	52 f0       	brmi	.+20     	; 0x57e4 <__fp_round+0x20>
    57d0:	bb 0f       	add	r27, r27
    57d2:	40 f4       	brcc	.+16     	; 0x57e4 <__fp_round+0x20>
    57d4:	bf 2b       	or	r27, r31
    57d6:	11 f4       	brne	.+4      	; 0x57dc <__fp_round+0x18>
    57d8:	60 ff       	sbrs	r22, 0
    57da:	04 c0       	rjmp	.+8      	; 0x57e4 <__fp_round+0x20>
    57dc:	6f 5f       	subi	r22, 0xFF	; 255
    57de:	7f 4f       	sbci	r23, 0xFF	; 255
    57e0:	8f 4f       	sbci	r24, 0xFF	; 255
    57e2:	9f 4f       	sbci	r25, 0xFF	; 255
    57e4:	08 95       	ret

000057e6 <__fp_split3>:
    57e6:	57 fd       	sbrc	r21, 7
    57e8:	90 58       	subi	r25, 0x80	; 128
    57ea:	44 0f       	add	r20, r20
    57ec:	55 1f       	adc	r21, r21
    57ee:	59 f0       	breq	.+22     	; 0x5806 <__fp_splitA+0x10>
    57f0:	5f 3f       	cpi	r21, 0xFF	; 255
    57f2:	71 f0       	breq	.+28     	; 0x5810 <__fp_splitA+0x1a>
    57f4:	47 95       	ror	r20

000057f6 <__fp_splitA>:
    57f6:	88 0f       	add	r24, r24
    57f8:	97 fb       	bst	r25, 7
    57fa:	99 1f       	adc	r25, r25
    57fc:	61 f0       	breq	.+24     	; 0x5816 <__fp_splitA+0x20>
    57fe:	9f 3f       	cpi	r25, 0xFF	; 255
    5800:	79 f0       	breq	.+30     	; 0x5820 <__fp_splitA+0x2a>
    5802:	87 95       	ror	r24
    5804:	08 95       	ret
    5806:	12 16       	cp	r1, r18
    5808:	13 06       	cpc	r1, r19
    580a:	14 06       	cpc	r1, r20
    580c:	55 1f       	adc	r21, r21
    580e:	f2 cf       	rjmp	.-28     	; 0x57f4 <__fp_split3+0xe>
    5810:	46 95       	lsr	r20
    5812:	f1 df       	rcall	.-30     	; 0x57f6 <__fp_splitA>
    5814:	08 c0       	rjmp	.+16     	; 0x5826 <__fp_splitA+0x30>
    5816:	16 16       	cp	r1, r22
    5818:	17 06       	cpc	r1, r23
    581a:	18 06       	cpc	r1, r24
    581c:	99 1f       	adc	r25, r25
    581e:	f1 cf       	rjmp	.-30     	; 0x5802 <__fp_splitA+0xc>
    5820:	86 95       	lsr	r24
    5822:	71 05       	cpc	r23, r1
    5824:	61 05       	cpc	r22, r1
    5826:	08 94       	sec
    5828:	08 95       	ret

0000582a <__fp_zero>:
    582a:	e8 94       	clt

0000582c <__fp_szero>:
    582c:	bb 27       	eor	r27, r27
    582e:	66 27       	eor	r22, r22
    5830:	77 27       	eor	r23, r23
    5832:	cb 01       	movw	r24, r22
    5834:	97 f9       	bld	r25, 7
    5836:	08 95       	ret

00005838 <__mulsf3>:
    5838:	0b d0       	rcall	.+22     	; 0x5850 <__mulsf3x>
    583a:	c4 cf       	rjmp	.-120    	; 0x57c4 <__fp_round>
    583c:	b5 df       	rcall	.-150    	; 0x57a8 <__fp_pscA>
    583e:	28 f0       	brcs	.+10     	; 0x584a <__mulsf3+0x12>
    5840:	ba df       	rcall	.-140    	; 0x57b6 <__fp_pscB>
    5842:	18 f0       	brcs	.+6      	; 0x584a <__mulsf3+0x12>
    5844:	95 23       	and	r25, r21
    5846:	09 f0       	breq	.+2      	; 0x584a <__mulsf3+0x12>
    5848:	96 cf       	rjmp	.-212    	; 0x5776 <__fp_inf>
    584a:	9b cf       	rjmp	.-202    	; 0x5782 <__fp_nan>
    584c:	11 24       	eor	r1, r1
    584e:	ee cf       	rjmp	.-36     	; 0x582c <__fp_szero>

00005850 <__mulsf3x>:
    5850:	ca df       	rcall	.-108    	; 0x57e6 <__fp_split3>
    5852:	a0 f3       	brcs	.-24     	; 0x583c <__mulsf3+0x4>

00005854 <__mulsf3_pse>:
    5854:	95 9f       	mul	r25, r21
    5856:	d1 f3       	breq	.-12     	; 0x584c <__mulsf3+0x14>
    5858:	95 0f       	add	r25, r21
    585a:	50 e0       	ldi	r21, 0x00	; 0
    585c:	55 1f       	adc	r21, r21
    585e:	62 9f       	mul	r22, r18
    5860:	f0 01       	movw	r30, r0
    5862:	72 9f       	mul	r23, r18
    5864:	bb 27       	eor	r27, r27
    5866:	f0 0d       	add	r31, r0
    5868:	b1 1d       	adc	r27, r1
    586a:	63 9f       	mul	r22, r19
    586c:	aa 27       	eor	r26, r26
    586e:	f0 0d       	add	r31, r0
    5870:	b1 1d       	adc	r27, r1
    5872:	aa 1f       	adc	r26, r26
    5874:	64 9f       	mul	r22, r20
    5876:	66 27       	eor	r22, r22
    5878:	b0 0d       	add	r27, r0
    587a:	a1 1d       	adc	r26, r1
    587c:	66 1f       	adc	r22, r22
    587e:	82 9f       	mul	r24, r18
    5880:	22 27       	eor	r18, r18
    5882:	b0 0d       	add	r27, r0
    5884:	a1 1d       	adc	r26, r1
    5886:	62 1f       	adc	r22, r18
    5888:	73 9f       	mul	r23, r19
    588a:	b0 0d       	add	r27, r0
    588c:	a1 1d       	adc	r26, r1
    588e:	62 1f       	adc	r22, r18
    5890:	83 9f       	mul	r24, r19
    5892:	a0 0d       	add	r26, r0
    5894:	61 1d       	adc	r22, r1
    5896:	22 1f       	adc	r18, r18
    5898:	74 9f       	mul	r23, r20
    589a:	33 27       	eor	r19, r19
    589c:	a0 0d       	add	r26, r0
    589e:	61 1d       	adc	r22, r1
    58a0:	23 1f       	adc	r18, r19
    58a2:	84 9f       	mul	r24, r20
    58a4:	60 0d       	add	r22, r0
    58a6:	21 1d       	adc	r18, r1
    58a8:	82 2f       	mov	r24, r18
    58aa:	76 2f       	mov	r23, r22
    58ac:	6a 2f       	mov	r22, r26
    58ae:	11 24       	eor	r1, r1
    58b0:	9f 57       	subi	r25, 0x7F	; 127
    58b2:	50 40       	sbci	r21, 0x00	; 0
    58b4:	8a f0       	brmi	.+34     	; 0x58d8 <__mulsf3_pse+0x84>
    58b6:	e1 f0       	breq	.+56     	; 0x58f0 <__mulsf3_pse+0x9c>
    58b8:	88 23       	and	r24, r24
    58ba:	4a f0       	brmi	.+18     	; 0x58ce <__mulsf3_pse+0x7a>
    58bc:	ee 0f       	add	r30, r30
    58be:	ff 1f       	adc	r31, r31
    58c0:	bb 1f       	adc	r27, r27
    58c2:	66 1f       	adc	r22, r22
    58c4:	77 1f       	adc	r23, r23
    58c6:	88 1f       	adc	r24, r24
    58c8:	91 50       	subi	r25, 0x01	; 1
    58ca:	50 40       	sbci	r21, 0x00	; 0
    58cc:	a9 f7       	brne	.-22     	; 0x58b8 <__mulsf3_pse+0x64>
    58ce:	9e 3f       	cpi	r25, 0xFE	; 254
    58d0:	51 05       	cpc	r21, r1
    58d2:	70 f0       	brcs	.+28     	; 0x58f0 <__mulsf3_pse+0x9c>
    58d4:	50 cf       	rjmp	.-352    	; 0x5776 <__fp_inf>
    58d6:	aa cf       	rjmp	.-172    	; 0x582c <__fp_szero>
    58d8:	5f 3f       	cpi	r21, 0xFF	; 255
    58da:	ec f3       	brlt	.-6      	; 0x58d6 <__mulsf3_pse+0x82>
    58dc:	98 3e       	cpi	r25, 0xE8	; 232
    58de:	dc f3       	brlt	.-10     	; 0x58d6 <__mulsf3_pse+0x82>
    58e0:	86 95       	lsr	r24
    58e2:	77 95       	ror	r23
    58e4:	67 95       	ror	r22
    58e6:	b7 95       	ror	r27
    58e8:	f7 95       	ror	r31
    58ea:	e7 95       	ror	r30
    58ec:	9f 5f       	subi	r25, 0xFF	; 255
    58ee:	c1 f7       	brne	.-16     	; 0x58e0 <__mulsf3_pse+0x8c>
    58f0:	fe 2b       	or	r31, r30
    58f2:	88 0f       	add	r24, r24
    58f4:	91 1d       	adc	r25, r1
    58f6:	96 95       	lsr	r25
    58f8:	87 95       	ror	r24
    58fa:	97 f9       	bld	r25, 7
    58fc:	08 95       	ret

000058fe <__udivmodhi4>:
    58fe:	aa 1b       	sub	r26, r26
    5900:	bb 1b       	sub	r27, r27
    5902:	51 e1       	ldi	r21, 0x11	; 17
    5904:	07 c0       	rjmp	.+14     	; 0x5914 <__udivmodhi4_ep>

00005906 <__udivmodhi4_loop>:
    5906:	aa 1f       	adc	r26, r26
    5908:	bb 1f       	adc	r27, r27
    590a:	a6 17       	cp	r26, r22
    590c:	b7 07       	cpc	r27, r23
    590e:	10 f0       	brcs	.+4      	; 0x5914 <__udivmodhi4_ep>
    5910:	a6 1b       	sub	r26, r22
    5912:	b7 0b       	sbc	r27, r23

00005914 <__udivmodhi4_ep>:
    5914:	88 1f       	adc	r24, r24
    5916:	99 1f       	adc	r25, r25
    5918:	5a 95       	dec	r21
    591a:	a9 f7       	brne	.-22     	; 0x5906 <__udivmodhi4_loop>
    591c:	80 95       	com	r24
    591e:	90 95       	com	r25
    5920:	bc 01       	movw	r22, r24
    5922:	cd 01       	movw	r24, r26
    5924:	08 95       	ret

00005926 <__udivmodsi4>:
    5926:	a1 e2       	ldi	r26, 0x21	; 33
    5928:	1a 2e       	mov	r1, r26
    592a:	aa 1b       	sub	r26, r26
    592c:	bb 1b       	sub	r27, r27
    592e:	fd 01       	movw	r30, r26
    5930:	0d c0       	rjmp	.+26     	; 0x594c <__udivmodsi4_ep>

00005932 <__udivmodsi4_loop>:
    5932:	aa 1f       	adc	r26, r26
    5934:	bb 1f       	adc	r27, r27
    5936:	ee 1f       	adc	r30, r30
    5938:	ff 1f       	adc	r31, r31
    593a:	a2 17       	cp	r26, r18
    593c:	b3 07       	cpc	r27, r19
    593e:	e4 07       	cpc	r30, r20
    5940:	f5 07       	cpc	r31, r21
    5942:	20 f0       	brcs	.+8      	; 0x594c <__udivmodsi4_ep>
    5944:	a2 1b       	sub	r26, r18
    5946:	b3 0b       	sbc	r27, r19
    5948:	e4 0b       	sbc	r30, r20
    594a:	f5 0b       	sbc	r31, r21

0000594c <__udivmodsi4_ep>:
    594c:	66 1f       	adc	r22, r22
    594e:	77 1f       	adc	r23, r23
    5950:	88 1f       	adc	r24, r24
    5952:	99 1f       	adc	r25, r25
    5954:	1a 94       	dec	r1
    5956:	69 f7       	brne	.-38     	; 0x5932 <__udivmodsi4_loop>
    5958:	60 95       	com	r22
    595a:	70 95       	com	r23
    595c:	80 95       	com	r24
    595e:	90 95       	com	r25
    5960:	9b 01       	movw	r18, r22
    5962:	ac 01       	movw	r20, r24
    5964:	bd 01       	movw	r22, r26
    5966:	cf 01       	movw	r24, r30
    5968:	08 95       	ret

0000596a <__tablejump2__>:
    596a:	ee 0f       	add	r30, r30
    596c:	ff 1f       	adc	r31, r31

0000596e <__tablejump__>:
    596e:	05 90       	lpm	r0, Z+
    5970:	f4 91       	lpm	r31, Z
    5972:	e0 2d       	mov	r30, r0
    5974:	09 94       	ijmp

00005976 <__muldi3>:
    5976:	df 93       	push	r29
    5978:	cf 93       	push	r28
    597a:	1f 93       	push	r17
    597c:	0f 93       	push	r16
    597e:	9a 9d       	mul	r25, r10
    5980:	f0 2d       	mov	r31, r0
    5982:	21 9f       	mul	r18, r17
    5984:	f0 0d       	add	r31, r0
    5986:	8b 9d       	mul	r24, r11
    5988:	f0 0d       	add	r31, r0
    598a:	8a 9d       	mul	r24, r10
    598c:	e0 2d       	mov	r30, r0
    598e:	f1 0d       	add	r31, r1
    5990:	03 9f       	mul	r16, r19
    5992:	f0 0d       	add	r31, r0
    5994:	02 9f       	mul	r16, r18
    5996:	e0 0d       	add	r30, r0
    5998:	f1 1d       	adc	r31, r1
    599a:	4e 9d       	mul	r20, r14
    599c:	e0 0d       	add	r30, r0
    599e:	f1 1d       	adc	r31, r1
    59a0:	5e 9d       	mul	r21, r14
    59a2:	f0 0d       	add	r31, r0
    59a4:	4f 9d       	mul	r20, r15
    59a6:	f0 0d       	add	r31, r0
    59a8:	7f 93       	push	r23
    59aa:	6f 93       	push	r22
    59ac:	bf 92       	push	r11
    59ae:	af 92       	push	r10
    59b0:	5f 93       	push	r21
    59b2:	4f 93       	push	r20
    59b4:	d5 01       	movw	r26, r10
    59b6:	67 d0       	rcall	.+206    	; 0x5a86 <__umulhisi3>
    59b8:	8b 01       	movw	r16, r22
    59ba:	ac 01       	movw	r20, r24
    59bc:	d7 01       	movw	r26, r14
    59be:	63 d0       	rcall	.+198    	; 0x5a86 <__umulhisi3>
    59c0:	eb 01       	movw	r28, r22
    59c2:	e8 0f       	add	r30, r24
    59c4:	f9 1f       	adc	r31, r25
    59c6:	d6 01       	movw	r26, r12
    59c8:	1f d0       	rcall	.+62     	; 0x5a08 <__muldi3_6>
    59ca:	2f 91       	pop	r18
    59cc:	3f 91       	pop	r19
    59ce:	d6 01       	movw	r26, r12
    59d0:	5a d0       	rcall	.+180    	; 0x5a86 <__umulhisi3>
    59d2:	c6 0f       	add	r28, r22
    59d4:	d7 1f       	adc	r29, r23
    59d6:	e8 1f       	adc	r30, r24
    59d8:	f9 1f       	adc	r31, r25
    59da:	af 91       	pop	r26
    59dc:	bf 91       	pop	r27
    59de:	14 d0       	rcall	.+40     	; 0x5a08 <__muldi3_6>
    59e0:	2f 91       	pop	r18
    59e2:	3f 91       	pop	r19
    59e4:	50 d0       	rcall	.+160    	; 0x5a86 <__umulhisi3>
    59e6:	c6 0f       	add	r28, r22
    59e8:	d7 1f       	adc	r29, r23
    59ea:	e8 1f       	adc	r30, r24
    59ec:	f9 1f       	adc	r31, r25
    59ee:	d6 01       	movw	r26, r12
    59f0:	4a d0       	rcall	.+148    	; 0x5a86 <__umulhisi3>
    59f2:	e6 0f       	add	r30, r22
    59f4:	f7 1f       	adc	r31, r23
    59f6:	98 01       	movw	r18, r16
    59f8:	be 01       	movw	r22, r28
    59fa:	cf 01       	movw	r24, r30
    59fc:	11 24       	eor	r1, r1
    59fe:	0f 91       	pop	r16
    5a00:	1f 91       	pop	r17
    5a02:	cf 91       	pop	r28
    5a04:	df 91       	pop	r29
    5a06:	08 95       	ret

00005a08 <__muldi3_6>:
    5a08:	3e d0       	rcall	.+124    	; 0x5a86 <__umulhisi3>
    5a0a:	46 0f       	add	r20, r22
    5a0c:	57 1f       	adc	r21, r23
    5a0e:	c8 1f       	adc	r28, r24
    5a10:	d9 1f       	adc	r29, r25
    5a12:	08 f4       	brcc	.+2      	; 0x5a16 <__muldi3_6+0xe>
    5a14:	31 96       	adiw	r30, 0x01	; 1
    5a16:	08 95       	ret

00005a18 <__ashldi3>:
    5a18:	0f 93       	push	r16
    5a1a:	08 30       	cpi	r16, 0x08	; 8
    5a1c:	90 f0       	brcs	.+36     	; 0x5a42 <__ashldi3+0x2a>
    5a1e:	98 2f       	mov	r25, r24
    5a20:	87 2f       	mov	r24, r23
    5a22:	76 2f       	mov	r23, r22
    5a24:	65 2f       	mov	r22, r21
    5a26:	54 2f       	mov	r21, r20
    5a28:	43 2f       	mov	r20, r19
    5a2a:	32 2f       	mov	r19, r18
    5a2c:	22 27       	eor	r18, r18
    5a2e:	08 50       	subi	r16, 0x08	; 8
    5a30:	f4 cf       	rjmp	.-24     	; 0x5a1a <__ashldi3+0x2>
    5a32:	22 0f       	add	r18, r18
    5a34:	33 1f       	adc	r19, r19
    5a36:	44 1f       	adc	r20, r20
    5a38:	55 1f       	adc	r21, r21
    5a3a:	66 1f       	adc	r22, r22
    5a3c:	77 1f       	adc	r23, r23
    5a3e:	88 1f       	adc	r24, r24
    5a40:	99 1f       	adc	r25, r25
    5a42:	0a 95       	dec	r16
    5a44:	b2 f7       	brpl	.-20     	; 0x5a32 <__ashldi3+0x1a>
    5a46:	0f 91       	pop	r16
    5a48:	08 95       	ret

00005a4a <__ashrdi3>:
    5a4a:	97 fb       	bst	r25, 7
    5a4c:	10 f8       	bld	r1, 0

00005a4e <__lshrdi3>:
    5a4e:	16 94       	lsr	r1
    5a50:	00 08       	sbc	r0, r0
    5a52:	0f 93       	push	r16
    5a54:	08 30       	cpi	r16, 0x08	; 8
    5a56:	98 f0       	brcs	.+38     	; 0x5a7e <__lshrdi3+0x30>
    5a58:	08 50       	subi	r16, 0x08	; 8
    5a5a:	23 2f       	mov	r18, r19
    5a5c:	34 2f       	mov	r19, r20
    5a5e:	45 2f       	mov	r20, r21
    5a60:	56 2f       	mov	r21, r22
    5a62:	67 2f       	mov	r22, r23
    5a64:	78 2f       	mov	r23, r24
    5a66:	89 2f       	mov	r24, r25
    5a68:	90 2d       	mov	r25, r0
    5a6a:	f4 cf       	rjmp	.-24     	; 0x5a54 <__lshrdi3+0x6>
    5a6c:	05 94       	asr	r0
    5a6e:	97 95       	ror	r25
    5a70:	87 95       	ror	r24
    5a72:	77 95       	ror	r23
    5a74:	67 95       	ror	r22
    5a76:	57 95       	ror	r21
    5a78:	47 95       	ror	r20
    5a7a:	37 95       	ror	r19
    5a7c:	27 95       	ror	r18
    5a7e:	0a 95       	dec	r16
    5a80:	aa f7       	brpl	.-22     	; 0x5a6c <__lshrdi3+0x1e>
    5a82:	0f 91       	pop	r16
    5a84:	08 95       	ret

00005a86 <__umulhisi3>:
    5a86:	a2 9f       	mul	r26, r18
    5a88:	b0 01       	movw	r22, r0
    5a8a:	b3 9f       	mul	r27, r19
    5a8c:	c0 01       	movw	r24, r0
    5a8e:	a3 9f       	mul	r26, r19
    5a90:	70 0d       	add	r23, r0
    5a92:	81 1d       	adc	r24, r1
    5a94:	11 24       	eor	r1, r1
    5a96:	91 1d       	adc	r25, r1
    5a98:	b2 9f       	mul	r27, r18
    5a9a:	70 0d       	add	r23, r0
    5a9c:	81 1d       	adc	r24, r1
    5a9e:	11 24       	eor	r1, r1
    5aa0:	91 1d       	adc	r25, r1
    5aa2:	08 95       	ret

00005aa4 <memcpy>:
    5aa4:	fb 01       	movw	r30, r22
    5aa6:	dc 01       	movw	r26, r24
    5aa8:	02 c0       	rjmp	.+4      	; 0x5aae <memcpy+0xa>
    5aaa:	01 90       	ld	r0, Z+
    5aac:	0d 92       	st	X+, r0
    5aae:	41 50       	subi	r20, 0x01	; 1
    5ab0:	50 40       	sbci	r21, 0x00	; 0
    5ab2:	d8 f7       	brcc	.-10     	; 0x5aaa <memcpy+0x6>
    5ab4:	08 95       	ret

00005ab6 <strcpy>:
    5ab6:	fb 01       	movw	r30, r22
    5ab8:	dc 01       	movw	r26, r24
    5aba:	01 90       	ld	r0, Z+
    5abc:	0d 92       	st	X+, r0
    5abe:	00 20       	and	r0, r0
    5ac0:	e1 f7       	brne	.-8      	; 0x5aba <strcpy+0x4>
    5ac2:	08 95       	ret

00005ac4 <strncpy>:
    5ac4:	fb 01       	movw	r30, r22
    5ac6:	dc 01       	movw	r26, r24
    5ac8:	41 50       	subi	r20, 0x01	; 1
    5aca:	50 40       	sbci	r21, 0x00	; 0
    5acc:	48 f0       	brcs	.+18     	; 0x5ae0 <strncpy+0x1c>
    5ace:	01 90       	ld	r0, Z+
    5ad0:	0d 92       	st	X+, r0
    5ad2:	00 20       	and	r0, r0
    5ad4:	c9 f7       	brne	.-14     	; 0x5ac8 <strncpy+0x4>
    5ad6:	01 c0       	rjmp	.+2      	; 0x5ada <strncpy+0x16>
    5ad8:	1d 92       	st	X+, r1
    5ada:	41 50       	subi	r20, 0x01	; 1
    5adc:	50 40       	sbci	r21, 0x00	; 0
    5ade:	e0 f7       	brcc	.-8      	; 0x5ad8 <strncpy+0x14>
    5ae0:	08 95       	ret

00005ae2 <printf>:
    5ae2:	a0 e0       	ldi	r26, 0x00	; 0
    5ae4:	b0 e0       	ldi	r27, 0x00	; 0
    5ae6:	e6 e7       	ldi	r30, 0x76	; 118
    5ae8:	fd e2       	ldi	r31, 0x2D	; 45
    5aea:	fd c5       	rjmp	.+3066   	; 0x66e6 <__prologue_saves__+0x20>
    5aec:	fe 01       	movw	r30, r28
    5aee:	35 96       	adiw	r30, 0x05	; 5
    5af0:	61 91       	ld	r22, Z+
    5af2:	71 91       	ld	r23, Z+
    5af4:	af 01       	movw	r20, r30
    5af6:	80 91 a1 2f 	lds	r24, 0x2FA1
    5afa:	90 91 a2 2f 	lds	r25, 0x2FA2
    5afe:	75 d0       	rcall	.+234    	; 0x5bea <vfprintf>
    5b00:	e2 e0       	ldi	r30, 0x02	; 2
    5b02:	0a c6       	rjmp	.+3092   	; 0x6718 <__epilogue_restores__+0x20>

00005b04 <puts>:
    5b04:	0f 93       	push	r16
    5b06:	1f 93       	push	r17
    5b08:	cf 93       	push	r28
    5b0a:	df 93       	push	r29
    5b0c:	e0 91 a1 2f 	lds	r30, 0x2FA1
    5b10:	f0 91 a2 2f 	lds	r31, 0x2FA2
    5b14:	23 81       	ldd	r18, Z+3	; 0x03
    5b16:	21 ff       	sbrs	r18, 1
    5b18:	1b c0       	rjmp	.+54     	; 0x5b50 <puts+0x4c>
    5b1a:	ec 01       	movw	r28, r24
    5b1c:	00 e0       	ldi	r16, 0x00	; 0
    5b1e:	10 e0       	ldi	r17, 0x00	; 0
    5b20:	89 91       	ld	r24, Y+
    5b22:	60 91 a1 2f 	lds	r22, 0x2FA1
    5b26:	70 91 a2 2f 	lds	r23, 0x2FA2
    5b2a:	db 01       	movw	r26, r22
    5b2c:	18 96       	adiw	r26, 0x08	; 8
    5b2e:	ed 91       	ld	r30, X+
    5b30:	fc 91       	ld	r31, X
    5b32:	19 97       	sbiw	r26, 0x09	; 9
    5b34:	88 23       	and	r24, r24
    5b36:	31 f0       	breq	.+12     	; 0x5b44 <puts+0x40>
    5b38:	09 95       	icall
    5b3a:	89 2b       	or	r24, r25
    5b3c:	89 f3       	breq	.-30     	; 0x5b20 <puts+0x1c>
    5b3e:	0f ef       	ldi	r16, 0xFF	; 255
    5b40:	1f ef       	ldi	r17, 0xFF	; 255
    5b42:	ee cf       	rjmp	.-36     	; 0x5b20 <puts+0x1c>
    5b44:	8a e0       	ldi	r24, 0x0A	; 10
    5b46:	09 95       	icall
    5b48:	89 2b       	or	r24, r25
    5b4a:	11 f4       	brne	.+4      	; 0x5b50 <puts+0x4c>
    5b4c:	c8 01       	movw	r24, r16
    5b4e:	02 c0       	rjmp	.+4      	; 0x5b54 <puts+0x50>
    5b50:	8f ef       	ldi	r24, 0xFF	; 255
    5b52:	9f ef       	ldi	r25, 0xFF	; 255
    5b54:	df 91       	pop	r29
    5b56:	cf 91       	pop	r28
    5b58:	1f 91       	pop	r17
    5b5a:	0f 91       	pop	r16
    5b5c:	08 95       	ret

00005b5e <scanf>:
    5b5e:	a0 e0       	ldi	r26, 0x00	; 0
    5b60:	b0 e0       	ldi	r27, 0x00	; 0
    5b62:	e4 eb       	ldi	r30, 0xB4	; 180
    5b64:	fd e2       	ldi	r31, 0x2D	; 45
    5b66:	bf c5       	rjmp	.+2942   	; 0x66e6 <__prologue_saves__+0x20>
    5b68:	fe 01       	movw	r30, r28
    5b6a:	35 96       	adiw	r30, 0x05	; 5
    5b6c:	61 91       	ld	r22, Z+
    5b6e:	71 91       	ld	r23, Z+
    5b70:	af 01       	movw	r20, r30
    5b72:	80 91 9f 2f 	lds	r24, 0x2F9F
    5b76:	90 91 a0 2f 	lds	r25, 0x2FA0
    5b7a:	69 d3       	rcall	.+1746   	; 0x624e <vfscanf>
    5b7c:	e2 e0       	ldi	r30, 0x02	; 2
    5b7e:	cc c5       	rjmp	.+2968   	; 0x6718 <__epilogue_restores__+0x20>

00005b80 <sprintf>:
    5b80:	ae e0       	ldi	r26, 0x0E	; 14
    5b82:	b0 e0       	ldi	r27, 0x00	; 0
    5b84:	e5 ec       	ldi	r30, 0xC5	; 197
    5b86:	fd e2       	ldi	r31, 0x2D	; 45
    5b88:	ac c5       	rjmp	.+2904   	; 0x66e2 <__prologue_saves__+0x1c>
    5b8a:	0d 89       	ldd	r16, Y+21	; 0x15
    5b8c:	1e 89       	ldd	r17, Y+22	; 0x16
    5b8e:	86 e0       	ldi	r24, 0x06	; 6
    5b90:	8c 83       	std	Y+4, r24	; 0x04
    5b92:	09 83       	std	Y+1, r16	; 0x01
    5b94:	1a 83       	std	Y+2, r17	; 0x02
    5b96:	8f ef       	ldi	r24, 0xFF	; 255
    5b98:	9f e7       	ldi	r25, 0x7F	; 127
    5b9a:	8d 83       	std	Y+5, r24	; 0x05
    5b9c:	9e 83       	std	Y+6, r25	; 0x06
    5b9e:	ae 01       	movw	r20, r28
    5ba0:	47 5e       	subi	r20, 0xE7	; 231
    5ba2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ba4:	6f 89       	ldd	r22, Y+23	; 0x17
    5ba6:	78 8d       	ldd	r23, Y+24	; 0x18
    5ba8:	ce 01       	movw	r24, r28
    5baa:	01 96       	adiw	r24, 0x01	; 1
    5bac:	1e d0       	rcall	.+60     	; 0x5bea <vfprintf>
    5bae:	ef 81       	ldd	r30, Y+7	; 0x07
    5bb0:	f8 85       	ldd	r31, Y+8	; 0x08
    5bb2:	e0 0f       	add	r30, r16
    5bb4:	f1 1f       	adc	r31, r17
    5bb6:	10 82       	st	Z, r1
    5bb8:	2e 96       	adiw	r28, 0x0e	; 14
    5bba:	e4 e0       	ldi	r30, 0x04	; 4
    5bbc:	ab c5       	rjmp	.+2902   	; 0x6714 <__epilogue_restores__+0x1c>

00005bbe <sscanf>:
    5bbe:	ae e0       	ldi	r26, 0x0E	; 14
    5bc0:	b0 e0       	ldi	r27, 0x00	; 0
    5bc2:	e4 ee       	ldi	r30, 0xE4	; 228
    5bc4:	fd e2       	ldi	r31, 0x2D	; 45
    5bc6:	8f c5       	rjmp	.+2846   	; 0x66e6 <__prologue_saves__+0x20>
    5bc8:	85 e0       	ldi	r24, 0x05	; 5
    5bca:	8c 83       	std	Y+4, r24	; 0x04
    5bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    5bce:	9c 89       	ldd	r25, Y+20	; 0x14
    5bd0:	89 83       	std	Y+1, r24	; 0x01
    5bd2:	9a 83       	std	Y+2, r25	; 0x02
    5bd4:	ae 01       	movw	r20, r28
    5bd6:	49 5e       	subi	r20, 0xE9	; 233
    5bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    5bda:	6d 89       	ldd	r22, Y+21	; 0x15
    5bdc:	7e 89       	ldd	r23, Y+22	; 0x16
    5bde:	ce 01       	movw	r24, r28
    5be0:	01 96       	adiw	r24, 0x01	; 1
    5be2:	35 d3       	rcall	.+1642   	; 0x624e <vfscanf>
    5be4:	2e 96       	adiw	r28, 0x0e	; 14
    5be6:	e2 e0       	ldi	r30, 0x02	; 2
    5be8:	97 c5       	rjmp	.+2862   	; 0x6718 <__epilogue_restores__+0x20>

00005bea <vfprintf>:
    5bea:	ac e0       	ldi	r26, 0x0C	; 12
    5bec:	b0 e0       	ldi	r27, 0x00	; 0
    5bee:	ea ef       	ldi	r30, 0xFA	; 250
    5bf0:	fd e2       	ldi	r31, 0x2D	; 45
    5bf2:	69 c5       	rjmp	.+2770   	; 0x66c6 <__prologue_saves__>
    5bf4:	7c 01       	movw	r14, r24
    5bf6:	6b 01       	movw	r12, r22
    5bf8:	8a 01       	movw	r16, r20
    5bfa:	fc 01       	movw	r30, r24
    5bfc:	16 82       	std	Z+6, r1	; 0x06
    5bfe:	17 82       	std	Z+7, r1	; 0x07
    5c00:	83 81       	ldd	r24, Z+3	; 0x03
    5c02:	81 ff       	sbrs	r24, 1
    5c04:	b0 c1       	rjmp	.+864    	; 0x5f66 <vfprintf+0x37c>
    5c06:	ce 01       	movw	r24, r28
    5c08:	01 96       	adiw	r24, 0x01	; 1
    5c0a:	4c 01       	movw	r8, r24
    5c0c:	f7 01       	movw	r30, r14
    5c0e:	93 81       	ldd	r25, Z+3	; 0x03
    5c10:	f6 01       	movw	r30, r12
    5c12:	93 fd       	sbrc	r25, 3
    5c14:	85 91       	lpm	r24, Z+
    5c16:	93 ff       	sbrs	r25, 3
    5c18:	81 91       	ld	r24, Z+
    5c1a:	6f 01       	movw	r12, r30
    5c1c:	88 23       	and	r24, r24
    5c1e:	09 f4       	brne	.+2      	; 0x5c22 <vfprintf+0x38>
    5c20:	9e c1       	rjmp	.+828    	; 0x5f5e <vfprintf+0x374>
    5c22:	85 32       	cpi	r24, 0x25	; 37
    5c24:	39 f4       	brne	.+14     	; 0x5c34 <vfprintf+0x4a>
    5c26:	93 fd       	sbrc	r25, 3
    5c28:	85 91       	lpm	r24, Z+
    5c2a:	93 ff       	sbrs	r25, 3
    5c2c:	81 91       	ld	r24, Z+
    5c2e:	6f 01       	movw	r12, r30
    5c30:	85 32       	cpi	r24, 0x25	; 37
    5c32:	21 f4       	brne	.+8      	; 0x5c3c <vfprintf+0x52>
    5c34:	b7 01       	movw	r22, r14
    5c36:	90 e0       	ldi	r25, 0x00	; 0
    5c38:	9a d4       	rcall	.+2356   	; 0x656e <fputc>
    5c3a:	e8 cf       	rjmp	.-48     	; 0x5c0c <vfprintf+0x22>
    5c3c:	51 2c       	mov	r5, r1
    5c3e:	31 2c       	mov	r3, r1
    5c40:	20 e0       	ldi	r18, 0x00	; 0
    5c42:	20 32       	cpi	r18, 0x20	; 32
    5c44:	a0 f4       	brcc	.+40     	; 0x5c6e <vfprintf+0x84>
    5c46:	8b 32       	cpi	r24, 0x2B	; 43
    5c48:	69 f0       	breq	.+26     	; 0x5c64 <vfprintf+0x7a>
    5c4a:	30 f4       	brcc	.+12     	; 0x5c58 <vfprintf+0x6e>
    5c4c:	80 32       	cpi	r24, 0x20	; 32
    5c4e:	59 f0       	breq	.+22     	; 0x5c66 <vfprintf+0x7c>
    5c50:	83 32       	cpi	r24, 0x23	; 35
    5c52:	69 f4       	brne	.+26     	; 0x5c6e <vfprintf+0x84>
    5c54:	20 61       	ori	r18, 0x10	; 16
    5c56:	2c c0       	rjmp	.+88     	; 0x5cb0 <vfprintf+0xc6>
    5c58:	8d 32       	cpi	r24, 0x2D	; 45
    5c5a:	39 f0       	breq	.+14     	; 0x5c6a <vfprintf+0x80>
    5c5c:	80 33       	cpi	r24, 0x30	; 48
    5c5e:	39 f4       	brne	.+14     	; 0x5c6e <vfprintf+0x84>
    5c60:	21 60       	ori	r18, 0x01	; 1
    5c62:	26 c0       	rjmp	.+76     	; 0x5cb0 <vfprintf+0xc6>
    5c64:	22 60       	ori	r18, 0x02	; 2
    5c66:	24 60       	ori	r18, 0x04	; 4
    5c68:	23 c0       	rjmp	.+70     	; 0x5cb0 <vfprintf+0xc6>
    5c6a:	28 60       	ori	r18, 0x08	; 8
    5c6c:	21 c0       	rjmp	.+66     	; 0x5cb0 <vfprintf+0xc6>
    5c6e:	27 fd       	sbrc	r18, 7
    5c70:	27 c0       	rjmp	.+78     	; 0x5cc0 <vfprintf+0xd6>
    5c72:	30 ed       	ldi	r19, 0xD0	; 208
    5c74:	38 0f       	add	r19, r24
    5c76:	3a 30       	cpi	r19, 0x0A	; 10
    5c78:	78 f4       	brcc	.+30     	; 0x5c98 <vfprintf+0xae>
    5c7a:	26 ff       	sbrs	r18, 6
    5c7c:	06 c0       	rjmp	.+12     	; 0x5c8a <vfprintf+0xa0>
    5c7e:	fa e0       	ldi	r31, 0x0A	; 10
    5c80:	5f 9e       	mul	r5, r31
    5c82:	30 0d       	add	r19, r0
    5c84:	11 24       	eor	r1, r1
    5c86:	53 2e       	mov	r5, r19
    5c88:	13 c0       	rjmp	.+38     	; 0x5cb0 <vfprintf+0xc6>
    5c8a:	8a e0       	ldi	r24, 0x0A	; 10
    5c8c:	38 9e       	mul	r3, r24
    5c8e:	30 0d       	add	r19, r0
    5c90:	11 24       	eor	r1, r1
    5c92:	33 2e       	mov	r3, r19
    5c94:	20 62       	ori	r18, 0x20	; 32
    5c96:	0c c0       	rjmp	.+24     	; 0x5cb0 <vfprintf+0xc6>
    5c98:	8e 32       	cpi	r24, 0x2E	; 46
    5c9a:	21 f4       	brne	.+8      	; 0x5ca4 <vfprintf+0xba>
    5c9c:	26 fd       	sbrc	r18, 6
    5c9e:	5f c1       	rjmp	.+702    	; 0x5f5e <vfprintf+0x374>
    5ca0:	20 64       	ori	r18, 0x40	; 64
    5ca2:	06 c0       	rjmp	.+12     	; 0x5cb0 <vfprintf+0xc6>
    5ca4:	8c 36       	cpi	r24, 0x6C	; 108
    5ca6:	11 f4       	brne	.+4      	; 0x5cac <vfprintf+0xc2>
    5ca8:	20 68       	ori	r18, 0x80	; 128
    5caa:	02 c0       	rjmp	.+4      	; 0x5cb0 <vfprintf+0xc6>
    5cac:	88 36       	cpi	r24, 0x68	; 104
    5cae:	41 f4       	brne	.+16     	; 0x5cc0 <vfprintf+0xd6>
    5cb0:	f6 01       	movw	r30, r12
    5cb2:	93 fd       	sbrc	r25, 3
    5cb4:	85 91       	lpm	r24, Z+
    5cb6:	93 ff       	sbrs	r25, 3
    5cb8:	81 91       	ld	r24, Z+
    5cba:	6f 01       	movw	r12, r30
    5cbc:	81 11       	cpse	r24, r1
    5cbe:	c1 cf       	rjmp	.-126    	; 0x5c42 <vfprintf+0x58>
    5cc0:	98 2f       	mov	r25, r24
    5cc2:	9f 7d       	andi	r25, 0xDF	; 223
    5cc4:	95 54       	subi	r25, 0x45	; 69
    5cc6:	93 30       	cpi	r25, 0x03	; 3
    5cc8:	28 f4       	brcc	.+10     	; 0x5cd4 <vfprintf+0xea>
    5cca:	0c 5f       	subi	r16, 0xFC	; 252
    5ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    5cce:	ff e3       	ldi	r31, 0x3F	; 63
    5cd0:	f9 83       	std	Y+1, r31	; 0x01
    5cd2:	0d c0       	rjmp	.+26     	; 0x5cee <vfprintf+0x104>
    5cd4:	83 36       	cpi	r24, 0x63	; 99
    5cd6:	31 f0       	breq	.+12     	; 0x5ce4 <vfprintf+0xfa>
    5cd8:	83 37       	cpi	r24, 0x73	; 115
    5cda:	71 f0       	breq	.+28     	; 0x5cf8 <vfprintf+0x10e>
    5cdc:	83 35       	cpi	r24, 0x53	; 83
    5cde:	09 f0       	breq	.+2      	; 0x5ce2 <vfprintf+0xf8>
    5ce0:	57 c0       	rjmp	.+174    	; 0x5d90 <vfprintf+0x1a6>
    5ce2:	21 c0       	rjmp	.+66     	; 0x5d26 <vfprintf+0x13c>
    5ce4:	f8 01       	movw	r30, r16
    5ce6:	80 81       	ld	r24, Z
    5ce8:	89 83       	std	Y+1, r24	; 0x01
    5cea:	0e 5f       	subi	r16, 0xFE	; 254
    5cec:	1f 4f       	sbci	r17, 0xFF	; 255
    5cee:	44 24       	eor	r4, r4
    5cf0:	43 94       	inc	r4
    5cf2:	51 2c       	mov	r5, r1
    5cf4:	54 01       	movw	r10, r8
    5cf6:	14 c0       	rjmp	.+40     	; 0x5d20 <vfprintf+0x136>
    5cf8:	38 01       	movw	r6, r16
    5cfa:	f2 e0       	ldi	r31, 0x02	; 2
    5cfc:	6f 0e       	add	r6, r31
    5cfe:	71 1c       	adc	r7, r1
    5d00:	f8 01       	movw	r30, r16
    5d02:	a0 80       	ld	r10, Z
    5d04:	b1 80       	ldd	r11, Z+1	; 0x01
    5d06:	26 ff       	sbrs	r18, 6
    5d08:	03 c0       	rjmp	.+6      	; 0x5d10 <vfprintf+0x126>
    5d0a:	65 2d       	mov	r22, r5
    5d0c:	70 e0       	ldi	r23, 0x00	; 0
    5d0e:	02 c0       	rjmp	.+4      	; 0x5d14 <vfprintf+0x12a>
    5d10:	6f ef       	ldi	r22, 0xFF	; 255
    5d12:	7f ef       	ldi	r23, 0xFF	; 255
    5d14:	c5 01       	movw	r24, r10
    5d16:	2c 87       	std	Y+12, r18	; 0x0c
    5d18:	e1 d3       	rcall	.+1986   	; 0x64dc <strnlen>
    5d1a:	2c 01       	movw	r4, r24
    5d1c:	83 01       	movw	r16, r6
    5d1e:	2c 85       	ldd	r18, Y+12	; 0x0c
    5d20:	2f 77       	andi	r18, 0x7F	; 127
    5d22:	22 2e       	mov	r2, r18
    5d24:	16 c0       	rjmp	.+44     	; 0x5d52 <vfprintf+0x168>
    5d26:	38 01       	movw	r6, r16
    5d28:	f2 e0       	ldi	r31, 0x02	; 2
    5d2a:	6f 0e       	add	r6, r31
    5d2c:	71 1c       	adc	r7, r1
    5d2e:	f8 01       	movw	r30, r16
    5d30:	a0 80       	ld	r10, Z
    5d32:	b1 80       	ldd	r11, Z+1	; 0x01
    5d34:	26 ff       	sbrs	r18, 6
    5d36:	03 c0       	rjmp	.+6      	; 0x5d3e <vfprintf+0x154>
    5d38:	65 2d       	mov	r22, r5
    5d3a:	70 e0       	ldi	r23, 0x00	; 0
    5d3c:	02 c0       	rjmp	.+4      	; 0x5d42 <vfprintf+0x158>
    5d3e:	6f ef       	ldi	r22, 0xFF	; 255
    5d40:	7f ef       	ldi	r23, 0xFF	; 255
    5d42:	c5 01       	movw	r24, r10
    5d44:	2c 87       	std	Y+12, r18	; 0x0c
    5d46:	bf d3       	rcall	.+1918   	; 0x64c6 <strnlen_P>
    5d48:	2c 01       	movw	r4, r24
    5d4a:	2c 85       	ldd	r18, Y+12	; 0x0c
    5d4c:	20 68       	ori	r18, 0x80	; 128
    5d4e:	22 2e       	mov	r2, r18
    5d50:	83 01       	movw	r16, r6
    5d52:	23 fc       	sbrc	r2, 3
    5d54:	19 c0       	rjmp	.+50     	; 0x5d88 <vfprintf+0x19e>
    5d56:	83 2d       	mov	r24, r3
    5d58:	90 e0       	ldi	r25, 0x00	; 0
    5d5a:	48 16       	cp	r4, r24
    5d5c:	59 06       	cpc	r5, r25
    5d5e:	a0 f4       	brcc	.+40     	; 0x5d88 <vfprintf+0x19e>
    5d60:	b7 01       	movw	r22, r14
    5d62:	80 e2       	ldi	r24, 0x20	; 32
    5d64:	90 e0       	ldi	r25, 0x00	; 0
    5d66:	03 d4       	rcall	.+2054   	; 0x656e <fputc>
    5d68:	3a 94       	dec	r3
    5d6a:	f5 cf       	rjmp	.-22     	; 0x5d56 <vfprintf+0x16c>
    5d6c:	f5 01       	movw	r30, r10
    5d6e:	27 fc       	sbrc	r2, 7
    5d70:	85 91       	lpm	r24, Z+
    5d72:	27 fe       	sbrs	r2, 7
    5d74:	81 91       	ld	r24, Z+
    5d76:	5f 01       	movw	r10, r30
    5d78:	b7 01       	movw	r22, r14
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	f8 d3       	rcall	.+2032   	; 0x656e <fputc>
    5d7e:	31 10       	cpse	r3, r1
    5d80:	3a 94       	dec	r3
    5d82:	f1 e0       	ldi	r31, 0x01	; 1
    5d84:	4f 1a       	sub	r4, r31
    5d86:	51 08       	sbc	r5, r1
    5d88:	41 14       	cp	r4, r1
    5d8a:	51 04       	cpc	r5, r1
    5d8c:	79 f7       	brne	.-34     	; 0x5d6c <vfprintf+0x182>
    5d8e:	de c0       	rjmp	.+444    	; 0x5f4c <vfprintf+0x362>
    5d90:	84 36       	cpi	r24, 0x64	; 100
    5d92:	11 f0       	breq	.+4      	; 0x5d98 <vfprintf+0x1ae>
    5d94:	89 36       	cpi	r24, 0x69	; 105
    5d96:	31 f5       	brne	.+76     	; 0x5de4 <vfprintf+0x1fa>
    5d98:	f8 01       	movw	r30, r16
    5d9a:	27 ff       	sbrs	r18, 7
    5d9c:	07 c0       	rjmp	.+14     	; 0x5dac <vfprintf+0x1c2>
    5d9e:	60 81       	ld	r22, Z
    5da0:	71 81       	ldd	r23, Z+1	; 0x01
    5da2:	82 81       	ldd	r24, Z+2	; 0x02
    5da4:	93 81       	ldd	r25, Z+3	; 0x03
    5da6:	0c 5f       	subi	r16, 0xFC	; 252
    5da8:	1f 4f       	sbci	r17, 0xFF	; 255
    5daa:	08 c0       	rjmp	.+16     	; 0x5dbc <vfprintf+0x1d2>
    5dac:	60 81       	ld	r22, Z
    5dae:	71 81       	ldd	r23, Z+1	; 0x01
    5db0:	88 27       	eor	r24, r24
    5db2:	77 fd       	sbrc	r23, 7
    5db4:	80 95       	com	r24
    5db6:	98 2f       	mov	r25, r24
    5db8:	0e 5f       	subi	r16, 0xFE	; 254
    5dba:	1f 4f       	sbci	r17, 0xFF	; 255
    5dbc:	2f 76       	andi	r18, 0x6F	; 111
    5dbe:	b2 2e       	mov	r11, r18
    5dc0:	97 ff       	sbrs	r25, 7
    5dc2:	09 c0       	rjmp	.+18     	; 0x5dd6 <vfprintf+0x1ec>
    5dc4:	90 95       	com	r25
    5dc6:	80 95       	com	r24
    5dc8:	70 95       	com	r23
    5dca:	61 95       	neg	r22
    5dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    5dce:	8f 4f       	sbci	r24, 0xFF	; 255
    5dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    5dd2:	20 68       	ori	r18, 0x80	; 128
    5dd4:	b2 2e       	mov	r11, r18
    5dd6:	2a e0       	ldi	r18, 0x0A	; 10
    5dd8:	30 e0       	ldi	r19, 0x00	; 0
    5dda:	a4 01       	movw	r20, r8
    5ddc:	13 d4       	rcall	.+2086   	; 0x6604 <__ultoa_invert>
    5dde:	a8 2e       	mov	r10, r24
    5de0:	a8 18       	sub	r10, r8
    5de2:	43 c0       	rjmp	.+134    	; 0x5e6a <vfprintf+0x280>
    5de4:	85 37       	cpi	r24, 0x75	; 117
    5de6:	29 f4       	brne	.+10     	; 0x5df2 <vfprintf+0x208>
    5de8:	2f 7e       	andi	r18, 0xEF	; 239
    5dea:	b2 2e       	mov	r11, r18
    5dec:	2a e0       	ldi	r18, 0x0A	; 10
    5dee:	30 e0       	ldi	r19, 0x00	; 0
    5df0:	25 c0       	rjmp	.+74     	; 0x5e3c <vfprintf+0x252>
    5df2:	f2 2f       	mov	r31, r18
    5df4:	f9 7f       	andi	r31, 0xF9	; 249
    5df6:	bf 2e       	mov	r11, r31
    5df8:	8f 36       	cpi	r24, 0x6F	; 111
    5dfa:	c1 f0       	breq	.+48     	; 0x5e2c <vfprintf+0x242>
    5dfc:	18 f4       	brcc	.+6      	; 0x5e04 <vfprintf+0x21a>
    5dfe:	88 35       	cpi	r24, 0x58	; 88
    5e00:	79 f0       	breq	.+30     	; 0x5e20 <vfprintf+0x236>
    5e02:	ad c0       	rjmp	.+346    	; 0x5f5e <vfprintf+0x374>
    5e04:	80 37       	cpi	r24, 0x70	; 112
    5e06:	19 f0       	breq	.+6      	; 0x5e0e <vfprintf+0x224>
    5e08:	88 37       	cpi	r24, 0x78	; 120
    5e0a:	21 f0       	breq	.+8      	; 0x5e14 <vfprintf+0x22a>
    5e0c:	a8 c0       	rjmp	.+336    	; 0x5f5e <vfprintf+0x374>
    5e0e:	2f 2f       	mov	r18, r31
    5e10:	20 61       	ori	r18, 0x10	; 16
    5e12:	b2 2e       	mov	r11, r18
    5e14:	b4 fe       	sbrs	r11, 4
    5e16:	0d c0       	rjmp	.+26     	; 0x5e32 <vfprintf+0x248>
    5e18:	8b 2d       	mov	r24, r11
    5e1a:	84 60       	ori	r24, 0x04	; 4
    5e1c:	b8 2e       	mov	r11, r24
    5e1e:	09 c0       	rjmp	.+18     	; 0x5e32 <vfprintf+0x248>
    5e20:	24 ff       	sbrs	r18, 4
    5e22:	0a c0       	rjmp	.+20     	; 0x5e38 <vfprintf+0x24e>
    5e24:	9f 2f       	mov	r25, r31
    5e26:	96 60       	ori	r25, 0x06	; 6
    5e28:	b9 2e       	mov	r11, r25
    5e2a:	06 c0       	rjmp	.+12     	; 0x5e38 <vfprintf+0x24e>
    5e2c:	28 e0       	ldi	r18, 0x08	; 8
    5e2e:	30 e0       	ldi	r19, 0x00	; 0
    5e30:	05 c0       	rjmp	.+10     	; 0x5e3c <vfprintf+0x252>
    5e32:	20 e1       	ldi	r18, 0x10	; 16
    5e34:	30 e0       	ldi	r19, 0x00	; 0
    5e36:	02 c0       	rjmp	.+4      	; 0x5e3c <vfprintf+0x252>
    5e38:	20 e1       	ldi	r18, 0x10	; 16
    5e3a:	32 e0       	ldi	r19, 0x02	; 2
    5e3c:	f8 01       	movw	r30, r16
    5e3e:	b7 fe       	sbrs	r11, 7
    5e40:	07 c0       	rjmp	.+14     	; 0x5e50 <vfprintf+0x266>
    5e42:	60 81       	ld	r22, Z
    5e44:	71 81       	ldd	r23, Z+1	; 0x01
    5e46:	82 81       	ldd	r24, Z+2	; 0x02
    5e48:	93 81       	ldd	r25, Z+3	; 0x03
    5e4a:	0c 5f       	subi	r16, 0xFC	; 252
    5e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    5e4e:	06 c0       	rjmp	.+12     	; 0x5e5c <vfprintf+0x272>
    5e50:	60 81       	ld	r22, Z
    5e52:	71 81       	ldd	r23, Z+1	; 0x01
    5e54:	80 e0       	ldi	r24, 0x00	; 0
    5e56:	90 e0       	ldi	r25, 0x00	; 0
    5e58:	0e 5f       	subi	r16, 0xFE	; 254
    5e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    5e5c:	a4 01       	movw	r20, r8
    5e5e:	d2 d3       	rcall	.+1956   	; 0x6604 <__ultoa_invert>
    5e60:	a8 2e       	mov	r10, r24
    5e62:	a8 18       	sub	r10, r8
    5e64:	fb 2d       	mov	r31, r11
    5e66:	ff 77       	andi	r31, 0x7F	; 127
    5e68:	bf 2e       	mov	r11, r31
    5e6a:	b6 fe       	sbrs	r11, 6
    5e6c:	0b c0       	rjmp	.+22     	; 0x5e84 <vfprintf+0x29a>
    5e6e:	2b 2d       	mov	r18, r11
    5e70:	2e 7f       	andi	r18, 0xFE	; 254
    5e72:	a5 14       	cp	r10, r5
    5e74:	50 f4       	brcc	.+20     	; 0x5e8a <vfprintf+0x2a0>
    5e76:	b4 fe       	sbrs	r11, 4
    5e78:	0a c0       	rjmp	.+20     	; 0x5e8e <vfprintf+0x2a4>
    5e7a:	b2 fc       	sbrc	r11, 2
    5e7c:	08 c0       	rjmp	.+16     	; 0x5e8e <vfprintf+0x2a4>
    5e7e:	2b 2d       	mov	r18, r11
    5e80:	2e 7e       	andi	r18, 0xEE	; 238
    5e82:	05 c0       	rjmp	.+10     	; 0x5e8e <vfprintf+0x2a4>
    5e84:	7a 2c       	mov	r7, r10
    5e86:	2b 2d       	mov	r18, r11
    5e88:	03 c0       	rjmp	.+6      	; 0x5e90 <vfprintf+0x2a6>
    5e8a:	7a 2c       	mov	r7, r10
    5e8c:	01 c0       	rjmp	.+2      	; 0x5e90 <vfprintf+0x2a6>
    5e8e:	75 2c       	mov	r7, r5
    5e90:	24 ff       	sbrs	r18, 4
    5e92:	0d c0       	rjmp	.+26     	; 0x5eae <vfprintf+0x2c4>
    5e94:	fe 01       	movw	r30, r28
    5e96:	ea 0d       	add	r30, r10
    5e98:	f1 1d       	adc	r31, r1
    5e9a:	80 81       	ld	r24, Z
    5e9c:	80 33       	cpi	r24, 0x30	; 48
    5e9e:	11 f4       	brne	.+4      	; 0x5ea4 <vfprintf+0x2ba>
    5ea0:	29 7e       	andi	r18, 0xE9	; 233
    5ea2:	09 c0       	rjmp	.+18     	; 0x5eb6 <vfprintf+0x2cc>
    5ea4:	22 ff       	sbrs	r18, 2
    5ea6:	06 c0       	rjmp	.+12     	; 0x5eb4 <vfprintf+0x2ca>
    5ea8:	73 94       	inc	r7
    5eaa:	73 94       	inc	r7
    5eac:	04 c0       	rjmp	.+8      	; 0x5eb6 <vfprintf+0x2cc>
    5eae:	82 2f       	mov	r24, r18
    5eb0:	86 78       	andi	r24, 0x86	; 134
    5eb2:	09 f0       	breq	.+2      	; 0x5eb6 <vfprintf+0x2cc>
    5eb4:	73 94       	inc	r7
    5eb6:	23 fd       	sbrc	r18, 3
    5eb8:	12 c0       	rjmp	.+36     	; 0x5ede <vfprintf+0x2f4>
    5eba:	20 ff       	sbrs	r18, 0
    5ebc:	06 c0       	rjmp	.+12     	; 0x5eca <vfprintf+0x2e0>
    5ebe:	5a 2c       	mov	r5, r10
    5ec0:	73 14       	cp	r7, r3
    5ec2:	18 f4       	brcc	.+6      	; 0x5eca <vfprintf+0x2e0>
    5ec4:	53 0c       	add	r5, r3
    5ec6:	57 18       	sub	r5, r7
    5ec8:	73 2c       	mov	r7, r3
    5eca:	73 14       	cp	r7, r3
    5ecc:	60 f4       	brcc	.+24     	; 0x5ee6 <vfprintf+0x2fc>
    5ece:	b7 01       	movw	r22, r14
    5ed0:	80 e2       	ldi	r24, 0x20	; 32
    5ed2:	90 e0       	ldi	r25, 0x00	; 0
    5ed4:	2c 87       	std	Y+12, r18	; 0x0c
    5ed6:	4b d3       	rcall	.+1686   	; 0x656e <fputc>
    5ed8:	73 94       	inc	r7
    5eda:	2c 85       	ldd	r18, Y+12	; 0x0c
    5edc:	f6 cf       	rjmp	.-20     	; 0x5eca <vfprintf+0x2e0>
    5ede:	73 14       	cp	r7, r3
    5ee0:	10 f4       	brcc	.+4      	; 0x5ee6 <vfprintf+0x2fc>
    5ee2:	37 18       	sub	r3, r7
    5ee4:	01 c0       	rjmp	.+2      	; 0x5ee8 <vfprintf+0x2fe>
    5ee6:	31 2c       	mov	r3, r1
    5ee8:	24 ff       	sbrs	r18, 4
    5eea:	11 c0       	rjmp	.+34     	; 0x5f0e <vfprintf+0x324>
    5eec:	b7 01       	movw	r22, r14
    5eee:	80 e3       	ldi	r24, 0x30	; 48
    5ef0:	90 e0       	ldi	r25, 0x00	; 0
    5ef2:	2c 87       	std	Y+12, r18	; 0x0c
    5ef4:	3c d3       	rcall	.+1656   	; 0x656e <fputc>
    5ef6:	2c 85       	ldd	r18, Y+12	; 0x0c
    5ef8:	22 ff       	sbrs	r18, 2
    5efa:	16 c0       	rjmp	.+44     	; 0x5f28 <vfprintf+0x33e>
    5efc:	21 ff       	sbrs	r18, 1
    5efe:	03 c0       	rjmp	.+6      	; 0x5f06 <vfprintf+0x31c>
    5f00:	88 e5       	ldi	r24, 0x58	; 88
    5f02:	90 e0       	ldi	r25, 0x00	; 0
    5f04:	02 c0       	rjmp	.+4      	; 0x5f0a <vfprintf+0x320>
    5f06:	88 e7       	ldi	r24, 0x78	; 120
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	b7 01       	movw	r22, r14
    5f0c:	0c c0       	rjmp	.+24     	; 0x5f26 <vfprintf+0x33c>
    5f0e:	82 2f       	mov	r24, r18
    5f10:	86 78       	andi	r24, 0x86	; 134
    5f12:	51 f0       	breq	.+20     	; 0x5f28 <vfprintf+0x33e>
    5f14:	21 fd       	sbrc	r18, 1
    5f16:	02 c0       	rjmp	.+4      	; 0x5f1c <vfprintf+0x332>
    5f18:	80 e2       	ldi	r24, 0x20	; 32
    5f1a:	01 c0       	rjmp	.+2      	; 0x5f1e <vfprintf+0x334>
    5f1c:	8b e2       	ldi	r24, 0x2B	; 43
    5f1e:	27 fd       	sbrc	r18, 7
    5f20:	8d e2       	ldi	r24, 0x2D	; 45
    5f22:	b7 01       	movw	r22, r14
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	23 d3       	rcall	.+1606   	; 0x656e <fputc>
    5f28:	a5 14       	cp	r10, r5
    5f2a:	30 f4       	brcc	.+12     	; 0x5f38 <vfprintf+0x34e>
    5f2c:	b7 01       	movw	r22, r14
    5f2e:	80 e3       	ldi	r24, 0x30	; 48
    5f30:	90 e0       	ldi	r25, 0x00	; 0
    5f32:	1d d3       	rcall	.+1594   	; 0x656e <fputc>
    5f34:	5a 94       	dec	r5
    5f36:	f8 cf       	rjmp	.-16     	; 0x5f28 <vfprintf+0x33e>
    5f38:	aa 94       	dec	r10
    5f3a:	f4 01       	movw	r30, r8
    5f3c:	ea 0d       	add	r30, r10
    5f3e:	f1 1d       	adc	r31, r1
    5f40:	80 81       	ld	r24, Z
    5f42:	b7 01       	movw	r22, r14
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	13 d3       	rcall	.+1574   	; 0x656e <fputc>
    5f48:	a1 10       	cpse	r10, r1
    5f4a:	f6 cf       	rjmp	.-20     	; 0x5f38 <vfprintf+0x34e>
    5f4c:	33 20       	and	r3, r3
    5f4e:	09 f4       	brne	.+2      	; 0x5f52 <vfprintf+0x368>
    5f50:	5d ce       	rjmp	.-838    	; 0x5c0c <vfprintf+0x22>
    5f52:	b7 01       	movw	r22, r14
    5f54:	80 e2       	ldi	r24, 0x20	; 32
    5f56:	90 e0       	ldi	r25, 0x00	; 0
    5f58:	0a d3       	rcall	.+1556   	; 0x656e <fputc>
    5f5a:	3a 94       	dec	r3
    5f5c:	f7 cf       	rjmp	.-18     	; 0x5f4c <vfprintf+0x362>
    5f5e:	f7 01       	movw	r30, r14
    5f60:	86 81       	ldd	r24, Z+6	; 0x06
    5f62:	97 81       	ldd	r25, Z+7	; 0x07
    5f64:	02 c0       	rjmp	.+4      	; 0x5f6a <vfprintf+0x380>
    5f66:	8f ef       	ldi	r24, 0xFF	; 255
    5f68:	9f ef       	ldi	r25, 0xFF	; 255
    5f6a:	2c 96       	adiw	r28, 0x0c	; 12
    5f6c:	e2 e1       	ldi	r30, 0x12	; 18
    5f6e:	c4 c3       	rjmp	.+1928   	; 0x66f8 <__epilogue_restores__>

00005f70 <putval>:
    5f70:	20 fd       	sbrc	r18, 0
    5f72:	09 c0       	rjmp	.+18     	; 0x5f86 <putval+0x16>
    5f74:	fc 01       	movw	r30, r24
    5f76:	23 fd       	sbrc	r18, 3
    5f78:	05 c0       	rjmp	.+10     	; 0x5f84 <putval+0x14>
    5f7a:	22 ff       	sbrs	r18, 2
    5f7c:	02 c0       	rjmp	.+4      	; 0x5f82 <putval+0x12>
    5f7e:	73 83       	std	Z+3, r23	; 0x03
    5f80:	62 83       	std	Z+2, r22	; 0x02
    5f82:	51 83       	std	Z+1, r21	; 0x01
    5f84:	40 83       	st	Z, r20
    5f86:	08 95       	ret

00005f88 <mulacc>:
    5f88:	44 fd       	sbrc	r20, 4
    5f8a:	10 c0       	rjmp	.+32     	; 0x5fac <mulacc+0x24>
    5f8c:	46 fd       	sbrc	r20, 6
    5f8e:	10 c0       	rjmp	.+32     	; 0x5fb0 <mulacc+0x28>
    5f90:	db 01       	movw	r26, r22
    5f92:	fc 01       	movw	r30, r24
    5f94:	aa 0f       	add	r26, r26
    5f96:	bb 1f       	adc	r27, r27
    5f98:	ee 1f       	adc	r30, r30
    5f9a:	ff 1f       	adc	r31, r31
    5f9c:	10 94       	com	r1
    5f9e:	d1 f7       	brne	.-12     	; 0x5f94 <mulacc+0xc>
    5fa0:	6a 0f       	add	r22, r26
    5fa2:	7b 1f       	adc	r23, r27
    5fa4:	8e 1f       	adc	r24, r30
    5fa6:	9f 1f       	adc	r25, r31
    5fa8:	31 e0       	ldi	r19, 0x01	; 1
    5faa:	03 c0       	rjmp	.+6      	; 0x5fb2 <mulacc+0x2a>
    5fac:	33 e0       	ldi	r19, 0x03	; 3
    5fae:	01 c0       	rjmp	.+2      	; 0x5fb2 <mulacc+0x2a>
    5fb0:	34 e0       	ldi	r19, 0x04	; 4
    5fb2:	66 0f       	add	r22, r22
    5fb4:	77 1f       	adc	r23, r23
    5fb6:	88 1f       	adc	r24, r24
    5fb8:	99 1f       	adc	r25, r25
    5fba:	31 50       	subi	r19, 0x01	; 1
    5fbc:	d1 f7       	brne	.-12     	; 0x5fb2 <mulacc+0x2a>
    5fbe:	62 0f       	add	r22, r18
    5fc0:	71 1d       	adc	r23, r1
    5fc2:	81 1d       	adc	r24, r1
    5fc4:	91 1d       	adc	r25, r1
    5fc6:	08 95       	ret

00005fc8 <skip_spaces>:
    5fc8:	0f 93       	push	r16
    5fca:	1f 93       	push	r17
    5fcc:	cf 93       	push	r28
    5fce:	df 93       	push	r29
    5fd0:	8c 01       	movw	r16, r24
    5fd2:	c8 01       	movw	r24, r16
    5fd4:	8e d2       	rcall	.+1308   	; 0x64f2 <fgetc>
    5fd6:	ec 01       	movw	r28, r24
    5fd8:	97 fd       	sbrc	r25, 7
    5fda:	06 c0       	rjmp	.+12     	; 0x5fe8 <skip_spaces+0x20>
    5fdc:	61 d2       	rcall	.+1218   	; 0x64a0 <isspace>
    5fde:	89 2b       	or	r24, r25
    5fe0:	c1 f7       	brne	.-16     	; 0x5fd2 <skip_spaces+0xa>
    5fe2:	b8 01       	movw	r22, r16
    5fe4:	ce 01       	movw	r24, r28
    5fe6:	f5 d2       	rcall	.+1514   	; 0x65d2 <ungetc>
    5fe8:	ce 01       	movw	r24, r28
    5fea:	df 91       	pop	r29
    5fec:	cf 91       	pop	r28
    5fee:	1f 91       	pop	r17
    5ff0:	0f 91       	pop	r16
    5ff2:	08 95       	ret

00005ff4 <conv_int>:
    5ff4:	8f 92       	push	r8
    5ff6:	9f 92       	push	r9
    5ff8:	af 92       	push	r10
    5ffa:	cf 92       	push	r12
    5ffc:	df 92       	push	r13
    5ffe:	ef 92       	push	r14
    6000:	ff 92       	push	r15
    6002:	0f 93       	push	r16
    6004:	1f 93       	push	r17
    6006:	cf 93       	push	r28
    6008:	df 93       	push	r29
    600a:	ec 01       	movw	r28, r24
    600c:	a6 2e       	mov	r10, r22
    600e:	4a 01       	movw	r8, r20
    6010:	02 2f       	mov	r16, r18
    6012:	6f d2       	rcall	.+1246   	; 0x64f2 <fgetc>
    6014:	ac 01       	movw	r20, r24
    6016:	55 27       	eor	r21, r21
    6018:	4b 32       	cpi	r20, 0x2B	; 43
    601a:	51 05       	cpc	r21, r1
    601c:	21 f0       	breq	.+8      	; 0x6026 <conv_int+0x32>
    601e:	4d 32       	cpi	r20, 0x2D	; 45
    6020:	51 05       	cpc	r21, r1
    6022:	49 f4       	brne	.+18     	; 0x6036 <conv_int+0x42>
    6024:	00 68       	ori	r16, 0x80	; 128
    6026:	aa 94       	dec	r10
    6028:	11 f4       	brne	.+4      	; 0x602e <conv_int+0x3a>
    602a:	80 e0       	ldi	r24, 0x00	; 0
    602c:	60 c0       	rjmp	.+192    	; 0x60ee <conv_int+0xfa>
    602e:	ce 01       	movw	r24, r28
    6030:	60 d2       	rcall	.+1216   	; 0x64f2 <fgetc>
    6032:	97 fd       	sbrc	r25, 7
    6034:	fa cf       	rjmp	.-12     	; 0x602a <conv_int+0x36>
    6036:	10 2f       	mov	r17, r16
    6038:	1d 7f       	andi	r17, 0xFD	; 253
    603a:	30 2f       	mov	r19, r16
    603c:	30 73       	andi	r19, 0x30	; 48
    603e:	f1 f4       	brne	.+60     	; 0x607c <conv_int+0x88>
    6040:	80 33       	cpi	r24, 0x30	; 48
    6042:	e1 f4       	brne	.+56     	; 0x607c <conv_int+0x88>
    6044:	ff 24       	eor	r15, r15
    6046:	fa 94       	dec	r15
    6048:	fa 0c       	add	r15, r10
    604a:	09 f4       	brne	.+2      	; 0x604e <conv_int+0x5a>
    604c:	3d c0       	rjmp	.+122    	; 0x60c8 <conv_int+0xd4>
    604e:	ce 01       	movw	r24, r28
    6050:	50 d2       	rcall	.+1184   	; 0x64f2 <fgetc>
    6052:	97 fd       	sbrc	r25, 7
    6054:	39 c0       	rjmp	.+114    	; 0x60c8 <conv_int+0xd4>
    6056:	38 2f       	mov	r19, r24
    6058:	3f 7d       	andi	r19, 0xDF	; 223
    605a:	38 35       	cpi	r19, 0x58	; 88
    605c:	49 f4       	brne	.+18     	; 0x6070 <conv_int+0x7c>
    605e:	12 64       	ori	r17, 0x42	; 66
    6060:	aa 94       	dec	r10
    6062:	aa 94       	dec	r10
    6064:	89 f1       	breq	.+98     	; 0x60c8 <conv_int+0xd4>
    6066:	ce 01       	movw	r24, r28
    6068:	44 d2       	rcall	.+1160   	; 0x64f2 <fgetc>
    606a:	97 ff       	sbrs	r25, 7
    606c:	07 c0       	rjmp	.+14     	; 0x607c <conv_int+0x88>
    606e:	2c c0       	rjmp	.+88     	; 0x60c8 <conv_int+0xd4>
    6070:	06 ff       	sbrs	r16, 6
    6072:	02 c0       	rjmp	.+4      	; 0x6078 <conv_int+0x84>
    6074:	12 60       	ori	r17, 0x02	; 2
    6076:	01 c0       	rjmp	.+2      	; 0x607a <conv_int+0x86>
    6078:	12 61       	ori	r17, 0x12	; 18
    607a:	af 2c       	mov	r10, r15
    607c:	c1 2c       	mov	r12, r1
    607e:	d1 2c       	mov	r13, r1
    6080:	76 01       	movw	r14, r12
    6082:	20 ed       	ldi	r18, 0xD0	; 208
    6084:	28 0f       	add	r18, r24
    6086:	28 30       	cpi	r18, 0x08	; 8
    6088:	78 f0       	brcs	.+30     	; 0x60a8 <conv_int+0xb4>
    608a:	14 ff       	sbrs	r17, 4
    608c:	03 c0       	rjmp	.+6      	; 0x6094 <conv_int+0xa0>
    608e:	be 01       	movw	r22, r28
    6090:	a0 d2       	rcall	.+1344   	; 0x65d2 <ungetc>
    6092:	17 c0       	rjmp	.+46     	; 0x60c2 <conv_int+0xce>
    6094:	2a 30       	cpi	r18, 0x0A	; 10
    6096:	40 f0       	brcs	.+16     	; 0x60a8 <conv_int+0xb4>
    6098:	16 ff       	sbrs	r17, 6
    609a:	f9 cf       	rjmp	.-14     	; 0x608e <conv_int+0x9a>
    609c:	2f 7d       	andi	r18, 0xDF	; 223
    609e:	3f ee       	ldi	r19, 0xEF	; 239
    60a0:	32 0f       	add	r19, r18
    60a2:	36 30       	cpi	r19, 0x06	; 6
    60a4:	a0 f7       	brcc	.-24     	; 0x608e <conv_int+0x9a>
    60a6:	27 50       	subi	r18, 0x07	; 7
    60a8:	41 2f       	mov	r20, r17
    60aa:	c7 01       	movw	r24, r14
    60ac:	b6 01       	movw	r22, r12
    60ae:	6c df       	rcall	.-296    	; 0x5f88 <mulacc>
    60b0:	6b 01       	movw	r12, r22
    60b2:	7c 01       	movw	r14, r24
    60b4:	12 60       	ori	r17, 0x02	; 2
    60b6:	aa 94       	dec	r10
    60b8:	51 f0       	breq	.+20     	; 0x60ce <conv_int+0xda>
    60ba:	ce 01       	movw	r24, r28
    60bc:	1a d2       	rcall	.+1076   	; 0x64f2 <fgetc>
    60be:	97 ff       	sbrs	r25, 7
    60c0:	e0 cf       	rjmp	.-64     	; 0x6082 <conv_int+0x8e>
    60c2:	11 fd       	sbrc	r17, 1
    60c4:	04 c0       	rjmp	.+8      	; 0x60ce <conv_int+0xda>
    60c6:	b1 cf       	rjmp	.-158    	; 0x602a <conv_int+0x36>
    60c8:	c1 2c       	mov	r12, r1
    60ca:	d1 2c       	mov	r13, r1
    60cc:	76 01       	movw	r14, r12
    60ce:	17 ff       	sbrs	r17, 7
    60d0:	08 c0       	rjmp	.+16     	; 0x60e2 <conv_int+0xee>
    60d2:	f0 94       	com	r15
    60d4:	e0 94       	com	r14
    60d6:	d0 94       	com	r13
    60d8:	c0 94       	com	r12
    60da:	c1 1c       	adc	r12, r1
    60dc:	d1 1c       	adc	r13, r1
    60de:	e1 1c       	adc	r14, r1
    60e0:	f1 1c       	adc	r15, r1
    60e2:	21 2f       	mov	r18, r17
    60e4:	b7 01       	movw	r22, r14
    60e6:	a6 01       	movw	r20, r12
    60e8:	c4 01       	movw	r24, r8
    60ea:	42 df       	rcall	.-380    	; 0x5f70 <putval>
    60ec:	81 e0       	ldi	r24, 0x01	; 1
    60ee:	df 91       	pop	r29
    60f0:	cf 91       	pop	r28
    60f2:	1f 91       	pop	r17
    60f4:	0f 91       	pop	r16
    60f6:	ff 90       	pop	r15
    60f8:	ef 90       	pop	r14
    60fa:	df 90       	pop	r13
    60fc:	cf 90       	pop	r12
    60fe:	af 90       	pop	r10
    6100:	9f 90       	pop	r9
    6102:	8f 90       	pop	r8
    6104:	08 95       	ret

00006106 <conv_brk>:
    6106:	a1 e2       	ldi	r26, 0x21	; 33
    6108:	b0 e0       	ldi	r27, 0x00	; 0
    610a:	e8 e8       	ldi	r30, 0x88	; 136
    610c:	f0 e3       	ldi	r31, 0x30	; 48
    610e:	e0 c2       	rjmp	.+1472   	; 0x66d0 <__prologue_saves__+0xa>
    6110:	5c 01       	movw	r10, r24
    6112:	7a 01       	movw	r14, r20
    6114:	8e 01       	movw	r16, r28
    6116:	0f 5f       	subi	r16, 0xFF	; 255
    6118:	1f 4f       	sbci	r17, 0xFF	; 255
    611a:	68 01       	movw	r12, r16
    611c:	80 e2       	ldi	r24, 0x20	; 32
    611e:	d8 01       	movw	r26, r16
    6120:	1d 92       	st	X+, r1
    6122:	8a 95       	dec	r24
    6124:	e9 f7       	brne	.-6      	; 0x6120 <conv_brk+0x1a>
    6126:	f5 01       	movw	r30, r10
    6128:	73 80       	ldd	r7, Z+3	; 0x03
    612a:	40 e0       	ldi	r20, 0x00	; 0
    612c:	50 e0       	ldi	r21, 0x00	; 0
    612e:	81 2c       	mov	r8, r1
    6130:	b0 e0       	ldi	r27, 0x00	; 0
    6132:	91 2c       	mov	r9, r1
    6134:	81 e0       	ldi	r24, 0x01	; 1
    6136:	90 e0       	ldi	r25, 0x00	; 0
    6138:	f9 01       	movw	r30, r18
    613a:	73 fc       	sbrc	r7, 3
    613c:	a5 91       	lpm	r26, Z+
    613e:	73 fe       	sbrs	r7, 3
    6140:	a1 91       	ld	r26, Z+
    6142:	8f 01       	movw	r16, r30
    6144:	7a 2f       	mov	r23, r26
    6146:	9f 01       	movw	r18, r30
    6148:	a1 11       	cpse	r26, r1
    614a:	03 c0       	rjmp	.+6      	; 0x6152 <conv_brk+0x4c>
    614c:	80 e0       	ldi	r24, 0x00	; 0
    614e:	90 e0       	ldi	r25, 0x00	; 0
    6150:	7b c0       	rjmp	.+246    	; 0x6248 <conv_brk+0x142>
    6152:	ae 35       	cpi	r26, 0x5E	; 94
    6154:	19 f4       	brne	.+6      	; 0x615c <conv_brk+0x56>
    6156:	41 15       	cp	r20, r1
    6158:	51 05       	cpc	r21, r1
    615a:	59 f1       	breq	.+86     	; 0x61b2 <conv_brk+0xac>
    615c:	e9 2d       	mov	r30, r9
    615e:	f0 e0       	ldi	r31, 0x00	; 0
    6160:	e4 17       	cp	r30, r20
    6162:	f5 07       	cpc	r31, r21
    6164:	3c f4       	brge	.+14     	; 0x6174 <conv_brk+0x6e>
    6166:	ad 35       	cpi	r26, 0x5D	; 93
    6168:	69 f1       	breq	.+90     	; 0x61c4 <conv_brk+0xbe>
    616a:	ad 32       	cpi	r26, 0x2D	; 45
    616c:	19 f4       	brne	.+6      	; 0x6174 <conv_brk+0x6e>
    616e:	bb 23       	and	r27, r27
    6170:	19 f1       	breq	.+70     	; 0x61b8 <conv_brk+0xb2>
    6172:	03 c0       	rjmp	.+6      	; 0x617a <conv_brk+0x74>
    6174:	b1 11       	cpse	r27, r1
    6176:	01 c0       	rjmp	.+2      	; 0x617a <conv_brk+0x74>
    6178:	8a 2e       	mov	r8, r26
    617a:	e7 2f       	mov	r30, r23
    617c:	e6 95       	lsr	r30
    617e:	e6 95       	lsr	r30
    6180:	e6 95       	lsr	r30
    6182:	86 01       	movw	r16, r12
    6184:	0e 0f       	add	r16, r30
    6186:	11 1d       	adc	r17, r1
    6188:	f8 01       	movw	r30, r16
    618a:	a7 2f       	mov	r26, r23
    618c:	a7 70       	andi	r26, 0x07	; 7
    618e:	8c 01       	movw	r16, r24
    6190:	02 c0       	rjmp	.+4      	; 0x6196 <conv_brk+0x90>
    6192:	00 0f       	add	r16, r16
    6194:	11 1f       	adc	r17, r17
    6196:	aa 95       	dec	r26
    6198:	e2 f7       	brpl	.-8      	; 0x6192 <conv_brk+0x8c>
    619a:	d8 01       	movw	r26, r16
    619c:	b0 81       	ld	r27, Z
    619e:	ba 2b       	or	r27, r26
    61a0:	b0 83       	st	Z, r27
    61a2:	78 15       	cp	r23, r8
    61a4:	59 f0       	breq	.+22     	; 0x61bc <conv_brk+0xb6>
    61a6:	78 15       	cp	r23, r8
    61a8:	10 f4       	brcc	.+4      	; 0x61ae <conv_brk+0xa8>
    61aa:	7f 5f       	subi	r23, 0xFF	; 255
    61ac:	e6 cf       	rjmp	.-52     	; 0x617a <conv_brk+0x74>
    61ae:	71 50       	subi	r23, 0x01	; 1
    61b0:	e4 cf       	rjmp	.-56     	; 0x617a <conv_brk+0x74>
    61b2:	99 24       	eor	r9, r9
    61b4:	93 94       	inc	r9
    61b6:	03 c0       	rjmp	.+6      	; 0x61be <conv_brk+0xb8>
    61b8:	b1 e0       	ldi	r27, 0x01	; 1
    61ba:	01 c0       	rjmp	.+2      	; 0x61be <conv_brk+0xb8>
    61bc:	b0 e0       	ldi	r27, 0x00	; 0
    61be:	4f 5f       	subi	r20, 0xFF	; 255
    61c0:	5f 4f       	sbci	r21, 0xFF	; 255
    61c2:	ba cf       	rjmp	.-140    	; 0x6138 <conv_brk+0x32>
    61c4:	bb 23       	and	r27, r27
    61c6:	19 f0       	breq	.+6      	; 0x61ce <conv_brk+0xc8>
    61c8:	8e 81       	ldd	r24, Y+6	; 0x06
    61ca:	80 62       	ori	r24, 0x20	; 32
    61cc:	8e 83       	std	Y+6, r24	; 0x06
    61ce:	91 10       	cpse	r9, r1
    61d0:	03 c0       	rjmp	.+6      	; 0x61d8 <conv_brk+0xd2>
    61d2:	99 24       	eor	r9, r9
    61d4:	93 94       	inc	r9
    61d6:	15 c0       	rjmp	.+42     	; 0x6202 <conv_brk+0xfc>
    61d8:	f6 01       	movw	r30, r12
    61da:	ce 01       	movw	r24, r28
    61dc:	81 96       	adiw	r24, 0x21	; 33
    61de:	20 81       	ld	r18, Z
    61e0:	20 95       	com	r18
    61e2:	21 93       	st	Z+, r18
    61e4:	e8 17       	cp	r30, r24
    61e6:	f9 07       	cpc	r31, r25
    61e8:	d1 f7       	brne	.-12     	; 0x61de <conv_brk+0xd8>
    61ea:	f3 cf       	rjmp	.-26     	; 0x61d2 <conv_brk+0xcc>
    61ec:	e1 14       	cp	r14, r1
    61ee:	f1 04       	cpc	r15, r1
    61f0:	29 f0       	breq	.+10     	; 0x61fc <conv_brk+0xf6>
    61f2:	d7 01       	movw	r26, r14
    61f4:	8c 93       	st	X, r24
    61f6:	f7 01       	movw	r30, r14
    61f8:	31 96       	adiw	r30, 0x01	; 1
    61fa:	7f 01       	movw	r14, r30
    61fc:	61 50       	subi	r22, 0x01	; 1
    61fe:	f1 f0       	breq	.+60     	; 0x623c <conv_brk+0x136>
    6200:	91 2c       	mov	r9, r1
    6202:	c5 01       	movw	r24, r10
    6204:	69 a3       	std	Y+33, r22	; 0x21
    6206:	75 d1       	rcall	.+746    	; 0x64f2 <fgetc>
    6208:	69 a1       	ldd	r22, Y+33	; 0x21
    620a:	97 fd       	sbrc	r25, 7
    620c:	15 c0       	rjmp	.+42     	; 0x6238 <conv_brk+0x132>
    620e:	28 2f       	mov	r18, r24
    6210:	26 95       	lsr	r18
    6212:	26 95       	lsr	r18
    6214:	26 95       	lsr	r18
    6216:	f6 01       	movw	r30, r12
    6218:	e2 0f       	add	r30, r18
    621a:	f1 1d       	adc	r31, r1
    621c:	20 81       	ld	r18, Z
    621e:	30 e0       	ldi	r19, 0x00	; 0
    6220:	ac 01       	movw	r20, r24
    6222:	47 70       	andi	r20, 0x07	; 7
    6224:	55 27       	eor	r21, r21
    6226:	02 c0       	rjmp	.+4      	; 0x622c <conv_brk+0x126>
    6228:	35 95       	asr	r19
    622a:	27 95       	ror	r18
    622c:	4a 95       	dec	r20
    622e:	e2 f7       	brpl	.-8      	; 0x6228 <conv_brk+0x122>
    6230:	20 fd       	sbrc	r18, 0
    6232:	dc cf       	rjmp	.-72     	; 0x61ec <conv_brk+0xe6>
    6234:	b5 01       	movw	r22, r10
    6236:	cd d1       	rcall	.+922    	; 0x65d2 <ungetc>
    6238:	91 10       	cpse	r9, r1
    623a:	88 cf       	rjmp	.-240    	; 0x614c <conv_brk+0x46>
    623c:	e1 14       	cp	r14, r1
    623e:	f1 04       	cpc	r15, r1
    6240:	11 f0       	breq	.+4      	; 0x6246 <conv_brk+0x140>
    6242:	d7 01       	movw	r26, r14
    6244:	1c 92       	st	X, r1
    6246:	c8 01       	movw	r24, r16
    6248:	a1 96       	adiw	r28, 0x21	; 33
    624a:	ed e0       	ldi	r30, 0x0D	; 13
    624c:	5a c2       	rjmp	.+1204   	; 0x6702 <__epilogue_restores__+0xa>

0000624e <vfscanf>:
    624e:	4f 92       	push	r4
    6250:	5f 92       	push	r5
    6252:	7f 92       	push	r7
    6254:	8f 92       	push	r8
    6256:	9f 92       	push	r9
    6258:	af 92       	push	r10
    625a:	bf 92       	push	r11
    625c:	cf 92       	push	r12
    625e:	df 92       	push	r13
    6260:	ef 92       	push	r14
    6262:	ff 92       	push	r15
    6264:	0f 93       	push	r16
    6266:	1f 93       	push	r17
    6268:	cf 93       	push	r28
    626a:	df 93       	push	r29
    626c:	1f 92       	push	r1
    626e:	cd b7       	in	r28, 0x3d	; 61
    6270:	de b7       	in	r29, 0x3e	; 62
    6272:	8c 01       	movw	r16, r24
    6274:	2b 01       	movw	r4, r22
    6276:	7a 01       	movw	r14, r20
    6278:	fc 01       	movw	r30, r24
    627a:	16 82       	std	Z+6, r1	; 0x06
    627c:	17 82       	std	Z+7, r1	; 0x07
    627e:	a1 2c       	mov	r10, r1
    6280:	f8 01       	movw	r30, r16
    6282:	d3 80       	ldd	r13, Z+3	; 0x03
    6284:	f2 01       	movw	r30, r4
    6286:	d3 fc       	sbrc	r13, 3
    6288:	85 91       	lpm	r24, Z+
    628a:	d3 fe       	sbrs	r13, 3
    628c:	81 91       	ld	r24, Z+
    628e:	38 2f       	mov	r19, r24
    6290:	2f 01       	movw	r4, r30
    6292:	88 23       	and	r24, r24
    6294:	09 f4       	brne	.+2      	; 0x6298 <vfscanf+0x4a>
    6296:	ee c0       	rjmp	.+476    	; 0x6474 <vfscanf+0x226>
    6298:	90 e0       	ldi	r25, 0x00	; 0
    629a:	39 83       	std	Y+1, r19	; 0x01
    629c:	01 d1       	rcall	.+514    	; 0x64a0 <isspace>
    629e:	39 81       	ldd	r19, Y+1	; 0x01
    62a0:	89 2b       	or	r24, r25
    62a2:	19 f0       	breq	.+6      	; 0x62aa <vfscanf+0x5c>
    62a4:	c8 01       	movw	r24, r16
    62a6:	90 de       	rcall	.-736    	; 0x5fc8 <skip_spaces>
    62a8:	eb cf       	rjmp	.-42     	; 0x6280 <vfscanf+0x32>
    62aa:	35 32       	cpi	r19, 0x25	; 37
    62ac:	41 f4       	brne	.+16     	; 0x62be <vfscanf+0x70>
    62ae:	f2 01       	movw	r30, r4
    62b0:	d3 fc       	sbrc	r13, 3
    62b2:	35 91       	lpm	r19, Z+
    62b4:	d3 fe       	sbrs	r13, 3
    62b6:	31 91       	ld	r19, Z+
    62b8:	2f 01       	movw	r4, r30
    62ba:	35 32       	cpi	r19, 0x25	; 37
    62bc:	59 f4       	brne	.+22     	; 0x62d4 <vfscanf+0x86>
    62be:	c8 01       	movw	r24, r16
    62c0:	39 83       	std	Y+1, r19	; 0x01
    62c2:	17 d1       	rcall	.+558    	; 0x64f2 <fgetc>
    62c4:	39 81       	ldd	r19, Y+1	; 0x01
    62c6:	97 fd       	sbrc	r25, 7
    62c8:	d3 c0       	rjmp	.+422    	; 0x6470 <vfscanf+0x222>
    62ca:	38 17       	cp	r19, r24
    62cc:	c9 f2       	breq	.-78     	; 0x6280 <vfscanf+0x32>
    62ce:	b8 01       	movw	r22, r16
    62d0:	80 d1       	rcall	.+768    	; 0x65d2 <ungetc>
    62d2:	d0 c0       	rjmp	.+416    	; 0x6474 <vfscanf+0x226>
    62d4:	3a 32       	cpi	r19, 0x2A	; 42
    62d6:	41 f4       	brne	.+16     	; 0x62e8 <vfscanf+0x9a>
    62d8:	d3 fc       	sbrc	r13, 3
    62da:	35 91       	lpm	r19, Z+
    62dc:	d3 fe       	sbrs	r13, 3
    62de:	31 91       	ld	r19, Z+
    62e0:	2f 01       	movw	r4, r30
    62e2:	bb 24       	eor	r11, r11
    62e4:	b3 94       	inc	r11
    62e6:	01 c0       	rjmp	.+2      	; 0x62ea <vfscanf+0x9c>
    62e8:	b1 2c       	mov	r11, r1
    62ea:	71 2c       	mov	r7, r1
    62ec:	20 ed       	ldi	r18, 0xD0	; 208
    62ee:	23 0f       	add	r18, r19
    62f0:	2a 30       	cpi	r18, 0x0A	; 10
    62f2:	88 f4       	brcc	.+34     	; 0x6316 <vfscanf+0xc8>
    62f4:	fb 2d       	mov	r31, r11
    62f6:	f2 60       	ori	r31, 0x02	; 2
    62f8:	bf 2e       	mov	r11, r31
    62fa:	67 2d       	mov	r22, r7
    62fc:	70 e0       	ldi	r23, 0x00	; 0
    62fe:	80 e0       	ldi	r24, 0x00	; 0
    6300:	90 e0       	ldi	r25, 0x00	; 0
    6302:	40 e2       	ldi	r20, 0x20	; 32
    6304:	41 de       	rcall	.-894    	; 0x5f88 <mulacc>
    6306:	76 2e       	mov	r7, r22
    6308:	f2 01       	movw	r30, r4
    630a:	d3 fc       	sbrc	r13, 3
    630c:	35 91       	lpm	r19, Z+
    630e:	d3 fe       	sbrs	r13, 3
    6310:	31 91       	ld	r19, Z+
    6312:	2f 01       	movw	r4, r30
    6314:	eb cf       	rjmp	.-42     	; 0x62ec <vfscanf+0x9e>
    6316:	b1 fe       	sbrs	r11, 1
    6318:	03 c0       	rjmp	.+6      	; 0x6320 <vfscanf+0xd2>
    631a:	71 10       	cpse	r7, r1
    631c:	03 c0       	rjmp	.+6      	; 0x6324 <vfscanf+0xd6>
    631e:	aa c0       	rjmp	.+340    	; 0x6474 <vfscanf+0x226>
    6320:	77 24       	eor	r7, r7
    6322:	7a 94       	dec	r7
    6324:	38 36       	cpi	r19, 0x68	; 104
    6326:	19 f0       	breq	.+6      	; 0x632e <vfscanf+0xe0>
    6328:	3c 36       	cpi	r19, 0x6C	; 108
    632a:	61 f0       	breq	.+24     	; 0x6344 <vfscanf+0xf6>
    632c:	14 c0       	rjmp	.+40     	; 0x6356 <vfscanf+0x108>
    632e:	f2 01       	movw	r30, r4
    6330:	d3 fc       	sbrc	r13, 3
    6332:	35 91       	lpm	r19, Z+
    6334:	d3 fe       	sbrs	r13, 3
    6336:	31 91       	ld	r19, Z+
    6338:	2f 01       	movw	r4, r30
    633a:	38 36       	cpi	r19, 0x68	; 104
    633c:	61 f4       	brne	.+24     	; 0x6356 <vfscanf+0x108>
    633e:	fb 2d       	mov	r31, r11
    6340:	f8 60       	ori	r31, 0x08	; 8
    6342:	bf 2e       	mov	r11, r31
    6344:	8b 2d       	mov	r24, r11
    6346:	84 60       	ori	r24, 0x04	; 4
    6348:	b8 2e       	mov	r11, r24
    634a:	f2 01       	movw	r30, r4
    634c:	d3 fc       	sbrc	r13, 3
    634e:	35 91       	lpm	r19, Z+
    6350:	d3 fe       	sbrs	r13, 3
    6352:	31 91       	ld	r19, Z+
    6354:	2f 01       	movw	r4, r30
    6356:	33 23       	and	r19, r19
    6358:	09 f4       	brne	.+2      	; 0x635c <vfscanf+0x10e>
    635a:	8c c0       	rjmp	.+280    	; 0x6474 <vfscanf+0x226>
    635c:	63 2f       	mov	r22, r19
    635e:	70 e0       	ldi	r23, 0x00	; 0
    6360:	88 e3       	ldi	r24, 0x38	; 56
    6362:	92 e0       	ldi	r25, 0x02	; 2
    6364:	39 83       	std	Y+1, r19	; 0x01
    6366:	a4 d0       	rcall	.+328    	; 0x64b0 <strchr_P>
    6368:	39 81       	ldd	r19, Y+1	; 0x01
    636a:	89 2b       	or	r24, r25
    636c:	09 f4       	brne	.+2      	; 0x6370 <vfscanf+0x122>
    636e:	82 c0       	rjmp	.+260    	; 0x6474 <vfscanf+0x226>
    6370:	b0 fc       	sbrc	r11, 0
    6372:	07 c0       	rjmp	.+14     	; 0x6382 <vfscanf+0x134>
    6374:	f7 01       	movw	r30, r14
    6376:	c0 80       	ld	r12, Z
    6378:	d1 80       	ldd	r13, Z+1	; 0x01
    637a:	c7 01       	movw	r24, r14
    637c:	02 96       	adiw	r24, 0x02	; 2
    637e:	7c 01       	movw	r14, r24
    6380:	02 c0       	rjmp	.+4      	; 0x6386 <vfscanf+0x138>
    6382:	c1 2c       	mov	r12, r1
    6384:	d1 2c       	mov	r13, r1
    6386:	3e 36       	cpi	r19, 0x6E	; 110
    6388:	49 f4       	brne	.+18     	; 0x639c <vfscanf+0x14e>
    638a:	f8 01       	movw	r30, r16
    638c:	46 81       	ldd	r20, Z+6	; 0x06
    638e:	57 81       	ldd	r21, Z+7	; 0x07
    6390:	60 e0       	ldi	r22, 0x00	; 0
    6392:	70 e0       	ldi	r23, 0x00	; 0
    6394:	2b 2d       	mov	r18, r11
    6396:	c6 01       	movw	r24, r12
    6398:	eb dd       	rcall	.-1066   	; 0x5f70 <putval>
    639a:	72 cf       	rjmp	.-284    	; 0x6280 <vfscanf+0x32>
    639c:	33 36       	cpi	r19, 0x63	; 99
    639e:	99 f4       	brne	.+38     	; 0x63c6 <vfscanf+0x178>
    63a0:	b1 fc       	sbrc	r11, 1
    63a2:	02 c0       	rjmp	.+4      	; 0x63a8 <vfscanf+0x15a>
    63a4:	77 24       	eor	r7, r7
    63a6:	73 94       	inc	r7
    63a8:	c8 01       	movw	r24, r16
    63aa:	a3 d0       	rcall	.+326    	; 0x64f2 <fgetc>
    63ac:	97 fd       	sbrc	r25, 7
    63ae:	60 c0       	rjmp	.+192    	; 0x6470 <vfscanf+0x222>
    63b0:	c1 14       	cp	r12, r1
    63b2:	d1 04       	cpc	r13, r1
    63b4:	29 f0       	breq	.+10     	; 0x63c0 <vfscanf+0x172>
    63b6:	f6 01       	movw	r30, r12
    63b8:	80 83       	st	Z, r24
    63ba:	c6 01       	movw	r24, r12
    63bc:	01 96       	adiw	r24, 0x01	; 1
    63be:	6c 01       	movw	r12, r24
    63c0:	7a 94       	dec	r7
    63c2:	91 f7       	brne	.-28     	; 0x63a8 <vfscanf+0x15a>
    63c4:	51 c0       	rjmp	.+162    	; 0x6468 <vfscanf+0x21a>
    63c6:	3b 35       	cpi	r19, 0x5B	; 91
    63c8:	51 f4       	brne	.+20     	; 0x63de <vfscanf+0x190>
    63ca:	92 01       	movw	r18, r4
    63cc:	a6 01       	movw	r20, r12
    63ce:	67 2d       	mov	r22, r7
    63d0:	c8 01       	movw	r24, r16
    63d2:	99 de       	rcall	.-718    	; 0x6106 <conv_brk>
    63d4:	2c 01       	movw	r4, r24
    63d6:	00 97       	sbiw	r24, 0x00	; 0
    63d8:	09 f0       	breq	.+2      	; 0x63dc <vfscanf+0x18e>
    63da:	46 c0       	rjmp	.+140    	; 0x6468 <vfscanf+0x21a>
    63dc:	40 c0       	rjmp	.+128    	; 0x645e <vfscanf+0x210>
    63de:	c8 01       	movw	r24, r16
    63e0:	39 83       	std	Y+1, r19	; 0x01
    63e2:	f2 dd       	rcall	.-1052   	; 0x5fc8 <skip_spaces>
    63e4:	39 81       	ldd	r19, Y+1	; 0x01
    63e6:	97 fd       	sbrc	r25, 7
    63e8:	43 c0       	rjmp	.+134    	; 0x6470 <vfscanf+0x222>
    63ea:	3f 36       	cpi	r19, 0x6F	; 111
    63ec:	51 f1       	breq	.+84     	; 0x6442 <vfscanf+0x1f4>
    63ee:	28 f4       	brcc	.+10     	; 0x63fa <vfscanf+0x1ac>
    63f0:	34 36       	cpi	r19, 0x64	; 100
    63f2:	19 f1       	breq	.+70     	; 0x643a <vfscanf+0x1ec>
    63f4:	39 36       	cpi	r19, 0x69	; 105
    63f6:	61 f1       	breq	.+88     	; 0x6450 <vfscanf+0x202>
    63f8:	28 c0       	rjmp	.+80     	; 0x644a <vfscanf+0x1fc>
    63fa:	33 37       	cpi	r19, 0x73	; 115
    63fc:	69 f0       	breq	.+26     	; 0x6418 <vfscanf+0x1ca>
    63fe:	35 37       	cpi	r19, 0x75	; 117
    6400:	e1 f0       	breq	.+56     	; 0x643a <vfscanf+0x1ec>
    6402:	23 c0       	rjmp	.+70     	; 0x644a <vfscanf+0x1fc>
    6404:	c1 14       	cp	r12, r1
    6406:	d1 04       	cpc	r13, r1
    6408:	29 f0       	breq	.+10     	; 0x6414 <vfscanf+0x1c6>
    640a:	f6 01       	movw	r30, r12
    640c:	80 82       	st	Z, r8
    640e:	c6 01       	movw	r24, r12
    6410:	01 96       	adiw	r24, 0x01	; 1
    6412:	6c 01       	movw	r12, r24
    6414:	7a 94       	dec	r7
    6416:	59 f0       	breq	.+22     	; 0x642e <vfscanf+0x1e0>
    6418:	c8 01       	movw	r24, r16
    641a:	6b d0       	rcall	.+214    	; 0x64f2 <fgetc>
    641c:	4c 01       	movw	r8, r24
    641e:	97 fd       	sbrc	r25, 7
    6420:	06 c0       	rjmp	.+12     	; 0x642e <vfscanf+0x1e0>
    6422:	3e d0       	rcall	.+124    	; 0x64a0 <isspace>
    6424:	89 2b       	or	r24, r25
    6426:	71 f3       	breq	.-36     	; 0x6404 <vfscanf+0x1b6>
    6428:	b8 01       	movw	r22, r16
    642a:	c4 01       	movw	r24, r8
    642c:	d2 d0       	rcall	.+420    	; 0x65d2 <ungetc>
    642e:	c1 14       	cp	r12, r1
    6430:	d1 04       	cpc	r13, r1
    6432:	d1 f0       	breq	.+52     	; 0x6468 <vfscanf+0x21a>
    6434:	f6 01       	movw	r30, r12
    6436:	10 82       	st	Z, r1
    6438:	17 c0       	rjmp	.+46     	; 0x6468 <vfscanf+0x21a>
    643a:	fb 2d       	mov	r31, r11
    643c:	f0 62       	ori	r31, 0x20	; 32
    643e:	bf 2e       	mov	r11, r31
    6440:	07 c0       	rjmp	.+14     	; 0x6450 <vfscanf+0x202>
    6442:	8b 2d       	mov	r24, r11
    6444:	80 61       	ori	r24, 0x10	; 16
    6446:	b8 2e       	mov	r11, r24
    6448:	03 c0       	rjmp	.+6      	; 0x6450 <vfscanf+0x202>
    644a:	9b 2d       	mov	r25, r11
    644c:	90 64       	ori	r25, 0x40	; 64
    644e:	b9 2e       	mov	r11, r25
    6450:	2b 2d       	mov	r18, r11
    6452:	a6 01       	movw	r20, r12
    6454:	67 2d       	mov	r22, r7
    6456:	c8 01       	movw	r24, r16
    6458:	cd dd       	rcall	.-1126   	; 0x5ff4 <conv_int>
    645a:	81 11       	cpse	r24, r1
    645c:	05 c0       	rjmp	.+10     	; 0x6468 <vfscanf+0x21a>
    645e:	f8 01       	movw	r30, r16
    6460:	83 81       	ldd	r24, Z+3	; 0x03
    6462:	80 73       	andi	r24, 0x30	; 48
    6464:	29 f4       	brne	.+10     	; 0x6470 <vfscanf+0x222>
    6466:	06 c0       	rjmp	.+12     	; 0x6474 <vfscanf+0x226>
    6468:	b0 fc       	sbrc	r11, 0
    646a:	0a cf       	rjmp	.-492    	; 0x6280 <vfscanf+0x32>
    646c:	a3 94       	inc	r10
    646e:	08 cf       	rjmp	.-496    	; 0x6280 <vfscanf+0x32>
    6470:	aa 20       	and	r10, r10
    6472:	19 f0       	breq	.+6      	; 0x647a <vfscanf+0x22c>
    6474:	8a 2d       	mov	r24, r10
    6476:	90 e0       	ldi	r25, 0x00	; 0
    6478:	02 c0       	rjmp	.+4      	; 0x647e <vfscanf+0x230>
    647a:	8f ef       	ldi	r24, 0xFF	; 255
    647c:	9f ef       	ldi	r25, 0xFF	; 255
    647e:	0f 90       	pop	r0
    6480:	df 91       	pop	r29
    6482:	cf 91       	pop	r28
    6484:	1f 91       	pop	r17
    6486:	0f 91       	pop	r16
    6488:	ff 90       	pop	r15
    648a:	ef 90       	pop	r14
    648c:	df 90       	pop	r13
    648e:	cf 90       	pop	r12
    6490:	bf 90       	pop	r11
    6492:	af 90       	pop	r10
    6494:	9f 90       	pop	r9
    6496:	8f 90       	pop	r8
    6498:	7f 90       	pop	r7
    649a:	5f 90       	pop	r5
    649c:	4f 90       	pop	r4
    649e:	08 95       	ret

000064a0 <isspace>:
    64a0:	91 11       	cpse	r25, r1
    64a2:	0e c1       	rjmp	.+540    	; 0x66c0 <__ctype_isfalse>
    64a4:	80 32       	cpi	r24, 0x20	; 32
    64a6:	19 f0       	breq	.+6      	; 0x64ae <isspace+0xe>
    64a8:	89 50       	subi	r24, 0x09	; 9
    64aa:	85 50       	subi	r24, 0x05	; 5
    64ac:	d0 f7       	brcc	.-12     	; 0x64a2 <isspace+0x2>
    64ae:	08 95       	ret

000064b0 <strchr_P>:
    64b0:	fc 01       	movw	r30, r24
    64b2:	05 90       	lpm	r0, Z+
    64b4:	06 16       	cp	r0, r22
    64b6:	21 f0       	breq	.+8      	; 0x64c0 <strchr_P+0x10>
    64b8:	00 20       	and	r0, r0
    64ba:	d9 f7       	brne	.-10     	; 0x64b2 <strchr_P+0x2>
    64bc:	c0 01       	movw	r24, r0
    64be:	08 95       	ret
    64c0:	31 97       	sbiw	r30, 0x01	; 1
    64c2:	cf 01       	movw	r24, r30
    64c4:	08 95       	ret

000064c6 <strnlen_P>:
    64c6:	fc 01       	movw	r30, r24
    64c8:	05 90       	lpm	r0, Z+
    64ca:	61 50       	subi	r22, 0x01	; 1
    64cc:	70 40       	sbci	r23, 0x00	; 0
    64ce:	01 10       	cpse	r0, r1
    64d0:	d8 f7       	brcc	.-10     	; 0x64c8 <strnlen_P+0x2>
    64d2:	80 95       	com	r24
    64d4:	90 95       	com	r25
    64d6:	8e 0f       	add	r24, r30
    64d8:	9f 1f       	adc	r25, r31
    64da:	08 95       	ret

000064dc <strnlen>:
    64dc:	fc 01       	movw	r30, r24
    64de:	61 50       	subi	r22, 0x01	; 1
    64e0:	70 40       	sbci	r23, 0x00	; 0
    64e2:	01 90       	ld	r0, Z+
    64e4:	01 10       	cpse	r0, r1
    64e6:	d8 f7       	brcc	.-10     	; 0x64de <strnlen+0x2>
    64e8:	80 95       	com	r24
    64ea:	90 95       	com	r25
    64ec:	8e 0f       	add	r24, r30
    64ee:	9f 1f       	adc	r25, r31
    64f0:	08 95       	ret

000064f2 <fgetc>:
    64f2:	cf 93       	push	r28
    64f4:	df 93       	push	r29
    64f6:	ec 01       	movw	r28, r24
    64f8:	2b 81       	ldd	r18, Y+3	; 0x03
    64fa:	20 ff       	sbrs	r18, 0
    64fc:	33 c0       	rjmp	.+102    	; 0x6564 <fgetc+0x72>
    64fe:	26 ff       	sbrs	r18, 6
    6500:	0a c0       	rjmp	.+20     	; 0x6516 <fgetc+0x24>
    6502:	2f 7b       	andi	r18, 0xBF	; 191
    6504:	2b 83       	std	Y+3, r18	; 0x03
    6506:	8e 81       	ldd	r24, Y+6	; 0x06
    6508:	9f 81       	ldd	r25, Y+7	; 0x07
    650a:	01 96       	adiw	r24, 0x01	; 1
    650c:	8e 83       	std	Y+6, r24	; 0x06
    650e:	9f 83       	std	Y+7, r25	; 0x07
    6510:	8a 81       	ldd	r24, Y+2	; 0x02
    6512:	90 e0       	ldi	r25, 0x00	; 0
    6514:	29 c0       	rjmp	.+82     	; 0x6568 <fgetc+0x76>
    6516:	22 ff       	sbrs	r18, 2
    6518:	0f c0       	rjmp	.+30     	; 0x6538 <fgetc+0x46>
    651a:	e8 81       	ld	r30, Y
    651c:	f9 81       	ldd	r31, Y+1	; 0x01
    651e:	80 81       	ld	r24, Z
    6520:	99 27       	eor	r25, r25
    6522:	87 fd       	sbrc	r24, 7
    6524:	90 95       	com	r25
    6526:	00 97       	sbiw	r24, 0x00	; 0
    6528:	19 f4       	brne	.+6      	; 0x6530 <fgetc+0x3e>
    652a:	20 62       	ori	r18, 0x20	; 32
    652c:	2b 83       	std	Y+3, r18	; 0x03
    652e:	1a c0       	rjmp	.+52     	; 0x6564 <fgetc+0x72>
    6530:	31 96       	adiw	r30, 0x01	; 1
    6532:	e8 83       	st	Y, r30
    6534:	f9 83       	std	Y+1, r31	; 0x01
    6536:	0e c0       	rjmp	.+28     	; 0x6554 <fgetc+0x62>
    6538:	ea 85       	ldd	r30, Y+10	; 0x0a
    653a:	fb 85       	ldd	r31, Y+11	; 0x0b
    653c:	09 95       	icall
    653e:	97 ff       	sbrs	r25, 7
    6540:	09 c0       	rjmp	.+18     	; 0x6554 <fgetc+0x62>
    6542:	2b 81       	ldd	r18, Y+3	; 0x03
    6544:	01 96       	adiw	r24, 0x01	; 1
    6546:	11 f4       	brne	.+4      	; 0x654c <fgetc+0x5a>
    6548:	80 e1       	ldi	r24, 0x10	; 16
    654a:	01 c0       	rjmp	.+2      	; 0x654e <fgetc+0x5c>
    654c:	80 e2       	ldi	r24, 0x20	; 32
    654e:	82 2b       	or	r24, r18
    6550:	8b 83       	std	Y+3, r24	; 0x03
    6552:	08 c0       	rjmp	.+16     	; 0x6564 <fgetc+0x72>
    6554:	2e 81       	ldd	r18, Y+6	; 0x06
    6556:	3f 81       	ldd	r19, Y+7	; 0x07
    6558:	2f 5f       	subi	r18, 0xFF	; 255
    655a:	3f 4f       	sbci	r19, 0xFF	; 255
    655c:	2e 83       	std	Y+6, r18	; 0x06
    655e:	3f 83       	std	Y+7, r19	; 0x07
    6560:	99 27       	eor	r25, r25
    6562:	02 c0       	rjmp	.+4      	; 0x6568 <fgetc+0x76>
    6564:	8f ef       	ldi	r24, 0xFF	; 255
    6566:	9f ef       	ldi	r25, 0xFF	; 255
    6568:	df 91       	pop	r29
    656a:	cf 91       	pop	r28
    656c:	08 95       	ret

0000656e <fputc>:
    656e:	0f 93       	push	r16
    6570:	1f 93       	push	r17
    6572:	cf 93       	push	r28
    6574:	df 93       	push	r29
    6576:	18 2f       	mov	r17, r24
    6578:	09 2f       	mov	r16, r25
    657a:	eb 01       	movw	r28, r22
    657c:	8b 81       	ldd	r24, Y+3	; 0x03
    657e:	81 fd       	sbrc	r24, 1
    6580:	03 c0       	rjmp	.+6      	; 0x6588 <fputc+0x1a>
    6582:	8f ef       	ldi	r24, 0xFF	; 255
    6584:	9f ef       	ldi	r25, 0xFF	; 255
    6586:	20 c0       	rjmp	.+64     	; 0x65c8 <fputc+0x5a>
    6588:	82 ff       	sbrs	r24, 2
    658a:	10 c0       	rjmp	.+32     	; 0x65ac <fputc+0x3e>
    658c:	4e 81       	ldd	r20, Y+6	; 0x06
    658e:	5f 81       	ldd	r21, Y+7	; 0x07
    6590:	2c 81       	ldd	r18, Y+4	; 0x04
    6592:	3d 81       	ldd	r19, Y+5	; 0x05
    6594:	42 17       	cp	r20, r18
    6596:	53 07       	cpc	r21, r19
    6598:	7c f4       	brge	.+30     	; 0x65b8 <fputc+0x4a>
    659a:	e8 81       	ld	r30, Y
    659c:	f9 81       	ldd	r31, Y+1	; 0x01
    659e:	9f 01       	movw	r18, r30
    65a0:	2f 5f       	subi	r18, 0xFF	; 255
    65a2:	3f 4f       	sbci	r19, 0xFF	; 255
    65a4:	28 83       	st	Y, r18
    65a6:	39 83       	std	Y+1, r19	; 0x01
    65a8:	10 83       	st	Z, r17
    65aa:	06 c0       	rjmp	.+12     	; 0x65b8 <fputc+0x4a>
    65ac:	e8 85       	ldd	r30, Y+8	; 0x08
    65ae:	f9 85       	ldd	r31, Y+9	; 0x09
    65b0:	81 2f       	mov	r24, r17
    65b2:	09 95       	icall
    65b4:	89 2b       	or	r24, r25
    65b6:	29 f7       	brne	.-54     	; 0x6582 <fputc+0x14>
    65b8:	2e 81       	ldd	r18, Y+6	; 0x06
    65ba:	3f 81       	ldd	r19, Y+7	; 0x07
    65bc:	2f 5f       	subi	r18, 0xFF	; 255
    65be:	3f 4f       	sbci	r19, 0xFF	; 255
    65c0:	2e 83       	std	Y+6, r18	; 0x06
    65c2:	3f 83       	std	Y+7, r19	; 0x07
    65c4:	81 2f       	mov	r24, r17
    65c6:	90 2f       	mov	r25, r16
    65c8:	df 91       	pop	r29
    65ca:	cf 91       	pop	r28
    65cc:	1f 91       	pop	r17
    65ce:	0f 91       	pop	r16
    65d0:	08 95       	ret

000065d2 <ungetc>:
    65d2:	fb 01       	movw	r30, r22
    65d4:	23 81       	ldd	r18, Z+3	; 0x03
    65d6:	20 ff       	sbrs	r18, 0
    65d8:	12 c0       	rjmp	.+36     	; 0x65fe <ungetc+0x2c>
    65da:	26 fd       	sbrc	r18, 6
    65dc:	10 c0       	rjmp	.+32     	; 0x65fe <ungetc+0x2c>
    65de:	8f 3f       	cpi	r24, 0xFF	; 255
    65e0:	3f ef       	ldi	r19, 0xFF	; 255
    65e2:	93 07       	cpc	r25, r19
    65e4:	61 f0       	breq	.+24     	; 0x65fe <ungetc+0x2c>
    65e6:	82 83       	std	Z+2, r24	; 0x02
    65e8:	2f 7d       	andi	r18, 0xDF	; 223
    65ea:	20 64       	ori	r18, 0x40	; 64
    65ec:	23 83       	std	Z+3, r18	; 0x03
    65ee:	26 81       	ldd	r18, Z+6	; 0x06
    65f0:	37 81       	ldd	r19, Z+7	; 0x07
    65f2:	21 50       	subi	r18, 0x01	; 1
    65f4:	31 09       	sbc	r19, r1
    65f6:	26 83       	std	Z+6, r18	; 0x06
    65f8:	37 83       	std	Z+7, r19	; 0x07
    65fa:	99 27       	eor	r25, r25
    65fc:	08 95       	ret
    65fe:	8f ef       	ldi	r24, 0xFF	; 255
    6600:	9f ef       	ldi	r25, 0xFF	; 255
    6602:	08 95       	ret

00006604 <__ultoa_invert>:
    6604:	fa 01       	movw	r30, r20
    6606:	aa 27       	eor	r26, r26
    6608:	28 30       	cpi	r18, 0x08	; 8
    660a:	51 f1       	breq	.+84     	; 0x6660 <__ultoa_invert+0x5c>
    660c:	20 31       	cpi	r18, 0x10	; 16
    660e:	81 f1       	breq	.+96     	; 0x6670 <__ultoa_invert+0x6c>
    6610:	e8 94       	clt
    6612:	6f 93       	push	r22
    6614:	6e 7f       	andi	r22, 0xFE	; 254
    6616:	6e 5f       	subi	r22, 0xFE	; 254
    6618:	7f 4f       	sbci	r23, 0xFF	; 255
    661a:	8f 4f       	sbci	r24, 0xFF	; 255
    661c:	9f 4f       	sbci	r25, 0xFF	; 255
    661e:	af 4f       	sbci	r26, 0xFF	; 255
    6620:	b1 e0       	ldi	r27, 0x01	; 1
    6622:	3e d0       	rcall	.+124    	; 0x66a0 <__ultoa_invert+0x9c>
    6624:	b4 e0       	ldi	r27, 0x04	; 4
    6626:	3c d0       	rcall	.+120    	; 0x66a0 <__ultoa_invert+0x9c>
    6628:	67 0f       	add	r22, r23
    662a:	78 1f       	adc	r23, r24
    662c:	89 1f       	adc	r24, r25
    662e:	9a 1f       	adc	r25, r26
    6630:	a1 1d       	adc	r26, r1
    6632:	68 0f       	add	r22, r24
    6634:	79 1f       	adc	r23, r25
    6636:	8a 1f       	adc	r24, r26
    6638:	91 1d       	adc	r25, r1
    663a:	a1 1d       	adc	r26, r1
    663c:	6a 0f       	add	r22, r26
    663e:	71 1d       	adc	r23, r1
    6640:	81 1d       	adc	r24, r1
    6642:	91 1d       	adc	r25, r1
    6644:	a1 1d       	adc	r26, r1
    6646:	20 d0       	rcall	.+64     	; 0x6688 <__ultoa_invert+0x84>
    6648:	09 f4       	brne	.+2      	; 0x664c <__ultoa_invert+0x48>
    664a:	68 94       	set
    664c:	3f 91       	pop	r19
    664e:	2a e0       	ldi	r18, 0x0A	; 10
    6650:	26 9f       	mul	r18, r22
    6652:	11 24       	eor	r1, r1
    6654:	30 19       	sub	r19, r0
    6656:	30 5d       	subi	r19, 0xD0	; 208
    6658:	31 93       	st	Z+, r19
    665a:	de f6       	brtc	.-74     	; 0x6612 <__ultoa_invert+0xe>
    665c:	cf 01       	movw	r24, r30
    665e:	08 95       	ret
    6660:	46 2f       	mov	r20, r22
    6662:	47 70       	andi	r20, 0x07	; 7
    6664:	40 5d       	subi	r20, 0xD0	; 208
    6666:	41 93       	st	Z+, r20
    6668:	b3 e0       	ldi	r27, 0x03	; 3
    666a:	0f d0       	rcall	.+30     	; 0x668a <__ultoa_invert+0x86>
    666c:	c9 f7       	brne	.-14     	; 0x6660 <__ultoa_invert+0x5c>
    666e:	f6 cf       	rjmp	.-20     	; 0x665c <__ultoa_invert+0x58>
    6670:	46 2f       	mov	r20, r22
    6672:	4f 70       	andi	r20, 0x0F	; 15
    6674:	40 5d       	subi	r20, 0xD0	; 208
    6676:	4a 33       	cpi	r20, 0x3A	; 58
    6678:	18 f0       	brcs	.+6      	; 0x6680 <__ultoa_invert+0x7c>
    667a:	49 5d       	subi	r20, 0xD9	; 217
    667c:	31 fd       	sbrc	r19, 1
    667e:	40 52       	subi	r20, 0x20	; 32
    6680:	41 93       	st	Z+, r20
    6682:	02 d0       	rcall	.+4      	; 0x6688 <__ultoa_invert+0x84>
    6684:	a9 f7       	brne	.-22     	; 0x6670 <__ultoa_invert+0x6c>
    6686:	ea cf       	rjmp	.-44     	; 0x665c <__ultoa_invert+0x58>
    6688:	b4 e0       	ldi	r27, 0x04	; 4
    668a:	a6 95       	lsr	r26
    668c:	97 95       	ror	r25
    668e:	87 95       	ror	r24
    6690:	77 95       	ror	r23
    6692:	67 95       	ror	r22
    6694:	ba 95       	dec	r27
    6696:	c9 f7       	brne	.-14     	; 0x668a <__ultoa_invert+0x86>
    6698:	00 97       	sbiw	r24, 0x00	; 0
    669a:	61 05       	cpc	r22, r1
    669c:	71 05       	cpc	r23, r1
    669e:	08 95       	ret
    66a0:	9b 01       	movw	r18, r22
    66a2:	ac 01       	movw	r20, r24
    66a4:	0a 2e       	mov	r0, r26
    66a6:	06 94       	lsr	r0
    66a8:	57 95       	ror	r21
    66aa:	47 95       	ror	r20
    66ac:	37 95       	ror	r19
    66ae:	27 95       	ror	r18
    66b0:	ba 95       	dec	r27
    66b2:	c9 f7       	brne	.-14     	; 0x66a6 <__ultoa_invert+0xa2>
    66b4:	62 0f       	add	r22, r18
    66b6:	73 1f       	adc	r23, r19
    66b8:	84 1f       	adc	r24, r20
    66ba:	95 1f       	adc	r25, r21
    66bc:	a0 1d       	adc	r26, r0
    66be:	08 95       	ret

000066c0 <__ctype_isfalse>:
    66c0:	99 27       	eor	r25, r25
    66c2:	88 27       	eor	r24, r24

000066c4 <__ctype_istrue>:
    66c4:	08 95       	ret

000066c6 <__prologue_saves__>:
    66c6:	2f 92       	push	r2
    66c8:	3f 92       	push	r3
    66ca:	4f 92       	push	r4
    66cc:	5f 92       	push	r5
    66ce:	6f 92       	push	r6
    66d0:	7f 92       	push	r7
    66d2:	8f 92       	push	r8
    66d4:	9f 92       	push	r9
    66d6:	af 92       	push	r10
    66d8:	bf 92       	push	r11
    66da:	cf 92       	push	r12
    66dc:	df 92       	push	r13
    66de:	ef 92       	push	r14
    66e0:	ff 92       	push	r15
    66e2:	0f 93       	push	r16
    66e4:	1f 93       	push	r17
    66e6:	cf 93       	push	r28
    66e8:	df 93       	push	r29
    66ea:	cd b7       	in	r28, 0x3d	; 61
    66ec:	de b7       	in	r29, 0x3e	; 62
    66ee:	ca 1b       	sub	r28, r26
    66f0:	db 0b       	sbc	r29, r27
    66f2:	cd bf       	out	0x3d, r28	; 61
    66f4:	de bf       	out	0x3e, r29	; 62
    66f6:	09 94       	ijmp

000066f8 <__epilogue_restores__>:
    66f8:	2a 88       	ldd	r2, Y+18	; 0x12
    66fa:	39 88       	ldd	r3, Y+17	; 0x11
    66fc:	48 88       	ldd	r4, Y+16	; 0x10
    66fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    6700:	6e 84       	ldd	r6, Y+14	; 0x0e
    6702:	7d 84       	ldd	r7, Y+13	; 0x0d
    6704:	8c 84       	ldd	r8, Y+12	; 0x0c
    6706:	9b 84       	ldd	r9, Y+11	; 0x0b
    6708:	aa 84       	ldd	r10, Y+10	; 0x0a
    670a:	b9 84       	ldd	r11, Y+9	; 0x09
    670c:	c8 84       	ldd	r12, Y+8	; 0x08
    670e:	df 80       	ldd	r13, Y+7	; 0x07
    6710:	ee 80       	ldd	r14, Y+6	; 0x06
    6712:	fd 80       	ldd	r15, Y+5	; 0x05
    6714:	0c 81       	ldd	r16, Y+4	; 0x04
    6716:	1b 81       	ldd	r17, Y+3	; 0x03
    6718:	aa 81       	ldd	r26, Y+2	; 0x02
    671a:	b9 81       	ldd	r27, Y+1	; 0x01
    671c:	ce 0f       	add	r28, r30
    671e:	d1 1d       	adc	r29, r1
    6720:	cd bf       	out	0x3d, r28	; 61
    6722:	de bf       	out	0x3e, r29	; 62
    6724:	ed 01       	movw	r28, r26
    6726:	08 95       	ret

00006728 <_exit>:
    6728:	f8 94       	cli

0000672a <__stop_program>:
    672a:	ff cf       	rjmp	.-2      	; 0x672a <__stop_program>
