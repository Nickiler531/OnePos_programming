
OnePos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000035a  00802000  000046b6  0000474a  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000339  0080235a  0080235a  00004aa6  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004aa4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000920  00000000  00000000  00004b00  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001342b  00000000  00000000  00005420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002d8d  00000000  00000000  0001884b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000d3ab  00000000  00000000  0001b5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001c74  00000000  00000000  00028984  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00037568  00000000  00000000  0002a5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000095f1  00000000  00000000  00061b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000888  00000000  00000000  0006b158  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000f0cb  00000000  00000000  0006b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c1       	rjmp	.+550    	; 0x228 <__ctors_end>
       2:	00 00       	nop
       4:	2e c1       	rjmp	.+604    	; 0x262 <__bad_interrupt>
       6:	00 00       	nop
       8:	2c c1       	rjmp	.+600    	; 0x262 <__bad_interrupt>
       a:	00 00       	nop
       c:	2a c1       	rjmp	.+596    	; 0x262 <__bad_interrupt>
       e:	00 00       	nop
      10:	28 c1       	rjmp	.+592    	; 0x262 <__bad_interrupt>
      12:	00 00       	nop
      14:	26 c1       	rjmp	.+588    	; 0x262 <__bad_interrupt>
      16:	00 00       	nop
      18:	24 c1       	rjmp	.+584    	; 0x262 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	22 c1       	rjmp	.+580    	; 0x262 <__bad_interrupt>
      1e:	00 00       	nop
      20:	20 c1       	rjmp	.+576    	; 0x262 <__bad_interrupt>
      22:	00 00       	nop
      24:	1e c1       	rjmp	.+572    	; 0x262 <__bad_interrupt>
      26:	00 00       	nop
      28:	1c c1       	rjmp	.+568    	; 0x262 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	1a c1       	rjmp	.+564    	; 0x262 <__bad_interrupt>
      2e:	00 00       	nop
      30:	18 c1       	rjmp	.+560    	; 0x262 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_13>
      38:	14 c1       	rjmp	.+552    	; 0x262 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	12 c1       	rjmp	.+548    	; 0x262 <__bad_interrupt>
      3e:	00 00       	nop
      40:	10 c1       	rjmp	.+544    	; 0x262 <__bad_interrupt>
      42:	00 00       	nop
      44:	0e c1       	rjmp	.+540    	; 0x262 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c c1       	rjmp	.+536    	; 0x262 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0a c1       	rjmp	.+532    	; 0x262 <__bad_interrupt>
      4e:	00 00       	nop
      50:	08 c1       	rjmp	.+528    	; 0x262 <__bad_interrupt>
      52:	00 00       	nop
      54:	06 c1       	rjmp	.+524    	; 0x262 <__bad_interrupt>
      56:	00 00       	nop
      58:	04 c1       	rjmp	.+520    	; 0x262 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	02 c1       	rjmp	.+516    	; 0x262 <__bad_interrupt>
      5e:	00 00       	nop
      60:	00 c1       	rjmp	.+512    	; 0x262 <__bad_interrupt>
      62:	00 00       	nop
      64:	fe c0       	rjmp	.+508    	; 0x262 <__bad_interrupt>
      66:	00 00       	nop
      68:	fc c0       	rjmp	.+504    	; 0x262 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fa c0       	rjmp	.+500    	; 0x262 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f8 c0       	rjmp	.+496    	; 0x262 <__bad_interrupt>
      72:	00 00       	nop
      74:	f6 c0       	rjmp	.+492    	; 0x262 <__bad_interrupt>
      76:	00 00       	nop
      78:	f4 c0       	rjmp	.+488    	; 0x262 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f2 c0       	rjmp	.+484    	; 0x262 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f0 c0       	rjmp	.+480    	; 0x262 <__bad_interrupt>
      82:	00 00       	nop
      84:	ee c0       	rjmp	.+476    	; 0x262 <__bad_interrupt>
      86:	00 00       	nop
      88:	ec c0       	rjmp	.+472    	; 0x262 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ea c0       	rjmp	.+468    	; 0x262 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e8 c0       	rjmp	.+464    	; 0x262 <__bad_interrupt>
      92:	00 00       	nop
      94:	e6 c0       	rjmp	.+460    	; 0x262 <__bad_interrupt>
      96:	00 00       	nop
      98:	e4 c0       	rjmp	.+456    	; 0x262 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e2 c0       	rjmp	.+452    	; 0x262 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e0 c0       	rjmp	.+448    	; 0x262 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	de c0       	rjmp	.+444    	; 0x262 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	dc c0       	rjmp	.+440    	; 0x262 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	da c0       	rjmp	.+436    	; 0x262 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d8 c0       	rjmp	.+432    	; 0x262 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d6 c0       	rjmp	.+428    	; 0x262 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_46>
      bc:	d2 c0       	rjmp	.+420    	; 0x262 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d0 c0       	rjmp	.+416    	; 0x262 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ce c0       	rjmp	.+412    	; 0x262 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	cc c0       	rjmp	.+408    	; 0x262 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ca c0       	rjmp	.+404    	; 0x262 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c8 c0       	rjmp	.+400    	; 0x262 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c6 c0       	rjmp	.+396    	; 0x262 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c4 c0       	rjmp	.+392    	; 0x262 <__bad_interrupt>
      da:	00 00       	nop
      dc:	c2 c0       	rjmp	.+388    	; 0x262 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c0 c0       	rjmp	.+384    	; 0x262 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	be c0       	rjmp	.+380    	; 0x262 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	bc c0       	rjmp	.+376    	; 0x262 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ba c0       	rjmp	.+372    	; 0x262 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b8 c0       	rjmp	.+368    	; 0x262 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b6 c0       	rjmp	.+364    	; 0x262 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b4 c0       	rjmp	.+360    	; 0x262 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b2 c0       	rjmp	.+356    	; 0x262 <__bad_interrupt>
      fe:	00 00       	nop
     100:	b0 c0       	rjmp	.+352    	; 0x262 <__bad_interrupt>
     102:	00 00       	nop
     104:	ae c0       	rjmp	.+348    	; 0x262 <__bad_interrupt>
     106:	00 00       	nop
     108:	ac c0       	rjmp	.+344    	; 0x262 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	aa c0       	rjmp	.+340    	; 0x262 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a8 c0       	rjmp	.+336    	; 0x262 <__bad_interrupt>
     112:	00 00       	nop
     114:	a6 c0       	rjmp	.+332    	; 0x262 <__bad_interrupt>
     116:	00 00       	nop
     118:	a4 c0       	rjmp	.+328    	; 0x262 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a2 c0       	rjmp	.+324    	; 0x262 <__bad_interrupt>
     11e:	00 00       	nop
     120:	a0 c0       	rjmp	.+320    	; 0x262 <__bad_interrupt>
     122:	00 00       	nop
     124:	9e c0       	rjmp	.+316    	; 0x262 <__bad_interrupt>
     126:	00 00       	nop
     128:	9c c0       	rjmp	.+312    	; 0x262 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	9a c0       	rjmp	.+308    	; 0x262 <__bad_interrupt>
     12e:	00 00       	nop
     130:	98 c0       	rjmp	.+304    	; 0x262 <__bad_interrupt>
     132:	00 00       	nop
     134:	96 c0       	rjmp	.+300    	; 0x262 <__bad_interrupt>
     136:	00 00       	nop
     138:	94 c0       	rjmp	.+296    	; 0x262 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	92 c0       	rjmp	.+292    	; 0x262 <__bad_interrupt>
     13e:	00 00       	nop
     140:	90 c0       	rjmp	.+288    	; 0x262 <__bad_interrupt>
     142:	00 00       	nop
     144:	8e c0       	rjmp	.+284    	; 0x262 <__bad_interrupt>
     146:	00 00       	nop
     148:	8c c0       	rjmp	.+280    	; 0x262 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	8a c0       	rjmp	.+276    	; 0x262 <__bad_interrupt>
     14e:	00 00       	nop
     150:	88 c0       	rjmp	.+272    	; 0x262 <__bad_interrupt>
     152:	00 00       	nop
     154:	86 c0       	rjmp	.+268    	; 0x262 <__bad_interrupt>
     156:	00 00       	nop
     158:	84 c0       	rjmp	.+264    	; 0x262 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	82 c0       	rjmp	.+260    	; 0x262 <__bad_interrupt>
     15e:	00 00       	nop
     160:	80 c0       	rjmp	.+256    	; 0x262 <__bad_interrupt>
     162:	00 00       	nop
     164:	7e c0       	rjmp	.+252    	; 0x262 <__bad_interrupt>
     166:	00 00       	nop
     168:	7c c0       	rjmp	.+248    	; 0x262 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	7a c0       	rjmp	.+244    	; 0x262 <__bad_interrupt>
     16e:	00 00       	nop
     170:	78 c0       	rjmp	.+240    	; 0x262 <__bad_interrupt>
     172:	00 00       	nop
     174:	76 c0       	rjmp	.+236    	; 0x262 <__bad_interrupt>
     176:	00 00       	nop
     178:	74 c0       	rjmp	.+232    	; 0x262 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	72 c0       	rjmp	.+228    	; 0x262 <__bad_interrupt>
     17e:	00 00       	nop
     180:	70 c0       	rjmp	.+224    	; 0x262 <__bad_interrupt>
     182:	00 00       	nop
     184:	6e c0       	rjmp	.+220    	; 0x262 <__bad_interrupt>
     186:	00 00       	nop
     188:	6c c0       	rjmp	.+216    	; 0x262 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	6a c0       	rjmp	.+212    	; 0x262 <__bad_interrupt>
     18e:	00 00       	nop
     190:	68 c0       	rjmp	.+208    	; 0x262 <__bad_interrupt>
     192:	00 00       	nop
     194:	66 c0       	rjmp	.+204    	; 0x262 <__bad_interrupt>
     196:	00 00       	nop
     198:	64 c0       	rjmp	.+200    	; 0x262 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	62 c0       	rjmp	.+196    	; 0x262 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	60 c0       	rjmp	.+192    	; 0x262 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5e c0       	rjmp	.+188    	; 0x262 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5c c0       	rjmp	.+184    	; 0x262 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	5a c0       	rjmp	.+180    	; 0x262 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	58 c0       	rjmp	.+176    	; 0x262 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	56 c0       	rjmp	.+172    	; 0x262 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	54 c0       	rjmp	.+168    	; 0x262 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	52 c0       	rjmp	.+164    	; 0x262 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	50 c0       	rjmp	.+160    	; 0x262 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4e c0       	rjmp	.+156    	; 0x262 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4c c0       	rjmp	.+152    	; 0x262 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	4a c0       	rjmp	.+148    	; 0x262 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	48 c0       	rjmp	.+144    	; 0x262 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	46 c0       	rjmp	.+140    	; 0x262 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	44 c0       	rjmp	.+136    	; 0x262 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	42 c0       	rjmp	.+132    	; 0x262 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	40 c0       	rjmp	.+128    	; 0x262 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3e c0       	rjmp	.+124    	; 0x262 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3c c0       	rjmp	.+120    	; 0x262 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	3a c0       	rjmp	.+116    	; 0x262 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	38 c0       	rjmp	.+112    	; 0x262 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__vector_125>
     1f8:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__vector_126>
     1fc:	ce 0c       	add	r12, r14
     1fe:	bc 0c       	add	r11, r12
     200:	bf 0c       	add	r11, r15
     202:	c2 0c       	add	r12, r2
     204:	c5 0c       	add	r12, r5
     206:	c8 0c       	add	r12, r8
     208:	cb 0c       	add	r12, r11
     20a:	01 17       	cp	r16, r17
     20c:	fc 16       	cp	r15, r28
     20e:	06 17       	cp	r16, r22
     210:	2b 17       	cp	r18, r27
     212:	2b 17       	cp	r18, r27
     214:	2b 17       	cp	r18, r27
     216:	2b 17       	cp	r18, r27
     218:	0b 17       	cp	r16, r27
     21a:	13 17       	cp	r17, r19
     21c:	2b 17       	cp	r18, r27
     21e:	2b 17       	cp	r18, r27
     220:	1a 17       	cp	r17, r26
     222:	1e 17       	cp	r17, r30
     224:	22 17       	cp	r18, r18
     226:	27 17       	cp	r18, r23

00000228 <__ctors_end>:
     228:	11 24       	eor	r1, r1
     22a:	1f be       	out	0x3f, r1	; 63
     22c:	cf ef       	ldi	r28, 0xFF	; 255
     22e:	cd bf       	out	0x3d, r28	; 61
     230:	df e2       	ldi	r29, 0x2F	; 47
     232:	de bf       	out	0x3e, r29	; 62

00000234 <__do_copy_data>:
     234:	13 e2       	ldi	r17, 0x23	; 35
     236:	a0 e0       	ldi	r26, 0x00	; 0
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	e6 eb       	ldi	r30, 0xB6	; 182
     23c:	f6 e4       	ldi	r31, 0x46	; 70
     23e:	02 c0       	rjmp	.+4      	; 0x244 <__do_copy_data+0x10>
     240:	05 90       	lpm	r0, Z+
     242:	0d 92       	st	X+, r0
     244:	aa 35       	cpi	r26, 0x5A	; 90
     246:	b1 07       	cpc	r27, r17
     248:	d9 f7       	brne	.-10     	; 0x240 <__do_copy_data+0xc>

0000024a <__do_clear_bss>:
     24a:	26 e2       	ldi	r18, 0x26	; 38
     24c:	aa e5       	ldi	r26, 0x5A	; 90
     24e:	b3 e2       	ldi	r27, 0x23	; 35
     250:	01 c0       	rjmp	.+2      	; 0x254 <.do_clear_bss_start>

00000252 <.do_clear_bss_loop>:
     252:	1d 92       	st	X+, r1

00000254 <.do_clear_bss_start>:
     254:	a3 39       	cpi	r26, 0x93	; 147
     256:	b2 07       	cpc	r27, r18
     258:	e1 f7       	brne	.-8      	; 0x252 <.do_clear_bss_loop>
     25a:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <main>
     25e:	0c 94 59 23 	jmp	0x46b2	; 0x46b2 <_exit>

00000262 <__bad_interrupt>:
     262:	ce ce       	rjmp	.-612    	; 0x0 <__vectors>

00000264 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     26a:	c0 3c       	cpi	r28, 0xC0	; 192
     26c:	28 e0       	ldi	r18, 0x08	; 8
     26e:	d2 07       	cpc	r29, r18
     270:	29 f4       	brne	.+10     	; 0x27c <spi_master_init+0x18>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     272:	68 e0       	ldi	r22, 0x08	; 8
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
     27a:	07 c0       	rjmp	.+14     	; 0x28a <spi_master_init+0x26>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     27c:	80 3c       	cpi	r24, 0xC0	; 192
     27e:	99 40       	sbci	r25, 0x09	; 9
     280:	21 f4       	brne	.+8      	; 0x28a <spi_master_init+0x26>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     282:	68 e0       	ldi	r22, 0x08	; 8
     284:	84 e0       	ldi	r24, 0x04	; 4
     286:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
     28a:	88 81       	ld	r24, Y
     28c:	80 61       	ori	r24, 0x10	; 16
     28e:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	ec 01       	movw	r28, r24
     2a2:	f4 2e       	mov	r15, r20
     2a4:	b9 01       	movw	r22, r18
     2a6:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	1c e6       	ldi	r17, 0x6C	; 108
     2ac:	2c ed       	ldi	r18, 0xDC	; 220
     2ae:	32 e0       	ldi	r19, 0x02	; 2
     2b0:	56 d7       	rcall	.+3756   	; 0x115e <spi_xmega_set_baud_div>
     2b2:	88 23       	and	r24, r24
     2b4:	4c f0       	brlt	.+18     	; 0x2c8 <spi_master_setup_device+0x32>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     2b6:	88 81       	ld	r24, Y
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     2b8:	9f 2d       	mov	r25, r15
     2ba:	99 0f       	add	r25, r25
     2bc:	99 0f       	add	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     2be:	9c 70       	andi	r25, 0x0C	; 12
     2c0:	83 7f       	andi	r24, 0xF3	; 243
     2c2:	f9 2e       	mov	r15, r25
     2c4:	f8 2a       	or	r15, r24
     2c6:	f8 82       	st	Y, r15
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	08 95       	ret

000002d4 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     2d4:	fc 01       	movw	r30, r24
     2d6:	db 01       	movw	r26, r22
     2d8:	46 0f       	add	r20, r22
     2da:	57 1f       	adc	r21, r23
	while (len--) {
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <spi_write_packet+0x14>
		spi_write_single(spi, *data++);
     2de:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     2e0:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
		
		while (!spi_is_rx_full(spi)) {
     2e4:	88 23       	and	r24, r24
     2e6:	ec f7       	brge	.-6      	; 0x2e2 <spi_write_packet+0xe>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
     2e8:	a4 17       	cp	r26, r20
     2ea:	b5 07       	cpc	r27, r21
     2ec:	c1 f7       	brne	.-16     	; 0x2de <spi_write_packet+0xa>
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	08 95       	ret

000002f2 <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
     2f2:	fc 01       	movw	r30, r24
     2f4:	db 01       	movw	r26, r22
	while (len--) {
     2f6:	41 15       	cp	r20, r1
     2f8:	51 05       	cpc	r21, r1
     2fa:	61 f0       	breq	.+24     	; 0x314 <spi_read_packet+0x22>
     2fc:	46 0f       	add	r20, r22
     2fe:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     300:	9f ef       	ldi	r25, 0xFF	; 255
     302:	93 83       	std	Z+3, r25	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     304:	82 81       	ldd	r24, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
     306:	88 23       	and	r24, r24
     308:	ec f7       	brge	.-6      	; 0x304 <spi_read_packet+0x12>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
     30a:	83 81       	ldd	r24, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
     30c:	8d 93       	st	X+, r24
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
     30e:	a4 17       	cp	r26, r20
     310:	b5 07       	cpc	r27, r21
     312:	b9 f7       	brne	.-18     	; 0x302 <spi_read_packet+0x10>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	08 95       	ret

00000318 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_level(device->id,0);
     318:	fb 01       	movw	r30, r22
     31a:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     31c:	e8 2f       	mov	r30, r24
     31e:	e6 95       	lsr	r30
     320:	e6 95       	lsr	r30
     322:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     324:	40 e2       	ldi	r20, 0x20	; 32
     326:	e4 9f       	mul	r30, r20
     328:	f0 01       	movw	r30, r0
     32a:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     32c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     32e:	87 70       	andi	r24, 0x07	; 7
     330:	21 e0       	ldi	r18, 0x01	; 1
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	a9 01       	movw	r20, r18
     336:	02 c0       	rjmp	.+4      	; 0x33c <spi_select_device+0x24>
     338:	44 0f       	add	r20, r20
     33a:	55 1f       	adc	r21, r21
     33c:	8a 95       	dec	r24
     33e:	e2 f7       	brpl	.-8      	; 0x338 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     340:	46 83       	std	Z+6, r20	; 0x06
     342:	08 95       	ret

00000344 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_level(device->id,1);
     344:	fb 01       	movw	r30, r22
     346:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     348:	e8 2f       	mov	r30, r24
     34a:	e6 95       	lsr	r30
     34c:	e6 95       	lsr	r30
     34e:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     350:	40 e2       	ldi	r20, 0x20	; 32
     352:	e4 9f       	mul	r30, r20
     354:	f0 01       	movw	r30, r0
     356:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     358:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     35a:	87 70       	andi	r24, 0x07	; 7
     35c:	21 e0       	ldi	r18, 0x01	; 1
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	a9 01       	movw	r20, r18
     362:	02 c0       	rjmp	.+4      	; 0x368 <spi_deselect_device+0x24>
     364:	44 0f       	add	r20, r20
     366:	55 1f       	adc	r21, r21
     368:	8a 95       	dec	r24
     36a:	e2 f7       	brpl	.-8      	; 0x364 <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     36c:	45 83       	std	Z+5, r20	; 0x05
     36e:	08 95       	ret

00000370 <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     370:	10 92 70 24 	sts	0x2470, r1
     374:	10 92 7c 24 	sts	0x247C, r1
     378:	10 92 7d 24 	sts	0x247D, r1
     37c:	81 ea       	ldi	r24, 0xA1	; 161
     37e:	80 93 72 24 	sts	0x2472, r24
     382:	80 e2       	ldi	r24, 0x20	; 32
     384:	80 93 73 24 	sts	0x2473, r24
     388:	10 92 74 24 	sts	0x2474, r1
     38c:	10 92 75 24 	sts	0x2475, r1
     390:	10 92 76 24 	sts	0x2476, r1
     394:	10 92 77 24 	sts	0x2477, r1
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	80 93 78 24 	sts	0x2478, r24
     3a0:	90 93 79 24 	sts	0x2479, r25
     3a4:	10 92 7a 24 	sts	0x247A, r1
     3a8:	10 92 7b 24 	sts	0x247B, r1
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	92 ec       	ldi	r25, 0xC2	; 194
     3b0:	a1 e0       	ldi	r26, 0x01	; 1
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	80 93 7e 24 	sts	0x247E, r24
     3b8:	90 93 7f 24 	sts	0x247F, r25
     3bc:	a0 93 80 24 	sts	0x2480, r26
     3c0:	b0 93 81 24 	sts	0x2481, r27
     3c4:	10 92 82 24 	sts	0x2482, r1
     3c8:	10 92 83 24 	sts	0x2483, r1
     3cc:	88 e0       	ldi	r24, 0x08	; 8
     3ce:	80 93 84 24 	sts	0x2484, r24
     3d2:	80 91 70 24 	lds	r24, 0x2470
     3d6:	8f 5f       	subi	r24, 0xFF	; 255
     3d8:	80 93 70 24 	sts	0x2470, r24
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	08 95       	ret

000003e0 <udi_cdc_comm_disable>:
     3e0:	80 91 70 24 	lds	r24, 0x2470
     3e4:	81 50       	subi	r24, 0x01	; 1
     3e6:	80 93 70 24 	sts	0x2470, r24
     3ea:	08 95       	ret

000003ec <udi_cdc_data_disable>:
     3ec:	80 91 6f 24 	lds	r24, 0x246F
     3f0:	81 50       	subi	r24, 0x01	; 1
     3f2:	80 93 6f 24 	sts	0x246F, r24
     3f6:	80 91 6f 24 	lds	r24, 0x246F
     3fa:	10 92 6e 24 	sts	0x246E, r1
     3fe:	08 95       	ret

00000400 <udi_cdc_data_setup>:
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	08 95       	ret

00000404 <udi_cdc_getsetting>:
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	08 95       	ret

00000408 <udi_cdc_comm_setup>:
     408:	80 91 76 26 	lds	r24, 0x2676
     40c:	88 23       	and	r24, r24
     40e:	dc f4       	brge	.+54     	; 0x446 <udi_cdc_comm_setup+0x3e>
     410:	80 76       	andi	r24, 0x60	; 96
     412:	80 32       	cpi	r24, 0x20	; 32
     414:	e9 f5       	brne	.+122    	; 0x490 <udi_cdc_comm_setup+0x88>
     416:	80 91 77 26 	lds	r24, 0x2677
     41a:	81 32       	cpi	r24, 0x21	; 33
     41c:	d9 f5       	brne	.+118    	; 0x494 <udi_cdc_comm_setup+0x8c>
     41e:	80 91 7c 26 	lds	r24, 0x267C
     422:	90 91 7d 26 	lds	r25, 0x267D
     426:	07 97       	sbiw	r24, 0x07	; 7
     428:	b9 f5       	brne	.+110    	; 0x498 <udi_cdc_comm_setup+0x90>
     42a:	8e e7       	ldi	r24, 0x7E	; 126
     42c:	94 e2       	ldi	r25, 0x24	; 36
     42e:	80 93 7e 26 	sts	0x267E, r24
     432:	90 93 7f 26 	sts	0x267F, r25
     436:	87 e0       	ldi	r24, 0x07	; 7
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	80 93 80 26 	sts	0x2680, r24
     43e:	90 93 81 26 	sts	0x2681, r25
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	08 95       	ret
     446:	80 76       	andi	r24, 0x60	; 96
     448:	80 32       	cpi	r24, 0x20	; 32
     44a:	41 f5       	brne	.+80     	; 0x49c <udi_cdc_comm_setup+0x94>
     44c:	80 91 77 26 	lds	r24, 0x2677
     450:	80 32       	cpi	r24, 0x20	; 32
     452:	21 f0       	breq	.+8      	; 0x45c <udi_cdc_comm_setup+0x54>
     454:	82 32       	cpi	r24, 0x22	; 34
     456:	21 f5       	brne	.+72     	; 0x4a0 <udi_cdc_comm_setup+0x98>
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	08 95       	ret
     45c:	80 91 7c 26 	lds	r24, 0x267C
     460:	90 91 7d 26 	lds	r25, 0x267D
     464:	07 97       	sbiw	r24, 0x07	; 7
     466:	f1 f4       	brne	.+60     	; 0x4a4 <udi_cdc_comm_setup+0x9c>
     468:	84 e5       	ldi	r24, 0x54	; 84
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	80 93 82 26 	sts	0x2682, r24
     470:	90 93 83 26 	sts	0x2683, r25
     474:	8e e7       	ldi	r24, 0x7E	; 126
     476:	94 e2       	ldi	r25, 0x24	; 36
     478:	80 93 7e 26 	sts	0x267E, r24
     47c:	90 93 7f 26 	sts	0x267F, r25
     480:	87 e0       	ldi	r24, 0x07	; 7
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	80 93 80 26 	sts	0x2680, r24
     488:	90 93 81 26 	sts	0x2681, r25
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	08 95       	ret
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	08 95       	ret
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	08 95       	ret
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	08 95       	ret
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	08 95       	ret
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	08 95       	ret
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	08 95       	ret

000004a8 <udi_cdc_line_coding_received>:
     4a8:	08 95       	ret

000004aa <udi_cdc_tx_send>:
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	80 91 5d 23 	lds	r24, 0x235D
     4b8:	81 11       	cpse	r24, r1
     4ba:	9c c0       	rjmp	.+312    	; 0x5f4 <udi_cdc_tx_send+0x14a>
     4bc:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <udd_is_high_speed>
     4c0:	88 23       	and	r24, r24
     4c2:	51 f0       	breq	.+20     	; 0x4d8 <udi_cdc_tx_send+0x2e>
     4c4:	c0 91 5e 23 	lds	r28, 0x235E
     4c8:	d0 91 5f 23 	lds	r29, 0x235F
     4cc:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <udd_get_micro_frame_number>
     4d0:	c8 17       	cp	r28, r24
     4d2:	d9 07       	cpc	r29, r25
     4d4:	59 f4       	brne	.+22     	; 0x4ec <udi_cdc_tx_send+0x42>
     4d6:	8e c0       	rjmp	.+284    	; 0x5f4 <udi_cdc_tx_send+0x14a>
     4d8:	c0 91 5e 23 	lds	r28, 0x235E
     4dc:	d0 91 5f 23 	lds	r29, 0x235F
     4e0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <udd_get_frame_number>
     4e4:	c8 17       	cp	r28, r24
     4e6:	d9 07       	cpc	r29, r25
     4e8:	09 f4       	brne	.+2      	; 0x4ec <udi_cdc_tx_send+0x42>
     4ea:	84 c0       	rjmp	.+264    	; 0x5f4 <udi_cdc_tx_send+0x14a>
     4ec:	df b7       	in	r29, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	c0 91 60 23 	lds	r28, 0x2360
     4f4:	ec 2f       	mov	r30, r28
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	ee 0f       	add	r30, r30
     4fa:	ff 1f       	adc	r31, r31
     4fc:	ef 59       	subi	r30, 0x9F	; 159
     4fe:	fc 4d       	sbci	r31, 0xDC	; 220
     500:	80 81       	ld	r24, Z
     502:	91 81       	ldd	r25, Z+1	; 0x01
     504:	89 2b       	or	r24, r25
     506:	09 f5       	brne	.+66     	; 0x54a <udi_cdc_tx_send+0xa0>
     508:	80 91 5a 23 	lds	r24, 0x235A
     50c:	90 91 5b 23 	lds	r25, 0x235B
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	80 93 5a 23 	sts	0x235A, r24
     516:	90 93 5b 23 	sts	0x235B, r25
     51a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <udd_is_high_speed>
     51e:	81 11       	cpse	r24, r1
     520:	07 c0       	rjmp	.+14     	; 0x530 <udi_cdc_tx_send+0x86>
     522:	80 91 5a 23 	lds	r24, 0x235A
     526:	90 91 5b 23 	lds	r25, 0x235B
     52a:	84 36       	cpi	r24, 0x64	; 100
     52c:	91 05       	cpc	r25, r1
     52e:	58 f0       	brcs	.+22     	; 0x546 <udi_cdc_tx_send+0x9c>
     530:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <udd_is_high_speed>
     534:	88 23       	and	r24, r24
     536:	49 f0       	breq	.+18     	; 0x54a <udi_cdc_tx_send+0xa0>
     538:	80 91 5a 23 	lds	r24, 0x235A
     53c:	90 91 5b 23 	lds	r25, 0x235B
     540:	80 32       	cpi	r24, 0x20	; 32
     542:	93 40       	sbci	r25, 0x03	; 3
     544:	10 f4       	brcc	.+4      	; 0x54a <udi_cdc_tx_send+0xa0>
     546:	df bf       	out	0x3f, r29	; 63
     548:	55 c0       	rjmp	.+170    	; 0x5f4 <udi_cdc_tx_send+0x14a>
     54a:	10 92 5a 23 	sts	0x235A, r1
     54e:	10 92 5b 23 	sts	0x235B, r1
     552:	80 91 5c 23 	lds	r24, 0x235C
     556:	81 11       	cpse	r24, r1
     558:	06 c0       	rjmp	.+12     	; 0x566 <udi_cdc_tx_send+0xbc>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	c1 11       	cpse	r28, r1
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	80 93 60 23 	sts	0x2360, r24
     564:	04 c0       	rjmp	.+8      	; 0x56e <udi_cdc_tx_send+0xc4>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	c1 11       	cpse	r28, r1
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	c8 2f       	mov	r28, r24
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 5d 23 	sts	0x235D, r24
     574:	df bf       	out	0x3f, r29	; 63
     576:	d0 e0       	ldi	r29, 0x00	; 0
     578:	fe 01       	movw	r30, r28
     57a:	ee 0f       	add	r30, r30
     57c:	ff 1f       	adc	r31, r31
     57e:	ef 59       	subi	r30, 0x9F	; 159
     580:	fc 4d       	sbci	r31, 0xDC	; 220
     582:	ff 24       	eor	r15, r15
     584:	f3 94       	inc	r15
     586:	80 81       	ld	r24, Z
     588:	91 81       	ldd	r25, Z+1	; 0x01
     58a:	80 34       	cpi	r24, 0x40	; 64
     58c:	91 05       	cpc	r25, r1
     58e:	09 f4       	brne	.+2      	; 0x592 <udi_cdc_tx_send+0xe8>
     590:	f1 2c       	mov	r15, r1
     592:	ff 20       	and	r15, r15
     594:	91 f0       	breq	.+36     	; 0x5ba <udi_cdc_tx_send+0x110>
     596:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <udd_is_high_speed>
     59a:	88 23       	and	r24, r24
     59c:	39 f0       	breq	.+14     	; 0x5ac <udi_cdc_tx_send+0x102>
     59e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <udd_get_micro_frame_number>
     5a2:	80 93 5e 23 	sts	0x235E, r24
     5a6:	90 93 5f 23 	sts	0x235F, r25
     5aa:	0b c0       	rjmp	.+22     	; 0x5c2 <udi_cdc_tx_send+0x118>
     5ac:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <udd_get_frame_number>
     5b0:	80 93 5e 23 	sts	0x235E, r24
     5b4:	90 93 5f 23 	sts	0x235F, r25
     5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <udi_cdc_tx_send+0x118>
     5ba:	10 92 5e 23 	sts	0x235E, r1
     5be:	10 92 5f 23 	sts	0x235F, r1
     5c2:	fe 01       	movw	r30, r28
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	ef 59       	subi	r30, 0x9F	; 159
     5ca:	fc 4d       	sbci	r31, 0xDC	; 220
     5cc:	20 81       	ld	r18, Z
     5ce:	31 81       	ldd	r19, Z+1	; 0x01
     5d0:	ae 01       	movw	r20, r28
     5d2:	00 24       	eor	r0, r0
     5d4:	56 95       	lsr	r21
     5d6:	47 95       	ror	r20
     5d8:	07 94       	ror	r0
     5da:	56 95       	lsr	r21
     5dc:	47 95       	ror	r20
     5de:	07 94       	ror	r0
     5e0:	54 2f       	mov	r21, r20
     5e2:	40 2d       	mov	r20, r0
     5e4:	4a 59       	subi	r20, 0x9A	; 154
     5e6:	5c 4d       	sbci	r21, 0xDC	; 220
     5e8:	00 e0       	ldi	r16, 0x00	; 0
     5ea:	13 e0       	ldi	r17, 0x03	; 3
     5ec:	6f 2d       	mov	r22, r15
     5ee:	81 e8       	ldi	r24, 0x81	; 129
     5f0:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <udd_ep_run>
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	08 95       	ret

00000600 <udi_cdc_data_sent>:
     600:	81 11       	cpse	r24, r1
     602:	15 c0       	rjmp	.+42     	; 0x62e <udi_cdc_data_sent+0x2e>
     604:	20 91 60 23 	lds	r18, 0x2360
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	22 23       	and	r18, r18
     60e:	11 f0       	breq	.+4      	; 0x614 <udi_cdc_data_sent+0x14>
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	fc 01       	movw	r30, r24
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	ef 59       	subi	r30, 0x9F	; 159
     61c:	fc 4d       	sbci	r31, 0xDC	; 220
     61e:	10 82       	st	Z, r1
     620:	11 82       	std	Z+1, r1	; 0x01
     622:	10 92 5c 23 	sts	0x235C, r1
     626:	10 92 5d 23 	sts	0x235D, r1
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	3e cf       	rjmp	.-388    	; 0x4aa <udi_cdc_tx_send>
     62e:	08 95       	ret

00000630 <udi_cdc_data_sof_notify>:
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	3b cf       	rjmp	.-394    	; 0x4aa <udi_cdc_tx_send>
     634:	08 95       	ret

00000636 <udi_cdc_multi_get_nb_received_data>:
     636:	4f b7       	in	r20, 0x3f	; 63
     638:	f8 94       	cli
     63a:	20 91 e7 23 	lds	r18, 0x23E7
     63e:	30 91 e8 23 	lds	r19, 0x23E8
     642:	e0 91 e9 23 	lds	r30, 0x23E9
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	e6 51       	subi	r30, 0x16	; 22
     64e:	fc 4d       	sbci	r31, 0xDC	; 220
     650:	80 81       	ld	r24, Z
     652:	91 81       	ldd	r25, Z+1	; 0x01
     654:	82 1b       	sub	r24, r18
     656:	93 0b       	sbc	r25, r19
     658:	4f bf       	out	0x3f, r20	; 63
     65a:	08 95       	ret

0000065c <udi_cdc_multi_is_rx_ready>:
     65c:	ec df       	rcall	.-40     	; 0x636 <udi_cdc_multi_get_nb_received_data>
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	89 2b       	or	r24, r25
     662:	09 f4       	brne	.+2      	; 0x666 <udi_cdc_multi_is_rx_ready+0xa>
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	82 2f       	mov	r24, r18
     668:	08 95       	ret

0000066a <udi_cdc_rx_start>:
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	4f b7       	in	r20, 0x3f	; 63
     674:	f8 94       	cli
     676:	50 91 e9 23 	lds	r21, 0x23E9
     67a:	80 91 e6 23 	lds	r24, 0x23E6
     67e:	81 11       	cpse	r24, r1
     680:	10 c0       	rjmp	.+32     	; 0x6a2 <udi_cdc_rx_start+0x38>
     682:	20 91 e7 23 	lds	r18, 0x23E7
     686:	30 91 e8 23 	lds	r19, 0x23E8
     68a:	c5 2f       	mov	r28, r21
     68c:	d0 e0       	ldi	r29, 0x00	; 0
     68e:	fe 01       	movw	r30, r28
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	e6 51       	subi	r30, 0x16	; 22
     696:	fc 4d       	sbci	r31, 0xDC	; 220
     698:	80 81       	ld	r24, Z
     69a:	91 81       	ldd	r25, Z+1	; 0x01
     69c:	28 17       	cp	r18, r24
     69e:	39 07       	cpc	r19, r25
     6a0:	18 f4       	brcc	.+6      	; 0x6a8 <udi_cdc_rx_start+0x3e>
     6a2:	4f bf       	out	0x3f, r20	; 63
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	23 c0       	rjmp	.+70     	; 0x6ee <udi_cdc_rx_start+0x84>
     6a8:	10 92 e7 23 	sts	0x23E7, r1
     6ac:	10 92 e8 23 	sts	0x23E8, r1
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	51 11       	cpse	r21, r1
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	80 93 e9 23 	sts	0x23E9, r24
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	80 93 e6 23 	sts	0x23E6, r24
     6c0:	4f bf       	out	0x3f, r20	; 63
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	cb df       	rcall	.-106    	; 0x65c <udi_cdc_multi_is_rx_ready>
     6c6:	ae 01       	movw	r20, r28
     6c8:	00 24       	eor	r0, r0
     6ca:	56 95       	lsr	r21
     6cc:	47 95       	ror	r20
     6ce:	07 94       	ror	r0
     6d0:	56 95       	lsr	r21
     6d2:	47 95       	ror	r20
     6d4:	07 94       	ror	r0
     6d6:	54 2f       	mov	r21, r20
     6d8:	40 2d       	mov	r20, r0
     6da:	42 51       	subi	r20, 0x12	; 18
     6dc:	5c 4d       	sbci	r21, 0xDC	; 220
     6de:	0e ea       	ldi	r16, 0xAE	; 174
     6e0:	13 e0       	ldi	r17, 0x03	; 3
     6e2:	20 e4       	ldi	r18, 0x40	; 64
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <udd_ep_run>
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret

000006f8 <udi_cdc_data_enable>:
     6f8:	10 92 6f 24 	sts	0x246F, r1
     6fc:	10 92 5d 23 	sts	0x235D, r1
     700:	10 92 5c 23 	sts	0x235C, r1
     704:	10 92 60 23 	sts	0x2360, r1
     708:	10 92 61 23 	sts	0x2361, r1
     70c:	10 92 62 23 	sts	0x2362, r1
     710:	10 92 63 23 	sts	0x2363, r1
     714:	10 92 64 23 	sts	0x2364, r1
     718:	10 92 5e 23 	sts	0x235E, r1
     71c:	10 92 5f 23 	sts	0x235F, r1
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	c3 de       	rcall	.-634    	; 0x4aa <udi_cdc_tx_send>
     724:	10 92 e6 23 	sts	0x23E6, r1
     728:	10 92 e9 23 	sts	0x23E9, r1
     72c:	10 92 ea 23 	sts	0x23EA, r1
     730:	10 92 eb 23 	sts	0x23EB, r1
     734:	10 92 e7 23 	sts	0x23E7, r1
     738:	10 92 e8 23 	sts	0x23E8, r1
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	95 df       	rcall	.-214    	; 0x66a <udi_cdc_rx_start>
     740:	88 23       	and	r24, r24
     742:	59 f0       	breq	.+22     	; 0x75a <udi_cdc_data_enable+0x62>
     744:	90 91 6f 24 	lds	r25, 0x246F
     748:	9f 5f       	subi	r25, 0xFF	; 255
     74a:	90 93 6f 24 	sts	0x246F, r25
     74e:	90 91 6f 24 	lds	r25, 0x246F
     752:	91 30       	cpi	r25, 0x01	; 1
     754:	11 f4       	brne	.+4      	; 0x75a <udi_cdc_data_enable+0x62>
     756:	90 93 6e 24 	sts	0x246E, r25
     75a:	08 95       	ret

0000075c <udi_cdc_data_received>:
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	94 2f       	mov	r25, r20
     762:	81 11       	cpse	r24, r1
     764:	29 c0       	rjmp	.+82     	; 0x7b8 <udi_cdc_data_received+0x5c>
     766:	80 91 e9 23 	lds	r24, 0x23E9
     76a:	e1 e0       	ldi	r30, 0x01	; 1
     76c:	81 11       	cpse	r24, r1
     76e:	e0 e0       	ldi	r30, 0x00	; 0
     770:	61 15       	cp	r22, r1
     772:	71 05       	cpc	r23, r1
     774:	b1 f4       	brne	.+44     	; 0x7a2 <udi_cdc_data_received+0x46>
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	00 24       	eor	r0, r0
     77a:	f6 95       	lsr	r31
     77c:	e7 95       	ror	r30
     77e:	07 94       	ror	r0
     780:	f6 95       	lsr	r31
     782:	e7 95       	ror	r30
     784:	07 94       	ror	r0
     786:	fe 2f       	mov	r31, r30
     788:	e0 2d       	mov	r30, r0
     78a:	af 01       	movw	r20, r30
     78c:	42 51       	subi	r20, 0x12	; 18
     78e:	5c 4d       	sbci	r21, 0xDC	; 220
     790:	0e ea       	ldi	r16, 0xAE	; 174
     792:	13 e0       	ldi	r17, 0x03	; 3
     794:	20 e4       	ldi	r18, 0x40	; 64
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	89 2f       	mov	r24, r25
     79c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <udd_ep_run>
     7a0:	0b c0       	rjmp	.+22     	; 0x7b8 <udi_cdc_data_received+0x5c>
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	ee 0f       	add	r30, r30
     7a6:	ff 1f       	adc	r31, r31
     7a8:	e6 51       	subi	r30, 0x16	; 22
     7aa:	fc 4d       	sbci	r31, 0xDC	; 220
     7ac:	60 83       	st	Z, r22
     7ae:	71 83       	std	Z+1, r23	; 0x01
     7b0:	10 92 e6 23 	sts	0x23E6, r1
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	59 df       	rcall	.-334    	; 0x66a <udi_cdc_rx_start>
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	08 95       	ret

000007be <udi_cdc_is_rx_ready>:
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	4d cf       	rjmp	.-358    	; 0x65c <udi_cdc_multi_is_rx_ready>
     7c2:	08 95       	ret

000007c4 <udi_cdc_multi_getc>:
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	11 e0       	ldi	r17, 0x01	; 1
     7cc:	80 91 84 24 	lds	r24, 0x2484
     7d0:	89 30       	cpi	r24, 0x09	; 9
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <udi_cdc_multi_getc+0x12>
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	3f b7       	in	r19, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	80 91 e7 23 	lds	r24, 0x23E7
     7e2:	90 91 e8 23 	lds	r25, 0x23E8
     7e6:	20 91 e9 23 	lds	r18, 0x23E9
     7ea:	3f bf       	out	0x3f, r19	; 63
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	f9 01       	movw	r30, r18
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	e6 51       	subi	r30, 0x16	; 22
     7f6:	fc 4d       	sbci	r31, 0xDC	; 220
     7f8:	40 81       	ld	r20, Z
     7fa:	51 81       	ldd	r21, Z+1	; 0x01
     7fc:	84 17       	cp	r24, r20
     7fe:	95 07       	cpc	r25, r21
     800:	30 f0       	brcs	.+12     	; 0x80e <udi_cdc_multi_getc+0x4a>
     802:	80 91 6e 24 	lds	r24, 0x246E
     806:	81 11       	cpse	r24, r1
     808:	e8 cf       	rjmp	.-48     	; 0x7da <udi_cdc_multi_getc+0x16>
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	20 c0       	rjmp	.+64     	; 0x84e <udi_cdc_multi_getc+0x8a>
     80e:	f9 01       	movw	r30, r18
     810:	00 24       	eor	r0, r0
     812:	f6 95       	lsr	r31
     814:	e7 95       	ror	r30
     816:	07 94       	ror	r0
     818:	f6 95       	lsr	r31
     81a:	e7 95       	ror	r30
     81c:	07 94       	ror	r0
     81e:	fe 2f       	mov	r31, r30
     820:	e0 2d       	mov	r30, r0
     822:	e8 0f       	add	r30, r24
     824:	f9 1f       	adc	r31, r25
     826:	e2 51       	subi	r30, 0x12	; 18
     828:	fc 4d       	sbci	r31, 0xDC	; 220
     82a:	20 81       	ld	r18, Z
     82c:	eb 01       	movw	r28, r22
     82e:	c2 2b       	or	r28, r18
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	80 93 e7 23 	sts	0x23E7, r24
     836:	90 93 e8 23 	sts	0x23E8, r25
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	16 df       	rcall	.-468    	; 0x66a <udi_cdc_rx_start>
     83e:	11 23       	and	r17, r17
     840:	21 f0       	breq	.+8      	; 0x84a <udi_cdc_multi_getc+0x86>
     842:	7c 2f       	mov	r23, r28
     844:	66 27       	eor	r22, r22
     846:	10 e0       	ldi	r17, 0x00	; 0
     848:	c8 cf       	rjmp	.-112    	; 0x7da <udi_cdc_multi_getc+0x16>
     84a:	8c 2f       	mov	r24, r28
     84c:	9d 2f       	mov	r25, r29
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	08 95       	ret

00000856 <udi_cdc_getc>:
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	b5 cf       	rjmp	.-150    	; 0x7c4 <udi_cdc_multi_getc>
     85a:	08 95       	ret

0000085c <udi_cdc_multi_get_free_tx_buffer>:
     85c:	9f b7       	in	r25, 0x3f	; 63
     85e:	f8 94       	cli
     860:	80 91 60 23 	lds	r24, 0x2360
     864:	e8 2f       	mov	r30, r24
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	ee 0f       	add	r30, r30
     86a:	ff 1f       	adc	r31, r31
     86c:	ef 59       	subi	r30, 0x9F	; 159
     86e:	fc 4d       	sbci	r31, 0xDC	; 220
     870:	20 81       	ld	r18, Z
     872:	31 81       	ldd	r19, Z+1	; 0x01
     874:	20 34       	cpi	r18, 0x40	; 64
     876:	31 05       	cpc	r19, r1
     878:	89 f4       	brne	.+34     	; 0x89c <udi_cdc_multi_get_free_tx_buffer+0x40>
     87a:	40 91 5d 23 	lds	r20, 0x235D
     87e:	41 11       	cpse	r20, r1
     880:	0d c0       	rjmp	.+26     	; 0x89c <udi_cdc_multi_get_free_tx_buffer+0x40>
     882:	40 91 5c 23 	lds	r20, 0x235C
     886:	41 11       	cpse	r20, r1
     888:	09 c0       	rjmp	.+18     	; 0x89c <udi_cdc_multi_get_free_tx_buffer+0x40>
     88a:	21 e0       	ldi	r18, 0x01	; 1
     88c:	20 93 5c 23 	sts	0x235C, r18
     890:	81 11       	cpse	r24, r1
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	20 93 60 23 	sts	0x2360, r18
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	9f bf       	out	0x3f, r25	; 63
     89e:	80 e4       	ldi	r24, 0x40	; 64
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	82 1b       	sub	r24, r18
     8a4:	93 0b       	sbc	r25, r19
     8a6:	08 95       	ret

000008a8 <udi_cdc_multi_is_tx_ready>:
     8a8:	d9 df       	rcall	.-78     	; 0x85c <udi_cdc_multi_get_free_tx_buffer>
     8aa:	21 e0       	ldi	r18, 0x01	; 1
     8ac:	89 2b       	or	r24, r25
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <udi_cdc_multi_is_tx_ready+0xa>
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	82 2f       	mov	r24, r18
     8b4:	08 95       	ret

000008b6 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	16 2f       	mov	r17, r22
     8be:	c7 2f       	mov	r28, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     8c0:	d1 e0       	ldi	r29, 0x01	; 1
     8c2:	80 91 84 24 	lds	r24, 0x2484
     8c6:	89 30       	cpi	r24, 0x09	; 9
     8c8:	09 f0       	breq	.+2      	; 0x8cc <udi_cdc_multi_putc+0x16>
     8ca:	d0 e0       	ldi	r29, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	ec df       	rcall	.-40     	; 0x8a8 <udi_cdc_multi_is_tx_ready>
     8d0:	81 11       	cpse	r24, r1
     8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <udi_cdc_multi_putc+0x2c>
		if (!udi_cdc_data_running) {
     8d4:	80 91 6e 24 	lds	r24, 0x246E
     8d8:	81 11       	cpse	r24, r1
     8da:	f8 cf       	rjmp	.-16     	; 0x8cc <udi_cdc_multi_putc+0x16>
			return false;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	2b c0       	rjmp	.+86     	; 0x938 <udi_cdc_multi_putc+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8e2:	6f b7       	in	r22, 0x3f	; 63
	cpu_irq_disable();
     8e4:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     8e6:	20 91 60 23 	lds	r18, 0x2360
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	f9 01       	movw	r30, r18
     8ee:	ee 0f       	add	r30, r30
     8f0:	ff 1f       	adc	r31, r31
     8f2:	ef 59       	subi	r30, 0x9F	; 159
     8f4:	fc 4d       	sbci	r31, 0xDC	; 220
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	ac 01       	movw	r20, r24
     8fc:	4f 5f       	subi	r20, 0xFF	; 255
     8fe:	5f 4f       	sbci	r21, 0xFF	; 255
     900:	40 83       	st	Z, r20
     902:	51 83       	std	Z+1, r21	; 0x01
     904:	f9 01       	movw	r30, r18
     906:	00 24       	eor	r0, r0
     908:	f6 95       	lsr	r31
     90a:	e7 95       	ror	r30
     90c:	07 94       	ror	r0
     90e:	f6 95       	lsr	r31
     910:	e7 95       	ror	r30
     912:	07 94       	ror	r0
     914:	fe 2f       	mov	r31, r30
     916:	e0 2d       	mov	r30, r0
     918:	8e 0f       	add	r24, r30
     91a:	9f 1f       	adc	r25, r31
     91c:	fc 01       	movw	r30, r24
     91e:	ea 59       	subi	r30, 0x9A	; 154
     920:	fc 4d       	sbci	r31, 0xDC	; 220
     922:	10 83       	st	Z, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     924:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     926:	dd 23       	and	r29, r29
     928:	29 f0       	breq	.+10     	; 0x934 <udi_cdc_multi_putc+0x7e>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     92a:	1c 2f       	mov	r17, r28
     92c:	cc 0f       	add	r28, r28
     92e:	cc 0b       	sbc	r28, r28
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     930:	d0 e0       	ldi	r29, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     932:	cc cf       	rjmp	.-104    	; 0x8cc <udi_cdc_multi_putc+0x16>
	}
	return true;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	08 95       	ret

00000940 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     940:	bc 01       	movw	r22, r24
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	b8 cf       	rjmp	.-144    	; 0x8b6 <udi_cdc_multi_putc>
}
     946:	08 95       	ret

00000948 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     948:	e0 91 8a 24 	lds	r30, 0x248A
     94c:	f0 91 8b 24 	lds	r31, 0x248B
     950:	01 90       	ld	r0, Z+
     952:	f0 81       	ld	r31, Z
     954:	e0 2d       	mov	r30, r0
     956:	22 81       	ldd	r18, Z+2	; 0x02
     958:	33 81       	ldd	r19, Z+3	; 0x03
     95a:	2e 0f       	add	r18, r30
     95c:	3f 1f       	adc	r19, r31
     95e:	fc 01       	movw	r30, r24
     960:	40 81       	ld	r20, Z
     962:	e4 0f       	add	r30, r20
     964:	f1 1d       	adc	r31, r1
     966:	e2 17       	cp	r30, r18
     968:	f3 07       	cpc	r31, r19
     96a:	a0 f4       	brcc	.+40     	; 0x994 <udc_next_desc_in_iface+0x4c>
     96c:	81 81       	ldd	r24, Z+1	; 0x01
     96e:	84 30       	cpi	r24, 0x04	; 4
     970:	a1 f0       	breq	.+40     	; 0x99a <udc_next_desc_in_iface+0x52>
     972:	86 13       	cpse	r24, r22
     974:	06 c0       	rjmp	.+12     	; 0x982 <udc_next_desc_in_iface+0x3a>
     976:	14 c0       	rjmp	.+40     	; 0x9a0 <udc_next_desc_in_iface+0x58>
     978:	81 81       	ldd	r24, Z+1	; 0x01
     97a:	84 30       	cpi	r24, 0x04	; 4
     97c:	a1 f0       	breq	.+40     	; 0x9a6 <udc_next_desc_in_iface+0x5e>
     97e:	86 17       	cp	r24, r22
     980:	a9 f0       	breq	.+42     	; 0x9ac <udc_next_desc_in_iface+0x64>
     982:	80 81       	ld	r24, Z
     984:	e8 0f       	add	r30, r24
     986:	f1 1d       	adc	r31, r1
     988:	e2 17       	cp	r30, r18
     98a:	f3 07       	cpc	r31, r19
     98c:	a8 f3       	brcs	.-22     	; 0x978 <udc_next_desc_in_iface+0x30>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	08 95       	ret
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	08 95       	ret
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	08 95       	ret
     9a0:	8e 2f       	mov	r24, r30
     9a2:	9f 2f       	mov	r25, r31
     9a4:	08 95       	ret
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	08 95       	ret
     9ac:	8e 2f       	mov	r24, r30
     9ae:	9f 2f       	mov	r25, r31
     9b0:	08 95       	ret

000009b2 <udc_valid_address>:
     9b2:	80 91 78 26 	lds	r24, 0x2678
     9b6:	8f 77       	andi	r24, 0x7F	; 127
     9b8:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <udd_set_address>
     9bc:	08 95       	ret

000009be <udc_update_iface_desc>:
     9be:	90 91 8c 24 	lds	r25, 0x248C
     9c2:	99 23       	and	r25, r25
     9c4:	81 f1       	breq	.+96     	; 0xa26 <udc_update_iface_desc+0x68>
     9c6:	e0 91 8a 24 	lds	r30, 0x248A
     9ca:	f0 91 8b 24 	lds	r31, 0x248B
     9ce:	01 90       	ld	r0, Z+
     9d0:	f0 81       	ld	r31, Z
     9d2:	e0 2d       	mov	r30, r0
     9d4:	94 81       	ldd	r25, Z+4	; 0x04
     9d6:	89 17       	cp	r24, r25
     9d8:	40 f5       	brcc	.+80     	; 0xa2a <udc_update_iface_desc+0x6c>
     9da:	e0 93 88 24 	sts	0x2488, r30
     9de:	f0 93 89 24 	sts	0x2489, r31
     9e2:	22 81       	ldd	r18, Z+2	; 0x02
     9e4:	33 81       	ldd	r19, Z+3	; 0x03
     9e6:	2e 0f       	add	r18, r30
     9e8:	3f 1f       	adc	r19, r31
     9ea:	e2 17       	cp	r30, r18
     9ec:	f3 07       	cpc	r31, r19
     9ee:	f8 f4       	brcc	.+62     	; 0xa2e <udc_update_iface_desc+0x70>
     9f0:	91 81       	ldd	r25, Z+1	; 0x01
     9f2:	94 30       	cpi	r25, 0x04	; 4
     9f4:	61 f4       	brne	.+24     	; 0xa0e <udc_update_iface_desc+0x50>
     9f6:	92 81       	ldd	r25, Z+2	; 0x02
     9f8:	98 13       	cpse	r25, r24
     9fa:	09 c0       	rjmp	.+18     	; 0xa0e <udc_update_iface_desc+0x50>
     9fc:	93 81       	ldd	r25, Z+3	; 0x03
     9fe:	96 13       	cpse	r25, r22
     a00:	06 c0       	rjmp	.+12     	; 0xa0e <udc_update_iface_desc+0x50>
     a02:	e0 93 88 24 	sts	0x2488, r30
     a06:	f0 93 89 24 	sts	0x2489, r31
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	08 95       	ret
     a0e:	90 81       	ld	r25, Z
     a10:	e9 0f       	add	r30, r25
     a12:	f1 1d       	adc	r31, r1
     a14:	e2 17       	cp	r30, r18
     a16:	f3 07       	cpc	r31, r19
     a18:	58 f3       	brcs	.-42     	; 0x9f0 <udc_update_iface_desc+0x32>
     a1a:	e0 93 88 24 	sts	0x2488, r30
     a1e:	f0 93 89 24 	sts	0x2489, r31
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	08 95       	ret
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	08 95       	ret
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	08 95       	ret
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	08 95       	ret

00000a32 <udc_iface_disable>:
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	c8 2f       	mov	r28, r24
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	be df       	rcall	.-132    	; 0x9be <udc_update_iface_desc>
     a42:	f8 2e       	mov	r15, r24
     a44:	88 23       	and	r24, r24
     a46:	81 f1       	breq	.+96     	; 0xaa8 <udc_iface_disable+0x76>
     a48:	a0 91 8a 24 	lds	r26, 0x248A
     a4c:	b0 91 8b 24 	lds	r27, 0x248B
     a50:	ec 2f       	mov	r30, r28
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	12 96       	adiw	r26, 0x02	; 2
     a5a:	2d 91       	ld	r18, X+
     a5c:	3c 91       	ld	r19, X
     a5e:	13 97       	sbiw	r26, 0x03	; 3
     a60:	e2 0f       	add	r30, r18
     a62:	f3 1f       	adc	r31, r19
     a64:	00 81       	ld	r16, Z
     a66:	11 81       	ldd	r17, Z+1	; 0x01
     a68:	d8 01       	movw	r26, r16
     a6a:	16 96       	adiw	r26, 0x06	; 6
     a6c:	ed 91       	ld	r30, X+
     a6e:	fc 91       	ld	r31, X
     a70:	17 97       	sbiw	r26, 0x07	; 7
     a72:	09 95       	icall
     a74:	68 2f       	mov	r22, r24
     a76:	8c 2f       	mov	r24, r28
     a78:	a2 df       	rcall	.-188    	; 0x9be <udc_update_iface_desc>
     a7a:	f8 2e       	mov	r15, r24
     a7c:	88 23       	and	r24, r24
     a7e:	a1 f0       	breq	.+40     	; 0xaa8 <udc_iface_disable+0x76>
     a80:	c0 91 88 24 	lds	r28, 0x2488
     a84:	d0 91 89 24 	lds	r29, 0x2489
     a88:	65 e0       	ldi	r22, 0x05	; 5
     a8a:	ce 01       	movw	r24, r28
     a8c:	5d df       	rcall	.-326    	; 0x948 <udc_next_desc_in_iface>
     a8e:	ec 01       	movw	r28, r24
     a90:	00 97       	sbiw	r24, 0x00	; 0
     a92:	21 f0       	breq	.+8      	; 0xa9c <udc_iface_disable+0x6a>
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <udd_ep_free>
     a9a:	f6 cf       	rjmp	.-20     	; 0xa88 <udc_iface_disable+0x56>
     a9c:	d8 01       	movw	r26, r16
     a9e:	12 96       	adiw	r26, 0x02	; 2
     aa0:	ed 91       	ld	r30, X+
     aa2:	fc 91       	ld	r31, X
     aa4:	13 97       	sbiw	r26, 0x03	; 3
     aa6:	09 95       	icall
     aa8:	8f 2d       	mov	r24, r15
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	08 95       	ret

00000ab6 <udc_iface_enable>:
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	18 2f       	mov	r17, r24
     abe:	7f df       	rcall	.-258    	; 0x9be <udc_update_iface_desc>
     ac0:	88 23       	and	r24, r24
     ac2:	41 f1       	breq	.+80     	; 0xb14 <udc_iface_enable+0x5e>
     ac4:	c0 91 88 24 	lds	r28, 0x2488
     ac8:	d0 91 89 24 	lds	r29, 0x2489
     acc:	65 e0       	ldi	r22, 0x05	; 5
     ace:	ce 01       	movw	r24, r28
     ad0:	3b df       	rcall	.-394    	; 0x948 <udc_next_desc_in_iface>
     ad2:	ec 01       	movw	r28, r24
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	49 f0       	breq	.+18     	; 0xaea <udc_iface_enable+0x34>
     ad8:	4c 81       	ldd	r20, Y+4	; 0x04
     ada:	5d 81       	ldd	r21, Y+5	; 0x05
     adc:	6b 81       	ldd	r22, Y+3	; 0x03
     ade:	8a 81       	ldd	r24, Y+2	; 0x02
     ae0:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <udd_ep_alloc>
     ae4:	81 11       	cpse	r24, r1
     ae6:	f2 cf       	rjmp	.-28     	; 0xacc <udc_iface_enable+0x16>
     ae8:	15 c0       	rjmp	.+42     	; 0xb14 <udc_iface_enable+0x5e>
     aea:	a0 91 8a 24 	lds	r26, 0x248A
     aee:	b0 91 8b 24 	lds	r27, 0x248B
     af2:	81 2f       	mov	r24, r17
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	12 96       	adiw	r26, 0x02	; 2
     afc:	ed 91       	ld	r30, X+
     afe:	fc 91       	ld	r31, X
     b00:	13 97       	sbiw	r26, 0x03	; 3
     b02:	e8 0f       	add	r30, r24
     b04:	f9 1f       	adc	r31, r25
     b06:	01 90       	ld	r0, Z+
     b08:	f0 81       	ld	r31, Z
     b0a:	e0 2d       	mov	r30, r0
     b0c:	01 90       	ld	r0, Z+
     b0e:	f0 81       	ld	r31, Z
     b10:	e0 2d       	mov	r30, r0
     b12:	09 95       	icall
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	08 95       	ret

00000b1c <udc_start>:
     b1c:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <udd_enable>
     b20:	08 95       	ret

00000b22 <udc_reset>:
     b22:	cf 93       	push	r28
     b24:	80 91 8c 24 	lds	r24, 0x248C
     b28:	88 23       	and	r24, r24
     b2a:	c1 f0       	breq	.+48     	; 0xb5c <udc_reset+0x3a>
     b2c:	e0 91 8a 24 	lds	r30, 0x248A
     b30:	f0 91 8b 24 	lds	r31, 0x248B
     b34:	01 90       	ld	r0, Z+
     b36:	f0 81       	ld	r31, Z
     b38:	e0 2d       	mov	r30, r0
     b3a:	84 81       	ldd	r24, Z+4	; 0x04
     b3c:	88 23       	and	r24, r24
     b3e:	71 f0       	breq	.+28     	; 0xb5c <udc_reset+0x3a>
     b40:	c0 e0       	ldi	r28, 0x00	; 0
     b42:	8c 2f       	mov	r24, r28
     b44:	76 df       	rcall	.-276    	; 0xa32 <udc_iface_disable>
     b46:	cf 5f       	subi	r28, 0xFF	; 255
     b48:	e0 91 8a 24 	lds	r30, 0x248A
     b4c:	f0 91 8b 24 	lds	r31, 0x248B
     b50:	01 90       	ld	r0, Z+
     b52:	f0 81       	ld	r31, Z
     b54:	e0 2d       	mov	r30, r0
     b56:	84 81       	ldd	r24, Z+4	; 0x04
     b58:	c8 17       	cp	r28, r24
     b5a:	98 f3       	brcs	.-26     	; 0xb42 <udc_reset+0x20>
     b5c:	10 92 8c 24 	sts	0x248C, r1
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	80 93 90 24 	sts	0x2490, r24
     b68:	90 93 91 24 	sts	0x2491, r25
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     b70:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     b72:	80 91 8c 24 	lds	r24, 0x248C
     b76:	88 23       	and	r24, r24
     b78:	41 f1       	breq	.+80     	; 0xbca <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b7a:	e0 91 8a 24 	lds	r30, 0x248A
     b7e:	f0 91 8b 24 	lds	r31, 0x248B
     b82:	a0 81       	ld	r26, Z
     b84:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b86:	14 96       	adiw	r26, 0x04	; 4
     b88:	8c 91       	ld	r24, X
     b8a:	88 23       	and	r24, r24
     b8c:	f1 f0       	breq	.+60     	; 0xbca <udc_sof_notify+0x5a>
     b8e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     b90:	8c 2f       	mov	r24, r28
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	02 80       	ldd	r0, Z+2	; 0x02
     b9a:	f3 81       	ldd	r31, Z+3	; 0x03
     b9c:	e0 2d       	mov	r30, r0
     b9e:	e8 0f       	add	r30, r24
     ba0:	f9 1f       	adc	r31, r25
     ba2:	01 90       	ld	r0, Z+
     ba4:	f0 81       	ld	r31, Z
     ba6:	e0 2d       	mov	r30, r0
     ba8:	00 84       	ldd	r0, Z+8	; 0x08
     baa:	f1 85       	ldd	r31, Z+9	; 0x09
     bac:	e0 2d       	mov	r30, r0
     bae:	30 97       	sbiw	r30, 0x00	; 0
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     bb2:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     bb4:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bb6:	e0 91 8a 24 	lds	r30, 0x248A
     bba:	f0 91 8b 24 	lds	r31, 0x248B
     bbe:	a0 81       	ld	r26, Z
     bc0:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     bc2:	14 96       	adiw	r26, 0x04	; 4
     bc4:	8c 91       	ld	r24, X
     bc6:	c8 17       	cp	r28, r24
     bc8:	18 f3       	brcs	.-58     	; 0xb90 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     bda:	10 92 80 26 	sts	0x2680, r1
     bde:	10 92 81 26 	sts	0x2681, r1
	udd_g_ctrlreq.callback = NULL;
     be2:	10 92 82 26 	sts	0x2682, r1
     be6:	10 92 83 26 	sts	0x2683, r1
	udd_g_ctrlreq.over_under_run = NULL;
     bea:	10 92 84 26 	sts	0x2684, r1
     bee:	10 92 85 26 	sts	0x2685, r1

	if (Udd_setup_is_in()) {
     bf2:	20 91 76 26 	lds	r18, 0x2676
     bf6:	22 23       	and	r18, r18
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <udc_process_setup+0x2e>
     bfa:	97 c2       	rjmp	.+1326   	; 0x112a <udc_process_setup+0x55c>
		if (udd_g_ctrlreq.req.wLength == 0) {
     bfc:	80 91 7c 26 	lds	r24, 0x267C
     c00:	90 91 7d 26 	lds	r25, 0x267D
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	09 f0       	breq	.+2      	; 0xc0a <udc_process_setup+0x3c>
     c08:	95 c2       	rjmp	.+1322   	; 0x1134 <udc_process_setup+0x566>
     c0a:	8b c2       	rjmp	.+1302   	; 0x1122 <udc_process_setup+0x554>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     c0c:	2f 71       	andi	r18, 0x1F	; 31
     c0e:	09 f0       	breq	.+2      	; 0xc12 <udc_process_setup+0x44>
     c10:	b9 c0       	rjmp	.+370    	; 0xd84 <udc_process_setup+0x1b6>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     c12:	30 91 77 26 	lds	r19, 0x2677
     c16:	36 30       	cpi	r19, 0x06	; 6
     c18:	89 f0       	breq	.+34     	; 0xc3c <udc_process_setup+0x6e>
     c1a:	38 30       	cpi	r19, 0x08	; 8
     c1c:	09 f4       	brne	.+2      	; 0xc20 <udc_process_setup+0x52>
     c1e:	a6 c0       	rjmp	.+332    	; 0xd6c <udc_process_setup+0x19e>
     c20:	31 11       	cpse	r19, r1
     c22:	b0 c0       	rjmp	.+352    	; 0xd84 <udc_process_setup+0x1b6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     c24:	02 97       	sbiw	r24, 0x02	; 2
     c26:	41 f4       	brne	.+16     	; 0xc38 <udc_process_setup+0x6a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     c28:	62 e0       	ldi	r22, 0x02	; 2
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	80 e9       	ldi	r24, 0x90	; 144
     c2e:	94 e2       	ldi	r25, 0x24	; 36
     c30:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     c34:	01 e0       	ldi	r16, 0x01	; 1
     c36:	f8 c1       	rjmp	.+1008   	; 0x1028 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     c38:	00 e0       	ldi	r16, 0x00	; 0
     c3a:	f6 c1       	rjmp	.+1004   	; 0x1028 <udc_process_setup+0x45a>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     c3c:	20 91 78 26 	lds	r18, 0x2678
     c40:	30 91 79 26 	lds	r19, 0x2679

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     c44:	83 2f       	mov	r24, r19
     c46:	99 27       	eor	r25, r25
     c48:	82 30       	cpi	r24, 0x02	; 2
     c4a:	91 05       	cpc	r25, r1
     c4c:	a1 f0       	breq	.+40     	; 0xc76 <udc_process_setup+0xa8>
     c4e:	1c f4       	brge	.+6      	; 0xc56 <udc_process_setup+0x88>
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	39 f0       	breq	.+14     	; 0xc62 <udc_process_setup+0x94>
     c54:	81 c0       	rjmp	.+258    	; 0xd58 <udc_process_setup+0x18a>
     c56:	83 30       	cpi	r24, 0x03	; 3
     c58:	91 05       	cpc	r25, r1
     c5a:	f1 f1       	breq	.+124    	; 0xcd8 <udc_process_setup+0x10a>
     c5c:	0f 97       	sbiw	r24, 0x0f	; 15
     c5e:	69 f1       	breq	.+90     	; 0xcba <udc_process_setup+0xec>
     c60:	7b c0       	rjmp	.+246    	; 0xd58 <udc_process_setup+0x18a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     c62:	80 91 34 20 	lds	r24, 0x2034
     c66:	90 91 35 20 	lds	r25, 0x2035
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     c6a:	dc 01       	movw	r26, r24
     c6c:	6c 91       	ld	r22, X
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
     c74:	60 c0       	rjmp	.+192    	; 0xd36 <udc_process_setup+0x168>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     c76:	e0 91 34 20 	lds	r30, 0x2034
     c7a:	f0 91 35 20 	lds	r31, 0x2035
     c7e:	81 89       	ldd	r24, Z+17	; 0x11
     c80:	28 17       	cp	r18, r24
     c82:	08 f0       	brcs	.+2      	; 0xc86 <udc_process_setup+0xb8>
     c84:	6b c0       	rjmp	.+214    	; 0xd5c <udc_process_setup+0x18e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     c86:	c9 01       	movw	r24, r18
     c88:	99 27       	eor	r25, r25
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	e0 91 36 20 	lds	r30, 0x2036
     c96:	f0 91 37 20 	lds	r31, 0x2037
     c9a:	e8 0f       	add	r30, r24
     c9c:	f9 1f       	adc	r31, r25
     c9e:	80 81       	ld	r24, Z
     ca0:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     ca2:	fc 01       	movw	r30, r24
     ca4:	62 81       	ldd	r22, Z+2	; 0x02
     ca6:	73 81       	ldd	r23, Z+3	; 0x03
     ca8:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     cac:	e0 91 7e 26 	lds	r30, 0x267E
     cb0:	f0 91 7f 26 	lds	r31, 0x267F
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	81 83       	std	Z+1, r24	; 0x01
     cb8:	3e c0       	rjmp	.+124    	; 0xd36 <udc_process_setup+0x168>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     cba:	80 91 38 20 	lds	r24, 0x2038
     cbe:	90 91 39 20 	lds	r25, 0x2039
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <udc_process_setup+0xfa>
     cc6:	4c c0       	rjmp	.+152    	; 0xd60 <udc_process_setup+0x192>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     cc8:	dc 01       	movw	r26, r24
     cca:	12 96       	adiw	r26, 0x02	; 2
     ccc:	6d 91       	ld	r22, X+
     cce:	7c 91       	ld	r23, X
     cd0:	13 97       	sbiw	r26, 0x03	; 3
     cd2:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
     cd6:	2f c0       	rjmp	.+94     	; 0xd36 <udc_process_setup+0x168>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     cd8:	33 27       	eor	r19, r19
     cda:	21 30       	cpi	r18, 0x01	; 1
     cdc:	31 05       	cpc	r19, r1
     cde:	89 f0       	breq	.+34     	; 0xd02 <udc_process_setup+0x134>
     ce0:	48 f0       	brcs	.+18     	; 0xcf4 <udc_process_setup+0x126>
     ce2:	22 30       	cpi	r18, 0x02	; 2
     ce4:	31 05       	cpc	r19, r1
     ce6:	09 f4       	brne	.+2      	; 0xcea <udc_process_setup+0x11c>
     ce8:	2a c2       	rjmp	.+1108   	; 0x113e <udc_process_setup+0x570>
     cea:	23 30       	cpi	r18, 0x03	; 3
     cec:	31 05       	cpc	r19, r1
     cee:	09 f4       	brne	.+2      	; 0xcf2 <udc_process_setup+0x124>
     cf0:	2a c2       	rjmp	.+1108   	; 0x1146 <udc_process_setup+0x578>
     cf2:	38 c0       	rjmp	.+112    	; 0xd64 <udc_process_setup+0x196>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     cf4:	64 e0       	ldi	r22, 0x04	; 4
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	80 e3       	ldi	r24, 0x30	; 48
     cfa:	90 e2       	ldi	r25, 0x20	; 32
     cfc:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
     d00:	1a c0       	rjmp	.+52     	; 0xd36 <udc_process_setup+0x168>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     d02:	89 e2       	ldi	r24, 0x29	; 41
     d04:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     d06:	25 e0       	ldi	r18, 0x05	; 5
     d08:	38 2f       	mov	r19, r24
     d0a:	a6 e1       	ldi	r26, 0x16	; 22
     d0c:	b0 e2       	ldi	r27, 0x20	; 32
     d0e:	e8 2f       	mov	r30, r24
     d10:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     d12:	81 91       	ld	r24, Z+
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	8d 93       	st	X+, r24
     d18:	9d 93       	st	X+, r25
     d1a:	8e 2f       	mov	r24, r30
     d1c:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     d1e:	82 17       	cp	r24, r18
     d20:	c0 f3       	brcs	.-16     	; 0xd12 <udc_process_setup+0x144>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     d22:	22 0f       	add	r18, r18
     d24:	62 e0       	ldi	r22, 0x02	; 2
     d26:	62 0f       	add	r22, r18
     d28:	60 93 14 20 	sts	0x2014, r22
		udd_set_setup_payload(
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	84 e1       	ldi	r24, 0x14	; 20
     d30:	90 e2       	ldi	r25, 0x20	; 32
     d32:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     d36:	80 91 7c 26 	lds	r24, 0x267C
     d3a:	90 91 7d 26 	lds	r25, 0x267D
     d3e:	20 91 80 26 	lds	r18, 0x2680
     d42:	30 91 81 26 	lds	r19, 0x2681
     d46:	82 17       	cp	r24, r18
     d48:	93 07       	cpc	r25, r19
     d4a:	70 f4       	brcc	.+28     	; 0xd68 <udc_process_setup+0x19a>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     d4c:	80 93 80 26 	sts	0x2680, r24
     d50:	90 93 81 26 	sts	0x2681, r25
	}
	return true;
     d54:	01 e0       	ldi	r16, 0x01	; 1
     d56:	68 c1       	rjmp	.+720    	; 0x1028 <udc_process_setup+0x45a>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     d58:	00 e0       	ldi	r16, 0x00	; 0
     d5a:	66 c1       	rjmp	.+716    	; 0x1028 <udc_process_setup+0x45a>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     d5c:	00 e0       	ldi	r16, 0x00	; 0
     d5e:	64 c1       	rjmp	.+712    	; 0x1028 <udc_process_setup+0x45a>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     d60:	00 e0       	ldi	r16, 0x00	; 0
     d62:	62 c1       	rjmp	.+708    	; 0x1028 <udc_process_setup+0x45a>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     d64:	00 e0       	ldi	r16, 0x00	; 0
     d66:	60 c1       	rjmp	.+704    	; 0x1028 <udc_process_setup+0x45a>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     d68:	01 e0       	ldi	r16, 0x01	; 1
     d6a:	5e c1       	rjmp	.+700    	; 0x1028 <udc_process_setup+0x45a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	41 f4       	brne	.+16     	; 0xd80 <udc_process_setup+0x1b2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	8c e8       	ldi	r24, 0x8C	; 140
     d76:	94 e2       	ldi	r25, 0x24	; 36
     d78:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
	return true;
     d7c:	01 e0       	ldi	r16, 0x01	; 1
     d7e:	54 c1       	rjmp	.+680    	; 0x1028 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     d80:	00 e0       	ldi	r16, 0x00	; 0
     d82:	52 c1       	rjmp	.+676    	; 0x1028 <udc_process_setup+0x45a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     d84:	21 30       	cpi	r18, 0x01	; 1
     d86:	09 f0       	breq	.+2      	; 0xd8a <udc_process_setup+0x1bc>
     d88:	40 c0       	rjmp	.+128    	; 0xe0a <udc_process_setup+0x23c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     d8a:	30 91 77 26 	lds	r19, 0x2677
     d8e:	3a 30       	cpi	r19, 0x0A	; 10
     d90:	e1 f5       	brne	.+120    	; 0xe0a <udc_process_setup+0x23c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	a1 f5       	brne	.+104    	; 0xdfe <udc_process_setup+0x230>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     d96:	80 91 8c 24 	lds	r24, 0x248C
     d9a:	88 23       	and	r24, r24
     d9c:	91 f1       	breq	.+100    	; 0xe02 <udc_process_setup+0x234>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d9e:	c0 91 7a 26 	lds	r28, 0x267A
     da2:	d0 91 7b 26 	lds	r29, 0x267B
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     da6:	e0 90 8a 24 	lds	r14, 0x248A
     daa:	f0 90 8b 24 	lds	r15, 0x248B
     dae:	d7 01       	movw	r26, r14
     db0:	ed 91       	ld	r30, X+
     db2:	fc 91       	ld	r31, X
     db4:	84 81       	ldd	r24, Z+4	; 0x04
     db6:	c8 17       	cp	r28, r24
     db8:	30 f5       	brcc	.+76     	; 0xe06 <udc_process_setup+0x238>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	8c 2f       	mov	r24, r28
     dbe:	ff dd       	rcall	.-1026   	; 0x9be <udc_update_iface_desc>
     dc0:	08 2f       	mov	r16, r24
     dc2:	88 23       	and	r24, r24
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <udc_process_setup+0x1fa>
     dc6:	30 c1       	rjmp	.+608    	; 0x1028 <udc_process_setup+0x45a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     dc8:	ce 01       	movw	r24, r28
     dca:	99 27       	eor	r25, r25
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	d7 01       	movw	r26, r14
     dd2:	12 96       	adiw	r26, 0x02	; 2
     dd4:	ed 91       	ld	r30, X+
     dd6:	fc 91       	ld	r31, X
     dd8:	13 97       	sbiw	r26, 0x03	; 3
     dda:	e8 0f       	add	r30, r24
     ddc:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     dde:	01 90       	ld	r0, Z+
     de0:	f0 81       	ld	r31, Z
     de2:	e0 2d       	mov	r30, r0
     de4:	06 80       	ldd	r0, Z+6	; 0x06
     de6:	f7 81       	ldd	r31, Z+7	; 0x07
     de8:	e0 2d       	mov	r30, r0
     dea:	09 95       	icall
     dec:	80 93 8e 24 	sts	0x248E, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	8e e8       	ldi	r24, 0x8E	; 142
     df6:	94 e2       	ldi	r25, 0x24	; 36
     df8:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
     dfc:	15 c1       	rjmp	.+554    	; 0x1028 <udc_process_setup+0x45a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     dfe:	00 e0       	ldi	r16, 0x00	; 0
     e00:	13 c1       	rjmp	.+550    	; 0x1028 <udc_process_setup+0x45a>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     e02:	00 e0       	ldi	r16, 0x00	; 0
     e04:	11 c1       	rjmp	.+546    	; 0x1028 <udc_process_setup+0x45a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     e06:	00 e0       	ldi	r16, 0x00	; 0
     e08:	0f c1       	rjmp	.+542    	; 0x1028 <udc_process_setup+0x45a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	09 f0       	breq	.+2      	; 0xe10 <udc_process_setup+0x242>
     e0e:	0e c1       	rjmp	.+540    	; 0x102c <udc_process_setup+0x45e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     e10:	20 91 77 26 	lds	r18, 0x2677
     e14:	21 11       	cpse	r18, r1
     e16:	03 c1       	rjmp	.+518    	; 0x101e <udc_process_setup+0x450>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     e18:	02 97       	sbiw	r24, 0x02	; 2
     e1a:	81 f4       	brne	.+32     	; 0xe3c <udc_process_setup+0x26e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     e1c:	80 91 7a 26 	lds	r24, 0x267A
     e20:	0e 94 76 0f 	call	0x1eec	; 0x1eec <udd_ep_is_halted>
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	80 93 86 24 	sts	0x2486, r24
     e2a:	90 93 87 24 	sts	0x2487, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     e2e:	62 e0       	ldi	r22, 0x02	; 2
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	86 e8       	ldi	r24, 0x86	; 134
     e34:	94 e2       	ldi	r25, 0x24	; 36
     e36:	f0 d7       	rcall	.+4064   	; 0x1e18 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     e38:	01 e0       	ldi	r16, 0x01	; 1
     e3a:	f6 c0       	rjmp	.+492    	; 0x1028 <udc_process_setup+0x45a>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     e3c:	00 e0       	ldi	r16, 0x00	; 0
     e3e:	f4 c0       	rjmp	.+488    	; 0x1028 <udc_process_setup+0x45a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     e40:	2f 71       	andi	r18, 0x1F	; 31
     e42:	09 f0       	breq	.+2      	; 0xe46 <udc_process_setup+0x278>
     e44:	90 c0       	rjmp	.+288    	; 0xf66 <udc_process_setup+0x398>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     e46:	80 91 77 26 	lds	r24, 0x2677
     e4a:	83 30       	cpi	r24, 0x03	; 3
     e4c:	09 f4       	brne	.+2      	; 0xe50 <udc_process_setup+0x282>
     e4e:	e9 c0       	rjmp	.+466    	; 0x1022 <udc_process_setup+0x454>
     e50:	18 f4       	brcc	.+6      	; 0xe58 <udc_process_setup+0x28a>
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	b1 f0       	breq	.+44     	; 0xe82 <udc_process_setup+0x2b4>
     e56:	87 c0       	rjmp	.+270    	; 0xf66 <udc_process_setup+0x398>
     e58:	85 30       	cpi	r24, 0x05	; 5
     e5a:	19 f0       	breq	.+6      	; 0xe62 <udc_process_setup+0x294>
     e5c:	89 30       	cpi	r24, 0x09	; 9
     e5e:	61 f1       	breq	.+88     	; 0xeb8 <udc_process_setup+0x2ea>
     e60:	82 c0       	rjmp	.+260    	; 0xf66 <udc_process_setup+0x398>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e62:	80 91 7c 26 	lds	r24, 0x267C
     e66:	90 91 7d 26 	lds	r25, 0x267D
     e6a:	89 2b       	or	r24, r25
     e6c:	41 f4       	brne	.+16     	; 0xe7e <udc_process_setup+0x2b0>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     e6e:	89 ed       	ldi	r24, 0xD9	; 217
     e70:	94 e0       	ldi	r25, 0x04	; 4
     e72:	80 93 82 26 	sts	0x2682, r24
     e76:	90 93 83 26 	sts	0x2683, r25
	return true;
     e7a:	01 e0       	ldi	r16, 0x01	; 1
     e7c:	d5 c0       	rjmp	.+426    	; 0x1028 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e7e:	00 e0       	ldi	r16, 0x00	; 0
     e80:	d3 c0       	rjmp	.+422    	; 0x1028 <udc_process_setup+0x45a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e82:	80 91 7c 26 	lds	r24, 0x267C
     e86:	90 91 7d 26 	lds	r25, 0x267D
     e8a:	89 2b       	or	r24, r25
     e8c:	89 f4       	brne	.+34     	; 0xeb0 <udc_process_setup+0x2e2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     e8e:	80 91 78 26 	lds	r24, 0x2678
     e92:	90 91 79 26 	lds	r25, 0x2679
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	69 f4       	brne	.+26     	; 0xeb4 <udc_process_setup+0x2e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     e9a:	80 91 90 24 	lds	r24, 0x2490
     e9e:	90 91 91 24 	lds	r25, 0x2491
     ea2:	8d 7f       	andi	r24, 0xFD	; 253
     ea4:	80 93 90 24 	sts	0x2490, r24
     ea8:	90 93 91 24 	sts	0x2491, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     eac:	01 e0       	ldi	r16, 0x01	; 1
     eae:	bc c0       	rjmp	.+376    	; 0x1028 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     eb0:	00 e0       	ldi	r16, 0x00	; 0
     eb2:	ba c0       	rjmp	.+372    	; 0x1028 <udc_process_setup+0x45a>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     eb4:	00 e0       	ldi	r16, 0x00	; 0
     eb6:	b8 c0       	rjmp	.+368    	; 0x1028 <udc_process_setup+0x45a>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     eb8:	80 91 7c 26 	lds	r24, 0x267C
     ebc:	90 91 7d 26 	lds	r25, 0x267D
     ec0:	89 2b       	or	r24, r25
     ec2:	09 f0       	breq	.+2      	; 0xec6 <udc_process_setup+0x2f8>
     ec4:	46 c0       	rjmp	.+140    	; 0xf52 <udc_process_setup+0x384>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     ec6:	9d d7       	rcall	.+3898   	; 0x1e02 <udd_getaddress>
     ec8:	88 23       	and	r24, r24
     eca:	09 f4       	brne	.+2      	; 0xece <udc_process_setup+0x300>
     ecc:	44 c0       	rjmp	.+136    	; 0xf56 <udc_process_setup+0x388>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     ece:	20 91 78 26 	lds	r18, 0x2678
     ed2:	30 91 79 26 	lds	r19, 0x2679
     ed6:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     ed8:	e0 91 34 20 	lds	r30, 0x2034
     edc:	f0 91 35 20 	lds	r31, 0x2035
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     ee0:	81 89       	ldd	r24, Z+17	; 0x11
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	82 17       	cp	r24, r18
     ee6:	93 07       	cpc	r25, r19
     ee8:	c0 f1       	brcs	.+112    	; 0xf5a <udc_process_setup+0x38c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     eea:	1b de       	rcall	.-970    	; 0xb22 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     eec:	80 91 78 26 	lds	r24, 0x2678
     ef0:	90 91 79 26 	lds	r25, 0x2679
     ef4:	80 93 8c 24 	sts	0x248C, r24
	if (udc_num_configuration == 0) {
     ef8:	88 23       	and	r24, r24
     efa:	89 f1       	breq	.+98     	; 0xf5e <udc_process_setup+0x390>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     efc:	99 27       	eor	r25, r25
     efe:	81 50       	subi	r24, 0x01	; 1
     f00:	90 4c       	sbci	r25, 0xC0	; 192
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	e0 91 36 20 	lds	r30, 0x2036
     f0e:	f0 91 37 20 	lds	r31, 0x2037
     f12:	e8 0f       	add	r30, r24
     f14:	f9 1f       	adc	r31, r25
     f16:	e0 93 8a 24 	sts	0x248A, r30
     f1a:	f0 93 8b 24 	sts	0x248B, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f1e:	01 90       	ld	r0, Z+
     f20:	f0 81       	ld	r31, Z
     f22:	e0 2d       	mov	r30, r0
     f24:	84 81       	ldd	r24, Z+4	; 0x04
     f26:	88 23       	and	r24, r24
     f28:	e1 f0       	breq	.+56     	; 0xf62 <udc_process_setup+0x394>
     f2a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	8c 2f       	mov	r24, r28
     f30:	c2 dd       	rcall	.-1148   	; 0xab6 <udc_iface_enable>
     f32:	08 2f       	mov	r16, r24
     f34:	88 23       	and	r24, r24
     f36:	09 f4       	brne	.+2      	; 0xf3a <udc_process_setup+0x36c>
     f38:	77 c0       	rjmp	.+238    	; 0x1028 <udc_process_setup+0x45a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     f3a:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f3c:	e0 91 8a 24 	lds	r30, 0x248A
     f40:	f0 91 8b 24 	lds	r31, 0x248B
     f44:	01 90       	ld	r0, Z+
     f46:	f0 81       	ld	r31, Z
     f48:	e0 2d       	mov	r30, r0
     f4a:	84 81       	ldd	r24, Z+4	; 0x04
     f4c:	c8 17       	cp	r28, r24
     f4e:	70 f3       	brcs	.-36     	; 0xf2c <udc_process_setup+0x35e>
     f50:	6b c0       	rjmp	.+214    	; 0x1028 <udc_process_setup+0x45a>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     f52:	00 e0       	ldi	r16, 0x00	; 0
     f54:	69 c0       	rjmp	.+210    	; 0x1028 <udc_process_setup+0x45a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     f56:	00 e0       	ldi	r16, 0x00	; 0
     f58:	67 c0       	rjmp	.+206    	; 0x1028 <udc_process_setup+0x45a>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     f5a:	00 e0       	ldi	r16, 0x00	; 0
     f5c:	65 c0       	rjmp	.+202    	; 0x1028 <udc_process_setup+0x45a>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     f5e:	01 e0       	ldi	r16, 0x01	; 1
     f60:	63 c0       	rjmp	.+198    	; 0x1028 <udc_process_setup+0x45a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     f62:	01 e0       	ldi	r16, 0x01	; 1
     f64:	61 c0       	rjmp	.+194    	; 0x1028 <udc_process_setup+0x45a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     f66:	21 30       	cpi	r18, 0x01	; 1
     f68:	09 f5       	brne	.+66     	; 0xfac <udc_process_setup+0x3de>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     f6a:	80 91 77 26 	lds	r24, 0x2677
     f6e:	8b 30       	cpi	r24, 0x0B	; 11
     f70:	e9 f4       	brne	.+58     	; 0xfac <udc_process_setup+0x3de>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     f72:	80 91 7c 26 	lds	r24, 0x267C
     f76:	90 91 7d 26 	lds	r25, 0x267D
     f7a:	89 2b       	or	r24, r25
     f7c:	99 f4       	brne	.+38     	; 0xfa4 <udc_process_setup+0x3d6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     f7e:	80 91 8c 24 	lds	r24, 0x248C
     f82:	88 23       	and	r24, r24
     f84:	89 f0       	breq	.+34     	; 0xfa8 <udc_process_setup+0x3da>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f86:	c0 91 7a 26 	lds	r28, 0x267A
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     f8a:	d0 91 78 26 	lds	r29, 0x2678

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     f8e:	8c 2f       	mov	r24, r28
     f90:	50 dd       	rcall	.-1376   	; 0xa32 <udc_iface_disable>
     f92:	08 2f       	mov	r16, r24
     f94:	88 23       	and	r24, r24
     f96:	09 f4       	brne	.+2      	; 0xf9a <udc_process_setup+0x3cc>
     f98:	47 c0       	rjmp	.+142    	; 0x1028 <udc_process_setup+0x45a>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     f9a:	6d 2f       	mov	r22, r29
     f9c:	8c 2f       	mov	r24, r28
     f9e:	8b dd       	rcall	.-1258   	; 0xab6 <udc_iface_enable>
     fa0:	08 2f       	mov	r16, r24
     fa2:	42 c0       	rjmp	.+132    	; 0x1028 <udc_process_setup+0x45a>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     fa4:	00 e0       	ldi	r16, 0x00	; 0
     fa6:	40 c0       	rjmp	.+128    	; 0x1028 <udc_process_setup+0x45a>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     fa8:	00 e0       	ldi	r16, 0x00	; 0
     faa:	3e c0       	rjmp	.+124    	; 0x1028 <udc_process_setup+0x45a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     fac:	22 30       	cpi	r18, 0x02	; 2
     fae:	09 f0       	breq	.+2      	; 0xfb2 <udc_process_setup+0x3e4>
     fb0:	3d c0       	rjmp	.+122    	; 0x102c <udc_process_setup+0x45e>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     fb2:	80 91 77 26 	lds	r24, 0x2677
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	19 f0       	breq	.+6      	; 0xfc0 <udc_process_setup+0x3f2>
     fba:	83 30       	cpi	r24, 0x03	; 3
     fbc:	b1 f0       	breq	.+44     	; 0xfea <udc_process_setup+0x41c>
     fbe:	33 c0       	rjmp	.+102    	; 0x1026 <udc_process_setup+0x458>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     fc0:	80 91 7c 26 	lds	r24, 0x267C
     fc4:	90 91 7d 26 	lds	r25, 0x267D
     fc8:	89 2b       	or	r24, r25
     fca:	59 f4       	brne	.+22     	; 0xfe2 <udc_process_setup+0x414>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     fcc:	80 91 78 26 	lds	r24, 0x2678
     fd0:	90 91 79 26 	lds	r25, 0x2679
     fd4:	89 2b       	or	r24, r25
     fd6:	39 f4       	brne	.+14     	; 0xfe6 <udc_process_setup+0x418>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     fd8:	80 91 7a 26 	lds	r24, 0x267A
     fdc:	a2 d7       	rcall	.+3908   	; 0x1f22 <udd_ep_clear_halt>
     fde:	08 2f       	mov	r16, r24
     fe0:	23 c0       	rjmp	.+70     	; 0x1028 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     fe2:	00 e0       	ldi	r16, 0x00	; 0
     fe4:	21 c0       	rjmp	.+66     	; 0x1028 <udc_process_setup+0x45a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     fe6:	00 e0       	ldi	r16, 0x00	; 0
     fe8:	1f c0       	rjmp	.+62     	; 0x1028 <udc_process_setup+0x45a>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     fea:	80 91 7c 26 	lds	r24, 0x267C
     fee:	90 91 7d 26 	lds	r25, 0x267D
     ff2:	89 2b       	or	r24, r25
     ff4:	81 f4       	brne	.+32     	; 0x1016 <udc_process_setup+0x448>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     ff6:	80 91 78 26 	lds	r24, 0x2678
     ffa:	90 91 79 26 	lds	r25, 0x2679
     ffe:	89 2b       	or	r24, r25
    1000:	61 f4       	brne	.+24     	; 0x101a <udc_process_setup+0x44c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1002:	ca e7       	ldi	r28, 0x7A	; 122
    1004:	d6 e2       	ldi	r29, 0x26	; 38
    1006:	88 81       	ld	r24, Y
    1008:	0e 94 43 10 	call	0x2086	; 0x2086 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    100c:	88 81       	ld	r24, Y
    100e:	0e 94 99 10 	call	0x2132	; 0x2132 <udd_ep_set_halt>
    1012:	08 2f       	mov	r16, r24
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <udc_process_setup+0x45a>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1016:	00 e0       	ldi	r16, 0x00	; 0
    1018:	07 c0       	rjmp	.+14     	; 0x1028 <udc_process_setup+0x45a>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    101a:	00 e0       	ldi	r16, 0x00	; 0
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <udc_process_setup+0x45a>
				break;
			}
		}
#endif
	}
	return false;
    101e:	00 e0       	ldi	r16, 0x00	; 0
    1020:	03 c0       	rjmp	.+6      	; 0x1028 <udc_process_setup+0x45a>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1022:	00 e0       	ldi	r16, 0x00	; 0
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <udc_process_setup+0x45a>
				break;
			}
		}
#endif
	}
	return false;
    1026:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1028:	01 11       	cpse	r16, r1
    102a:	91 c0       	rjmp	.+290    	; 0x114e <udc_process_setup+0x580>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    102c:	80 91 76 26 	lds	r24, 0x2676
    1030:	8f 71       	andi	r24, 0x1F	; 31
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	c1 f5       	brne	.+112    	; 0x10a6 <udc_process_setup+0x4d8>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1036:	80 91 8c 24 	lds	r24, 0x248C
    103a:	88 23       	and	r24, r24
    103c:	a1 f1       	breq	.+104    	; 0x10a6 <udc_process_setup+0x4d8>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    103e:	c0 91 7a 26 	lds	r28, 0x267A
    1042:	d0 91 7b 26 	lds	r29, 0x267B
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1046:	00 91 8a 24 	lds	r16, 0x248A
    104a:	10 91 8b 24 	lds	r17, 0x248B
    104e:	d8 01       	movw	r26, r16
    1050:	ed 91       	ld	r30, X+
    1052:	fc 91       	ld	r31, X
    1054:	84 81       	ldd	r24, Z+4	; 0x04
    1056:	c8 17       	cp	r28, r24
    1058:	30 f5       	brcc	.+76     	; 0x10a6 <udc_process_setup+0x4d8>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	8c 2f       	mov	r24, r28
    105e:	af dc       	rcall	.-1698   	; 0x9be <udc_update_iface_desc>
    1060:	88 23       	and	r24, r24
    1062:	09 f1       	breq	.+66     	; 0x10a6 <udc_process_setup+0x4d8>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1064:	ce 01       	movw	r24, r28
    1066:	99 27       	eor	r25, r25
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	d8 01       	movw	r26, r16
    106e:	12 96       	adiw	r26, 0x02	; 2
    1070:	ed 91       	ld	r30, X+
    1072:	fc 91       	ld	r31, X
    1074:	13 97       	sbiw	r26, 0x03	; 3
    1076:	e8 0f       	add	r30, r24
    1078:	f9 1f       	adc	r31, r25
    107a:	00 81       	ld	r16, Z
    107c:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    107e:	d8 01       	movw	r26, r16
    1080:	16 96       	adiw	r26, 0x06	; 6
    1082:	ed 91       	ld	r30, X+
    1084:	fc 91       	ld	r31, X
    1086:	17 97       	sbiw	r26, 0x07	; 7
    1088:	09 95       	icall
    108a:	68 2f       	mov	r22, r24
    108c:	8c 2f       	mov	r24, r28
    108e:	97 dc       	rcall	.-1746   	; 0x9be <udc_update_iface_desc>
    1090:	88 23       	and	r24, r24
    1092:	49 f0       	breq	.+18     	; 0x10a6 <udc_process_setup+0x4d8>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1094:	d8 01       	movw	r26, r16
    1096:	14 96       	adiw	r26, 0x04	; 4
    1098:	ed 91       	ld	r30, X+
    109a:	fc 91       	ld	r31, X
    109c:	15 97       	sbiw	r26, 0x05	; 5
    109e:	09 95       	icall
    10a0:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    10a2:	81 11       	cpse	r24, r1
    10a4:	54 c0       	rjmp	.+168    	; 0x114e <udc_process_setup+0x580>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    10a6:	80 91 76 26 	lds	r24, 0x2676
    10aa:	8f 71       	andi	r24, 0x1F	; 31
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	d9 f5       	brne	.+118    	; 0x1126 <udc_process_setup+0x558>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    10b0:	80 91 8c 24 	lds	r24, 0x248C
    10b4:	88 23       	and	r24, r24
    10b6:	89 f1       	breq	.+98     	; 0x111a <udc_process_setup+0x54c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    10b8:	e0 91 8a 24 	lds	r30, 0x248A
    10bc:	f0 91 8b 24 	lds	r31, 0x248B
    10c0:	a0 81       	ld	r26, Z
    10c2:	b1 81       	ldd	r27, Z+1	; 0x01
    10c4:	14 96       	adiw	r26, 0x04	; 4
    10c6:	8c 91       	ld	r24, X
    10c8:	88 23       	and	r24, r24
    10ca:	49 f1       	breq	.+82     	; 0x111e <udc_process_setup+0x550>
    10cc:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    10ce:	21 2f       	mov	r18, r17
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	02 80       	ldd	r0, Z+2	; 0x02
    10d8:	f3 81       	ldd	r31, Z+3	; 0x03
    10da:	e0 2d       	mov	r30, r0
    10dc:	e2 0f       	add	r30, r18
    10de:	f3 1f       	adc	r31, r19
    10e0:	c0 81       	ld	r28, Z
    10e2:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    10e4:	ee 81       	ldd	r30, Y+6	; 0x06
    10e6:	ff 81       	ldd	r31, Y+7	; 0x07
    10e8:	09 95       	icall
    10ea:	68 2f       	mov	r22, r24
    10ec:	81 2f       	mov	r24, r17
    10ee:	67 dc       	rcall	.-1842   	; 0x9be <udc_update_iface_desc>
    10f0:	08 2f       	mov	r16, r24
    10f2:	88 23       	and	r24, r24
    10f4:	61 f1       	breq	.+88     	; 0x114e <udc_process_setup+0x580>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    10f6:	ec 81       	ldd	r30, Y+4	; 0x04
    10f8:	fd 81       	ldd	r31, Y+5	; 0x05
    10fa:	09 95       	icall
    10fc:	08 2f       	mov	r16, r24
    10fe:	81 11       	cpse	r24, r1
    1100:	26 c0       	rjmp	.+76     	; 0x114e <udc_process_setup+0x580>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1102:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1104:	e0 91 8a 24 	lds	r30, 0x248A
    1108:	f0 91 8b 24 	lds	r31, 0x248B
    110c:	a0 81       	ld	r26, Z
    110e:	b1 81       	ldd	r27, Z+1	; 0x01
    1110:	14 96       	adiw	r26, 0x04	; 4
    1112:	8c 91       	ld	r24, X
    1114:	18 17       	cp	r17, r24
    1116:	d8 f2       	brcs	.-74     	; 0x10ce <udc_process_setup+0x500>
    1118:	1a c0       	rjmp	.+52     	; 0x114e <udc_process_setup+0x580>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    111a:	00 e0       	ldi	r16, 0x00	; 0
    111c:	18 c0       	rjmp	.+48     	; 0x114e <udc_process_setup+0x580>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    111e:	00 e0       	ldi	r16, 0x00	; 0
    1120:	16 c0       	rjmp	.+44     	; 0x114e <udc_process_setup+0x580>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1122:	00 e0       	ldi	r16, 0x00	; 0
    1124:	14 c0       	rjmp	.+40     	; 0x114e <udc_process_setup+0x580>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1126:	00 e0       	ldi	r16, 0x00	; 0
    1128:	12 c0       	rjmp	.+36     	; 0x114e <udc_process_setup+0x580>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    112a:	82 2f       	mov	r24, r18
    112c:	80 76       	andi	r24, 0x60	; 96
    112e:	09 f0       	breq	.+2      	; 0x1132 <udc_process_setup+0x564>
    1130:	7d cf       	rjmp	.-262    	; 0x102c <udc_process_setup+0x45e>
    1132:	86 ce       	rjmp	.-756    	; 0xe40 <udc_process_setup+0x272>
    1134:	32 2f       	mov	r19, r18
    1136:	30 76       	andi	r19, 0x60	; 96
    1138:	09 f0       	breq	.+2      	; 0x113c <udc_process_setup+0x56e>
    113a:	78 cf       	rjmp	.-272    	; 0x102c <udc_process_setup+0x45e>
    113c:	67 cd       	rjmp	.-1330   	; 0xc0c <udc_process_setup+0x3e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    113e:	26 e0       	ldi	r18, 0x06	; 6
		str = udc_string_product_name;
    1140:	82 e2       	ldi	r24, 0x22	; 34
    1142:	90 e2       	ldi	r25, 0x20	; 32
    1144:	e1 cd       	rjmp	.-1086   	; 0xd08 <udc_process_setup+0x13a>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1146:	24 e0       	ldi	r18, 0x04	; 4
		str = udc_get_string_serial_name();
    1148:	8e ed       	ldi	r24, 0xDE	; 222
    114a:	90 e2       	ldi	r25, 0x20	; 32
    114c:	dd cd       	rjmp	.-1094   	; 0xd08 <udc_process_setup+0x13a>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    114e:	80 2f       	mov	r24, r16
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	08 95       	ret

0000115e <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    115e:	cf 92       	push	r12
    1160:	df 92       	push	r13
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	ec 01       	movw	r28, r24
    1170:	6a 01       	movw	r12, r20
    1172:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    1174:	db 01       	movw	r26, r22
    1176:	ca 01       	movw	r24, r20
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	a1 09       	sbc	r26, r1
    117c:	b1 09       	sbc	r27, r1
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	60 0f       	add	r22, r16
    1184:	71 1f       	adc	r23, r17
    1186:	82 1f       	adc	r24, r18
    1188:	93 1f       	adc	r25, r19
    118a:	a7 01       	movw	r20, r14
    118c:	96 01       	movw	r18, r12
    118e:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__udivmodsi4>

	if (divisor > 128) {
    1192:	21 38       	cpi	r18, 0x81	; 129
    1194:	31 05       	cpc	r19, r1
    1196:	41 05       	cpc	r20, r1
    1198:	51 05       	cpc	r21, r1
    119a:	f8 f4       	brcc	.+62     	; 0x11da <spi_xmega_set_baud_div+0x7c>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    119c:	21 34       	cpi	r18, 0x41	; 65
    119e:	60 f4       	brcc	.+24     	; 0x11b8 <spi_xmega_set_baud_div+0x5a>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    11a0:	21 32       	cpi	r18, 0x21	; 33
    11a2:	60 f4       	brcc	.+24     	; 0x11bc <spi_xmega_set_baud_div+0x5e>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    11a4:	21 31       	cpi	r18, 0x11	; 17
    11a6:	60 f4       	brcc	.+24     	; 0x11c0 <spi_xmega_set_baud_div+0x62>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    11a8:	29 30       	cpi	r18, 0x09	; 9
    11aa:	60 f4       	brcc	.+24     	; 0x11c4 <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    11ac:	25 30       	cpi	r18, 0x05	; 5
    11ae:	60 f4       	brcc	.+24     	; 0x11c8 <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    11b0:	23 30       	cpi	r18, 0x03	; 3
    11b2:	60 f0       	brcs	.+24     	; 0x11cc <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_PRESCALER_DIV4_gc;
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0b c0       	rjmp	.+22     	; 0x11ce <spi_xmega_set_baud_div+0x70>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    11b8:	93 e0       	ldi	r25, 0x03	; 3
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    11bc:	92 e0       	ldi	r25, 0x02	; 2
    11be:	07 c0       	rjmp	.+14     	; 0x11ce <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    11c0:	92 e8       	ldi	r25, 0x82	; 130
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    11c8:	91 e8       	ldi	r25, 0x81	; 129
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    11cc:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    11ce:	88 81       	ld	r24, Y
    11d0:	8c 77       	andi	r24, 0x7C	; 124
    11d2:	89 2b       	or	r24, r25
    11d4:	88 83       	st	Y, r24

	return 1;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <spi_xmega_set_baud_div+0x7e>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    11da:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	df 90       	pop	r13
    11ea:	cf 90       	pop	r12
    11ec:	08 95       	ret

000011ee <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    11f2:	e0 91 92 24 	lds	r30, 0x2492
    11f6:	f0 91 93 24 	lds	r31, 0x2493
    11fa:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    11fc:	83 ff       	sbrs	r24, 3
    11fe:	08 c0       	rjmp	.+16     	; 0x1210 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1200:	88 60       	ori	r24, 0x08	; 8
    1202:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1204:	83 e0       	ldi	r24, 0x03	; 3
    1206:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1208:	86 ef       	ldi	r24, 0xF6	; 246
    120a:	80 93 9c 24 	sts	0x249C, r24
    120e:	89 c0       	rjmp	.+274    	; 0x1322 <twim_interrupt_handler+0x134>
    1210:	98 2f       	mov	r25, r24
    1212:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1214:	31 f0       	breq	.+12     	; 0x1222 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	80 93 9c 24 	sts	0x249C, r24
    1220:	80 c0       	rjmp	.+256    	; 0x1322 <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1222:	86 ff       	sbrs	r24, 6
    1224:	45 c0       	rjmp	.+138    	; 0x12b0 <twim_interrupt_handler+0xc2>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1226:	a0 91 94 24 	lds	r26, 0x2494
    122a:	b0 91 95 24 	lds	r27, 0x2495

	if (transfer.addr_count < pkg->addr_length) {
    122e:	80 91 96 24 	lds	r24, 0x2496
    1232:	90 91 97 24 	lds	r25, 0x2497
    1236:	14 96       	adiw	r26, 0x04	; 4
    1238:	2d 91       	ld	r18, X+
    123a:	3c 91       	ld	r19, X
    123c:	15 97       	sbiw	r26, 0x05	; 5
    123e:	82 17       	cp	r24, r18
    1240:	93 07       	cpc	r25, r19
    1242:	6c f4       	brge	.+26     	; 0x125e <twim_interrupt_handler+0x70>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1244:	9c 01       	movw	r18, r24
    1246:	2f 5f       	subi	r18, 0xFF	; 255
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	20 93 96 24 	sts	0x2496, r18
    124e:	30 93 97 24 	sts	0x2497, r19
    1252:	a8 0f       	add	r26, r24
    1254:	b9 1f       	adc	r27, r25
    1256:	11 96       	adiw	r26, 0x01	; 1
    1258:	8c 91       	ld	r24, X
    125a:	87 83       	std	Z+7, r24	; 0x07
    125c:	62 c0       	rjmp	.+196    	; 0x1322 <twim_interrupt_handler+0x134>

	} else if (transfer.data_count < pkg->length) {
    125e:	80 91 98 24 	lds	r24, 0x2498
    1262:	90 91 99 24 	lds	r25, 0x2499
    1266:	18 96       	adiw	r26, 0x08	; 8
    1268:	2d 91       	ld	r18, X+
    126a:	3c 91       	ld	r19, X
    126c:	19 97       	sbiw	r26, 0x09	; 9
    126e:	82 17       	cp	r24, r18
    1270:	93 07       	cpc	r25, r19
    1272:	c8 f4       	brcc	.+50     	; 0x12a6 <twim_interrupt_handler+0xb8>

		if (transfer.read) {
    1274:	20 91 9a 24 	lds	r18, 0x249A
    1278:	22 23       	and	r18, r18
    127a:	21 f0       	breq	.+8      	; 0x1284 <twim_interrupt_handler+0x96>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    127c:	86 81       	ldd	r24, Z+6	; 0x06
    127e:	81 60       	ori	r24, 0x01	; 1
    1280:	86 83       	std	Z+6, r24	; 0x06
    1282:	4f c0       	rjmp	.+158    	; 0x1322 <twim_interrupt_handler+0x134>

		} else {
			const uint8_t * const data = pkg->buffer;
    1284:	16 96       	adiw	r26, 0x06	; 6
    1286:	2d 91       	ld	r18, X+
    1288:	3c 91       	ld	r19, X
    128a:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    128c:	ac 01       	movw	r20, r24
    128e:	4f 5f       	subi	r20, 0xFF	; 255
    1290:	5f 4f       	sbci	r21, 0xFF	; 255
    1292:	40 93 98 24 	sts	0x2498, r20
    1296:	50 93 99 24 	sts	0x2499, r21
    129a:	d9 01       	movw	r26, r18
    129c:	a8 0f       	add	r26, r24
    129e:	b9 1f       	adc	r27, r25
    12a0:	8c 91       	ld	r24, X
    12a2:	87 83       	std	Z+7, r24	; 0x07
    12a4:	3e c0       	rjmp	.+124    	; 0x1322 <twim_interrupt_handler+0x134>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    12a6:	83 e0       	ldi	r24, 0x03	; 3
    12a8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    12aa:	10 92 9c 24 	sts	0x249C, r1
    12ae:	39 c0       	rjmp	.+114    	; 0x1322 <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    12b0:	88 23       	and	r24, r24
    12b2:	a4 f5       	brge	.+104    	; 0x131c <twim_interrupt_handler+0x12e>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    12b4:	a0 91 94 24 	lds	r26, 0x2494
    12b8:	b0 91 95 24 	lds	r27, 0x2495

	if (transfer.data_count < pkg->length) {
    12bc:	80 91 98 24 	lds	r24, 0x2498
    12c0:	90 91 99 24 	lds	r25, 0x2499
    12c4:	18 96       	adiw	r26, 0x08	; 8
    12c6:	2d 91       	ld	r18, X+
    12c8:	3c 91       	ld	r19, X
    12ca:	19 97       	sbiw	r26, 0x09	; 9
    12cc:	82 17       	cp	r24, r18
    12ce:	93 07       	cpc	r25, r19
    12d0:	f8 f4       	brcc	.+62     	; 0x1310 <twim_interrupt_handler+0x122>

		uint8_t * const data = pkg->buffer;
    12d2:	16 96       	adiw	r26, 0x06	; 6
    12d4:	4d 91       	ld	r20, X+
    12d6:	5c 91       	ld	r21, X
    12d8:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    12da:	9c 01       	movw	r18, r24
    12dc:	2f 5f       	subi	r18, 0xFF	; 255
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	20 93 98 24 	sts	0x2498, r18
    12e4:	30 93 99 24 	sts	0x2499, r19
    12e8:	67 81       	ldd	r22, Z+7	; 0x07
    12ea:	ea 01       	movw	r28, r20
    12ec:	c8 0f       	add	r28, r24
    12ee:	d9 1f       	adc	r29, r25
    12f0:	68 83       	st	Y, r22

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    12f2:	18 96       	adiw	r26, 0x08	; 8
    12f4:	8d 91       	ld	r24, X+
    12f6:	9c 91       	ld	r25, X
    12f8:	19 97       	sbiw	r26, 0x09	; 9
    12fa:	28 17       	cp	r18, r24
    12fc:	39 07       	cpc	r19, r25
    12fe:	18 f4       	brcc	.+6      	; 0x1306 <twim_interrupt_handler+0x118>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	83 83       	std	Z+3, r24	; 0x03
    1304:	0e c0       	rjmp	.+28     	; 0x1322 <twim_interrupt_handler+0x134>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1306:	87 e0       	ldi	r24, 0x07	; 7
    1308:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    130a:	10 92 9c 24 	sts	0x249C, r1
    130e:	09 c0       	rjmp	.+18     	; 0x1322 <twim_interrupt_handler+0x134>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1314:	89 ef       	ldi	r24, 0xF9	; 249
    1316:	80 93 9c 24 	sts	0x249C, r24
    131a:	03 c0       	rjmp	.+6      	; 0x1322 <twim_interrupt_handler+0x134>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    131c:	8b ef       	ldi	r24, 0xFB	; 251
    131e:	80 93 9c 24 	sts	0x249C, r24
	}
}
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	08 95       	ret

00001328 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1328:	1f 92       	push	r1
    132a:	0f 92       	push	r0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	2f 93       	push	r18
    1334:	3f 93       	push	r19
    1336:	4f 93       	push	r20
    1338:	5f 93       	push	r21
    133a:	6f 93       	push	r22
    133c:	7f 93       	push	r23
    133e:	8f 93       	push	r24
    1340:	9f 93       	push	r25
    1342:	af 93       	push	r26
    1344:	bf 93       	push	r27
    1346:	ef 93       	push	r30
    1348:	ff 93       	push	r31
    134a:	51 df       	rcall	.-350    	; 0x11ee <twim_interrupt_handler>
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	bf 91       	pop	r27
    1352:	af 91       	pop	r26
    1354:	9f 91       	pop	r25
    1356:	8f 91       	pop	r24
    1358:	7f 91       	pop	r23
    135a:	6f 91       	pop	r22
    135c:	5f 91       	pop	r21
    135e:	4f 91       	pop	r20
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	ef 93       	push	r30
    138e:	ff 93       	push	r31
    1390:	2e df       	rcall	.-420    	; 0x11ee <twim_interrupt_handler>
    1392:	ff 91       	pop	r31
    1394:	ef 91       	pop	r30
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	7f 91       	pop	r23
    13a0:	6f 91       	pop	r22
    13a2:	5f 91       	pop	r21
    13a4:	4f 91       	pop	r20
    13a6:	3f 91       	pop	r19
    13a8:	2f 91       	pop	r18
    13aa:	0f 90       	pop	r0
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	0f 90       	pop	r0
    13b0:	1f 90       	pop	r1
    13b2:	18 95       	reti

000013b4 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    13b4:	4f 92       	push	r4
    13b6:	5f 92       	push	r5
    13b8:	6f 92       	push	r6
    13ba:	7f 92       	push	r7
    13bc:	8f 92       	push	r8
    13be:	9f 92       	push	r9
    13c0:	af 92       	push	r10
    13c2:	bf 92       	push	r11
    13c4:	cf 92       	push	r12
    13c6:	df 92       	push	r13
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	ec 01       	movw	r28, r24
    13d6:	4a 01       	movw	r8, r20
    13d8:	5b 01       	movw	r10, r22
    13da:	28 01       	movw	r4, r16
    13dc:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    13de:	d9 01       	movw	r26, r18
    13e0:	c8 01       	movw	r24, r16
    13e2:	68 94       	set
    13e4:	12 f8       	bld	r1, 2
    13e6:	b6 95       	lsr	r27
    13e8:	a7 95       	ror	r26
    13ea:	97 95       	ror	r25
    13ec:	87 95       	ror	r24
    13ee:	16 94       	lsr	r1
    13f0:	d1 f7       	brne	.-12     	; 0x13e6 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    13f2:	b9 01       	movw	r22, r18
    13f4:	a8 01       	movw	r20, r16
    13f6:	03 2e       	mov	r0, r19
    13f8:	36 e1       	ldi	r19, 0x16	; 22
    13fa:	76 95       	lsr	r23
    13fc:	67 95       	ror	r22
    13fe:	57 95       	ror	r21
    1400:	47 95       	ror	r20
    1402:	3a 95       	dec	r19
    1404:	d1 f7       	brne	.-12     	; 0x13fa <usart_set_baudrate+0x46>
    1406:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1408:	2c 81       	ldd	r18, Y+4	; 0x04
    140a:	22 fd       	sbrc	r18, 2
    140c:	08 c0       	rjmp	.+16     	; 0x141e <usart_set_baudrate+0x6a>
		max_rate /= 2;
    140e:	b6 95       	lsr	r27
    1410:	a7 95       	ror	r26
    1412:	97 95       	ror	r25
    1414:	87 95       	ror	r24
		min_rate /= 2;
    1416:	76 95       	lsr	r23
    1418:	67 95       	ror	r22
    141a:	57 95       	ror	r21
    141c:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    141e:	88 15       	cp	r24, r8
    1420:	99 05       	cpc	r25, r9
    1422:	aa 05       	cpc	r26, r10
    1424:	bb 05       	cpc	r27, r11
    1426:	08 f4       	brcc	.+2      	; 0x142a <usart_set_baudrate+0x76>
    1428:	a6 c0       	rjmp	.+332    	; 0x1576 <usart_set_baudrate+0x1c2>
    142a:	84 16       	cp	r8, r20
    142c:	95 06       	cpc	r9, r21
    142e:	a6 06       	cpc	r10, r22
    1430:	b7 06       	cpc	r11, r23
    1432:	08 f4       	brcc	.+2      	; 0x1436 <usart_set_baudrate+0x82>
    1434:	a2 c0       	rjmp	.+324    	; 0x157a <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	82 fd       	sbrc	r24, 2
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <usart_set_baudrate+0x90>
		baud *= 2;
    143c:	88 0c       	add	r8, r8
    143e:	99 1c       	adc	r9, r9
    1440:	aa 1c       	adc	r10, r10
    1442:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1444:	c3 01       	movw	r24, r6
    1446:	b2 01       	movw	r22, r4
    1448:	a5 01       	movw	r20, r10
    144a:	94 01       	movw	r18, r8
    144c:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1450:	2f 3f       	cpi	r18, 0xFF	; 255
    1452:	31 05       	cpc	r19, r1
    1454:	41 05       	cpc	r20, r1
    1456:	51 05       	cpc	r21, r1
    1458:	08 f4       	brcc	.+2      	; 0x145c <usart_set_baudrate+0xa8>
    145a:	91 c0       	rjmp	.+290    	; 0x157e <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    145c:	c1 2c       	mov	r12, r1
    145e:	d1 2c       	mov	r13, r1
    1460:	76 01       	movw	r14, r12
    1462:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1464:	19 ef       	ldi	r17, 0xF9	; 249
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    1468:	2c 15       	cp	r18, r12
    146a:	3d 05       	cpc	r19, r13
    146c:	4e 05       	cpc	r20, r14
    146e:	5f 05       	cpc	r21, r15
    1470:	68 f0       	brcs	.+26     	; 0x148c <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    1472:	cc 0c       	add	r12, r12
    1474:	dd 1c       	adc	r13, r13
    1476:	ee 1c       	adc	r14, r14
    1478:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    147a:	1d 3f       	cpi	r17, 0xFD	; 253
    147c:	14 f4       	brge	.+4      	; 0x1482 <usart_set_baudrate+0xce>
			limit |= 1;
    147e:	68 94       	set
    1480:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1482:	1f 5f       	subi	r17, 0xFF	; 255
    1484:	17 30       	cpi	r17, 0x07	; 7
    1486:	81 f7       	brne	.-32     	; 0x1468 <usart_set_baudrate+0xb4>
    1488:	21 2f       	mov	r18, r17
    148a:	50 c0       	rjmp	.+160    	; 0x152c <usart_set_baudrate+0x178>
    148c:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    148e:	11 23       	and	r17, r17
    1490:	0c f0       	brlt	.+2      	; 0x1494 <usart_set_baudrate+0xe0>
    1492:	4c c0       	rjmp	.+152    	; 0x152c <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1494:	d5 01       	movw	r26, r10
    1496:	c4 01       	movw	r24, r8
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	aa 1f       	adc	r26, r26
    149e:	bb 1f       	adc	r27, r27
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	aa 1f       	adc	r26, r26
    14a6:	bb 1f       	adc	r27, r27
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	aa 1f       	adc	r26, r26
    14ae:	bb 1f       	adc	r27, r27
    14b0:	48 1a       	sub	r4, r24
    14b2:	59 0a       	sbc	r5, r25
    14b4:	6a 0a       	sbc	r6, r26
    14b6:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    14b8:	1e 3f       	cpi	r17, 0xFE	; 254
    14ba:	f4 f4       	brge	.+60     	; 0x14f8 <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    14bc:	6d ef       	ldi	r22, 0xFD	; 253
    14be:	7f ef       	ldi	r23, 0xFF	; 255
    14c0:	61 1b       	sub	r22, r17
    14c2:	71 09       	sbc	r23, r1
    14c4:	17 fd       	sbrc	r17, 7
    14c6:	73 95       	inc	r23
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <usart_set_baudrate+0x11e>
    14ca:	44 0c       	add	r4, r4
    14cc:	55 1c       	adc	r5, r5
    14ce:	66 1c       	adc	r6, r6
    14d0:	77 1c       	adc	r7, r7
    14d2:	6a 95       	dec	r22
    14d4:	d2 f7       	brpl	.-12     	; 0x14ca <usart_set_baudrate+0x116>
    14d6:	d5 01       	movw	r26, r10
    14d8:	c4 01       	movw	r24, r8
    14da:	b6 95       	lsr	r27
    14dc:	a7 95       	ror	r26
    14de:	97 95       	ror	r25
    14e0:	87 95       	ror	r24
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	64 0d       	add	r22, r4
    14e8:	75 1d       	adc	r23, r5
    14ea:	86 1d       	adc	r24, r6
    14ec:	97 1d       	adc	r25, r7
    14ee:	a5 01       	movw	r20, r10
    14f0:	94 01       	movw	r18, r8
    14f2:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__udivmodsi4>
    14f6:	36 c0       	rjmp	.+108    	; 0x1564 <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
    14f8:	23 e0       	ldi	r18, 0x03	; 3
    14fa:	21 0f       	add	r18, r17
    14fc:	d5 01       	movw	r26, r10
    14fe:	c4 01       	movw	r24, r8
    1500:	04 c0       	rjmp	.+8      	; 0x150a <usart_set_baudrate+0x156>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	aa 1f       	adc	r26, r26
    1508:	bb 1f       	adc	r27, r27
    150a:	2a 95       	dec	r18
    150c:	d2 f7       	brpl	.-12     	; 0x1502 <usart_set_baudrate+0x14e>
    150e:	9c 01       	movw	r18, r24
    1510:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    1512:	b6 95       	lsr	r27
    1514:	a7 95       	ror	r26
    1516:	97 95       	ror	r25
    1518:	87 95       	ror	r24
    151a:	bc 01       	movw	r22, r24
    151c:	cd 01       	movw	r24, r26
    151e:	64 0d       	add	r22, r4
    1520:	75 1d       	adc	r23, r5
    1522:	86 1d       	adc	r24, r6
    1524:	97 1d       	adc	r25, r7
    1526:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__udivmodsi4>
    152a:	1c c0       	rjmp	.+56     	; 0x1564 <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    152c:	2d 5f       	subi	r18, 0xFD	; 253
    152e:	d5 01       	movw	r26, r10
    1530:	c4 01       	movw	r24, r8
    1532:	04 c0       	rjmp	.+8      	; 0x153c <usart_set_baudrate+0x188>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	aa 1f       	adc	r26, r26
    153a:	bb 1f       	adc	r27, r27
    153c:	2a 95       	dec	r18
    153e:	d2 f7       	brpl	.-12     	; 0x1534 <usart_set_baudrate+0x180>
    1540:	9c 01       	movw	r18, r24
    1542:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1544:	b6 95       	lsr	r27
    1546:	a7 95       	ror	r26
    1548:	97 95       	ror	r25
    154a:	87 95       	ror	r24
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	64 0d       	add	r22, r4
    1552:	75 1d       	adc	r23, r5
    1554:	86 1d       	adc	r24, r6
    1556:	97 1d       	adc	r25, r7
    1558:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__udivmodsi4>
    155c:	21 50       	subi	r18, 0x01	; 1
    155e:	31 09       	sbc	r19, r1
    1560:	41 09       	sbc	r20, r1
    1562:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1564:	83 2f       	mov	r24, r19
    1566:	8f 70       	andi	r24, 0x0F	; 15
    1568:	12 95       	swap	r17
    156a:	10 7f       	andi	r17, 0xF0	; 240
    156c:	18 2b       	or	r17, r24
    156e:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1570:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	18 c0       	rjmp	.+48     	; 0x15a6 <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	16 c0       	rjmp	.+44     	; 0x15a6 <usart_set_baudrate+0x1f2>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    157e:	d5 01       	movw	r26, r10
    1580:	c4 01       	movw	r24, r8
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	aa 1f       	adc	r26, r26
    1588:	bb 1f       	adc	r27, r27
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	aa 1f       	adc	r26, r26
    1590:	bb 1f       	adc	r27, r27
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	aa 1f       	adc	r26, r26
    1598:	bb 1f       	adc	r27, r27
    159a:	48 1a       	sub	r4, r24
    159c:	59 0a       	sbc	r5, r25
    159e:	6a 0a       	sbc	r6, r26
    15a0:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    15a2:	19 ef       	ldi	r17, 0xF9	; 249
    15a4:	8b cf       	rjmp	.-234    	; 0x14bc <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	bf 90       	pop	r11
    15b8:	af 90       	pop	r10
    15ba:	9f 90       	pop	r9
    15bc:	8f 90       	pop	r8
    15be:	7f 90       	pop	r7
    15c0:	6f 90       	pop	r6
    15c2:	5f 90       	pop	r5
    15c4:	4f 90       	pop	r4
    15c6:	08 95       	ret

000015c8 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	ec 01       	movw	r28, r24
    15d2:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	09 f4       	brne	.+2      	; 0x15da <usart_init_rs232+0x12>
    15d8:	be c0       	rjmp	.+380    	; 0x1756 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    15da:	80 3c       	cpi	r24, 0xC0	; 192
    15dc:	91 05       	cpc	r25, r1
    15de:	21 f4       	brne	.+8      	; 0x15e8 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    15e0:	60 e1       	ldi	r22, 0x10	; 16
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	b4 d7       	rcall	.+3944   	; 0x254e <sysclk_enable_module>
    15e6:	b7 c0       	rjmp	.+366    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    15e8:	c1 15       	cp	r28, r1
    15ea:	84 e0       	ldi	r24, 0x04	; 4
    15ec:	d8 07       	cpc	r29, r24
    15ee:	21 f4       	brne	.+8      	; 0x15f8 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    15f0:	64 e0       	ldi	r22, 0x04	; 4
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	ac d7       	rcall	.+3928   	; 0x254e <sysclk_enable_module>
    15f6:	af c0       	rjmp	.+350    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    15f8:	c0 38       	cpi	r28, 0x80	; 128
    15fa:	e1 e0       	ldi	r30, 0x01	; 1
    15fc:	de 07       	cpc	r29, r30
    15fe:	21 f4       	brne	.+8      	; 0x1608 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1600:	62 e0       	ldi	r22, 0x02	; 2
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	a4 d7       	rcall	.+3912   	; 0x254e <sysclk_enable_module>
    1606:	a7 c0       	rjmp	.+334    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1608:	c1 15       	cp	r28, r1
    160a:	f1 e0       	ldi	r31, 0x01	; 1
    160c:	df 07       	cpc	r29, r31
    160e:	21 f4       	brne	.+8      	; 0x1618 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	9c d7       	rcall	.+3896   	; 0x254e <sysclk_enable_module>
    1616:	9f c0       	rjmp	.+318    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1618:	c0 38       	cpi	r28, 0x80	; 128
    161a:	83 e0       	ldi	r24, 0x03	; 3
    161c:	d8 07       	cpc	r29, r24
    161e:	21 f4       	brne	.+8      	; 0x1628 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	94 d7       	rcall	.+3880   	; 0x254e <sysclk_enable_module>
    1626:	97 c0       	rjmp	.+302    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1628:	c1 15       	cp	r28, r1
    162a:	e2 e0       	ldi	r30, 0x02	; 2
    162c:	de 07       	cpc	r29, r30
    162e:	21 f4       	brne	.+8      	; 0x1638 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1630:	62 e0       	ldi	r22, 0x02	; 2
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	8c d7       	rcall	.+3864   	; 0x254e <sysclk_enable_module>
    1636:	8f c0       	rjmp	.+286    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1638:	c0 32       	cpi	r28, 0x20	; 32
    163a:	f3 e0       	ldi	r31, 0x03	; 3
    163c:	df 07       	cpc	r29, r31
    163e:	21 f4       	brne	.+8      	; 0x1648 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1640:	64 e0       	ldi	r22, 0x04	; 4
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	84 d7       	rcall	.+3848   	; 0x254e <sysclk_enable_module>
    1646:	87 c0       	rjmp	.+270    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1648:	c1 15       	cp	r28, r1
    164a:	88 e0       	ldi	r24, 0x08	; 8
    164c:	d8 07       	cpc	r29, r24
    164e:	21 f4       	brne	.+8      	; 0x1658 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1650:	61 e0       	ldi	r22, 0x01	; 1
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	7c d7       	rcall	.+3832   	; 0x254e <sysclk_enable_module>
    1656:	7f c0       	rjmp	.+254    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1658:	c1 15       	cp	r28, r1
    165a:	e9 e0       	ldi	r30, 0x09	; 9
    165c:	de 07       	cpc	r29, r30
    165e:	21 f4       	brne	.+8      	; 0x1668 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	84 e0       	ldi	r24, 0x04	; 4
    1664:	74 d7       	rcall	.+3816   	; 0x254e <sysclk_enable_module>
    1666:	77 c0       	rjmp	.+238    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1668:	c1 15       	cp	r28, r1
    166a:	fa e0       	ldi	r31, 0x0A	; 10
    166c:	df 07       	cpc	r29, r31
    166e:	21 f4       	brne	.+8      	; 0x1678 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1670:	61 e0       	ldi	r22, 0x01	; 1
    1672:	85 e0       	ldi	r24, 0x05	; 5
    1674:	6c d7       	rcall	.+3800   	; 0x254e <sysclk_enable_module>
    1676:	6f c0       	rjmp	.+222    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1678:	c0 34       	cpi	r28, 0x40	; 64
    167a:	88 e0       	ldi	r24, 0x08	; 8
    167c:	d8 07       	cpc	r29, r24
    167e:	21 f4       	brne	.+8      	; 0x1688 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1680:	62 e0       	ldi	r22, 0x02	; 2
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	64 d7       	rcall	.+3784   	; 0x254e <sysclk_enable_module>
    1686:	67 c0       	rjmp	.+206    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1688:	c0 34       	cpi	r28, 0x40	; 64
    168a:	e9 e0       	ldi	r30, 0x09	; 9
    168c:	de 07       	cpc	r29, r30
    168e:	21 f4       	brne	.+8      	; 0x1698 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1690:	62 e0       	ldi	r22, 0x02	; 2
    1692:	84 e0       	ldi	r24, 0x04	; 4
    1694:	5c d7       	rcall	.+3768   	; 0x254e <sysclk_enable_module>
    1696:	5f c0       	rjmp	.+190    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1698:	c0 39       	cpi	r28, 0x90	; 144
    169a:	f8 e0       	ldi	r31, 0x08	; 8
    169c:	df 07       	cpc	r29, r31
    169e:	21 f4       	brne	.+8      	; 0x16a8 <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    16a0:	64 e0       	ldi	r22, 0x04	; 4
    16a2:	83 e0       	ldi	r24, 0x03	; 3
    16a4:	54 d7       	rcall	.+3752   	; 0x254e <sysclk_enable_module>
    16a6:	57 c0       	rjmp	.+174    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    16a8:	c0 39       	cpi	r28, 0x90	; 144
    16aa:	89 e0       	ldi	r24, 0x09	; 9
    16ac:	d8 07       	cpc	r29, r24
    16ae:	21 f4       	brne	.+8      	; 0x16b8 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    16b0:	64 e0       	ldi	r22, 0x04	; 4
    16b2:	84 e0       	ldi	r24, 0x04	; 4
    16b4:	4c d7       	rcall	.+3736   	; 0x254e <sysclk_enable_module>
    16b6:	4f c0       	rjmp	.+158    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    16b8:	c0 39       	cpi	r28, 0x90	; 144
    16ba:	ea e0       	ldi	r30, 0x0A	; 10
    16bc:	de 07       	cpc	r29, r30
    16be:	21 f4       	brne	.+8      	; 0x16c8 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    16c0:	64 e0       	ldi	r22, 0x04	; 4
    16c2:	85 e0       	ldi	r24, 0x05	; 5
    16c4:	44 d7       	rcall	.+3720   	; 0x254e <sysclk_enable_module>
    16c6:	47 c0       	rjmp	.+142    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    16c8:	c0 3c       	cpi	r28, 0xC0	; 192
    16ca:	f8 e0       	ldi	r31, 0x08	; 8
    16cc:	df 07       	cpc	r29, r31
    16ce:	21 f4       	brne	.+8      	; 0x16d8 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    16d0:	68 e0       	ldi	r22, 0x08	; 8
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	3c d7       	rcall	.+3704   	; 0x254e <sysclk_enable_module>
    16d6:	3f c0       	rjmp	.+126    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    16d8:	c0 3c       	cpi	r28, 0xC0	; 192
    16da:	89 e0       	ldi	r24, 0x09	; 9
    16dc:	d8 07       	cpc	r29, r24
    16de:	21 f4       	brne	.+8      	; 0x16e8 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    16e0:	68 e0       	ldi	r22, 0x08	; 8
    16e2:	84 e0       	ldi	r24, 0x04	; 4
    16e4:	34 d7       	rcall	.+3688   	; 0x254e <sysclk_enable_module>
    16e6:	37 c0       	rjmp	.+110    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    16e8:	c0 3a       	cpi	r28, 0xA0	; 160
    16ea:	e8 e0       	ldi	r30, 0x08	; 8
    16ec:	de 07       	cpc	r29, r30
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    16f0:	60 e1       	ldi	r22, 0x10	; 16
    16f2:	83 e0       	ldi	r24, 0x03	; 3
    16f4:	2c d7       	rcall	.+3672   	; 0x254e <sysclk_enable_module>
    16f6:	2f c0       	rjmp	.+94     	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    16f8:	c0 3a       	cpi	r28, 0xA0	; 160
    16fa:	f9 e0       	ldi	r31, 0x09	; 9
    16fc:	df 07       	cpc	r29, r31
    16fe:	21 f4       	brne	.+8      	; 0x1708 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1700:	60 e1       	ldi	r22, 0x10	; 16
    1702:	84 e0       	ldi	r24, 0x04	; 4
    1704:	24 d7       	rcall	.+3656   	; 0x254e <sysclk_enable_module>
    1706:	27 c0       	rjmp	.+78     	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1708:	c0 3a       	cpi	r28, 0xA0	; 160
    170a:	8a e0       	ldi	r24, 0x0A	; 10
    170c:	d8 07       	cpc	r29, r24
    170e:	21 f4       	brne	.+8      	; 0x1718 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1710:	60 e1       	ldi	r22, 0x10	; 16
    1712:	85 e0       	ldi	r24, 0x05	; 5
    1714:	1c d7       	rcall	.+3640   	; 0x254e <sysclk_enable_module>
    1716:	1f c0       	rjmp	.+62     	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1718:	c0 3b       	cpi	r28, 0xB0	; 176
    171a:	e8 e0       	ldi	r30, 0x08	; 8
    171c:	de 07       	cpc	r29, r30
    171e:	21 f4       	brne	.+8      	; 0x1728 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1720:	60 e2       	ldi	r22, 0x20	; 32
    1722:	83 e0       	ldi	r24, 0x03	; 3
    1724:	14 d7       	rcall	.+3624   	; 0x254e <sysclk_enable_module>
    1726:	17 c0       	rjmp	.+46     	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1728:	c0 3b       	cpi	r28, 0xB0	; 176
    172a:	f9 e0       	ldi	r31, 0x09	; 9
    172c:	df 07       	cpc	r29, r31
    172e:	21 f4       	brne	.+8      	; 0x1738 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1730:	60 e2       	ldi	r22, 0x20	; 32
    1732:	84 e0       	ldi	r24, 0x04	; 4
    1734:	0c d7       	rcall	.+3608   	; 0x254e <sysclk_enable_module>
    1736:	0f c0       	rjmp	.+30     	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1738:	c0 38       	cpi	r28, 0x80	; 128
    173a:	84 e0       	ldi	r24, 0x04	; 4
    173c:	d8 07       	cpc	r29, r24
    173e:	21 f4       	brne	.+8      	; 0x1748 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1740:	60 e4       	ldi	r22, 0x40	; 64
    1742:	83 e0       	ldi	r24, 0x03	; 3
    1744:	04 d7       	rcall	.+3592   	; 0x254e <sysclk_enable_module>
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1748:	c0 3a       	cpi	r28, 0xA0	; 160
    174a:	e4 e0       	ldi	r30, 0x04	; 4
    174c:	de 07       	cpc	r29, r30
    174e:	19 f4       	brne	.+6      	; 0x1756 <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1750:	60 e4       	ldi	r22, 0x40	; 64
    1752:	85 e0       	ldi	r24, 0x05	; 5
    1754:	fc d6       	rcall	.+3576   	; 0x254e <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	8f 73       	andi	r24, 0x3F	; 63
    175a:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    175c:	f8 01       	movw	r30, r16
    175e:	94 81       	ldd	r25, Z+4	; 0x04
    1760:	85 81       	ldd	r24, Z+5	; 0x05
    1762:	89 2b       	or	r24, r25
    1764:	96 81       	ldd	r25, Z+6	; 0x06
    1766:	99 23       	and	r25, r25
    1768:	11 f0       	breq	.+4      	; 0x176e <usart_init_rs232+0x1a6>
    176a:	98 e0       	ldi	r25, 0x08	; 8
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <usart_init_rs232+0x1a8>
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	89 2b       	or	r24, r25
    1772:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1774:	f8 01       	movw	r30, r16
    1776:	40 81       	ld	r20, Z
    1778:	51 81       	ldd	r21, Z+1	; 0x01
    177a:	62 81       	ldd	r22, Z+2	; 0x02
    177c:	73 81       	ldd	r23, Z+3	; 0x03
    177e:	00 e0       	ldi	r16, 0x00	; 0
    1780:	1c e6       	ldi	r17, 0x6C	; 108
    1782:	2c ed       	ldi	r18, 0xDC	; 220
    1784:	32 e0       	ldi	r19, 0x02	; 2
    1786:	ce 01       	movw	r24, r28
    1788:	15 de       	rcall	.-982    	; 0x13b4 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    178a:	9c 81       	ldd	r25, Y+4	; 0x04
    178c:	98 60       	ori	r25, 0x08	; 8
    178e:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	90 61       	ori	r25, 0x10	; 16
    1794:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	0f 91       	pop	r16
    179e:	08 95       	ret

000017a0 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    17a0:	81 11       	cpse	r24, r1
    17a2:	18 c0       	rjmp	.+48     	; 0x17d4 <udd_sleep_mode+0x34>
    17a4:	90 91 c8 25 	lds	r25, 0x25C8
    17a8:	99 23       	and	r25, r25
    17aa:	89 f0       	breq	.+34     	; 0x17ce <udd_sleep_mode+0x2e>
    17ac:	9f b7       	in	r25, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	e7 e8       	ldi	r30, 0x87	; 135
    17b2:	f6 e2       	ldi	r31, 0x26	; 38
    17b4:	20 81       	ld	r18, Z
    17b6:	21 50       	subi	r18, 0x01	; 1
    17b8:	20 83       	st	Z, r18
    17ba:	9f bf       	out	0x3f, r25	; 63
    17bc:	08 c0       	rjmp	.+16     	; 0x17ce <udd_sleep_mode+0x2e>
    17be:	9f b7       	in	r25, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	e7 e8       	ldi	r30, 0x87	; 135
    17c4:	f6 e2       	ldi	r31, 0x26	; 38
    17c6:	20 81       	ld	r18, Z
    17c8:	2f 5f       	subi	r18, 0xFF	; 255
    17ca:	20 83       	st	Z, r18
    17cc:	9f bf       	out	0x3f, r25	; 63
    17ce:	80 93 c8 25 	sts	0x25C8, r24
    17d2:	08 95       	ret
    17d4:	90 91 c8 25 	lds	r25, 0x25C8
    17d8:	99 23       	and	r25, r25
    17da:	89 f3       	breq	.-30     	; 0x17be <udd_sleep_mode+0x1e>
    17dc:	f8 cf       	rjmp	.-16     	; 0x17ce <udd_sleep_mode+0x2e>

000017de <udd_ctrl_init>:
    17de:	0f 93       	push	r16
    17e0:	e8 ec       	ldi	r30, 0xC8	; 200
    17e2:	f4 e0       	ldi	r31, 0x04	; 4
    17e4:	80 81       	ld	r24, Z
    17e6:	8f 7d       	andi	r24, 0xDF	; 223
    17e8:	80 83       	st	Z, r24
    17ea:	80 81       	ld	r24, Z
    17ec:	8f 7d       	andi	r24, 0xDF	; 223
    17ee:	80 83       	st	Z, r24
    17f0:	ec e9       	ldi	r30, 0x9C	; 156
    17f2:	f5 e2       	ldi	r31, 0x25	; 37
    17f4:	02 e0       	ldi	r16, 0x02	; 2
    17f6:	05 93       	las	Z, r16
    17f8:	10 92 9e 25 	sts	0x259E, r1
    17fc:	10 92 9f 25 	sts	0x259F, r1
    1800:	00 e2       	ldi	r16, 0x20	; 32
    1802:	06 93       	lac	Z, r16
    1804:	00 e4       	ldi	r16, 0x40	; 64
    1806:	06 93       	lac	Z, r16
    1808:	e4 e9       	ldi	r30, 0x94	; 148
    180a:	f5 e2       	ldi	r31, 0x25	; 37
    180c:	00 e2       	ldi	r16, 0x20	; 32
    180e:	06 93       	lac	Z, r16
    1810:	00 e4       	ldi	r16, 0x40	; 64
    1812:	06 93       	lac	Z, r16
    1814:	10 92 82 26 	sts	0x2682, r1
    1818:	10 92 83 26 	sts	0x2683, r1
    181c:	10 92 84 26 	sts	0x2684, r1
    1820:	10 92 85 26 	sts	0x2685, r1
    1824:	10 92 80 26 	sts	0x2680, r1
    1828:	10 92 81 26 	sts	0x2681, r1
    182c:	10 92 86 25 	sts	0x2586, r1
    1830:	0f 91       	pop	r16
    1832:	08 95       	ret

00001834 <udd_ctrl_stall_data>:
    1834:	0f 93       	push	r16
    1836:	85 e0       	ldi	r24, 0x05	; 5
    1838:	80 93 86 25 	sts	0x2586, r24
    183c:	ed e9       	ldi	r30, 0x9D	; 157
    183e:	f5 e2       	ldi	r31, 0x25	; 37
    1840:	04 e0       	ldi	r16, 0x04	; 4
    1842:	05 93       	las	Z, r16
    1844:	e5 e9       	ldi	r30, 0x95	; 149
    1846:	f5 e2       	ldi	r31, 0x25	; 37
    1848:	04 e0       	ldi	r16, 0x04	; 4
    184a:	05 93       	las	Z, r16
    184c:	0f 91       	pop	r16
    184e:	08 95       	ret

00001850 <udd_ctrl_send_zlp_in>:
    1850:	0f 93       	push	r16
    1852:	83 e0       	ldi	r24, 0x03	; 3
    1854:	80 93 86 25 	sts	0x2586, r24
    1858:	10 92 9e 25 	sts	0x259E, r1
    185c:	10 92 9f 25 	sts	0x259F, r1
    1860:	ec e9       	ldi	r30, 0x9C	; 156
    1862:	f5 e2       	ldi	r31, 0x25	; 37
    1864:	02 e0       	ldi	r16, 0x02	; 2
    1866:	06 93       	lac	Z, r16
    1868:	0f 91       	pop	r16
    186a:	08 95       	ret

0000186c <udd_ctrl_endofrequest>:
    186c:	e0 91 82 26 	lds	r30, 0x2682
    1870:	f0 91 83 26 	lds	r31, 0x2683
    1874:	30 97       	sbiw	r30, 0x00	; 0
    1876:	09 f0       	breq	.+2      	; 0x187a <udd_ctrl_endofrequest+0xe>
    1878:	09 95       	icall
    187a:	08 95       	ret

0000187c <udd_ctrl_in_sent>:
    187c:	0f 93       	push	r16
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	80 91 86 25 	lds	r24, 0x2586
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	19 f4       	brne	.+6      	; 0x1890 <udd_ctrl_in_sent+0x14>
    188a:	f0 df       	rcall	.-32     	; 0x186c <udd_ctrl_endofrequest>
    188c:	a8 df       	rcall	.-176    	; 0x17de <udd_ctrl_init>
    188e:	60 c0       	rjmp	.+192    	; 0x1950 <udd_ctrl_in_sent+0xd4>
    1890:	80 91 82 25 	lds	r24, 0x2582
    1894:	90 91 83 25 	lds	r25, 0x2583
    1898:	c0 91 80 26 	lds	r28, 0x2680
    189c:	d0 91 81 26 	lds	r29, 0x2681
    18a0:	c8 1b       	sub	r28, r24
    18a2:	d9 0b       	sbc	r29, r25
    18a4:	71 f5       	brne	.+92     	; 0x1902 <udd_ctrl_in_sent+0x86>
    18a6:	20 91 84 25 	lds	r18, 0x2584
    18aa:	30 91 85 25 	lds	r19, 0x2585
    18ae:	82 0f       	add	r24, r18
    18b0:	93 1f       	adc	r25, r19
    18b2:	80 93 84 25 	sts	0x2584, r24
    18b6:	90 93 85 25 	sts	0x2585, r25
    18ba:	20 91 7c 26 	lds	r18, 0x267C
    18be:	30 91 7d 26 	lds	r19, 0x267D
    18c2:	82 17       	cp	r24, r18
    18c4:	93 07       	cpc	r25, r19
    18c6:	21 f0       	breq	.+8      	; 0x18d0 <udd_ctrl_in_sent+0x54>
    18c8:	80 91 9d 24 	lds	r24, 0x249D
    18cc:	88 23       	and	r24, r24
    18ce:	41 f0       	breq	.+16     	; 0x18e0 <udd_ctrl_in_sent+0x64>
    18d0:	84 e0       	ldi	r24, 0x04	; 4
    18d2:	80 93 86 25 	sts	0x2586, r24
    18d6:	e4 e9       	ldi	r30, 0x94	; 148
    18d8:	f5 e2       	ldi	r31, 0x25	; 37
    18da:	02 e0       	ldi	r16, 0x02	; 2
    18dc:	06 93       	lac	Z, r16
    18de:	38 c0       	rjmp	.+112    	; 0x1950 <udd_ctrl_in_sent+0xd4>
    18e0:	e0 91 84 26 	lds	r30, 0x2684
    18e4:	f0 91 85 26 	lds	r31, 0x2685
    18e8:	30 97       	sbiw	r30, 0x00	; 0
    18ea:	99 f0       	breq	.+38     	; 0x1912 <udd_ctrl_in_sent+0x96>
    18ec:	09 95       	icall
    18ee:	88 23       	and	r24, r24
    18f0:	81 f0       	breq	.+32     	; 0x1912 <udd_ctrl_in_sent+0x96>
    18f2:	10 92 82 25 	sts	0x2582, r1
    18f6:	10 92 83 25 	sts	0x2583, r1
    18fa:	c0 91 80 26 	lds	r28, 0x2680
    18fe:	d0 91 81 26 	lds	r29, 0x2681
    1902:	c0 34       	cpi	r28, 0x40	; 64
    1904:	d1 05       	cpc	r29, r1
    1906:	28 f0       	brcs	.+10     	; 0x1912 <udd_ctrl_in_sent+0x96>
    1908:	10 92 9d 24 	sts	0x249D, r1
    190c:	c0 e4       	ldi	r28, 0x40	; 64
    190e:	d0 e0       	ldi	r29, 0x00	; 0
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <udd_ctrl_in_sent+0x9c>
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	80 93 9d 24 	sts	0x249D, r24
    1918:	c0 93 9e 25 	sts	0x259E, r28
    191c:	d0 93 9f 25 	sts	0x259F, r29
    1920:	80 91 82 25 	lds	r24, 0x2582
    1924:	90 91 83 25 	lds	r25, 0x2583
    1928:	20 91 7e 26 	lds	r18, 0x267E
    192c:	30 91 7f 26 	lds	r19, 0x267F
    1930:	28 0f       	add	r18, r24
    1932:	39 1f       	adc	r19, r25
    1934:	20 93 a0 25 	sts	0x25A0, r18
    1938:	30 93 a1 25 	sts	0x25A1, r19
    193c:	c8 0f       	add	r28, r24
    193e:	d9 1f       	adc	r29, r25
    1940:	c0 93 82 25 	sts	0x2582, r28
    1944:	d0 93 83 25 	sts	0x2583, r29
    1948:	ec e9       	ldi	r30, 0x9C	; 156
    194a:	f5 e2       	ldi	r31, 0x25	; 37
    194c:	02 e0       	ldi	r16, 0x02	; 2
    194e:	06 93       	lac	Z, r16
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	0f 91       	pop	r16
    1956:	08 95       	ret

00001958 <udd_ep_get_size>:
    1958:	fc 01       	movw	r30, r24
    195a:	81 81       	ldd	r24, Z+1	; 0x01
    195c:	87 70       	andi	r24, 0x07	; 7
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	fc 01       	movw	r30, r24
    1962:	31 97       	sbiw	r30, 0x01	; 1
    1964:	e7 30       	cpi	r30, 0x07	; 7
    1966:	f1 05       	cpc	r31, r1
    1968:	20 f4       	brcc	.+8      	; 0x1972 <udd_ep_get_size+0x1a>
    196a:	e2 50       	subi	r30, 0x02	; 2
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__tablejump2__>
    1972:	88 e0       	ldi	r24, 0x08	; 8
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	08 95       	ret
    1978:	80 e2       	ldi	r24, 0x20	; 32
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	08 95       	ret
    197e:	80 e4       	ldi	r24, 0x40	; 64
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	08 95       	ret
    1984:	80 e8       	ldi	r24, 0x80	; 128
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	08 95       	ret
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	08 95       	ret
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	92 e0       	ldi	r25, 0x02	; 2
    1994:	08 95       	ret
    1996:	8f ef       	ldi	r24, 0xFF	; 255
    1998:	93 e0       	ldi	r25, 0x03	; 3
    199a:	08 95       	ret
    199c:	80 e1       	ldi	r24, 0x10	; 16
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	08 95       	ret

000019a2 <udd_ep_get_job>:
    19a2:	28 2f       	mov	r18, r24
    19a4:	2f 70       	andi	r18, 0x0F	; 15
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	22 0f       	add	r18, r18
    19aa:	33 1f       	adc	r19, r19
    19ac:	99 27       	eor	r25, r25
    19ae:	87 fd       	sbrc	r24, 7
    19b0:	90 95       	com	r25
    19b2:	88 27       	eor	r24, r24
    19b4:	99 0f       	add	r25, r25
    19b6:	88 1f       	adc	r24, r24
    19b8:	99 27       	eor	r25, r25
    19ba:	82 0f       	add	r24, r18
    19bc:	93 1f       	adc	r25, r19
    19be:	02 97       	sbiw	r24, 0x02	; 2
    19c0:	9c 01       	movw	r18, r24
    19c2:	22 0f       	add	r18, r18
    19c4:	33 1f       	adc	r19, r19
    19c6:	22 0f       	add	r18, r18
    19c8:	33 1f       	adc	r19, r19
    19ca:	22 0f       	add	r18, r18
    19cc:	33 1f       	adc	r19, r19
    19ce:	82 0f       	add	r24, r18
    19d0:	93 1f       	adc	r25, r19
    19d2:	82 5e       	subi	r24, 0xE2	; 226
    19d4:	9a 4d       	sbci	r25, 0xDA	; 218
    19d6:	08 95       	ret

000019d8 <udd_ctrl_interrupt_tc_setup>:
    19d8:	0f 93       	push	r16
    19da:	cf 93       	push	r28
    19dc:	80 91 cc 04 	lds	r24, 0x04CC
    19e0:	80 ff       	sbrs	r24, 0
    19e2:	62 c0       	rjmp	.+196    	; 0x1aa8 <udd_ctrl_interrupt_tc_setup+0xd0>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 93 cc 04 	sts	0x04CC, r24
    19ea:	e4 e9       	ldi	r30, 0x94	; 148
    19ec:	f5 e2       	ldi	r31, 0x25	; 37
    19ee:	00 e8       	ldi	r16, 0x80	; 128
    19f0:	06 93       	lac	Z, r16
    19f2:	ec e9       	ldi	r30, 0x9C	; 156
    19f4:	f5 e2       	ldi	r31, 0x25	; 37
    19f6:	00 e8       	ldi	r16, 0x80	; 128
    19f8:	06 93       	lac	Z, r16
    19fa:	80 93 ca 04 	sts	0x04CA, r24
    19fe:	e4 e9       	ldi	r30, 0x94	; 148
    1a00:	f5 e2       	ldi	r31, 0x25	; 37
    1a02:	00 e1       	ldi	r16, 0x10	; 16
    1a04:	06 93       	lac	Z, r16
    1a06:	80 91 86 25 	lds	r24, 0x2586
    1a0a:	88 23       	and	r24, r24
    1a0c:	29 f0       	breq	.+10     	; 0x1a18 <udd_ctrl_interrupt_tc_setup+0x40>
    1a0e:	83 50       	subi	r24, 0x03	; 3
    1a10:	82 30       	cpi	r24, 0x02	; 2
    1a12:	08 f4       	brcc	.+2      	; 0x1a16 <udd_ctrl_interrupt_tc_setup+0x3e>
    1a14:	2b df       	rcall	.-426    	; 0x186c <udd_ctrl_endofrequest>
    1a16:	e3 de       	rcall	.-570    	; 0x17de <udd_ctrl_init>
    1a18:	80 91 96 25 	lds	r24, 0x2596
    1a1c:	90 91 97 25 	lds	r25, 0x2597
    1a20:	08 97       	sbiw	r24, 0x08	; 8
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <udd_ctrl_interrupt_tc_setup+0x4e>
    1a24:	43 c0       	rjmp	.+134    	; 0x1aac <udd_ctrl_interrupt_tc_setup+0xd4>
    1a26:	88 e0       	ldi	r24, 0x08	; 8
    1a28:	e2 e4       	ldi	r30, 0x42	; 66
    1a2a:	f5 e2       	ldi	r31, 0x25	; 37
    1a2c:	a6 e7       	ldi	r26, 0x76	; 118
    1a2e:	b6 e2       	ldi	r27, 0x26	; 38
    1a30:	01 90       	ld	r0, Z+
    1a32:	0d 92       	st	X+, r0
    1a34:	8a 95       	dec	r24
    1a36:	e1 f7       	brne	.-8      	; 0x1a30 <udd_ctrl_interrupt_tc_setup+0x58>
    1a38:	e8 ec       	ldi	r30, 0xC8	; 200
    1a3a:	f4 e0       	ldi	r31, 0x04	; 4
    1a3c:	80 81       	ld	r24, Z
    1a3e:	80 62       	ori	r24, 0x20	; 32
    1a40:	80 83       	st	Z, r24
    1a42:	80 81       	ld	r24, Z
    1a44:	80 62       	ori	r24, 0x20	; 32
    1a46:	80 83       	st	Z, r24
    1a48:	c2 d8       	rcall	.-3708   	; 0xbce <udc_process_setup>
    1a4a:	c8 2f       	mov	r28, r24
    1a4c:	81 11       	cpse	r24, r1
    1a4e:	03 c0       	rjmp	.+6      	; 0x1a56 <udd_ctrl_interrupt_tc_setup+0x7e>
    1a50:	f1 de       	rcall	.-542    	; 0x1834 <udd_ctrl_stall_data>
    1a52:	c1 e0       	ldi	r28, 0x01	; 1
    1a54:	2c c0       	rjmp	.+88     	; 0x1aae <udd_ctrl_interrupt_tc_setup+0xd6>
    1a56:	80 91 76 26 	lds	r24, 0x2676
    1a5a:	88 23       	and	r24, r24
    1a5c:	6c f4       	brge	.+26     	; 0x1a78 <udd_ctrl_interrupt_tc_setup+0xa0>
    1a5e:	10 92 84 25 	sts	0x2584, r1
    1a62:	10 92 85 25 	sts	0x2585, r1
    1a66:	10 92 82 25 	sts	0x2582, r1
    1a6a:	10 92 83 25 	sts	0x2583, r1
    1a6e:	82 e0       	ldi	r24, 0x02	; 2
    1a70:	80 93 86 25 	sts	0x2586, r24
    1a74:	03 df       	rcall	.-506    	; 0x187c <udd_ctrl_in_sent>
    1a76:	1b c0       	rjmp	.+54     	; 0x1aae <udd_ctrl_interrupt_tc_setup+0xd6>
    1a78:	20 91 7c 26 	lds	r18, 0x267C
    1a7c:	30 91 7d 26 	lds	r19, 0x267D
    1a80:	23 2b       	or	r18, r19
    1a82:	11 f4       	brne	.+4      	; 0x1a88 <udd_ctrl_interrupt_tc_setup+0xb0>
    1a84:	e5 de       	rcall	.-566    	; 0x1850 <udd_ctrl_send_zlp_in>
    1a86:	13 c0       	rjmp	.+38     	; 0x1aae <udd_ctrl_interrupt_tc_setup+0xd6>
    1a88:	10 92 84 25 	sts	0x2584, r1
    1a8c:	10 92 85 25 	sts	0x2585, r1
    1a90:	10 92 82 25 	sts	0x2582, r1
    1a94:	10 92 83 25 	sts	0x2583, r1
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	80 93 86 25 	sts	0x2586, r24
    1a9e:	e4 e9       	ldi	r30, 0x94	; 148
    1aa0:	f5 e2       	ldi	r31, 0x25	; 37
    1aa2:	02 e0       	ldi	r16, 0x02	; 2
    1aa4:	06 93       	lac	Z, r16
    1aa6:	03 c0       	rjmp	.+6      	; 0x1aae <udd_ctrl_interrupt_tc_setup+0xd6>
    1aa8:	c0 e0       	ldi	r28, 0x00	; 0
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <udd_ctrl_interrupt_tc_setup+0xd6>
    1aac:	c1 e0       	ldi	r28, 0x01	; 1
    1aae:	8c 2f       	mov	r24, r28
    1ab0:	cf 91       	pop	r28
    1ab2:	0f 91       	pop	r16
    1ab4:	08 95       	ret

00001ab6 <udd_ep_trans_complet>:
    1ab6:	bf 92       	push	r11
    1ab8:	cf 92       	push	r12
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	b8 2e       	mov	r11, r24
    1aca:	6b df       	rcall	.-298    	; 0x19a2 <udd_ep_get_job>
    1acc:	ec 01       	movw	r28, r24
    1ace:	1b 2d       	mov	r17, r11
    1ad0:	11 1f       	adc	r17, r17
    1ad2:	11 27       	eor	r17, r17
    1ad4:	11 1f       	adc	r17, r17
    1ad6:	8b 2d       	mov	r24, r11
    1ad8:	8f 70       	andi	r24, 0x0F	; 15
    1ada:	e8 2e       	mov	r14, r24
    1adc:	f1 2c       	mov	r15, r1
    1ade:	ee 0c       	add	r14, r14
    1ae0:	ff 1c       	adc	r15, r15
    1ae2:	e1 0e       	add	r14, r17
    1ae4:	f1 1c       	adc	r15, r1
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	9c 01       	movw	r18, r24
    1af6:	2c 56       	subi	r18, 0x6C	; 108
    1af8:	3a 4d       	sbci	r19, 0xDA	; 218
    1afa:	79 01       	movw	r14, r18
    1afc:	c9 01       	movw	r24, r18
    1afe:	2c df       	rcall	.-424    	; 0x1958 <udd_ep_get_size>
    1b00:	6c 01       	movw	r12, r24
    1b02:	11 23       	and	r17, r17
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <udd_ep_trans_complet+0x52>
    1b06:	5b c0       	rjmp	.+182    	; 0x1bbe <udd_ep_trans_complet+0x108>
    1b08:	d7 01       	movw	r26, r14
    1b0a:	16 96       	adiw	r26, 0x06	; 6
    1b0c:	2d 91       	ld	r18, X+
    1b0e:	3c 91       	ld	r19, X
    1b10:	17 97       	sbiw	r26, 0x07	; 7
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	28 0f       	add	r18, r24
    1b18:	39 1f       	adc	r19, r25
    1b1a:	2d 83       	std	Y+5, r18	; 0x05
    1b1c:	3e 83       	std	Y+6, r19	; 0x06
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	28 17       	cp	r18, r24
    1b24:	39 07       	cpc	r19, r25
    1b26:	c9 f1       	breq	.+114    	; 0x1b9a <udd_ep_trans_complet+0xe4>
    1b28:	fc 01       	movw	r30, r24
    1b2a:	e2 1b       	sub	r30, r18
    1b2c:	f3 0b       	sbc	r31, r19
    1b2e:	9f 01       	movw	r18, r30
    1b30:	21 15       	cp	r18, r1
    1b32:	f4 e0       	ldi	r31, 0x04	; 4
    1b34:	3f 07       	cpc	r19, r31
    1b36:	40 f0       	brcs	.+16     	; 0x1b48 <udd_ep_trans_complet+0x92>
    1b38:	2f ef       	ldi	r18, 0xFF	; 255
    1b3a:	33 e0       	ldi	r19, 0x03	; 3
    1b3c:	c9 01       	movw	r24, r18
    1b3e:	b6 01       	movw	r22, r12
    1b40:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__udivmodhi4>
    1b44:	28 1b       	sub	r18, r24
    1b46:	39 0b       	sbc	r19, r25
    1b48:	88 81       	ld	r24, Y
    1b4a:	81 ff       	sbrs	r24, 1
    1b4c:	0a c0       	rjmp	.+20     	; 0x1b62 <udd_ep_trans_complet+0xac>
    1b4e:	c9 01       	movw	r24, r18
    1b50:	b6 01       	movw	r22, r12
    1b52:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__udivmodhi4>
    1b56:	41 e0       	ldi	r20, 0x01	; 1
    1b58:	89 2b       	or	r24, r25
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <udd_ep_trans_complet+0xa8>
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	94 2f       	mov	r25, r20
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <udd_ep_trans_complet+0xae>
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	88 81       	ld	r24, Y
    1b66:	90 fb       	bst	r25, 0
    1b68:	81 f9       	bld	r24, 1
    1b6a:	88 83       	st	Y, r24
    1b6c:	d7 01       	movw	r26, r14
    1b6e:	16 96       	adiw	r26, 0x06	; 6
    1b70:	1d 92       	st	X+, r1
    1b72:	1c 92       	st	X, r1
    1b74:	17 97       	sbiw	r26, 0x07	; 7
    1b76:	12 96       	adiw	r26, 0x02	; 2
    1b78:	2d 93       	st	X+, r18
    1b7a:	3c 93       	st	X, r19
    1b7c:	13 97       	sbiw	r26, 0x03	; 3
    1b7e:	29 81       	ldd	r18, Y+1	; 0x01
    1b80:	3a 81       	ldd	r19, Y+2	; 0x02
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	9e 81       	ldd	r25, Y+6	; 0x06
    1b86:	82 0f       	add	r24, r18
    1b88:	93 1f       	adc	r25, r19
    1b8a:	14 96       	adiw	r26, 0x04	; 4
    1b8c:	8d 93       	st	X+, r24
    1b8e:	9c 93       	st	X, r25
    1b90:	15 97       	sbiw	r26, 0x05	; 5
    1b92:	f7 01       	movw	r30, r14
    1b94:	02 e0       	ldi	r16, 0x02	; 2
    1b96:	06 93       	lac	Z, r16
    1b98:	98 c0       	rjmp	.+304    	; 0x1cca <udd_ep_trans_complet+0x214>
    1b9a:	88 81       	ld	r24, Y
    1b9c:	81 ff       	sbrs	r24, 1
    1b9e:	87 c0       	rjmp	.+270    	; 0x1cae <udd_ep_trans_complet+0x1f8>
    1ba0:	8d 7f       	andi	r24, 0xFD	; 253
    1ba2:	88 83       	st	Y, r24
    1ba4:	d7 01       	movw	r26, r14
    1ba6:	16 96       	adiw	r26, 0x06	; 6
    1ba8:	1d 92       	st	X+, r1
    1baa:	1c 92       	st	X, r1
    1bac:	17 97       	sbiw	r26, 0x07	; 7
    1bae:	12 96       	adiw	r26, 0x02	; 2
    1bb0:	1d 92       	st	X+, r1
    1bb2:	1c 92       	st	X, r1
    1bb4:	13 97       	sbiw	r26, 0x03	; 3
    1bb6:	f7 01       	movw	r30, r14
    1bb8:	02 e0       	ldi	r16, 0x02	; 2
    1bba:	06 93       	lac	Z, r16
    1bbc:	86 c0       	rjmp	.+268    	; 0x1cca <udd_ep_trans_complet+0x214>
    1bbe:	d7 01       	movw	r26, r14
    1bc0:	12 96       	adiw	r26, 0x02	; 2
    1bc2:	0d 91       	ld	r16, X+
    1bc4:	1c 91       	ld	r17, X
    1bc6:	13 97       	sbiw	r26, 0x03	; 3
    1bc8:	88 81       	ld	r24, Y
    1bca:	82 ff       	sbrs	r24, 2
    1bcc:	15 c0       	rjmp	.+42     	; 0x1bf8 <udd_ep_trans_complet+0x142>
    1bce:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd2:	2d 81       	ldd	r18, Y+5	; 0x05
    1bd4:	3e 81       	ldd	r19, Y+6	; 0x06
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	b6 01       	movw	r22, r12
    1bdc:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__udivmodhi4>
    1be0:	b0 e4       	ldi	r27, 0x40	; 64
    1be2:	bb 9e       	mul	r11, r27
    1be4:	b0 01       	movw	r22, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	62 5a       	subi	r22, 0xA2	; 162
    1bea:	7b 4d       	sbci	r23, 0xDB	; 219
    1bec:	ac 01       	movw	r20, r24
    1bee:	cf 01       	movw	r24, r30
    1bf0:	82 0f       	add	r24, r18
    1bf2:	93 1f       	adc	r25, r19
    1bf4:	0e 94 78 20 	call	0x40f0	; 0x40f0 <memcpy>
    1bf8:	2d 81       	ldd	r18, Y+5	; 0x05
    1bfa:	3e 81       	ldd	r19, Y+6	; 0x06
    1bfc:	20 0f       	add	r18, r16
    1bfe:	31 1f       	adc	r19, r17
    1c00:	2d 83       	std	Y+5, r18	; 0x05
    1c02:	3e 83       	std	Y+6, r19	; 0x06
    1c04:	eb 81       	ldd	r30, Y+3	; 0x03
    1c06:	fc 81       	ldd	r31, Y+4	; 0x04
    1c08:	e2 17       	cp	r30, r18
    1c0a:	f3 07       	cpc	r31, r19
    1c0c:	10 f4       	brcc	.+4      	; 0x1c12 <udd_ep_trans_complet+0x15c>
    1c0e:	ed 83       	std	Y+5, r30	; 0x05
    1c10:	fe 83       	std	Y+6, r31	; 0x06
    1c12:	d7 01       	movw	r26, r14
    1c14:	16 96       	adiw	r26, 0x06	; 6
    1c16:	8d 91       	ld	r24, X+
    1c18:	9c 91       	ld	r25, X
    1c1a:	17 97       	sbiw	r26, 0x07	; 7
    1c1c:	80 17       	cp	r24, r16
    1c1e:	91 07       	cpc	r25, r17
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <udd_ep_trans_complet+0x16e>
    1c22:	45 c0       	rjmp	.+138    	; 0x1cae <udd_ep_trans_complet+0x1f8>
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
    1c26:	9e 81       	ldd	r25, Y+6	; 0x06
    1c28:	e8 17       	cp	r30, r24
    1c2a:	f9 07       	cpc	r31, r25
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <udd_ep_trans_complet+0x17a>
    1c2e:	3f c0       	rjmp	.+126    	; 0x1cae <udd_ep_trans_complet+0x1f8>
    1c30:	e8 1b       	sub	r30, r24
    1c32:	f9 0b       	sbc	r31, r25
    1c34:	e1 15       	cp	r30, r1
    1c36:	b4 e0       	ldi	r27, 0x04	; 4
    1c38:	fb 07       	cpc	r31, r27
    1c3a:	48 f0       	brcs	.+18     	; 0x1c4e <udd_ep_trans_complet+0x198>
    1c3c:	ef ef       	ldi	r30, 0xFF	; 255
    1c3e:	f3 e0       	ldi	r31, 0x03	; 3
    1c40:	cf 01       	movw	r24, r30
    1c42:	b6 01       	movw	r22, r12
    1c44:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__udivmodhi4>
    1c48:	e8 1b       	sub	r30, r24
    1c4a:	f9 0b       	sbc	r31, r25
    1c4c:	06 c0       	rjmp	.+12     	; 0x1c5a <udd_ep_trans_complet+0x1a4>
    1c4e:	cf 01       	movw	r24, r30
    1c50:	b6 01       	movw	r22, r12
    1c52:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__udivmodhi4>
    1c56:	e8 1b       	sub	r30, r24
    1c58:	f9 0b       	sbc	r31, r25
    1c5a:	d7 01       	movw	r26, r14
    1c5c:	12 96       	adiw	r26, 0x02	; 2
    1c5e:	1d 92       	st	X+, r1
    1c60:	1c 92       	st	X, r1
    1c62:	13 97       	sbiw	r26, 0x03	; 3
    1c64:	ec 15       	cp	r30, r12
    1c66:	fd 05       	cpc	r31, r13
    1c68:	78 f4       	brcc	.+30     	; 0x1c88 <udd_ep_trans_complet+0x1d2>
    1c6a:	88 81       	ld	r24, Y
    1c6c:	84 60       	ori	r24, 0x04	; 4
    1c6e:	88 83       	st	Y, r24
    1c70:	b0 e4       	ldi	r27, 0x40	; 64
    1c72:	bb 9e       	mul	r11, r27
    1c74:	c0 01       	movw	r24, r0
    1c76:	11 24       	eor	r1, r1
    1c78:	82 5a       	subi	r24, 0xA2	; 162
    1c7a:	9b 4d       	sbci	r25, 0xDB	; 219
    1c7c:	f7 01       	movw	r30, r14
    1c7e:	84 83       	std	Z+4, r24	; 0x04
    1c80:	95 83       	std	Z+5, r25	; 0x05
    1c82:	c6 82       	std	Z+6, r12	; 0x06
    1c84:	d7 82       	std	Z+7, r13	; 0x07
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <udd_ep_trans_complet+0x1f0>
    1c88:	29 81       	ldd	r18, Y+1	; 0x01
    1c8a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	82 0f       	add	r24, r18
    1c92:	93 1f       	adc	r25, r19
    1c94:	d7 01       	movw	r26, r14
    1c96:	14 96       	adiw	r26, 0x04	; 4
    1c98:	8d 93       	st	X+, r24
    1c9a:	9c 93       	st	X, r25
    1c9c:	15 97       	sbiw	r26, 0x05	; 5
    1c9e:	16 96       	adiw	r26, 0x06	; 6
    1ca0:	ed 93       	st	X+, r30
    1ca2:	fc 93       	st	X, r31
    1ca4:	17 97       	sbiw	r26, 0x07	; 7
    1ca6:	f7 01       	movw	r30, r14
    1ca8:	02 e0       	ldi	r16, 0x02	; 2
    1caa:	06 93       	lac	Z, r16
    1cac:	0e c0       	rjmp	.+28     	; 0x1cca <udd_ep_trans_complet+0x214>
    1cae:	88 81       	ld	r24, Y
    1cb0:	80 ff       	sbrs	r24, 0
    1cb2:	0b c0       	rjmp	.+22     	; 0x1cca <udd_ep_trans_complet+0x214>
    1cb4:	8e 7f       	andi	r24, 0xFE	; 254
    1cb6:	88 83       	st	Y, r24
    1cb8:	ef 81       	ldd	r30, Y+7	; 0x07
    1cba:	f8 85       	ldd	r31, Y+8	; 0x08
    1cbc:	30 97       	sbiw	r30, 0x00	; 0
    1cbe:	29 f0       	breq	.+10     	; 0x1cca <udd_ep_trans_complet+0x214>
    1cc0:	6d 81       	ldd	r22, Y+5	; 0x05
    1cc2:	7e 81       	ldd	r23, Y+6	; 0x06
    1cc4:	4b 2d       	mov	r20, r11
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	09 95       	icall
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	ff 90       	pop	r15
    1cd4:	ef 90       	pop	r14
    1cd6:	df 90       	pop	r13
    1cd8:	cf 90       	pop	r12
    1cda:	bf 90       	pop	r11
    1cdc:	08 95       	ret

00001cde <udd_attach>:
    1cde:	cf 93       	push	r28
    1ce0:	cf b7       	in	r28, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	5c dd       	rcall	.-1352   	; 0x17a0 <udd_sleep_mode>
    1ce8:	ea ec       	ldi	r30, 0xCA	; 202
    1cea:	f4 e0       	ldi	r31, 0x04	; 4
    1cec:	80 e4       	ldi	r24, 0x40	; 64
    1cee:	80 83       	st	Z, r24
    1cf0:	80 e2       	ldi	r24, 0x20	; 32
    1cf2:	80 83       	st	Z, r24
    1cf4:	e1 ec       	ldi	r30, 0xC1	; 193
    1cf6:	f4 e0       	ldi	r31, 0x04	; 4
    1cf8:	80 81       	ld	r24, Z
    1cfa:	81 60       	ori	r24, 0x01	; 1
    1cfc:	80 83       	st	Z, r24
    1cfe:	a9 ec       	ldi	r26, 0xC9	; 201
    1d00:	b4 e0       	ldi	r27, 0x04	; 4
    1d02:	8c 91       	ld	r24, X
    1d04:	82 60       	ori	r24, 0x02	; 2
    1d06:	8c 93       	st	X, r24
    1d08:	e8 ec       	ldi	r30, 0xC8	; 200
    1d0a:	f4 e0       	ldi	r31, 0x04	; 4
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 64       	ori	r24, 0x40	; 64
    1d10:	80 83       	st	Z, r24
    1d12:	8c 91       	ld	r24, X
    1d14:	81 60       	ori	r24, 0x01	; 1
    1d16:	8c 93       	st	X, r24
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 68       	ori	r24, 0x80	; 128
    1d1c:	80 83       	st	Z, r24
    1d1e:	cf bf       	out	0x3f, r28	; 63
    1d20:	cf 91       	pop	r28
    1d22:	08 95       	ret

00001d24 <udd_enable>:
    1d24:	cf 93       	push	r28
    1d26:	80 e3       	ldi	r24, 0x30	; 48
    1d28:	1e d4       	rcall	.+2108   	; 0x2566 <sysclk_enable_usb>
    1d2a:	e0 ec       	ldi	r30, 0xC0	; 192
    1d2c:	f4 e0       	ldi	r31, 0x04	; 4
    1d2e:	80 81       	ld	r24, Z
    1d30:	80 64       	ori	r24, 0x40	; 64
    1d32:	80 83       	st	Z, r24
    1d34:	cf b7       	in	r28, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	10 92 95 25 	sts	0x2595, r1
    1d3c:	10 92 9d 25 	sts	0x259D, r1
    1d40:	10 92 a5 25 	sts	0x25A5, r1
    1d44:	10 92 ad 25 	sts	0x25AD, r1
    1d48:	10 92 b5 25 	sts	0x25B5, r1
    1d4c:	10 92 bd 25 	sts	0x25BD, r1
    1d50:	ee e1       	ldi	r30, 0x1E	; 30
    1d52:	f5 e2       	ldi	r31, 0x25	; 37
    1d54:	80 81       	ld	r24, Z
    1d56:	8e 7f       	andi	r24, 0xFE	; 254
    1d58:	80 83       	st	Z, r24
    1d5a:	e7 e2       	ldi	r30, 0x27	; 39
    1d5c:	f5 e2       	ldi	r31, 0x25	; 37
    1d5e:	80 81       	ld	r24, Z
    1d60:	8e 7f       	andi	r24, 0xFE	; 254
    1d62:	80 83       	st	Z, r24
    1d64:	e0 e3       	ldi	r30, 0x30	; 48
    1d66:	f5 e2       	ldi	r31, 0x25	; 37
    1d68:	80 81       	ld	r24, Z
    1d6a:	8e 7f       	andi	r24, 0xFE	; 254
    1d6c:	80 83       	st	Z, r24
    1d6e:	e9 e3       	ldi	r30, 0x39	; 57
    1d70:	f5 e2       	ldi	r31, 0x25	; 37
    1d72:	80 81       	ld	r24, Z
    1d74:	8e 7f       	andi	r24, 0xFE	; 254
    1d76:	80 83       	st	Z, r24
    1d78:	6a e1       	ldi	r22, 0x1A	; 26
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	0e d4       	rcall	.+2076   	; 0x259c <nvm_read_byte>
    1d80:	8f 3f       	cpi	r24, 0xFF	; 255
    1d82:	19 f0       	breq	.+6      	; 0x1d8a <udd_enable+0x66>
    1d84:	80 93 fa 04 	sts	0x04FA, r24
    1d88:	03 c0       	rjmp	.+6      	; 0x1d90 <udd_enable+0x6c>
    1d8a:	8f e1       	ldi	r24, 0x1F	; 31
    1d8c:	80 93 fa 04 	sts	0x04FA, r24
    1d90:	6b e1       	ldi	r22, 0x1B	; 27
    1d92:	70 e0       	ldi	r23, 0x00	; 0
    1d94:	82 e0       	ldi	r24, 0x02	; 2
    1d96:	02 d4       	rcall	.+2052   	; 0x259c <nvm_read_byte>
    1d98:	8f 3f       	cpi	r24, 0xFF	; 255
    1d9a:	19 f0       	breq	.+6      	; 0x1da2 <udd_enable+0x7e>
    1d9c:	80 93 fb 04 	sts	0x04FB, r24
    1da0:	03 c0       	rjmp	.+6      	; 0x1da8 <udd_enable+0x84>
    1da2:	8f e1       	ldi	r24, 0x1F	; 31
    1da4:	80 93 fb 04 	sts	0x04FB, r24
    1da8:	e0 ec       	ldi	r30, 0xC0	; 192
    1daa:	f4 e0       	ldi	r31, 0x04	; 4
    1dac:	80 81       	ld	r24, Z
    1dae:	82 60       	ori	r24, 0x02	; 2
    1db0:	80 83       	st	Z, r24
    1db2:	80 81       	ld	r24, Z
    1db4:	80 68       	ori	r24, 0x80	; 128
    1db6:	80 83       	st	Z, r24
    1db8:	80 81       	ld	r24, Z
    1dba:	80 61       	ori	r24, 0x10	; 16
    1dbc:	80 83       	st	Z, r24
    1dbe:	84 e9       	ldi	r24, 0x94	; 148
    1dc0:	95 e2       	ldi	r25, 0x25	; 37
    1dc2:	86 83       	std	Z+6, r24	; 0x06
    1dc4:	97 83       	std	Z+7, r25	; 0x07
    1dc6:	80 81       	ld	r24, Z
    1dc8:	80 62       	ori	r24, 0x20	; 32
    1dca:	80 83       	st	Z, r24
    1dcc:	8f ef       	ldi	r24, 0xFF	; 255
    1dce:	80 93 c5 04 	sts	0x04C5, r24
    1dd2:	e8 ec       	ldi	r30, 0xC8	; 200
    1dd4:	f4 e0       	ldi	r31, 0x04	; 4
    1dd6:	80 81       	ld	r24, Z
    1dd8:	81 60       	ori	r24, 0x01	; 1
    1dda:	80 83       	st	Z, r24
    1ddc:	10 92 c8 25 	sts	0x25C8, r1
    1de0:	8f b7       	in	r24, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	eb e8       	ldi	r30, 0x8B	; 139
    1de6:	f6 e2       	ldi	r31, 0x26	; 38
    1de8:	90 81       	ld	r25, Z
    1dea:	9f 5f       	subi	r25, 0xFF	; 255
    1dec:	90 83       	st	Z, r25
    1dee:	8f bf       	out	0x3f, r24	; 63
    1df0:	76 df       	rcall	.-276    	; 0x1cde <udd_attach>
    1df2:	cf bf       	out	0x3f, r28	; 63
    1df4:	cf 91       	pop	r28
    1df6:	08 95       	ret

00001df8 <udd_is_high_speed>:
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	08 95       	ret

00001dfc <udd_set_address>:
    1dfc:	80 93 c3 04 	sts	0x04C3, r24
    1e00:	08 95       	ret

00001e02 <udd_getaddress>:
    1e02:	80 91 c3 04 	lds	r24, 0x04C3
    1e06:	08 95       	ret

00001e08 <udd_get_frame_number>:
    1e08:	80 91 c4 25 	lds	r24, 0x25C4
    1e0c:	90 91 c5 25 	lds	r25, 0x25C5
    1e10:	08 95       	ret

00001e12 <udd_get_micro_frame_number>:
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	08 95       	ret

00001e18 <udd_set_setup_payload>:
    1e18:	80 93 7e 26 	sts	0x267E, r24
    1e1c:	90 93 7f 26 	sts	0x267F, r25
    1e20:	60 93 80 26 	sts	0x2680, r22
    1e24:	70 93 81 26 	sts	0x2681, r23
    1e28:	08 95       	ret

00001e2a <udd_ep_alloc>:
    1e2a:	e8 2f       	mov	r30, r24
    1e2c:	ef 70       	andi	r30, 0x0F	; 15
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	ee 0f       	add	r30, r30
    1e32:	ff 1f       	adc	r31, r31
    1e34:	99 27       	eor	r25, r25
    1e36:	87 fd       	sbrc	r24, 7
    1e38:	90 95       	com	r25
    1e3a:	88 27       	eor	r24, r24
    1e3c:	99 0f       	add	r25, r25
    1e3e:	88 1f       	adc	r24, r24
    1e40:	99 27       	eor	r25, r25
    1e42:	e8 0f       	add	r30, r24
    1e44:	f9 1f       	adc	r31, r25
    1e46:	ee 0f       	add	r30, r30
    1e48:	ff 1f       	adc	r31, r31
    1e4a:	ee 0f       	add	r30, r30
    1e4c:	ff 1f       	adc	r31, r31
    1e4e:	ee 0f       	add	r30, r30
    1e50:	ff 1f       	adc	r31, r31
    1e52:	ec 56       	subi	r30, 0x6C	; 108
    1e54:	fa 4d       	sbci	r31, 0xDA	; 218
    1e56:	81 81       	ldd	r24, Z+1	; 0x01
    1e58:	80 7c       	andi	r24, 0xC0	; 192
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <udd_ep_alloc+0x34>
    1e5c:	43 c0       	rjmp	.+134    	; 0x1ee4 <udd_ep_alloc+0xba>
    1e5e:	63 70       	andi	r22, 0x03	; 3
    1e60:	61 30       	cpi	r22, 0x01	; 1
    1e62:	29 f0       	breq	.+10     	; 0x1e6e <udd_ep_alloc+0x44>
    1e64:	10 f4       	brcc	.+4      	; 0x1e6a <udd_ep_alloc+0x40>
    1e66:	80 e4       	ldi	r24, 0x40	; 64
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <udd_ep_alloc+0x46>
    1e6a:	80 e8       	ldi	r24, 0x80	; 128
    1e6c:	01 c0       	rjmp	.+2      	; 0x1e70 <udd_ep_alloc+0x46>
    1e6e:	80 ec       	ldi	r24, 0xC0	; 192
    1e70:	40 38       	cpi	r20, 0x80	; 128
    1e72:	51 05       	cpc	r21, r1
    1e74:	e1 f0       	breq	.+56     	; 0x1eae <udd_ep_alloc+0x84>
    1e76:	50 f4       	brcc	.+20     	; 0x1e8c <udd_ep_alloc+0x62>
    1e78:	40 32       	cpi	r20, 0x20	; 32
    1e7a:	51 05       	cpc	r21, r1
    1e7c:	a1 f0       	breq	.+40     	; 0x1ea6 <udd_ep_alloc+0x7c>
    1e7e:	40 34       	cpi	r20, 0x40	; 64
    1e80:	51 05       	cpc	r21, r1
    1e82:	99 f0       	breq	.+38     	; 0x1eaa <udd_ep_alloc+0x80>
    1e84:	40 31       	cpi	r20, 0x10	; 16
    1e86:	51 05       	cpc	r21, r1
    1e88:	61 f4       	brne	.+24     	; 0x1ea2 <udd_ep_alloc+0x78>
    1e8a:	19 c0       	rjmp	.+50     	; 0x1ebe <udd_ep_alloc+0x94>
    1e8c:	41 15       	cp	r20, r1
    1e8e:	92 e0       	ldi	r25, 0x02	; 2
    1e90:	59 07       	cpc	r21, r25
    1e92:	89 f0       	breq	.+34     	; 0x1eb6 <udd_ep_alloc+0x8c>
    1e94:	4f 3f       	cpi	r20, 0xFF	; 255
    1e96:	93 e0       	ldi	r25, 0x03	; 3
    1e98:	59 07       	cpc	r21, r25
    1e9a:	79 f0       	breq	.+30     	; 0x1eba <udd_ep_alloc+0x90>
    1e9c:	41 15       	cp	r20, r1
    1e9e:	51 40       	sbci	r21, 0x01	; 1
    1ea0:	41 f0       	breq	.+16     	; 0x1eb2 <udd_ep_alloc+0x88>
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	0d c0       	rjmp	.+26     	; 0x1ec0 <udd_ep_alloc+0x96>
    1ea6:	22 e0       	ldi	r18, 0x02	; 2
    1ea8:	0b c0       	rjmp	.+22     	; 0x1ec0 <udd_ep_alloc+0x96>
    1eaa:	23 e0       	ldi	r18, 0x03	; 3
    1eac:	09 c0       	rjmp	.+18     	; 0x1ec0 <udd_ep_alloc+0x96>
    1eae:	24 e0       	ldi	r18, 0x04	; 4
    1eb0:	07 c0       	rjmp	.+14     	; 0x1ec0 <udd_ep_alloc+0x96>
    1eb2:	25 e0       	ldi	r18, 0x05	; 5
    1eb4:	05 c0       	rjmp	.+10     	; 0x1ec0 <udd_ep_alloc+0x96>
    1eb6:	26 e0       	ldi	r18, 0x06	; 6
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <udd_ep_alloc+0x96>
    1eba:	27 e0       	ldi	r18, 0x07	; 7
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <udd_ep_alloc+0x96>
    1ebe:	21 e0       	ldi	r18, 0x01	; 1
    1ec0:	11 82       	std	Z+1, r1	; 0x01
    1ec2:	96 e0       	ldi	r25, 0x06	; 6
    1ec4:	90 83       	st	Z, r25
    1ec6:	82 2b       	or	r24, r18
    1ec8:	81 83       	std	Z+1, r24	; 0x01
    1eca:	81 81       	ldd	r24, Z+1	; 0x01
    1ecc:	80 7c       	andi	r24, 0xC0	; 192
    1ece:	80 3c       	cpi	r24, 0xC0	; 192
    1ed0:	21 f4       	brne	.+8      	; 0x1eda <udd_ep_alloc+0xb0>
    1ed2:	81 81       	ldd	r24, Z+1	; 0x01
    1ed4:	87 70       	andi	r24, 0x07	; 7
    1ed6:	87 30       	cpi	r24, 0x07	; 7
    1ed8:	39 f0       	breq	.+14     	; 0x1ee8 <udd_ep_alloc+0xbe>
    1eda:	81 81       	ldd	r24, Z+1	; 0x01
    1edc:	80 62       	ori	r24, 0x20	; 32
    1ede:	81 83       	std	Z+1, r24	; 0x01
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	08 95       	ret
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	08 95       	ret
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	08 95       	ret

00001eec <udd_ep_is_halted>:
    1eec:	e8 2f       	mov	r30, r24
    1eee:	ef 70       	andi	r30, 0x0F	; 15
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	ee 0f       	add	r30, r30
    1ef4:	ff 1f       	adc	r31, r31
    1ef6:	99 27       	eor	r25, r25
    1ef8:	87 fd       	sbrc	r24, 7
    1efa:	90 95       	com	r25
    1efc:	88 27       	eor	r24, r24
    1efe:	99 0f       	add	r25, r25
    1f00:	88 1f       	adc	r24, r24
    1f02:	99 27       	eor	r25, r25
    1f04:	e8 0f       	add	r30, r24
    1f06:	f9 1f       	adc	r31, r25
    1f08:	ee 0f       	add	r30, r30
    1f0a:	ff 1f       	adc	r31, r31
    1f0c:	ee 0f       	add	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	ec 56       	subi	r30, 0x6C	; 108
    1f16:	fa 4d       	sbci	r31, 0xDA	; 218
    1f18:	81 81       	ldd	r24, Z+1	; 0x01
    1f1a:	82 fb       	bst	r24, 2
    1f1c:	88 27       	eor	r24, r24
    1f1e:	80 f9       	bld	r24, 0
    1f20:	08 95       	ret

00001f22 <udd_ep_clear_halt>:
    1f22:	e8 2f       	mov	r30, r24
    1f24:	ef 70       	andi	r30, 0x0F	; 15
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	ee 0f       	add	r30, r30
    1f2a:	ff 1f       	adc	r31, r31
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	33 27       	eor	r19, r19
    1f30:	27 fd       	sbrc	r18, 7
    1f32:	30 95       	com	r19
    1f34:	22 27       	eor	r18, r18
    1f36:	33 0f       	add	r19, r19
    1f38:	22 1f       	adc	r18, r18
    1f3a:	33 27       	eor	r19, r19
    1f3c:	e2 0f       	add	r30, r18
    1f3e:	f3 1f       	adc	r31, r19
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	ee 0f       	add	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	ee 0f       	add	r30, r30
    1f4a:	ff 1f       	adc	r31, r31
    1f4c:	ec 56       	subi	r30, 0x6C	; 108
    1f4e:	fa 4d       	sbci	r31, 0xDA	; 218
    1f50:	91 81       	ldd	r25, Z+1	; 0x01
    1f52:	92 ff       	sbrs	r25, 2
    1f54:	0e c0       	rjmp	.+28     	; 0x1f72 <udd_ep_clear_halt+0x50>
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	9b 7f       	andi	r25, 0xFB	; 251
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	22 dd       	rcall	.-1468   	; 0x19a2 <udd_ep_get_job>
    1f5e:	fc 01       	movw	r30, r24
    1f60:	80 81       	ld	r24, Z
    1f62:	80 ff       	sbrs	r24, 0
    1f64:	06 c0       	rjmp	.+12     	; 0x1f72 <udd_ep_clear_halt+0x50>
    1f66:	8e 7f       	andi	r24, 0xFE	; 254
    1f68:	80 83       	st	Z, r24
    1f6a:	07 80       	ldd	r0, Z+7	; 0x07
    1f6c:	f0 85       	ldd	r31, Z+8	; 0x08
    1f6e:	e0 2d       	mov	r30, r0
    1f70:	09 95       	icall
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	08 95       	ret

00001f76 <udd_ep_run>:
    1f76:	7f 92       	push	r7
    1f78:	8f 92       	push	r8
    1f7a:	9f 92       	push	r9
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	98 2e       	mov	r9, r24
    1f92:	86 2e       	mov	r8, r22
    1f94:	5a 01       	movw	r10, r20
    1f96:	69 01       	movw	r12, r18
    1f98:	04 dd       	rcall	.-1528   	; 0x19a2 <udd_ep_get_job>
    1f9a:	7c 01       	movw	r14, r24
    1f9c:	79 2c       	mov	r7, r9
    1f9e:	77 1c       	adc	r7, r7
    1fa0:	77 24       	eor	r7, r7
    1fa2:	77 1c       	adc	r7, r7
    1fa4:	c9 2d       	mov	r28, r9
    1fa6:	cf 70       	andi	r28, 0x0F	; 15
    1fa8:	d0 e0       	ldi	r29, 0x00	; 0
    1faa:	cc 0f       	add	r28, r28
    1fac:	dd 1f       	adc	r29, r29
    1fae:	c7 0d       	add	r28, r7
    1fb0:	d1 1d       	adc	r29, r1
    1fb2:	cc 0f       	add	r28, r28
    1fb4:	dd 1f       	adc	r29, r29
    1fb6:	cc 0f       	add	r28, r28
    1fb8:	dd 1f       	adc	r29, r29
    1fba:	cc 0f       	add	r28, r28
    1fbc:	dd 1f       	adc	r29, r29
    1fbe:	cc 56       	subi	r28, 0x6C	; 108
    1fc0:	da 4d       	sbci	r29, 0xDA	; 218
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	80 7c       	andi	r24, 0xC0	; 192
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <udd_ep_run+0x54>
    1fc8:	4c c0       	rjmp	.+152    	; 0x2062 <udd_ep_run+0xec>
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	80 7c       	andi	r24, 0xC0	; 192
    1fce:	80 3c       	cpi	r24, 0xC0	; 192
    1fd0:	19 f0       	breq	.+6      	; 0x1fd8 <udd_ep_run+0x62>
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	82 fd       	sbrc	r24, 2
    1fd6:	47 c0       	rjmp	.+142    	; 0x2066 <udd_ep_run+0xf0>
    1fd8:	8f b7       	in	r24, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	f7 01       	movw	r30, r14
    1fde:	90 81       	ld	r25, Z
    1fe0:	90 ff       	sbrs	r25, 0
    1fe2:	03 c0       	rjmp	.+6      	; 0x1fea <udd_ep_run+0x74>
    1fe4:	8f bf       	out	0x3f, r24	; 63
    1fe6:	71 2c       	mov	r7, r1
    1fe8:	3f c0       	rjmp	.+126    	; 0x2068 <udd_ep_run+0xf2>
    1fea:	f7 01       	movw	r30, r14
    1fec:	90 81       	ld	r25, Z
    1fee:	91 60       	ori	r25, 0x01	; 1
    1ff0:	90 83       	st	Z, r25
    1ff2:	8f bf       	out	0x3f, r24	; 63
    1ff4:	f7 01       	movw	r30, r14
    1ff6:	a1 82       	std	Z+1, r10	; 0x01
    1ff8:	b2 82       	std	Z+2, r11	; 0x02
    1ffa:	c3 82       	std	Z+3, r12	; 0x03
    1ffc:	d4 82       	std	Z+4, r13	; 0x04
    1ffe:	15 82       	std	Z+5, r1	; 0x05
    2000:	16 82       	std	Z+6, r1	; 0x06
    2002:	07 83       	std	Z+7, r16	; 0x07
    2004:	10 87       	std	Z+8, r17	; 0x08
    2006:	81 10       	cpse	r8, r1
    2008:	06 c0       	rjmp	.+12     	; 0x2016 <udd_ep_run+0xa0>
    200a:	91 e0       	ldi	r25, 0x01	; 1
    200c:	c1 14       	cp	r12, r1
    200e:	d1 04       	cpc	r13, r1
    2010:	19 f0       	breq	.+6      	; 0x2018 <udd_ep_run+0xa2>
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	01 c0       	rjmp	.+2      	; 0x2018 <udd_ep_run+0xa2>
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	f7 01       	movw	r30, r14
    201a:	80 81       	ld	r24, Z
    201c:	90 fb       	bst	r25, 0
    201e:	81 f9       	bld	r24, 1
    2020:	8b 7f       	andi	r24, 0xFB	; 251
    2022:	80 83       	st	Z, r24
    2024:	77 20       	and	r7, r7
    2026:	19 f0       	breq	.+6      	; 0x202e <udd_ep_run+0xb8>
    2028:	1e 82       	std	Y+6, r1	; 0x06
    202a:	1f 82       	std	Y+7, r1	; 0x07
    202c:	15 c0       	rjmp	.+42     	; 0x2058 <udd_ep_run+0xe2>
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	80 7c       	andi	r24, 0xC0	; 192
    2032:	80 3c       	cpi	r24, 0xC0	; 192
    2034:	69 f4       	brne	.+26     	; 0x2050 <udd_ep_run+0xda>
    2036:	ce 01       	movw	r24, r28
    2038:	8f dc       	rcall	.-1762   	; 0x1958 <udd_ep_get_size>
    203a:	bc 01       	movw	r22, r24
    203c:	c6 01       	movw	r24, r12
    203e:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__udivmodhi4>
    2042:	89 2b       	or	r24, r25
    2044:	29 f0       	breq	.+10     	; 0x2050 <udd_ep_run+0xda>
    2046:	f7 01       	movw	r30, r14
    2048:	80 81       	ld	r24, Z
    204a:	8e 7f       	andi	r24, 0xFE	; 254
    204c:	80 83       	st	Z, r24
    204e:	0c c0       	rjmp	.+24     	; 0x2068 <udd_ep_run+0xf2>
    2050:	1a 82       	std	Y+2, r1	; 0x02
    2052:	1b 82       	std	Y+3, r1	; 0x03
    2054:	1e 82       	std	Y+6, r1	; 0x06
    2056:	1f 82       	std	Y+7, r1	; 0x07
    2058:	89 2d       	mov	r24, r9
    205a:	2d dd       	rcall	.-1446   	; 0x1ab6 <udd_ep_trans_complet>
    205c:	77 24       	eor	r7, r7
    205e:	73 94       	inc	r7
    2060:	03 c0       	rjmp	.+6      	; 0x2068 <udd_ep_run+0xf2>
    2062:	71 2c       	mov	r7, r1
    2064:	01 c0       	rjmp	.+2      	; 0x2068 <udd_ep_run+0xf2>
    2066:	71 2c       	mov	r7, r1
    2068:	87 2d       	mov	r24, r7
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	df 90       	pop	r13
    2078:	cf 90       	pop	r12
    207a:	bf 90       	pop	r11
    207c:	af 90       	pop	r10
    207e:	9f 90       	pop	r9
    2080:	8f 90       	pop	r8
    2082:	7f 90       	pop	r7
    2084:	08 95       	ret

00002086 <udd_ep_abort>:
    2086:	ff 92       	push	r15
    2088:	0f 93       	push	r16
    208a:	1f 93       	push	r17
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    2090:	18 2f       	mov	r17, r24
    2092:	f8 2e       	mov	r15, r24
    2094:	ff 1c       	adc	r15, r15
    2096:	ff 24       	eor	r15, r15
    2098:	ff 1c       	adc	r15, r15
    209a:	c8 2f       	mov	r28, r24
    209c:	cf 70       	andi	r28, 0x0F	; 15
    209e:	d0 e0       	ldi	r29, 0x00	; 0
    20a0:	cc 0f       	add	r28, r28
    20a2:	dd 1f       	adc	r29, r29
    20a4:	cf 0d       	add	r28, r15
    20a6:	d1 1d       	adc	r29, r1
    20a8:	cc 0f       	add	r28, r28
    20aa:	dd 1f       	adc	r29, r29
    20ac:	cc 0f       	add	r28, r28
    20ae:	dd 1f       	adc	r29, r29
    20b0:	cc 0f       	add	r28, r28
    20b2:	dd 1f       	adc	r29, r29
    20b4:	cc 56       	subi	r28, 0x6C	; 108
    20b6:	da 4d       	sbci	r29, 0xDA	; 218
    20b8:	74 dc       	rcall	.-1816   	; 0x19a2 <udd_ep_get_job>
    20ba:	dc 01       	movw	r26, r24
    20bc:	fe 01       	movw	r30, r28
    20be:	02 e0       	ldi	r16, 0x02	; 2
    20c0:	05 93       	las	Z, r16
    20c2:	8c 91       	ld	r24, X
    20c4:	80 ff       	sbrs	r24, 0
    20c6:	12 c0       	rjmp	.+36     	; 0x20ec <udd_ep_abort+0x66>
    20c8:	8e 7f       	andi	r24, 0xFE	; 254
    20ca:	8c 93       	st	X, r24
    20cc:	17 96       	adiw	r26, 0x07	; 7
    20ce:	ed 91       	ld	r30, X+
    20d0:	fc 91       	ld	r31, X
    20d2:	18 97       	sbiw	r26, 0x08	; 8
    20d4:	30 97       	sbiw	r30, 0x00	; 0
    20d6:	51 f0       	breq	.+20     	; 0x20ec <udd_ep_abort+0x66>
    20d8:	ff 20       	and	r15, r15
    20da:	19 f0       	breq	.+6      	; 0x20e2 <udd_ep_abort+0x5c>
    20dc:	6e 81       	ldd	r22, Y+6	; 0x06
    20de:	7f 81       	ldd	r23, Y+7	; 0x07
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <udd_ep_abort+0x60>
    20e2:	6a 81       	ldd	r22, Y+2	; 0x02
    20e4:	7b 81       	ldd	r23, Y+3	; 0x03
    20e6:	41 2f       	mov	r20, r17
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	09 95       	icall
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	08 95       	ret

000020f8 <udd_ep_free>:
    20f8:	cf 93       	push	r28
    20fa:	c8 2f       	mov	r28, r24
    20fc:	c4 df       	rcall	.-120    	; 0x2086 <udd_ep_abort>
    20fe:	ec 2f       	mov	r30, r28
    2100:	ef 70       	andi	r30, 0x0F	; 15
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	ee 0f       	add	r30, r30
    2106:	ff 1f       	adc	r31, r31
    2108:	8c 2f       	mov	r24, r28
    210a:	99 27       	eor	r25, r25
    210c:	87 fd       	sbrc	r24, 7
    210e:	90 95       	com	r25
    2110:	88 27       	eor	r24, r24
    2112:	99 0f       	add	r25, r25
    2114:	88 1f       	adc	r24, r24
    2116:	99 27       	eor	r25, r25
    2118:	e8 0f       	add	r30, r24
    211a:	f9 1f       	adc	r31, r25
    211c:	ee 0f       	add	r30, r30
    211e:	ff 1f       	adc	r31, r31
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	ee 0f       	add	r30, r30
    2126:	ff 1f       	adc	r31, r31
    2128:	ec 56       	subi	r30, 0x6C	; 108
    212a:	fa 4d       	sbci	r31, 0xDA	; 218
    212c:	11 82       	std	Z+1, r1	; 0x01
    212e:	cf 91       	pop	r28
    2130:	08 95       	ret

00002132 <udd_ep_set_halt>:
    2132:	0f 93       	push	r16
    2134:	e8 2f       	mov	r30, r24
    2136:	ef 70       	andi	r30, 0x0F	; 15
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	28 2f       	mov	r18, r24
    2140:	33 27       	eor	r19, r19
    2142:	27 fd       	sbrc	r18, 7
    2144:	30 95       	com	r19
    2146:	22 27       	eor	r18, r18
    2148:	33 0f       	add	r19, r19
    214a:	22 1f       	adc	r18, r18
    214c:	33 27       	eor	r19, r19
    214e:	e2 0f       	add	r30, r18
    2150:	f3 1f       	adc	r31, r19
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	ee 0f       	add	r30, r30
    2158:	ff 1f       	adc	r31, r31
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	ec 56       	subi	r30, 0x6C	; 108
    2160:	fa 4d       	sbci	r31, 0xDA	; 218
    2162:	91 81       	ldd	r25, Z+1	; 0x01
    2164:	94 60       	ori	r25, 0x04	; 4
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	01 e0       	ldi	r16, 0x01	; 1
    216a:	06 93       	lac	Z, r16
    216c:	8c df       	rcall	.-232    	; 0x2086 <udd_ep_abort>
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	0f 91       	pop	r16
    2172:	08 95       	ret

00002174 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2174:	1f 92       	push	r1
    2176:	0f 92       	push	r0
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	0f 92       	push	r0
    217c:	11 24       	eor	r1, r1
    217e:	0f 93       	push	r16
    2180:	2f 93       	push	r18
    2182:	3f 93       	push	r19
    2184:	4f 93       	push	r20
    2186:	5f 93       	push	r21
    2188:	6f 93       	push	r22
    218a:	7f 93       	push	r23
    218c:	8f 93       	push	r24
    218e:	9f 93       	push	r25
    2190:	af 93       	push	r26
    2192:	bf 93       	push	r27
    2194:	ef 93       	push	r30
    2196:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2198:	80 91 cb 04 	lds	r24, 0x04CB
    219c:	88 23       	and	r24, r24
    219e:	34 f4       	brge	.+12     	; 0x21ac <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    21a0:	80 e8       	ldi	r24, 0x80	; 128
    21a2:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    21a6:	0e 94 b8 05 	call	0xb70	; 0xb70 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    21aa:	88 c0       	rjmp	.+272    	; 0x22bc <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    21ac:	80 91 cb 04 	lds	r24, 0x04CB
    21b0:	82 ff       	sbrs	r24, 2
    21b2:	20 c0       	rjmp	.+64     	; 0x21f4 <__vector_125+0x80>
		udd_ack_underflow_event();
    21b4:	84 e0       	ldi	r24, 0x04	; 4
    21b6:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    21ba:	80 91 9c 25 	lds	r24, 0x259C
    21be:	86 ff       	sbrs	r24, 6
    21c0:	7d c0       	rjmp	.+250    	; 0x22bc <__vector_125+0x148>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    21c2:	80 91 cc 04 	lds	r24, 0x04CC
    21c6:	81 fd       	sbrc	r24, 1
    21c8:	79 c0       	rjmp	.+242    	; 0x22bc <__vector_125+0x148>
    21ca:	06 dc       	rcall	.-2036   	; 0x19d8 <udd_ctrl_interrupt_tc_setup>
    21cc:	81 11       	cpse	r24, r1
    21ce:	76 c0       	rjmp	.+236    	; 0x22bc <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    21d0:	80 91 86 25 	lds	r24, 0x2586
    21d4:	81 30       	cpi	r24, 0x01	; 1
    21d6:	11 f4       	brne	.+4      	; 0x21dc <__vector_125+0x68>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    21d8:	3b db       	rcall	.-2442   	; 0x1850 <udd_ctrl_send_zlp_in>
    21da:	70 c0       	rjmp	.+224    	; 0x22bc <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	09 f0       	breq	.+2      	; 0x21e2 <__vector_125+0x6e>
    21e0:	6d c0       	rjmp	.+218    	; 0x22bc <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    21e2:	ed e9       	ldi	r30, 0x9D	; 157
    21e4:	f5 e2       	ldi	r31, 0x25	; 37
    21e6:	04 e0       	ldi	r16, 0x04	; 4
    21e8:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    21ea:	e5 e9       	ldi	r30, 0x95	; 149
    21ec:	f5 e2       	ldi	r31, 0x25	; 37
    21ee:	04 e0       	ldi	r16, 0x04	; 4
    21f0:	05 93       	las	Z, r16
    21f2:	64 c0       	rjmp	.+200    	; 0x22bc <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    21f4:	80 91 cb 04 	lds	r24, 0x04CB
    21f8:	81 ff       	sbrs	r24, 1
    21fa:	5b c0       	rjmp	.+182    	; 0x22b2 <__vector_125+0x13e>
		udd_ack_overflow_event();
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    2202:	80 91 94 25 	lds	r24, 0x2594
    2206:	86 ff       	sbrs	r24, 6
    2208:	59 c0       	rjmp	.+178    	; 0x22bc <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    220a:	80 91 cc 04 	lds	r24, 0x04CC
    220e:	81 fd       	sbrc	r24, 1
    2210:	55 c0       	rjmp	.+170    	; 0x22bc <__vector_125+0x148>
    2212:	e2 db       	rcall	.-2108   	; 0x19d8 <udd_ctrl_interrupt_tc_setup>
    2214:	81 11       	cpse	r24, r1
    2216:	52 c0       	rjmp	.+164    	; 0x22bc <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2218:	80 91 86 25 	lds	r24, 0x2586
    221c:	82 30       	cpi	r24, 0x02	; 2
    221e:	41 f4       	brne	.+16     	; 0x2230 <__vector_125+0xbc>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2220:	84 e0       	ldi	r24, 0x04	; 4
    2222:	80 93 86 25 	sts	0x2586, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2226:	e4 e9       	ldi	r30, 0x94	; 148
    2228:	f5 e2       	ldi	r31, 0x25	; 37
    222a:	02 e0       	ldi	r16, 0x02	; 2
    222c:	06 93       	lac	Z, r16
    222e:	46 c0       	rjmp	.+140    	; 0x22bc <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2230:	83 30       	cpi	r24, 0x03	; 3
    2232:	09 f0       	breq	.+2      	; 0x2236 <__vector_125+0xc2>
    2234:	43 c0       	rjmp	.+134    	; 0x22bc <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2236:	ed e9       	ldi	r30, 0x9D	; 157
    2238:	f5 e2       	ldi	r31, 0x25	; 37
    223a:	04 e0       	ldi	r16, 0x04	; 4
    223c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    223e:	e5 e9       	ldi	r30, 0x95	; 149
    2240:	f5 e2       	ldi	r31, 0x25	; 37
    2242:	04 e0       	ldi	r16, 0x04	; 4
    2244:	05 93       	las	Z, r16
    2246:	3a c0       	rjmp	.+116    	; 0x22bc <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2248:	80 e1       	ldi	r24, 0x10	; 16
    224a:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	1a df       	rcall	.-460    	; 0x2086 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2252:	81 e8       	ldi	r24, 0x81	; 129
    2254:	18 df       	rcall	.-464    	; 0x2086 <udd_ep_abort>
		}
#endif
		udc_reset();
    2256:	0e 94 91 05 	call	0xb22	; 0xb22 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    225a:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    225e:	e5 e9       	ldi	r30, 0x95	; 149
    2260:	f5 e2       	ldi	r31, 0x25	; 37
    2262:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    2264:	96 e0       	ldi	r25, 0x06	; 6
    2266:	90 93 94 25 	sts	0x2594, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    226a:	83 e4       	ldi	r24, 0x43	; 67
    226c:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    226e:	ed e9       	ldi	r30, 0x9D	; 157
    2270:	f5 e2       	ldi	r31, 0x25	; 37
    2272:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    2274:	90 93 9c 25 	sts	0x259C, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2278:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    227a:	82 e4       	ldi	r24, 0x42	; 66
    227c:	95 e2       	ldi	r25, 0x25	; 37
    227e:	80 93 98 25 	sts	0x2598, r24
    2282:	90 93 99 25 	sts	0x2599, r25
		// Reset endpoint control management
		udd_ctrl_init();
    2286:	ab da       	rcall	.-2730   	; 0x17de <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2288:	19 c0       	rjmp	.+50     	; 0x22bc <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
    228a:	80 91 cb 04 	lds	r24, 0x04CB
    228e:	86 ff       	sbrs	r24, 6
    2290:	06 c0       	rjmp	.+12     	; 0x229e <__vector_125+0x12a>
		udd_ack_suspend_event();
    2292:	80 e4       	ldi	r24, 0x40	; 64
    2294:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	82 da       	rcall	.-2812   	; 0x17a0 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
    229e:	80 91 cb 04 	lds	r24, 0x04CB
    22a2:	85 ff       	sbrs	r24, 5
    22a4:	0b c0       	rjmp	.+22     	; 0x22bc <__vector_125+0x148>
		udd_ack_resume_event();
    22a6:	80 e2       	ldi	r24, 0x20	; 32
    22a8:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	78 da       	rcall	.-2832   	; 0x17a0 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    22b0:	05 c0       	rjmp	.+10     	; 0x22bc <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    22b2:	80 91 cb 04 	lds	r24, 0x04CB
    22b6:	84 ff       	sbrs	r24, 4
    22b8:	e8 cf       	rjmp	.-48     	; 0x228a <__vector_125+0x116>
    22ba:	c6 cf       	rjmp	.-116    	; 0x2248 <__vector_125+0xd4>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    22bc:	ff 91       	pop	r31
    22be:	ef 91       	pop	r30
    22c0:	bf 91       	pop	r27
    22c2:	af 91       	pop	r26
    22c4:	9f 91       	pop	r25
    22c6:	8f 91       	pop	r24
    22c8:	7f 91       	pop	r23
    22ca:	6f 91       	pop	r22
    22cc:	5f 91       	pop	r21
    22ce:	4f 91       	pop	r20
    22d0:	3f 91       	pop	r19
    22d2:	2f 91       	pop	r18
    22d4:	0f 91       	pop	r16
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	0f 90       	pop	r0
    22dc:	1f 90       	pop	r1
    22de:	18 95       	reti

000022e0 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    22e0:	1f 92       	push	r1
    22e2:	0f 92       	push	r0
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	0f 92       	push	r0
    22e8:	11 24       	eor	r1, r1
    22ea:	0f 93       	push	r16
    22ec:	1f 93       	push	r17
    22ee:	2f 93       	push	r18
    22f0:	3f 93       	push	r19
    22f2:	4f 93       	push	r20
    22f4:	5f 93       	push	r21
    22f6:	6f 93       	push	r22
    22f8:	7f 93       	push	r23
    22fa:	8f 93       	push	r24
    22fc:	9f 93       	push	r25
    22fe:	af 93       	push	r26
    2300:	bf 93       	push	r27
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	ef 93       	push	r30
    2308:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    230a:	80 91 cc 04 	lds	r24, 0x04CC
    230e:	81 fd       	sbrc	r24, 1
    2310:	03 c0       	rjmp	.+6      	; 0x2318 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2312:	62 db       	rcall	.-2364   	; 0x19d8 <udd_ctrl_interrupt_tc_setup>
    2314:	81 11       	cpse	r24, r1
    2316:	b9 c0       	rjmp	.+370    	; 0x248a <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    231e:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    2322:	81 95       	neg	r24
    2324:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2326:	e4 e9       	ldi	r30, 0x94	; 148
    2328:	f5 e2       	ldi	r31, 0x25	; 37
    232a:	e8 1b       	sub	r30, r24
    232c:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    232e:	20 81       	ld	r18, Z
    2330:	31 81       	ldd	r19, Z+1	; 0x01
    2332:	24 59       	subi	r18, 0x94	; 148
    2334:	35 42       	sbci	r19, 0x25	; 37
    2336:	36 95       	lsr	r19
    2338:	27 95       	ror	r18
    233a:	36 95       	lsr	r19
    233c:	27 95       	ror	r18
    233e:	36 95       	lsr	r19
    2340:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2342:	82 2f       	mov	r24, r18
    2344:	86 95       	lsr	r24
    2346:	20 ff       	sbrs	r18, 0
    2348:	02 c0       	rjmp	.+4      	; 0x234e <__vector_126+0x6e>
    234a:	90 e8       	ldi	r25, 0x80	; 128
    234c:	01 c0       	rjmp	.+2      	; 0x2350 <__vector_126+0x70>
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2352:	e8 2f       	mov	r30, r24
    2354:	ef 70       	andi	r30, 0x0F	; 15
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    235c:	28 2f       	mov	r18, r24
    235e:	33 27       	eor	r19, r19
    2360:	27 fd       	sbrc	r18, 7
    2362:	30 95       	com	r19
    2364:	22 27       	eor	r18, r18
    2366:	33 0f       	add	r19, r19
    2368:	22 1f       	adc	r18, r18
    236a:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    236c:	e2 0f       	add	r30, r18
    236e:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	ec 56       	subi	r30, 0x6C	; 108
    237e:	fa 4d       	sbci	r31, 0xDA	; 218
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2380:	90 81       	ld	r25, Z
    2382:	95 ff       	sbrs	r25, 5
    2384:	82 c0       	rjmp	.+260    	; 0x248a <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2386:	00 e2       	ldi	r16, 0x20	; 32
    2388:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    238a:	81 11       	cpse	r24, r1
    238c:	79 c0       	rjmp	.+242    	; 0x2480 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    238e:	80 91 86 25 	lds	r24, 0x2586
    2392:	84 30       	cpi	r24, 0x04	; 4
    2394:	19 f4       	brne	.+6      	; 0x239c <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2396:	6a da       	rcall	.-2860   	; 0x186c <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2398:	22 da       	rcall	.-3004   	; 0x17de <udd_ctrl_init>
    239a:	77 c0       	rjmp	.+238    	; 0x248a <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    239c:	c0 91 96 25 	lds	r28, 0x2596
    23a0:	d0 91 97 25 	lds	r29, 0x2597

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    23a4:	80 91 80 26 	lds	r24, 0x2680
    23a8:	90 91 81 26 	lds	r25, 0x2681
    23ac:	00 91 82 25 	lds	r16, 0x2582
    23b0:	10 91 83 25 	lds	r17, 0x2583
    23b4:	98 01       	movw	r18, r16
    23b6:	2c 0f       	add	r18, r28
    23b8:	3d 1f       	adc	r19, r29
    23ba:	82 17       	cp	r24, r18
    23bc:	93 07       	cpc	r25, r19
    23be:	18 f4       	brcc	.+6      	; 0x23c6 <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    23c0:	ec 01       	movw	r28, r24
    23c2:	c0 1b       	sub	r28, r16
    23c4:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    23c6:	80 91 7e 26 	lds	r24, 0x267E
    23ca:	90 91 7f 26 	lds	r25, 0x267F
    23ce:	ae 01       	movw	r20, r28
    23d0:	62 e4       	ldi	r22, 0x42	; 66
    23d2:	75 e2       	ldi	r23, 0x25	; 37
    23d4:	80 0f       	add	r24, r16
    23d6:	91 1f       	adc	r25, r17
    23d8:	0e 94 78 20 	call	0x40f0	; 0x40f0 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    23dc:	0c 0f       	add	r16, r28
    23de:	1d 1f       	adc	r17, r29
    23e0:	00 93 82 25 	sts	0x2582, r16
    23e4:	10 93 83 25 	sts	0x2583, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    23e8:	c0 34       	cpi	r28, 0x40	; 64
    23ea:	d1 05       	cpc	r29, r1
    23ec:	69 f4       	brne	.+26     	; 0x2408 <__vector_126+0x128>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    23ee:	80 91 84 25 	lds	r24, 0x2584
    23f2:	90 91 85 25 	lds	r25, 0x2585
    23f6:	80 0f       	add	r24, r16
    23f8:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    23fa:	20 91 7c 26 	lds	r18, 0x267C
    23fe:	30 91 7d 26 	lds	r19, 0x267D
    2402:	82 17       	cp	r24, r18
    2404:	93 07       	cpc	r25, r19
    2406:	88 f0       	brcs	.+34     	; 0x242a <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2408:	00 93 80 26 	sts	0x2680, r16
    240c:	10 93 81 26 	sts	0x2681, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2410:	e0 91 84 26 	lds	r30, 0x2684
    2414:	f0 91 85 26 	lds	r31, 0x2685
    2418:	30 97       	sbiw	r30, 0x00	; 0
    241a:	29 f0       	breq	.+10     	; 0x2426 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    241c:	09 95       	icall
    241e:	81 11       	cpse	r24, r1
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2422:	08 da       	rcall	.-3056   	; 0x1834 <udd_ctrl_stall_data>
    2424:	32 c0       	rjmp	.+100    	; 0x248a <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2426:	14 da       	rcall	.-3032   	; 0x1850 <udd_ctrl_send_zlp_in>
    2428:	30 c0       	rjmp	.+96     	; 0x248a <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    242a:	80 91 80 26 	lds	r24, 0x2680
    242e:	90 91 81 26 	lds	r25, 0x2681
    2432:	08 17       	cp	r16, r24
    2434:	19 07       	cpc	r17, r25
    2436:	f9 f4       	brne	.+62     	; 0x2476 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2438:	e0 91 84 26 	lds	r30, 0x2684
    243c:	f0 91 85 26 	lds	r31, 0x2685
    2440:	30 97       	sbiw	r30, 0x00	; 0
    2442:	11 f4       	brne	.+4      	; 0x2448 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2444:	f7 d9       	rcall	.-3090   	; 0x1834 <udd_ctrl_stall_data>
    2446:	21 c0       	rjmp	.+66     	; 0x248a <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2448:	09 95       	icall
    244a:	81 11       	cpse	r24, r1
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    244e:	f2 d9       	rcall	.-3100   	; 0x1834 <udd_ctrl_stall_data>
    2450:	1c c0       	rjmp	.+56     	; 0x248a <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2452:	20 91 84 25 	lds	r18, 0x2584
    2456:	30 91 85 25 	lds	r19, 0x2585
    245a:	80 91 82 25 	lds	r24, 0x2582
    245e:	90 91 83 25 	lds	r25, 0x2583
    2462:	82 0f       	add	r24, r18
    2464:	93 1f       	adc	r25, r19
    2466:	80 93 84 25 	sts	0x2584, r24
    246a:	90 93 85 25 	sts	0x2585, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    246e:	10 92 82 25 	sts	0x2582, r1
    2472:	10 92 83 25 	sts	0x2583, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2476:	e4 e9       	ldi	r30, 0x94	; 148
    2478:	f5 e2       	ldi	r31, 0x25	; 37
    247a:	02 e0       	ldi	r16, 0x02	; 2
    247c:	06 93       	lac	Z, r16
    247e:	05 c0       	rjmp	.+10     	; 0x248a <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2480:	80 38       	cpi	r24, 0x80	; 128
    2482:	11 f4       	brne	.+4      	; 0x2488 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2484:	fb d9       	rcall	.-3082   	; 0x187c <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2486:	01 c0       	rjmp	.+2      	; 0x248a <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2488:	16 db       	rcall	.-2516   	; 0x1ab6 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    248a:	ff 91       	pop	r31
    248c:	ef 91       	pop	r30
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	bf 91       	pop	r27
    2494:	af 91       	pop	r26
    2496:	9f 91       	pop	r25
    2498:	8f 91       	pop	r24
    249a:	7f 91       	pop	r23
    249c:	6f 91       	pop	r22
    249e:	5f 91       	pop	r21
    24a0:	4f 91       	pop	r20
    24a2:	3f 91       	pop	r19
    24a4:	2f 91       	pop	r18
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	0f 90       	pop	r0
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	0f 90       	pop	r0
    24b0:	1f 90       	pop	r1
    24b2:	18 95       	reti

000024b4 <sysclk_init>:
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <sysclk_init+0x6>
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <sysclk_init+0x8>
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	8f ef       	ldi	r24, 0xFF	; 255
    24c2:	80 93 70 00 	sts	0x0070, r24
    24c6:	80 93 71 00 	sts	0x0071, r24
    24ca:	80 93 72 00 	sts	0x0072, r24
    24ce:	80 93 73 00 	sts	0x0073, r24
    24d2:	80 93 74 00 	sts	0x0074, r24
    24d6:	80 93 75 00 	sts	0x0075, r24
    24da:	80 93 76 00 	sts	0x0076, r24
    24de:	6c e1       	ldi	r22, 0x1C	; 28
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	82 e0       	ldi	r24, 0x02	; 2
    24e4:	5b d0       	rcall	.+182    	; 0x259c <nvm_read_byte>
    24e6:	8a 83       	std	Y+2, r24	; 0x02
    24e8:	6d e1       	ldi	r22, 0x1D	; 29
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	56 d0       	rcall	.+172    	; 0x259c <nvm_read_byte>
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	9a 81       	ldd	r25, Y+2	; 0x02
    24f6:	01 96       	adiw	r24, 0x01	; 1
    24f8:	21 f4       	brne	.+8      	; 0x2502 <sysclk_init+0x4e>
    24fa:	80 e4       	ldi	r24, 0x40	; 64
    24fc:	93 e2       	ldi	r25, 0x23	; 35
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	9a 81       	ldd	r25, Y+2	; 0x02
    2506:	8b 83       	std	Y+3, r24	; 0x03
    2508:	9c 83       	std	Y+4, r25	; 0x04
    250a:	e0 e6       	ldi	r30, 0x60	; 96
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	82 83       	std	Z+2, r24	; 0x02
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	83 83       	std	Z+3, r24	; 0x03
    2514:	8f b7       	in	r24, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	e0 e5       	ldi	r30, 0x50	; 80
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	90 81       	ld	r25, Z
    251e:	92 60       	ori	r25, 0x02	; 2
    2520:	90 83       	st	Z, r25
    2522:	8f bf       	out	0x3f, r24	; 63
    2524:	81 81       	ldd	r24, Z+1	; 0x01
    2526:	81 ff       	sbrs	r24, 1
    2528:	fd cf       	rjmp	.-6      	; 0x2524 <sysclk_init+0x70>
    252a:	61 e0       	ldi	r22, 0x01	; 1
    252c:	80 e4       	ldi	r24, 0x40	; 64
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	3f d0       	rcall	.+126    	; 0x25b0 <ccp_write_io>
    2532:	8f b7       	in	r24, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	e0 e5       	ldi	r30, 0x50	; 80
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	90 81       	ld	r25, Z
    253c:	9e 7f       	andi	r25, 0xFE	; 254
    253e:	90 83       	st	Z, r25
    2540:	8f bf       	out	0x3f, r24	; 63
    2542:	24 96       	adiw	r28, 0x04	; 4
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	de bf       	out	0x3e, r29	; 62
    2548:	df 91       	pop	r29
    254a:	cf 91       	pop	r28
    254c:	08 95       	ret

0000254e <sysclk_enable_module>:
    254e:	9f b7       	in	r25, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	e8 2f       	mov	r30, r24
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	e0 59       	subi	r30, 0x90	; 144
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	60 95       	com	r22
    255c:	80 81       	ld	r24, Z
    255e:	68 23       	and	r22, r24
    2560:	60 83       	st	Z, r22
    2562:	9f bf       	out	0x3f, r25	; 63
    2564:	08 95       	ret

00002566 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    2566:	86 30       	cpi	r24, 0x06	; 6
    2568:	11 f4       	brne	.+4      	; 0x256e <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    256a:	68 e1       	ldi	r22, 0x18	; 24
    256c:	01 c0       	rjmp	.+2      	; 0x2570 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    256e:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2570:	e0 e5       	ldi	r30, 0x50	; 80
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    2576:	81 fd       	sbrc	r24, 1
    2578:	09 c0       	rjmp	.+18     	; 0x258c <sysclk_enable_usb+0x26>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    257a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    257c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    257e:	90 81       	ld	r25, Z
    2580:	92 60       	ori	r25, 0x02	; 2
    2582:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2584:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2586:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2588:	81 ff       	sbrs	r24, 1
    258a:	fd cf       	rjmp	.-6      	; 0x2586 <sysclk_enable_usb+0x20>
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    258c:	63 60       	ori	r22, 0x03	; 3
    258e:	84 e4       	ldi	r24, 0x44	; 68
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e d0       	rcall	.+28     	; 0x25b0 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    2594:	60 e4       	ldi	r22, 0x40	; 64
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	da cf       	rjmp	.-76     	; 0x254e <sysclk_enable_module>
    259a:	08 95       	ret

0000259c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    259c:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    25a0:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    25a2:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    25a4:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    25a8:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    25aa:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    25ae:	08 95       	ret

000025b0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    25b0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    25b2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    25b4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    25b6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    25b8:	60 83       	st	Z, r22
	ret                             // Return to caller
    25ba:	08 95       	ret

000025bc <dwt_getpartid>:
        if(pdw1000local->cbRxErr != NULL)
        {
            pdw1000local->cbRxErr(&pdw1000local->cbData);
        }
    }
}
    25bc:	e0 91 98 20 	lds	r30, 0x2098
    25c0:	f0 91 99 20 	lds	r31, 0x2099
    25c4:	60 81       	ld	r22, Z
    25c6:	71 81       	ldd	r23, Z+1	; 0x01
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	08 95       	ret

000025ce <dwt_writetodevice>:
    25ce:	0f 93       	push	r16
    25d0:	1f 93       	push	r17
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <dwt_writetodevice+0xa>
    25d8:	1f 92       	push	r1
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	61 15       	cp	r22, r1
    25e0:	71 05       	cpc	r23, r1
    25e2:	29 f4       	brne	.+10     	; 0x25ee <dwt_writetodevice+0x20>
    25e4:	80 68       	ori	r24, 0x80	; 128
    25e6:	89 83       	std	Y+1, r24	; 0x01
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	14 c0       	rjmp	.+40     	; 0x2616 <dwt_writetodevice+0x48>
    25ee:	80 6c       	ori	r24, 0xC0	; 192
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	60 38       	cpi	r22, 0x80	; 128
    25f4:	71 05       	cpc	r23, r1
    25f6:	20 f4       	brcc	.+8      	; 0x2600 <dwt_writetodevice+0x32>
    25f8:	6a 83       	std	Y+2, r22	; 0x02
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0b c0       	rjmp	.+22     	; 0x2616 <dwt_writetodevice+0x48>
    2600:	86 2f       	mov	r24, r22
    2602:	80 68       	ori	r24, 0x80	; 128
    2604:	8a 83       	std	Y+2, r24	; 0x02
    2606:	66 0f       	add	r22, r22
    2608:	67 2f       	mov	r22, r23
    260a:	66 1f       	adc	r22, r22
    260c:	77 0b       	sbc	r23, r23
    260e:	71 95       	neg	r23
    2610:	6b 83       	std	Y+3, r22	; 0x03
    2612:	83 e0       	ldi	r24, 0x03	; 3
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	be 01       	movw	r22, r28
    2618:	6f 5f       	subi	r22, 0xFF	; 255
    261a:	7f 4f       	sbci	r23, 0xFF	; 255
    261c:	56 d6       	rcall	.+3244   	; 0x32ca <writetospi>
    261e:	23 96       	adiw	r28, 0x03	; 3
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	08 95       	ret

0000262e <dwt_readfromdevice>:
    262e:	0f 93       	push	r16
    2630:	1f 93       	push	r17
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
    2636:	00 d0       	rcall	.+0      	; 0x2638 <dwt_readfromdevice+0xa>
    2638:	1f 92       	push	r1
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	61 15       	cp	r22, r1
    2640:	71 05       	cpc	r23, r1
    2642:	21 f4       	brne	.+8      	; 0x264c <dwt_readfromdevice+0x1e>
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	14 c0       	rjmp	.+40     	; 0x2674 <dwt_readfromdevice+0x46>
    264c:	80 64       	ori	r24, 0x40	; 64
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	60 38       	cpi	r22, 0x80	; 128
    2652:	71 05       	cpc	r23, r1
    2654:	20 f4       	brcc	.+8      	; 0x265e <dwt_readfromdevice+0x30>
    2656:	6a 83       	std	Y+2, r22	; 0x02
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	0b c0       	rjmp	.+22     	; 0x2674 <dwt_readfromdevice+0x46>
    265e:	86 2f       	mov	r24, r22
    2660:	80 68       	ori	r24, 0x80	; 128
    2662:	8a 83       	std	Y+2, r24	; 0x02
    2664:	66 0f       	add	r22, r22
    2666:	67 2f       	mov	r22, r23
    2668:	66 1f       	adc	r22, r22
    266a:	77 0b       	sbc	r23, r23
    266c:	71 95       	neg	r23
    266e:	6b 83       	std	Y+3, r22	; 0x03
    2670:	83 e0       	ldi	r24, 0x03	; 3
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	be 01       	movw	r22, r28
    2676:	6f 5f       	subi	r22, 0xFF	; 255
    2678:	7f 4f       	sbci	r23, 0xFF	; 255
    267a:	62 d6       	rcall	.+3268   	; 0x3340 <readfromspi>
    267c:	23 96       	adiw	r28, 0x03	; 3
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	1f 91       	pop	r17
    2688:	0f 91       	pop	r16
    268a:	08 95       	ret

0000268c <dwt_readrxdata>:
    268c:	0f 93       	push	r16
    268e:	1f 93       	push	r17
    2690:	9b 01       	movw	r18, r22
    2692:	ba 01       	movw	r22, r20
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	50 e0       	ldi	r21, 0x00	; 0
    2698:	8c 01       	movw	r16, r24
    269a:	81 e1       	ldi	r24, 0x11	; 17
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	c7 df       	rcall	.-114    	; 0x262e <dwt_readfromdevice>
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	08 95       	ret

000026a6 <dwt_read32bitoffsetreg>:
    26a6:	ef 92       	push	r14
    26a8:	ff 92       	push	r15
    26aa:	0f 93       	push	r16
    26ac:	1f 93       	push	r17
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <dwt_read32bitoffsetreg+0xe>
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <dwt_read32bitoffsetreg+0x10>
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	9e 01       	movw	r18, r28
    26bc:	2f 5f       	subi	r18, 0xFF	; 255
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	89 01       	movw	r16, r18
    26c2:	24 e0       	ldi	r18, 0x04	; 4
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e0       	ldi	r20, 0x00	; 0
    26c8:	50 e0       	ldi	r21, 0x00	; 0
    26ca:	b1 df       	rcall	.-158    	; 0x262e <dwt_readfromdevice>
    26cc:	fe 01       	movw	r30, r28
    26ce:	35 96       	adiw	r30, 0x05	; 5
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	70 e0       	ldi	r23, 0x00	; 0
    26d4:	cb 01       	movw	r24, r22
    26d6:	b8 2f       	mov	r27, r24
    26d8:	a7 2f       	mov	r26, r23
    26da:	96 2f       	mov	r25, r22
    26dc:	88 27       	eor	r24, r24
    26de:	22 91       	ld	r18, -Z
    26e0:	bc 01       	movw	r22, r24
    26e2:	cd 01       	movw	r24, r26
    26e4:	62 0f       	add	r22, r18
    26e6:	71 1d       	adc	r23, r1
    26e8:	81 1d       	adc	r24, r1
    26ea:	91 1d       	adc	r25, r1
    26ec:	e0 17       	cp	r30, r16
    26ee:	f1 07       	cpc	r31, r17
    26f0:	91 f7       	brne	.-28     	; 0x26d6 <dwt_read32bitoffsetreg+0x30>
    26f2:	24 96       	adiw	r28, 0x04	; 4
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	df 91       	pop	r29
    26fa:	cf 91       	pop	r28
    26fc:	1f 91       	pop	r17
    26fe:	0f 91       	pop	r16
    2700:	ff 90       	pop	r15
    2702:	ef 90       	pop	r14
    2704:	08 95       	ret

00002706 <dwt_readdevid>:
    2706:	60 e0       	ldi	r22, 0x00	; 0
    2708:	70 e0       	ldi	r23, 0x00	; 0
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	cb cf       	rjmp	.-106    	; 0x26a6 <dwt_read32bitoffsetreg>
    2710:	08 95       	ret

00002712 <dwt_read16bitoffsetreg>:
    2712:	0f 93       	push	r16
    2714:	1f 93       	push	r17
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	00 d0       	rcall	.+0      	; 0x271c <dwt_read16bitoffsetreg+0xa>
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	8e 01       	movw	r16, r28
    2722:	0f 5f       	subi	r16, 0xFF	; 255
    2724:	1f 4f       	sbci	r17, 0xFF	; 255
    2726:	22 e0       	ldi	r18, 0x02	; 2
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	7f df       	rcall	.-258    	; 0x262e <dwt_readfromdevice>
    2730:	8a 81       	ldd	r24, Y+2	; 0x02
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	98 2f       	mov	r25, r24
    2736:	88 27       	eor	r24, r24
    2738:	29 81       	ldd	r18, Y+1	; 0x01
    273a:	82 0f       	add	r24, r18
    273c:	91 1d       	adc	r25, r1
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	08 95       	ret

0000274c <dwt_read8bitoffsetreg>:
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	1f 92       	push	r1
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	8e 01       	movw	r16, r28
    275c:	0f 5f       	subi	r16, 0xFF	; 255
    275e:	1f 4f       	sbci	r17, 0xFF	; 255
    2760:	21 e0       	ldi	r18, 0x01	; 1
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	62 df       	rcall	.-316    	; 0x262e <dwt_readfromdevice>
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	0f 90       	pop	r0
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	1f 91       	pop	r17
    2774:	0f 91       	pop	r16
    2776:	08 95       	ret

00002778 <dwt_write8bitoffsetreg>:
    2778:	0f 93       	push	r16
    277a:	1f 93       	push	r17
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	1f 92       	push	r1
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	49 83       	std	Y+1, r20	; 0x01
    2788:	8e 01       	movw	r16, r28
    278a:	0f 5f       	subi	r16, 0xFF	; 255
    278c:	1f 4f       	sbci	r17, 0xFF	; 255
    278e:	21 e0       	ldi	r18, 0x01	; 1
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	1b df       	rcall	.-458    	; 0x25ce <dwt_writetodevice>
    2798:	0f 90       	pop	r0
    279a:	df 91       	pop	r29
    279c:	cf 91       	pop	r28
    279e:	1f 91       	pop	r17
    27a0:	0f 91       	pop	r16
    27a2:	08 95       	ret

000027a4 <dwt_write16bitoffsetreg>:
    27a4:	0f 93       	push	r16
    27a6:	1f 93       	push	r17
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <dwt_write16bitoffsetreg+0xa>
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	49 83       	std	Y+1, r20	; 0x01
    27b4:	5a 83       	std	Y+2, r21	; 0x02
    27b6:	8e 01       	movw	r16, r28
    27b8:	0f 5f       	subi	r16, 0xFF	; 255
    27ba:	1f 4f       	sbci	r17, 0xFF	; 255
    27bc:	22 e0       	ldi	r18, 0x02	; 2
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e0       	ldi	r20, 0x00	; 0
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	04 df       	rcall	.-504    	; 0x25ce <dwt_writetodevice>
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	1f 91       	pop	r17
    27d0:	0f 91       	pop	r16
    27d2:	08 95       	ret

000027d4 <dwt_write32bitoffsetreg>:
    27d4:	0f 93       	push	r16
    27d6:	1f 93       	push	r17
    27d8:	cf 93       	push	r28
    27da:	df 93       	push	r29
    27dc:	00 d0       	rcall	.+0      	; 0x27de <dwt_write32bitoffsetreg+0xa>
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <dwt_write32bitoffsetreg+0xc>
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	29 83       	std	Y+1, r18	; 0x01
    27e6:	3a 83       	std	Y+2, r19	; 0x02
    27e8:	4b 83       	std	Y+3, r20	; 0x03
    27ea:	5c 83       	std	Y+4, r21	; 0x04
    27ec:	8e 01       	movw	r16, r28
    27ee:	0f 5f       	subi	r16, 0xFF	; 255
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	24 e0       	ldi	r18, 0x04	; 4
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e0       	ldi	r20, 0x00	; 0
    27f8:	50 e0       	ldi	r21, 0x00	; 0
    27fa:	e9 de       	rcall	.-558    	; 0x25ce <dwt_writetodevice>
    27fc:	24 96       	adiw	r28, 0x04	; 4
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	08 95       	ret

0000280c <dwt_geteui>:
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	8c 01       	movw	r16, r24
    2812:	28 e0       	ldi	r18, 0x08	; 8
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	05 df       	rcall	.-502    	; 0x262e <dwt_readfromdevice>
    2824:	1f 91       	pop	r17
    2826:	0f 91       	pop	r16
    2828:	08 95       	ret

0000282a <_dwt_otpread>:
    282a:	ab 01       	movw	r20, r22
    282c:	64 e0       	ldi	r22, 0x04	; 4
    282e:	70 e0       	ldi	r23, 0x00	; 0
    2830:	8d e2       	ldi	r24, 0x2D	; 45
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	b7 df       	rcall	.-146    	; 0x27a4 <dwt_write16bitoffsetreg>
    2836:	43 e0       	ldi	r20, 0x03	; 3
    2838:	66 e0       	ldi	r22, 0x06	; 6
    283a:	70 e0       	ldi	r23, 0x00	; 0
    283c:	8d e2       	ldi	r24, 0x2D	; 45
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	9b df       	rcall	.-202    	; 0x2778 <dwt_write8bitoffsetreg>
    2842:	40 e0       	ldi	r20, 0x00	; 0
    2844:	66 e0       	ldi	r22, 0x06	; 6
    2846:	70 e0       	ldi	r23, 0x00	; 0
    2848:	8d e2       	ldi	r24, 0x2D	; 45
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	95 df       	rcall	.-214    	; 0x2778 <dwt_write8bitoffsetreg>
    284e:	6a e0       	ldi	r22, 0x0A	; 10
    2850:	70 e0       	ldi	r23, 0x00	; 0
    2852:	8d e2       	ldi	r24, 0x2D	; 45
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	27 cf       	rjmp	.-434    	; 0x26a6 <dwt_read32bitoffsetreg>
    2858:	08 95       	ret

0000285a <_dwt_aonarrayupload>:
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	62 e0       	ldi	r22, 0x02	; 2
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	8c e2       	ldi	r24, 0x2C	; 44
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	89 df       	rcall	.-238    	; 0x2778 <dwt_write8bitoffsetreg>
    2866:	42 e0       	ldi	r20, 0x02	; 2
    2868:	62 e0       	ldi	r22, 0x02	; 2
    286a:	70 e0       	ldi	r23, 0x00	; 0
    286c:	8c e2       	ldi	r24, 0x2C	; 44
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	83 cf       	rjmp	.-250    	; 0x2778 <dwt_write8bitoffsetreg>
    2872:	08 95       	ret

00002874 <_dwt_configlde>:
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	ec 01       	movw	r28, r24
    287a:	4d e6       	ldi	r20, 0x6D	; 109
    287c:	66 e0       	ldi	r22, 0x06	; 6
    287e:	78 e0       	ldi	r23, 0x08	; 8
    2880:	8e e2       	ldi	r24, 0x2E	; 46
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	79 df       	rcall	.-270    	; 0x2778 <dwt_write8bitoffsetreg>
    2886:	cd 2b       	or	r28, r29
    2888:	41 f0       	breq	.+16     	; 0x289a <_dwt_configlde+0x26>
    288a:	47 e0       	ldi	r20, 0x07	; 7
    288c:	56 e0       	ldi	r21, 0x06	; 6
    288e:	66 e0       	ldi	r22, 0x06	; 6
    2890:	78 e1       	ldi	r23, 0x18	; 24
    2892:	8e e2       	ldi	r24, 0x2E	; 46
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	86 df       	rcall	.-244    	; 0x27a4 <dwt_write16bitoffsetreg>
    2898:	07 c0       	rjmp	.+14     	; 0x28a8 <_dwt_configlde+0x34>
    289a:	47 e0       	ldi	r20, 0x07	; 7
    289c:	56 e1       	ldi	r21, 0x16	; 22
    289e:	66 e0       	ldi	r22, 0x06	; 6
    28a0:	78 e1       	ldi	r23, 0x18	; 24
    28a2:	8e e2       	ldi	r24, 0x2E	; 46
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	7e df       	rcall	.-260    	; 0x27a4 <dwt_write16bitoffsetreg>
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	08 95       	ret

000028ae <dwt_configure>:
    28ae:	4f 92       	push	r4
    28b0:	5f 92       	push	r5
    28b2:	6f 92       	push	r6
    28b4:	7f 92       	push	r7
    28b6:	af 92       	push	r10
    28b8:	bf 92       	push	r11
    28ba:	cf 92       	push	r12
    28bc:	df 92       	push	r13
    28be:	ef 92       	push	r14
    28c0:	ff 92       	push	r15
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	ec 01       	movw	r28, r24
    28cc:	48 80       	ld	r4, Y
    28ce:	59 80       	ldd	r5, Y+1	; 0x01
    28d0:	6a 80       	ldd	r6, Y+2	; 0x02
    28d2:	7b 80       	ldd	r7, Y+3	; 0x03
    28d4:	84 2d       	mov	r24, r4
    28d6:	ec 89       	ldd	r30, Y+20	; 0x14
    28d8:	fd 89       	ldd	r31, Y+21	; 0x15
    28da:	ee 0f       	add	r30, r30
    28dc:	ff 1f       	adc	r31, r31
    28de:	ed 51       	subi	r30, 0x1D	; 29
    28e0:	ff 4d       	sbci	r31, 0xDF	; 223
    28e2:	c0 80       	ld	r12, Z
    28e4:	d1 80       	ldd	r13, Z+1	; 0x01
    28e6:	0c 81       	ldd	r16, Y+4	; 0x04
    28e8:	01 50       	subi	r16, 0x01	; 1
    28ea:	84 30       	cpi	r24, 0x04	; 4
    28ec:	41 f0       	breq	.+16     	; 0x28fe <dwt_configure+0x50>
    28ee:	21 e0       	ldi	r18, 0x01	; 1
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	87 30       	cpi	r24, 0x07	; 7
    28f4:	09 f0       	breq	.+2      	; 0x28f8 <dwt_configure+0x4a>
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	e2 2e       	mov	r14, r18
    28fa:	f9 2e       	mov	r15, r25
    28fc:	03 c0       	rjmp	.+6      	; 0x2904 <dwt_configure+0x56>
    28fe:	ee 24       	eor	r14, r14
    2900:	e3 94       	inc	r14
    2902:	f1 2c       	mov	r15, r1
    2904:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2906:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2908:	ae 8d       	ldd	r26, Y+30	; 0x1e
    290a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    290c:	89 2b       	or	r24, r25
    290e:	8a 2b       	or	r24, r26
    2910:	8b 2b       	or	r24, r27
    2912:	a1 f4       	brne	.+40     	; 0x293c <dwt_configure+0x8e>
    2914:	e0 91 98 20 	lds	r30, 0x2098
    2918:	f0 91 99 20 	lds	r31, 0x2099
    291c:	80 89       	ldd	r24, Z+16	; 0x10
    291e:	91 89       	ldd	r25, Z+17	; 0x11
    2920:	a2 89       	ldd	r26, Z+18	; 0x12
    2922:	b3 89       	ldd	r27, Z+19	; 0x13
    2924:	a0 64       	ori	r26, 0x40	; 64
    2926:	80 8b       	std	Z+16, r24	; 0x10
    2928:	91 8b       	std	Z+17, r25	; 0x11
    292a:	a2 8b       	std	Z+18, r26	; 0x12
    292c:	b3 8b       	std	Z+19, r27	; 0x13
    292e:	d6 94       	lsr	r13
    2930:	c7 94       	ror	r12
    2932:	d6 94       	lsr	r13
    2934:	c7 94       	ror	r12
    2936:	d6 94       	lsr	r13
    2938:	c7 94       	ror	r12
    293a:	0d c0       	rjmp	.+26     	; 0x2956 <dwt_configure+0xa8>
    293c:	e0 91 98 20 	lds	r30, 0x2098
    2940:	f0 91 99 20 	lds	r31, 0x2099
    2944:	80 89       	ldd	r24, Z+16	; 0x10
    2946:	91 89       	ldd	r25, Z+17	; 0x11
    2948:	a2 89       	ldd	r26, Z+18	; 0x12
    294a:	b3 89       	ldd	r27, Z+19	; 0x13
    294c:	af 7b       	andi	r26, 0xBF	; 191
    294e:	80 8b       	std	Z+16, r24	; 0x10
    2950:	91 8b       	std	Z+17, r25	; 0x11
    2952:	a2 8b       	std	Z+18, r26	; 0x12
    2954:	b3 8b       	std	Z+19, r27	; 0x13
    2956:	e0 91 98 20 	lds	r30, 0x2098
    295a:	f0 91 99 20 	lds	r31, 0x2099
    295e:	88 a1       	ldd	r24, Y+32	; 0x20
    2960:	80 87       	std	Z+8, r24	; 0x08
    2962:	80 89       	ldd	r24, Z+16	; 0x10
    2964:	91 89       	ldd	r25, Z+17	; 0x11
    2966:	a2 89       	ldd	r26, Z+18	; 0x12
    2968:	b3 89       	ldd	r27, Z+19	; 0x13
    296a:	ac 7f       	andi	r26, 0xFC	; 252
    296c:	80 8b       	std	Z+16, r24	; 0x10
    296e:	91 8b       	std	Z+17, r25	; 0x11
    2970:	a2 8b       	std	Z+18, r26	; 0x12
    2972:	b3 8b       	std	Z+19, r27	; 0x13
    2974:	48 a1       	ldd	r20, Y+32	; 0x20
    2976:	59 a1       	ldd	r21, Y+33	; 0x21
    2978:	6a a1       	ldd	r22, Y+34	; 0x22
    297a:	7b a1       	ldd	r23, Y+35	; 0x23
    297c:	ba 01       	movw	r22, r20
    297e:	55 27       	eor	r21, r21
    2980:	44 27       	eor	r20, r20
    2982:	44 27       	eor	r20, r20
    2984:	55 27       	eor	r21, r21
    2986:	63 70       	andi	r22, 0x03	; 3
    2988:	77 27       	eor	r23, r23
    298a:	9a 01       	movw	r18, r20
    298c:	ab 01       	movw	r20, r22
    298e:	28 2b       	or	r18, r24
    2990:	39 2b       	or	r19, r25
    2992:	4a 2b       	or	r20, r26
    2994:	5b 2b       	or	r21, r27
    2996:	20 8b       	std	Z+16, r18	; 0x10
    2998:	31 8b       	std	Z+17, r19	; 0x11
    299a:	42 8b       	std	Z+18, r20	; 0x12
    299c:	53 8b       	std	Z+19, r21	; 0x13
    299e:	60 e0       	ldi	r22, 0x00	; 0
    29a0:	70 e0       	ldi	r23, 0x00	; 0
    29a2:	84 e0       	ldi	r24, 0x04	; 4
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	16 df       	rcall	.-468    	; 0x27d4 <dwt_write32bitoffsetreg>
    29a8:	a6 01       	movw	r20, r12
    29aa:	64 e0       	ldi	r22, 0x04	; 4
    29ac:	78 e2       	ldi	r23, 0x28	; 40
    29ae:	8e e2       	ldi	r24, 0x2E	; 46
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	f8 de       	rcall	.-528    	; 0x27a4 <dwt_write16bitoffsetreg>
    29b4:	10 e0       	ldi	r17, 0x00	; 0
    29b6:	c8 01       	movw	r24, r16
    29b8:	5d df       	rcall	.-326    	; 0x2874 <_dwt_configlde>
    29ba:	e4 2d       	mov	r30, r4
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	e8 57       	subi	r30, 0x78	; 120
    29c0:	fe 4d       	sbci	r31, 0xDE	; 222
    29c2:	a0 80       	ld	r10, Z
    29c4:	b1 2c       	mov	r11, r1
    29c6:	65 01       	movw	r12, r10
    29c8:	cc 0c       	add	r12, r12
    29ca:	dd 1c       	adc	r13, r13
    29cc:	cc 0c       	add	r12, r12
    29ce:	dd 1c       	adc	r13, r13
    29d0:	f6 01       	movw	r30, r12
    29d2:	e8 5a       	subi	r30, 0xA8	; 168
    29d4:	fe 4d       	sbci	r31, 0xDE	; 222
    29d6:	20 81       	ld	r18, Z
    29d8:	31 81       	ldd	r19, Z+1	; 0x01
    29da:	42 81       	ldd	r20, Z+2	; 0x02
    29dc:	53 81       	ldd	r21, Z+3	; 0x03
    29de:	67 e0       	ldi	r22, 0x07	; 7
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	8b e2       	ldi	r24, 0x2B	; 43
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	f6 de       	rcall	.-532    	; 0x27d4 <dwt_write32bitoffsetreg>
    29e8:	f5 01       	movw	r30, r10
    29ea:	ee 5a       	subi	r30, 0xAE	; 174
    29ec:	fe 4d       	sbci	r31, 0xDE	; 222
    29ee:	40 81       	ld	r20, Z
    29f0:	6b e0       	ldi	r22, 0x0B	; 11
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	8b e2       	ldi	r24, 0x2B	; 43
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	bf de       	rcall	.-642    	; 0x2778 <dwt_write8bitoffsetreg>
    29fa:	f7 01       	movw	r30, r14
    29fc:	ff 27       	eor	r31, r31
    29fe:	e0 5b       	subi	r30, 0xB0	; 176
    2a00:	fe 4d       	sbci	r31, 0xDE	; 222
    2a02:	40 81       	ld	r20, Z
    2a04:	6b e0       	ldi	r22, 0x0B	; 11
    2a06:	70 e0       	ldi	r23, 0x00	; 0
    2a08:	88 e2       	ldi	r24, 0x28	; 40
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	b5 de       	rcall	.-662    	; 0x2778 <dwt_write8bitoffsetreg>
    2a0e:	f6 01       	movw	r30, r12
    2a10:	e0 59       	subi	r30, 0x90	; 144
    2a12:	fe 4d       	sbci	r31, 0xDE	; 222
    2a14:	20 81       	ld	r18, Z
    2a16:	31 81       	ldd	r19, Z+1	; 0x01
    2a18:	42 81       	ldd	r20, Z+2	; 0x02
    2a1a:	53 81       	ldd	r21, Z+3	; 0x03
    2a1c:	6c e0       	ldi	r22, 0x0C	; 12
    2a1e:	70 e0       	ldi	r23, 0x00	; 0
    2a20:	88 e2       	ldi	r24, 0x28	; 40
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	d7 de       	rcall	.-594    	; 0x27d4 <dwt_write32bitoffsetreg>
    2a26:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2a28:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2a2a:	ee 0f       	add	r30, r30
    2a2c:	ff 1f       	adc	r31, r31
    2a2e:	88 8d       	ldd	r24, Y+24	; 0x18
    2a30:	99 8d       	ldd	r25, Y+25	; 0x19
    2a32:	e8 0f       	add	r30, r24
    2a34:	f9 1f       	adc	r31, r25
    2a36:	ee 0f       	add	r30, r30
    2a38:	ff 1f       	adc	r31, r31
    2a3a:	e7 5c       	subi	r30, 0xC7	; 199
    2a3c:	fe 4d       	sbci	r31, 0xDE	; 222
    2a3e:	40 81       	ld	r20, Z
    2a40:	51 81       	ldd	r21, Z+1	; 0x01
    2a42:	62 e0       	ldi	r22, 0x02	; 2
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	87 e2       	ldi	r24, 0x27	; 39
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	ac de       	rcall	.-680    	; 0x27a4 <dwt_write16bitoffsetreg>
    2a4c:	f8 01       	movw	r30, r16
    2a4e:	ee 0f       	add	r30, r30
    2a50:	ff 1f       	adc	r31, r31
    2a52:	eb 5c       	subi	r30, 0xCB	; 203
    2a54:	fe 4d       	sbci	r31, 0xDE	; 222
    2a56:	40 81       	ld	r20, Z
    2a58:	51 81       	ldd	r21, Z+1	; 0x01
    2a5a:	64 e0       	ldi	r22, 0x04	; 4
    2a5c:	70 e0       	ldi	r23, 0x00	; 0
    2a5e:	87 e2       	ldi	r24, 0x27	; 39
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a0 de       	rcall	.-704    	; 0x27a4 <dwt_write16bitoffsetreg>
    2a64:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a66:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a68:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2a6a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2a6c:	89 2b       	or	r24, r25
    2a6e:	8a 2b       	or	r24, r26
    2a70:	8b 2b       	or	r24, r27
    2a72:	41 f4       	brne	.+16     	; 0x2a84 <dwt_configure+0x1d6>
    2a74:	44 e6       	ldi	r20, 0x64	; 100
    2a76:	50 e0       	ldi	r21, 0x00	; 0
    2a78:	66 e0       	ldi	r22, 0x06	; 6
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	87 e2       	ldi	r24, 0x27	; 39
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	91 de       	rcall	.-734    	; 0x27a4 <dwt_write16bitoffsetreg>
    2a82:	23 c0       	rjmp	.+70     	; 0x2aca <dwt_configure+0x21c>
    2a84:	88 85       	ldd	r24, Y+8	; 0x08
    2a86:	99 85       	ldd	r25, Y+9	; 0x09
    2a88:	aa 85       	ldd	r26, Y+10	; 0x0a
    2a8a:	bb 85       	ldd	r27, Y+11	; 0x0b
    2a8c:	04 97       	sbiw	r24, 0x04	; 4
    2a8e:	a1 05       	cpc	r26, r1
    2a90:	b1 05       	cpc	r27, r1
    2a92:	71 f4       	brne	.+28     	; 0x2ab0 <dwt_configure+0x202>
    2a94:	40 e1       	ldi	r20, 0x10	; 16
    2a96:	50 e0       	ldi	r21, 0x00	; 0
    2a98:	66 e0       	ldi	r22, 0x06	; 6
    2a9a:	70 e0       	ldi	r23, 0x00	; 0
    2a9c:	87 e2       	ldi	r24, 0x27	; 39
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	81 de       	rcall	.-766    	; 0x27a4 <dwt_write16bitoffsetreg>
    2aa2:	40 e1       	ldi	r20, 0x10	; 16
    2aa4:	66 e2       	ldi	r22, 0x26	; 38
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	87 e2       	ldi	r24, 0x27	; 39
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	65 de       	rcall	.-822    	; 0x2778 <dwt_write8bitoffsetreg>
    2aae:	0d c0       	rjmp	.+26     	; 0x2aca <dwt_configure+0x21c>
    2ab0:	40 e2       	ldi	r20, 0x20	; 32
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	66 e0       	ldi	r22, 0x06	; 6
    2ab6:	70 e0       	ldi	r23, 0x00	; 0
    2ab8:	87 e2       	ldi	r24, 0x27	; 39
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	73 de       	rcall	.-794    	; 0x27a4 <dwt_write16bitoffsetreg>
    2abe:	48 e2       	ldi	r20, 0x28	; 40
    2ac0:	66 e2       	ldi	r22, 0x26	; 38
    2ac2:	70 e0       	ldi	r23, 0x00	; 0
    2ac4:	87 e2       	ldi	r24, 0x27	; 39
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	57 de       	rcall	.-850    	; 0x2778 <dwt_write8bitoffsetreg>
    2aca:	8c 85       	ldd	r24, Y+12	; 0x0c
    2acc:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ace:	f8 01       	movw	r30, r16
    2ad0:	ee 0f       	add	r30, r30
    2ad2:	ff 1f       	adc	r31, r31
    2ad4:	ee 0f       	add	r30, r30
    2ad6:	ff 1f       	adc	r31, r31
    2ad8:	e8 0f       	add	r30, r24
    2ada:	f9 1f       	adc	r31, r25
    2adc:	ee 0f       	add	r30, r30
    2ade:	ff 1f       	adc	r31, r31
    2ae0:	ee 0f       	add	r30, r30
    2ae2:	ff 1f       	adc	r31, r31
    2ae4:	eb 5e       	subi	r30, 0xEB	; 235
    2ae6:	fe 4d       	sbci	r31, 0xDE	; 222
    2ae8:	20 81       	ld	r18, Z
    2aea:	31 81       	ldd	r19, Z+1	; 0x01
    2aec:	42 81       	ldd	r20, Z+2	; 0x02
    2aee:	53 81       	ldd	r21, Z+3	; 0x03
    2af0:	68 e0       	ldi	r22, 0x08	; 8
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	87 e2       	ldi	r24, 0x27	; 39
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	6d de       	rcall	.-806    	; 0x27d4 <dwt_write32bitoffsetreg>
    2afa:	8c a1       	ldd	r24, Y+36	; 0x24
    2afc:	9d a1       	ldd	r25, Y+37	; 0x25
    2afe:	ae a1       	ldd	r26, Y+38	; 0x26
    2b00:	bf a1       	ldd	r27, Y+39	; 0x27
    2b02:	89 2b       	or	r24, r25
    2b04:	8a 2b       	or	r24, r26
    2b06:	8b 2b       	or	r24, r27
    2b08:	41 f4       	brne	.+16     	; 0x2b1a <dwt_configure+0x26c>
    2b0a:	81 e4       	ldi	r24, 0x41	; 65
    2b0c:	90 e1       	ldi	r25, 0x10	; 16
    2b0e:	a0 e0       	ldi	r26, 0x00	; 0
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	8c a3       	std	Y+36, r24	; 0x24
    2b14:	9d a3       	std	Y+37, r25	; 0x25
    2b16:	ae a3       	std	Y+38, r26	; 0x26
    2b18:	bf a3       	std	Y+39, r27	; 0x27
    2b1a:	4c a1       	ldd	r20, Y+36	; 0x24
    2b1c:	5d a1       	ldd	r21, Y+37	; 0x25
    2b1e:	60 e2       	ldi	r22, 0x20	; 32
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	87 e2       	ldi	r24, 0x27	; 39
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	3e de       	rcall	.-900    	; 0x27a4 <dwt_write16bitoffsetreg>
    2b28:	20 91 48 21 	lds	r18, 0x2148
    2b2c:	30 91 49 21 	lds	r19, 0x2149
    2b30:	40 91 4a 21 	lds	r20, 0x214A
    2b34:	50 91 4b 21 	lds	r21, 0x214B
    2b38:	6c e0       	ldi	r22, 0x0C	; 12
    2b3a:	70 e0       	ldi	r23, 0x00	; 0
    2b3c:	83 e2       	ldi	r24, 0x23	; 35
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	49 de       	rcall	.-878    	; 0x27d4 <dwt_write32bitoffsetreg>
    2b42:	f8 01       	movw	r30, r16
    2b44:	ee 0f       	add	r30, r30
    2b46:	ff 1f       	adc	r31, r31
    2b48:	e4 5b       	subi	r30, 0xB4	; 180
    2b4a:	fe 4d       	sbci	r31, 0xDE	; 222
    2b4c:	40 81       	ld	r20, Z
    2b4e:	51 81       	ldd	r21, Z+1	; 0x01
    2b50:	64 e0       	ldi	r22, 0x04	; 4
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	83 e2       	ldi	r24, 0x23	; 35
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	25 de       	rcall	.-950    	; 0x27a4 <dwt_write16bitoffsetreg>
    2b5a:	88 8d       	ldd	r24, Y+24	; 0x18
    2b5c:	99 8d       	ldd	r25, Y+25	; 0x19
    2b5e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2b60:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2b62:	89 2b       	or	r24, r25
    2b64:	8a 2b       	or	r24, r26
    2b66:	8b 2b       	or	r24, r27
    2b68:	69 f0       	breq	.+26     	; 0x2b84 <dwt_configure+0x2d6>
    2b6a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2b6c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2b6e:	eb 5b       	subi	r30, 0xBB	; 187
    2b70:	fe 4d       	sbci	r31, 0xDE	; 222
    2b72:	40 81       	ld	r20, Z
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	70 e0       	ldi	r23, 0x00	; 0
    2b78:	81 e2       	ldi	r24, 0x21	; 33
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	fd dd       	rcall	.-1030   	; 0x2778 <dwt_write8bitoffsetreg>
    2b7e:	e1 e0       	ldi	r30, 0x01	; 1
    2b80:	83 e0       	ldi	r24, 0x03	; 3
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <dwt_configure+0x2da>
    2b84:	e0 e0       	ldi	r30, 0x00	; 0
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	0c 89       	ldd	r16, Y+20	; 0x14
    2b8a:	1d 89       	ldd	r17, Y+21	; 0x15
    2b8c:	2e 89       	ldd	r18, Y+22	; 0x16
    2b8e:	3f 89       	ldd	r19, Y+23	; 0x17
    2b90:	0f 2e       	mov	r0, r31
    2b92:	fb e1       	ldi	r31, 0x1B	; 27
    2b94:	00 0f       	add	r16, r16
    2b96:	11 1f       	adc	r17, r17
    2b98:	22 1f       	adc	r18, r18
    2b9a:	33 1f       	adc	r19, r19
    2b9c:	fa 95       	dec	r31
    2b9e:	d1 f7       	brne	.-12     	; 0x2b94 <dwt_configure+0x2e6>
    2ba0:	f0 2d       	mov	r31, r0
    2ba2:	b3 01       	movw	r22, r6
    2ba4:	a2 01       	movw	r20, r4
    2ba6:	4f 70       	andi	r20, 0x0F	; 15
    2ba8:	55 27       	eor	r21, r21
    2baa:	66 27       	eor	r22, r22
    2bac:	77 27       	eor	r23, r23
    2bae:	04 2b       	or	r16, r20
    2bb0:	15 2b       	or	r17, r21
    2bb2:	26 2b       	or	r18, r22
    2bb4:	37 2b       	or	r19, r23
    2bb6:	4c 81       	ldd	r20, Y+4	; 0x04
    2bb8:	5d 81       	ldd	r21, Y+5	; 0x05
    2bba:	6e 81       	ldd	r22, Y+6	; 0x06
    2bbc:	7f 81       	ldd	r23, Y+7	; 0x07
    2bbe:	03 2e       	mov	r0, r19
    2bc0:	32 e1       	ldi	r19, 0x12	; 18
    2bc2:	44 0f       	add	r20, r20
    2bc4:	55 1f       	adc	r21, r21
    2bc6:	66 1f       	adc	r22, r22
    2bc8:	77 1f       	adc	r23, r23
    2bca:	3a 95       	dec	r19
    2bcc:	d1 f7       	brne	.-12     	; 0x2bc2 <dwt_configure+0x314>
    2bce:	30 2d       	mov	r19, r0
    2bd0:	44 27       	eor	r20, r20
    2bd2:	55 27       	eor	r21, r21
    2bd4:	6c 70       	andi	r22, 0x0C	; 12
    2bd6:	77 27       	eor	r23, r23
    2bd8:	04 2b       	or	r16, r20
    2bda:	15 2b       	or	r17, r21
    2bdc:	26 2b       	or	r18, r22
    2bde:	37 2b       	or	r19, r23
    2be0:	48 89       	ldd	r20, Y+16	; 0x10
    2be2:	59 89       	ldd	r21, Y+17	; 0x11
    2be4:	6a 89       	ldd	r22, Y+18	; 0x12
    2be6:	7b 89       	ldd	r23, Y+19	; 0x13
    2be8:	03 2e       	mov	r0, r19
    2bea:	36 e1       	ldi	r19, 0x16	; 22
    2bec:	44 0f       	add	r20, r20
    2bee:	55 1f       	adc	r21, r21
    2bf0:	66 1f       	adc	r22, r22
    2bf2:	77 1f       	adc	r23, r23
    2bf4:	3a 95       	dec	r19
    2bf6:	d1 f7       	brne	.-12     	; 0x2bec <dwt_configure+0x33e>
    2bf8:	30 2d       	mov	r19, r0
    2bfa:	44 27       	eor	r20, r20
    2bfc:	55 27       	eor	r21, r21
    2bfe:	60 7c       	andi	r22, 0xC0	; 192
    2c00:	77 70       	andi	r23, 0x07	; 7
    2c02:	04 2b       	or	r16, r20
    2c04:	15 2b       	or	r17, r21
    2c06:	26 2b       	or	r18, r22
    2c08:	37 2b       	or	r19, r23
    2c0a:	55 24       	eor	r5, r5
    2c0c:	66 24       	eor	r6, r6
    2c0e:	77 24       	eor	r7, r7
    2c10:	b3 01       	movw	r22, r6
    2c12:	a2 01       	movw	r20, r4
    2c14:	44 0f       	add	r20, r20
    2c16:	55 1f       	adc	r21, r21
    2c18:	66 1f       	adc	r22, r22
    2c1a:	77 1f       	adc	r23, r23
    2c1c:	44 0f       	add	r20, r20
    2c1e:	55 1f       	adc	r21, r21
    2c20:	66 1f       	adc	r22, r22
    2c22:	77 1f       	adc	r23, r23
    2c24:	44 0f       	add	r20, r20
    2c26:	55 1f       	adc	r21, r21
    2c28:	66 1f       	adc	r22, r22
    2c2a:	77 1f       	adc	r23, r23
    2c2c:	44 0f       	add	r20, r20
    2c2e:	55 1f       	adc	r21, r21
    2c30:	66 1f       	adc	r22, r22
    2c32:	77 1f       	adc	r23, r23
    2c34:	55 27       	eor	r21, r21
    2c36:	66 27       	eor	r22, r22
    2c38:	77 27       	eor	r23, r23
    2c3a:	40 2b       	or	r20, r16
    2c3c:	51 2b       	or	r21, r17
    2c3e:	62 2b       	or	r22, r18
    2c40:	73 2b       	or	r23, r19
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	a0 e0       	ldi	r26, 0x00	; 0
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	07 2e       	mov	r0, r23
    2c4a:	74 e1       	ldi	r23, 0x14	; 20
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	aa 1f       	adc	r26, r26
    2c52:	bb 1f       	adc	r27, r27
    2c54:	7a 95       	dec	r23
    2c56:	d1 f7       	brne	.-12     	; 0x2c4c <dwt_configure+0x39e>
    2c58:	70 2d       	mov	r23, r0
    2c5a:	84 2b       	or	r24, r20
    2c5c:	95 2b       	or	r25, r21
    2c5e:	a6 2b       	or	r26, r22
    2c60:	b7 2b       	or	r27, r23
    2c62:	4e 2e       	mov	r4, r30
    2c64:	51 2c       	mov	r5, r1
    2c66:	61 2c       	mov	r6, r1
    2c68:	71 2c       	mov	r7, r1
    2c6a:	03 2e       	mov	r0, r19
    2c6c:	31 e1       	ldi	r19, 0x11	; 17
    2c6e:	44 0c       	add	r4, r4
    2c70:	55 1c       	adc	r5, r5
    2c72:	66 1c       	adc	r6, r6
    2c74:	77 1c       	adc	r7, r7
    2c76:	3a 95       	dec	r19
    2c78:	d1 f7       	brne	.-12     	; 0x2c6e <dwt_configure+0x3c0>
    2c7a:	30 2d       	mov	r19, r0
    2c7c:	a3 01       	movw	r20, r6
    2c7e:	92 01       	movw	r18, r4
    2c80:	28 2b       	or	r18, r24
    2c82:	39 2b       	or	r19, r25
    2c84:	4a 2b       	or	r20, r26
    2c86:	5b 2b       	or	r21, r27
    2c88:	60 e0       	ldi	r22, 0x00	; 0
    2c8a:	70 e0       	ldi	r23, 0x00	; 0
    2c8c:	8f e1       	ldi	r24, 0x1F	; 31
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	a1 dd       	rcall	.-1214   	; 0x27d4 <dwt_write32bitoffsetreg>
    2c92:	4c 81       	ldd	r20, Y+4	; 0x04
    2c94:	5d 81       	ldd	r21, Y+5	; 0x05
    2c96:	6e 81       	ldd	r22, Y+6	; 0x06
    2c98:	7f 81       	ldd	r23, Y+7	; 0x07
    2c9a:	88 85       	ldd	r24, Y+8	; 0x08
    2c9c:	99 85       	ldd	r25, Y+9	; 0x09
    2c9e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2ca0:	bb 85       	ldd	r27, Y+11	; 0x0b
    2ca2:	84 2b       	or	r24, r20
    2ca4:	95 2b       	or	r25, r21
    2ca6:	a6 2b       	or	r26, r22
    2ca8:	b7 2b       	or	r27, r23
    2caa:	bc 01       	movw	r22, r24
    2cac:	55 27       	eor	r21, r21
    2cae:	44 27       	eor	r20, r20
    2cb0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2cb2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2cb4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2cb6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2cb8:	07 2e       	mov	r0, r23
    2cba:	7d e0       	ldi	r23, 0x0D	; 13
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	aa 1f       	adc	r26, r26
    2cc2:	bb 1f       	adc	r27, r27
    2cc4:	7a 95       	dec	r23
    2cc6:	d1 f7       	brne	.-12     	; 0x2cbc <dwt_configure+0x40e>
    2cc8:	70 2d       	mov	r23, r0
    2cca:	9a 01       	movw	r18, r20
    2ccc:	ab 01       	movw	r20, r22
    2cce:	28 2b       	or	r18, r24
    2cd0:	39 2b       	or	r19, r25
    2cd2:	4a 2b       	or	r20, r26
    2cd4:	5b 2b       	or	r21, r27
    2cd6:	e0 91 98 20 	lds	r30, 0x2098
    2cda:	f0 91 99 20 	lds	r31, 0x2099
    2cde:	22 87       	std	Z+10, r18	; 0x0a
    2ce0:	33 87       	std	Z+11, r19	; 0x0b
    2ce2:	44 87       	std	Z+12, r20	; 0x0c
    2ce4:	55 87       	std	Z+13, r21	; 0x0d
    2ce6:	60 e0       	ldi	r22, 0x00	; 0
    2ce8:	70 e0       	ldi	r23, 0x00	; 0
    2cea:	88 e0       	ldi	r24, 0x08	; 8
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	72 dd       	rcall	.-1308   	; 0x27d4 <dwt_write32bitoffsetreg>
    2cf0:	42 e4       	ldi	r20, 0x42	; 66
    2cf2:	60 e0       	ldi	r22, 0x00	; 0
    2cf4:	70 e0       	ldi	r23, 0x00	; 0
    2cf6:	8d e0       	ldi	r24, 0x0D	; 13
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	3e dd       	rcall	.-1412   	; 0x2778 <dwt_write8bitoffsetreg>
    2cfc:	df 91       	pop	r29
    2cfe:	cf 91       	pop	r28
    2d00:	1f 91       	pop	r17
    2d02:	0f 91       	pop	r16
    2d04:	ff 90       	pop	r15
    2d06:	ef 90       	pop	r14
    2d08:	df 90       	pop	r13
    2d0a:	cf 90       	pop	r12
    2d0c:	bf 90       	pop	r11
    2d0e:	af 90       	pop	r10
    2d10:	7f 90       	pop	r7
    2d12:	6f 90       	pop	r6
    2d14:	5f 90       	pop	r5
    2d16:	4f 90       	pop	r4
    2d18:	08 95       	ret

00002d1a <dwt_setleds>:
    2d1a:	cf 93       	push	r28
    2d1c:	c8 2f       	mov	r28, r24
    2d1e:	80 ff       	sbrs	r24, 0
    2d20:	20 c0       	rjmp	.+64     	; 0x2d62 <dwt_setleds+0x48>
    2d22:	60 e0       	ldi	r22, 0x00	; 0
    2d24:	70 e0       	ldi	r23, 0x00	; 0
    2d26:	86 e2       	ldi	r24, 0x26	; 38
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	bd dc       	rcall	.-1670   	; 0x26a6 <dwt_read32bitoffsetreg>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	93 7c       	andi	r25, 0xC3	; 195
    2d32:	9c 01       	movw	r18, r24
    2d34:	ad 01       	movw	r20, r26
    2d36:	34 61       	ori	r19, 0x14	; 20
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	70 e0       	ldi	r23, 0x00	; 0
    2d3c:	86 e2       	ldi	r24, 0x26	; 38
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	49 dd       	rcall	.-1390   	; 0x27d4 <dwt_write32bitoffsetreg>
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	70 e0       	ldi	r23, 0x00	; 0
    2d46:	86 e3       	ldi	r24, 0x36	; 54
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	ad dc       	rcall	.-1702   	; 0x26a6 <dwt_read32bitoffsetreg>
    2d4c:	9b 01       	movw	r18, r22
    2d4e:	ac 01       	movw	r20, r24
    2d50:	44 68       	ori	r20, 0x84	; 132
    2d52:	60 e0       	ldi	r22, 0x00	; 0
    2d54:	70 e0       	ldi	r23, 0x00	; 0
    2d56:	86 e3       	ldi	r24, 0x36	; 54
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	3c dd       	rcall	.-1416   	; 0x27d4 <dwt_write32bitoffsetreg>
    2d5c:	c1 fd       	sbrc	r28, 1
    2d5e:	19 c0       	rjmp	.+50     	; 0x2d92 <dwt_setleds+0x78>
    2d60:	0e c0       	rjmp	.+28     	; 0x2d7e <dwt_setleds+0x64>
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	70 e0       	ldi	r23, 0x00	; 0
    2d66:	86 e2       	ldi	r24, 0x26	; 38
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	9d dc       	rcall	.-1734   	; 0x26a6 <dwt_read32bitoffsetreg>
    2d6c:	9b 01       	movw	r18, r22
    2d6e:	ac 01       	movw	r20, r24
    2d70:	33 7c       	andi	r19, 0xC3	; 195
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	70 e0       	ldi	r23, 0x00	; 0
    2d76:	86 e2       	ldi	r24, 0x26	; 38
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	2c dd       	rcall	.-1448   	; 0x27d4 <dwt_write32bitoffsetreg>
    2d7c:	1c c0       	rjmp	.+56     	; 0x2db6 <dwt_setleds+0x9c>
    2d7e:	20 e1       	ldi	r18, 0x10	; 16
    2d80:	31 e0       	ldi	r19, 0x01	; 1
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	50 e0       	ldi	r21, 0x00	; 0
    2d86:	68 e2       	ldi	r22, 0x28	; 40
    2d88:	70 e0       	ldi	r23, 0x00	; 0
    2d8a:	86 e3       	ldi	r24, 0x36	; 54
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	22 dd       	rcall	.-1468   	; 0x27d4 <dwt_write32bitoffsetreg>
    2d90:	12 c0       	rjmp	.+36     	; 0x2db6 <dwt_setleds+0x9c>
    2d92:	20 e1       	ldi	r18, 0x10	; 16
    2d94:	31 e0       	ldi	r19, 0x01	; 1
    2d96:	4f e0       	ldi	r20, 0x0F	; 15
    2d98:	50 e0       	ldi	r21, 0x00	; 0
    2d9a:	68 e2       	ldi	r22, 0x28	; 40
    2d9c:	70 e0       	ldi	r23, 0x00	; 0
    2d9e:	86 e3       	ldi	r24, 0x36	; 54
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	18 dd       	rcall	.-1488   	; 0x27d4 <dwt_write32bitoffsetreg>
    2da4:	20 e1       	ldi	r18, 0x10	; 16
    2da6:	31 e0       	ldi	r19, 0x01	; 1
    2da8:	40 e0       	ldi	r20, 0x00	; 0
    2daa:	50 e0       	ldi	r21, 0x00	; 0
    2dac:	68 e2       	ldi	r22, 0x28	; 40
    2dae:	70 e0       	ldi	r23, 0x00	; 0
    2db0:	86 e3       	ldi	r24, 0x36	; 54
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	0f dd       	rcall	.-1506   	; 0x27d4 <dwt_write32bitoffsetreg>
    2db6:	cf 91       	pop	r28
    2db8:	08 95       	ret

00002dba <_dwt_enableclocks>:
    2dba:	ef 92       	push	r14
    2dbc:	ff 92       	push	r15
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	cf 93       	push	r28
    2dc4:	df 93       	push	r29
    2dc6:	00 d0       	rcall	.+0      	; 0x2dc8 <_dwt_enableclocks+0xe>
    2dc8:	cd b7       	in	r28, 0x3d	; 61
    2dca:	de b7       	in	r29, 0x3e	; 62
    2dcc:	7c 01       	movw	r14, r24
    2dce:	8e 01       	movw	r16, r28
    2dd0:	0f 5f       	subi	r16, 0xFF	; 255
    2dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd4:	22 e0       	ldi	r18, 0x02	; 2
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e0       	ldi	r20, 0x00	; 0
    2dda:	50 e0       	ldi	r21, 0x00	; 0
    2ddc:	60 e0       	ldi	r22, 0x00	; 0
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	86 e3       	ldi	r24, 0x36	; 54
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	24 dc       	rcall	.-1976   	; 0x262e <dwt_readfromdevice>
    2de6:	8f e0       	ldi	r24, 0x0F	; 15
    2de8:	e8 16       	cp	r14, r24
    2dea:	f1 04       	cpc	r15, r1
    2dec:	a0 f5       	brcc	.+104    	; 0x2e56 <_dwt_enableclocks+0x9c>
    2dee:	f7 01       	movw	r30, r14
    2df0:	eb 5f       	subi	r30, 0xFB	; 251
    2df2:	fe 4f       	sbci	r31, 0xFE	; 254
    2df4:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__tablejump2__>
    2df8:	19 82       	std	Y+1, r1	; 0x01
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	8e 7f       	andi	r24, 0xFE	; 254
    2dfe:	8a 83       	std	Y+2, r24	; 0x02
    2e00:	2a c0       	rjmp	.+84     	; 0x2e56 <_dwt_enableclocks+0x9c>
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	8c 7f       	andi	r24, 0xFC	; 252
    2e06:	81 60       	ori	r24, 0x01	; 1
    2e08:	89 83       	std	Y+1, r24	; 0x01
    2e0a:	25 c0       	rjmp	.+74     	; 0x2e56 <_dwt_enableclocks+0x9c>
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	8c 7f       	andi	r24, 0xFC	; 252
    2e10:	82 60       	ori	r24, 0x02	; 2
    2e12:	89 83       	std	Y+1, r24	; 0x01
    2e14:	20 c0       	rjmp	.+64     	; 0x2e56 <_dwt_enableclocks+0x9c>
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	83 7b       	andi	r24, 0xB3	; 179
    2e1a:	88 64       	ori	r24, 0x48	; 72
    2e1c:	89 83       	std	Y+1, r24	; 0x01
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	80 68       	ori	r24, 0x80	; 128
    2e22:	8a 83       	std	Y+2, r24	; 0x02
    2e24:	18 c0       	rjmp	.+48     	; 0x2e56 <_dwt_enableclocks+0x9c>
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	83 7b       	andi	r24, 0xB3	; 179
    2e2a:	89 83       	std	Y+1, r24	; 0x01
    2e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2e:	8f 77       	andi	r24, 0x7F	; 127
    2e30:	8a 83       	std	Y+2, r24	; 0x02
    2e32:	11 c0       	rjmp	.+34     	; 0x2e56 <_dwt_enableclocks+0x9c>
    2e34:	8a 81       	ldd	r24, Y+2	; 0x02
    2e36:	82 60       	ori	r24, 0x02	; 2
    2e38:	8a 83       	std	Y+2, r24	; 0x02
    2e3a:	0d c0       	rjmp	.+26     	; 0x2e56 <_dwt_enableclocks+0x9c>
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	8d 7f       	andi	r24, 0xFD	; 253
    2e40:	8a 83       	std	Y+2, r24	; 0x02
    2e42:	09 c0       	rjmp	.+18     	; 0x2e56 <_dwt_enableclocks+0x9c>
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	8f 7c       	andi	r24, 0xCF	; 207
    2e48:	80 62       	ori	r24, 0x20	; 32
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	04 c0       	rjmp	.+8      	; 0x2e56 <_dwt_enableclocks+0x9c>
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	83 e0       	ldi	r24, 0x03	; 3
    2e54:	8a 83       	std	Y+2, r24	; 0x02
    2e56:	8e 01       	movw	r16, r28
    2e58:	0f 5f       	subi	r16, 0xFF	; 255
    2e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5c:	21 e0       	ldi	r18, 0x01	; 1
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e0       	ldi	r20, 0x00	; 0
    2e62:	50 e0       	ldi	r21, 0x00	; 0
    2e64:	60 e0       	ldi	r22, 0x00	; 0
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	86 e3       	ldi	r24, 0x36	; 54
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	b0 db       	rcall	.-2208   	; 0x25ce <dwt_writetodevice>
    2e6e:	0f 5f       	subi	r16, 0xFF	; 255
    2e70:	1f 4f       	sbci	r17, 0xFF	; 255
    2e72:	21 e0       	ldi	r18, 0x01	; 1
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e0       	ldi	r20, 0x00	; 0
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	61 e0       	ldi	r22, 0x01	; 1
    2e7c:	70 e0       	ldi	r23, 0x00	; 0
    2e7e:	86 e3       	ldi	r24, 0x36	; 54
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	a5 db       	rcall	.-2230   	; 0x25ce <dwt_writetodevice>
    2e84:	0f 90       	pop	r0
    2e86:	0f 90       	pop	r0
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	1f 91       	pop	r17
    2e8e:	0f 91       	pop	r16
    2e90:	ff 90       	pop	r15
    2e92:	ef 90       	pop	r14
    2e94:	08 95       	ret

00002e96 <_dwt_loaducodefromrom>:
    2e96:	8e e0       	ldi	r24, 0x0E	; 14
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	8f df       	rcall	.-226    	; 0x2dba <_dwt_enableclocks>
    2e9c:	40 e0       	ldi	r20, 0x00	; 0
    2e9e:	50 e8       	ldi	r21, 0x80	; 128
    2ea0:	66 e0       	ldi	r22, 0x06	; 6
    2ea2:	70 e0       	ldi	r23, 0x00	; 0
    2ea4:	8d e2       	ldi	r24, 0x2D	; 45
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	7d dc       	rcall	.-1798   	; 0x27a4 <dwt_write16bitoffsetreg>
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	7f d1       	rcall	.+766    	; 0x31ae <deca_sleep>
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	82 cf       	rjmp	.-252    	; 0x2dba <_dwt_enableclocks>
    2eb6:	08 95       	ret

00002eb8 <_dwt_disablesequencing>:
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	7e df       	rcall	.-260    	; 0x2dba <_dwt_enableclocks>
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	64 e0       	ldi	r22, 0x04	; 4
    2ec4:	70 e0       	ldi	r23, 0x00	; 0
    2ec6:	86 e3       	ldi	r24, 0x36	; 54
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	6c cc       	rjmp	.-1832   	; 0x27a4 <dwt_write16bitoffsetreg>
    2ecc:	08 95       	ret

00002ece <dwt_syncrxbufptrs>:
    2ece:	63 e0       	ldi	r22, 0x03	; 3
    2ed0:	70 e0       	ldi	r23, 0x00	; 0
    2ed2:	8f e0       	ldi	r24, 0x0F	; 15
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	3a dc       	rcall	.-1932   	; 0x274c <dwt_read8bitoffsetreg>
    2ed8:	48 2f       	mov	r20, r24
    2eda:	40 78       	andi	r20, 0x80	; 128
    2edc:	50 e0       	ldi	r21, 0x00	; 0
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	70 e0       	ldi	r23, 0x00	; 0
    2ee2:	80 74       	andi	r24, 0x40	; 64
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	a0 e0       	ldi	r26, 0x00	; 0
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	88 0f       	add	r24, r24
    2eec:	99 1f       	adc	r25, r25
    2eee:	aa 1f       	adc	r26, r26
    2ef0:	bb 1f       	adc	r27, r27
    2ef2:	48 17       	cp	r20, r24
    2ef4:	59 07       	cpc	r21, r25
    2ef6:	6a 07       	cpc	r22, r26
    2ef8:	7b 07       	cpc	r23, r27
    2efa:	31 f0       	breq	.+12     	; 0x2f08 <dwt_syncrxbufptrs+0x3a>
    2efc:	41 e0       	ldi	r20, 0x01	; 1
    2efe:	63 e0       	ldi	r22, 0x03	; 3
    2f00:	70 e0       	ldi	r23, 0x00	; 0
    2f02:	8d e0       	ldi	r24, 0x0D	; 13
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	38 cc       	rjmp	.-1936   	; 0x2778 <dwt_write8bitoffsetreg>
    2f08:	08 95       	ret

00002f0a <dwt_forcetrxoff>:
    2f0a:	cf 92       	push	r12
    2f0c:	df 92       	push	r13
    2f0e:	ef 92       	push	r14
    2f10:	ff 92       	push	r15
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	60 e0       	ldi	r22, 0x00	; 0
    2f18:	70 e0       	ldi	r23, 0x00	; 0
    2f1a:	8e e0       	ldi	r24, 0x0E	; 14
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	c3 db       	rcall	.-2170   	; 0x26a6 <dwt_read32bitoffsetreg>
    2f20:	6b 01       	movw	r12, r22
    2f22:	7c 01       	movw	r14, r24
    2f24:	3e d1       	rcall	.+636    	; 0x31a2 <decamutexon>
    2f26:	ec 01       	movw	r28, r24
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	a9 01       	movw	r20, r18
    2f2e:	60 e0       	ldi	r22, 0x00	; 0
    2f30:	70 e0       	ldi	r23, 0x00	; 0
    2f32:	8e e0       	ldi	r24, 0x0E	; 14
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	4e dc       	rcall	.-1892   	; 0x27d4 <dwt_write32bitoffsetreg>
    2f38:	40 e4       	ldi	r20, 0x40	; 64
    2f3a:	60 e0       	ldi	r22, 0x00	; 0
    2f3c:	70 e0       	ldi	r23, 0x00	; 0
    2f3e:	8d e0       	ldi	r24, 0x0D	; 13
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	1a dc       	rcall	.-1996   	; 0x2778 <dwt_write8bitoffsetreg>
    2f44:	28 ef       	ldi	r18, 0xF8	; 248
    2f46:	3f ef       	ldi	r19, 0xFF	; 255
    2f48:	47 e2       	ldi	r20, 0x27	; 39
    2f4a:	54 e2       	ldi	r21, 0x24	; 36
    2f4c:	60 e0       	ldi	r22, 0x00	; 0
    2f4e:	70 e0       	ldi	r23, 0x00	; 0
    2f50:	8f e0       	ldi	r24, 0x0F	; 15
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	3f dc       	rcall	.-1922   	; 0x27d4 <dwt_write32bitoffsetreg>
    2f56:	bb df       	rcall	.-138    	; 0x2ece <dwt_syncrxbufptrs>
    2f58:	a7 01       	movw	r20, r14
    2f5a:	96 01       	movw	r18, r12
    2f5c:	60 e0       	ldi	r22, 0x00	; 0
    2f5e:	70 e0       	ldi	r23, 0x00	; 0
    2f60:	8e e0       	ldi	r24, 0x0E	; 14
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	37 dc       	rcall	.-1938   	; 0x27d4 <dwt_write32bitoffsetreg>
    2f66:	ce 01       	movw	r24, r28
    2f68:	20 d1       	rcall	.+576    	; 0x31aa <decamutexoff>
    2f6a:	e0 91 98 20 	lds	r30, 0x2098
    2f6e:	f0 91 99 20 	lds	r31, 0x2099
    2f72:	16 8a       	std	Z+22, r1	; 0x16
    2f74:	df 91       	pop	r29
    2f76:	cf 91       	pop	r28
    2f78:	ff 90       	pop	r15
    2f7a:	ef 90       	pop	r14
    2f7c:	df 90       	pop	r13
    2f7e:	cf 90       	pop	r12
    2f80:	08 95       	ret

00002f82 <dwt_rxenable>:
    2f82:	0f 93       	push	r16
    2f84:	1f 93       	push	r17
    2f86:	cf 93       	push	r28
    2f88:	df 93       	push	r29
    2f8a:	ec 01       	movw	r28, r24
    2f8c:	82 ff       	sbrs	r24, 2
    2f8e:	9f df       	rcall	.-194    	; 0x2ece <dwt_syncrxbufptrs>
    2f90:	8e 01       	movw	r16, r28
    2f92:	01 70       	andi	r16, 0x01	; 1
    2f94:	11 27       	eor	r17, r17
    2f96:	c0 fd       	sbrc	r28, 0
    2f98:	11 c0       	rjmp	.+34     	; 0x2fbc <dwt_rxenable+0x3a>
    2f9a:	21 c0       	rjmp	.+66     	; 0x2fde <dwt_rxenable+0x5c>
    2f9c:	b6 df       	rcall	.-148    	; 0x2f0a <dwt_forcetrxoff>
    2f9e:	c1 fd       	sbrc	r28, 1
    2fa0:	0a c0       	rjmp	.+20     	; 0x2fb6 <dwt_rxenable+0x34>
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	51 e0       	ldi	r21, 0x01	; 1
    2fa6:	60 e0       	ldi	r22, 0x00	; 0
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
    2faa:	8d e0       	ldi	r24, 0x0D	; 13
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	fa db       	rcall	.-2060   	; 0x27a4 <dwt_write16bitoffsetreg>
    2fb0:	0f ef       	ldi	r16, 0xFF	; 255
    2fb2:	1f ef       	ldi	r17, 0xFF	; 255
    2fb4:	1b c0       	rjmp	.+54     	; 0x2fec <dwt_rxenable+0x6a>
    2fb6:	0f ef       	ldi	r16, 0xFF	; 255
    2fb8:	1f ef       	ldi	r17, 0xFF	; 255
    2fba:	18 c0       	rjmp	.+48     	; 0x2fec <dwt_rxenable+0x6a>
    2fbc:	40 e0       	ldi	r20, 0x00	; 0
    2fbe:	53 e0       	ldi	r21, 0x03	; 3
    2fc0:	60 e0       	ldi	r22, 0x00	; 0
    2fc2:	70 e0       	ldi	r23, 0x00	; 0
    2fc4:	8d e0       	ldi	r24, 0x0D	; 13
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	ed db       	rcall	.-2086   	; 0x27a4 <dwt_write16bitoffsetreg>
    2fca:	63 e0       	ldi	r22, 0x03	; 3
    2fcc:	70 e0       	ldi	r23, 0x00	; 0
    2fce:	8f e0       	ldi	r24, 0x0F	; 15
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	bc db       	rcall	.-2184   	; 0x274c <dwt_read8bitoffsetreg>
    2fd4:	83 fd       	sbrc	r24, 3
    2fd6:	e2 cf       	rjmp	.-60     	; 0x2f9c <dwt_rxenable+0x1a>
    2fd8:	00 e0       	ldi	r16, 0x00	; 0
    2fda:	10 e0       	ldi	r17, 0x00	; 0
    2fdc:	07 c0       	rjmp	.+14     	; 0x2fec <dwt_rxenable+0x6a>
    2fde:	40 e0       	ldi	r20, 0x00	; 0
    2fe0:	51 e0       	ldi	r21, 0x01	; 1
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	70 e0       	ldi	r23, 0x00	; 0
    2fe6:	8d e0       	ldi	r24, 0x0D	; 13
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	dc db       	rcall	.-2120   	; 0x27a4 <dwt_write16bitoffsetreg>
    2fec:	c8 01       	movw	r24, r16
    2fee:	df 91       	pop	r29
    2ff0:	cf 91       	pop	r28
    2ff2:	1f 91       	pop	r17
    2ff4:	0f 91       	pop	r16
    2ff6:	08 95       	ret

00002ff8 <dwt_softreset>:
 *
 * no return value
 */
void dwt_softreset(void)
{
    _dwt_disablesequencing();
    2ff8:	5f df       	rcall	.-322    	; 0x2eb8 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	50 e0       	ldi	r21, 0x00	; 0
    2ffe:	60 e0       	ldi	r22, 0x00	; 0
    3000:	70 e0       	ldi	r23, 0x00	; 0
    3002:	8c e2       	ldi	r24, 0x2C	; 44
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	ce db       	rcall	.-2148   	; 0x27a4 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
    3008:	40 e0       	ldi	r20, 0x00	; 0
    300a:	66 e0       	ldi	r22, 0x06	; 6
    300c:	70 e0       	ldi	r23, 0x00	; 0
    300e:	8c e2       	ldi	r24, 0x2C	; 44
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	b2 db       	rcall	.-2204   	; 0x2778 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
    3014:	22 dc       	rcall	.-1980   	; 0x285a <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
    3016:	40 e0       	ldi	r20, 0x00	; 0
    3018:	63 e0       	ldi	r22, 0x03	; 3
    301a:	70 e0       	ldi	r23, 0x00	; 0
    301c:	86 e3       	ldi	r24, 0x36	; 54
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	ab db       	rcall	.-2218   	; 0x2778 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	c3 d0       	rcall	.+390    	; 0x31ae <deca_sleep>

    // Clear reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
    3028:	40 ef       	ldi	r20, 0xF0	; 240
    302a:	63 e0       	ldi	r22, 0x03	; 3
    302c:	70 e0       	ldi	r23, 0x00	; 0
    302e:	86 e3       	ldi	r24, 0x36	; 54
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	a2 db       	rcall	.-2236   	; 0x2778 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
    3034:	e0 91 98 20 	lds	r30, 0x2098
    3038:	f0 91 99 20 	lds	r31, 0x2099
    303c:	16 8a       	std	Z+22, r1	; 0x16
    303e:	08 95       	ret

00003040 <dwt_setxtaltrim>:
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
    3040:	8f 71       	andi	r24, 0x1F	; 31
    3042:	48 2f       	mov	r20, r24
    3044:	40 66       	ori	r20, 0x60	; 96
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
    3046:	6e e0       	ldi	r22, 0x0E	; 14
    3048:	70 e0       	ldi	r23, 0x00	; 0
    304a:	8b e2       	ldi	r24, 0x2B	; 43
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	94 cb       	rjmp	.-2264   	; 0x2778 <dwt_write8bitoffsetreg>
    3050:	08 95       	ret

00003052 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(uint16 config)
{
    3052:	0f 93       	push	r16
    3054:	1f 93       	push	r17
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	c8 2f       	mov	r28, r24
    uint16 otp_addr = 0;
    uint32 ldo_tune = 0;

    pdw1000local->dblbuffon = 0; // Double buffer mode off by default
    305c:	e0 91 98 20 	lds	r30, 0x2098
    3060:	f0 91 99 20 	lds	r31, 0x2099
    3064:	17 86       	std	Z+15, r1	; 0x0f
    pdw1000local->wait4resp = 0;
    3066:	16 8a       	std	Z+22, r1	; 0x16
    pdw1000local->sleep_mode = 0;
    3068:	14 8a       	std	Z+20, r1	; 0x14
    306a:	15 8a       	std	Z+21, r1	; 0x15

    pdw1000local->cbTxDone = NULL;
    306c:	10 a2       	std	Z+32, r1	; 0x20
    306e:	11 a2       	std	Z+33, r1	; 0x21
    pdw1000local->cbRxOk = NULL;
    3070:	12 a2       	std	Z+34, r1	; 0x22
    3072:	13 a2       	std	Z+35, r1	; 0x23
    pdw1000local->cbRxTo = NULL;
    3074:	14 a2       	std	Z+36, r1	; 0x24
    3076:	15 a2       	std	Z+37, r1	; 0x25
    pdw1000local->cbRxErr = NULL;
    3078:	16 a2       	std	Z+38, r1	; 0x26
    307a:	17 a2       	std	Z+39, r1	; 0x27

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
    307c:	44 db       	rcall	.-2424   	; 0x2706 <dwt_readdevid>
    307e:	60 33       	cpi	r22, 0x30	; 48
    3080:	71 40       	sbci	r23, 0x01	; 1
    3082:	8a 4c       	sbci	r24, 0xCA	; 202
    3084:	9e 4d       	sbci	r25, 0xDE	; 222
    3086:	09 f0       	breq	.+2      	; 0x308a <dwt_initialise+0x38>
    3088:	85 c0       	rjmp	.+266    	; 0x3194 <dwt_initialise+0x142>
    {
        return DWT_ERROR ;
    }

    // Make sure the device is completely reset before starting initialisation
    dwt_softreset();
    308a:	b6 df       	rcall	.-148    	; 0x2ff8 <dwt_softreset>

    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	94 de       	rcall	.-728    	; 0x2dba <_dwt_enableclocks>

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
    3092:	44 e0       	ldi	r20, 0x04	; 4
    3094:	60 e0       	ldi	r22, 0x00	; 0
    3096:	70 e0       	ldi	r23, 0x00	; 0
    3098:	84 e2       	ldi	r24, 0x24	; 36
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	6d db       	rcall	.-2342   	; 0x2778 <dwt_write8bitoffsetreg>

    // Read OTP revision number
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
    309e:	6e e1       	ldi	r22, 0x1E	; 30
    30a0:	70 e0       	ldi	r23, 0x00	; 0
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	c1 db       	rcall	.-2174   	; 0x282a <_dwt_otpread>
    30a8:	d6 2f       	mov	r29, r22
    pdw1000local->otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
    30aa:	e0 91 98 20 	lds	r30, 0x2098
    30ae:	f0 91 99 20 	lds	r31, 0x2099
    30b2:	71 87       	std	Z+9, r23	; 0x09

    // Load LDO tune from OTP and kick it if there is a value actually programmed.
    ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
    30b4:	64 e0       	ldi	r22, 0x04	; 4
    30b6:	70 e0       	ldi	r23, 0x00	; 0
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	b6 db       	rcall	.-2196   	; 0x282a <_dwt_otpread>
    if((ldo_tune & 0xFF) != 0)
    30be:	66 23       	and	r22, r22
    30c0:	79 f0       	breq	.+30     	; 0x30e0 <dwt_initialise+0x8e>
    {
        // Kick LDO tune
        dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDE kick bit
    30c2:	42 e0       	ldi	r20, 0x02	; 2
    30c4:	62 e1       	ldi	r22, 0x12	; 18
    30c6:	70 e0       	ldi	r23, 0x00	; 0
    30c8:	8d e2       	ldi	r24, 0x2D	; 45
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	55 db       	rcall	.-2390   	; 0x2778 <dwt_write8bitoffsetreg>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
    30ce:	e0 91 98 20 	lds	r30, 0x2098
    30d2:	f0 91 99 20 	lds	r31, 0x2099
    30d6:	84 89       	ldd	r24, Z+20	; 0x14
    30d8:	95 89       	ldd	r25, Z+21	; 0x15
    30da:	90 61       	ori	r25, 0x10	; 16
    30dc:	84 8b       	std	Z+20, r24	; 0x14
    30de:	95 8b       	std	Z+21, r25	; 0x15
    }

    // Load Part and Lot ID from OTP
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
    30e0:	00 91 98 20 	lds	r16, 0x2098
    30e4:	10 91 99 20 	lds	r17, 0x2099
    30e8:	66 e0       	ldi	r22, 0x06	; 6
    30ea:	70 e0       	ldi	r23, 0x00	; 0
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	9c db       	rcall	.-2248   	; 0x282a <_dwt_otpread>
    30f2:	f8 01       	movw	r30, r16
    30f4:	60 83       	st	Z, r22
    30f6:	71 83       	std	Z+1, r23	; 0x01
    30f8:	82 83       	std	Z+2, r24	; 0x02
    30fa:	93 83       	std	Z+3, r25	; 0x03
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
    30fc:	00 91 98 20 	lds	r16, 0x2098
    3100:	10 91 99 20 	lds	r17, 0x2099
    3104:	67 e0       	ldi	r22, 0x07	; 7
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	8e db       	rcall	.-2276   	; 0x282a <_dwt_otpread>
    310e:	f8 01       	movw	r30, r16
    3110:	64 83       	std	Z+4, r22	; 0x04
    3112:	75 83       	std	Z+5, r23	; 0x05
    3114:	86 83       	std	Z+6, r24	; 0x06
    3116:	97 83       	std	Z+7, r25	; 0x07

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    pdw1000local->init_xtrim = otp_addr & 0x1F;
    3118:	e0 91 98 20 	lds	r30, 0x2098
    311c:	f0 91 99 20 	lds	r31, 0x2099
    3120:	df 71       	andi	r29, 0x1F	; 31
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
    3122:	11 f0       	breq	.+4      	; 0x3128 <dwt_initialise+0xd6>
    // Load Part and Lot ID from OTP
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    pdw1000local->init_xtrim = otp_addr & 0x1F;
    3124:	d6 87       	std	Z+14, r29	; 0x0e
    3126:	02 c0       	rjmp	.+4      	; 0x312c <dwt_initialise+0xda>
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
    {
        pdw1000local->init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
    3128:	80 e1       	ldi	r24, 0x10	; 16
    312a:	86 87       	std	Z+14, r24	; 0x0e
    }
    // Configure XTAL trim
    dwt_setxtaltrim(pdw1000local->init_xtrim);
    312c:	86 85       	ldd	r24, Z+14	; 0x0e
    312e:	88 df       	rcall	.-240    	; 0x3040 <dwt_setxtaltrim>

    // Load leading edge detect code
    if(config & DWT_LOADUCODE)
    3130:	c0 ff       	sbrs	r28, 0
    3132:	0b c0       	rjmp	.+22     	; 0x314a <dwt_initialise+0xf8>
    {
        _dwt_loaducodefromrom();
    3134:	b0 de       	rcall	.-672    	; 0x2e96 <_dwt_loaducodefromrom>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up
    3136:	e0 91 98 20 	lds	r30, 0x2098
    313a:	f0 91 99 20 	lds	r31, 0x2099
    313e:	84 89       	ldd	r24, Z+20	; 0x14
    3140:	95 89       	ldd	r25, Z+21	; 0x15
    3142:	98 60       	ori	r25, 0x08	; 8
    3144:	84 8b       	std	Z+20, r24	; 0x14
    3146:	95 8b       	std	Z+21, r25	; 0x15
    3148:	0c c0       	rjmp	.+24     	; 0x3162 <dwt_initialise+0x110>
    }
    else // Should disable the LDERUN enable bit in 0x36, 0x4
    {
        uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
    314a:	65 e0       	ldi	r22, 0x05	; 5
    314c:	70 e0       	ldi	r23, 0x00	; 0
    314e:	86 e3       	ldi	r24, 0x36	; 54
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	df da       	rcall	.-2626   	; 0x2712 <dwt_read16bitoffsetreg>
        rega &= 0xFDFF ; // Clear LDERUN bit
    3154:	ac 01       	movw	r20, r24
    3156:	5d 7f       	andi	r21, 0xFD	; 253
        dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
    3158:	65 e0       	ldi	r22, 0x05	; 5
    315a:	70 e0       	ldi	r23, 0x00	; 0
    315c:	86 e3       	ldi	r24, 0x36	; 54
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	21 db       	rcall	.-2494   	; 0x27a4 <dwt_write16bitoffsetreg>
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	29 de       	rcall	.-942    	; 0x2dba <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
    3168:	40 e0       	ldi	r20, 0x00	; 0
    316a:	6a e0       	ldi	r22, 0x0A	; 10
    316c:	70 e0       	ldi	r23, 0x00	; 0
    316e:	8c e2       	ldi	r24, 0x2C	; 44
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	02 db       	rcall	.-2556   	; 0x2778 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
    3174:	c0 91 98 20 	lds	r28, 0x2098
    3178:	d0 91 99 20 	lds	r29, 0x2099
    317c:	60 e0       	ldi	r22, 0x00	; 0
    317e:	70 e0       	ldi	r23, 0x00	; 0
    3180:	84 e0       	ldi	r24, 0x04	; 4
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	90 da       	rcall	.-2784   	; 0x26a6 <dwt_read32bitoffsetreg>
    3186:	68 8b       	std	Y+16, r22	; 0x10
    3188:	79 8b       	std	Y+17, r23	; 0x11
    318a:	8a 8b       	std	Y+18, r24	; 0x12
    318c:	9b 8b       	std	Y+19, r25	; 0x13

    return DWT_SUCCESS ;
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	02 c0       	rjmp	.+4      	; 0x3198 <dwt_initialise+0x146>
    pdw1000local->cbRxErr = NULL;

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
    {
        return DWT_ERROR ;
    3194:	8f ef       	ldi	r24, 0xFF	; 255
    3196:	9f ef       	ldi	r25, 0xFF	; 255
    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register

    return DWT_SUCCESS ;

} // end dwt_initialise()
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret

000031a2 <decamutexon>:
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
	decaIrqStatus_t s = 1;
	cli();
    31a2:	f8 94       	cli
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	08 95       	ret

000031aa <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	sei();
    31aa:	78 94       	sei
    31ac:	08 95       	ret

000031ae <deca_sleep>:

#include "../include/deca_device_api.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
    31ae:	af 92       	push	r10
    31b0:	bf 92       	push	r11
    31b2:	cf 92       	push	r12
    31b4:	df 92       	push	r13
    31b6:	ef 92       	push	r14
    31b8:	ff 92       	push	r15
    31ba:	0f 93       	push	r16
    31bc:	1f 93       	push	r17
    31be:	cf 93       	push	r28
    31c0:	df 93       	push	r29
    delay_ms(time_ms);
    31c2:	a1 2c       	mov	r10, r1
    31c4:	0f 2e       	mov	r0, r31
    31c6:	fc e6       	ldi	r31, 0x6C	; 108
    31c8:	bf 2e       	mov	r11, r31
    31ca:	f0 2d       	mov	r31, r0
    31cc:	0f 2e       	mov	r0, r31
    31ce:	fc ed       	ldi	r31, 0xDC	; 220
    31d0:	cf 2e       	mov	r12, r31
    31d2:	f0 2d       	mov	r31, r0
    31d4:	68 94       	set
    31d6:	dd 24       	eor	r13, r13
    31d8:	d1 f8       	bld	r13, 1
    31da:	e1 2c       	mov	r14, r1
    31dc:	f1 2c       	mov	r15, r1
    31de:	00 e0       	ldi	r16, 0x00	; 0
    31e0:	10 e0       	ldi	r17, 0x00	; 0
    31e2:	28 2f       	mov	r18, r24
    31e4:	39 2f       	mov	r19, r25
    31e6:	40 e0       	ldi	r20, 0x00	; 0
    31e8:	50 e0       	ldi	r21, 0x00	; 0
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	1e d7       	rcall	.+3644   	; 0x4030 <__muldi3>
    31f4:	29 51       	subi	r18, 0x19	; 25
    31f6:	3c 4f       	sbci	r19, 0xFC	; 252
    31f8:	4f 4f       	sbci	r20, 0xFF	; 255
    31fa:	5f 4f       	sbci	r21, 0xFF	; 255
    31fc:	6f 4f       	sbci	r22, 0xFF	; 255
    31fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3200:	8f 4f       	sbci	r24, 0xFF	; 255
    3202:	9f 4f       	sbci	r25, 0xFF	; 255
    3204:	3a d6       	rcall	.+3188   	; 0x3e7a <__floatundisf>
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e8       	ldi	r19, 0x80	; 128
    320a:	4b eb       	ldi	r20, 0xBB	; 187
    320c:	55 e4       	ldi	r21, 0x45	; 69
    320e:	93 d5       	rcall	.+2854   	; 0x3d36 <__divsf3>
    3210:	ff d5       	rcall	.+3070   	; 0x3e10 <__fixunssfdi>
    3212:	f2 2f       	mov	r31, r18
    3214:	e3 2f       	mov	r30, r19
    3216:	8f 2f       	mov	r24, r31
    3218:	9e 2f       	mov	r25, r30
    321a:	a4 2f       	mov	r26, r20
    321c:	b5 2f       	mov	r27, r21
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	a1 09       	sbc	r26, r1
    3222:	b1 09       	sbc	r27, r1
    3224:	00 97       	sbiw	r24, 0x00	; 0
    3226:	a1 05       	cpc	r26, r1
    3228:	b1 05       	cpc	r27, r1
    322a:	c9 f7       	brne	.-14     	; 0x321e <deca_sleep+0x70>
}
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	1f 91       	pop	r17
    3232:	0f 91       	pop	r16
    3234:	ff 90       	pop	r15
    3236:	ef 90       	pop	r14
    3238:	df 90       	pop	r13
    323a:	cf 90       	pop	r12
    323c:	bf 90       	pop	r11
    323e:	af 90       	pop	r10
    3240:	08 95       	ret

00003242 <openspi>:
	spi_disable(&SPIC);


	return 0;

} // end closespi()
    3242:	cf 92       	push	r12
    3244:	df 92       	push	r13
    3246:	ef 92       	push	r14
    3248:	ff 92       	push	r15
    324a:	0f 93       	push	r16
    324c:	1f 93       	push	r17
    324e:	84 e1       	ldi	r24, 0x14	; 20
    3250:	80 93 8c 26 	sts	0x268C, r24
    3254:	80 ec       	ldi	r24, 0xC0	; 192
    3256:	98 e0       	ldi	r25, 0x08	; 8
    3258:	0e 94 32 01 	call	0x264	; 0x264 <spi_master_init>
    325c:	c1 2c       	mov	r12, r1
    325e:	d1 2c       	mov	r13, r1
    3260:	76 01       	movw	r14, r12
    3262:	00 e2       	ldi	r16, 0x20	; 32
    3264:	11 ea       	ldi	r17, 0xA1	; 161
    3266:	27 e0       	ldi	r18, 0x07	; 7
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	40 e0       	ldi	r20, 0x00	; 0
    326c:	6c e8       	ldi	r22, 0x8C	; 140
    326e:	76 e2       	ldi	r23, 0x26	; 38
    3270:	80 ec       	ldi	r24, 0xC0	; 192
    3272:	98 e0       	ldi	r25, 0x08	; 8
    3274:	0e 94 4b 01 	call	0x296	; 0x296 <spi_master_setup_device>
    3278:	e0 ec       	ldi	r30, 0xC0	; 192
    327a:	f8 e0       	ldi	r31, 0x08	; 8
    327c:	80 81       	ld	r24, Z
    327e:	80 64       	ori	r24, 0x40	; 64
    3280:	80 83       	st	Z, r24
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	1f 91       	pop	r17
    3288:	0f 91       	pop	r16
    328a:	ff 90       	pop	r15
    328c:	ef 90       	pop	r14
    328e:	df 90       	pop	r13
    3290:	cf 90       	pop	r12
    3292:	08 95       	ret

00003294 <fast_spi>:
    3294:	cf 92       	push	r12
    3296:	df 92       	push	r13
    3298:	ef 92       	push	r14
    329a:	ff 92       	push	r15
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	c1 2c       	mov	r12, r1
    32a2:	d1 2c       	mov	r13, r1
    32a4:	76 01       	movw	r14, r12
    32a6:	00 e0       	ldi	r16, 0x00	; 0
    32a8:	12 e1       	ldi	r17, 0x12	; 18
    32aa:	2a e7       	ldi	r18, 0x7A	; 122
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e0       	ldi	r20, 0x00	; 0
    32b0:	6c e8       	ldi	r22, 0x8C	; 140
    32b2:	76 e2       	ldi	r23, 0x26	; 38
    32b4:	80 ec       	ldi	r24, 0xC0	; 192
    32b6:	98 e0       	ldi	r25, 0x08	; 8
    32b8:	0e 94 4b 01 	call	0x296	; 0x296 <spi_master_setup_device>
    32bc:	1f 91       	pop	r17
    32be:	0f 91       	pop	r16
    32c0:	ff 90       	pop	r15
    32c2:	ef 90       	pop	r14
    32c4:	df 90       	pop	r13
    32c6:	cf 90       	pop	r12
    32c8:	08 95       	ret

000032ca <writetospi>:
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
#pragma GCC optimize ("O3")
int writetospi(uint16 headerLength, const uint8 *headerBuffer, uint32 bodylength, const uint8 *bodyBuffer)
{
    32ca:	8f 92       	push	r8
    32cc:	9f 92       	push	r9
    32ce:	af 92       	push	r10
    32d0:	bf 92       	push	r11
    32d2:	cf 92       	push	r12
    32d4:	df 92       	push	r13
    32d6:	ef 92       	push	r14
    32d8:	ff 92       	push	r15
    32da:	0f 93       	push	r16
    32dc:	1f 93       	push	r17
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	7c 01       	movw	r14, r24
    32e4:	eb 01       	movw	r28, r22
    32e6:	49 01       	movw	r8, r18
    32e8:	5a 01       	movw	r10, r20

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
    32ea:	5b df       	rcall	.-330    	; 0x31a2 <decamutexon>
    32ec:	6c 01       	movw	r12, r24

    spi_select_device(&SPIC, &spi_device_conf);
    32ee:	6c e8       	ldi	r22, 0x8C	; 140
    32f0:	76 e2       	ldi	r23, 0x26	; 38
    32f2:	80 ec       	ldi	r24, 0xC0	; 192
    32f4:	98 e0       	ldi	r25, 0x08	; 8
    32f6:	0e 94 8c 01 	call	0x318	; 0x318 <spi_select_device>
    spi_write_packet(&SPIC, headerBuffer, headerLength);
    32fa:	a7 01       	movw	r20, r14
    32fc:	be 01       	movw	r22, r28
    32fe:	80 ec       	ldi	r24, 0xC0	; 192
    3300:	98 e0       	ldi	r25, 0x08	; 8
    3302:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spi_write_packet>
    spi_write_packet(&SPIC, bodyBuffer, bodylength);
    3306:	a4 01       	movw	r20, r8
    3308:	b8 01       	movw	r22, r16
    330a:	80 ec       	ldi	r24, 0xC0	; 192
    330c:	98 e0       	ldi	r25, 0x08	; 8
    330e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spi_write_packet>
    spi_deselect_device(&SPIC, &spi_device_conf);
    3312:	6c e8       	ldi	r22, 0x8C	; 140
    3314:	76 e2       	ldi	r23, 0x26	; 38
    3316:	80 ec       	ldi	r24, 0xC0	; 192
    3318:	98 e0       	ldi	r25, 0x08	; 8
    331a:	0e 94 a2 01 	call	0x344	; 0x344 <spi_deselect_device>

    decamutexoff(stat) ;
    331e:	c6 01       	movw	r24, r12
    3320:	44 df       	rcall	.-376    	; 0x31aa <decamutexoff>

    return 0;
} // end writetospi()
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	1f 91       	pop	r17
    332c:	0f 91       	pop	r16
    332e:	ff 90       	pop	r15
    3330:	ef 90       	pop	r14
    3332:	df 90       	pop	r13
    3334:	cf 90       	pop	r12
    3336:	bf 90       	pop	r11
    3338:	af 90       	pop	r10
    333a:	9f 90       	pop	r9
    333c:	8f 90       	pop	r8
    333e:	08 95       	ret

00003340 <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
#pragma GCC optimize ("O3")
int readfromspi(uint16 headerLength, const uint8 *headerBuffer, uint32 readlength, uint8 *readBuffer)
{
    3340:	8f 92       	push	r8
    3342:	9f 92       	push	r9
    3344:	af 92       	push	r10
    3346:	bf 92       	push	r11
    3348:	cf 92       	push	r12
    334a:	df 92       	push	r13
    334c:	ef 92       	push	r14
    334e:	ff 92       	push	r15
    3350:	0f 93       	push	r16
    3352:	1f 93       	push	r17
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	7c 01       	movw	r14, r24
    335a:	eb 01       	movw	r28, r22
    335c:	49 01       	movw	r8, r18
    335e:	5a 01       	movw	r10, r20

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
    3360:	20 df       	rcall	.-448    	; 0x31a2 <decamutexon>
    3362:	6c 01       	movw	r12, r24

    spi_select_device(&SPIC, &spi_device_conf);
    3364:	6c e8       	ldi	r22, 0x8C	; 140
    3366:	76 e2       	ldi	r23, 0x26	; 38
    3368:	80 ec       	ldi	r24, 0xC0	; 192
    336a:	98 e0       	ldi	r25, 0x08	; 8
    336c:	0e 94 8c 01 	call	0x318	; 0x318 <spi_select_device>
    spi_write_packet(&SPIC, headerBuffer, headerLength);
    3370:	a7 01       	movw	r20, r14
    3372:	be 01       	movw	r22, r28
    3374:	80 ec       	ldi	r24, 0xC0	; 192
    3376:	98 e0       	ldi	r25, 0x08	; 8
    3378:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spi_write_packet>
    spi_read_packet(&SPIC, readBuffer, readlength);
    337c:	a4 01       	movw	r20, r8
    337e:	b8 01       	movw	r22, r16
    3380:	80 ec       	ldi	r24, 0xC0	; 192
    3382:	98 e0       	ldi	r25, 0x08	; 8
    3384:	0e 94 79 01 	call	0x2f2	; 0x2f2 <spi_read_packet>
    spi_deselect_device(&SPIC, &spi_device_conf);
    3388:	6c e8       	ldi	r22, 0x8C	; 140
    338a:	76 e2       	ldi	r23, 0x26	; 38
    338c:	80 ec       	ldi	r24, 0xC0	; 192
    338e:	98 e0       	ldi	r25, 0x08	; 8
    3390:	0e 94 a2 01 	call	0x344	; 0x344 <spi_deselect_device>

    decamutexoff(stat) ;
    3394:	c6 01       	movw	r24, r12
    3396:	09 df       	rcall	.-494    	; 0x31aa <decamutexoff>

    return 0;
} // end readfromspi()
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	df 91       	pop	r29
    339e:	cf 91       	pop	r28
    33a0:	1f 91       	pop	r17
    33a2:	0f 91       	pop	r16
    33a4:	ff 90       	pop	r15
    33a6:	ef 90       	pop	r14
    33a8:	df 90       	pop	r13
    33aa:	cf 90       	pop	r12
    33ac:	bf 90       	pop	r11
    33ae:	af 90       	pop	r10
    33b0:	9f 90       	pop	r9
    33b2:	8f 90       	pop	r8
    33b4:	08 95       	ret

000033b6 <init_onepos>:

#include "../onepos.h"

void init_onepos(void)
{
	sysclk_init();
    33b6:	7e d8       	rcall	.-3844   	; 0x24b4 <sysclk_init>
	
	#ifdef ENABLE_RTC
	// 	rtc_init();
	#endif
	#ifdef ENABLE_USB
		usb_init();
    33b8:	43 d2       	rcall	.+1158   	; 0x3840 <usb_init>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    33ba:	e0 e4       	ldi	r30, 0x40	; 64
    33bc:	f6 e0       	ldi	r31, 0x06	; 6
    33be:	88 e0       	ldi	r24, 0x08	; 8
    33c0:	82 83       	std	Z+2, r24	; 0x02
    33c2:	94 e0       	ldi	r25, 0x04	; 4
    33c4:	92 83       	std	Z+2, r25	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    33c6:	a0 e0       	ldi	r26, 0x00	; 0
    33c8:	b6 e0       	ldi	r27, 0x06	; 6
    33ca:	20 e4       	ldi	r18, 0x40	; 64
    33cc:	11 96       	adiw	r26, 0x01	; 1
    33ce:	2c 93       	st	X, r18
    33d0:	11 97       	sbiw	r26, 0x01	; 1
    33d2:	30 e8       	ldi	r19, 0x80	; 128
    33d4:	11 96       	adiw	r26, 0x01	; 1
    33d6:	3c 93       	st	X, r19
    33d8:	a0 e2       	ldi	r26, 0x20	; 32
    33da:	b6 e0       	ldi	r27, 0x06	; 6
    33dc:	41 e0       	ldi	r20, 0x01	; 1
    33de:	11 96       	adiw	r26, 0x01	; 1
    33e0:	4c 93       	st	X, r20
    33e2:	11 97       	sbiw	r26, 0x01	; 1
    33e4:	42 e0       	ldi	r20, 0x02	; 2
    33e6:	11 96       	adiw	r26, 0x01	; 1
    33e8:	4c 93       	st	X, r20
    33ea:	a0 e8       	ldi	r26, 0x80	; 128
    33ec:	b6 e0       	ldi	r27, 0x06	; 6
    33ee:	11 96       	adiw	r26, 0x01	; 1
    33f0:	4c 93       	st	X, r20
    33f2:	11 97       	sbiw	r26, 0x01	; 1
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    33f4:	12 96       	adiw	r26, 0x02	; 2
    33f6:	9c 93       	st	X, r25
    33f8:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    33fa:	11 96       	adiw	r26, 0x01	; 1
    33fc:	8c 93       	st	X, r24
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    33fe:	a0 e6       	ldi	r26, 0x60	; 96
    3400:	b6 e0       	ldi	r27, 0x06	; 6
    3402:	12 96       	adiw	r26, 0x02	; 2
    3404:	9c 93       	st	X, r25
    3406:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3408:	11 96       	adiw	r26, 0x01	; 1
    340a:	8c 93       	st	X, r24
    340c:	80 e1       	ldi	r24, 0x10	; 16
    340e:	81 83       	std	Z+1, r24	; 0x01
    3410:	80 e2       	ldi	r24, 0x20	; 32
    3412:	81 83       	std	Z+1, r24	; 0x01
    3414:	31 83       	std	Z+1, r19	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3416:	22 83       	std	Z+2, r18	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3418:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    341a:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    341c:	e6 e5       	ldi	r30, 0x56	; 86
    341e:	f6 e0       	ldi	r31, 0x06	; 6
    3420:	90 81       	ld	r25, Z
    3422:	97 70       	andi	r25, 0x07	; 7
    3424:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    3426:	90 81       	ld	r25, Z
    3428:	90 61       	ori	r25, 0x10	; 16
    342a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    342c:	8f bf       	out	0x3f, r24	; 63
    342e:	08 95       	ret

00003430 <init_animation>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3430:	80 e4       	ldi	r24, 0x40	; 64
    3432:	e0 e0       	ldi	r30, 0x00	; 0
    3434:	f6 e0       	ldi	r31, 0x06	; 6
    3436:	85 83       	std	Z+5, r24	; 0x05
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	92 ee       	ldi	r25, 0xE2	; 226
    343c:	a4 e0       	ldi	r26, 0x04	; 4
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	a1 09       	sbc	r26, r1
    3444:	b1 09       	sbc	r27, r1
    3446:	00 97       	sbiw	r24, 0x00	; 0
    3448:	a1 05       	cpc	r26, r1
    344a:	b1 05       	cpc	r27, r1
    344c:	c9 f7       	brne	.-14     	; 0x3440 <init_animation+0x10>
    344e:	80 e8       	ldi	r24, 0x80	; 128
    3450:	e0 e0       	ldi	r30, 0x00	; 0
    3452:	f6 e0       	ldi	r31, 0x06	; 6
    3454:	85 83       	std	Z+5, r24	; 0x05
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	92 ee       	ldi	r25, 0xE2	; 226
    345a:	a4 e0       	ldi	r26, 0x04	; 4
    345c:	b0 e0       	ldi	r27, 0x00	; 0
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	a1 09       	sbc	r26, r1
    3462:	b1 09       	sbc	r27, r1
    3464:	00 97       	sbiw	r24, 0x00	; 0
    3466:	a1 05       	cpc	r26, r1
    3468:	b1 05       	cpc	r27, r1
    346a:	c9 f7       	brne	.-14     	; 0x345e <init_animation+0x2e>
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	e0 e2       	ldi	r30, 0x20	; 32
    3470:	f6 e0       	ldi	r31, 0x06	; 6
    3472:	85 83       	std	Z+5, r24	; 0x05
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	92 ee       	ldi	r25, 0xE2	; 226
    3478:	a4 e0       	ldi	r26, 0x04	; 4
    347a:	b0 e0       	ldi	r27, 0x00	; 0
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	a1 09       	sbc	r26, r1
    3480:	b1 09       	sbc	r27, r1
    3482:	00 97       	sbiw	r24, 0x00	; 0
    3484:	a1 05       	cpc	r26, r1
    3486:	b1 05       	cpc	r27, r1
    3488:	c9 f7       	brne	.-14     	; 0x347c <init_animation+0x4c>
    348a:	82 e0       	ldi	r24, 0x02	; 2
    348c:	e0 e2       	ldi	r30, 0x20	; 32
    348e:	f6 e0       	ldi	r31, 0x06	; 6
    3490:	85 83       	std	Z+5, r24	; 0x05
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	92 ee       	ldi	r25, 0xE2	; 226
    3496:	a4 e0       	ldi	r26, 0x04	; 4
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	a1 09       	sbc	r26, r1
    349e:	b1 09       	sbc	r27, r1
    34a0:	00 97       	sbiw	r24, 0x00	; 0
    34a2:	a1 05       	cpc	r26, r1
    34a4:	b1 05       	cpc	r27, r1
    34a6:	c9 f7       	brne	.-14     	; 0x349a <init_animation+0x6a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    34a8:	80 e4       	ldi	r24, 0x40	; 64
    34aa:	e0 e0       	ldi	r30, 0x00	; 0
    34ac:	f6 e0       	ldi	r31, 0x06	; 6
    34ae:	86 83       	std	Z+6, r24	; 0x06
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	92 ee       	ldi	r25, 0xE2	; 226
    34b4:	a4 e0       	ldi	r26, 0x04	; 4
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	a1 09       	sbc	r26, r1
    34bc:	b1 09       	sbc	r27, r1
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	a1 05       	cpc	r26, r1
    34c2:	b1 05       	cpc	r27, r1
    34c4:	c9 f7       	brne	.-14     	; 0x34b8 <init_animation+0x88>
    34c6:	80 e8       	ldi	r24, 0x80	; 128
    34c8:	e0 e0       	ldi	r30, 0x00	; 0
    34ca:	f6 e0       	ldi	r31, 0x06	; 6
    34cc:	86 83       	std	Z+6, r24	; 0x06
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	92 ee       	ldi	r25, 0xE2	; 226
    34d2:	a4 e0       	ldi	r26, 0x04	; 4
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	01 97       	sbiw	r24, 0x01	; 1
    34d8:	a1 09       	sbc	r26, r1
    34da:	b1 09       	sbc	r27, r1
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	a1 05       	cpc	r26, r1
    34e0:	b1 05       	cpc	r27, r1
    34e2:	c9 f7       	brne	.-14     	; 0x34d6 <init_animation+0xa6>
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	e0 e2       	ldi	r30, 0x20	; 32
    34e8:	f6 e0       	ldi	r31, 0x06	; 6
    34ea:	86 83       	std	Z+6, r24	; 0x06
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	92 ee       	ldi	r25, 0xE2	; 226
    34f0:	a4 e0       	ldi	r26, 0x04	; 4
    34f2:	b0 e0       	ldi	r27, 0x00	; 0
    34f4:	01 97       	sbiw	r24, 0x01	; 1
    34f6:	a1 09       	sbc	r26, r1
    34f8:	b1 09       	sbc	r27, r1
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	a1 05       	cpc	r26, r1
    34fe:	b1 05       	cpc	r27, r1
    3500:	c9 f7       	brne	.-14     	; 0x34f4 <init_animation+0xc4>
    3502:	82 e0       	ldi	r24, 0x02	; 2
    3504:	e0 e2       	ldi	r30, 0x20	; 32
    3506:	f6 e0       	ldi	r31, 0x06	; 6
    3508:	86 83       	std	Z+6, r24	; 0x06
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	92 ee       	ldi	r25, 0xE2	; 226
    350e:	a4 e0       	ldi	r26, 0x04	; 4
    3510:	b0 e0       	ldi	r27, 0x00	; 0
    3512:	01 97       	sbiw	r24, 0x01	; 1
    3514:	a1 09       	sbc	r26, r1
    3516:	b1 09       	sbc	r27, r1
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	a1 05       	cpc	r26, r1
    351c:	b1 05       	cpc	r27, r1
    351e:	c9 f7       	brne	.-14     	; 0x3512 <init_animation+0xe2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3520:	80 e4       	ldi	r24, 0x40	; 64
    3522:	e0 e0       	ldi	r30, 0x00	; 0
    3524:	f6 e0       	ldi	r31, 0x06	; 6
    3526:	85 83       	std	Z+5, r24	; 0x05
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	94 ec       	ldi	r25, 0xC4	; 196
    352c:	a9 e0       	ldi	r26, 0x09	; 9
    352e:	b0 e0       	ldi	r27, 0x00	; 0
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	a1 09       	sbc	r26, r1
    3534:	b1 09       	sbc	r27, r1
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	a1 05       	cpc	r26, r1
    353a:	b1 05       	cpc	r27, r1
    353c:	c9 f7       	brne	.-14     	; 0x3530 <init_animation+0x100>
    353e:	80 e8       	ldi	r24, 0x80	; 128
    3540:	e0 e0       	ldi	r30, 0x00	; 0
    3542:	f6 e0       	ldi	r31, 0x06	; 6
    3544:	85 83       	std	Z+5, r24	; 0x05
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	94 ec       	ldi	r25, 0xC4	; 196
    354a:	a9 e0       	ldi	r26, 0x09	; 9
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	a1 09       	sbc	r26, r1
    3552:	b1 09       	sbc	r27, r1
    3554:	00 97       	sbiw	r24, 0x00	; 0
    3556:	a1 05       	cpc	r26, r1
    3558:	b1 05       	cpc	r27, r1
    355a:	c9 f7       	brne	.-14     	; 0x354e <init_animation+0x11e>
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	e0 e2       	ldi	r30, 0x20	; 32
    3560:	f6 e0       	ldi	r31, 0x06	; 6
    3562:	85 83       	std	Z+5, r24	; 0x05
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	94 ec       	ldi	r25, 0xC4	; 196
    3568:	a9 e0       	ldi	r26, 0x09	; 9
    356a:	b0 e0       	ldi	r27, 0x00	; 0
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	a1 09       	sbc	r26, r1
    3570:	b1 09       	sbc	r27, r1
    3572:	00 97       	sbiw	r24, 0x00	; 0
    3574:	a1 05       	cpc	r26, r1
    3576:	b1 05       	cpc	r27, r1
    3578:	c9 f7       	brne	.-14     	; 0x356c <init_animation+0x13c>
    357a:	82 e0       	ldi	r24, 0x02	; 2
    357c:	e0 e2       	ldi	r30, 0x20	; 32
    357e:	f6 e0       	ldi	r31, 0x06	; 6
    3580:	85 83       	std	Z+5, r24	; 0x05
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	94 ec       	ldi	r25, 0xC4	; 196
    3586:	a9 e0       	ldi	r26, 0x09	; 9
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	a1 09       	sbc	r26, r1
    358e:	b1 09       	sbc	r27, r1
    3590:	00 97       	sbiw	r24, 0x00	; 0
    3592:	a1 05       	cpc	r26, r1
    3594:	b1 05       	cpc	r27, r1
    3596:	c9 f7       	brne	.-14     	; 0x358a <init_animation+0x15a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3598:	80 e4       	ldi	r24, 0x40	; 64
    359a:	e0 e0       	ldi	r30, 0x00	; 0
    359c:	f6 e0       	ldi	r31, 0x06	; 6
    359e:	86 83       	std	Z+6, r24	; 0x06
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	94 ec       	ldi	r25, 0xC4	; 196
    35a4:	a9 e0       	ldi	r26, 0x09	; 9
    35a6:	b0 e0       	ldi	r27, 0x00	; 0
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	a1 09       	sbc	r26, r1
    35ac:	b1 09       	sbc	r27, r1
    35ae:	00 97       	sbiw	r24, 0x00	; 0
    35b0:	a1 05       	cpc	r26, r1
    35b2:	b1 05       	cpc	r27, r1
    35b4:	c9 f7       	brne	.-14     	; 0x35a8 <init_animation+0x178>
    35b6:	80 e8       	ldi	r24, 0x80	; 128
    35b8:	e0 e0       	ldi	r30, 0x00	; 0
    35ba:	f6 e0       	ldi	r31, 0x06	; 6
    35bc:	86 83       	std	Z+6, r24	; 0x06
    35be:	80 e0       	ldi	r24, 0x00	; 0
    35c0:	94 ec       	ldi	r25, 0xC4	; 196
    35c2:	a9 e0       	ldi	r26, 0x09	; 9
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	a1 09       	sbc	r26, r1
    35ca:	b1 09       	sbc	r27, r1
    35cc:	00 97       	sbiw	r24, 0x00	; 0
    35ce:	a1 05       	cpc	r26, r1
    35d0:	b1 05       	cpc	r27, r1
    35d2:	c9 f7       	brne	.-14     	; 0x35c6 <init_animation+0x196>
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	e0 e2       	ldi	r30, 0x20	; 32
    35d8:	f6 e0       	ldi	r31, 0x06	; 6
    35da:	86 83       	std	Z+6, r24	; 0x06
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	94 ec       	ldi	r25, 0xC4	; 196
    35e0:	a9 e0       	ldi	r26, 0x09	; 9
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	a1 09       	sbc	r26, r1
    35e8:	b1 09       	sbc	r27, r1
    35ea:	00 97       	sbiw	r24, 0x00	; 0
    35ec:	a1 05       	cpc	r26, r1
    35ee:	b1 05       	cpc	r27, r1
    35f0:	c9 f7       	brne	.-14     	; 0x35e4 <init_animation+0x1b4>
    35f2:	82 e0       	ldi	r24, 0x02	; 2
    35f4:	e0 e2       	ldi	r30, 0x20	; 32
    35f6:	f6 e0       	ldi	r31, 0x06	; 6
    35f8:	86 83       	std	Z+6, r24	; 0x06
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	94 ec       	ldi	r25, 0xC4	; 196
    35fe:	a9 e0       	ldi	r26, 0x09	; 9
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	a1 09       	sbc	r26, r1
    3606:	b1 09       	sbc	r27, r1
    3608:	00 97       	sbiw	r24, 0x00	; 0
    360a:	a1 05       	cpc	r26, r1
    360c:	b1 05       	cpc	r27, r1
    360e:	c9 f7       	brne	.-14     	; 0x3602 <init_animation+0x1d2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3610:	80 e4       	ldi	r24, 0x40	; 64
    3612:	e0 e0       	ldi	r30, 0x00	; 0
    3614:	f6 e0       	ldi	r31, 0x06	; 6
    3616:	85 83       	std	Z+5, r24	; 0x05
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	96 ea       	ldi	r25, 0xA6	; 166
    361c:	ae e0       	ldi	r26, 0x0E	; 14
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	a1 09       	sbc	r26, r1
    3624:	b1 09       	sbc	r27, r1
    3626:	00 97       	sbiw	r24, 0x00	; 0
    3628:	a1 05       	cpc	r26, r1
    362a:	b1 05       	cpc	r27, r1
    362c:	c9 f7       	brne	.-14     	; 0x3620 <init_animation+0x1f0>
    362e:	80 e8       	ldi	r24, 0x80	; 128
    3630:	e0 e0       	ldi	r30, 0x00	; 0
    3632:	f6 e0       	ldi	r31, 0x06	; 6
    3634:	85 83       	std	Z+5, r24	; 0x05
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	96 ea       	ldi	r25, 0xA6	; 166
    363a:	ae e0       	ldi	r26, 0x0E	; 14
    363c:	b0 e0       	ldi	r27, 0x00	; 0
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	a1 09       	sbc	r26, r1
    3642:	b1 09       	sbc	r27, r1
    3644:	00 97       	sbiw	r24, 0x00	; 0
    3646:	a1 05       	cpc	r26, r1
    3648:	b1 05       	cpc	r27, r1
    364a:	c9 f7       	brne	.-14     	; 0x363e <init_animation+0x20e>
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	e0 e2       	ldi	r30, 0x20	; 32
    3650:	f6 e0       	ldi	r31, 0x06	; 6
    3652:	85 83       	std	Z+5, r24	; 0x05
    3654:	80 e0       	ldi	r24, 0x00	; 0
    3656:	96 ea       	ldi	r25, 0xA6	; 166
    3658:	ae e0       	ldi	r26, 0x0E	; 14
    365a:	b0 e0       	ldi	r27, 0x00	; 0
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	a1 09       	sbc	r26, r1
    3660:	b1 09       	sbc	r27, r1
    3662:	00 97       	sbiw	r24, 0x00	; 0
    3664:	a1 05       	cpc	r26, r1
    3666:	b1 05       	cpc	r27, r1
    3668:	c9 f7       	brne	.-14     	; 0x365c <init_animation+0x22c>
    366a:	82 e0       	ldi	r24, 0x02	; 2
    366c:	e0 e2       	ldi	r30, 0x20	; 32
    366e:	f6 e0       	ldi	r31, 0x06	; 6
    3670:	85 83       	std	Z+5, r24	; 0x05
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	96 ea       	ldi	r25, 0xA6	; 166
    3676:	ae e0       	ldi	r26, 0x0E	; 14
    3678:	b0 e0       	ldi	r27, 0x00	; 0
    367a:	01 97       	sbiw	r24, 0x01	; 1
    367c:	a1 09       	sbc	r26, r1
    367e:	b1 09       	sbc	r27, r1
    3680:	00 97       	sbiw	r24, 0x00	; 0
    3682:	a1 05       	cpc	r26, r1
    3684:	b1 05       	cpc	r27, r1
    3686:	c9 f7       	brne	.-14     	; 0x367a <init_animation+0x24a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3688:	80 e4       	ldi	r24, 0x40	; 64
    368a:	e0 e0       	ldi	r30, 0x00	; 0
    368c:	f6 e0       	ldi	r31, 0x06	; 6
    368e:	86 83       	std	Z+6, r24	; 0x06
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	96 ea       	ldi	r25, 0xA6	; 166
    3694:	ae e0       	ldi	r26, 0x0E	; 14
    3696:	b0 e0       	ldi	r27, 0x00	; 0
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	a1 09       	sbc	r26, r1
    369c:	b1 09       	sbc	r27, r1
    369e:	00 97       	sbiw	r24, 0x00	; 0
    36a0:	a1 05       	cpc	r26, r1
    36a2:	b1 05       	cpc	r27, r1
    36a4:	c9 f7       	brne	.-14     	; 0x3698 <init_animation+0x268>
    36a6:	80 e8       	ldi	r24, 0x80	; 128
    36a8:	e0 e0       	ldi	r30, 0x00	; 0
    36aa:	f6 e0       	ldi	r31, 0x06	; 6
    36ac:	86 83       	std	Z+6, r24	; 0x06
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	96 ea       	ldi	r25, 0xA6	; 166
    36b2:	ae e0       	ldi	r26, 0x0E	; 14
    36b4:	b0 e0       	ldi	r27, 0x00	; 0
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	a1 09       	sbc	r26, r1
    36ba:	b1 09       	sbc	r27, r1
    36bc:	00 97       	sbiw	r24, 0x00	; 0
    36be:	a1 05       	cpc	r26, r1
    36c0:	b1 05       	cpc	r27, r1
    36c2:	c9 f7       	brne	.-14     	; 0x36b6 <init_animation+0x286>
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	e0 e2       	ldi	r30, 0x20	; 32
    36c8:	f6 e0       	ldi	r31, 0x06	; 6
    36ca:	86 83       	std	Z+6, r24	; 0x06
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	96 ea       	ldi	r25, 0xA6	; 166
    36d0:	ae e0       	ldi	r26, 0x0E	; 14
    36d2:	b0 e0       	ldi	r27, 0x00	; 0
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	a1 09       	sbc	r26, r1
    36d8:	b1 09       	sbc	r27, r1
    36da:	00 97       	sbiw	r24, 0x00	; 0
    36dc:	a1 05       	cpc	r26, r1
    36de:	b1 05       	cpc	r27, r1
    36e0:	c9 f7       	brne	.-14     	; 0x36d4 <init_animation+0x2a4>
    36e2:	82 e0       	ldi	r24, 0x02	; 2
    36e4:	e0 e2       	ldi	r30, 0x20	; 32
    36e6:	f6 e0       	ldi	r31, 0x06	; 6
    36e8:	86 83       	std	Z+6, r24	; 0x06
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	96 ea       	ldi	r25, 0xA6	; 166
    36ee:	ae e0       	ldi	r26, 0x0E	; 14
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	a1 09       	sbc	r26, r1
    36f6:	b1 09       	sbc	r27, r1
    36f8:	00 97       	sbiw	r24, 0x00	; 0
    36fa:	a1 05       	cpc	r26, r1
    36fc:	b1 05       	cpc	r27, r1
    36fe:	c9 f7       	brne	.-14     	; 0x36f2 <init_animation+0x2c2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3700:	80 e4       	ldi	r24, 0x40	; 64
    3702:	e0 e0       	ldi	r30, 0x00	; 0
    3704:	f6 e0       	ldi	r31, 0x06	; 6
    3706:	85 83       	std	Z+5, r24	; 0x05
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	98 e8       	ldi	r25, 0x88	; 136
    370c:	a3 e1       	ldi	r26, 0x13	; 19
    370e:	b0 e0       	ldi	r27, 0x00	; 0
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	a1 09       	sbc	r26, r1
    3714:	b1 09       	sbc	r27, r1
    3716:	00 97       	sbiw	r24, 0x00	; 0
    3718:	a1 05       	cpc	r26, r1
    371a:	b1 05       	cpc	r27, r1
    371c:	c9 f7       	brne	.-14     	; 0x3710 <init_animation+0x2e0>
    371e:	80 e8       	ldi	r24, 0x80	; 128
    3720:	e0 e0       	ldi	r30, 0x00	; 0
    3722:	f6 e0       	ldi	r31, 0x06	; 6
    3724:	85 83       	std	Z+5, r24	; 0x05
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	98 e8       	ldi	r25, 0x88	; 136
    372a:	a3 e1       	ldi	r26, 0x13	; 19
    372c:	b0 e0       	ldi	r27, 0x00	; 0
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	a1 09       	sbc	r26, r1
    3732:	b1 09       	sbc	r27, r1
    3734:	00 97       	sbiw	r24, 0x00	; 0
    3736:	a1 05       	cpc	r26, r1
    3738:	b1 05       	cpc	r27, r1
    373a:	c9 f7       	brne	.-14     	; 0x372e <init_animation+0x2fe>
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	e0 e2       	ldi	r30, 0x20	; 32
    3740:	f6 e0       	ldi	r31, 0x06	; 6
    3742:	85 83       	std	Z+5, r24	; 0x05
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	98 e8       	ldi	r25, 0x88	; 136
    3748:	a3 e1       	ldi	r26, 0x13	; 19
    374a:	b0 e0       	ldi	r27, 0x00	; 0
    374c:	01 97       	sbiw	r24, 0x01	; 1
    374e:	a1 09       	sbc	r26, r1
    3750:	b1 09       	sbc	r27, r1
    3752:	00 97       	sbiw	r24, 0x00	; 0
    3754:	a1 05       	cpc	r26, r1
    3756:	b1 05       	cpc	r27, r1
    3758:	c9 f7       	brne	.-14     	; 0x374c <init_animation+0x31c>
    375a:	82 e0       	ldi	r24, 0x02	; 2
    375c:	e0 e2       	ldi	r30, 0x20	; 32
    375e:	f6 e0       	ldi	r31, 0x06	; 6
    3760:	85 83       	std	Z+5, r24	; 0x05
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	98 e8       	ldi	r25, 0x88	; 136
    3766:	a3 e1       	ldi	r26, 0x13	; 19
    3768:	b0 e0       	ldi	r27, 0x00	; 0
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	a1 09       	sbc	r26, r1
    376e:	b1 09       	sbc	r27, r1
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	a1 05       	cpc	r26, r1
    3774:	b1 05       	cpc	r27, r1
    3776:	c9 f7       	brne	.-14     	; 0x376a <init_animation+0x33a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3778:	80 e4       	ldi	r24, 0x40	; 64
    377a:	e0 e0       	ldi	r30, 0x00	; 0
    377c:	f6 e0       	ldi	r31, 0x06	; 6
    377e:	86 83       	std	Z+6, r24	; 0x06
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	98 e8       	ldi	r25, 0x88	; 136
    3784:	a3 e1       	ldi	r26, 0x13	; 19
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	01 97       	sbiw	r24, 0x01	; 1
    378a:	a1 09       	sbc	r26, r1
    378c:	b1 09       	sbc	r27, r1
    378e:	00 97       	sbiw	r24, 0x00	; 0
    3790:	a1 05       	cpc	r26, r1
    3792:	b1 05       	cpc	r27, r1
    3794:	c9 f7       	brne	.-14     	; 0x3788 <init_animation+0x358>
    3796:	80 e8       	ldi	r24, 0x80	; 128
    3798:	e0 e0       	ldi	r30, 0x00	; 0
    379a:	f6 e0       	ldi	r31, 0x06	; 6
    379c:	86 83       	std	Z+6, r24	; 0x06
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	98 e8       	ldi	r25, 0x88	; 136
    37a2:	a3 e1       	ldi	r26, 0x13	; 19
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	a1 09       	sbc	r26, r1
    37aa:	b1 09       	sbc	r27, r1
    37ac:	00 97       	sbiw	r24, 0x00	; 0
    37ae:	a1 05       	cpc	r26, r1
    37b0:	b1 05       	cpc	r27, r1
    37b2:	c9 f7       	brne	.-14     	; 0x37a6 <init_animation+0x376>
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	e0 e2       	ldi	r30, 0x20	; 32
    37b8:	f6 e0       	ldi	r31, 0x06	; 6
    37ba:	86 83       	std	Z+6, r24	; 0x06
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	98 e8       	ldi	r25, 0x88	; 136
    37c0:	a3 e1       	ldi	r26, 0x13	; 19
    37c2:	b0 e0       	ldi	r27, 0x00	; 0
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	a1 09       	sbc	r26, r1
    37c8:	b1 09       	sbc	r27, r1
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	a1 05       	cpc	r26, r1
    37ce:	b1 05       	cpc	r27, r1
    37d0:	c9 f7       	brne	.-14     	; 0x37c4 <init_animation+0x394>
    37d2:	82 e0       	ldi	r24, 0x02	; 2
    37d4:	e0 e2       	ldi	r30, 0x20	; 32
    37d6:	f6 e0       	ldi	r31, 0x06	; 6
    37d8:	86 83       	std	Z+6, r24	; 0x06
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	98 e8       	ldi	r25, 0x88	; 136
    37de:	a3 e1       	ldi	r26, 0x13	; 19
    37e0:	b0 e0       	ldi	r27, 0x00	; 0
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	a1 09       	sbc	r26, r1
    37e6:	b1 09       	sbc	r27, r1
    37e8:	00 97       	sbiw	r24, 0x00	; 0
    37ea:	a1 05       	cpc	r26, r1
    37ec:	b1 05       	cpc	r27, r1
    37ee:	c9 f7       	brne	.-14     	; 0x37e2 <init_animation+0x3b2>
	delay_ms(160);
	led3(OFF);
	delay_ms(160);
	led4(OFF);
	delay_ms(160);
    37f0:	08 95       	ret

000037f2 <usb_putchar_printf>:
	usb_putchar(*string++);
}


#ifdef PRINTF_USB
int usb_putchar_printf(char var, FILE *stream) {
    37f2:	cf 93       	push	r28
    37f4:	c8 2f       	mov	r28, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
    37f6:	8a 30       	cpi	r24, 0x0A	; 10
    37f8:	21 f4       	brne	.+8      	; 0x3802 <usb_putchar_printf+0x10>
	
}

void usb_putchar(char a)
{
	udi_cdc_putc(a);
    37fa:	8d e0       	ldi	r24, 0x0D	; 13
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	0e 94 a0 04 	call	0x940	; 0x940 <udi_cdc_putc>
    3802:	8c 2f       	mov	r24, r28
    3804:	99 27       	eor	r25, r25
    3806:	87 fd       	sbrc	r24, 7
    3808:	90 95       	com	r25
    380a:	0e 94 a0 04 	call	0x940	; 0x940 <udi_cdc_putc>
int usb_putchar_printf(char var, FILE *stream) {
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
	usb_putchar(var);
	return 0;
}
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	cf 91       	pop	r28
    3814:	08 95       	ret

00003816 <usb_getchar_scanf>:

int usb_getchar_scanf(FILE *stream)
{
    3816:	0f 93       	push	r16
    3818:	1f 93       	push	r17
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
    381e:	8c 01       	movw	r16, r24
	return udi_cdc_getc();
}

int usb_is_rx_ready(void)
{
	return udi_cdc_is_rx_ready();
    3820:	0e 94 df 03 	call	0x7be	; 0x7be <udi_cdc_is_rx_ready>

int usb_getchar_scanf(FILE *stream)
{
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
    3824:	88 23       	and	r24, r24
    3826:	e1 f3       	breq	.-8      	; 0x3820 <usb_getchar_scanf+0xa>
	udi_cdc_putc(a);
}

char usb_getchar(void)
{
	return udi_cdc_getc();
    3828:	0e 94 2b 04 	call	0x856	; 0x856 <udi_cdc_getc>
    382c:	ec 01       	movw	r28, r24
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
	u8Data=usb_getchar();
	//echo input data
	usb_putchar_printf(u8Data,stream);
    382e:	b8 01       	movw	r22, r16
    3830:	e0 df       	rcall	.-64     	; 0x37f2 <usb_putchar_printf>
	// Return received data
	return u8Data;
}
    3832:	ce 01       	movw	r24, r28
    3834:	99 27       	eor	r25, r25
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	1f 91       	pop	r17
    383c:	0f 91       	pop	r16
    383e:	08 95       	ret

00003840 <usb_init>:

#include "./../include/usb_serial.h"

void usb_init(void)
{
	irq_initialize_vectors();
    3840:	87 e0       	ldi	r24, 0x07	; 7
    3842:	e0 ea       	ldi	r30, 0xA0	; 160
    3844:	f0 e0       	ldi	r31, 0x00	; 0
    3846:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    3848:	78 94       	sei
	udc_start();
    384a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <udc_start>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    384e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <udd_attach>
	udc_attach();
	
	#ifdef PRINTF_USB
	// setup our stdio stream
	stdout = &mystdout;
    3852:	8a e9       	ldi	r24, 0x9A	; 154
    3854:	90 e2       	ldi	r25, 0x20	; 32
    3856:	80 93 8f 26 	sts	0x268F, r24
    385a:	90 93 90 26 	sts	0x2690, r25
	stdin = &mystdout;
    385e:	80 93 8d 26 	sts	0x268D, r24
    3862:	90 93 8e 26 	sts	0x268E, r25
    3866:	08 95       	ret

00003868 <usart_serial_init>:
//#define DWT_DS_TWR_INIT
//#define DWT_DS_TWR_RESP
//#define REST

void rs485_send(char a)
{
    3868:	ef 92       	push	r14
    386a:	ff 92       	push	r15
    386c:	0f 93       	push	r16
    386e:	1f 93       	push	r17
    3870:	cf 93       	push	r28
    3872:	df 93       	push	r29
    3874:	cd b7       	in	r28, 0x3d	; 61
    3876:	de b7       	in	r29, 0x3e	; 62
    3878:	27 97       	sbiw	r28, 0x07	; 7
    387a:	cd bf       	out	0x3d, r28	; 61
    387c:	de bf       	out	0x3e, r29	; 62
    387e:	7c 01       	movw	r14, r24
    3880:	fb 01       	movw	r30, r22
    3882:	84 81       	ldd	r24, Z+4	; 0x04
    3884:	8d 83       	std	Y+5, r24	; 0x05
    3886:	85 81       	ldd	r24, Z+5	; 0x05
    3888:	8e 83       	std	Y+6, r24	; 0x06
    388a:	86 81       	ldd	r24, Z+6	; 0x06
    388c:	8f 83       	std	Y+7, r24	; 0x07
    388e:	40 81       	ld	r20, Z
    3890:	51 81       	ldd	r21, Z+1	; 0x01
    3892:	62 81       	ldd	r22, Z+2	; 0x02
    3894:	73 81       	ldd	r23, Z+3	; 0x03
    3896:	49 83       	std	Y+1, r20	; 0x01
    3898:	5a 83       	std	Y+2, r21	; 0x02
    389a:	6b 83       	std	Y+3, r22	; 0x03
    389c:	7c 83       	std	Y+4, r23	; 0x04
    389e:	87 01       	movw	r16, r14
    38a0:	80 ea       	ldi	r24, 0xA0	; 160
    38a2:	e8 16       	cp	r14, r24
    38a4:	88 e0       	ldi	r24, 0x08	; 8
    38a6:	f8 06       	cpc	r15, r24
    38a8:	29 f4       	brne	.+10     	; 0x38b4 <usart_serial_init+0x4c>
    38aa:	60 e1       	ldi	r22, 0x10	; 16
    38ac:	83 e0       	ldi	r24, 0x03	; 3
    38ae:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
    38b2:	14 c0       	rjmp	.+40     	; 0x38dc <usart_serial_init+0x74>
    38b4:	80 eb       	ldi	r24, 0xB0	; 176
    38b6:	e8 16       	cp	r14, r24
    38b8:	88 e0       	ldi	r24, 0x08	; 8
    38ba:	f8 06       	cpc	r15, r24
    38bc:	29 f4       	brne	.+10     	; 0x38c8 <usart_serial_init+0x60>
    38be:	60 e2       	ldi	r22, 0x20	; 32
    38c0:	83 e0       	ldi	r24, 0x03	; 3
    38c2:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
    38c6:	13 c0       	rjmp	.+38     	; 0x38ee <usart_serial_init+0x86>
    38c8:	80 ea       	ldi	r24, 0xA0	; 160
    38ca:	e8 16       	cp	r14, r24
    38cc:	89 e0       	ldi	r24, 0x09	; 9
    38ce:	f8 06       	cpc	r15, r24
    38d0:	29 f4       	brne	.+10     	; 0x38dc <usart_serial_init+0x74>
    38d2:	60 e1       	ldi	r22, 0x10	; 16
    38d4:	84 e0       	ldi	r24, 0x04	; 4
    38d6:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
    38da:	10 c0       	rjmp	.+32     	; 0x38fc <usart_serial_init+0x94>
    38dc:	00 3b       	cpi	r16, 0xB0	; 176
    38de:	89 e0       	ldi	r24, 0x09	; 9
    38e0:	18 07       	cpc	r17, r24
    38e2:	29 f4       	brne	.+10     	; 0x38ee <usart_serial_init+0x86>
    38e4:	60 e2       	ldi	r22, 0x20	; 32
    38e6:	84 e0       	ldi	r24, 0x04	; 4
    38e8:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
    38ec:	07 c0       	rjmp	.+14     	; 0x38fc <usart_serial_init+0x94>
    38ee:	00 3a       	cpi	r16, 0xA0	; 160
    38f0:	1a 40       	sbci	r17, 0x0A	; 10
    38f2:	21 f4       	brne	.+8      	; 0x38fc <usart_serial_init+0x94>
    38f4:	60 e1       	ldi	r22, 0x10	; 16
    38f6:	85 e0       	ldi	r24, 0x05	; 5
    38f8:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
    38fc:	be 01       	movw	r22, r28
    38fe:	6f 5f       	subi	r22, 0xFF	; 255
    3900:	7f 4f       	sbci	r23, 0xFF	; 255
    3902:	c7 01       	movw	r24, r14
    3904:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <usart_init_rs232>
    3908:	27 96       	adiw	r28, 0x07	; 7
    390a:	cd bf       	out	0x3d, r28	; 61
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	1f 91       	pop	r17
    3914:	0f 91       	pop	r16
    3916:	ff 90       	pop	r15
    3918:	ef 90       	pop	r14
    391a:	08 95       	ret

0000391c <dwt_show_sys_info>:
	
}


void dwt_show_sys_info(void)
{
    391c:	4f 92       	push	r4
    391e:	5f 92       	push	r5
    3920:	6f 92       	push	r6
    3922:	7f 92       	push	r7
    3924:	8f 92       	push	r8
    3926:	9f 92       	push	r9
    3928:	af 92       	push	r10
    392a:	bf 92       	push	r11
    392c:	cf 92       	push	r12
    392e:	df 92       	push	r13
    3930:	ef 92       	push	r14
    3932:	ff 92       	push	r15
    3934:	0f 93       	push	r16
    3936:	1f 93       	push	r17
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
    3940:	aa 97       	sbiw	r28, 0x2a	; 42
    3942:	cd bf       	out	0x3d, r28	; 61
    3944:	de bf       	out	0x3e, r29	; 62
	uint8_t sys_status[SYS_STATUS_LEN];
	uint32_t rx_finfo;
	uint8_t rx_fqual[RX_FQUAL_LEN];
	uint32_t chan_ctrl;
	
	dev_id =dwt_readdevid();
    3946:	0e 94 83 13 	call	0x2706	; 0x2706 <dwt_readdevid>
    394a:	4b 01       	movw	r8, r22
    394c:	5c 01       	movw	r10, r24
	dev_part_id = dwt_getpartid();
    394e:	0e 94 de 12 	call	0x25bc	; 0x25bc <dwt_getpartid>
    3952:	6b 01       	movw	r12, r22
    3954:	7c 01       	movw	r14, r24
	dwt_geteui(dev_eui);
    3956:	ce 01       	movw	r24, r28
    3958:	01 96       	adiw	r24, 0x01	; 1
    395a:	0e 94 06 14 	call	0x280c	; 0x280c <dwt_geteui>
	dwt_readfromdevice(PANADR_ID, 0, PANADR_LEN, dev_eui);
    395e:	8e 01       	movw	r16, r28
    3960:	0f 5f       	subi	r16, 0xFF	; 255
    3962:	1f 4f       	sbci	r17, 0xFF	; 255
    3964:	24 e0       	ldi	r18, 0x04	; 4
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e0       	ldi	r20, 0x00	; 0
    396a:	50 e0       	ldi	r21, 0x00	; 0
    396c:	60 e0       	ldi	r22, 0x00	; 0
    396e:	70 e0       	ldi	r23, 0x00	; 0
    3970:	83 e0       	ldi	r24, 0x03	; 3
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	0e 94 17 13 	call	0x262e	; 0x262e <dwt_readfromdevice>
	sysconf = dwt_read32bitreg(SYS_CFG_ID);
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	70 e0       	ldi	r23, 0x00	; 0
    397c:	84 e0       	ldi	r24, 0x04	; 4
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	0e 94 53 13 	call	0x26a6	; 0x26a6 <dwt_read32bitoffsetreg>
    3984:	6b 8f       	std	Y+27, r22	; 0x1b
    3986:	7c 8f       	std	Y+28, r23	; 0x1c
    3988:	8d 8f       	std	Y+29, r24	; 0x1d
    398a:	9e 8f       	std	Y+30, r25	; 0x1e
	dwt_readfromdevice(TX_FCTRL_ID,0,TX_FCTRL_LEN,tx_fctrl);
    398c:	08 5f       	subi	r16, 0xF8	; 248
    398e:	1f 4f       	sbci	r17, 0xFF	; 255
    3990:	25 e0       	ldi	r18, 0x05	; 5
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	40 e0       	ldi	r20, 0x00	; 0
    3996:	50 e0       	ldi	r21, 0x00	; 0
    3998:	60 e0       	ldi	r22, 0x00	; 0
    399a:	70 e0       	ldi	r23, 0x00	; 0
    399c:	88 e0       	ldi	r24, 0x08	; 8
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	0e 94 17 13 	call	0x262e	; 0x262e <dwt_readfromdevice>
	sys_ctrl = dwt_read32bitreg(SYS_CTRL_ID);
    39a4:	60 e0       	ldi	r22, 0x00	; 0
    39a6:	70 e0       	ldi	r23, 0x00	; 0
    39a8:	8d e0       	ldi	r24, 0x0D	; 13
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	0e 94 53 13 	call	0x26a6	; 0x26a6 <dwt_read32bitoffsetreg>
    39b0:	6f 8f       	std	Y+31, r22	; 0x1f
    39b2:	78 a3       	std	Y+32, r23	; 0x20
    39b4:	89 a3       	std	Y+33, r24	; 0x21
    39b6:	9a a3       	std	Y+34, r25	; 0x22
	sys_mask = dwt_read32bitreg(SYS_MASK_ID);
    39b8:	60 e0       	ldi	r22, 0x00	; 0
    39ba:	70 e0       	ldi	r23, 0x00	; 0
    39bc:	8e e0       	ldi	r24, 0x0E	; 14
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	0e 94 53 13 	call	0x26a6	; 0x26a6 <dwt_read32bitoffsetreg>
    39c4:	6b a3       	std	Y+35, r22	; 0x23
    39c6:	7c a3       	std	Y+36, r23	; 0x24
    39c8:	8d a3       	std	Y+37, r24	; 0x25
    39ca:	9e a3       	std	Y+38, r25	; 0x26
	dwt_readfromdevice(SYS_STATUS_ID,0,SYS_STATUS_LEN,sys_status);
    39cc:	0b 5f       	subi	r16, 0xFB	; 251
    39ce:	1f 4f       	sbci	r17, 0xFF	; 255
    39d0:	25 e0       	ldi	r18, 0x05	; 5
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	40 e0       	ldi	r20, 0x00	; 0
    39d6:	50 e0       	ldi	r21, 0x00	; 0
    39d8:	60 e0       	ldi	r22, 0x00	; 0
    39da:	70 e0       	ldi	r23, 0x00	; 0
    39dc:	8f e0       	ldi	r24, 0x0F	; 15
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	0e 94 17 13 	call	0x262e	; 0x262e <dwt_readfromdevice>
	rx_finfo = dwt_read32bitreg(RX_FINFO_ID);
    39e4:	60 e0       	ldi	r22, 0x00	; 0
    39e6:	70 e0       	ldi	r23, 0x00	; 0
    39e8:	80 e1       	ldi	r24, 0x10	; 16
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	0e 94 53 13 	call	0x26a6	; 0x26a6 <dwt_read32bitoffsetreg>
    39f0:	6f a3       	std	Y+39, r22	; 0x27
    39f2:	78 a7       	std	Y+40, r23	; 0x28
    39f4:	89 a7       	std	Y+41, r24	; 0x29
    39f6:	9a a7       	std	Y+42, r25	; 0x2a
	dwt_readfromdevice(RX_FQUAL_ID,0,RX_FQUAL_LEN,rx_fqual);
    39f8:	0b 5f       	subi	r16, 0xFB	; 251
    39fa:	1f 4f       	sbci	r17, 0xFF	; 255
    39fc:	28 e0       	ldi	r18, 0x08	; 8
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e0       	ldi	r20, 0x00	; 0
    3a02:	50 e0       	ldi	r21, 0x00	; 0
    3a04:	60 e0       	ldi	r22, 0x00	; 0
    3a06:	70 e0       	ldi	r23, 0x00	; 0
    3a08:	82 e1       	ldi	r24, 0x12	; 18
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	0e 94 17 13 	call	0x262e	; 0x262e <dwt_readfromdevice>
	chan_ctrl = dwt_read32bitreg(CHAN_CTRL_ID);
    3a10:	60 e0       	ldi	r22, 0x00	; 0
    3a12:	70 e0       	ldi	r23, 0x00	; 0
    3a14:	8f e1       	ldi	r24, 0x1F	; 31
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	0e 94 53 13 	call	0x26a6	; 0x26a6 <dwt_read32bitoffsetreg>
    3a1c:	2b 01       	movw	r4, r22
    3a1e:	3c 01       	movw	r6, r24
	
	printf("\n------------------------------------------\n");
    3a20:	80 e9       	ldi	r24, 0x90	; 144
    3a22:	91 e2       	ldi	r25, 0x21	; 33
    3a24:	7f d3       	rcall	.+1790   	; 0x4124 <puts>
	printf("DWM1000 INFO\n");
    3a26:	8c eb       	ldi	r24, 0xBC	; 188
    3a28:	91 e2       	ldi	r25, 0x21	; 33
    3a2a:	7c d3       	rcall	.+1784   	; 0x4124 <puts>
	printf("Device ID  : %04X %04X\n", (uint16_t)(dev_id>>16),(uint16_t)dev_id);
    3a2c:	9f 92       	push	r9
    3a2e:	8f 92       	push	r8
    3a30:	45 01       	movw	r8, r10
    3a32:	aa 24       	eor	r10, r10
    3a34:	bb 24       	eor	r11, r11
    3a36:	9f 92       	push	r9
    3a38:	8f 92       	push	r8
    3a3a:	89 ec       	ldi	r24, 0xC9	; 201
    3a3c:	91 e2       	ldi	r25, 0x21	; 33
    3a3e:	9f 93       	push	r25
    3a40:	8f 93       	push	r24
    3a42:	5f d3       	rcall	.+1726   	; 0x4102 <printf>
	printf("Part ID    : %04X %04X\n", (uint16_t)(dev_part_id>>16),(uint16_t)dev_part_id);
    3a44:	df 92       	push	r13
    3a46:	cf 92       	push	r12
    3a48:	67 01       	movw	r12, r14
    3a4a:	ee 24       	eor	r14, r14
    3a4c:	ff 24       	eor	r15, r15
    3a4e:	df 92       	push	r13
    3a50:	cf 92       	push	r12
    3a52:	81 ee       	ldi	r24, 0xE1	; 225
    3a54:	91 e2       	ldi	r25, 0x21	; 33
    3a56:	9f 93       	push	r25
    3a58:	8f 93       	push	r24
    3a5a:	53 d3       	rcall	.+1702   	; 0x4102 <printf>
	printf("EUI        : %02X %02X %02X %02X %02X %02X %02X %02X\n", dev_eui[7], dev_eui[6],dev_eui[5],dev_eui[4],dev_eui[3],dev_eui[2],dev_eui[1],dev_eui[0]);
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	1f 92       	push	r1
    3a60:	8f 93       	push	r24
    3a62:	8a 81       	ldd	r24, Y+2	; 0x02
    3a64:	1f 92       	push	r1
    3a66:	8f 93       	push	r24
    3a68:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6a:	1f 92       	push	r1
    3a6c:	8f 93       	push	r24
    3a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a70:	1f 92       	push	r1
    3a72:	8f 93       	push	r24
    3a74:	8d 81       	ldd	r24, Y+5	; 0x05
    3a76:	1f 92       	push	r1
    3a78:	8f 93       	push	r24
    3a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a7c:	1f 92       	push	r1
    3a7e:	8f 93       	push	r24
    3a80:	8f 81       	ldd	r24, Y+7	; 0x07
    3a82:	1f 92       	push	r1
    3a84:	8f 93       	push	r24
    3a86:	88 85       	ldd	r24, Y+8	; 0x08
    3a88:	1f 92       	push	r1
    3a8a:	8f 93       	push	r24
    3a8c:	89 ef       	ldi	r24, 0xF9	; 249
    3a8e:	91 e2       	ldi	r25, 0x21	; 33
    3a90:	9f 93       	push	r25
    3a92:	8f 93       	push	r24
    3a94:	36 d3       	rcall	.+1644   	; 0x4102 <printf>
	printf("PAN Address: %02X %02X %02X %02X\n",dev_panid[3], dev_panid[2], dev_panid[1], dev_panid[0]);
    3a96:	1f 92       	push	r1
    3a98:	1f 92       	push	r1
    3a9a:	1f 92       	push	r1
    3a9c:	1f 92       	push	r1
    3a9e:	1f 92       	push	r1
    3aa0:	1f 92       	push	r1
    3aa2:	1f 92       	push	r1
    3aa4:	1f 92       	push	r1
    3aa6:	8f e2       	ldi	r24, 0x2F	; 47
    3aa8:	92 e2       	ldi	r25, 0x22	; 34
    3aaa:	9f 93       	push	r25
    3aac:	8f 93       	push	r24
    3aae:	29 d3       	rcall	.+1618   	; 0x4102 <printf>
	printf("SYS_CFG    : %04X %04X\n", (uint16_t)(sysconf>>16),(uint16_t)sysconf);
    3ab0:	cd bf       	out	0x3d, r28	; 61
    3ab2:	de bf       	out	0x3e, r29	; 62
    3ab4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3ab6:	3f 93       	push	r19
    3ab8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3aba:	4f 93       	push	r20
    3abc:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3abe:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3ac0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3ac2:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3ac4:	ca 01       	movw	r24, r20
    3ac6:	aa 27       	eor	r26, r26
    3ac8:	bb 27       	eor	r27, r27
    3aca:	9f 93       	push	r25
    3acc:	8f 93       	push	r24
    3ace:	81 e5       	ldi	r24, 0x51	; 81
    3ad0:	92 e2       	ldi	r25, 0x22	; 34
    3ad2:	9f 93       	push	r25
    3ad4:	8f 93       	push	r24
    3ad6:	15 d3       	rcall	.+1578   	; 0x4102 <printf>
	printf("TX_FCTRL   : %02X %02X %02X %02X %02X\n", tx_fctrl[4], tx_fctrl[3], tx_fctrl[2], tx_fctrl[1], tx_fctrl[0]);
    3ad8:	89 85       	ldd	r24, Y+9	; 0x09
    3ada:	1f 92       	push	r1
    3adc:	8f 93       	push	r24
    3ade:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ae0:	1f 92       	push	r1
    3ae2:	8f 93       	push	r24
    3ae4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ae6:	1f 92       	push	r1
    3ae8:	8f 93       	push	r24
    3aea:	8c 85       	ldd	r24, Y+12	; 0x0c
    3aec:	1f 92       	push	r1
    3aee:	8f 93       	push	r24
    3af0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3af2:	1f 92       	push	r1
    3af4:	8f 93       	push	r24
    3af6:	89 e6       	ldi	r24, 0x69	; 105
    3af8:	92 e2       	ldi	r25, 0x22	; 34
    3afa:	9f 93       	push	r25
    3afc:	8f 93       	push	r24
    3afe:	01 d3       	rcall	.+1538   	; 0x4102 <printf>
	printf("SYS_CTRL   : %04X %04X\n", (uint16_t)(sys_ctrl>>16),(uint16_t)sys_ctrl);
    3b00:	38 a1       	ldd	r19, Y+32	; 0x20
    3b02:	3f 93       	push	r19
    3b04:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3b06:	4f 93       	push	r20
    3b08:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3b0a:	38 a1       	ldd	r19, Y+32	; 0x20
    3b0c:	49 a1       	ldd	r20, Y+33	; 0x21
    3b0e:	5a a1       	ldd	r21, Y+34	; 0x22
    3b10:	ca 01       	movw	r24, r20
    3b12:	aa 27       	eor	r26, r26
    3b14:	bb 27       	eor	r27, r27
    3b16:	9f 93       	push	r25
    3b18:	8f 93       	push	r24
    3b1a:	80 e9       	ldi	r24, 0x90	; 144
    3b1c:	92 e2       	ldi	r25, 0x22	; 34
    3b1e:	9f 93       	push	r25
    3b20:	8f 93       	push	r24
    3b22:	ef d2       	rcall	.+1502   	; 0x4102 <printf>
	printf("SYS_MASK   : %04X %04X\n", (uint16_t)(sys_mask>>16),(uint16_t)sys_mask);
    3b24:	3c a1       	ldd	r19, Y+36	; 0x24
    3b26:	3f 93       	push	r19
    3b28:	4b a1       	ldd	r20, Y+35	; 0x23
    3b2a:	4f 93       	push	r20
    3b2c:	2b a1       	ldd	r18, Y+35	; 0x23
    3b2e:	3c a1       	ldd	r19, Y+36	; 0x24
    3b30:	4d a1       	ldd	r20, Y+37	; 0x25
    3b32:	5e a1       	ldd	r21, Y+38	; 0x26
    3b34:	ca 01       	movw	r24, r20
    3b36:	aa 27       	eor	r26, r26
    3b38:	bb 27       	eor	r27, r27
    3b3a:	9f 93       	push	r25
    3b3c:	8f 93       	push	r24
    3b3e:	88 ea       	ldi	r24, 0xA8	; 168
    3b40:	92 e2       	ldi	r25, 0x22	; 34
    3b42:	9f 93       	push	r25
    3b44:	8f 93       	push	r24
    3b46:	dd d2       	rcall	.+1466   	; 0x4102 <printf>
	printf("SYS_STATUS : %02X %02X %02X %02X %02X\n", sys_status[4], sys_status[3], sys_status[2], sys_status[1], sys_status[0]);
    3b48:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b4a:	1f 92       	push	r1
    3b4c:	8f 93       	push	r24
    3b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b50:	1f 92       	push	r1
    3b52:	8f 93       	push	r24
    3b54:	88 89       	ldd	r24, Y+16	; 0x10
    3b56:	1f 92       	push	r1
    3b58:	8f 93       	push	r24
    3b5a:	89 89       	ldd	r24, Y+17	; 0x11
    3b5c:	1f 92       	push	r1
    3b5e:	8f 93       	push	r24
    3b60:	8a 89       	ldd	r24, Y+18	; 0x12
    3b62:	1f 92       	push	r1
    3b64:	8f 93       	push	r24
    3b66:	80 ec       	ldi	r24, 0xC0	; 192
    3b68:	92 e2       	ldi	r25, 0x22	; 34
    3b6a:	9f 93       	push	r25
    3b6c:	8f 93       	push	r24
    3b6e:	c9 d2       	rcall	.+1426   	; 0x4102 <printf>
	printf("RX_FINFO   : %04X %04X\n", (uint16_t)(rx_finfo>>16),(uint16_t)rx_finfo);
    3b70:	cd bf       	out	0x3d, r28	; 61
    3b72:	de bf       	out	0x3e, r29	; 62
    3b74:	58 a5       	ldd	r21, Y+40	; 0x28
    3b76:	5f 93       	push	r21
    3b78:	8f a1       	ldd	r24, Y+39	; 0x27
    3b7a:	8f 93       	push	r24
    3b7c:	2f a1       	ldd	r18, Y+39	; 0x27
    3b7e:	38 a5       	ldd	r19, Y+40	; 0x28
    3b80:	49 a5       	ldd	r20, Y+41	; 0x29
    3b82:	5a a5       	ldd	r21, Y+42	; 0x2a
    3b84:	ca 01       	movw	r24, r20
    3b86:	aa 27       	eor	r26, r26
    3b88:	bb 27       	eor	r27, r27
    3b8a:	9f 93       	push	r25
    3b8c:	8f 93       	push	r24
    3b8e:	87 ee       	ldi	r24, 0xE7	; 231
    3b90:	92 e2       	ldi	r25, 0x22	; 34
    3b92:	9f 93       	push	r25
    3b94:	8f 93       	push	r24
    3b96:	b5 d2       	rcall	.+1386   	; 0x4102 <printf>
	printf("RX_FQUAL   : %02X %02X %02X %02X %02X %02X %02X %02X\n", rx_fqual[7], rx_fqual[6],rx_fqual[5],rx_fqual[4],rx_fqual[3],rx_fqual[2],rx_fqual[1],rx_fqual[0]);
    3b98:	8b 89       	ldd	r24, Y+19	; 0x13
    3b9a:	1f 92       	push	r1
    3b9c:	8f 93       	push	r24
    3b9e:	8c 89       	ldd	r24, Y+20	; 0x14
    3ba0:	1f 92       	push	r1
    3ba2:	8f 93       	push	r24
    3ba4:	8d 89       	ldd	r24, Y+21	; 0x15
    3ba6:	1f 92       	push	r1
    3ba8:	8f 93       	push	r24
    3baa:	8e 89       	ldd	r24, Y+22	; 0x16
    3bac:	1f 92       	push	r1
    3bae:	8f 93       	push	r24
    3bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    3bb2:	1f 92       	push	r1
    3bb4:	8f 93       	push	r24
    3bb6:	88 8d       	ldd	r24, Y+24	; 0x18
    3bb8:	1f 92       	push	r1
    3bba:	8f 93       	push	r24
    3bbc:	89 8d       	ldd	r24, Y+25	; 0x19
    3bbe:	1f 92       	push	r1
    3bc0:	8f 93       	push	r24
    3bc2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3bc4:	1f 92       	push	r1
    3bc6:	8f 93       	push	r24
    3bc8:	8f ef       	ldi	r24, 0xFF	; 255
    3bca:	92 e2       	ldi	r25, 0x22	; 34
    3bcc:	9f 93       	push	r25
    3bce:	8f 93       	push	r24
    3bd0:	98 d2       	rcall	.+1328   	; 0x4102 <printf>
	printf("CHAN_CTRL  : %04X %04X\n", (uint16_t)(chan_ctrl>>16),(uint16_t)chan_ctrl);
    3bd2:	5f 92       	push	r5
    3bd4:	4f 92       	push	r4
    3bd6:	23 01       	movw	r4, r6
    3bd8:	66 24       	eor	r6, r6
    3bda:	77 24       	eor	r7, r7
    3bdc:	5f 92       	push	r5
    3bde:	4f 92       	push	r4
    3be0:	85 e3       	ldi	r24, 0x35	; 53
    3be2:	93 e2       	ldi	r25, 0x23	; 35
    3be4:	9f 93       	push	r25
    3be6:	8f 93       	push	r24
    3be8:	8c d2       	rcall	.+1304   	; 0x4102 <printf>
	printf("\n------------------------------------------\n");
    3bea:	80 e9       	ldi	r24, 0x90	; 144
    3bec:	91 e2       	ldi	r25, 0x21	; 33
    3bee:	9a d2       	rcall	.+1332   	; 0x4124 <puts>
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	de bf       	out	0x3e, r29	; 62
	
}
    3bf4:	aa 96       	adiw	r28, 0x2a	; 42
    3bf6:	cd bf       	out	0x3d, r28	; 61
    3bf8:	de bf       	out	0x3e, r29	; 62
    3bfa:	df 91       	pop	r29
    3bfc:	cf 91       	pop	r28
    3bfe:	1f 91       	pop	r17
    3c00:	0f 91       	pop	r16
    3c02:	ff 90       	pop	r15
    3c04:	ef 90       	pop	r14
    3c06:	df 90       	pop	r13
    3c08:	cf 90       	pop	r12
    3c0a:	bf 90       	pop	r11
    3c0c:	af 90       	pop	r10
    3c0e:	9f 90       	pop	r9
    3c10:	8f 90       	pop	r8
    3c12:	7f 90       	pop	r7
    3c14:	6f 90       	pop	r6
    3c16:	5f 90       	pop	r5
    3c18:	4f 90       	pop	r4
    3c1a:	08 95       	ret

00003c1c <dwt_receive_example>:
/* Hold copy of frame length of frame received (if good) so that it can be examined at a debug breakpoint. */
static uint16 frame_len = 0;

void dwt_receive_example(void)
{
	if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	18 da       	rcall	.-3024   	; 0x3052 <dwt_initialise>
    3c22:	01 96       	adiw	r24, 0x01	; 1
    3c24:	41 f4       	brne	.+16     	; 0x3c36 <dwt_receive_example+0x1a>
	{
		printf("INIT FAILED");
    3c26:	8d e4       	ldi	r24, 0x4D	; 77
    3c28:	93 e2       	ldi	r25, 0x23	; 35
    3c2a:	9f 93       	push	r25
    3c2c:	8f 93       	push	r24
    3c2e:	69 d2       	rcall	.+1234   	; 0x4102 <printf>
    3c30:	0f 90       	pop	r0
    3c32:	0f 90       	pop	r0
    3c34:	ff cf       	rjmp	.-2      	; 0x3c34 <dwt_receive_example+0x18>
		while (1)
		{ };
	}
	fast_spi();
    3c36:	2e db       	rcall	.-2468   	; 0x3294 <fast_spi>

	/* Configure DW1000. See NOTE 3 below. */
	dwt_configure(&config);
    3c38:	86 eb       	ldi	r24, 0xB6	; 182
    3c3a:	90 e2       	ldi	r25, 0x20	; 32
    3c3c:	0e 94 57 14 	call	0x28ae	; 0x28ae <dwt_configure>
	dwt_setleds(DWT_LEDS_ENABLE|DWT_LEDS_INIT_BLINK);
    3c40:	83 e0       	ldi	r24, 0x03	; 3
    3c42:	6b d8       	rcall	.-3882   	; 0x2d1a <dwt_setleds>

        /* Clear local RX buffer to avoid having leftovers from previous receptions  This is not necessary but is included here to aid reading
         * the RX buffer.
         * This is a good place to put a breakpoint. Here (after first time through the loop) the local status register will be set for last event
         * and if a good receive has happened the data buffer will have the data in it, and frame_len will be set to the length of the RX frame. */
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	e1 2c       	mov	r14, r1
    3c4a:	0f 2e       	mov	r0, r31
    3c4c:	f2 e1       	ldi	r31, 0x12	; 18
    3c4e:	ff 2e       	mov	r15, r31
    3c50:	f0 2d       	mov	r31, r0
    3c52:	da e7       	ldi	r29, 0x7A	; 122
    3c54:	c0 e0       	ldi	r28, 0x00	; 0
    3c56:	08 c0       	rjmp	.+16     	; 0x3c68 <dwt_receive_example+0x4c>
        {
            rx_buffer[i] = 0;
    3c58:	fc 01       	movw	r30, r24
    3c5a:	e9 50       	subi	r30, 0x09	; 9
    3c5c:	fa 4d       	sbci	r31, 0xDA	; 218
    3c5e:	10 82       	st	Z, r1

        /* Clear local RX buffer to avoid having leftovers from previous receptions  This is not necessary but is included here to aid reading
         * the RX buffer.
         * This is a good place to put a breakpoint. Here (after first time through the loop) the local status register will be set for last event
         * and if a good receive has happened the data buffer will have the data in it, and frame_len will be set to the length of the RX frame. */
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
    3c60:	01 96       	adiw	r24, 0x01	; 1
    3c62:	02 c0       	rjmp	.+4      	; 0x3c68 <dwt_receive_example+0x4c>
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	8f 37       	cpi	r24, 0x7F	; 127
    3c6a:	91 05       	cpc	r25, r1
    3c6c:	ac f3       	brlt	.-22     	; 0x3c58 <dwt_receive_example+0x3c>
        {
            rx_buffer[i] = 0;
        }

        /* Activate reception immediately. See NOTE 3 below. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	87 d9       	rcall	.-3314   	; 0x2f82 <dwt_rxenable>

        /* Poll until a frame is properly received or an error/timeout occurs. See NOTE 4 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
    3c74:	60 e0       	ldi	r22, 0x00	; 0
    3c76:	70 e0       	ldi	r23, 0x00	; 0
    3c78:	8f e0       	ldi	r24, 0x0F	; 15
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <dwt_read32bitoffsetreg>
    3c80:	60 93 f3 25 	sts	0x25F3, r22
    3c84:	70 93 f4 25 	sts	0x25F4, r23
    3c88:	80 93 f5 25 	sts	0x25F5, r24
    3c8c:	90 93 f6 25 	sts	0x25F6, r25
    3c90:	8b 01       	movw	r16, r22
    3c92:	9c 01       	movw	r18, r24
    3c94:	00 27       	eor	r16, r16
    3c96:	10 7d       	andi	r17, 0xD0	; 208
    3c98:	25 70       	andi	r18, 0x05	; 5
    3c9a:	34 72       	andi	r19, 0x24	; 36
    3c9c:	01 2b       	or	r16, r17
    3c9e:	02 2b       	or	r16, r18
    3ca0:	03 2b       	or	r16, r19
    3ca2:	41 f3       	breq	.-48     	; 0x3c74 <dwt_receive_example+0x58>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
    3ca4:	76 ff       	sbrs	r23, 6
    3ca6:	22 c0       	rjmp	.+68     	; 0x3cec <dwt_receive_example+0xd0>
        {
            /* A frame has been received, copy it to our local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
    3ca8:	60 e0       	ldi	r22, 0x00	; 0
    3caa:	70 e0       	ldi	r23, 0x00	; 0
    3cac:	80 e1       	ldi	r24, 0x10	; 16
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	0e 94 53 13 	call	0x26a6	; 0x26a6 <dwt_read32bitoffsetreg>
    3cb4:	73 70       	andi	r23, 0x03	; 3
    3cb6:	60 93 f1 25 	sts	0x25F1, r22
    3cba:	70 93 f2 25 	sts	0x25F2, r23
            if (frame_len <= FRAME_LEN_MAX)
    3cbe:	60 38       	cpi	r22, 0x80	; 128
    3cc0:	71 05       	cpc	r23, r1
    3cc2:	48 f4       	brcc	.+18     	; 0x3cd6 <dwt_receive_example+0xba>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
    3cc4:	40 e0       	ldi	r20, 0x00	; 0
    3cc6:	50 e0       	ldi	r21, 0x00	; 0
    3cc8:	87 ef       	ldi	r24, 0xF7	; 247
    3cca:	95 e2       	ldi	r25, 0x25	; 37
    3ccc:	0e 94 46 13 	call	0x268c	; 0x268c <dwt_readrxdata>
				printf("%s\n",rx_buffer);
    3cd0:	87 ef       	ldi	r24, 0xF7	; 247
    3cd2:	95 e2       	ldi	r25, 0x25	; 37
    3cd4:	27 d2       	rcall	.+1102   	; 0x4124 <puts>
            }

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	30 e4       	ldi	r19, 0x40	; 64
    3cda:	40 e0       	ldi	r20, 0x00	; 0
    3cdc:	50 e0       	ldi	r21, 0x00	; 0
    3cde:	60 e0       	ldi	r22, 0x00	; 0
    3ce0:	70 e0       	ldi	r23, 0x00	; 0
    3ce2:	8f e0       	ldi	r24, 0x0F	; 15
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <dwt_write32bitoffsetreg>
    3cea:	0a c0       	rjmp	.+20     	; 0x3d00 <dwt_receive_example+0xe4>
        }
        else
        {
            /* Clear RX error events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e9       	ldi	r19, 0x90	; 144
    3cf0:	45 e0       	ldi	r20, 0x05	; 5
    3cf2:	54 e2       	ldi	r21, 0x24	; 36
    3cf4:	60 e0       	ldi	r22, 0x00	; 0
    3cf6:	70 e0       	ldi	r23, 0x00	; 0
    3cf8:	8f e0       	ldi	r24, 0x0F	; 15
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <dwt_write32bitoffsetreg>

        /* Clear local RX buffer to avoid having leftovers from previous receptions  This is not necessary but is included here to aid reading
         * the RX buffer.
         * This is a good place to put a breakpoint. Here (after first time through the loop) the local status register will be set for last event
         * and if a good receive has happened the data buffer will have the data in it, and frame_len will be set to the length of the RX frame. */
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
    3d00:	8e 2d       	mov	r24, r14
    3d02:	9f 2d       	mov	r25, r15
    3d04:	ad 2f       	mov	r26, r29
    3d06:	bc 2f       	mov	r27, r28
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	a1 09       	sbc	r26, r1
    3d0c:	b1 09       	sbc	r27, r1
    3d0e:	00 97       	sbiw	r24, 0x00	; 0
    3d10:	a1 05       	cpc	r26, r1
    3d12:	b1 05       	cpc	r27, r1
    3d14:	c9 f7       	brne	.-14     	; 0x3d08 <dwt_receive_example+0xec>
    3d16:	a6 cf       	rjmp	.-180    	; 0x3c64 <dwt_receive_example+0x48>

00003d18 <main>:
#endif //end #ifdef DWT_DS_TWR_RESP


int main (void)
{
	init_onepos();
    3d18:	4e db       	rcall	.-2404   	; 0x33b6 <init_onepos>
	openspi();
    3d1a:	93 da       	rcall	.-2778   	; 0x3242 <openspi>
		.baudrate = USART_SERIAL_BAUDRATE,
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	usart_serial_init(USART_BLE, &BLE_SERIAL_OPTIONS);
    3d1c:	6f ea       	ldi	r22, 0xAF	; 175
    3d1e:	70 e2       	ldi	r23, 0x20	; 32
    3d20:	80 ea       	ldi	r24, 0xA0	; 160
    3d22:	99 e0       	ldi	r25, 0x09	; 9
    3d24:	a1 dd       	rcall	.-1214   	; 0x3868 <usart_serial_init>
		.baudrate = USART_SERIAL_BAUDRATE,
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	usart_serial_init(USART_RS485, &RS485_SERIAL_OPTIONS);
    3d26:	68 ea       	ldi	r22, 0xA8	; 168
    3d28:	70 e2       	ldi	r23, 0x20	; 32
    3d2a:	80 ea       	ldi	r24, 0xA0	; 160
    3d2c:	9a e0       	ldi	r25, 0x0A	; 10
    3d2e:	9c dd       	rcall	.-1224   	; 0x3868 <usart_serial_init>
	
	init_animation();
    3d30:	7f db       	rcall	.-2306   	; 0x3430 <init_animation>
	
	//dwt_rx_send_respond();
	//dwt_tx_wait_respond();
	
	
	dwt_show_sys_info();
    3d32:	f4 dd       	rcall	.-1048   	; 0x391c <dwt_show_sys_info>
	
	#ifdef DWT_SIMPLE_TX
		dwt_send_example();
	#endif
	#ifdef DWT_SIMPLE_RX
		dwt_receive_example();
    3d34:	73 df       	rcall	.-282    	; 0x3c1c <dwt_receive_example>

00003d36 <__divsf3>:
    3d36:	0c d0       	rcall	.+24     	; 0x3d50 <__divsf3x>
    3d38:	05 c1       	rjmp	.+522    	; 0x3f44 <__fp_round>
    3d3a:	fd d0       	rcall	.+506    	; 0x3f36 <__fp_pscB>
    3d3c:	40 f0       	brcs	.+16     	; 0x3d4e <__divsf3+0x18>
    3d3e:	f4 d0       	rcall	.+488    	; 0x3f28 <__fp_pscA>
    3d40:	30 f0       	brcs	.+12     	; 0x3d4e <__divsf3+0x18>
    3d42:	21 f4       	brne	.+8      	; 0x3d4c <__divsf3+0x16>
    3d44:	5f 3f       	cpi	r21, 0xFF	; 255
    3d46:	19 f0       	breq	.+6      	; 0x3d4e <__divsf3+0x18>
    3d48:	d6 c0       	rjmp	.+428    	; 0x3ef6 <__fp_inf>
    3d4a:	51 11       	cpse	r21, r1
    3d4c:	2f c1       	rjmp	.+606    	; 0x3fac <__fp_szero>
    3d4e:	d9 c0       	rjmp	.+434    	; 0x3f02 <__fp_nan>

00003d50 <__divsf3x>:
    3d50:	0a d1       	rcall	.+532    	; 0x3f66 <__fp_split3>
    3d52:	98 f3       	brcs	.-26     	; 0x3d3a <__divsf3+0x4>

00003d54 <__divsf3_pse>:
    3d54:	99 23       	and	r25, r25
    3d56:	c9 f3       	breq	.-14     	; 0x3d4a <__divsf3+0x14>
    3d58:	55 23       	and	r21, r21
    3d5a:	b1 f3       	breq	.-20     	; 0x3d48 <__divsf3+0x12>
    3d5c:	95 1b       	sub	r25, r21
    3d5e:	55 0b       	sbc	r21, r21
    3d60:	bb 27       	eor	r27, r27
    3d62:	aa 27       	eor	r26, r26
    3d64:	62 17       	cp	r22, r18
    3d66:	73 07       	cpc	r23, r19
    3d68:	84 07       	cpc	r24, r20
    3d6a:	38 f0       	brcs	.+14     	; 0x3d7a <__divsf3_pse+0x26>
    3d6c:	9f 5f       	subi	r25, 0xFF	; 255
    3d6e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d70:	22 0f       	add	r18, r18
    3d72:	33 1f       	adc	r19, r19
    3d74:	44 1f       	adc	r20, r20
    3d76:	aa 1f       	adc	r26, r26
    3d78:	a9 f3       	breq	.-22     	; 0x3d64 <__divsf3_pse+0x10>
    3d7a:	33 d0       	rcall	.+102    	; 0x3de2 <__divsf3_pse+0x8e>
    3d7c:	0e 2e       	mov	r0, r30
    3d7e:	3a f0       	brmi	.+14     	; 0x3d8e <__divsf3_pse+0x3a>
    3d80:	e0 e8       	ldi	r30, 0x80	; 128
    3d82:	30 d0       	rcall	.+96     	; 0x3de4 <__divsf3_pse+0x90>
    3d84:	91 50       	subi	r25, 0x01	; 1
    3d86:	50 40       	sbci	r21, 0x00	; 0
    3d88:	e6 95       	lsr	r30
    3d8a:	00 1c       	adc	r0, r0
    3d8c:	ca f7       	brpl	.-14     	; 0x3d80 <__divsf3_pse+0x2c>
    3d8e:	29 d0       	rcall	.+82     	; 0x3de2 <__divsf3_pse+0x8e>
    3d90:	fe 2f       	mov	r31, r30
    3d92:	27 d0       	rcall	.+78     	; 0x3de2 <__divsf3_pse+0x8e>
    3d94:	66 0f       	add	r22, r22
    3d96:	77 1f       	adc	r23, r23
    3d98:	88 1f       	adc	r24, r24
    3d9a:	bb 1f       	adc	r27, r27
    3d9c:	26 17       	cp	r18, r22
    3d9e:	37 07       	cpc	r19, r23
    3da0:	48 07       	cpc	r20, r24
    3da2:	ab 07       	cpc	r26, r27
    3da4:	b0 e8       	ldi	r27, 0x80	; 128
    3da6:	09 f0       	breq	.+2      	; 0x3daa <__divsf3_pse+0x56>
    3da8:	bb 0b       	sbc	r27, r27
    3daa:	80 2d       	mov	r24, r0
    3dac:	bf 01       	movw	r22, r30
    3dae:	ff 27       	eor	r31, r31
    3db0:	93 58       	subi	r25, 0x83	; 131
    3db2:	5f 4f       	sbci	r21, 0xFF	; 255
    3db4:	2a f0       	brmi	.+10     	; 0x3dc0 <__divsf3_pse+0x6c>
    3db6:	9e 3f       	cpi	r25, 0xFE	; 254
    3db8:	51 05       	cpc	r21, r1
    3dba:	68 f0       	brcs	.+26     	; 0x3dd6 <__divsf3_pse+0x82>
    3dbc:	9c c0       	rjmp	.+312    	; 0x3ef6 <__fp_inf>
    3dbe:	f6 c0       	rjmp	.+492    	; 0x3fac <__fp_szero>
    3dc0:	5f 3f       	cpi	r21, 0xFF	; 255
    3dc2:	ec f3       	brlt	.-6      	; 0x3dbe <__divsf3_pse+0x6a>
    3dc4:	98 3e       	cpi	r25, 0xE8	; 232
    3dc6:	dc f3       	brlt	.-10     	; 0x3dbe <__divsf3_pse+0x6a>
    3dc8:	86 95       	lsr	r24
    3dca:	77 95       	ror	r23
    3dcc:	67 95       	ror	r22
    3dce:	b7 95       	ror	r27
    3dd0:	f7 95       	ror	r31
    3dd2:	9f 5f       	subi	r25, 0xFF	; 255
    3dd4:	c9 f7       	brne	.-14     	; 0x3dc8 <__divsf3_pse+0x74>
    3dd6:	88 0f       	add	r24, r24
    3dd8:	91 1d       	adc	r25, r1
    3dda:	96 95       	lsr	r25
    3ddc:	87 95       	ror	r24
    3dde:	97 f9       	bld	r25, 7
    3de0:	08 95       	ret
    3de2:	e1 e0       	ldi	r30, 0x01	; 1
    3de4:	66 0f       	add	r22, r22
    3de6:	77 1f       	adc	r23, r23
    3de8:	88 1f       	adc	r24, r24
    3dea:	bb 1f       	adc	r27, r27
    3dec:	62 17       	cp	r22, r18
    3dee:	73 07       	cpc	r23, r19
    3df0:	84 07       	cpc	r24, r20
    3df2:	ba 07       	cpc	r27, r26
    3df4:	20 f0       	brcs	.+8      	; 0x3dfe <__divsf3_pse+0xaa>
    3df6:	62 1b       	sub	r22, r18
    3df8:	73 0b       	sbc	r23, r19
    3dfa:	84 0b       	sbc	r24, r20
    3dfc:	ba 0b       	sbc	r27, r26
    3dfe:	ee 1f       	adc	r30, r30
    3e00:	88 f7       	brcc	.-30     	; 0x3de4 <__divsf3_pse+0x90>
    3e02:	e0 95       	com	r30
    3e04:	08 95       	ret

00003e06 <__fixsfdi>:
    3e06:	be e3       	ldi	r27, 0x3E	; 62
    3e08:	04 d0       	rcall	.+8      	; 0x3e12 <__fixunssfdi+0x2>
    3e0a:	08 f4       	brcc	.+2      	; 0x3e0e <__fixsfdi+0x8>
    3e0c:	90 e8       	ldi	r25, 0x80	; 128
    3e0e:	08 95       	ret

00003e10 <__fixunssfdi>:
    3e10:	bf e3       	ldi	r27, 0x3F	; 63
    3e12:	22 27       	eor	r18, r18
    3e14:	33 27       	eor	r19, r19
    3e16:	a9 01       	movw	r20, r18
    3e18:	ae d0       	rcall	.+348    	; 0x3f76 <__fp_splitA>
    3e1a:	58 f1       	brcs	.+86     	; 0x3e72 <__fixunssfdi+0x62>
    3e1c:	9f 57       	subi	r25, 0x7F	; 127
    3e1e:	40 f1       	brcs	.+80     	; 0x3e70 <__fixunssfdi+0x60>
    3e20:	b9 17       	cp	r27, r25
    3e22:	38 f1       	brcs	.+78     	; 0x3e72 <__fixunssfdi+0x62>
    3e24:	bf e3       	ldi	r27, 0x3F	; 63
    3e26:	b9 1b       	sub	r27, r25
    3e28:	99 27       	eor	r25, r25
    3e2a:	b8 50       	subi	r27, 0x08	; 8
    3e2c:	3a f4       	brpl	.+14     	; 0x3e3c <__fixunssfdi+0x2c>
    3e2e:	66 0f       	add	r22, r22
    3e30:	77 1f       	adc	r23, r23
    3e32:	88 1f       	adc	r24, r24
    3e34:	99 1f       	adc	r25, r25
    3e36:	b3 95       	inc	r27
    3e38:	d2 f3       	brmi	.-12     	; 0x3e2e <__fixunssfdi+0x1e>
    3e3a:	16 c0       	rjmp	.+44     	; 0x3e68 <__fixunssfdi+0x58>
    3e3c:	b8 50       	subi	r27, 0x08	; 8
    3e3e:	4a f0       	brmi	.+18     	; 0x3e52 <__fixunssfdi+0x42>
    3e40:	23 2f       	mov	r18, r19
    3e42:	34 2f       	mov	r19, r20
    3e44:	45 2f       	mov	r20, r21
    3e46:	56 2f       	mov	r21, r22
    3e48:	67 2f       	mov	r22, r23
    3e4a:	78 2f       	mov	r23, r24
    3e4c:	88 27       	eor	r24, r24
    3e4e:	b8 50       	subi	r27, 0x08	; 8
    3e50:	ba f7       	brpl	.-18     	; 0x3e40 <__fixunssfdi+0x30>
    3e52:	b8 5f       	subi	r27, 0xF8	; 248
    3e54:	49 f0       	breq	.+18     	; 0x3e68 <__fixunssfdi+0x58>
    3e56:	86 95       	lsr	r24
    3e58:	77 95       	ror	r23
    3e5a:	67 95       	ror	r22
    3e5c:	57 95       	ror	r21
    3e5e:	47 95       	ror	r20
    3e60:	37 95       	ror	r19
    3e62:	27 95       	ror	r18
    3e64:	ba 95       	dec	r27
    3e66:	b9 f7       	brne	.-18     	; 0x3e56 <__fixunssfdi+0x46>
    3e68:	0e f4       	brtc	.+2      	; 0x3e6c <__fixunssfdi+0x5c>
    3e6a:	4e d0       	rcall	.+156    	; 0x3f08 <__fp_negdi>
    3e6c:	88 94       	clc
    3e6e:	08 95       	ret
    3e70:	88 94       	clc
    3e72:	60 e0       	ldi	r22, 0x00	; 0
    3e74:	70 e0       	ldi	r23, 0x00	; 0
    3e76:	cb 01       	movw	r24, r22
    3e78:	08 95       	ret

00003e7a <__floatundisf>:
    3e7a:	e8 94       	clt

00003e7c <__fp_di2sf>:
    3e7c:	f9 2f       	mov	r31, r25
    3e7e:	96 eb       	ldi	r25, 0xB6	; 182
    3e80:	ff 23       	and	r31, r31
    3e82:	81 f0       	breq	.+32     	; 0x3ea4 <__fp_di2sf+0x28>
    3e84:	12 16       	cp	r1, r18
    3e86:	13 06       	cpc	r1, r19
    3e88:	14 06       	cpc	r1, r20
    3e8a:	44 0b       	sbc	r20, r20
    3e8c:	93 95       	inc	r25
    3e8e:	f6 95       	lsr	r31
    3e90:	87 95       	ror	r24
    3e92:	77 95       	ror	r23
    3e94:	67 95       	ror	r22
    3e96:	57 95       	ror	r21
    3e98:	40 40       	sbci	r20, 0x00	; 0
    3e9a:	ff 23       	and	r31, r31
    3e9c:	b9 f7       	brne	.-18     	; 0x3e8c <__fp_di2sf+0x10>
    3e9e:	1b c0       	rjmp	.+54     	; 0x3ed6 <__fp_di2sf+0x5a>
    3ea0:	99 27       	eor	r25, r25
    3ea2:	08 95       	ret
    3ea4:	88 23       	and	r24, r24
    3ea6:	51 f4       	brne	.+20     	; 0x3ebc <__fp_di2sf+0x40>
    3ea8:	98 50       	subi	r25, 0x08	; 8
    3eaa:	d2 f7       	brpl	.-12     	; 0x3ea0 <__fp_di2sf+0x24>
    3eac:	87 2b       	or	r24, r23
    3eae:	76 2f       	mov	r23, r22
    3eb0:	65 2f       	mov	r22, r21
    3eb2:	54 2f       	mov	r21, r20
    3eb4:	43 2f       	mov	r20, r19
    3eb6:	32 2f       	mov	r19, r18
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	b1 f3       	breq	.-20     	; 0x3ea8 <__fp_di2sf+0x2c>
    3ebc:	12 16       	cp	r1, r18
    3ebe:	13 06       	cpc	r1, r19
    3ec0:	14 06       	cpc	r1, r20
    3ec2:	44 0b       	sbc	r20, r20
    3ec4:	88 23       	and	r24, r24
    3ec6:	3a f0       	brmi	.+14     	; 0x3ed6 <__fp_di2sf+0x5a>
    3ec8:	9a 95       	dec	r25
    3eca:	44 0f       	add	r20, r20
    3ecc:	55 1f       	adc	r21, r21
    3ece:	66 1f       	adc	r22, r22
    3ed0:	77 1f       	adc	r23, r23
    3ed2:	88 1f       	adc	r24, r24
    3ed4:	ca f7       	brpl	.-14     	; 0x3ec8 <__fp_di2sf+0x4c>
    3ed6:	55 23       	and	r21, r21
    3ed8:	4a f4       	brpl	.+18     	; 0x3eec <__fp_di2sf+0x70>
    3eda:	44 0f       	add	r20, r20
    3edc:	55 1f       	adc	r21, r21
    3ede:	11 f4       	brne	.+4      	; 0x3ee4 <__fp_di2sf+0x68>
    3ee0:	60 ff       	sbrs	r22, 0
    3ee2:	04 c0       	rjmp	.+8      	; 0x3eec <__fp_di2sf+0x70>
    3ee4:	6f 5f       	subi	r22, 0xFF	; 255
    3ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ee8:	8f 4f       	sbci	r24, 0xFF	; 255
    3eea:	9f 4f       	sbci	r25, 0xFF	; 255
    3eec:	88 0f       	add	r24, r24
    3eee:	96 95       	lsr	r25
    3ef0:	87 95       	ror	r24
    3ef2:	97 f9       	bld	r25, 7
    3ef4:	08 95       	ret

00003ef6 <__fp_inf>:
    3ef6:	97 f9       	bld	r25, 7
    3ef8:	9f 67       	ori	r25, 0x7F	; 127
    3efa:	80 e8       	ldi	r24, 0x80	; 128
    3efc:	70 e0       	ldi	r23, 0x00	; 0
    3efe:	60 e0       	ldi	r22, 0x00	; 0
    3f00:	08 95       	ret

00003f02 <__fp_nan>:
    3f02:	9f ef       	ldi	r25, 0xFF	; 255
    3f04:	80 ec       	ldi	r24, 0xC0	; 192
    3f06:	08 95       	ret

00003f08 <__fp_negdi>:
    3f08:	90 95       	com	r25
    3f0a:	80 95       	com	r24
    3f0c:	70 95       	com	r23
    3f0e:	60 95       	com	r22
    3f10:	50 95       	com	r21
    3f12:	40 95       	com	r20
    3f14:	30 95       	com	r19
    3f16:	21 95       	neg	r18
    3f18:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1a:	4f 4f       	sbci	r20, 0xFF	; 255
    3f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f1e:	6f 4f       	sbci	r22, 0xFF	; 255
    3f20:	7f 4f       	sbci	r23, 0xFF	; 255
    3f22:	8f 4f       	sbci	r24, 0xFF	; 255
    3f24:	9f 4f       	sbci	r25, 0xFF	; 255
    3f26:	08 95       	ret

00003f28 <__fp_pscA>:
    3f28:	00 24       	eor	r0, r0
    3f2a:	0a 94       	dec	r0
    3f2c:	16 16       	cp	r1, r22
    3f2e:	17 06       	cpc	r1, r23
    3f30:	18 06       	cpc	r1, r24
    3f32:	09 06       	cpc	r0, r25
    3f34:	08 95       	ret

00003f36 <__fp_pscB>:
    3f36:	00 24       	eor	r0, r0
    3f38:	0a 94       	dec	r0
    3f3a:	12 16       	cp	r1, r18
    3f3c:	13 06       	cpc	r1, r19
    3f3e:	14 06       	cpc	r1, r20
    3f40:	05 06       	cpc	r0, r21
    3f42:	08 95       	ret

00003f44 <__fp_round>:
    3f44:	09 2e       	mov	r0, r25
    3f46:	03 94       	inc	r0
    3f48:	00 0c       	add	r0, r0
    3f4a:	11 f4       	brne	.+4      	; 0x3f50 <__fp_round+0xc>
    3f4c:	88 23       	and	r24, r24
    3f4e:	52 f0       	brmi	.+20     	; 0x3f64 <__fp_round+0x20>
    3f50:	bb 0f       	add	r27, r27
    3f52:	40 f4       	brcc	.+16     	; 0x3f64 <__fp_round+0x20>
    3f54:	bf 2b       	or	r27, r31
    3f56:	11 f4       	brne	.+4      	; 0x3f5c <__fp_round+0x18>
    3f58:	60 ff       	sbrs	r22, 0
    3f5a:	04 c0       	rjmp	.+8      	; 0x3f64 <__fp_round+0x20>
    3f5c:	6f 5f       	subi	r22, 0xFF	; 255
    3f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f60:	8f 4f       	sbci	r24, 0xFF	; 255
    3f62:	9f 4f       	sbci	r25, 0xFF	; 255
    3f64:	08 95       	ret

00003f66 <__fp_split3>:
    3f66:	57 fd       	sbrc	r21, 7
    3f68:	90 58       	subi	r25, 0x80	; 128
    3f6a:	44 0f       	add	r20, r20
    3f6c:	55 1f       	adc	r21, r21
    3f6e:	59 f0       	breq	.+22     	; 0x3f86 <__fp_splitA+0x10>
    3f70:	5f 3f       	cpi	r21, 0xFF	; 255
    3f72:	71 f0       	breq	.+28     	; 0x3f90 <__fp_splitA+0x1a>
    3f74:	47 95       	ror	r20

00003f76 <__fp_splitA>:
    3f76:	88 0f       	add	r24, r24
    3f78:	97 fb       	bst	r25, 7
    3f7a:	99 1f       	adc	r25, r25
    3f7c:	61 f0       	breq	.+24     	; 0x3f96 <__fp_splitA+0x20>
    3f7e:	9f 3f       	cpi	r25, 0xFF	; 255
    3f80:	79 f0       	breq	.+30     	; 0x3fa0 <__fp_splitA+0x2a>
    3f82:	87 95       	ror	r24
    3f84:	08 95       	ret
    3f86:	12 16       	cp	r1, r18
    3f88:	13 06       	cpc	r1, r19
    3f8a:	14 06       	cpc	r1, r20
    3f8c:	55 1f       	adc	r21, r21
    3f8e:	f2 cf       	rjmp	.-28     	; 0x3f74 <__fp_split3+0xe>
    3f90:	46 95       	lsr	r20
    3f92:	f1 df       	rcall	.-30     	; 0x3f76 <__fp_splitA>
    3f94:	08 c0       	rjmp	.+16     	; 0x3fa6 <__fp_splitA+0x30>
    3f96:	16 16       	cp	r1, r22
    3f98:	17 06       	cpc	r1, r23
    3f9a:	18 06       	cpc	r1, r24
    3f9c:	99 1f       	adc	r25, r25
    3f9e:	f1 cf       	rjmp	.-30     	; 0x3f82 <__fp_splitA+0xc>
    3fa0:	86 95       	lsr	r24
    3fa2:	71 05       	cpc	r23, r1
    3fa4:	61 05       	cpc	r22, r1
    3fa6:	08 94       	sec
    3fa8:	08 95       	ret

00003faa <__fp_zero>:
    3faa:	e8 94       	clt

00003fac <__fp_szero>:
    3fac:	bb 27       	eor	r27, r27
    3fae:	66 27       	eor	r22, r22
    3fb0:	77 27       	eor	r23, r23
    3fb2:	cb 01       	movw	r24, r22
    3fb4:	97 f9       	bld	r25, 7
    3fb6:	08 95       	ret

00003fb8 <__udivmodhi4>:
    3fb8:	aa 1b       	sub	r26, r26
    3fba:	bb 1b       	sub	r27, r27
    3fbc:	51 e1       	ldi	r21, 0x11	; 17
    3fbe:	07 c0       	rjmp	.+14     	; 0x3fce <__udivmodhi4_ep>

00003fc0 <__udivmodhi4_loop>:
    3fc0:	aa 1f       	adc	r26, r26
    3fc2:	bb 1f       	adc	r27, r27
    3fc4:	a6 17       	cp	r26, r22
    3fc6:	b7 07       	cpc	r27, r23
    3fc8:	10 f0       	brcs	.+4      	; 0x3fce <__udivmodhi4_ep>
    3fca:	a6 1b       	sub	r26, r22
    3fcc:	b7 0b       	sbc	r27, r23

00003fce <__udivmodhi4_ep>:
    3fce:	88 1f       	adc	r24, r24
    3fd0:	99 1f       	adc	r25, r25
    3fd2:	5a 95       	dec	r21
    3fd4:	a9 f7       	brne	.-22     	; 0x3fc0 <__udivmodhi4_loop>
    3fd6:	80 95       	com	r24
    3fd8:	90 95       	com	r25
    3fda:	bc 01       	movw	r22, r24
    3fdc:	cd 01       	movw	r24, r26
    3fde:	08 95       	ret

00003fe0 <__udivmodsi4>:
    3fe0:	a1 e2       	ldi	r26, 0x21	; 33
    3fe2:	1a 2e       	mov	r1, r26
    3fe4:	aa 1b       	sub	r26, r26
    3fe6:	bb 1b       	sub	r27, r27
    3fe8:	fd 01       	movw	r30, r26
    3fea:	0d c0       	rjmp	.+26     	; 0x4006 <__udivmodsi4_ep>

00003fec <__udivmodsi4_loop>:
    3fec:	aa 1f       	adc	r26, r26
    3fee:	bb 1f       	adc	r27, r27
    3ff0:	ee 1f       	adc	r30, r30
    3ff2:	ff 1f       	adc	r31, r31
    3ff4:	a2 17       	cp	r26, r18
    3ff6:	b3 07       	cpc	r27, r19
    3ff8:	e4 07       	cpc	r30, r20
    3ffa:	f5 07       	cpc	r31, r21
    3ffc:	20 f0       	brcs	.+8      	; 0x4006 <__udivmodsi4_ep>
    3ffe:	a2 1b       	sub	r26, r18
    4000:	b3 0b       	sbc	r27, r19
    4002:	e4 0b       	sbc	r30, r20
    4004:	f5 0b       	sbc	r31, r21

00004006 <__udivmodsi4_ep>:
    4006:	66 1f       	adc	r22, r22
    4008:	77 1f       	adc	r23, r23
    400a:	88 1f       	adc	r24, r24
    400c:	99 1f       	adc	r25, r25
    400e:	1a 94       	dec	r1
    4010:	69 f7       	brne	.-38     	; 0x3fec <__udivmodsi4_loop>
    4012:	60 95       	com	r22
    4014:	70 95       	com	r23
    4016:	80 95       	com	r24
    4018:	90 95       	com	r25
    401a:	9b 01       	movw	r18, r22
    401c:	ac 01       	movw	r20, r24
    401e:	bd 01       	movw	r22, r26
    4020:	cf 01       	movw	r24, r30
    4022:	08 95       	ret

00004024 <__tablejump2__>:
    4024:	ee 0f       	add	r30, r30
    4026:	ff 1f       	adc	r31, r31

00004028 <__tablejump__>:
    4028:	05 90       	lpm	r0, Z+
    402a:	f4 91       	lpm	r31, Z
    402c:	e0 2d       	mov	r30, r0
    402e:	09 94       	ijmp

00004030 <__muldi3>:
    4030:	df 93       	push	r29
    4032:	cf 93       	push	r28
    4034:	1f 93       	push	r17
    4036:	0f 93       	push	r16
    4038:	9a 9d       	mul	r25, r10
    403a:	f0 2d       	mov	r31, r0
    403c:	21 9f       	mul	r18, r17
    403e:	f0 0d       	add	r31, r0
    4040:	8b 9d       	mul	r24, r11
    4042:	f0 0d       	add	r31, r0
    4044:	8a 9d       	mul	r24, r10
    4046:	e0 2d       	mov	r30, r0
    4048:	f1 0d       	add	r31, r1
    404a:	03 9f       	mul	r16, r19
    404c:	f0 0d       	add	r31, r0
    404e:	02 9f       	mul	r16, r18
    4050:	e0 0d       	add	r30, r0
    4052:	f1 1d       	adc	r31, r1
    4054:	4e 9d       	mul	r20, r14
    4056:	e0 0d       	add	r30, r0
    4058:	f1 1d       	adc	r31, r1
    405a:	5e 9d       	mul	r21, r14
    405c:	f0 0d       	add	r31, r0
    405e:	4f 9d       	mul	r20, r15
    4060:	f0 0d       	add	r31, r0
    4062:	7f 93       	push	r23
    4064:	6f 93       	push	r22
    4066:	bf 92       	push	r11
    4068:	af 92       	push	r10
    406a:	5f 93       	push	r21
    406c:	4f 93       	push	r20
    406e:	d5 01       	movw	r26, r10
    4070:	30 d0       	rcall	.+96     	; 0x40d2 <__umulhisi3>
    4072:	8b 01       	movw	r16, r22
    4074:	ac 01       	movw	r20, r24
    4076:	d7 01       	movw	r26, r14
    4078:	2c d0       	rcall	.+88     	; 0x40d2 <__umulhisi3>
    407a:	eb 01       	movw	r28, r22
    407c:	e8 0f       	add	r30, r24
    407e:	f9 1f       	adc	r31, r25
    4080:	d6 01       	movw	r26, r12
    4082:	1f d0       	rcall	.+62     	; 0x40c2 <__muldi3_6>
    4084:	2f 91       	pop	r18
    4086:	3f 91       	pop	r19
    4088:	d6 01       	movw	r26, r12
    408a:	23 d0       	rcall	.+70     	; 0x40d2 <__umulhisi3>
    408c:	c6 0f       	add	r28, r22
    408e:	d7 1f       	adc	r29, r23
    4090:	e8 1f       	adc	r30, r24
    4092:	f9 1f       	adc	r31, r25
    4094:	af 91       	pop	r26
    4096:	bf 91       	pop	r27
    4098:	14 d0       	rcall	.+40     	; 0x40c2 <__muldi3_6>
    409a:	2f 91       	pop	r18
    409c:	3f 91       	pop	r19
    409e:	19 d0       	rcall	.+50     	; 0x40d2 <__umulhisi3>
    40a0:	c6 0f       	add	r28, r22
    40a2:	d7 1f       	adc	r29, r23
    40a4:	e8 1f       	adc	r30, r24
    40a6:	f9 1f       	adc	r31, r25
    40a8:	d6 01       	movw	r26, r12
    40aa:	13 d0       	rcall	.+38     	; 0x40d2 <__umulhisi3>
    40ac:	e6 0f       	add	r30, r22
    40ae:	f7 1f       	adc	r31, r23
    40b0:	98 01       	movw	r18, r16
    40b2:	be 01       	movw	r22, r28
    40b4:	cf 01       	movw	r24, r30
    40b6:	11 24       	eor	r1, r1
    40b8:	0f 91       	pop	r16
    40ba:	1f 91       	pop	r17
    40bc:	cf 91       	pop	r28
    40be:	df 91       	pop	r29
    40c0:	08 95       	ret

000040c2 <__muldi3_6>:
    40c2:	07 d0       	rcall	.+14     	; 0x40d2 <__umulhisi3>
    40c4:	46 0f       	add	r20, r22
    40c6:	57 1f       	adc	r21, r23
    40c8:	c8 1f       	adc	r28, r24
    40ca:	d9 1f       	adc	r29, r25
    40cc:	08 f4       	brcc	.+2      	; 0x40d0 <__muldi3_6+0xe>
    40ce:	31 96       	adiw	r30, 0x01	; 1
    40d0:	08 95       	ret

000040d2 <__umulhisi3>:
    40d2:	a2 9f       	mul	r26, r18
    40d4:	b0 01       	movw	r22, r0
    40d6:	b3 9f       	mul	r27, r19
    40d8:	c0 01       	movw	r24, r0
    40da:	a3 9f       	mul	r26, r19
    40dc:	70 0d       	add	r23, r0
    40de:	81 1d       	adc	r24, r1
    40e0:	11 24       	eor	r1, r1
    40e2:	91 1d       	adc	r25, r1
    40e4:	b2 9f       	mul	r27, r18
    40e6:	70 0d       	add	r23, r0
    40e8:	81 1d       	adc	r24, r1
    40ea:	11 24       	eor	r1, r1
    40ec:	91 1d       	adc	r25, r1
    40ee:	08 95       	ret

000040f0 <memcpy>:
    40f0:	fb 01       	movw	r30, r22
    40f2:	dc 01       	movw	r26, r24
    40f4:	02 c0       	rjmp	.+4      	; 0x40fa <memcpy+0xa>
    40f6:	01 90       	ld	r0, Z+
    40f8:	0d 92       	st	X+, r0
    40fa:	41 50       	subi	r20, 0x01	; 1
    40fc:	50 40       	sbci	r21, 0x00	; 0
    40fe:	d8 f7       	brcc	.-10     	; 0x40f6 <memcpy+0x6>
    4100:	08 95       	ret

00004102 <printf>:
    4102:	a0 e0       	ldi	r26, 0x00	; 0
    4104:	b0 e0       	ldi	r27, 0x00	; 0
    4106:	e6 e8       	ldi	r30, 0x86	; 134
    4108:	f0 e2       	ldi	r31, 0x20	; 32
    410a:	b2 c2       	rjmp	.+1380   	; 0x4670 <__prologue_saves__+0x20>
    410c:	fe 01       	movw	r30, r28
    410e:	35 96       	adiw	r30, 0x05	; 5
    4110:	61 91       	ld	r22, Z+
    4112:	71 91       	ld	r23, Z+
    4114:	af 01       	movw	r20, r30
    4116:	80 91 8f 26 	lds	r24, 0x268F
    411a:	90 91 90 26 	lds	r25, 0x2690
    411e:	2f d0       	rcall	.+94     	; 0x417e <vfprintf>
    4120:	e2 e0       	ldi	r30, 0x02	; 2
    4122:	bf c2       	rjmp	.+1406   	; 0x46a2 <__epilogue_restores__+0x20>

00004124 <puts>:
    4124:	0f 93       	push	r16
    4126:	1f 93       	push	r17
    4128:	cf 93       	push	r28
    412a:	df 93       	push	r29
    412c:	e0 91 8f 26 	lds	r30, 0x268F
    4130:	f0 91 90 26 	lds	r31, 0x2690
    4134:	23 81       	ldd	r18, Z+3	; 0x03
    4136:	21 ff       	sbrs	r18, 1
    4138:	1b c0       	rjmp	.+54     	; 0x4170 <puts+0x4c>
    413a:	ec 01       	movw	r28, r24
    413c:	00 e0       	ldi	r16, 0x00	; 0
    413e:	10 e0       	ldi	r17, 0x00	; 0
    4140:	89 91       	ld	r24, Y+
    4142:	60 91 8f 26 	lds	r22, 0x268F
    4146:	70 91 90 26 	lds	r23, 0x2690
    414a:	db 01       	movw	r26, r22
    414c:	18 96       	adiw	r26, 0x08	; 8
    414e:	ed 91       	ld	r30, X+
    4150:	fc 91       	ld	r31, X
    4152:	19 97       	sbiw	r26, 0x09	; 9
    4154:	88 23       	and	r24, r24
    4156:	31 f0       	breq	.+12     	; 0x4164 <puts+0x40>
    4158:	09 95       	icall
    415a:	89 2b       	or	r24, r25
    415c:	89 f3       	breq	.-30     	; 0x4140 <puts+0x1c>
    415e:	0f ef       	ldi	r16, 0xFF	; 255
    4160:	1f ef       	ldi	r17, 0xFF	; 255
    4162:	ee cf       	rjmp	.-36     	; 0x4140 <puts+0x1c>
    4164:	8a e0       	ldi	r24, 0x0A	; 10
    4166:	09 95       	icall
    4168:	89 2b       	or	r24, r25
    416a:	11 f4       	brne	.+4      	; 0x4170 <puts+0x4c>
    416c:	c8 01       	movw	r24, r16
    416e:	02 c0       	rjmp	.+4      	; 0x4174 <puts+0x50>
    4170:	8f ef       	ldi	r24, 0xFF	; 255
    4172:	9f ef       	ldi	r25, 0xFF	; 255
    4174:	df 91       	pop	r29
    4176:	cf 91       	pop	r28
    4178:	1f 91       	pop	r17
    417a:	0f 91       	pop	r16
    417c:	08 95       	ret

0000417e <vfprintf>:
    417e:	ac e0       	ldi	r26, 0x0C	; 12
    4180:	b0 e0       	ldi	r27, 0x00	; 0
    4182:	e4 ec       	ldi	r30, 0xC4	; 196
    4184:	f0 e2       	ldi	r31, 0x20	; 32
    4186:	64 c2       	rjmp	.+1224   	; 0x4650 <__prologue_saves__>
    4188:	7c 01       	movw	r14, r24
    418a:	6b 01       	movw	r12, r22
    418c:	8a 01       	movw	r16, r20
    418e:	fc 01       	movw	r30, r24
    4190:	16 82       	std	Z+6, r1	; 0x06
    4192:	17 82       	std	Z+7, r1	; 0x07
    4194:	83 81       	ldd	r24, Z+3	; 0x03
    4196:	81 ff       	sbrs	r24, 1
    4198:	b0 c1       	rjmp	.+864    	; 0x44fa <vfprintf+0x37c>
    419a:	ce 01       	movw	r24, r28
    419c:	01 96       	adiw	r24, 0x01	; 1
    419e:	4c 01       	movw	r8, r24
    41a0:	f7 01       	movw	r30, r14
    41a2:	93 81       	ldd	r25, Z+3	; 0x03
    41a4:	f6 01       	movw	r30, r12
    41a6:	93 fd       	sbrc	r25, 3
    41a8:	85 91       	lpm	r24, Z+
    41aa:	93 ff       	sbrs	r25, 3
    41ac:	81 91       	ld	r24, Z+
    41ae:	6f 01       	movw	r12, r30
    41b0:	88 23       	and	r24, r24
    41b2:	09 f4       	brne	.+2      	; 0x41b6 <vfprintf+0x38>
    41b4:	9e c1       	rjmp	.+828    	; 0x44f2 <vfprintf+0x374>
    41b6:	85 32       	cpi	r24, 0x25	; 37
    41b8:	39 f4       	brne	.+14     	; 0x41c8 <vfprintf+0x4a>
    41ba:	93 fd       	sbrc	r25, 3
    41bc:	85 91       	lpm	r24, Z+
    41be:	93 ff       	sbrs	r25, 3
    41c0:	81 91       	ld	r24, Z+
    41c2:	6f 01       	movw	r12, r30
    41c4:	85 32       	cpi	r24, 0x25	; 37
    41c6:	21 f4       	brne	.+8      	; 0x41d0 <vfprintf+0x52>
    41c8:	b7 01       	movw	r22, r14
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	b1 d1       	rcall	.+866    	; 0x4530 <fputc>
    41ce:	e8 cf       	rjmp	.-48     	; 0x41a0 <vfprintf+0x22>
    41d0:	51 2c       	mov	r5, r1
    41d2:	31 2c       	mov	r3, r1
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	20 32       	cpi	r18, 0x20	; 32
    41d8:	a0 f4       	brcc	.+40     	; 0x4202 <vfprintf+0x84>
    41da:	8b 32       	cpi	r24, 0x2B	; 43
    41dc:	69 f0       	breq	.+26     	; 0x41f8 <vfprintf+0x7a>
    41de:	30 f4       	brcc	.+12     	; 0x41ec <vfprintf+0x6e>
    41e0:	80 32       	cpi	r24, 0x20	; 32
    41e2:	59 f0       	breq	.+22     	; 0x41fa <vfprintf+0x7c>
    41e4:	83 32       	cpi	r24, 0x23	; 35
    41e6:	69 f4       	brne	.+26     	; 0x4202 <vfprintf+0x84>
    41e8:	20 61       	ori	r18, 0x10	; 16
    41ea:	2c c0       	rjmp	.+88     	; 0x4244 <vfprintf+0xc6>
    41ec:	8d 32       	cpi	r24, 0x2D	; 45
    41ee:	39 f0       	breq	.+14     	; 0x41fe <vfprintf+0x80>
    41f0:	80 33       	cpi	r24, 0x30	; 48
    41f2:	39 f4       	brne	.+14     	; 0x4202 <vfprintf+0x84>
    41f4:	21 60       	ori	r18, 0x01	; 1
    41f6:	26 c0       	rjmp	.+76     	; 0x4244 <vfprintf+0xc6>
    41f8:	22 60       	ori	r18, 0x02	; 2
    41fa:	24 60       	ori	r18, 0x04	; 4
    41fc:	23 c0       	rjmp	.+70     	; 0x4244 <vfprintf+0xc6>
    41fe:	28 60       	ori	r18, 0x08	; 8
    4200:	21 c0       	rjmp	.+66     	; 0x4244 <vfprintf+0xc6>
    4202:	27 fd       	sbrc	r18, 7
    4204:	27 c0       	rjmp	.+78     	; 0x4254 <vfprintf+0xd6>
    4206:	30 ed       	ldi	r19, 0xD0	; 208
    4208:	38 0f       	add	r19, r24
    420a:	3a 30       	cpi	r19, 0x0A	; 10
    420c:	78 f4       	brcc	.+30     	; 0x422c <vfprintf+0xae>
    420e:	26 ff       	sbrs	r18, 6
    4210:	06 c0       	rjmp	.+12     	; 0x421e <vfprintf+0xa0>
    4212:	fa e0       	ldi	r31, 0x0A	; 10
    4214:	5f 9e       	mul	r5, r31
    4216:	30 0d       	add	r19, r0
    4218:	11 24       	eor	r1, r1
    421a:	53 2e       	mov	r5, r19
    421c:	13 c0       	rjmp	.+38     	; 0x4244 <vfprintf+0xc6>
    421e:	8a e0       	ldi	r24, 0x0A	; 10
    4220:	38 9e       	mul	r3, r24
    4222:	30 0d       	add	r19, r0
    4224:	11 24       	eor	r1, r1
    4226:	33 2e       	mov	r3, r19
    4228:	20 62       	ori	r18, 0x20	; 32
    422a:	0c c0       	rjmp	.+24     	; 0x4244 <vfprintf+0xc6>
    422c:	8e 32       	cpi	r24, 0x2E	; 46
    422e:	21 f4       	brne	.+8      	; 0x4238 <vfprintf+0xba>
    4230:	26 fd       	sbrc	r18, 6
    4232:	5f c1       	rjmp	.+702    	; 0x44f2 <vfprintf+0x374>
    4234:	20 64       	ori	r18, 0x40	; 64
    4236:	06 c0       	rjmp	.+12     	; 0x4244 <vfprintf+0xc6>
    4238:	8c 36       	cpi	r24, 0x6C	; 108
    423a:	11 f4       	brne	.+4      	; 0x4240 <vfprintf+0xc2>
    423c:	20 68       	ori	r18, 0x80	; 128
    423e:	02 c0       	rjmp	.+4      	; 0x4244 <vfprintf+0xc6>
    4240:	88 36       	cpi	r24, 0x68	; 104
    4242:	41 f4       	brne	.+16     	; 0x4254 <vfprintf+0xd6>
    4244:	f6 01       	movw	r30, r12
    4246:	93 fd       	sbrc	r25, 3
    4248:	85 91       	lpm	r24, Z+
    424a:	93 ff       	sbrs	r25, 3
    424c:	81 91       	ld	r24, Z+
    424e:	6f 01       	movw	r12, r30
    4250:	81 11       	cpse	r24, r1
    4252:	c1 cf       	rjmp	.-126    	; 0x41d6 <vfprintf+0x58>
    4254:	98 2f       	mov	r25, r24
    4256:	9f 7d       	andi	r25, 0xDF	; 223
    4258:	95 54       	subi	r25, 0x45	; 69
    425a:	93 30       	cpi	r25, 0x03	; 3
    425c:	28 f4       	brcc	.+10     	; 0x4268 <vfprintf+0xea>
    425e:	0c 5f       	subi	r16, 0xFC	; 252
    4260:	1f 4f       	sbci	r17, 0xFF	; 255
    4262:	ff e3       	ldi	r31, 0x3F	; 63
    4264:	f9 83       	std	Y+1, r31	; 0x01
    4266:	0d c0       	rjmp	.+26     	; 0x4282 <vfprintf+0x104>
    4268:	83 36       	cpi	r24, 0x63	; 99
    426a:	31 f0       	breq	.+12     	; 0x4278 <vfprintf+0xfa>
    426c:	83 37       	cpi	r24, 0x73	; 115
    426e:	71 f0       	breq	.+28     	; 0x428c <vfprintf+0x10e>
    4270:	83 35       	cpi	r24, 0x53	; 83
    4272:	09 f0       	breq	.+2      	; 0x4276 <vfprintf+0xf8>
    4274:	57 c0       	rjmp	.+174    	; 0x4324 <vfprintf+0x1a6>
    4276:	21 c0       	rjmp	.+66     	; 0x42ba <vfprintf+0x13c>
    4278:	f8 01       	movw	r30, r16
    427a:	80 81       	ld	r24, Z
    427c:	89 83       	std	Y+1, r24	; 0x01
    427e:	0e 5f       	subi	r16, 0xFE	; 254
    4280:	1f 4f       	sbci	r17, 0xFF	; 255
    4282:	44 24       	eor	r4, r4
    4284:	43 94       	inc	r4
    4286:	51 2c       	mov	r5, r1
    4288:	54 01       	movw	r10, r8
    428a:	14 c0       	rjmp	.+40     	; 0x42b4 <vfprintf+0x136>
    428c:	38 01       	movw	r6, r16
    428e:	f2 e0       	ldi	r31, 0x02	; 2
    4290:	6f 0e       	add	r6, r31
    4292:	71 1c       	adc	r7, r1
    4294:	f8 01       	movw	r30, r16
    4296:	a0 80       	ld	r10, Z
    4298:	b1 80       	ldd	r11, Z+1	; 0x01
    429a:	26 ff       	sbrs	r18, 6
    429c:	03 c0       	rjmp	.+6      	; 0x42a4 <vfprintf+0x126>
    429e:	65 2d       	mov	r22, r5
    42a0:	70 e0       	ldi	r23, 0x00	; 0
    42a2:	02 c0       	rjmp	.+4      	; 0x42a8 <vfprintf+0x12a>
    42a4:	6f ef       	ldi	r22, 0xFF	; 255
    42a6:	7f ef       	ldi	r23, 0xFF	; 255
    42a8:	c5 01       	movw	r24, r10
    42aa:	2c 87       	std	Y+12, r18	; 0x0c
    42ac:	36 d1       	rcall	.+620    	; 0x451a <strnlen>
    42ae:	2c 01       	movw	r4, r24
    42b0:	83 01       	movw	r16, r6
    42b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    42b4:	2f 77       	andi	r18, 0x7F	; 127
    42b6:	22 2e       	mov	r2, r18
    42b8:	16 c0       	rjmp	.+44     	; 0x42e6 <vfprintf+0x168>
    42ba:	38 01       	movw	r6, r16
    42bc:	f2 e0       	ldi	r31, 0x02	; 2
    42be:	6f 0e       	add	r6, r31
    42c0:	71 1c       	adc	r7, r1
    42c2:	f8 01       	movw	r30, r16
    42c4:	a0 80       	ld	r10, Z
    42c6:	b1 80       	ldd	r11, Z+1	; 0x01
    42c8:	26 ff       	sbrs	r18, 6
    42ca:	03 c0       	rjmp	.+6      	; 0x42d2 <vfprintf+0x154>
    42cc:	65 2d       	mov	r22, r5
    42ce:	70 e0       	ldi	r23, 0x00	; 0
    42d0:	02 c0       	rjmp	.+4      	; 0x42d6 <vfprintf+0x158>
    42d2:	6f ef       	ldi	r22, 0xFF	; 255
    42d4:	7f ef       	ldi	r23, 0xFF	; 255
    42d6:	c5 01       	movw	r24, r10
    42d8:	2c 87       	std	Y+12, r18	; 0x0c
    42da:	14 d1       	rcall	.+552    	; 0x4504 <strnlen_P>
    42dc:	2c 01       	movw	r4, r24
    42de:	2c 85       	ldd	r18, Y+12	; 0x0c
    42e0:	20 68       	ori	r18, 0x80	; 128
    42e2:	22 2e       	mov	r2, r18
    42e4:	83 01       	movw	r16, r6
    42e6:	23 fc       	sbrc	r2, 3
    42e8:	19 c0       	rjmp	.+50     	; 0x431c <vfprintf+0x19e>
    42ea:	83 2d       	mov	r24, r3
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	48 16       	cp	r4, r24
    42f0:	59 06       	cpc	r5, r25
    42f2:	a0 f4       	brcc	.+40     	; 0x431c <vfprintf+0x19e>
    42f4:	b7 01       	movw	r22, r14
    42f6:	80 e2       	ldi	r24, 0x20	; 32
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	1a d1       	rcall	.+564    	; 0x4530 <fputc>
    42fc:	3a 94       	dec	r3
    42fe:	f5 cf       	rjmp	.-22     	; 0x42ea <vfprintf+0x16c>
    4300:	f5 01       	movw	r30, r10
    4302:	27 fc       	sbrc	r2, 7
    4304:	85 91       	lpm	r24, Z+
    4306:	27 fe       	sbrs	r2, 7
    4308:	81 91       	ld	r24, Z+
    430a:	5f 01       	movw	r10, r30
    430c:	b7 01       	movw	r22, r14
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	0f d1       	rcall	.+542    	; 0x4530 <fputc>
    4312:	31 10       	cpse	r3, r1
    4314:	3a 94       	dec	r3
    4316:	f1 e0       	ldi	r31, 0x01	; 1
    4318:	4f 1a       	sub	r4, r31
    431a:	51 08       	sbc	r5, r1
    431c:	41 14       	cp	r4, r1
    431e:	51 04       	cpc	r5, r1
    4320:	79 f7       	brne	.-34     	; 0x4300 <vfprintf+0x182>
    4322:	de c0       	rjmp	.+444    	; 0x44e0 <vfprintf+0x362>
    4324:	84 36       	cpi	r24, 0x64	; 100
    4326:	11 f0       	breq	.+4      	; 0x432c <vfprintf+0x1ae>
    4328:	89 36       	cpi	r24, 0x69	; 105
    432a:	31 f5       	brne	.+76     	; 0x4378 <vfprintf+0x1fa>
    432c:	f8 01       	movw	r30, r16
    432e:	27 ff       	sbrs	r18, 7
    4330:	07 c0       	rjmp	.+14     	; 0x4340 <vfprintf+0x1c2>
    4332:	60 81       	ld	r22, Z
    4334:	71 81       	ldd	r23, Z+1	; 0x01
    4336:	82 81       	ldd	r24, Z+2	; 0x02
    4338:	93 81       	ldd	r25, Z+3	; 0x03
    433a:	0c 5f       	subi	r16, 0xFC	; 252
    433c:	1f 4f       	sbci	r17, 0xFF	; 255
    433e:	08 c0       	rjmp	.+16     	; 0x4350 <vfprintf+0x1d2>
    4340:	60 81       	ld	r22, Z
    4342:	71 81       	ldd	r23, Z+1	; 0x01
    4344:	88 27       	eor	r24, r24
    4346:	77 fd       	sbrc	r23, 7
    4348:	80 95       	com	r24
    434a:	98 2f       	mov	r25, r24
    434c:	0e 5f       	subi	r16, 0xFE	; 254
    434e:	1f 4f       	sbci	r17, 0xFF	; 255
    4350:	2f 76       	andi	r18, 0x6F	; 111
    4352:	b2 2e       	mov	r11, r18
    4354:	97 ff       	sbrs	r25, 7
    4356:	09 c0       	rjmp	.+18     	; 0x436a <vfprintf+0x1ec>
    4358:	90 95       	com	r25
    435a:	80 95       	com	r24
    435c:	70 95       	com	r23
    435e:	61 95       	neg	r22
    4360:	7f 4f       	sbci	r23, 0xFF	; 255
    4362:	8f 4f       	sbci	r24, 0xFF	; 255
    4364:	9f 4f       	sbci	r25, 0xFF	; 255
    4366:	20 68       	ori	r18, 0x80	; 128
    4368:	b2 2e       	mov	r11, r18
    436a:	2a e0       	ldi	r18, 0x0A	; 10
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	a4 01       	movw	r20, r8
    4370:	11 d1       	rcall	.+546    	; 0x4594 <__ultoa_invert>
    4372:	a8 2e       	mov	r10, r24
    4374:	a8 18       	sub	r10, r8
    4376:	43 c0       	rjmp	.+134    	; 0x43fe <vfprintf+0x280>
    4378:	85 37       	cpi	r24, 0x75	; 117
    437a:	29 f4       	brne	.+10     	; 0x4386 <vfprintf+0x208>
    437c:	2f 7e       	andi	r18, 0xEF	; 239
    437e:	b2 2e       	mov	r11, r18
    4380:	2a e0       	ldi	r18, 0x0A	; 10
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	25 c0       	rjmp	.+74     	; 0x43d0 <vfprintf+0x252>
    4386:	f2 2f       	mov	r31, r18
    4388:	f9 7f       	andi	r31, 0xF9	; 249
    438a:	bf 2e       	mov	r11, r31
    438c:	8f 36       	cpi	r24, 0x6F	; 111
    438e:	c1 f0       	breq	.+48     	; 0x43c0 <vfprintf+0x242>
    4390:	18 f4       	brcc	.+6      	; 0x4398 <vfprintf+0x21a>
    4392:	88 35       	cpi	r24, 0x58	; 88
    4394:	79 f0       	breq	.+30     	; 0x43b4 <vfprintf+0x236>
    4396:	ad c0       	rjmp	.+346    	; 0x44f2 <vfprintf+0x374>
    4398:	80 37       	cpi	r24, 0x70	; 112
    439a:	19 f0       	breq	.+6      	; 0x43a2 <vfprintf+0x224>
    439c:	88 37       	cpi	r24, 0x78	; 120
    439e:	21 f0       	breq	.+8      	; 0x43a8 <vfprintf+0x22a>
    43a0:	a8 c0       	rjmp	.+336    	; 0x44f2 <vfprintf+0x374>
    43a2:	2f 2f       	mov	r18, r31
    43a4:	20 61       	ori	r18, 0x10	; 16
    43a6:	b2 2e       	mov	r11, r18
    43a8:	b4 fe       	sbrs	r11, 4
    43aa:	0d c0       	rjmp	.+26     	; 0x43c6 <vfprintf+0x248>
    43ac:	8b 2d       	mov	r24, r11
    43ae:	84 60       	ori	r24, 0x04	; 4
    43b0:	b8 2e       	mov	r11, r24
    43b2:	09 c0       	rjmp	.+18     	; 0x43c6 <vfprintf+0x248>
    43b4:	24 ff       	sbrs	r18, 4
    43b6:	0a c0       	rjmp	.+20     	; 0x43cc <vfprintf+0x24e>
    43b8:	9f 2f       	mov	r25, r31
    43ba:	96 60       	ori	r25, 0x06	; 6
    43bc:	b9 2e       	mov	r11, r25
    43be:	06 c0       	rjmp	.+12     	; 0x43cc <vfprintf+0x24e>
    43c0:	28 e0       	ldi	r18, 0x08	; 8
    43c2:	30 e0       	ldi	r19, 0x00	; 0
    43c4:	05 c0       	rjmp	.+10     	; 0x43d0 <vfprintf+0x252>
    43c6:	20 e1       	ldi	r18, 0x10	; 16
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	02 c0       	rjmp	.+4      	; 0x43d0 <vfprintf+0x252>
    43cc:	20 e1       	ldi	r18, 0x10	; 16
    43ce:	32 e0       	ldi	r19, 0x02	; 2
    43d0:	f8 01       	movw	r30, r16
    43d2:	b7 fe       	sbrs	r11, 7
    43d4:	07 c0       	rjmp	.+14     	; 0x43e4 <vfprintf+0x266>
    43d6:	60 81       	ld	r22, Z
    43d8:	71 81       	ldd	r23, Z+1	; 0x01
    43da:	82 81       	ldd	r24, Z+2	; 0x02
    43dc:	93 81       	ldd	r25, Z+3	; 0x03
    43de:	0c 5f       	subi	r16, 0xFC	; 252
    43e0:	1f 4f       	sbci	r17, 0xFF	; 255
    43e2:	06 c0       	rjmp	.+12     	; 0x43f0 <vfprintf+0x272>
    43e4:	60 81       	ld	r22, Z
    43e6:	71 81       	ldd	r23, Z+1	; 0x01
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	0e 5f       	subi	r16, 0xFE	; 254
    43ee:	1f 4f       	sbci	r17, 0xFF	; 255
    43f0:	a4 01       	movw	r20, r8
    43f2:	d0 d0       	rcall	.+416    	; 0x4594 <__ultoa_invert>
    43f4:	a8 2e       	mov	r10, r24
    43f6:	a8 18       	sub	r10, r8
    43f8:	fb 2d       	mov	r31, r11
    43fa:	ff 77       	andi	r31, 0x7F	; 127
    43fc:	bf 2e       	mov	r11, r31
    43fe:	b6 fe       	sbrs	r11, 6
    4400:	0b c0       	rjmp	.+22     	; 0x4418 <vfprintf+0x29a>
    4402:	2b 2d       	mov	r18, r11
    4404:	2e 7f       	andi	r18, 0xFE	; 254
    4406:	a5 14       	cp	r10, r5
    4408:	50 f4       	brcc	.+20     	; 0x441e <vfprintf+0x2a0>
    440a:	b4 fe       	sbrs	r11, 4
    440c:	0a c0       	rjmp	.+20     	; 0x4422 <vfprintf+0x2a4>
    440e:	b2 fc       	sbrc	r11, 2
    4410:	08 c0       	rjmp	.+16     	; 0x4422 <vfprintf+0x2a4>
    4412:	2b 2d       	mov	r18, r11
    4414:	2e 7e       	andi	r18, 0xEE	; 238
    4416:	05 c0       	rjmp	.+10     	; 0x4422 <vfprintf+0x2a4>
    4418:	7a 2c       	mov	r7, r10
    441a:	2b 2d       	mov	r18, r11
    441c:	03 c0       	rjmp	.+6      	; 0x4424 <vfprintf+0x2a6>
    441e:	7a 2c       	mov	r7, r10
    4420:	01 c0       	rjmp	.+2      	; 0x4424 <vfprintf+0x2a6>
    4422:	75 2c       	mov	r7, r5
    4424:	24 ff       	sbrs	r18, 4
    4426:	0d c0       	rjmp	.+26     	; 0x4442 <vfprintf+0x2c4>
    4428:	fe 01       	movw	r30, r28
    442a:	ea 0d       	add	r30, r10
    442c:	f1 1d       	adc	r31, r1
    442e:	80 81       	ld	r24, Z
    4430:	80 33       	cpi	r24, 0x30	; 48
    4432:	11 f4       	brne	.+4      	; 0x4438 <vfprintf+0x2ba>
    4434:	29 7e       	andi	r18, 0xE9	; 233
    4436:	09 c0       	rjmp	.+18     	; 0x444a <vfprintf+0x2cc>
    4438:	22 ff       	sbrs	r18, 2
    443a:	06 c0       	rjmp	.+12     	; 0x4448 <vfprintf+0x2ca>
    443c:	73 94       	inc	r7
    443e:	73 94       	inc	r7
    4440:	04 c0       	rjmp	.+8      	; 0x444a <vfprintf+0x2cc>
    4442:	82 2f       	mov	r24, r18
    4444:	86 78       	andi	r24, 0x86	; 134
    4446:	09 f0       	breq	.+2      	; 0x444a <vfprintf+0x2cc>
    4448:	73 94       	inc	r7
    444a:	23 fd       	sbrc	r18, 3
    444c:	12 c0       	rjmp	.+36     	; 0x4472 <vfprintf+0x2f4>
    444e:	20 ff       	sbrs	r18, 0
    4450:	06 c0       	rjmp	.+12     	; 0x445e <vfprintf+0x2e0>
    4452:	5a 2c       	mov	r5, r10
    4454:	73 14       	cp	r7, r3
    4456:	18 f4       	brcc	.+6      	; 0x445e <vfprintf+0x2e0>
    4458:	53 0c       	add	r5, r3
    445a:	57 18       	sub	r5, r7
    445c:	73 2c       	mov	r7, r3
    445e:	73 14       	cp	r7, r3
    4460:	60 f4       	brcc	.+24     	; 0x447a <vfprintf+0x2fc>
    4462:	b7 01       	movw	r22, r14
    4464:	80 e2       	ldi	r24, 0x20	; 32
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	2c 87       	std	Y+12, r18	; 0x0c
    446a:	62 d0       	rcall	.+196    	; 0x4530 <fputc>
    446c:	73 94       	inc	r7
    446e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4470:	f6 cf       	rjmp	.-20     	; 0x445e <vfprintf+0x2e0>
    4472:	73 14       	cp	r7, r3
    4474:	10 f4       	brcc	.+4      	; 0x447a <vfprintf+0x2fc>
    4476:	37 18       	sub	r3, r7
    4478:	01 c0       	rjmp	.+2      	; 0x447c <vfprintf+0x2fe>
    447a:	31 2c       	mov	r3, r1
    447c:	24 ff       	sbrs	r18, 4
    447e:	11 c0       	rjmp	.+34     	; 0x44a2 <vfprintf+0x324>
    4480:	b7 01       	movw	r22, r14
    4482:	80 e3       	ldi	r24, 0x30	; 48
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	2c 87       	std	Y+12, r18	; 0x0c
    4488:	53 d0       	rcall	.+166    	; 0x4530 <fputc>
    448a:	2c 85       	ldd	r18, Y+12	; 0x0c
    448c:	22 ff       	sbrs	r18, 2
    448e:	16 c0       	rjmp	.+44     	; 0x44bc <vfprintf+0x33e>
    4490:	21 ff       	sbrs	r18, 1
    4492:	03 c0       	rjmp	.+6      	; 0x449a <vfprintf+0x31c>
    4494:	88 e5       	ldi	r24, 0x58	; 88
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	02 c0       	rjmp	.+4      	; 0x449e <vfprintf+0x320>
    449a:	88 e7       	ldi	r24, 0x78	; 120
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	b7 01       	movw	r22, r14
    44a0:	0c c0       	rjmp	.+24     	; 0x44ba <vfprintf+0x33c>
    44a2:	82 2f       	mov	r24, r18
    44a4:	86 78       	andi	r24, 0x86	; 134
    44a6:	51 f0       	breq	.+20     	; 0x44bc <vfprintf+0x33e>
    44a8:	21 fd       	sbrc	r18, 1
    44aa:	02 c0       	rjmp	.+4      	; 0x44b0 <vfprintf+0x332>
    44ac:	80 e2       	ldi	r24, 0x20	; 32
    44ae:	01 c0       	rjmp	.+2      	; 0x44b2 <vfprintf+0x334>
    44b0:	8b e2       	ldi	r24, 0x2B	; 43
    44b2:	27 fd       	sbrc	r18, 7
    44b4:	8d e2       	ldi	r24, 0x2D	; 45
    44b6:	b7 01       	movw	r22, r14
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	3a d0       	rcall	.+116    	; 0x4530 <fputc>
    44bc:	a5 14       	cp	r10, r5
    44be:	30 f4       	brcc	.+12     	; 0x44cc <vfprintf+0x34e>
    44c0:	b7 01       	movw	r22, r14
    44c2:	80 e3       	ldi	r24, 0x30	; 48
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	34 d0       	rcall	.+104    	; 0x4530 <fputc>
    44c8:	5a 94       	dec	r5
    44ca:	f8 cf       	rjmp	.-16     	; 0x44bc <vfprintf+0x33e>
    44cc:	aa 94       	dec	r10
    44ce:	f4 01       	movw	r30, r8
    44d0:	ea 0d       	add	r30, r10
    44d2:	f1 1d       	adc	r31, r1
    44d4:	80 81       	ld	r24, Z
    44d6:	b7 01       	movw	r22, r14
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	2a d0       	rcall	.+84     	; 0x4530 <fputc>
    44dc:	a1 10       	cpse	r10, r1
    44de:	f6 cf       	rjmp	.-20     	; 0x44cc <vfprintf+0x34e>
    44e0:	33 20       	and	r3, r3
    44e2:	09 f4       	brne	.+2      	; 0x44e6 <vfprintf+0x368>
    44e4:	5d ce       	rjmp	.-838    	; 0x41a0 <vfprintf+0x22>
    44e6:	b7 01       	movw	r22, r14
    44e8:	80 e2       	ldi	r24, 0x20	; 32
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	21 d0       	rcall	.+66     	; 0x4530 <fputc>
    44ee:	3a 94       	dec	r3
    44f0:	f7 cf       	rjmp	.-18     	; 0x44e0 <vfprintf+0x362>
    44f2:	f7 01       	movw	r30, r14
    44f4:	86 81       	ldd	r24, Z+6	; 0x06
    44f6:	97 81       	ldd	r25, Z+7	; 0x07
    44f8:	02 c0       	rjmp	.+4      	; 0x44fe <vfprintf+0x380>
    44fa:	8f ef       	ldi	r24, 0xFF	; 255
    44fc:	9f ef       	ldi	r25, 0xFF	; 255
    44fe:	2c 96       	adiw	r28, 0x0c	; 12
    4500:	e2 e1       	ldi	r30, 0x12	; 18
    4502:	bf c0       	rjmp	.+382    	; 0x4682 <__epilogue_restores__>

00004504 <strnlen_P>:
    4504:	fc 01       	movw	r30, r24
    4506:	05 90       	lpm	r0, Z+
    4508:	61 50       	subi	r22, 0x01	; 1
    450a:	70 40       	sbci	r23, 0x00	; 0
    450c:	01 10       	cpse	r0, r1
    450e:	d8 f7       	brcc	.-10     	; 0x4506 <strnlen_P+0x2>
    4510:	80 95       	com	r24
    4512:	90 95       	com	r25
    4514:	8e 0f       	add	r24, r30
    4516:	9f 1f       	adc	r25, r31
    4518:	08 95       	ret

0000451a <strnlen>:
    451a:	fc 01       	movw	r30, r24
    451c:	61 50       	subi	r22, 0x01	; 1
    451e:	70 40       	sbci	r23, 0x00	; 0
    4520:	01 90       	ld	r0, Z+
    4522:	01 10       	cpse	r0, r1
    4524:	d8 f7       	brcc	.-10     	; 0x451c <strnlen+0x2>
    4526:	80 95       	com	r24
    4528:	90 95       	com	r25
    452a:	8e 0f       	add	r24, r30
    452c:	9f 1f       	adc	r25, r31
    452e:	08 95       	ret

00004530 <fputc>:
    4530:	0f 93       	push	r16
    4532:	1f 93       	push	r17
    4534:	cf 93       	push	r28
    4536:	df 93       	push	r29
    4538:	18 2f       	mov	r17, r24
    453a:	09 2f       	mov	r16, r25
    453c:	eb 01       	movw	r28, r22
    453e:	8b 81       	ldd	r24, Y+3	; 0x03
    4540:	81 fd       	sbrc	r24, 1
    4542:	03 c0       	rjmp	.+6      	; 0x454a <fputc+0x1a>
    4544:	8f ef       	ldi	r24, 0xFF	; 255
    4546:	9f ef       	ldi	r25, 0xFF	; 255
    4548:	20 c0       	rjmp	.+64     	; 0x458a <fputc+0x5a>
    454a:	82 ff       	sbrs	r24, 2
    454c:	10 c0       	rjmp	.+32     	; 0x456e <fputc+0x3e>
    454e:	4e 81       	ldd	r20, Y+6	; 0x06
    4550:	5f 81       	ldd	r21, Y+7	; 0x07
    4552:	2c 81       	ldd	r18, Y+4	; 0x04
    4554:	3d 81       	ldd	r19, Y+5	; 0x05
    4556:	42 17       	cp	r20, r18
    4558:	53 07       	cpc	r21, r19
    455a:	7c f4       	brge	.+30     	; 0x457a <fputc+0x4a>
    455c:	e8 81       	ld	r30, Y
    455e:	f9 81       	ldd	r31, Y+1	; 0x01
    4560:	9f 01       	movw	r18, r30
    4562:	2f 5f       	subi	r18, 0xFF	; 255
    4564:	3f 4f       	sbci	r19, 0xFF	; 255
    4566:	28 83       	st	Y, r18
    4568:	39 83       	std	Y+1, r19	; 0x01
    456a:	10 83       	st	Z, r17
    456c:	06 c0       	rjmp	.+12     	; 0x457a <fputc+0x4a>
    456e:	e8 85       	ldd	r30, Y+8	; 0x08
    4570:	f9 85       	ldd	r31, Y+9	; 0x09
    4572:	81 2f       	mov	r24, r17
    4574:	09 95       	icall
    4576:	89 2b       	or	r24, r25
    4578:	29 f7       	brne	.-54     	; 0x4544 <fputc+0x14>
    457a:	2e 81       	ldd	r18, Y+6	; 0x06
    457c:	3f 81       	ldd	r19, Y+7	; 0x07
    457e:	2f 5f       	subi	r18, 0xFF	; 255
    4580:	3f 4f       	sbci	r19, 0xFF	; 255
    4582:	2e 83       	std	Y+6, r18	; 0x06
    4584:	3f 83       	std	Y+7, r19	; 0x07
    4586:	81 2f       	mov	r24, r17
    4588:	90 2f       	mov	r25, r16
    458a:	df 91       	pop	r29
    458c:	cf 91       	pop	r28
    458e:	1f 91       	pop	r17
    4590:	0f 91       	pop	r16
    4592:	08 95       	ret

00004594 <__ultoa_invert>:
    4594:	fa 01       	movw	r30, r20
    4596:	aa 27       	eor	r26, r26
    4598:	28 30       	cpi	r18, 0x08	; 8
    459a:	51 f1       	breq	.+84     	; 0x45f0 <__ultoa_invert+0x5c>
    459c:	20 31       	cpi	r18, 0x10	; 16
    459e:	81 f1       	breq	.+96     	; 0x4600 <__ultoa_invert+0x6c>
    45a0:	e8 94       	clt
    45a2:	6f 93       	push	r22
    45a4:	6e 7f       	andi	r22, 0xFE	; 254
    45a6:	6e 5f       	subi	r22, 0xFE	; 254
    45a8:	7f 4f       	sbci	r23, 0xFF	; 255
    45aa:	8f 4f       	sbci	r24, 0xFF	; 255
    45ac:	9f 4f       	sbci	r25, 0xFF	; 255
    45ae:	af 4f       	sbci	r26, 0xFF	; 255
    45b0:	b1 e0       	ldi	r27, 0x01	; 1
    45b2:	3e d0       	rcall	.+124    	; 0x4630 <__ultoa_invert+0x9c>
    45b4:	b4 e0       	ldi	r27, 0x04	; 4
    45b6:	3c d0       	rcall	.+120    	; 0x4630 <__ultoa_invert+0x9c>
    45b8:	67 0f       	add	r22, r23
    45ba:	78 1f       	adc	r23, r24
    45bc:	89 1f       	adc	r24, r25
    45be:	9a 1f       	adc	r25, r26
    45c0:	a1 1d       	adc	r26, r1
    45c2:	68 0f       	add	r22, r24
    45c4:	79 1f       	adc	r23, r25
    45c6:	8a 1f       	adc	r24, r26
    45c8:	91 1d       	adc	r25, r1
    45ca:	a1 1d       	adc	r26, r1
    45cc:	6a 0f       	add	r22, r26
    45ce:	71 1d       	adc	r23, r1
    45d0:	81 1d       	adc	r24, r1
    45d2:	91 1d       	adc	r25, r1
    45d4:	a1 1d       	adc	r26, r1
    45d6:	20 d0       	rcall	.+64     	; 0x4618 <__ultoa_invert+0x84>
    45d8:	09 f4       	brne	.+2      	; 0x45dc <__ultoa_invert+0x48>
    45da:	68 94       	set
    45dc:	3f 91       	pop	r19
    45de:	2a e0       	ldi	r18, 0x0A	; 10
    45e0:	26 9f       	mul	r18, r22
    45e2:	11 24       	eor	r1, r1
    45e4:	30 19       	sub	r19, r0
    45e6:	30 5d       	subi	r19, 0xD0	; 208
    45e8:	31 93       	st	Z+, r19
    45ea:	de f6       	brtc	.-74     	; 0x45a2 <__ultoa_invert+0xe>
    45ec:	cf 01       	movw	r24, r30
    45ee:	08 95       	ret
    45f0:	46 2f       	mov	r20, r22
    45f2:	47 70       	andi	r20, 0x07	; 7
    45f4:	40 5d       	subi	r20, 0xD0	; 208
    45f6:	41 93       	st	Z+, r20
    45f8:	b3 e0       	ldi	r27, 0x03	; 3
    45fa:	0f d0       	rcall	.+30     	; 0x461a <__ultoa_invert+0x86>
    45fc:	c9 f7       	brne	.-14     	; 0x45f0 <__ultoa_invert+0x5c>
    45fe:	f6 cf       	rjmp	.-20     	; 0x45ec <__ultoa_invert+0x58>
    4600:	46 2f       	mov	r20, r22
    4602:	4f 70       	andi	r20, 0x0F	; 15
    4604:	40 5d       	subi	r20, 0xD0	; 208
    4606:	4a 33       	cpi	r20, 0x3A	; 58
    4608:	18 f0       	brcs	.+6      	; 0x4610 <__ultoa_invert+0x7c>
    460a:	49 5d       	subi	r20, 0xD9	; 217
    460c:	31 fd       	sbrc	r19, 1
    460e:	40 52       	subi	r20, 0x20	; 32
    4610:	41 93       	st	Z+, r20
    4612:	02 d0       	rcall	.+4      	; 0x4618 <__ultoa_invert+0x84>
    4614:	a9 f7       	brne	.-22     	; 0x4600 <__ultoa_invert+0x6c>
    4616:	ea cf       	rjmp	.-44     	; 0x45ec <__ultoa_invert+0x58>
    4618:	b4 e0       	ldi	r27, 0x04	; 4
    461a:	a6 95       	lsr	r26
    461c:	97 95       	ror	r25
    461e:	87 95       	ror	r24
    4620:	77 95       	ror	r23
    4622:	67 95       	ror	r22
    4624:	ba 95       	dec	r27
    4626:	c9 f7       	brne	.-14     	; 0x461a <__ultoa_invert+0x86>
    4628:	00 97       	sbiw	r24, 0x00	; 0
    462a:	61 05       	cpc	r22, r1
    462c:	71 05       	cpc	r23, r1
    462e:	08 95       	ret
    4630:	9b 01       	movw	r18, r22
    4632:	ac 01       	movw	r20, r24
    4634:	0a 2e       	mov	r0, r26
    4636:	06 94       	lsr	r0
    4638:	57 95       	ror	r21
    463a:	47 95       	ror	r20
    463c:	37 95       	ror	r19
    463e:	27 95       	ror	r18
    4640:	ba 95       	dec	r27
    4642:	c9 f7       	brne	.-14     	; 0x4636 <__ultoa_invert+0xa2>
    4644:	62 0f       	add	r22, r18
    4646:	73 1f       	adc	r23, r19
    4648:	84 1f       	adc	r24, r20
    464a:	95 1f       	adc	r25, r21
    464c:	a0 1d       	adc	r26, r0
    464e:	08 95       	ret

00004650 <__prologue_saves__>:
    4650:	2f 92       	push	r2
    4652:	3f 92       	push	r3
    4654:	4f 92       	push	r4
    4656:	5f 92       	push	r5
    4658:	6f 92       	push	r6
    465a:	7f 92       	push	r7
    465c:	8f 92       	push	r8
    465e:	9f 92       	push	r9
    4660:	af 92       	push	r10
    4662:	bf 92       	push	r11
    4664:	cf 92       	push	r12
    4666:	df 92       	push	r13
    4668:	ef 92       	push	r14
    466a:	ff 92       	push	r15
    466c:	0f 93       	push	r16
    466e:	1f 93       	push	r17
    4670:	cf 93       	push	r28
    4672:	df 93       	push	r29
    4674:	cd b7       	in	r28, 0x3d	; 61
    4676:	de b7       	in	r29, 0x3e	; 62
    4678:	ca 1b       	sub	r28, r26
    467a:	db 0b       	sbc	r29, r27
    467c:	cd bf       	out	0x3d, r28	; 61
    467e:	de bf       	out	0x3e, r29	; 62
    4680:	09 94       	ijmp

00004682 <__epilogue_restores__>:
    4682:	2a 88       	ldd	r2, Y+18	; 0x12
    4684:	39 88       	ldd	r3, Y+17	; 0x11
    4686:	48 88       	ldd	r4, Y+16	; 0x10
    4688:	5f 84       	ldd	r5, Y+15	; 0x0f
    468a:	6e 84       	ldd	r6, Y+14	; 0x0e
    468c:	7d 84       	ldd	r7, Y+13	; 0x0d
    468e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4690:	9b 84       	ldd	r9, Y+11	; 0x0b
    4692:	aa 84       	ldd	r10, Y+10	; 0x0a
    4694:	b9 84       	ldd	r11, Y+9	; 0x09
    4696:	c8 84       	ldd	r12, Y+8	; 0x08
    4698:	df 80       	ldd	r13, Y+7	; 0x07
    469a:	ee 80       	ldd	r14, Y+6	; 0x06
    469c:	fd 80       	ldd	r15, Y+5	; 0x05
    469e:	0c 81       	ldd	r16, Y+4	; 0x04
    46a0:	1b 81       	ldd	r17, Y+3	; 0x03
    46a2:	aa 81       	ldd	r26, Y+2	; 0x02
    46a4:	b9 81       	ldd	r27, Y+1	; 0x01
    46a6:	ce 0f       	add	r28, r30
    46a8:	d1 1d       	adc	r29, r1
    46aa:	cd bf       	out	0x3d, r28	; 61
    46ac:	de bf       	out	0x3e, r29	; 62
    46ae:	ed 01       	movw	r28, r26
    46b0:	08 95       	ret

000046b2 <_exit>:
    46b2:	f8 94       	cli

000046b4 <__stop_program>:
    46b4:	ff cf       	rjmp	.-2      	; 0x46b4 <__stop_program>
