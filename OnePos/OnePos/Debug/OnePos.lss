
OnePos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005b1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005e0  00802000  00005b1c  00005bb0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000317  008025e0  008025e0  00006190  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006190  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000af8  00000000  00000000  000061f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000175b5  00000000  00000000  00006ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003c3d  00000000  00000000  0001e29d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00010e99  00000000  00000000  00021eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000022a4  00000000  00000000  00032d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0003843d  00000000  00000000  00035018  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b275  00000000  00000000  0006d455  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ae0  00000000  00000000  000786d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008901  00000000  00000000  000791b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	21 c1       	rjmp	.+578    	; 0x244 <__ctors_end>
       2:	00 00       	nop
       4:	3c c1       	rjmp	.+632    	; 0x27e <__bad_interrupt>
       6:	00 00       	nop
       8:	3a c1       	rjmp	.+628    	; 0x27e <__bad_interrupt>
       a:	00 00       	nop
       c:	38 c1       	rjmp	.+624    	; 0x27e <__bad_interrupt>
       e:	00 00       	nop
      10:	36 c1       	rjmp	.+620    	; 0x27e <__bad_interrupt>
      12:	00 00       	nop
      14:	34 c1       	rjmp	.+616    	; 0x27e <__bad_interrupt>
      16:	00 00       	nop
      18:	32 c1       	rjmp	.+612    	; 0x27e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	30 c1       	rjmp	.+608    	; 0x27e <__bad_interrupt>
      1e:	00 00       	nop
      20:	2e c1       	rjmp	.+604    	; 0x27e <__bad_interrupt>
      22:	00 00       	nop
      24:	2c c1       	rjmp	.+600    	; 0x27e <__bad_interrupt>
      26:	00 00       	nop
      28:	2a c1       	rjmp	.+596    	; 0x27e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	28 c1       	rjmp	.+592    	; 0x27e <__bad_interrupt>
      2e:	00 00       	nop
      30:	26 c1       	rjmp	.+588    	; 0x27e <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_13>
      38:	22 c1       	rjmp	.+580    	; 0x27e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c1       	rjmp	.+576    	; 0x27e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1e c1       	rjmp	.+572    	; 0x27e <__bad_interrupt>
      42:	00 00       	nop
      44:	1c c1       	rjmp	.+568    	; 0x27e <__bad_interrupt>
      46:	00 00       	nop
      48:	1a c1       	rjmp	.+564    	; 0x27e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	18 c1       	rjmp	.+560    	; 0x27e <__bad_interrupt>
      4e:	00 00       	nop
      50:	16 c1       	rjmp	.+556    	; 0x27e <__bad_interrupt>
      52:	00 00       	nop
      54:	14 c1       	rjmp	.+552    	; 0x27e <__bad_interrupt>
      56:	00 00       	nop
      58:	12 c1       	rjmp	.+548    	; 0x27e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	10 c1       	rjmp	.+544    	; 0x27e <__bad_interrupt>
      5e:	00 00       	nop
      60:	0e c1       	rjmp	.+540    	; 0x27e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c c1       	rjmp	.+536    	; 0x27e <__bad_interrupt>
      66:	00 00       	nop
      68:	0a c1       	rjmp	.+532    	; 0x27e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	08 c1       	rjmp	.+528    	; 0x27e <__bad_interrupt>
      6e:	00 00       	nop
      70:	06 c1       	rjmp	.+524    	; 0x27e <__bad_interrupt>
      72:	00 00       	nop
      74:	04 c1       	rjmp	.+520    	; 0x27e <__bad_interrupt>
      76:	00 00       	nop
      78:	02 c1       	rjmp	.+516    	; 0x27e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	00 c1       	rjmp	.+512    	; 0x27e <__bad_interrupt>
      7e:	00 00       	nop
      80:	fe c0       	rjmp	.+508    	; 0x27e <__bad_interrupt>
      82:	00 00       	nop
      84:	fc c0       	rjmp	.+504    	; 0x27e <__bad_interrupt>
      86:	00 00       	nop
      88:	fa c0       	rjmp	.+500    	; 0x27e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f8 c0       	rjmp	.+496    	; 0x27e <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c0       	rjmp	.+492    	; 0x27e <__bad_interrupt>
      92:	00 00       	nop
      94:	f4 c0       	rjmp	.+488    	; 0x27e <__bad_interrupt>
      96:	00 00       	nop
      98:	f2 c0       	rjmp	.+484    	; 0x27e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f0 c0       	rjmp	.+480    	; 0x27e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ee c0       	rjmp	.+476    	; 0x27e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ec c0       	rjmp	.+472    	; 0x27e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ea c0       	rjmp	.+468    	; 0x27e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e8 c0       	rjmp	.+464    	; 0x27e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e6 c0       	rjmp	.+460    	; 0x27e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e4 c0       	rjmp	.+456    	; 0x27e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_46>
      bc:	e0 c0       	rjmp	.+448    	; 0x27e <__bad_interrupt>
      be:	00 00       	nop
      c0:	de c0       	rjmp	.+444    	; 0x27e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	dc c0       	rjmp	.+440    	; 0x27e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	da c0       	rjmp	.+436    	; 0x27e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d8 c0       	rjmp	.+432    	; 0x27e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d6 c0       	rjmp	.+428    	; 0x27e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d4 c0       	rjmp	.+424    	; 0x27e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d2 c0       	rjmp	.+420    	; 0x27e <__bad_interrupt>
      da:	00 00       	nop
      dc:	d0 c0       	rjmp	.+416    	; 0x27e <__bad_interrupt>
      de:	00 00       	nop
      e0:	ce c0       	rjmp	.+412    	; 0x27e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	cc c0       	rjmp	.+408    	; 0x27e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ca c0       	rjmp	.+404    	; 0x27e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c8 c0       	rjmp	.+400    	; 0x27e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c6 c0       	rjmp	.+396    	; 0x27e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c4 c0       	rjmp	.+392    	; 0x27e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c2 c0       	rjmp	.+388    	; 0x27e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c0 c0       	rjmp	.+384    	; 0x27e <__bad_interrupt>
      fe:	00 00       	nop
     100:	be c0       	rjmp	.+380    	; 0x27e <__bad_interrupt>
     102:	00 00       	nop
     104:	bc c0       	rjmp	.+376    	; 0x27e <__bad_interrupt>
     106:	00 00       	nop
     108:	ba c0       	rjmp	.+372    	; 0x27e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b8 c0       	rjmp	.+368    	; 0x27e <__bad_interrupt>
     10e:	00 00       	nop
     110:	b6 c0       	rjmp	.+364    	; 0x27e <__bad_interrupt>
     112:	00 00       	nop
     114:	b4 c0       	rjmp	.+360    	; 0x27e <__bad_interrupt>
     116:	00 00       	nop
     118:	b2 c0       	rjmp	.+356    	; 0x27e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b0 c0       	rjmp	.+352    	; 0x27e <__bad_interrupt>
     11e:	00 00       	nop
     120:	ae c0       	rjmp	.+348    	; 0x27e <__bad_interrupt>
     122:	00 00       	nop
     124:	ac c0       	rjmp	.+344    	; 0x27e <__bad_interrupt>
     126:	00 00       	nop
     128:	aa c0       	rjmp	.+340    	; 0x27e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a8 c0       	rjmp	.+336    	; 0x27e <__bad_interrupt>
     12e:	00 00       	nop
     130:	a6 c0       	rjmp	.+332    	; 0x27e <__bad_interrupt>
     132:	00 00       	nop
     134:	a4 c0       	rjmp	.+328    	; 0x27e <__bad_interrupt>
     136:	00 00       	nop
     138:	a2 c0       	rjmp	.+324    	; 0x27e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a0 c0       	rjmp	.+320    	; 0x27e <__bad_interrupt>
     13e:	00 00       	nop
     140:	9e c0       	rjmp	.+316    	; 0x27e <__bad_interrupt>
     142:	00 00       	nop
     144:	9c c0       	rjmp	.+312    	; 0x27e <__bad_interrupt>
     146:	00 00       	nop
     148:	9a c0       	rjmp	.+308    	; 0x27e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	98 c0       	rjmp	.+304    	; 0x27e <__bad_interrupt>
     14e:	00 00       	nop
     150:	96 c0       	rjmp	.+300    	; 0x27e <__bad_interrupt>
     152:	00 00       	nop
     154:	94 c0       	rjmp	.+296    	; 0x27e <__bad_interrupt>
     156:	00 00       	nop
     158:	92 c0       	rjmp	.+292    	; 0x27e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	90 c0       	rjmp	.+288    	; 0x27e <__bad_interrupt>
     15e:	00 00       	nop
     160:	8e c0       	rjmp	.+284    	; 0x27e <__bad_interrupt>
     162:	00 00       	nop
     164:	8c c0       	rjmp	.+280    	; 0x27e <__bad_interrupt>
     166:	00 00       	nop
     168:	8a c0       	rjmp	.+276    	; 0x27e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	88 c0       	rjmp	.+272    	; 0x27e <__bad_interrupt>
     16e:	00 00       	nop
     170:	86 c0       	rjmp	.+268    	; 0x27e <__bad_interrupt>
     172:	00 00       	nop
     174:	84 c0       	rjmp	.+264    	; 0x27e <__bad_interrupt>
     176:	00 00       	nop
     178:	82 c0       	rjmp	.+260    	; 0x27e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	80 c0       	rjmp	.+256    	; 0x27e <__bad_interrupt>
     17e:	00 00       	nop
     180:	7e c0       	rjmp	.+252    	; 0x27e <__bad_interrupt>
     182:	00 00       	nop
     184:	7c c0       	rjmp	.+248    	; 0x27e <__bad_interrupt>
     186:	00 00       	nop
     188:	7a c0       	rjmp	.+244    	; 0x27e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	78 c0       	rjmp	.+240    	; 0x27e <__bad_interrupt>
     18e:	00 00       	nop
     190:	76 c0       	rjmp	.+236    	; 0x27e <__bad_interrupt>
     192:	00 00       	nop
     194:	74 c0       	rjmp	.+232    	; 0x27e <__bad_interrupt>
     196:	00 00       	nop
     198:	72 c0       	rjmp	.+228    	; 0x27e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	70 c0       	rjmp	.+224    	; 0x27e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	6e c0       	rjmp	.+220    	; 0x27e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6c c0       	rjmp	.+216    	; 0x27e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6a c0       	rjmp	.+212    	; 0x27e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	68 c0       	rjmp	.+208    	; 0x27e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	66 c0       	rjmp	.+204    	; 0x27e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	62 c0       	rjmp	.+196    	; 0x27e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	60 c0       	rjmp	.+192    	; 0x27e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	5e c0       	rjmp	.+188    	; 0x27e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5c c0       	rjmp	.+184    	; 0x27e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5a c0       	rjmp	.+180    	; 0x27e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	58 c0       	rjmp	.+176    	; 0x27e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	56 c0       	rjmp	.+172    	; 0x27e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	54 c0       	rjmp	.+168    	; 0x27e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	52 c0       	rjmp	.+164    	; 0x27e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	50 c0       	rjmp	.+160    	; 0x27e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	4e c0       	rjmp	.+156    	; 0x27e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4c c0       	rjmp	.+152    	; 0x27e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4a c0       	rjmp	.+148    	; 0x27e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	48 c0       	rjmp	.+144    	; 0x27e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	46 c0       	rjmp	.+140    	; 0x27e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__vector_125>
     1f8:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__vector_126>
     1fc:	dc 0c       	add	r13, r12
     1fe:	ca 0c       	add	r12, r10
     200:	cd 0c       	add	r12, r13
     202:	d0 0c       	add	r13, r0
     204:	d3 0c       	add	r13, r3
     206:	d6 0c       	add	r13, r6
     208:	d9 0c       	add	r13, r9
     20a:	86 18       	sub	r8, r6
     20c:	81 18       	sub	r8, r1
     20e:	8b 18       	sub	r8, r11
     210:	b0 18       	sub	r11, r0
     212:	b0 18       	sub	r11, r0
     214:	b0 18       	sub	r11, r0
     216:	b0 18       	sub	r11, r0
     218:	90 18       	sub	r9, r0
     21a:	98 18       	sub	r9, r8
     21c:	b0 18       	sub	r11, r0
     21e:	b0 18       	sub	r11, r0
     220:	9f 18       	sub	r9, r15
     222:	a3 18       	sub	r10, r3
     224:	a7 18       	sub	r10, r7
     226:	ac 18       	sub	r10, r12
     228:	85 23       	and	r24, r21
     22a:	ca 22       	and	r12, r26
     22c:	d9 22       	and	r13, r25
     22e:	fa 22       	and	r15, r26
     230:	16 23       	and	r17, r22
     232:	2b 23       	and	r18, r27
     234:	47 23       	and	r20, r23
     236:	66 23       	and	r22, r22

00000238 <__trampolines_end>:
     238:	63 64       	ori	r22, 0x43	; 67
     23a:	69 6e       	ori	r22, 0xE9	; 233
     23c:	6f 70       	andi	r22, 0x0F	; 15
     23e:	73 75       	andi	r23, 0x53	; 83
     240:	78 58       	subi	r23, 0x88	; 136
     242:	5b 00       	.word	0x005b	; ????

00000244 <__ctors_end>:
     244:	11 24       	eor	r1, r1
     246:	1f be       	out	0x3f, r1	; 63
     248:	cf ef       	ldi	r28, 0xFF	; 255
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	df e2       	ldi	r29, 0x2F	; 47
     24e:	de bf       	out	0x3e, r29	; 62

00000250 <__do_copy_data>:
     250:	15 e2       	ldi	r17, 0x25	; 37
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b0 e2       	ldi	r27, 0x20	; 32
     256:	ec e1       	ldi	r30, 0x1C	; 28
     258:	fb e5       	ldi	r31, 0x5B	; 91
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x10>
     25c:	05 90       	lpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	a0 3e       	cpi	r26, 0xE0	; 224
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0xc>

00000266 <__do_clear_bss>:
     266:	28 e2       	ldi	r18, 0x28	; 40
     268:	a0 ee       	ldi	r26, 0xE0	; 224
     26a:	b5 e2       	ldi	r27, 0x25	; 37
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	a7 3f       	cpi	r26, 0xF7	; 247
     272:	b2 07       	cpc	r27, r18
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <main>
     27a:	0c 94 8c 2d 	jmp	0x5b18	; 0x5b18 <_exit>

0000027e <__bad_interrupt>:
     27e:	c0 ce       	rjmp	.-640    	; 0x0 <__vectors>

00000280 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     286:	c0 3c       	cpi	r28, 0xC0	; 192
     288:	28 e0       	ldi	r18, 0x08	; 8
     28a:	d2 07       	cpc	r29, r18
     28c:	29 f4       	brne	.+10     	; 0x298 <spi_master_init+0x18>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     28e:	68 e0       	ldi	r22, 0x08	; 8
     290:	83 e0       	ldi	r24, 0x03	; 3
     292:	0e 94 b5 12 	call	0x256a	; 0x256a <sysclk_enable_module>
     296:	07 c0       	rjmp	.+14     	; 0x2a6 <spi_master_init+0x26>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     298:	80 3c       	cpi	r24, 0xC0	; 192
     29a:	99 40       	sbci	r25, 0x09	; 9
     29c:	21 f4       	brne	.+8      	; 0x2a6 <spi_master_init+0x26>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     29e:	68 e0       	ldi	r22, 0x08	; 8
     2a0:	84 e0       	ldi	r24, 0x04	; 4
     2a2:	0e 94 b5 12 	call	0x256a	; 0x256a <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
     2a6:	88 81       	ld	r24, Y
     2a8:	80 61       	ori	r24, 0x10	; 16
     2aa:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	ec 01       	movw	r28, r24
     2be:	f4 2e       	mov	r15, r20
     2c0:	b9 01       	movw	r22, r18
     2c2:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     2c4:	00 e0       	ldi	r16, 0x00	; 0
     2c6:	1c e6       	ldi	r17, 0x6C	; 108
     2c8:	2c ed       	ldi	r18, 0xDC	; 220
     2ca:	32 e0       	ldi	r19, 0x02	; 2
     2cc:	56 d7       	rcall	.+3756   	; 0x117a <spi_xmega_set_baud_div>
     2ce:	88 23       	and	r24, r24
     2d0:	4c f0       	brlt	.+18     	; 0x2e4 <spi_master_setup_device+0x32>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     2d2:	88 81       	ld	r24, Y
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     2d4:	9f 2d       	mov	r25, r15
     2d6:	99 0f       	add	r25, r25
     2d8:	99 0f       	add	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     2da:	9c 70       	andi	r25, 0x0C	; 12
     2dc:	83 7f       	andi	r24, 0xF3	; 243
     2de:	f9 2e       	mov	r15, r25
     2e0:	f8 2a       	or	r15, r24
     2e2:	f8 82       	st	Y, r15
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	08 95       	ret

000002f0 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     2f0:	fc 01       	movw	r30, r24
     2f2:	db 01       	movw	r26, r22
     2f4:	46 0f       	add	r20, r22
     2f6:	57 1f       	adc	r21, r23
	while (len--) {
     2f8:	05 c0       	rjmp	.+10     	; 0x304 <spi_write_packet+0x14>
		spi_write_single(spi, *data++);
     2fa:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     2fc:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     2fe:	82 81       	ldd	r24, Z+2	; 0x02
		
		while (!spi_is_rx_full(spi)) {
     300:	88 23       	and	r24, r24
     302:	ec f7       	brge	.-6      	; 0x2fe <spi_write_packet+0xe>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
     304:	a4 17       	cp	r26, r20
     306:	b5 07       	cpc	r27, r21
     308:	c1 f7       	brne	.-16     	; 0x2fa <spi_write_packet+0xa>
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	08 95       	ret

0000030e <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
     30e:	fc 01       	movw	r30, r24
     310:	db 01       	movw	r26, r22
	while (len--) {
     312:	41 15       	cp	r20, r1
     314:	51 05       	cpc	r21, r1
     316:	61 f0       	breq	.+24     	; 0x330 <spi_read_packet+0x22>
     318:	46 0f       	add	r20, r22
     31a:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     31c:	9f ef       	ldi	r25, 0xFF	; 255
     31e:	93 83       	std	Z+3, r25	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     320:	82 81       	ldd	r24, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
     322:	88 23       	and	r24, r24
     324:	ec f7       	brge	.-6      	; 0x320 <spi_read_packet+0x12>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
     326:	83 81       	ldd	r24, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
     328:	8d 93       	st	X+, r24
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
     32a:	a4 17       	cp	r26, r20
     32c:	b5 07       	cpc	r27, r21
     32e:	b9 f7       	brne	.-18     	; 0x31e <spi_read_packet+0x10>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	08 95       	ret

00000334 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_level(device->id,0);
     334:	fb 01       	movw	r30, r22
     336:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     338:	e8 2f       	mov	r30, r24
     33a:	e6 95       	lsr	r30
     33c:	e6 95       	lsr	r30
     33e:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     340:	40 e2       	ldi	r20, 0x20	; 32
     342:	e4 9f       	mul	r30, r20
     344:	f0 01       	movw	r30, r0
     346:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     348:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     34a:	87 70       	andi	r24, 0x07	; 7
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	a9 01       	movw	r20, r18
     352:	02 c0       	rjmp	.+4      	; 0x358 <spi_select_device+0x24>
     354:	44 0f       	add	r20, r20
     356:	55 1f       	adc	r21, r21
     358:	8a 95       	dec	r24
     35a:	e2 f7       	brpl	.-8      	; 0x354 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     35c:	46 83       	std	Z+6, r20	; 0x06
     35e:	08 95       	ret

00000360 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_level(device->id,1);
     360:	fb 01       	movw	r30, r22
     362:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     364:	e8 2f       	mov	r30, r24
     366:	e6 95       	lsr	r30
     368:	e6 95       	lsr	r30
     36a:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     36c:	40 e2       	ldi	r20, 0x20	; 32
     36e:	e4 9f       	mul	r30, r20
     370:	f0 01       	movw	r30, r0
     372:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     374:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     376:	87 70       	andi	r24, 0x07	; 7
     378:	21 e0       	ldi	r18, 0x01	; 1
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	a9 01       	movw	r20, r18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <spi_deselect_device+0x24>
     380:	44 0f       	add	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	8a 95       	dec	r24
     386:	e2 f7       	brpl	.-8      	; 0x380 <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     388:	45 83       	std	Z+5, r20	; 0x05
     38a:	08 95       	ret

0000038c <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     38c:	10 92 f6 26 	sts	0x26F6, r1
     390:	10 92 02 27 	sts	0x2702, r1
     394:	10 92 03 27 	sts	0x2703, r1
     398:	81 ea       	ldi	r24, 0xA1	; 161
     39a:	80 93 f8 26 	sts	0x26F8, r24
     39e:	80 e2       	ldi	r24, 0x20	; 32
     3a0:	80 93 f9 26 	sts	0x26F9, r24
     3a4:	10 92 fa 26 	sts	0x26FA, r1
     3a8:	10 92 fb 26 	sts	0x26FB, r1
     3ac:	10 92 fc 26 	sts	0x26FC, r1
     3b0:	10 92 fd 26 	sts	0x26FD, r1
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	80 93 fe 26 	sts	0x26FE, r24
     3bc:	90 93 ff 26 	sts	0x26FF, r25
     3c0:	10 92 00 27 	sts	0x2700, r1
     3c4:	10 92 01 27 	sts	0x2701, r1
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	92 ec       	ldi	r25, 0xC2	; 194
     3cc:	a1 e0       	ldi	r26, 0x01	; 1
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	80 93 04 27 	sts	0x2704, r24
     3d4:	90 93 05 27 	sts	0x2705, r25
     3d8:	a0 93 06 27 	sts	0x2706, r26
     3dc:	b0 93 07 27 	sts	0x2707, r27
     3e0:	10 92 08 27 	sts	0x2708, r1
     3e4:	10 92 09 27 	sts	0x2709, r1
     3e8:	88 e0       	ldi	r24, 0x08	; 8
     3ea:	80 93 0a 27 	sts	0x270A, r24
     3ee:	80 91 f6 26 	lds	r24, 0x26F6
     3f2:	8f 5f       	subi	r24, 0xFF	; 255
     3f4:	80 93 f6 26 	sts	0x26F6, r24
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	08 95       	ret

000003fc <udi_cdc_comm_disable>:
     3fc:	80 91 f6 26 	lds	r24, 0x26F6
     400:	81 50       	subi	r24, 0x01	; 1
     402:	80 93 f6 26 	sts	0x26F6, r24
     406:	08 95       	ret

00000408 <udi_cdc_data_disable>:
     408:	80 91 f5 26 	lds	r24, 0x26F5
     40c:	81 50       	subi	r24, 0x01	; 1
     40e:	80 93 f5 26 	sts	0x26F5, r24
     412:	80 91 f5 26 	lds	r24, 0x26F5
     416:	10 92 f4 26 	sts	0x26F4, r1
     41a:	08 95       	ret

0000041c <udi_cdc_data_setup>:
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	08 95       	ret

00000420 <udi_cdc_getsetting>:
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	08 95       	ret

00000424 <udi_cdc_comm_setup>:
     424:	80 91 b2 28 	lds	r24, 0x28B2
     428:	88 23       	and	r24, r24
     42a:	dc f4       	brge	.+54     	; 0x462 <udi_cdc_comm_setup+0x3e>
     42c:	80 76       	andi	r24, 0x60	; 96
     42e:	80 32       	cpi	r24, 0x20	; 32
     430:	e9 f5       	brne	.+122    	; 0x4ac <udi_cdc_comm_setup+0x88>
     432:	80 91 b3 28 	lds	r24, 0x28B3
     436:	81 32       	cpi	r24, 0x21	; 33
     438:	d9 f5       	brne	.+118    	; 0x4b0 <udi_cdc_comm_setup+0x8c>
     43a:	80 91 b8 28 	lds	r24, 0x28B8
     43e:	90 91 b9 28 	lds	r25, 0x28B9
     442:	07 97       	sbiw	r24, 0x07	; 7
     444:	b9 f5       	brne	.+110    	; 0x4b4 <udi_cdc_comm_setup+0x90>
     446:	84 e0       	ldi	r24, 0x04	; 4
     448:	97 e2       	ldi	r25, 0x27	; 39
     44a:	80 93 ba 28 	sts	0x28BA, r24
     44e:	90 93 bb 28 	sts	0x28BB, r25
     452:	87 e0       	ldi	r24, 0x07	; 7
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	80 93 bc 28 	sts	0x28BC, r24
     45a:	90 93 bd 28 	sts	0x28BD, r25
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	08 95       	ret
     462:	80 76       	andi	r24, 0x60	; 96
     464:	80 32       	cpi	r24, 0x20	; 32
     466:	41 f5       	brne	.+80     	; 0x4b8 <udi_cdc_comm_setup+0x94>
     468:	80 91 b3 28 	lds	r24, 0x28B3
     46c:	80 32       	cpi	r24, 0x20	; 32
     46e:	21 f0       	breq	.+8      	; 0x478 <udi_cdc_comm_setup+0x54>
     470:	82 32       	cpi	r24, 0x22	; 34
     472:	21 f5       	brne	.+72     	; 0x4bc <udi_cdc_comm_setup+0x98>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	08 95       	ret
     478:	80 91 b8 28 	lds	r24, 0x28B8
     47c:	90 91 b9 28 	lds	r25, 0x28B9
     480:	07 97       	sbiw	r24, 0x07	; 7
     482:	f1 f4       	brne	.+60     	; 0x4c0 <udi_cdc_comm_setup+0x9c>
     484:	82 e6       	ldi	r24, 0x62	; 98
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	80 93 be 28 	sts	0x28BE, r24
     48c:	90 93 bf 28 	sts	0x28BF, r25
     490:	84 e0       	ldi	r24, 0x04	; 4
     492:	97 e2       	ldi	r25, 0x27	; 39
     494:	80 93 ba 28 	sts	0x28BA, r24
     498:	90 93 bb 28 	sts	0x28BB, r25
     49c:	87 e0       	ldi	r24, 0x07	; 7
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	80 93 bc 28 	sts	0x28BC, r24
     4a4:	90 93 bd 28 	sts	0x28BD, r25
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	08 95       	ret
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	08 95       	ret
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	08 95       	ret
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	08 95       	ret
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	08 95       	ret
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	08 95       	ret
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	08 95       	ret

000004c4 <udi_cdc_line_coding_received>:
     4c4:	08 95       	ret

000004c6 <udi_cdc_tx_send>:
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	80 91 e3 25 	lds	r24, 0x25E3
     4d4:	81 11       	cpse	r24, r1
     4d6:	9c c0       	rjmp	.+312    	; 0x610 <udi_cdc_tx_send+0x14a>
     4d8:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <udd_is_high_speed>
     4dc:	88 23       	and	r24, r24
     4de:	51 f0       	breq	.+20     	; 0x4f4 <udi_cdc_tx_send+0x2e>
     4e0:	c0 91 e4 25 	lds	r28, 0x25E4
     4e4:	d0 91 e5 25 	lds	r29, 0x25E5
     4e8:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <udd_get_micro_frame_number>
     4ec:	c8 17       	cp	r28, r24
     4ee:	d9 07       	cpc	r29, r25
     4f0:	59 f4       	brne	.+22     	; 0x508 <udi_cdc_tx_send+0x42>
     4f2:	8e c0       	rjmp	.+284    	; 0x610 <udi_cdc_tx_send+0x14a>
     4f4:	c0 91 e4 25 	lds	r28, 0x25E4
     4f8:	d0 91 e5 25 	lds	r29, 0x25E5
     4fc:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_get_frame_number>
     500:	c8 17       	cp	r28, r24
     502:	d9 07       	cpc	r29, r25
     504:	09 f4       	brne	.+2      	; 0x508 <udi_cdc_tx_send+0x42>
     506:	84 c0       	rjmp	.+264    	; 0x610 <udi_cdc_tx_send+0x14a>
     508:	df b7       	in	r29, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	c0 91 e6 25 	lds	r28, 0x25E6
     510:	ec 2f       	mov	r30, r28
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	e9 51       	subi	r30, 0x19	; 25
     51a:	fa 4d       	sbci	r31, 0xDA	; 218
     51c:	80 81       	ld	r24, Z
     51e:	91 81       	ldd	r25, Z+1	; 0x01
     520:	89 2b       	or	r24, r25
     522:	09 f5       	brne	.+66     	; 0x566 <udi_cdc_tx_send+0xa0>
     524:	80 91 e0 25 	lds	r24, 0x25E0
     528:	90 91 e1 25 	lds	r25, 0x25E1
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	80 93 e0 25 	sts	0x25E0, r24
     532:	90 93 e1 25 	sts	0x25E1, r25
     536:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <udd_is_high_speed>
     53a:	81 11       	cpse	r24, r1
     53c:	07 c0       	rjmp	.+14     	; 0x54c <udi_cdc_tx_send+0x86>
     53e:	80 91 e0 25 	lds	r24, 0x25E0
     542:	90 91 e1 25 	lds	r25, 0x25E1
     546:	84 36       	cpi	r24, 0x64	; 100
     548:	91 05       	cpc	r25, r1
     54a:	58 f0       	brcs	.+22     	; 0x562 <udi_cdc_tx_send+0x9c>
     54c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <udd_is_high_speed>
     550:	88 23       	and	r24, r24
     552:	49 f0       	breq	.+18     	; 0x566 <udi_cdc_tx_send+0xa0>
     554:	80 91 e0 25 	lds	r24, 0x25E0
     558:	90 91 e1 25 	lds	r25, 0x25E1
     55c:	80 32       	cpi	r24, 0x20	; 32
     55e:	93 40       	sbci	r25, 0x03	; 3
     560:	10 f4       	brcc	.+4      	; 0x566 <udi_cdc_tx_send+0xa0>
     562:	df bf       	out	0x3f, r29	; 63
     564:	55 c0       	rjmp	.+170    	; 0x610 <udi_cdc_tx_send+0x14a>
     566:	10 92 e0 25 	sts	0x25E0, r1
     56a:	10 92 e1 25 	sts	0x25E1, r1
     56e:	80 91 e2 25 	lds	r24, 0x25E2
     572:	81 11       	cpse	r24, r1
     574:	06 c0       	rjmp	.+12     	; 0x582 <udi_cdc_tx_send+0xbc>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	c1 11       	cpse	r28, r1
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	80 93 e6 25 	sts	0x25E6, r24
     580:	04 c0       	rjmp	.+8      	; 0x58a <udi_cdc_tx_send+0xc4>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	c1 11       	cpse	r28, r1
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	c8 2f       	mov	r28, r24
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	80 93 e3 25 	sts	0x25E3, r24
     590:	df bf       	out	0x3f, r29	; 63
     592:	d0 e0       	ldi	r29, 0x00	; 0
     594:	fe 01       	movw	r30, r28
     596:	ee 0f       	add	r30, r30
     598:	ff 1f       	adc	r31, r31
     59a:	e9 51       	subi	r30, 0x19	; 25
     59c:	fa 4d       	sbci	r31, 0xDA	; 218
     59e:	ff 24       	eor	r15, r15
     5a0:	f3 94       	inc	r15
     5a2:	80 81       	ld	r24, Z
     5a4:	91 81       	ldd	r25, Z+1	; 0x01
     5a6:	80 34       	cpi	r24, 0x40	; 64
     5a8:	91 05       	cpc	r25, r1
     5aa:	09 f4       	brne	.+2      	; 0x5ae <udi_cdc_tx_send+0xe8>
     5ac:	f1 2c       	mov	r15, r1
     5ae:	ff 20       	and	r15, r15
     5b0:	91 f0       	breq	.+36     	; 0x5d6 <udi_cdc_tx_send+0x110>
     5b2:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <udd_is_high_speed>
     5b6:	88 23       	and	r24, r24
     5b8:	39 f0       	breq	.+14     	; 0x5c8 <udi_cdc_tx_send+0x102>
     5ba:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <udd_get_micro_frame_number>
     5be:	80 93 e4 25 	sts	0x25E4, r24
     5c2:	90 93 e5 25 	sts	0x25E5, r25
     5c6:	0b c0       	rjmp	.+22     	; 0x5de <udi_cdc_tx_send+0x118>
     5c8:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_get_frame_number>
     5cc:	80 93 e4 25 	sts	0x25E4, r24
     5d0:	90 93 e5 25 	sts	0x25E5, r25
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <udi_cdc_tx_send+0x118>
     5d6:	10 92 e4 25 	sts	0x25E4, r1
     5da:	10 92 e5 25 	sts	0x25E5, r1
     5de:	fe 01       	movw	r30, r28
     5e0:	ee 0f       	add	r30, r30
     5e2:	ff 1f       	adc	r31, r31
     5e4:	e9 51       	subi	r30, 0x19	; 25
     5e6:	fa 4d       	sbci	r31, 0xDA	; 218
     5e8:	20 81       	ld	r18, Z
     5ea:	31 81       	ldd	r19, Z+1	; 0x01
     5ec:	ae 01       	movw	r20, r28
     5ee:	00 24       	eor	r0, r0
     5f0:	56 95       	lsr	r21
     5f2:	47 95       	ror	r20
     5f4:	07 94       	ror	r0
     5f6:	56 95       	lsr	r21
     5f8:	47 95       	ror	r20
     5fa:	07 94       	ror	r0
     5fc:	54 2f       	mov	r21, r20
     5fe:	40 2d       	mov	r20, r0
     600:	44 51       	subi	r20, 0x14	; 20
     602:	5a 4d       	sbci	r21, 0xDA	; 218
     604:	0e e0       	ldi	r16, 0x0E	; 14
     606:	13 e0       	ldi	r17, 0x03	; 3
     608:	6f 2d       	mov	r22, r15
     60a:	81 e8       	ldi	r24, 0x81	; 129
     60c:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <udd_ep_run>
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	08 95       	ret

0000061c <udi_cdc_data_sent>:
     61c:	81 11       	cpse	r24, r1
     61e:	15 c0       	rjmp	.+42     	; 0x64a <udi_cdc_data_sent+0x2e>
     620:	20 91 e6 25 	lds	r18, 0x25E6
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	22 23       	and	r18, r18
     62a:	11 f0       	breq	.+4      	; 0x630 <udi_cdc_data_sent+0x14>
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	fc 01       	movw	r30, r24
     632:	ee 0f       	add	r30, r30
     634:	ff 1f       	adc	r31, r31
     636:	e9 51       	subi	r30, 0x19	; 25
     638:	fa 4d       	sbci	r31, 0xDA	; 218
     63a:	10 82       	st	Z, r1
     63c:	11 82       	std	Z+1, r1	; 0x01
     63e:	10 92 e2 25 	sts	0x25E2, r1
     642:	10 92 e3 25 	sts	0x25E3, r1
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	3e cf       	rjmp	.-388    	; 0x4c6 <udi_cdc_tx_send>
     64a:	08 95       	ret

0000064c <udi_cdc_data_sof_notify>:
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	3b cf       	rjmp	.-394    	; 0x4c6 <udi_cdc_tx_send>
     650:	08 95       	ret

00000652 <udi_cdc_multi_get_nb_received_data>:
     652:	4f b7       	in	r20, 0x3f	; 63
     654:	f8 94       	cli
     656:	20 91 6d 26 	lds	r18, 0x266D
     65a:	30 91 6e 26 	lds	r19, 0x266E
     65e:	e0 91 6f 26 	lds	r30, 0x266F
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	ee 0f       	add	r30, r30
     666:	ff 1f       	adc	r31, r31
     668:	e0 59       	subi	r30, 0x90	; 144
     66a:	f9 4d       	sbci	r31, 0xD9	; 217
     66c:	80 81       	ld	r24, Z
     66e:	91 81       	ldd	r25, Z+1	; 0x01
     670:	82 1b       	sub	r24, r18
     672:	93 0b       	sbc	r25, r19
     674:	4f bf       	out	0x3f, r20	; 63
     676:	08 95       	ret

00000678 <udi_cdc_multi_is_rx_ready>:
     678:	ec df       	rcall	.-40     	; 0x652 <udi_cdc_multi_get_nb_received_data>
     67a:	21 e0       	ldi	r18, 0x01	; 1
     67c:	89 2b       	or	r24, r25
     67e:	09 f4       	brne	.+2      	; 0x682 <udi_cdc_multi_is_rx_ready+0xa>
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	82 2f       	mov	r24, r18
     684:	08 95       	ret

00000686 <udi_cdc_rx_start>:
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	4f b7       	in	r20, 0x3f	; 63
     690:	f8 94       	cli
     692:	50 91 6f 26 	lds	r21, 0x266F
     696:	80 91 6c 26 	lds	r24, 0x266C
     69a:	81 11       	cpse	r24, r1
     69c:	10 c0       	rjmp	.+32     	; 0x6be <udi_cdc_rx_start+0x38>
     69e:	20 91 6d 26 	lds	r18, 0x266D
     6a2:	30 91 6e 26 	lds	r19, 0x266E
     6a6:	c5 2f       	mov	r28, r21
     6a8:	d0 e0       	ldi	r29, 0x00	; 0
     6aa:	fe 01       	movw	r30, r28
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	e0 59       	subi	r30, 0x90	; 144
     6b2:	f9 4d       	sbci	r31, 0xD9	; 217
     6b4:	80 81       	ld	r24, Z
     6b6:	91 81       	ldd	r25, Z+1	; 0x01
     6b8:	28 17       	cp	r18, r24
     6ba:	39 07       	cpc	r19, r25
     6bc:	18 f4       	brcc	.+6      	; 0x6c4 <udi_cdc_rx_start+0x3e>
     6be:	4f bf       	out	0x3f, r20	; 63
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	23 c0       	rjmp	.+70     	; 0x70a <udi_cdc_rx_start+0x84>
     6c4:	10 92 6d 26 	sts	0x266D, r1
     6c8:	10 92 6e 26 	sts	0x266E, r1
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	51 11       	cpse	r21, r1
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	80 93 6f 26 	sts	0x266F, r24
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 6c 26 	sts	0x266C, r24
     6dc:	4f bf       	out	0x3f, r20	; 63
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	cb df       	rcall	.-106    	; 0x678 <udi_cdc_multi_is_rx_ready>
     6e2:	ae 01       	movw	r20, r28
     6e4:	00 24       	eor	r0, r0
     6e6:	56 95       	lsr	r21
     6e8:	47 95       	ror	r20
     6ea:	07 94       	ror	r0
     6ec:	56 95       	lsr	r21
     6ee:	47 95       	ror	r20
     6f0:	07 94       	ror	r0
     6f2:	54 2f       	mov	r21, r20
     6f4:	40 2d       	mov	r20, r0
     6f6:	4c 58       	subi	r20, 0x8C	; 140
     6f8:	59 4d       	sbci	r21, 0xD9	; 217
     6fa:	0c eb       	ldi	r16, 0xBC	; 188
     6fc:	13 e0       	ldi	r17, 0x03	; 3
     6fe:	20 e4       	ldi	r18, 0x40	; 64
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <udd_ep_run>
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	08 95       	ret

00000714 <udi_cdc_data_enable>:
     714:	10 92 f5 26 	sts	0x26F5, r1
     718:	10 92 e3 25 	sts	0x25E3, r1
     71c:	10 92 e2 25 	sts	0x25E2, r1
     720:	10 92 e6 25 	sts	0x25E6, r1
     724:	10 92 e7 25 	sts	0x25E7, r1
     728:	10 92 e8 25 	sts	0x25E8, r1
     72c:	10 92 e9 25 	sts	0x25E9, r1
     730:	10 92 ea 25 	sts	0x25EA, r1
     734:	10 92 e4 25 	sts	0x25E4, r1
     738:	10 92 e5 25 	sts	0x25E5, r1
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	c3 de       	rcall	.-634    	; 0x4c6 <udi_cdc_tx_send>
     740:	10 92 6c 26 	sts	0x266C, r1
     744:	10 92 6f 26 	sts	0x266F, r1
     748:	10 92 70 26 	sts	0x2670, r1
     74c:	10 92 71 26 	sts	0x2671, r1
     750:	10 92 6d 26 	sts	0x266D, r1
     754:	10 92 6e 26 	sts	0x266E, r1
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	95 df       	rcall	.-214    	; 0x686 <udi_cdc_rx_start>
     75c:	88 23       	and	r24, r24
     75e:	59 f0       	breq	.+22     	; 0x776 <udi_cdc_data_enable+0x62>
     760:	90 91 f5 26 	lds	r25, 0x26F5
     764:	9f 5f       	subi	r25, 0xFF	; 255
     766:	90 93 f5 26 	sts	0x26F5, r25
     76a:	90 91 f5 26 	lds	r25, 0x26F5
     76e:	91 30       	cpi	r25, 0x01	; 1
     770:	11 f4       	brne	.+4      	; 0x776 <udi_cdc_data_enable+0x62>
     772:	90 93 f4 26 	sts	0x26F4, r25
     776:	08 95       	ret

00000778 <udi_cdc_data_received>:
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	94 2f       	mov	r25, r20
     77e:	81 11       	cpse	r24, r1
     780:	29 c0       	rjmp	.+82     	; 0x7d4 <udi_cdc_data_received+0x5c>
     782:	80 91 6f 26 	lds	r24, 0x266F
     786:	e1 e0       	ldi	r30, 0x01	; 1
     788:	81 11       	cpse	r24, r1
     78a:	e0 e0       	ldi	r30, 0x00	; 0
     78c:	61 15       	cp	r22, r1
     78e:	71 05       	cpc	r23, r1
     790:	b1 f4       	brne	.+44     	; 0x7be <udi_cdc_data_received+0x46>
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	00 24       	eor	r0, r0
     796:	f6 95       	lsr	r31
     798:	e7 95       	ror	r30
     79a:	07 94       	ror	r0
     79c:	f6 95       	lsr	r31
     79e:	e7 95       	ror	r30
     7a0:	07 94       	ror	r0
     7a2:	fe 2f       	mov	r31, r30
     7a4:	e0 2d       	mov	r30, r0
     7a6:	af 01       	movw	r20, r30
     7a8:	4c 58       	subi	r20, 0x8C	; 140
     7aa:	59 4d       	sbci	r21, 0xD9	; 217
     7ac:	0c eb       	ldi	r16, 0xBC	; 188
     7ae:	13 e0       	ldi	r17, 0x03	; 3
     7b0:	20 e4       	ldi	r18, 0x40	; 64
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	89 2f       	mov	r24, r25
     7b8:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <udd_ep_run>
     7bc:	0b c0       	rjmp	.+22     	; 0x7d4 <udi_cdc_data_received+0x5c>
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	ee 0f       	add	r30, r30
     7c2:	ff 1f       	adc	r31, r31
     7c4:	e0 59       	subi	r30, 0x90	; 144
     7c6:	f9 4d       	sbci	r31, 0xD9	; 217
     7c8:	60 83       	st	Z, r22
     7ca:	71 83       	std	Z+1, r23	; 0x01
     7cc:	10 92 6c 26 	sts	0x266C, r1
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	59 df       	rcall	.-334    	; 0x686 <udi_cdc_rx_start>
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <udi_cdc_is_rx_ready>:
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	4d cf       	rjmp	.-358    	; 0x678 <udi_cdc_multi_is_rx_ready>
     7de:	08 95       	ret

000007e0 <udi_cdc_multi_getc>:
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	11 e0       	ldi	r17, 0x01	; 1
     7e8:	80 91 0a 27 	lds	r24, 0x270A
     7ec:	89 30       	cpi	r24, 0x09	; 9
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <udi_cdc_multi_getc+0x12>
     7f0:	10 e0       	ldi	r17, 0x00	; 0
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	3f b7       	in	r19, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	80 91 6d 26 	lds	r24, 0x266D
     7fe:	90 91 6e 26 	lds	r25, 0x266E
     802:	20 91 6f 26 	lds	r18, 0x266F
     806:	3f bf       	out	0x3f, r19	; 63
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	f9 01       	movw	r30, r18
     80c:	ee 0f       	add	r30, r30
     80e:	ff 1f       	adc	r31, r31
     810:	e0 59       	subi	r30, 0x90	; 144
     812:	f9 4d       	sbci	r31, 0xD9	; 217
     814:	40 81       	ld	r20, Z
     816:	51 81       	ldd	r21, Z+1	; 0x01
     818:	84 17       	cp	r24, r20
     81a:	95 07       	cpc	r25, r21
     81c:	30 f0       	brcs	.+12     	; 0x82a <udi_cdc_multi_getc+0x4a>
     81e:	80 91 f4 26 	lds	r24, 0x26F4
     822:	81 11       	cpse	r24, r1
     824:	e8 cf       	rjmp	.-48     	; 0x7f6 <udi_cdc_multi_getc+0x16>
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	20 c0       	rjmp	.+64     	; 0x86a <udi_cdc_multi_getc+0x8a>
     82a:	f9 01       	movw	r30, r18
     82c:	00 24       	eor	r0, r0
     82e:	f6 95       	lsr	r31
     830:	e7 95       	ror	r30
     832:	07 94       	ror	r0
     834:	f6 95       	lsr	r31
     836:	e7 95       	ror	r30
     838:	07 94       	ror	r0
     83a:	fe 2f       	mov	r31, r30
     83c:	e0 2d       	mov	r30, r0
     83e:	e8 0f       	add	r30, r24
     840:	f9 1f       	adc	r31, r25
     842:	ec 58       	subi	r30, 0x8C	; 140
     844:	f9 4d       	sbci	r31, 0xD9	; 217
     846:	20 81       	ld	r18, Z
     848:	eb 01       	movw	r28, r22
     84a:	c2 2b       	or	r28, r18
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	80 93 6d 26 	sts	0x266D, r24
     852:	90 93 6e 26 	sts	0x266E, r25
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	16 df       	rcall	.-468    	; 0x686 <udi_cdc_rx_start>
     85a:	11 23       	and	r17, r17
     85c:	21 f0       	breq	.+8      	; 0x866 <udi_cdc_multi_getc+0x86>
     85e:	7c 2f       	mov	r23, r28
     860:	66 27       	eor	r22, r22
     862:	10 e0       	ldi	r17, 0x00	; 0
     864:	c8 cf       	rjmp	.-112    	; 0x7f6 <udi_cdc_multi_getc+0x16>
     866:	8c 2f       	mov	r24, r28
     868:	9d 2f       	mov	r25, r29
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	08 95       	ret

00000872 <udi_cdc_getc>:
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	b5 cf       	rjmp	.-150    	; 0x7e0 <udi_cdc_multi_getc>
     876:	08 95       	ret

00000878 <udi_cdc_multi_get_free_tx_buffer>:
     878:	9f b7       	in	r25, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	80 91 e6 25 	lds	r24, 0x25E6
     880:	e8 2f       	mov	r30, r24
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	e9 51       	subi	r30, 0x19	; 25
     88a:	fa 4d       	sbci	r31, 0xDA	; 218
     88c:	20 81       	ld	r18, Z
     88e:	31 81       	ldd	r19, Z+1	; 0x01
     890:	20 34       	cpi	r18, 0x40	; 64
     892:	31 05       	cpc	r19, r1
     894:	89 f4       	brne	.+34     	; 0x8b8 <udi_cdc_multi_get_free_tx_buffer+0x40>
     896:	40 91 e3 25 	lds	r20, 0x25E3
     89a:	41 11       	cpse	r20, r1
     89c:	0d c0       	rjmp	.+26     	; 0x8b8 <udi_cdc_multi_get_free_tx_buffer+0x40>
     89e:	40 91 e2 25 	lds	r20, 0x25E2
     8a2:	41 11       	cpse	r20, r1
     8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <udi_cdc_multi_get_free_tx_buffer+0x40>
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	20 93 e2 25 	sts	0x25E2, r18
     8ac:	81 11       	cpse	r24, r1
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	20 93 e6 25 	sts	0x25E6, r18
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	9f bf       	out	0x3f, r25	; 63
     8ba:	80 e4       	ldi	r24, 0x40	; 64
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	82 1b       	sub	r24, r18
     8c0:	93 0b       	sbc	r25, r19
     8c2:	08 95       	ret

000008c4 <udi_cdc_multi_is_tx_ready>:
     8c4:	d9 df       	rcall	.-78     	; 0x878 <udi_cdc_multi_get_free_tx_buffer>
     8c6:	21 e0       	ldi	r18, 0x01	; 1
     8c8:	89 2b       	or	r24, r25
     8ca:	09 f4       	brne	.+2      	; 0x8ce <udi_cdc_multi_is_tx_ready+0xa>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	82 2f       	mov	r24, r18
     8d0:	08 95       	ret

000008d2 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	16 2f       	mov	r17, r22
     8da:	c7 2f       	mov	r28, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     8dc:	d1 e0       	ldi	r29, 0x01	; 1
     8de:	80 91 0a 27 	lds	r24, 0x270A
     8e2:	89 30       	cpi	r24, 0x09	; 9
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <udi_cdc_multi_putc+0x16>
     8e6:	d0 e0       	ldi	r29, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	ec df       	rcall	.-40     	; 0x8c4 <udi_cdc_multi_is_tx_ready>
     8ec:	81 11       	cpse	r24, r1
     8ee:	07 c0       	rjmp	.+14     	; 0x8fe <udi_cdc_multi_putc+0x2c>
		if (!udi_cdc_data_running) {
     8f0:	80 91 f4 26 	lds	r24, 0x26F4
     8f4:	81 11       	cpse	r24, r1
     8f6:	f8 cf       	rjmp	.-16     	; 0x8e8 <udi_cdc_multi_putc+0x16>
			return false;
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	2b c0       	rjmp	.+86     	; 0x954 <udi_cdc_multi_putc+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8fe:	6f b7       	in	r22, 0x3f	; 63
	cpu_irq_disable();
     900:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     902:	20 91 e6 25 	lds	r18, 0x25E6
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	f9 01       	movw	r30, r18
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	e9 51       	subi	r30, 0x19	; 25
     910:	fa 4d       	sbci	r31, 0xDA	; 218
     912:	80 81       	ld	r24, Z
     914:	91 81       	ldd	r25, Z+1	; 0x01
     916:	ac 01       	movw	r20, r24
     918:	4f 5f       	subi	r20, 0xFF	; 255
     91a:	5f 4f       	sbci	r21, 0xFF	; 255
     91c:	40 83       	st	Z, r20
     91e:	51 83       	std	Z+1, r21	; 0x01
     920:	f9 01       	movw	r30, r18
     922:	00 24       	eor	r0, r0
     924:	f6 95       	lsr	r31
     926:	e7 95       	ror	r30
     928:	07 94       	ror	r0
     92a:	f6 95       	lsr	r31
     92c:	e7 95       	ror	r30
     92e:	07 94       	ror	r0
     930:	fe 2f       	mov	r31, r30
     932:	e0 2d       	mov	r30, r0
     934:	8e 0f       	add	r24, r30
     936:	9f 1f       	adc	r25, r31
     938:	fc 01       	movw	r30, r24
     93a:	e4 51       	subi	r30, 0x14	; 20
     93c:	fa 4d       	sbci	r31, 0xDA	; 218
     93e:	10 83       	st	Z, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     940:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     942:	dd 23       	and	r29, r29
     944:	29 f0       	breq	.+10     	; 0x950 <udi_cdc_multi_putc+0x7e>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     946:	1c 2f       	mov	r17, r28
     948:	cc 0f       	add	r28, r28
     94a:	cc 0b       	sbc	r28, r28
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     94c:	d0 e0       	ldi	r29, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     94e:	cc cf       	rjmp	.-104    	; 0x8e8 <udi_cdc_multi_putc+0x16>
	}
	return true;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	08 95       	ret

0000095c <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     95c:	bc 01       	movw	r22, r24
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	b8 cf       	rjmp	.-144    	; 0x8d2 <udi_cdc_multi_putc>
}
     962:	08 95       	ret

00000964 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     964:	e0 91 10 27 	lds	r30, 0x2710
     968:	f0 91 11 27 	lds	r31, 0x2711
     96c:	01 90       	ld	r0, Z+
     96e:	f0 81       	ld	r31, Z
     970:	e0 2d       	mov	r30, r0
     972:	22 81       	ldd	r18, Z+2	; 0x02
     974:	33 81       	ldd	r19, Z+3	; 0x03
     976:	2e 0f       	add	r18, r30
     978:	3f 1f       	adc	r19, r31
     97a:	fc 01       	movw	r30, r24
     97c:	40 81       	ld	r20, Z
     97e:	e4 0f       	add	r30, r20
     980:	f1 1d       	adc	r31, r1
     982:	e2 17       	cp	r30, r18
     984:	f3 07       	cpc	r31, r19
     986:	a0 f4       	brcc	.+40     	; 0x9b0 <udc_next_desc_in_iface+0x4c>
     988:	81 81       	ldd	r24, Z+1	; 0x01
     98a:	84 30       	cpi	r24, 0x04	; 4
     98c:	a1 f0       	breq	.+40     	; 0x9b6 <udc_next_desc_in_iface+0x52>
     98e:	86 13       	cpse	r24, r22
     990:	06 c0       	rjmp	.+12     	; 0x99e <udc_next_desc_in_iface+0x3a>
     992:	14 c0       	rjmp	.+40     	; 0x9bc <udc_next_desc_in_iface+0x58>
     994:	81 81       	ldd	r24, Z+1	; 0x01
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	a1 f0       	breq	.+40     	; 0x9c2 <udc_next_desc_in_iface+0x5e>
     99a:	86 17       	cp	r24, r22
     99c:	a9 f0       	breq	.+42     	; 0x9c8 <udc_next_desc_in_iface+0x64>
     99e:	80 81       	ld	r24, Z
     9a0:	e8 0f       	add	r30, r24
     9a2:	f1 1d       	adc	r31, r1
     9a4:	e2 17       	cp	r30, r18
     9a6:	f3 07       	cpc	r31, r19
     9a8:	a8 f3       	brcs	.-22     	; 0x994 <udc_next_desc_in_iface+0x30>
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	08 95       	ret
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	08 95       	ret
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	08 95       	ret
     9bc:	8e 2f       	mov	r24, r30
     9be:	9f 2f       	mov	r25, r31
     9c0:	08 95       	ret
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	08 95       	ret
     9c8:	8e 2f       	mov	r24, r30
     9ca:	9f 2f       	mov	r25, r31
     9cc:	08 95       	ret

000009ce <udc_valid_address>:
     9ce:	80 91 b4 28 	lds	r24, 0x28B4
     9d2:	8f 77       	andi	r24, 0x7F	; 127
     9d4:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <udd_set_address>
     9d8:	08 95       	ret

000009da <udc_update_iface_desc>:
     9da:	90 91 12 27 	lds	r25, 0x2712
     9de:	99 23       	and	r25, r25
     9e0:	81 f1       	breq	.+96     	; 0xa42 <udc_update_iface_desc+0x68>
     9e2:	e0 91 10 27 	lds	r30, 0x2710
     9e6:	f0 91 11 27 	lds	r31, 0x2711
     9ea:	01 90       	ld	r0, Z+
     9ec:	f0 81       	ld	r31, Z
     9ee:	e0 2d       	mov	r30, r0
     9f0:	94 81       	ldd	r25, Z+4	; 0x04
     9f2:	89 17       	cp	r24, r25
     9f4:	40 f5       	brcc	.+80     	; 0xa46 <udc_update_iface_desc+0x6c>
     9f6:	e0 93 0e 27 	sts	0x270E, r30
     9fa:	f0 93 0f 27 	sts	0x270F, r31
     9fe:	22 81       	ldd	r18, Z+2	; 0x02
     a00:	33 81       	ldd	r19, Z+3	; 0x03
     a02:	2e 0f       	add	r18, r30
     a04:	3f 1f       	adc	r19, r31
     a06:	e2 17       	cp	r30, r18
     a08:	f3 07       	cpc	r31, r19
     a0a:	f8 f4       	brcc	.+62     	; 0xa4a <udc_update_iface_desc+0x70>
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	94 30       	cpi	r25, 0x04	; 4
     a10:	61 f4       	brne	.+24     	; 0xa2a <udc_update_iface_desc+0x50>
     a12:	92 81       	ldd	r25, Z+2	; 0x02
     a14:	98 13       	cpse	r25, r24
     a16:	09 c0       	rjmp	.+18     	; 0xa2a <udc_update_iface_desc+0x50>
     a18:	93 81       	ldd	r25, Z+3	; 0x03
     a1a:	96 13       	cpse	r25, r22
     a1c:	06 c0       	rjmp	.+12     	; 0xa2a <udc_update_iface_desc+0x50>
     a1e:	e0 93 0e 27 	sts	0x270E, r30
     a22:	f0 93 0f 27 	sts	0x270F, r31
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	08 95       	ret
     a2a:	90 81       	ld	r25, Z
     a2c:	e9 0f       	add	r30, r25
     a2e:	f1 1d       	adc	r31, r1
     a30:	e2 17       	cp	r30, r18
     a32:	f3 07       	cpc	r31, r19
     a34:	58 f3       	brcs	.-42     	; 0xa0c <udc_update_iface_desc+0x32>
     a36:	e0 93 0e 27 	sts	0x270E, r30
     a3a:	f0 93 0f 27 	sts	0x270F, r31
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	08 95       	ret
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	08 95       	ret
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 95       	ret
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	08 95       	ret

00000a4e <udc_iface_disable>:
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	c8 2f       	mov	r28, r24
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	be df       	rcall	.-132    	; 0x9da <udc_update_iface_desc>
     a5e:	f8 2e       	mov	r15, r24
     a60:	88 23       	and	r24, r24
     a62:	81 f1       	breq	.+96     	; 0xac4 <udc_iface_disable+0x76>
     a64:	a0 91 10 27 	lds	r26, 0x2710
     a68:	b0 91 11 27 	lds	r27, 0x2711
     a6c:	ec 2f       	mov	r30, r28
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	ee 0f       	add	r30, r30
     a72:	ff 1f       	adc	r31, r31
     a74:	12 96       	adiw	r26, 0x02	; 2
     a76:	2d 91       	ld	r18, X+
     a78:	3c 91       	ld	r19, X
     a7a:	13 97       	sbiw	r26, 0x03	; 3
     a7c:	e2 0f       	add	r30, r18
     a7e:	f3 1f       	adc	r31, r19
     a80:	00 81       	ld	r16, Z
     a82:	11 81       	ldd	r17, Z+1	; 0x01
     a84:	d8 01       	movw	r26, r16
     a86:	16 96       	adiw	r26, 0x06	; 6
     a88:	ed 91       	ld	r30, X+
     a8a:	fc 91       	ld	r31, X
     a8c:	17 97       	sbiw	r26, 0x07	; 7
     a8e:	09 95       	icall
     a90:	68 2f       	mov	r22, r24
     a92:	8c 2f       	mov	r24, r28
     a94:	a2 df       	rcall	.-188    	; 0x9da <udc_update_iface_desc>
     a96:	f8 2e       	mov	r15, r24
     a98:	88 23       	and	r24, r24
     a9a:	a1 f0       	breq	.+40     	; 0xac4 <udc_iface_disable+0x76>
     a9c:	c0 91 0e 27 	lds	r28, 0x270E
     aa0:	d0 91 0f 27 	lds	r29, 0x270F
     aa4:	65 e0       	ldi	r22, 0x05	; 5
     aa6:	ce 01       	movw	r24, r28
     aa8:	5d df       	rcall	.-326    	; 0x964 <udc_next_desc_in_iface>
     aaa:	ec 01       	movw	r28, r24
     aac:	00 97       	sbiw	r24, 0x00	; 0
     aae:	21 f0       	breq	.+8      	; 0xab8 <udc_iface_disable+0x6a>
     ab0:	8a 81       	ldd	r24, Y+2	; 0x02
     ab2:	0e 94 8a 10 	call	0x2114	; 0x2114 <udd_ep_free>
     ab6:	f6 cf       	rjmp	.-20     	; 0xaa4 <udc_iface_disable+0x56>
     ab8:	d8 01       	movw	r26, r16
     aba:	12 96       	adiw	r26, 0x02	; 2
     abc:	ed 91       	ld	r30, X+
     abe:	fc 91       	ld	r31, X
     ac0:	13 97       	sbiw	r26, 0x03	; 3
     ac2:	09 95       	icall
     ac4:	8f 2d       	mov	r24, r15
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	ff 90       	pop	r15
     ad0:	08 95       	ret

00000ad2 <udc_iface_enable>:
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	18 2f       	mov	r17, r24
     ada:	7f df       	rcall	.-258    	; 0x9da <udc_update_iface_desc>
     adc:	88 23       	and	r24, r24
     ade:	41 f1       	breq	.+80     	; 0xb30 <udc_iface_enable+0x5e>
     ae0:	c0 91 0e 27 	lds	r28, 0x270E
     ae4:	d0 91 0f 27 	lds	r29, 0x270F
     ae8:	65 e0       	ldi	r22, 0x05	; 5
     aea:	ce 01       	movw	r24, r28
     aec:	3b df       	rcall	.-394    	; 0x964 <udc_next_desc_in_iface>
     aee:	ec 01       	movw	r28, r24
     af0:	00 97       	sbiw	r24, 0x00	; 0
     af2:	49 f0       	breq	.+18     	; 0xb06 <udc_iface_enable+0x34>
     af4:	4c 81       	ldd	r20, Y+4	; 0x04
     af6:	5d 81       	ldd	r21, Y+5	; 0x05
     af8:	6b 81       	ldd	r22, Y+3	; 0x03
     afa:	8a 81       	ldd	r24, Y+2	; 0x02
     afc:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <udd_ep_alloc>
     b00:	81 11       	cpse	r24, r1
     b02:	f2 cf       	rjmp	.-28     	; 0xae8 <udc_iface_enable+0x16>
     b04:	15 c0       	rjmp	.+42     	; 0xb30 <udc_iface_enable+0x5e>
     b06:	a0 91 10 27 	lds	r26, 0x2710
     b0a:	b0 91 11 27 	lds	r27, 0x2711
     b0e:	81 2f       	mov	r24, r17
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	12 96       	adiw	r26, 0x02	; 2
     b18:	ed 91       	ld	r30, X+
     b1a:	fc 91       	ld	r31, X
     b1c:	13 97       	sbiw	r26, 0x03	; 3
     b1e:	e8 0f       	add	r30, r24
     b20:	f9 1f       	adc	r31, r25
     b22:	01 90       	ld	r0, Z+
     b24:	f0 81       	ld	r31, Z
     b26:	e0 2d       	mov	r30, r0
     b28:	01 90       	ld	r0, Z+
     b2a:	f0 81       	ld	r31, Z
     b2c:	e0 2d       	mov	r30, r0
     b2e:	09 95       	icall
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	08 95       	ret

00000b38 <udc_start>:
     b38:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <udd_enable>
     b3c:	08 95       	ret

00000b3e <udc_reset>:
     b3e:	cf 93       	push	r28
     b40:	80 91 12 27 	lds	r24, 0x2712
     b44:	88 23       	and	r24, r24
     b46:	c1 f0       	breq	.+48     	; 0xb78 <udc_reset+0x3a>
     b48:	e0 91 10 27 	lds	r30, 0x2710
     b4c:	f0 91 11 27 	lds	r31, 0x2711
     b50:	01 90       	ld	r0, Z+
     b52:	f0 81       	ld	r31, Z
     b54:	e0 2d       	mov	r30, r0
     b56:	84 81       	ldd	r24, Z+4	; 0x04
     b58:	88 23       	and	r24, r24
     b5a:	71 f0       	breq	.+28     	; 0xb78 <udc_reset+0x3a>
     b5c:	c0 e0       	ldi	r28, 0x00	; 0
     b5e:	8c 2f       	mov	r24, r28
     b60:	76 df       	rcall	.-276    	; 0xa4e <udc_iface_disable>
     b62:	cf 5f       	subi	r28, 0xFF	; 255
     b64:	e0 91 10 27 	lds	r30, 0x2710
     b68:	f0 91 11 27 	lds	r31, 0x2711
     b6c:	01 90       	ld	r0, Z+
     b6e:	f0 81       	ld	r31, Z
     b70:	e0 2d       	mov	r30, r0
     b72:	84 81       	ldd	r24, Z+4	; 0x04
     b74:	c8 17       	cp	r28, r24
     b76:	98 f3       	brcs	.-26     	; 0xb5e <udc_reset+0x20>
     b78:	10 92 12 27 	sts	0x2712, r1
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	80 93 16 27 	sts	0x2716, r24
     b84:	90 93 17 27 	sts	0x2717, r25
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     b8c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     b8e:	80 91 12 27 	lds	r24, 0x2712
     b92:	88 23       	and	r24, r24
     b94:	41 f1       	breq	.+80     	; 0xbe6 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b96:	e0 91 10 27 	lds	r30, 0x2710
     b9a:	f0 91 11 27 	lds	r31, 0x2711
     b9e:	a0 81       	ld	r26, Z
     ba0:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     ba2:	14 96       	adiw	r26, 0x04	; 4
     ba4:	8c 91       	ld	r24, X
     ba6:	88 23       	and	r24, r24
     ba8:	f1 f0       	breq	.+60     	; 0xbe6 <udc_sof_notify+0x5a>
     baa:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     bac:	8c 2f       	mov	r24, r28
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	02 80       	ldd	r0, Z+2	; 0x02
     bb6:	f3 81       	ldd	r31, Z+3	; 0x03
     bb8:	e0 2d       	mov	r30, r0
     bba:	e8 0f       	add	r30, r24
     bbc:	f9 1f       	adc	r31, r25
     bbe:	01 90       	ld	r0, Z+
     bc0:	f0 81       	ld	r31, Z
     bc2:	e0 2d       	mov	r30, r0
     bc4:	00 84       	ldd	r0, Z+8	; 0x08
     bc6:	f1 85       	ldd	r31, Z+9	; 0x09
     bc8:	e0 2d       	mov	r30, r0
     bca:	30 97       	sbiw	r30, 0x00	; 0
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     bce:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     bd0:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bd2:	e0 91 10 27 	lds	r30, 0x2710
     bd6:	f0 91 11 27 	lds	r31, 0x2711
     bda:	a0 81       	ld	r26, Z
     bdc:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	8c 91       	ld	r24, X
     be2:	c8 17       	cp	r28, r24
     be4:	18 f3       	brcs	.-58     	; 0xbac <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     be6:	cf 91       	pop	r28
     be8:	08 95       	ret

00000bea <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     bf6:	10 92 bc 28 	sts	0x28BC, r1
     bfa:	10 92 bd 28 	sts	0x28BD, r1
	udd_g_ctrlreq.callback = NULL;
     bfe:	10 92 be 28 	sts	0x28BE, r1
     c02:	10 92 bf 28 	sts	0x28BF, r1
	udd_g_ctrlreq.over_under_run = NULL;
     c06:	10 92 c0 28 	sts	0x28C0, r1
     c0a:	10 92 c1 28 	sts	0x28C1, r1

	if (Udd_setup_is_in()) {
     c0e:	20 91 b2 28 	lds	r18, 0x28B2
     c12:	22 23       	and	r18, r18
     c14:	0c f0       	brlt	.+2      	; 0xc18 <udc_process_setup+0x2e>
     c16:	97 c2       	rjmp	.+1326   	; 0x1146 <udc_process_setup+0x55c>
		if (udd_g_ctrlreq.req.wLength == 0) {
     c18:	80 91 b8 28 	lds	r24, 0x28B8
     c1c:	90 91 b9 28 	lds	r25, 0x28B9
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	09 f0       	breq	.+2      	; 0xc26 <udc_process_setup+0x3c>
     c24:	95 c2       	rjmp	.+1322   	; 0x1150 <udc_process_setup+0x566>
     c26:	8b c2       	rjmp	.+1302   	; 0x113e <udc_process_setup+0x554>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     c28:	2f 71       	andi	r18, 0x1F	; 31
     c2a:	09 f0       	breq	.+2      	; 0xc2e <udc_process_setup+0x44>
     c2c:	b9 c0       	rjmp	.+370    	; 0xda0 <udc_process_setup+0x1b6>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     c2e:	30 91 b3 28 	lds	r19, 0x28B3
     c32:	36 30       	cpi	r19, 0x06	; 6
     c34:	89 f0       	breq	.+34     	; 0xc58 <udc_process_setup+0x6e>
     c36:	38 30       	cpi	r19, 0x08	; 8
     c38:	09 f4       	brne	.+2      	; 0xc3c <udc_process_setup+0x52>
     c3a:	a6 c0       	rjmp	.+332    	; 0xd88 <udc_process_setup+0x19e>
     c3c:	31 11       	cpse	r19, r1
     c3e:	b0 c0       	rjmp	.+352    	; 0xda0 <udc_process_setup+0x1b6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     c40:	02 97       	sbiw	r24, 0x02	; 2
     c42:	41 f4       	brne	.+16     	; 0xc54 <udc_process_setup+0x6a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     c44:	62 e0       	ldi	r22, 0x02	; 2
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	86 e1       	ldi	r24, 0x16	; 22
     c4a:	97 e2       	ldi	r25, 0x27	; 39
     c4c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     c50:	01 e0       	ldi	r16, 0x01	; 1
     c52:	f8 c1       	rjmp	.+1008   	; 0x1044 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     c54:	00 e0       	ldi	r16, 0x00	; 0
     c56:	f6 c1       	rjmp	.+1004   	; 0x1044 <udc_process_setup+0x45a>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     c58:	20 91 b4 28 	lds	r18, 0x28B4
     c5c:	30 91 b5 28 	lds	r19, 0x28B5

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     c60:	83 2f       	mov	r24, r19
     c62:	99 27       	eor	r25, r25
     c64:	82 30       	cpi	r24, 0x02	; 2
     c66:	91 05       	cpc	r25, r1
     c68:	a1 f0       	breq	.+40     	; 0xc92 <udc_process_setup+0xa8>
     c6a:	1c f4       	brge	.+6      	; 0xc72 <udc_process_setup+0x88>
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	39 f0       	breq	.+14     	; 0xc7e <udc_process_setup+0x94>
     c70:	81 c0       	rjmp	.+258    	; 0xd74 <udc_process_setup+0x18a>
     c72:	83 30       	cpi	r24, 0x03	; 3
     c74:	91 05       	cpc	r25, r1
     c76:	f1 f1       	breq	.+124    	; 0xcf4 <udc_process_setup+0x10a>
     c78:	0f 97       	sbiw	r24, 0x0f	; 15
     c7a:	69 f1       	breq	.+90     	; 0xcd6 <udc_process_setup+0xec>
     c7c:	7b c0       	rjmp	.+246    	; 0xd74 <udc_process_setup+0x18a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     c7e:	80 91 34 20 	lds	r24, 0x2034
     c82:	90 91 35 20 	lds	r25, 0x2035
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     c86:	dc 01       	movw	r26, r24
     c88:	6c 91       	ld	r22, X
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <udd_set_setup_payload>
     c90:	60 c0       	rjmp	.+192    	; 0xd52 <udc_process_setup+0x168>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     c92:	e0 91 34 20 	lds	r30, 0x2034
     c96:	f0 91 35 20 	lds	r31, 0x2035
     c9a:	81 89       	ldd	r24, Z+17	; 0x11
     c9c:	28 17       	cp	r18, r24
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <udc_process_setup+0xb8>
     ca0:	6b c0       	rjmp	.+214    	; 0xd78 <udc_process_setup+0x18e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     ca2:	c9 01       	movw	r24, r18
     ca4:	99 27       	eor	r25, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	e0 91 36 20 	lds	r30, 0x2036
     cb2:	f0 91 37 20 	lds	r31, 0x2037
     cb6:	e8 0f       	add	r30, r24
     cb8:	f9 1f       	adc	r31, r25
     cba:	80 81       	ld	r24, Z
     cbc:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     cbe:	fc 01       	movw	r30, r24
     cc0:	62 81       	ldd	r22, Z+2	; 0x02
     cc2:	73 81       	ldd	r23, Z+3	; 0x03
     cc4:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     cc8:	e0 91 ba 28 	lds	r30, 0x28BA
     ccc:	f0 91 bb 28 	lds	r31, 0x28BB
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	81 83       	std	Z+1, r24	; 0x01
     cd4:	3e c0       	rjmp	.+124    	; 0xd52 <udc_process_setup+0x168>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     cd6:	80 91 38 20 	lds	r24, 0x2038
     cda:	90 91 39 20 	lds	r25, 0x2039
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	09 f4       	brne	.+2      	; 0xce4 <udc_process_setup+0xfa>
     ce2:	4c c0       	rjmp	.+152    	; 0xd7c <udc_process_setup+0x192>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     ce4:	dc 01       	movw	r26, r24
     ce6:	12 96       	adiw	r26, 0x02	; 2
     ce8:	6d 91       	ld	r22, X+
     cea:	7c 91       	ld	r23, X
     cec:	13 97       	sbiw	r26, 0x03	; 3
     cee:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <udd_set_setup_payload>
     cf2:	2f c0       	rjmp	.+94     	; 0xd52 <udc_process_setup+0x168>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     cf4:	33 27       	eor	r19, r19
     cf6:	21 30       	cpi	r18, 0x01	; 1
     cf8:	31 05       	cpc	r19, r1
     cfa:	89 f0       	breq	.+34     	; 0xd1e <udc_process_setup+0x134>
     cfc:	48 f0       	brcs	.+18     	; 0xd10 <udc_process_setup+0x126>
     cfe:	22 30       	cpi	r18, 0x02	; 2
     d00:	31 05       	cpc	r19, r1
     d02:	09 f4       	brne	.+2      	; 0xd06 <udc_process_setup+0x11c>
     d04:	2a c2       	rjmp	.+1108   	; 0x115a <udc_process_setup+0x570>
     d06:	23 30       	cpi	r18, 0x03	; 3
     d08:	31 05       	cpc	r19, r1
     d0a:	09 f4       	brne	.+2      	; 0xd0e <udc_process_setup+0x124>
     d0c:	2a c2       	rjmp	.+1108   	; 0x1162 <udc_process_setup+0x578>
     d0e:	38 c0       	rjmp	.+112    	; 0xd80 <udc_process_setup+0x196>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     d10:	64 e0       	ldi	r22, 0x04	; 4
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	80 e3       	ldi	r24, 0x30	; 48
     d16:	90 e2       	ldi	r25, 0x20	; 32
     d18:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <udd_set_setup_payload>
     d1c:	1a c0       	rjmp	.+52     	; 0xd52 <udc_process_setup+0x168>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     d1e:	89 e2       	ldi	r24, 0x29	; 41
     d20:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     d22:	25 e0       	ldi	r18, 0x05	; 5
     d24:	38 2f       	mov	r19, r24
     d26:	a6 e1       	ldi	r26, 0x16	; 22
     d28:	b0 e2       	ldi	r27, 0x20	; 32
     d2a:	e8 2f       	mov	r30, r24
     d2c:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     d2e:	81 91       	ld	r24, Z+
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	8d 93       	st	X+, r24
     d34:	9d 93       	st	X+, r25
     d36:	8e 2f       	mov	r24, r30
     d38:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     d3a:	82 17       	cp	r24, r18
     d3c:	c0 f3       	brcs	.-16     	; 0xd2e <udc_process_setup+0x144>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     d3e:	22 0f       	add	r18, r18
     d40:	62 e0       	ldi	r22, 0x02	; 2
     d42:	62 0f       	add	r22, r18
     d44:	60 93 14 20 	sts	0x2014, r22
		udd_set_setup_payload(
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	84 e1       	ldi	r24, 0x14	; 20
     d4c:	90 e2       	ldi	r25, 0x20	; 32
     d4e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     d52:	80 91 b8 28 	lds	r24, 0x28B8
     d56:	90 91 b9 28 	lds	r25, 0x28B9
     d5a:	20 91 bc 28 	lds	r18, 0x28BC
     d5e:	30 91 bd 28 	lds	r19, 0x28BD
     d62:	82 17       	cp	r24, r18
     d64:	93 07       	cpc	r25, r19
     d66:	70 f4       	brcc	.+28     	; 0xd84 <udc_process_setup+0x19a>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     d68:	80 93 bc 28 	sts	0x28BC, r24
     d6c:	90 93 bd 28 	sts	0x28BD, r25
	}
	return true;
     d70:	01 e0       	ldi	r16, 0x01	; 1
     d72:	68 c1       	rjmp	.+720    	; 0x1044 <udc_process_setup+0x45a>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     d74:	00 e0       	ldi	r16, 0x00	; 0
     d76:	66 c1       	rjmp	.+716    	; 0x1044 <udc_process_setup+0x45a>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     d78:	00 e0       	ldi	r16, 0x00	; 0
     d7a:	64 c1       	rjmp	.+712    	; 0x1044 <udc_process_setup+0x45a>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     d7c:	00 e0       	ldi	r16, 0x00	; 0
     d7e:	62 c1       	rjmp	.+708    	; 0x1044 <udc_process_setup+0x45a>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     d80:	00 e0       	ldi	r16, 0x00	; 0
     d82:	60 c1       	rjmp	.+704    	; 0x1044 <udc_process_setup+0x45a>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     d84:	01 e0       	ldi	r16, 0x01	; 1
     d86:	5e c1       	rjmp	.+700    	; 0x1044 <udc_process_setup+0x45a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	41 f4       	brne	.+16     	; 0xd9c <udc_process_setup+0x1b2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	82 e1       	ldi	r24, 0x12	; 18
     d92:	97 e2       	ldi	r25, 0x27	; 39
     d94:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <udd_set_setup_payload>
	return true;
     d98:	01 e0       	ldi	r16, 0x01	; 1
     d9a:	54 c1       	rjmp	.+680    	; 0x1044 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     d9c:	00 e0       	ldi	r16, 0x00	; 0
     d9e:	52 c1       	rjmp	.+676    	; 0x1044 <udc_process_setup+0x45a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     da0:	21 30       	cpi	r18, 0x01	; 1
     da2:	09 f0       	breq	.+2      	; 0xda6 <udc_process_setup+0x1bc>
     da4:	40 c0       	rjmp	.+128    	; 0xe26 <udc_process_setup+0x23c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     da6:	30 91 b3 28 	lds	r19, 0x28B3
     daa:	3a 30       	cpi	r19, 0x0A	; 10
     dac:	e1 f5       	brne	.+120    	; 0xe26 <udc_process_setup+0x23c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	a1 f5       	brne	.+104    	; 0xe1a <udc_process_setup+0x230>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     db2:	80 91 12 27 	lds	r24, 0x2712
     db6:	88 23       	and	r24, r24
     db8:	91 f1       	breq	.+100    	; 0xe1e <udc_process_setup+0x234>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     dba:	c0 91 b6 28 	lds	r28, 0x28B6
     dbe:	d0 91 b7 28 	lds	r29, 0x28B7
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     dc2:	e0 90 10 27 	lds	r14, 0x2710
     dc6:	f0 90 11 27 	lds	r15, 0x2711
     dca:	d7 01       	movw	r26, r14
     dcc:	ed 91       	ld	r30, X+
     dce:	fc 91       	ld	r31, X
     dd0:	84 81       	ldd	r24, Z+4	; 0x04
     dd2:	c8 17       	cp	r28, r24
     dd4:	30 f5       	brcc	.+76     	; 0xe22 <udc_process_setup+0x238>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	8c 2f       	mov	r24, r28
     dda:	ff dd       	rcall	.-1026   	; 0x9da <udc_update_iface_desc>
     ddc:	08 2f       	mov	r16, r24
     dde:	88 23       	and	r24, r24
     de0:	09 f4       	brne	.+2      	; 0xde4 <udc_process_setup+0x1fa>
     de2:	30 c1       	rjmp	.+608    	; 0x1044 <udc_process_setup+0x45a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     de4:	ce 01       	movw	r24, r28
     de6:	99 27       	eor	r25, r25
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	d7 01       	movw	r26, r14
     dee:	12 96       	adiw	r26, 0x02	; 2
     df0:	ed 91       	ld	r30, X+
     df2:	fc 91       	ld	r31, X
     df4:	13 97       	sbiw	r26, 0x03	; 3
     df6:	e8 0f       	add	r30, r24
     df8:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     dfa:	01 90       	ld	r0, Z+
     dfc:	f0 81       	ld	r31, Z
     dfe:	e0 2d       	mov	r30, r0
     e00:	06 80       	ldd	r0, Z+6	; 0x06
     e02:	f7 81       	ldd	r31, Z+7	; 0x07
     e04:	e0 2d       	mov	r30, r0
     e06:	09 95       	icall
     e08:	80 93 14 27 	sts	0x2714, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	84 e1       	ldi	r24, 0x14	; 20
     e12:	97 e2       	ldi	r25, 0x27	; 39
     e14:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <udd_set_setup_payload>
     e18:	15 c1       	rjmp	.+554    	; 0x1044 <udc_process_setup+0x45a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     e1a:	00 e0       	ldi	r16, 0x00	; 0
     e1c:	13 c1       	rjmp	.+550    	; 0x1044 <udc_process_setup+0x45a>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     e1e:	00 e0       	ldi	r16, 0x00	; 0
     e20:	11 c1       	rjmp	.+546    	; 0x1044 <udc_process_setup+0x45a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     e22:	00 e0       	ldi	r16, 0x00	; 0
     e24:	0f c1       	rjmp	.+542    	; 0x1044 <udc_process_setup+0x45a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     e26:	22 30       	cpi	r18, 0x02	; 2
     e28:	09 f0       	breq	.+2      	; 0xe2c <udc_process_setup+0x242>
     e2a:	0e c1       	rjmp	.+540    	; 0x1048 <udc_process_setup+0x45e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     e2c:	20 91 b3 28 	lds	r18, 0x28B3
     e30:	21 11       	cpse	r18, r1
     e32:	03 c1       	rjmp	.+518    	; 0x103a <udc_process_setup+0x450>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     e34:	02 97       	sbiw	r24, 0x02	; 2
     e36:	81 f4       	brne	.+32     	; 0xe58 <udc_process_setup+0x26e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     e38:	80 91 b6 28 	lds	r24, 0x28B6
     e3c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <udd_ep_is_halted>
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	80 93 0c 27 	sts	0x270C, r24
     e46:	90 93 0d 27 	sts	0x270D, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     e4a:	62 e0       	ldi	r22, 0x02	; 2
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	8c e0       	ldi	r24, 0x0C	; 12
     e50:	97 e2       	ldi	r25, 0x27	; 39
     e52:	f0 d7       	rcall	.+4064   	; 0x1e34 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     e54:	01 e0       	ldi	r16, 0x01	; 1
     e56:	f6 c0       	rjmp	.+492    	; 0x1044 <udc_process_setup+0x45a>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     e58:	00 e0       	ldi	r16, 0x00	; 0
     e5a:	f4 c0       	rjmp	.+488    	; 0x1044 <udc_process_setup+0x45a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     e5c:	2f 71       	andi	r18, 0x1F	; 31
     e5e:	09 f0       	breq	.+2      	; 0xe62 <udc_process_setup+0x278>
     e60:	90 c0       	rjmp	.+288    	; 0xf82 <udc_process_setup+0x398>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     e62:	80 91 b3 28 	lds	r24, 0x28B3
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	09 f4       	brne	.+2      	; 0xe6c <udc_process_setup+0x282>
     e6a:	e9 c0       	rjmp	.+466    	; 0x103e <udc_process_setup+0x454>
     e6c:	18 f4       	brcc	.+6      	; 0xe74 <udc_process_setup+0x28a>
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	b1 f0       	breq	.+44     	; 0xe9e <udc_process_setup+0x2b4>
     e72:	87 c0       	rjmp	.+270    	; 0xf82 <udc_process_setup+0x398>
     e74:	85 30       	cpi	r24, 0x05	; 5
     e76:	19 f0       	breq	.+6      	; 0xe7e <udc_process_setup+0x294>
     e78:	89 30       	cpi	r24, 0x09	; 9
     e7a:	61 f1       	breq	.+88     	; 0xed4 <udc_process_setup+0x2ea>
     e7c:	82 c0       	rjmp	.+260    	; 0xf82 <udc_process_setup+0x398>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e7e:	80 91 b8 28 	lds	r24, 0x28B8
     e82:	90 91 b9 28 	lds	r25, 0x28B9
     e86:	89 2b       	or	r24, r25
     e88:	41 f4       	brne	.+16     	; 0xe9a <udc_process_setup+0x2b0>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     e8a:	87 ee       	ldi	r24, 0xE7	; 231
     e8c:	94 e0       	ldi	r25, 0x04	; 4
     e8e:	80 93 be 28 	sts	0x28BE, r24
     e92:	90 93 bf 28 	sts	0x28BF, r25
	return true;
     e96:	01 e0       	ldi	r16, 0x01	; 1
     e98:	d5 c0       	rjmp	.+426    	; 0x1044 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e9a:	00 e0       	ldi	r16, 0x00	; 0
     e9c:	d3 c0       	rjmp	.+422    	; 0x1044 <udc_process_setup+0x45a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e9e:	80 91 b8 28 	lds	r24, 0x28B8
     ea2:	90 91 b9 28 	lds	r25, 0x28B9
     ea6:	89 2b       	or	r24, r25
     ea8:	89 f4       	brne	.+34     	; 0xecc <udc_process_setup+0x2e2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     eaa:	80 91 b4 28 	lds	r24, 0x28B4
     eae:	90 91 b5 28 	lds	r25, 0x28B5
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	69 f4       	brne	.+26     	; 0xed0 <udc_process_setup+0x2e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     eb6:	80 91 16 27 	lds	r24, 0x2716
     eba:	90 91 17 27 	lds	r25, 0x2717
     ebe:	8d 7f       	andi	r24, 0xFD	; 253
     ec0:	80 93 16 27 	sts	0x2716, r24
     ec4:	90 93 17 27 	sts	0x2717, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     ec8:	01 e0       	ldi	r16, 0x01	; 1
     eca:	bc c0       	rjmp	.+376    	; 0x1044 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ecc:	00 e0       	ldi	r16, 0x00	; 0
     ece:	ba c0       	rjmp	.+372    	; 0x1044 <udc_process_setup+0x45a>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     ed0:	00 e0       	ldi	r16, 0x00	; 0
     ed2:	b8 c0       	rjmp	.+368    	; 0x1044 <udc_process_setup+0x45a>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     ed4:	80 91 b8 28 	lds	r24, 0x28B8
     ed8:	90 91 b9 28 	lds	r25, 0x28B9
     edc:	89 2b       	or	r24, r25
     ede:	09 f0       	breq	.+2      	; 0xee2 <udc_process_setup+0x2f8>
     ee0:	46 c0       	rjmp	.+140    	; 0xf6e <udc_process_setup+0x384>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     ee2:	9d d7       	rcall	.+3898   	; 0x1e1e <udd_getaddress>
     ee4:	88 23       	and	r24, r24
     ee6:	09 f4       	brne	.+2      	; 0xeea <udc_process_setup+0x300>
     ee8:	44 c0       	rjmp	.+136    	; 0xf72 <udc_process_setup+0x388>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     eea:	20 91 b4 28 	lds	r18, 0x28B4
     eee:	30 91 b5 28 	lds	r19, 0x28B5
     ef2:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     ef4:	e0 91 34 20 	lds	r30, 0x2034
     ef8:	f0 91 35 20 	lds	r31, 0x2035
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     efc:	81 89       	ldd	r24, Z+17	; 0x11
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	82 17       	cp	r24, r18
     f02:	93 07       	cpc	r25, r19
     f04:	c0 f1       	brcs	.+112    	; 0xf76 <udc_process_setup+0x38c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     f06:	1b de       	rcall	.-970    	; 0xb3e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     f08:	80 91 b4 28 	lds	r24, 0x28B4
     f0c:	90 91 b5 28 	lds	r25, 0x28B5
     f10:	80 93 12 27 	sts	0x2712, r24
	if (udc_num_configuration == 0) {
     f14:	88 23       	and	r24, r24
     f16:	89 f1       	breq	.+98     	; 0xf7a <udc_process_setup+0x390>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     f18:	99 27       	eor	r25, r25
     f1a:	81 50       	subi	r24, 0x01	; 1
     f1c:	90 4c       	sbci	r25, 0xC0	; 192
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	e0 91 36 20 	lds	r30, 0x2036
     f2a:	f0 91 37 20 	lds	r31, 0x2037
     f2e:	e8 0f       	add	r30, r24
     f30:	f9 1f       	adc	r31, r25
     f32:	e0 93 10 27 	sts	0x2710, r30
     f36:	f0 93 11 27 	sts	0x2711, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f3a:	01 90       	ld	r0, Z+
     f3c:	f0 81       	ld	r31, Z
     f3e:	e0 2d       	mov	r30, r0
     f40:	84 81       	ldd	r24, Z+4	; 0x04
     f42:	88 23       	and	r24, r24
     f44:	e1 f0       	breq	.+56     	; 0xf7e <udc_process_setup+0x394>
     f46:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	8c 2f       	mov	r24, r28
     f4c:	c2 dd       	rcall	.-1148   	; 0xad2 <udc_iface_enable>
     f4e:	08 2f       	mov	r16, r24
     f50:	88 23       	and	r24, r24
     f52:	09 f4       	brne	.+2      	; 0xf56 <udc_process_setup+0x36c>
     f54:	77 c0       	rjmp	.+238    	; 0x1044 <udc_process_setup+0x45a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     f56:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f58:	e0 91 10 27 	lds	r30, 0x2710
     f5c:	f0 91 11 27 	lds	r31, 0x2711
     f60:	01 90       	ld	r0, Z+
     f62:	f0 81       	ld	r31, Z
     f64:	e0 2d       	mov	r30, r0
     f66:	84 81       	ldd	r24, Z+4	; 0x04
     f68:	c8 17       	cp	r28, r24
     f6a:	70 f3       	brcs	.-36     	; 0xf48 <udc_process_setup+0x35e>
     f6c:	6b c0       	rjmp	.+214    	; 0x1044 <udc_process_setup+0x45a>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     f6e:	00 e0       	ldi	r16, 0x00	; 0
     f70:	69 c0       	rjmp	.+210    	; 0x1044 <udc_process_setup+0x45a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     f72:	00 e0       	ldi	r16, 0x00	; 0
     f74:	67 c0       	rjmp	.+206    	; 0x1044 <udc_process_setup+0x45a>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     f76:	00 e0       	ldi	r16, 0x00	; 0
     f78:	65 c0       	rjmp	.+202    	; 0x1044 <udc_process_setup+0x45a>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     f7a:	01 e0       	ldi	r16, 0x01	; 1
     f7c:	63 c0       	rjmp	.+198    	; 0x1044 <udc_process_setup+0x45a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     f7e:	01 e0       	ldi	r16, 0x01	; 1
     f80:	61 c0       	rjmp	.+194    	; 0x1044 <udc_process_setup+0x45a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     f82:	21 30       	cpi	r18, 0x01	; 1
     f84:	09 f5       	brne	.+66     	; 0xfc8 <udc_process_setup+0x3de>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     f86:	80 91 b3 28 	lds	r24, 0x28B3
     f8a:	8b 30       	cpi	r24, 0x0B	; 11
     f8c:	e9 f4       	brne	.+58     	; 0xfc8 <udc_process_setup+0x3de>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     f8e:	80 91 b8 28 	lds	r24, 0x28B8
     f92:	90 91 b9 28 	lds	r25, 0x28B9
     f96:	89 2b       	or	r24, r25
     f98:	99 f4       	brne	.+38     	; 0xfc0 <udc_process_setup+0x3d6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     f9a:	80 91 12 27 	lds	r24, 0x2712
     f9e:	88 23       	and	r24, r24
     fa0:	89 f0       	breq	.+34     	; 0xfc4 <udc_process_setup+0x3da>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     fa2:	c0 91 b6 28 	lds	r28, 0x28B6
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     fa6:	d0 91 b4 28 	lds	r29, 0x28B4

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     faa:	8c 2f       	mov	r24, r28
     fac:	50 dd       	rcall	.-1376   	; 0xa4e <udc_iface_disable>
     fae:	08 2f       	mov	r16, r24
     fb0:	88 23       	and	r24, r24
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <udc_process_setup+0x3cc>
     fb4:	47 c0       	rjmp	.+142    	; 0x1044 <udc_process_setup+0x45a>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     fb6:	6d 2f       	mov	r22, r29
     fb8:	8c 2f       	mov	r24, r28
     fba:	8b dd       	rcall	.-1258   	; 0xad2 <udc_iface_enable>
     fbc:	08 2f       	mov	r16, r24
     fbe:	42 c0       	rjmp	.+132    	; 0x1044 <udc_process_setup+0x45a>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     fc0:	00 e0       	ldi	r16, 0x00	; 0
     fc2:	40 c0       	rjmp	.+128    	; 0x1044 <udc_process_setup+0x45a>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     fc4:	00 e0       	ldi	r16, 0x00	; 0
     fc6:	3e c0       	rjmp	.+124    	; 0x1044 <udc_process_setup+0x45a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	09 f0       	breq	.+2      	; 0xfce <udc_process_setup+0x3e4>
     fcc:	3d c0       	rjmp	.+122    	; 0x1048 <udc_process_setup+0x45e>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     fce:	80 91 b3 28 	lds	r24, 0x28B3
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	19 f0       	breq	.+6      	; 0xfdc <udc_process_setup+0x3f2>
     fd6:	83 30       	cpi	r24, 0x03	; 3
     fd8:	b1 f0       	breq	.+44     	; 0x1006 <udc_process_setup+0x41c>
     fda:	33 c0       	rjmp	.+102    	; 0x1042 <udc_process_setup+0x458>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     fdc:	80 91 b8 28 	lds	r24, 0x28B8
     fe0:	90 91 b9 28 	lds	r25, 0x28B9
     fe4:	89 2b       	or	r24, r25
     fe6:	59 f4       	brne	.+22     	; 0xffe <udc_process_setup+0x414>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     fe8:	80 91 b4 28 	lds	r24, 0x28B4
     fec:	90 91 b5 28 	lds	r25, 0x28B5
     ff0:	89 2b       	or	r24, r25
     ff2:	39 f4       	brne	.+14     	; 0x1002 <udc_process_setup+0x418>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     ff4:	80 91 b6 28 	lds	r24, 0x28B6
     ff8:	a2 d7       	rcall	.+3908   	; 0x1f3e <udd_ep_clear_halt>
     ffa:	08 2f       	mov	r16, r24
     ffc:	23 c0       	rjmp	.+70     	; 0x1044 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ffe:	00 e0       	ldi	r16, 0x00	; 0
    1000:	21 c0       	rjmp	.+66     	; 0x1044 <udc_process_setup+0x45a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    1002:	00 e0       	ldi	r16, 0x00	; 0
    1004:	1f c0       	rjmp	.+62     	; 0x1044 <udc_process_setup+0x45a>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1006:	80 91 b8 28 	lds	r24, 0x28B8
    100a:	90 91 b9 28 	lds	r25, 0x28B9
    100e:	89 2b       	or	r24, r25
    1010:	81 f4       	brne	.+32     	; 0x1032 <udc_process_setup+0x448>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1012:	80 91 b4 28 	lds	r24, 0x28B4
    1016:	90 91 b5 28 	lds	r25, 0x28B5
    101a:	89 2b       	or	r24, r25
    101c:	61 f4       	brne	.+24     	; 0x1036 <udc_process_setup+0x44c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    101e:	c6 eb       	ldi	r28, 0xB6	; 182
    1020:	d8 e2       	ldi	r29, 0x28	; 40
    1022:	88 81       	ld	r24, Y
    1024:	0e 94 51 10 	call	0x20a2	; 0x20a2 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1028:	88 81       	ld	r24, Y
    102a:	0e 94 a7 10 	call	0x214e	; 0x214e <udd_ep_set_halt>
    102e:	08 2f       	mov	r16, r24
    1030:	09 c0       	rjmp	.+18     	; 0x1044 <udc_process_setup+0x45a>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1032:	00 e0       	ldi	r16, 0x00	; 0
    1034:	07 c0       	rjmp	.+14     	; 0x1044 <udc_process_setup+0x45a>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    1036:	00 e0       	ldi	r16, 0x00	; 0
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <udc_process_setup+0x45a>
				break;
			}
		}
#endif
	}
	return false;
    103a:	00 e0       	ldi	r16, 0x00	; 0
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <udc_process_setup+0x45a>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    103e:	00 e0       	ldi	r16, 0x00	; 0
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <udc_process_setup+0x45a>
				break;
			}
		}
#endif
	}
	return false;
    1042:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1044:	01 11       	cpse	r16, r1
    1046:	91 c0       	rjmp	.+290    	; 0x116a <udc_process_setup+0x580>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1048:	80 91 b2 28 	lds	r24, 0x28B2
    104c:	8f 71       	andi	r24, 0x1F	; 31
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	c1 f5       	brne	.+112    	; 0x10c2 <udc_process_setup+0x4d8>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1052:	80 91 12 27 	lds	r24, 0x2712
    1056:	88 23       	and	r24, r24
    1058:	a1 f1       	breq	.+104    	; 0x10c2 <udc_process_setup+0x4d8>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    105a:	c0 91 b6 28 	lds	r28, 0x28B6
    105e:	d0 91 b7 28 	lds	r29, 0x28B7
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1062:	00 91 10 27 	lds	r16, 0x2710
    1066:	10 91 11 27 	lds	r17, 0x2711
    106a:	d8 01       	movw	r26, r16
    106c:	ed 91       	ld	r30, X+
    106e:	fc 91       	ld	r31, X
    1070:	84 81       	ldd	r24, Z+4	; 0x04
    1072:	c8 17       	cp	r28, r24
    1074:	30 f5       	brcc	.+76     	; 0x10c2 <udc_process_setup+0x4d8>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	8c 2f       	mov	r24, r28
    107a:	af dc       	rcall	.-1698   	; 0x9da <udc_update_iface_desc>
    107c:	88 23       	and	r24, r24
    107e:	09 f1       	breq	.+66     	; 0x10c2 <udc_process_setup+0x4d8>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1080:	ce 01       	movw	r24, r28
    1082:	99 27       	eor	r25, r25
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	d8 01       	movw	r26, r16
    108a:	12 96       	adiw	r26, 0x02	; 2
    108c:	ed 91       	ld	r30, X+
    108e:	fc 91       	ld	r31, X
    1090:	13 97       	sbiw	r26, 0x03	; 3
    1092:	e8 0f       	add	r30, r24
    1094:	f9 1f       	adc	r31, r25
    1096:	00 81       	ld	r16, Z
    1098:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    109a:	d8 01       	movw	r26, r16
    109c:	16 96       	adiw	r26, 0x06	; 6
    109e:	ed 91       	ld	r30, X+
    10a0:	fc 91       	ld	r31, X
    10a2:	17 97       	sbiw	r26, 0x07	; 7
    10a4:	09 95       	icall
    10a6:	68 2f       	mov	r22, r24
    10a8:	8c 2f       	mov	r24, r28
    10aa:	97 dc       	rcall	.-1746   	; 0x9da <udc_update_iface_desc>
    10ac:	88 23       	and	r24, r24
    10ae:	49 f0       	breq	.+18     	; 0x10c2 <udc_process_setup+0x4d8>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    10b0:	d8 01       	movw	r26, r16
    10b2:	14 96       	adiw	r26, 0x04	; 4
    10b4:	ed 91       	ld	r30, X+
    10b6:	fc 91       	ld	r31, X
    10b8:	15 97       	sbiw	r26, 0x05	; 5
    10ba:	09 95       	icall
    10bc:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    10be:	81 11       	cpse	r24, r1
    10c0:	54 c0       	rjmp	.+168    	; 0x116a <udc_process_setup+0x580>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    10c2:	80 91 b2 28 	lds	r24, 0x28B2
    10c6:	8f 71       	andi	r24, 0x1F	; 31
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	d9 f5       	brne	.+118    	; 0x1142 <udc_process_setup+0x558>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    10cc:	80 91 12 27 	lds	r24, 0x2712
    10d0:	88 23       	and	r24, r24
    10d2:	89 f1       	breq	.+98     	; 0x1136 <udc_process_setup+0x54c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    10d4:	e0 91 10 27 	lds	r30, 0x2710
    10d8:	f0 91 11 27 	lds	r31, 0x2711
    10dc:	a0 81       	ld	r26, Z
    10de:	b1 81       	ldd	r27, Z+1	; 0x01
    10e0:	14 96       	adiw	r26, 0x04	; 4
    10e2:	8c 91       	ld	r24, X
    10e4:	88 23       	and	r24, r24
    10e6:	49 f1       	breq	.+82     	; 0x113a <udc_process_setup+0x550>
    10e8:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    10ea:	21 2f       	mov	r18, r17
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	22 0f       	add	r18, r18
    10f0:	33 1f       	adc	r19, r19
    10f2:	02 80       	ldd	r0, Z+2	; 0x02
    10f4:	f3 81       	ldd	r31, Z+3	; 0x03
    10f6:	e0 2d       	mov	r30, r0
    10f8:	e2 0f       	add	r30, r18
    10fa:	f3 1f       	adc	r31, r19
    10fc:	c0 81       	ld	r28, Z
    10fe:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1100:	ee 81       	ldd	r30, Y+6	; 0x06
    1102:	ff 81       	ldd	r31, Y+7	; 0x07
    1104:	09 95       	icall
    1106:	68 2f       	mov	r22, r24
    1108:	81 2f       	mov	r24, r17
    110a:	67 dc       	rcall	.-1842   	; 0x9da <udc_update_iface_desc>
    110c:	08 2f       	mov	r16, r24
    110e:	88 23       	and	r24, r24
    1110:	61 f1       	breq	.+88     	; 0x116a <udc_process_setup+0x580>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1112:	ec 81       	ldd	r30, Y+4	; 0x04
    1114:	fd 81       	ldd	r31, Y+5	; 0x05
    1116:	09 95       	icall
    1118:	08 2f       	mov	r16, r24
    111a:	81 11       	cpse	r24, r1
    111c:	26 c0       	rjmp	.+76     	; 0x116a <udc_process_setup+0x580>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    111e:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1120:	e0 91 10 27 	lds	r30, 0x2710
    1124:	f0 91 11 27 	lds	r31, 0x2711
    1128:	a0 81       	ld	r26, Z
    112a:	b1 81       	ldd	r27, Z+1	; 0x01
    112c:	14 96       	adiw	r26, 0x04	; 4
    112e:	8c 91       	ld	r24, X
    1130:	18 17       	cp	r17, r24
    1132:	d8 f2       	brcs	.-74     	; 0x10ea <udc_process_setup+0x500>
    1134:	1a c0       	rjmp	.+52     	; 0x116a <udc_process_setup+0x580>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1136:	00 e0       	ldi	r16, 0x00	; 0
    1138:	18 c0       	rjmp	.+48     	; 0x116a <udc_process_setup+0x580>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    113a:	00 e0       	ldi	r16, 0x00	; 0
    113c:	16 c0       	rjmp	.+44     	; 0x116a <udc_process_setup+0x580>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    113e:	00 e0       	ldi	r16, 0x00	; 0
    1140:	14 c0       	rjmp	.+40     	; 0x116a <udc_process_setup+0x580>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1142:	00 e0       	ldi	r16, 0x00	; 0
    1144:	12 c0       	rjmp	.+36     	; 0x116a <udc_process_setup+0x580>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1146:	82 2f       	mov	r24, r18
    1148:	80 76       	andi	r24, 0x60	; 96
    114a:	09 f0       	breq	.+2      	; 0x114e <udc_process_setup+0x564>
    114c:	7d cf       	rjmp	.-262    	; 0x1048 <udc_process_setup+0x45e>
    114e:	86 ce       	rjmp	.-756    	; 0xe5c <udc_process_setup+0x272>
    1150:	32 2f       	mov	r19, r18
    1152:	30 76       	andi	r19, 0x60	; 96
    1154:	09 f0       	breq	.+2      	; 0x1158 <udc_process_setup+0x56e>
    1156:	78 cf       	rjmp	.-272    	; 0x1048 <udc_process_setup+0x45e>
    1158:	67 cd       	rjmp	.-1330   	; 0xc28 <udc_process_setup+0x3e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    115a:	26 e0       	ldi	r18, 0x06	; 6
		str = udc_string_product_name;
    115c:	82 e2       	ldi	r24, 0x22	; 34
    115e:	90 e2       	ldi	r25, 0x20	; 32
    1160:	e1 cd       	rjmp	.-1086   	; 0xd24 <udc_process_setup+0x13a>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1162:	24 e0       	ldi	r18, 0x04	; 4
		str = udc_get_string_serial_name();
    1164:	8a e0       	ldi	r24, 0x0A	; 10
    1166:	91 e2       	ldi	r25, 0x21	; 33
    1168:	dd cd       	rjmp	.-1094   	; 0xd24 <udc_process_setup+0x13a>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    116a:	80 2f       	mov	r24, r16
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	08 95       	ret

0000117a <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    117a:	cf 92       	push	r12
    117c:	df 92       	push	r13
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	ec 01       	movw	r28, r24
    118c:	6a 01       	movw	r12, r20
    118e:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    1190:	db 01       	movw	r26, r22
    1192:	ca 01       	movw	r24, r20
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	a1 09       	sbc	r26, r1
    1198:	b1 09       	sbc	r27, r1
    119a:	bc 01       	movw	r22, r24
    119c:	cd 01       	movw	r24, r26
    119e:	60 0f       	add	r22, r16
    11a0:	71 1f       	adc	r23, r17
    11a2:	82 1f       	adc	r24, r18
    11a4:	93 1f       	adc	r25, r19
    11a6:	a7 01       	movw	r20, r14
    11a8:	96 01       	movw	r18, r12
    11aa:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__udivmodsi4>

	if (divisor > 128) {
    11ae:	21 38       	cpi	r18, 0x81	; 129
    11b0:	31 05       	cpc	r19, r1
    11b2:	41 05       	cpc	r20, r1
    11b4:	51 05       	cpc	r21, r1
    11b6:	f8 f4       	brcc	.+62     	; 0x11f6 <spi_xmega_set_baud_div+0x7c>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    11b8:	21 34       	cpi	r18, 0x41	; 65
    11ba:	60 f4       	brcc	.+24     	; 0x11d4 <spi_xmega_set_baud_div+0x5a>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    11bc:	21 32       	cpi	r18, 0x21	; 33
    11be:	60 f4       	brcc	.+24     	; 0x11d8 <spi_xmega_set_baud_div+0x5e>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    11c0:	21 31       	cpi	r18, 0x11	; 17
    11c2:	60 f4       	brcc	.+24     	; 0x11dc <spi_xmega_set_baud_div+0x62>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    11c4:	29 30       	cpi	r18, 0x09	; 9
    11c6:	60 f4       	brcc	.+24     	; 0x11e0 <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    11c8:	25 30       	cpi	r18, 0x05	; 5
    11ca:	60 f4       	brcc	.+24     	; 0x11e4 <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    11cc:	23 30       	cpi	r18, 0x03	; 3
    11ce:	60 f0       	brcs	.+24     	; 0x11e8 <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_PRESCALER_DIV4_gc;
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0b c0       	rjmp	.+22     	; 0x11ea <spi_xmega_set_baud_div+0x70>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    11d4:	93 e0       	ldi	r25, 0x03	; 3
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    11dc:	92 e8       	ldi	r25, 0x82	; 130
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    11e4:	91 e8       	ldi	r25, 0x81	; 129
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    11e8:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    11ea:	88 81       	ld	r24, Y
    11ec:	8c 77       	andi	r24, 0x7C	; 124
    11ee:	89 2b       	or	r24, r25
    11f0:	88 83       	st	Y, r24

	return 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <spi_xmega_set_baud_div+0x7e>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    11f6:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	ef 90       	pop	r14
    1204:	df 90       	pop	r13
    1206:	cf 90       	pop	r12
    1208:	08 95       	ret

0000120a <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    120e:	e0 91 18 27 	lds	r30, 0x2718
    1212:	f0 91 19 27 	lds	r31, 0x2719
    1216:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1218:	83 ff       	sbrs	r24, 3
    121a:	08 c0       	rjmp	.+16     	; 0x122c <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    121c:	88 60       	ori	r24, 0x08	; 8
    121e:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1224:	86 ef       	ldi	r24, 0xF6	; 246
    1226:	80 93 22 27 	sts	0x2722, r24
    122a:	89 c0       	rjmp	.+274    	; 0x133e <twim_interrupt_handler+0x134>
    122c:	98 2f       	mov	r25, r24
    122e:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1230:	31 f0       	breq	.+12     	; 0x123e <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1232:	83 e0       	ldi	r24, 0x03	; 3
    1234:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	80 93 22 27 	sts	0x2722, r24
    123c:	80 c0       	rjmp	.+256    	; 0x133e <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    123e:	86 ff       	sbrs	r24, 6
    1240:	45 c0       	rjmp	.+138    	; 0x12cc <twim_interrupt_handler+0xc2>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1242:	a0 91 1a 27 	lds	r26, 0x271A
    1246:	b0 91 1b 27 	lds	r27, 0x271B

	if (transfer.addr_count < pkg->addr_length) {
    124a:	80 91 1c 27 	lds	r24, 0x271C
    124e:	90 91 1d 27 	lds	r25, 0x271D
    1252:	14 96       	adiw	r26, 0x04	; 4
    1254:	2d 91       	ld	r18, X+
    1256:	3c 91       	ld	r19, X
    1258:	15 97       	sbiw	r26, 0x05	; 5
    125a:	82 17       	cp	r24, r18
    125c:	93 07       	cpc	r25, r19
    125e:	6c f4       	brge	.+26     	; 0x127a <twim_interrupt_handler+0x70>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1260:	9c 01       	movw	r18, r24
    1262:	2f 5f       	subi	r18, 0xFF	; 255
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	20 93 1c 27 	sts	0x271C, r18
    126a:	30 93 1d 27 	sts	0x271D, r19
    126e:	a8 0f       	add	r26, r24
    1270:	b9 1f       	adc	r27, r25
    1272:	11 96       	adiw	r26, 0x01	; 1
    1274:	8c 91       	ld	r24, X
    1276:	87 83       	std	Z+7, r24	; 0x07
    1278:	62 c0       	rjmp	.+196    	; 0x133e <twim_interrupt_handler+0x134>

	} else if (transfer.data_count < pkg->length) {
    127a:	80 91 1e 27 	lds	r24, 0x271E
    127e:	90 91 1f 27 	lds	r25, 0x271F
    1282:	18 96       	adiw	r26, 0x08	; 8
    1284:	2d 91       	ld	r18, X+
    1286:	3c 91       	ld	r19, X
    1288:	19 97       	sbiw	r26, 0x09	; 9
    128a:	82 17       	cp	r24, r18
    128c:	93 07       	cpc	r25, r19
    128e:	c8 f4       	brcc	.+50     	; 0x12c2 <twim_interrupt_handler+0xb8>

		if (transfer.read) {
    1290:	20 91 20 27 	lds	r18, 0x2720
    1294:	22 23       	and	r18, r18
    1296:	21 f0       	breq	.+8      	; 0x12a0 <twim_interrupt_handler+0x96>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1298:	86 81       	ldd	r24, Z+6	; 0x06
    129a:	81 60       	ori	r24, 0x01	; 1
    129c:	86 83       	std	Z+6, r24	; 0x06
    129e:	4f c0       	rjmp	.+158    	; 0x133e <twim_interrupt_handler+0x134>

		} else {
			const uint8_t * const data = pkg->buffer;
    12a0:	16 96       	adiw	r26, 0x06	; 6
    12a2:	2d 91       	ld	r18, X+
    12a4:	3c 91       	ld	r19, X
    12a6:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    12a8:	ac 01       	movw	r20, r24
    12aa:	4f 5f       	subi	r20, 0xFF	; 255
    12ac:	5f 4f       	sbci	r21, 0xFF	; 255
    12ae:	40 93 1e 27 	sts	0x271E, r20
    12b2:	50 93 1f 27 	sts	0x271F, r21
    12b6:	d9 01       	movw	r26, r18
    12b8:	a8 0f       	add	r26, r24
    12ba:	b9 1f       	adc	r27, r25
    12bc:	8c 91       	ld	r24, X
    12be:	87 83       	std	Z+7, r24	; 0x07
    12c0:	3e c0       	rjmp	.+124    	; 0x133e <twim_interrupt_handler+0x134>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    12c2:	83 e0       	ldi	r24, 0x03	; 3
    12c4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    12c6:	10 92 22 27 	sts	0x2722, r1
    12ca:	39 c0       	rjmp	.+114    	; 0x133e <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    12cc:	88 23       	and	r24, r24
    12ce:	a4 f5       	brge	.+104    	; 0x1338 <twim_interrupt_handler+0x12e>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    12d0:	a0 91 1a 27 	lds	r26, 0x271A
    12d4:	b0 91 1b 27 	lds	r27, 0x271B

	if (transfer.data_count < pkg->length) {
    12d8:	80 91 1e 27 	lds	r24, 0x271E
    12dc:	90 91 1f 27 	lds	r25, 0x271F
    12e0:	18 96       	adiw	r26, 0x08	; 8
    12e2:	2d 91       	ld	r18, X+
    12e4:	3c 91       	ld	r19, X
    12e6:	19 97       	sbiw	r26, 0x09	; 9
    12e8:	82 17       	cp	r24, r18
    12ea:	93 07       	cpc	r25, r19
    12ec:	f8 f4       	brcc	.+62     	; 0x132c <twim_interrupt_handler+0x122>

		uint8_t * const data = pkg->buffer;
    12ee:	16 96       	adiw	r26, 0x06	; 6
    12f0:	4d 91       	ld	r20, X+
    12f2:	5c 91       	ld	r21, X
    12f4:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    12f6:	9c 01       	movw	r18, r24
    12f8:	2f 5f       	subi	r18, 0xFF	; 255
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	20 93 1e 27 	sts	0x271E, r18
    1300:	30 93 1f 27 	sts	0x271F, r19
    1304:	67 81       	ldd	r22, Z+7	; 0x07
    1306:	ea 01       	movw	r28, r20
    1308:	c8 0f       	add	r28, r24
    130a:	d9 1f       	adc	r29, r25
    130c:	68 83       	st	Y, r22

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    130e:	18 96       	adiw	r26, 0x08	; 8
    1310:	8d 91       	ld	r24, X+
    1312:	9c 91       	ld	r25, X
    1314:	19 97       	sbiw	r26, 0x09	; 9
    1316:	28 17       	cp	r18, r24
    1318:	39 07       	cpc	r19, r25
    131a:	18 f4       	brcc	.+6      	; 0x1322 <twim_interrupt_handler+0x118>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	83 83       	std	Z+3, r24	; 0x03
    1320:	0e c0       	rjmp	.+28     	; 0x133e <twim_interrupt_handler+0x134>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1322:	87 e0       	ldi	r24, 0x07	; 7
    1324:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1326:	10 92 22 27 	sts	0x2722, r1
    132a:	09 c0       	rjmp	.+18     	; 0x133e <twim_interrupt_handler+0x134>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    132c:	83 e0       	ldi	r24, 0x03	; 3
    132e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1330:	89 ef       	ldi	r24, 0xF9	; 249
    1332:	80 93 22 27 	sts	0x2722, r24
    1336:	03 c0       	rjmp	.+6      	; 0x133e <twim_interrupt_handler+0x134>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1338:	8b ef       	ldi	r24, 0xFB	; 251
    133a:	80 93 22 27 	sts	0x2722, r24
	}
}
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	2f 93       	push	r18
    1350:	3f 93       	push	r19
    1352:	4f 93       	push	r20
    1354:	5f 93       	push	r21
    1356:	6f 93       	push	r22
    1358:	7f 93       	push	r23
    135a:	8f 93       	push	r24
    135c:	9f 93       	push	r25
    135e:	af 93       	push	r26
    1360:	bf 93       	push	r27
    1362:	ef 93       	push	r30
    1364:	ff 93       	push	r31
    1366:	51 df       	rcall	.-350    	; 0x120a <twim_interrupt_handler>
    1368:	ff 91       	pop	r31
    136a:	ef 91       	pop	r30
    136c:	bf 91       	pop	r27
    136e:	af 91       	pop	r26
    1370:	9f 91       	pop	r25
    1372:	8f 91       	pop	r24
    1374:	7f 91       	pop	r23
    1376:	6f 91       	pop	r22
    1378:	5f 91       	pop	r21
    137a:	4f 91       	pop	r20
    137c:	3f 91       	pop	r19
    137e:	2f 91       	pop	r18
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	2f 93       	push	r18
    1396:	3f 93       	push	r19
    1398:	4f 93       	push	r20
    139a:	5f 93       	push	r21
    139c:	6f 93       	push	r22
    139e:	7f 93       	push	r23
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	af 93       	push	r26
    13a6:	bf 93       	push	r27
    13a8:	ef 93       	push	r30
    13aa:	ff 93       	push	r31
    13ac:	2e df       	rcall	.-420    	; 0x120a <twim_interrupt_handler>
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	0f 90       	pop	r0
    13cc:	1f 90       	pop	r1
    13ce:	18 95       	reti

000013d0 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    13d0:	4f 92       	push	r4
    13d2:	5f 92       	push	r5
    13d4:	6f 92       	push	r6
    13d6:	7f 92       	push	r7
    13d8:	8f 92       	push	r8
    13da:	9f 92       	push	r9
    13dc:	af 92       	push	r10
    13de:	bf 92       	push	r11
    13e0:	cf 92       	push	r12
    13e2:	df 92       	push	r13
    13e4:	ef 92       	push	r14
    13e6:	ff 92       	push	r15
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	ec 01       	movw	r28, r24
    13f2:	4a 01       	movw	r8, r20
    13f4:	5b 01       	movw	r10, r22
    13f6:	28 01       	movw	r4, r16
    13f8:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    13fa:	d9 01       	movw	r26, r18
    13fc:	c8 01       	movw	r24, r16
    13fe:	68 94       	set
    1400:	12 f8       	bld	r1, 2
    1402:	b6 95       	lsr	r27
    1404:	a7 95       	ror	r26
    1406:	97 95       	ror	r25
    1408:	87 95       	ror	r24
    140a:	16 94       	lsr	r1
    140c:	d1 f7       	brne	.-12     	; 0x1402 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    140e:	b9 01       	movw	r22, r18
    1410:	a8 01       	movw	r20, r16
    1412:	03 2e       	mov	r0, r19
    1414:	36 e1       	ldi	r19, 0x16	; 22
    1416:	76 95       	lsr	r23
    1418:	67 95       	ror	r22
    141a:	57 95       	ror	r21
    141c:	47 95       	ror	r20
    141e:	3a 95       	dec	r19
    1420:	d1 f7       	brne	.-12     	; 0x1416 <usart_set_baudrate+0x46>
    1422:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1424:	2c 81       	ldd	r18, Y+4	; 0x04
    1426:	22 fd       	sbrc	r18, 2
    1428:	08 c0       	rjmp	.+16     	; 0x143a <usart_set_baudrate+0x6a>
		max_rate /= 2;
    142a:	b6 95       	lsr	r27
    142c:	a7 95       	ror	r26
    142e:	97 95       	ror	r25
    1430:	87 95       	ror	r24
		min_rate /= 2;
    1432:	76 95       	lsr	r23
    1434:	67 95       	ror	r22
    1436:	57 95       	ror	r21
    1438:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    143a:	88 15       	cp	r24, r8
    143c:	99 05       	cpc	r25, r9
    143e:	aa 05       	cpc	r26, r10
    1440:	bb 05       	cpc	r27, r11
    1442:	08 f4       	brcc	.+2      	; 0x1446 <usart_set_baudrate+0x76>
    1444:	a6 c0       	rjmp	.+332    	; 0x1592 <usart_set_baudrate+0x1c2>
    1446:	84 16       	cp	r8, r20
    1448:	95 06       	cpc	r9, r21
    144a:	a6 06       	cpc	r10, r22
    144c:	b7 06       	cpc	r11, r23
    144e:	08 f4       	brcc	.+2      	; 0x1452 <usart_set_baudrate+0x82>
    1450:	a2 c0       	rjmp	.+324    	; 0x1596 <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	82 fd       	sbrc	r24, 2
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <usart_set_baudrate+0x90>
		baud *= 2;
    1458:	88 0c       	add	r8, r8
    145a:	99 1c       	adc	r9, r9
    145c:	aa 1c       	adc	r10, r10
    145e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1460:	c3 01       	movw	r24, r6
    1462:	b2 01       	movw	r22, r4
    1464:	a5 01       	movw	r20, r10
    1466:	94 01       	movw	r18, r8
    1468:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    146c:	2f 3f       	cpi	r18, 0xFF	; 255
    146e:	31 05       	cpc	r19, r1
    1470:	41 05       	cpc	r20, r1
    1472:	51 05       	cpc	r21, r1
    1474:	08 f4       	brcc	.+2      	; 0x1478 <usart_set_baudrate+0xa8>
    1476:	91 c0       	rjmp	.+290    	; 0x159a <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    1478:	c1 2c       	mov	r12, r1
    147a:	d1 2c       	mov	r13, r1
    147c:	76 01       	movw	r14, r12
    147e:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1480:	19 ef       	ldi	r17, 0xF9	; 249
    1482:	05 c0       	rjmp	.+10     	; 0x148e <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    1484:	2c 15       	cp	r18, r12
    1486:	3d 05       	cpc	r19, r13
    1488:	4e 05       	cpc	r20, r14
    148a:	5f 05       	cpc	r21, r15
    148c:	68 f0       	brcs	.+26     	; 0x14a8 <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    148e:	cc 0c       	add	r12, r12
    1490:	dd 1c       	adc	r13, r13
    1492:	ee 1c       	adc	r14, r14
    1494:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    1496:	1d 3f       	cpi	r17, 0xFD	; 253
    1498:	14 f4       	brge	.+4      	; 0x149e <usart_set_baudrate+0xce>
			limit |= 1;
    149a:	68 94       	set
    149c:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    149e:	1f 5f       	subi	r17, 0xFF	; 255
    14a0:	17 30       	cpi	r17, 0x07	; 7
    14a2:	81 f7       	brne	.-32     	; 0x1484 <usart_set_baudrate+0xb4>
    14a4:	21 2f       	mov	r18, r17
    14a6:	50 c0       	rjmp	.+160    	; 0x1548 <usart_set_baudrate+0x178>
    14a8:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    14aa:	11 23       	and	r17, r17
    14ac:	0c f0       	brlt	.+2      	; 0x14b0 <usart_set_baudrate+0xe0>
    14ae:	4c c0       	rjmp	.+152    	; 0x1548 <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    14b0:	d5 01       	movw	r26, r10
    14b2:	c4 01       	movw	r24, r8
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	aa 1f       	adc	r26, r26
    14ba:	bb 1f       	adc	r27, r27
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	aa 1f       	adc	r26, r26
    14c2:	bb 1f       	adc	r27, r27
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	aa 1f       	adc	r26, r26
    14ca:	bb 1f       	adc	r27, r27
    14cc:	48 1a       	sub	r4, r24
    14ce:	59 0a       	sbc	r5, r25
    14d0:	6a 0a       	sbc	r6, r26
    14d2:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    14d4:	1e 3f       	cpi	r17, 0xFE	; 254
    14d6:	f4 f4       	brge	.+60     	; 0x1514 <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    14d8:	6d ef       	ldi	r22, 0xFD	; 253
    14da:	7f ef       	ldi	r23, 0xFF	; 255
    14dc:	61 1b       	sub	r22, r17
    14de:	71 09       	sbc	r23, r1
    14e0:	17 fd       	sbrc	r17, 7
    14e2:	73 95       	inc	r23
    14e4:	04 c0       	rjmp	.+8      	; 0x14ee <usart_set_baudrate+0x11e>
    14e6:	44 0c       	add	r4, r4
    14e8:	55 1c       	adc	r5, r5
    14ea:	66 1c       	adc	r6, r6
    14ec:	77 1c       	adc	r7, r7
    14ee:	6a 95       	dec	r22
    14f0:	d2 f7       	brpl	.-12     	; 0x14e6 <usart_set_baudrate+0x116>
    14f2:	d5 01       	movw	r26, r10
    14f4:	c4 01       	movw	r24, r8
    14f6:	b6 95       	lsr	r27
    14f8:	a7 95       	ror	r26
    14fa:	97 95       	ror	r25
    14fc:	87 95       	ror	r24
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	64 0d       	add	r22, r4
    1504:	75 1d       	adc	r23, r5
    1506:	86 1d       	adc	r24, r6
    1508:	97 1d       	adc	r25, r7
    150a:	a5 01       	movw	r20, r10
    150c:	94 01       	movw	r18, r8
    150e:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__udivmodsi4>
    1512:	36 c0       	rjmp	.+108    	; 0x1580 <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
    1514:	23 e0       	ldi	r18, 0x03	; 3
    1516:	21 0f       	add	r18, r17
    1518:	d5 01       	movw	r26, r10
    151a:	c4 01       	movw	r24, r8
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <usart_set_baudrate+0x156>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	aa 1f       	adc	r26, r26
    1524:	bb 1f       	adc	r27, r27
    1526:	2a 95       	dec	r18
    1528:	d2 f7       	brpl	.-12     	; 0x151e <usart_set_baudrate+0x14e>
    152a:	9c 01       	movw	r18, r24
    152c:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    152e:	b6 95       	lsr	r27
    1530:	a7 95       	ror	r26
    1532:	97 95       	ror	r25
    1534:	87 95       	ror	r24
    1536:	bc 01       	movw	r22, r24
    1538:	cd 01       	movw	r24, r26
    153a:	64 0d       	add	r22, r4
    153c:	75 1d       	adc	r23, r5
    153e:	86 1d       	adc	r24, r6
    1540:	97 1d       	adc	r25, r7
    1542:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__udivmodsi4>
    1546:	1c c0       	rjmp	.+56     	; 0x1580 <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1548:	2d 5f       	subi	r18, 0xFD	; 253
    154a:	d5 01       	movw	r26, r10
    154c:	c4 01       	movw	r24, r8
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <usart_set_baudrate+0x188>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	aa 1f       	adc	r26, r26
    1556:	bb 1f       	adc	r27, r27
    1558:	2a 95       	dec	r18
    155a:	d2 f7       	brpl	.-12     	; 0x1550 <usart_set_baudrate+0x180>
    155c:	9c 01       	movw	r18, r24
    155e:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1560:	b6 95       	lsr	r27
    1562:	a7 95       	ror	r26
    1564:	97 95       	ror	r25
    1566:	87 95       	ror	r24
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	64 0d       	add	r22, r4
    156e:	75 1d       	adc	r23, r5
    1570:	86 1d       	adc	r24, r6
    1572:	97 1d       	adc	r25, r7
    1574:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__udivmodsi4>
    1578:	21 50       	subi	r18, 0x01	; 1
    157a:	31 09       	sbc	r19, r1
    157c:	41 09       	sbc	r20, r1
    157e:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1580:	83 2f       	mov	r24, r19
    1582:	8f 70       	andi	r24, 0x0F	; 15
    1584:	12 95       	swap	r17
    1586:	10 7f       	andi	r17, 0xF0	; 240
    1588:	18 2b       	or	r17, r24
    158a:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    158c:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	18 c0       	rjmp	.+48     	; 0x15c2 <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	16 c0       	rjmp	.+44     	; 0x15c2 <usart_set_baudrate+0x1f2>
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	14 c0       	rjmp	.+40     	; 0x15c2 <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    159a:	d5 01       	movw	r26, r10
    159c:	c4 01       	movw	r24, r8
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	aa 1f       	adc	r26, r26
    15a4:	bb 1f       	adc	r27, r27
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	aa 1f       	adc	r26, r26
    15ac:	bb 1f       	adc	r27, r27
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	aa 1f       	adc	r26, r26
    15b4:	bb 1f       	adc	r27, r27
    15b6:	48 1a       	sub	r4, r24
    15b8:	59 0a       	sbc	r5, r25
    15ba:	6a 0a       	sbc	r6, r26
    15bc:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    15be:	19 ef       	ldi	r17, 0xF9	; 249
    15c0:	8b cf       	rjmp	.-234    	; 0x14d8 <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	ff 90       	pop	r15
    15cc:	ef 90       	pop	r14
    15ce:	df 90       	pop	r13
    15d0:	cf 90       	pop	r12
    15d2:	bf 90       	pop	r11
    15d4:	af 90       	pop	r10
    15d6:	9f 90       	pop	r9
    15d8:	8f 90       	pop	r8
    15da:	7f 90       	pop	r7
    15dc:	6f 90       	pop	r6
    15de:	5f 90       	pop	r5
    15e0:	4f 90       	pop	r4
    15e2:	08 95       	ret

000015e4 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	ec 01       	movw	r28, r24
    15ee:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <usart_init_rs232+0x12>
    15f4:	be c0       	rjmp	.+380    	; 0x1772 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    15f6:	80 3c       	cpi	r24, 0xC0	; 192
    15f8:	91 05       	cpc	r25, r1
    15fa:	21 f4       	brne	.+8      	; 0x1604 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    15fc:	60 e1       	ldi	r22, 0x10	; 16
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	b4 d7       	rcall	.+3944   	; 0x256a <sysclk_enable_module>
    1602:	b7 c0       	rjmp	.+366    	; 0x1772 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1604:	c1 15       	cp	r28, r1
    1606:	84 e0       	ldi	r24, 0x04	; 4
    1608:	d8 07       	cpc	r29, r24
    160a:	21 f4       	brne	.+8      	; 0x1614 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    160c:	64 e0       	ldi	r22, 0x04	; 4
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	ac d7       	rcall	.+3928   	; 0x256a <sysclk_enable_module>
    1612:	af c0       	rjmp	.+350    	; 0x1772 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1614:	c0 38       	cpi	r28, 0x80	; 128
    1616:	e1 e0       	ldi	r30, 0x01	; 1
    1618:	de 07       	cpc	r29, r30
    161a:	21 f4       	brne	.+8      	; 0x1624 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    161c:	62 e0       	ldi	r22, 0x02	; 2
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	a4 d7       	rcall	.+3912   	; 0x256a <sysclk_enable_module>
    1622:	a7 c0       	rjmp	.+334    	; 0x1772 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1624:	c1 15       	cp	r28, r1
    1626:	f1 e0       	ldi	r31, 0x01	; 1
    1628:	df 07       	cpc	r29, r31
    162a:	21 f4       	brne	.+8      	; 0x1634 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	9c d7       	rcall	.+3896   	; 0x256a <sysclk_enable_module>
    1632:	9f c0       	rjmp	.+318    	; 0x1772 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1634:	c0 38       	cpi	r28, 0x80	; 128
    1636:	83 e0       	ldi	r24, 0x03	; 3
    1638:	d8 07       	cpc	r29, r24
    163a:	21 f4       	brne	.+8      	; 0x1644 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	94 d7       	rcall	.+3880   	; 0x256a <sysclk_enable_module>
    1642:	97 c0       	rjmp	.+302    	; 0x1772 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1644:	c1 15       	cp	r28, r1
    1646:	e2 e0       	ldi	r30, 0x02	; 2
    1648:	de 07       	cpc	r29, r30
    164a:	21 f4       	brne	.+8      	; 0x1654 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    164c:	62 e0       	ldi	r22, 0x02	; 2
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	8c d7       	rcall	.+3864   	; 0x256a <sysclk_enable_module>
    1652:	8f c0       	rjmp	.+286    	; 0x1772 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1654:	c0 32       	cpi	r28, 0x20	; 32
    1656:	f3 e0       	ldi	r31, 0x03	; 3
    1658:	df 07       	cpc	r29, r31
    165a:	21 f4       	brne	.+8      	; 0x1664 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    165c:	64 e0       	ldi	r22, 0x04	; 4
    165e:	82 e0       	ldi	r24, 0x02	; 2
    1660:	84 d7       	rcall	.+3848   	; 0x256a <sysclk_enable_module>
    1662:	87 c0       	rjmp	.+270    	; 0x1772 <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1664:	c1 15       	cp	r28, r1
    1666:	88 e0       	ldi	r24, 0x08	; 8
    1668:	d8 07       	cpc	r29, r24
    166a:	21 f4       	brne	.+8      	; 0x1674 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	7c d7       	rcall	.+3832   	; 0x256a <sysclk_enable_module>
    1672:	7f c0       	rjmp	.+254    	; 0x1772 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1674:	c1 15       	cp	r28, r1
    1676:	e9 e0       	ldi	r30, 0x09	; 9
    1678:	de 07       	cpc	r29, r30
    167a:	21 f4       	brne	.+8      	; 0x1684 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	84 e0       	ldi	r24, 0x04	; 4
    1680:	74 d7       	rcall	.+3816   	; 0x256a <sysclk_enable_module>
    1682:	77 c0       	rjmp	.+238    	; 0x1772 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1684:	c1 15       	cp	r28, r1
    1686:	fa e0       	ldi	r31, 0x0A	; 10
    1688:	df 07       	cpc	r29, r31
    168a:	21 f4       	brne	.+8      	; 0x1694 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    168c:	61 e0       	ldi	r22, 0x01	; 1
    168e:	85 e0       	ldi	r24, 0x05	; 5
    1690:	6c d7       	rcall	.+3800   	; 0x256a <sysclk_enable_module>
    1692:	6f c0       	rjmp	.+222    	; 0x1772 <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1694:	c0 34       	cpi	r28, 0x40	; 64
    1696:	88 e0       	ldi	r24, 0x08	; 8
    1698:	d8 07       	cpc	r29, r24
    169a:	21 f4       	brne	.+8      	; 0x16a4 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    169c:	62 e0       	ldi	r22, 0x02	; 2
    169e:	83 e0       	ldi	r24, 0x03	; 3
    16a0:	64 d7       	rcall	.+3784   	; 0x256a <sysclk_enable_module>
    16a2:	67 c0       	rjmp	.+206    	; 0x1772 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    16a4:	c0 34       	cpi	r28, 0x40	; 64
    16a6:	e9 e0       	ldi	r30, 0x09	; 9
    16a8:	de 07       	cpc	r29, r30
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    16ac:	62 e0       	ldi	r22, 0x02	; 2
    16ae:	84 e0       	ldi	r24, 0x04	; 4
    16b0:	5c d7       	rcall	.+3768   	; 0x256a <sysclk_enable_module>
    16b2:	5f c0       	rjmp	.+190    	; 0x1772 <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    16b4:	c0 39       	cpi	r28, 0x90	; 144
    16b6:	f8 e0       	ldi	r31, 0x08	; 8
    16b8:	df 07       	cpc	r29, r31
    16ba:	21 f4       	brne	.+8      	; 0x16c4 <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    16bc:	64 e0       	ldi	r22, 0x04	; 4
    16be:	83 e0       	ldi	r24, 0x03	; 3
    16c0:	54 d7       	rcall	.+3752   	; 0x256a <sysclk_enable_module>
    16c2:	57 c0       	rjmp	.+174    	; 0x1772 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    16c4:	c0 39       	cpi	r28, 0x90	; 144
    16c6:	89 e0       	ldi	r24, 0x09	; 9
    16c8:	d8 07       	cpc	r29, r24
    16ca:	21 f4       	brne	.+8      	; 0x16d4 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    16cc:	64 e0       	ldi	r22, 0x04	; 4
    16ce:	84 e0       	ldi	r24, 0x04	; 4
    16d0:	4c d7       	rcall	.+3736   	; 0x256a <sysclk_enable_module>
    16d2:	4f c0       	rjmp	.+158    	; 0x1772 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    16d4:	c0 39       	cpi	r28, 0x90	; 144
    16d6:	ea e0       	ldi	r30, 0x0A	; 10
    16d8:	de 07       	cpc	r29, r30
    16da:	21 f4       	brne	.+8      	; 0x16e4 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    16dc:	64 e0       	ldi	r22, 0x04	; 4
    16de:	85 e0       	ldi	r24, 0x05	; 5
    16e0:	44 d7       	rcall	.+3720   	; 0x256a <sysclk_enable_module>
    16e2:	47 c0       	rjmp	.+142    	; 0x1772 <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    16e4:	c0 3c       	cpi	r28, 0xC0	; 192
    16e6:	f8 e0       	ldi	r31, 0x08	; 8
    16e8:	df 07       	cpc	r29, r31
    16ea:	21 f4       	brne	.+8      	; 0x16f4 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    16ec:	68 e0       	ldi	r22, 0x08	; 8
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	3c d7       	rcall	.+3704   	; 0x256a <sysclk_enable_module>
    16f2:	3f c0       	rjmp	.+126    	; 0x1772 <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    16f4:	c0 3c       	cpi	r28, 0xC0	; 192
    16f6:	89 e0       	ldi	r24, 0x09	; 9
    16f8:	d8 07       	cpc	r29, r24
    16fa:	21 f4       	brne	.+8      	; 0x1704 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    16fc:	68 e0       	ldi	r22, 0x08	; 8
    16fe:	84 e0       	ldi	r24, 0x04	; 4
    1700:	34 d7       	rcall	.+3688   	; 0x256a <sysclk_enable_module>
    1702:	37 c0       	rjmp	.+110    	; 0x1772 <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1704:	c0 3a       	cpi	r28, 0xA0	; 160
    1706:	e8 e0       	ldi	r30, 0x08	; 8
    1708:	de 07       	cpc	r29, r30
    170a:	21 f4       	brne	.+8      	; 0x1714 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    170c:	60 e1       	ldi	r22, 0x10	; 16
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	2c d7       	rcall	.+3672   	; 0x256a <sysclk_enable_module>
    1712:	2f c0       	rjmp	.+94     	; 0x1772 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1714:	c0 3a       	cpi	r28, 0xA0	; 160
    1716:	f9 e0       	ldi	r31, 0x09	; 9
    1718:	df 07       	cpc	r29, r31
    171a:	21 f4       	brne	.+8      	; 0x1724 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    171c:	60 e1       	ldi	r22, 0x10	; 16
    171e:	84 e0       	ldi	r24, 0x04	; 4
    1720:	24 d7       	rcall	.+3656   	; 0x256a <sysclk_enable_module>
    1722:	27 c0       	rjmp	.+78     	; 0x1772 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1724:	c0 3a       	cpi	r28, 0xA0	; 160
    1726:	8a e0       	ldi	r24, 0x0A	; 10
    1728:	d8 07       	cpc	r29, r24
    172a:	21 f4       	brne	.+8      	; 0x1734 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    172c:	60 e1       	ldi	r22, 0x10	; 16
    172e:	85 e0       	ldi	r24, 0x05	; 5
    1730:	1c d7       	rcall	.+3640   	; 0x256a <sysclk_enable_module>
    1732:	1f c0       	rjmp	.+62     	; 0x1772 <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1734:	c0 3b       	cpi	r28, 0xB0	; 176
    1736:	e8 e0       	ldi	r30, 0x08	; 8
    1738:	de 07       	cpc	r29, r30
    173a:	21 f4       	brne	.+8      	; 0x1744 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    173c:	60 e2       	ldi	r22, 0x20	; 32
    173e:	83 e0       	ldi	r24, 0x03	; 3
    1740:	14 d7       	rcall	.+3624   	; 0x256a <sysclk_enable_module>
    1742:	17 c0       	rjmp	.+46     	; 0x1772 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1744:	c0 3b       	cpi	r28, 0xB0	; 176
    1746:	f9 e0       	ldi	r31, 0x09	; 9
    1748:	df 07       	cpc	r29, r31
    174a:	21 f4       	brne	.+8      	; 0x1754 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    174c:	60 e2       	ldi	r22, 0x20	; 32
    174e:	84 e0       	ldi	r24, 0x04	; 4
    1750:	0c d7       	rcall	.+3608   	; 0x256a <sysclk_enable_module>
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1754:	c0 38       	cpi	r28, 0x80	; 128
    1756:	84 e0       	ldi	r24, 0x04	; 4
    1758:	d8 07       	cpc	r29, r24
    175a:	21 f4       	brne	.+8      	; 0x1764 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    175c:	60 e4       	ldi	r22, 0x40	; 64
    175e:	83 e0       	ldi	r24, 0x03	; 3
    1760:	04 d7       	rcall	.+3592   	; 0x256a <sysclk_enable_module>
    1762:	07 c0       	rjmp	.+14     	; 0x1772 <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1764:	c0 3a       	cpi	r28, 0xA0	; 160
    1766:	e4 e0       	ldi	r30, 0x04	; 4
    1768:	de 07       	cpc	r29, r30
    176a:	19 f4       	brne	.+6      	; 0x1772 <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    176c:	60 e4       	ldi	r22, 0x40	; 64
    176e:	85 e0       	ldi	r24, 0x05	; 5
    1770:	fc d6       	rcall	.+3576   	; 0x256a <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	8f 73       	andi	r24, 0x3F	; 63
    1776:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1778:	f8 01       	movw	r30, r16
    177a:	94 81       	ldd	r25, Z+4	; 0x04
    177c:	85 81       	ldd	r24, Z+5	; 0x05
    177e:	89 2b       	or	r24, r25
    1780:	96 81       	ldd	r25, Z+6	; 0x06
    1782:	99 23       	and	r25, r25
    1784:	11 f0       	breq	.+4      	; 0x178a <usart_init_rs232+0x1a6>
    1786:	98 e0       	ldi	r25, 0x08	; 8
    1788:	01 c0       	rjmp	.+2      	; 0x178c <usart_init_rs232+0x1a8>
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	89 2b       	or	r24, r25
    178e:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1790:	f8 01       	movw	r30, r16
    1792:	40 81       	ld	r20, Z
    1794:	51 81       	ldd	r21, Z+1	; 0x01
    1796:	62 81       	ldd	r22, Z+2	; 0x02
    1798:	73 81       	ldd	r23, Z+3	; 0x03
    179a:	00 e0       	ldi	r16, 0x00	; 0
    179c:	1c e6       	ldi	r17, 0x6C	; 108
    179e:	2c ed       	ldi	r18, 0xDC	; 220
    17a0:	32 e0       	ldi	r19, 0x02	; 2
    17a2:	ce 01       	movw	r24, r28
    17a4:	15 de       	rcall	.-982    	; 0x13d0 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	98 60       	ori	r25, 0x08	; 8
    17aa:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	90 61       	ori	r25, 0x10	; 16
    17b0:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	08 95       	ret

000017bc <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    17bc:	81 11       	cpse	r24, r1
    17be:	18 c0       	rjmp	.+48     	; 0x17f0 <udd_sleep_mode+0x34>
    17c0:	90 91 50 28 	lds	r25, 0x2850
    17c4:	99 23       	and	r25, r25
    17c6:	89 f0       	breq	.+34     	; 0x17ea <udd_sleep_mode+0x2e>
    17c8:	9f b7       	in	r25, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	e3 ec       	ldi	r30, 0xC3	; 195
    17ce:	f8 e2       	ldi	r31, 0x28	; 40
    17d0:	20 81       	ld	r18, Z
    17d2:	21 50       	subi	r18, 0x01	; 1
    17d4:	20 83       	st	Z, r18
    17d6:	9f bf       	out	0x3f, r25	; 63
    17d8:	08 c0       	rjmp	.+16     	; 0x17ea <udd_sleep_mode+0x2e>
    17da:	9f b7       	in	r25, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	e3 ec       	ldi	r30, 0xC3	; 195
    17e0:	f8 e2       	ldi	r31, 0x28	; 40
    17e2:	20 81       	ld	r18, Z
    17e4:	2f 5f       	subi	r18, 0xFF	; 255
    17e6:	20 83       	st	Z, r18
    17e8:	9f bf       	out	0x3f, r25	; 63
    17ea:	80 93 50 28 	sts	0x2850, r24
    17ee:	08 95       	ret
    17f0:	90 91 50 28 	lds	r25, 0x2850
    17f4:	99 23       	and	r25, r25
    17f6:	89 f3       	breq	.-30     	; 0x17da <udd_sleep_mode+0x1e>
    17f8:	f8 cf       	rjmp	.-16     	; 0x17ea <udd_sleep_mode+0x2e>

000017fa <udd_ctrl_init>:
    17fa:	0f 93       	push	r16
    17fc:	e8 ec       	ldi	r30, 0xC8	; 200
    17fe:	f4 e0       	ldi	r31, 0x04	; 4
    1800:	80 81       	ld	r24, Z
    1802:	8f 7d       	andi	r24, 0xDF	; 223
    1804:	80 83       	st	Z, r24
    1806:	80 81       	ld	r24, Z
    1808:	8f 7d       	andi	r24, 0xDF	; 223
    180a:	80 83       	st	Z, r24
    180c:	e4 e2       	ldi	r30, 0x24	; 36
    180e:	f8 e2       	ldi	r31, 0x28	; 40
    1810:	02 e0       	ldi	r16, 0x02	; 2
    1812:	05 93       	las	Z, r16
    1814:	10 92 26 28 	sts	0x2826, r1
    1818:	10 92 27 28 	sts	0x2827, r1
    181c:	00 e2       	ldi	r16, 0x20	; 32
    181e:	06 93       	lac	Z, r16
    1820:	00 e4       	ldi	r16, 0x40	; 64
    1822:	06 93       	lac	Z, r16
    1824:	ec e1       	ldi	r30, 0x1C	; 28
    1826:	f8 e2       	ldi	r31, 0x28	; 40
    1828:	00 e2       	ldi	r16, 0x20	; 32
    182a:	06 93       	lac	Z, r16
    182c:	00 e4       	ldi	r16, 0x40	; 64
    182e:	06 93       	lac	Z, r16
    1830:	10 92 be 28 	sts	0x28BE, r1
    1834:	10 92 bf 28 	sts	0x28BF, r1
    1838:	10 92 c0 28 	sts	0x28C0, r1
    183c:	10 92 c1 28 	sts	0x28C1, r1
    1840:	10 92 bc 28 	sts	0x28BC, r1
    1844:	10 92 bd 28 	sts	0x28BD, r1
    1848:	10 92 0c 28 	sts	0x280C, r1
    184c:	0f 91       	pop	r16
    184e:	08 95       	ret

00001850 <udd_ctrl_stall_data>:
    1850:	0f 93       	push	r16
    1852:	85 e0       	ldi	r24, 0x05	; 5
    1854:	80 93 0c 28 	sts	0x280C, r24
    1858:	e5 e2       	ldi	r30, 0x25	; 37
    185a:	f8 e2       	ldi	r31, 0x28	; 40
    185c:	04 e0       	ldi	r16, 0x04	; 4
    185e:	05 93       	las	Z, r16
    1860:	ed e1       	ldi	r30, 0x1D	; 29
    1862:	f8 e2       	ldi	r31, 0x28	; 40
    1864:	04 e0       	ldi	r16, 0x04	; 4
    1866:	05 93       	las	Z, r16
    1868:	0f 91       	pop	r16
    186a:	08 95       	ret

0000186c <udd_ctrl_send_zlp_in>:
    186c:	0f 93       	push	r16
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	80 93 0c 28 	sts	0x280C, r24
    1874:	10 92 26 28 	sts	0x2826, r1
    1878:	10 92 27 28 	sts	0x2827, r1
    187c:	e4 e2       	ldi	r30, 0x24	; 36
    187e:	f8 e2       	ldi	r31, 0x28	; 40
    1880:	02 e0       	ldi	r16, 0x02	; 2
    1882:	06 93       	lac	Z, r16
    1884:	0f 91       	pop	r16
    1886:	08 95       	ret

00001888 <udd_ctrl_endofrequest>:
    1888:	e0 91 be 28 	lds	r30, 0x28BE
    188c:	f0 91 bf 28 	lds	r31, 0x28BF
    1890:	30 97       	sbiw	r30, 0x00	; 0
    1892:	09 f0       	breq	.+2      	; 0x1896 <udd_ctrl_endofrequest+0xe>
    1894:	09 95       	icall
    1896:	08 95       	ret

00001898 <udd_ctrl_in_sent>:
    1898:	0f 93       	push	r16
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	80 91 0c 28 	lds	r24, 0x280C
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	19 f4       	brne	.+6      	; 0x18ac <udd_ctrl_in_sent+0x14>
    18a6:	f0 df       	rcall	.-32     	; 0x1888 <udd_ctrl_endofrequest>
    18a8:	a8 df       	rcall	.-176    	; 0x17fa <udd_ctrl_init>
    18aa:	60 c0       	rjmp	.+192    	; 0x196c <udd_ctrl_in_sent+0xd4>
    18ac:	80 91 08 28 	lds	r24, 0x2808
    18b0:	90 91 09 28 	lds	r25, 0x2809
    18b4:	c0 91 bc 28 	lds	r28, 0x28BC
    18b8:	d0 91 bd 28 	lds	r29, 0x28BD
    18bc:	c8 1b       	sub	r28, r24
    18be:	d9 0b       	sbc	r29, r25
    18c0:	71 f5       	brne	.+92     	; 0x191e <udd_ctrl_in_sent+0x86>
    18c2:	20 91 0a 28 	lds	r18, 0x280A
    18c6:	30 91 0b 28 	lds	r19, 0x280B
    18ca:	82 0f       	add	r24, r18
    18cc:	93 1f       	adc	r25, r19
    18ce:	80 93 0a 28 	sts	0x280A, r24
    18d2:	90 93 0b 28 	sts	0x280B, r25
    18d6:	20 91 b8 28 	lds	r18, 0x28B8
    18da:	30 91 b9 28 	lds	r19, 0x28B9
    18de:	82 17       	cp	r24, r18
    18e0:	93 07       	cpc	r25, r19
    18e2:	21 f0       	breq	.+8      	; 0x18ec <udd_ctrl_in_sent+0x54>
    18e4:	80 91 23 27 	lds	r24, 0x2723
    18e8:	88 23       	and	r24, r24
    18ea:	41 f0       	breq	.+16     	; 0x18fc <udd_ctrl_in_sent+0x64>
    18ec:	84 e0       	ldi	r24, 0x04	; 4
    18ee:	80 93 0c 28 	sts	0x280C, r24
    18f2:	ec e1       	ldi	r30, 0x1C	; 28
    18f4:	f8 e2       	ldi	r31, 0x28	; 40
    18f6:	02 e0       	ldi	r16, 0x02	; 2
    18f8:	06 93       	lac	Z, r16
    18fa:	38 c0       	rjmp	.+112    	; 0x196c <udd_ctrl_in_sent+0xd4>
    18fc:	e0 91 c0 28 	lds	r30, 0x28C0
    1900:	f0 91 c1 28 	lds	r31, 0x28C1
    1904:	30 97       	sbiw	r30, 0x00	; 0
    1906:	99 f0       	breq	.+38     	; 0x192e <udd_ctrl_in_sent+0x96>
    1908:	09 95       	icall
    190a:	88 23       	and	r24, r24
    190c:	81 f0       	breq	.+32     	; 0x192e <udd_ctrl_in_sent+0x96>
    190e:	10 92 08 28 	sts	0x2808, r1
    1912:	10 92 09 28 	sts	0x2809, r1
    1916:	c0 91 bc 28 	lds	r28, 0x28BC
    191a:	d0 91 bd 28 	lds	r29, 0x28BD
    191e:	c0 34       	cpi	r28, 0x40	; 64
    1920:	d1 05       	cpc	r29, r1
    1922:	28 f0       	brcs	.+10     	; 0x192e <udd_ctrl_in_sent+0x96>
    1924:	10 92 23 27 	sts	0x2723, r1
    1928:	c0 e4       	ldi	r28, 0x40	; 64
    192a:	d0 e0       	ldi	r29, 0x00	; 0
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <udd_ctrl_in_sent+0x9c>
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	80 93 23 27 	sts	0x2723, r24
    1934:	c0 93 26 28 	sts	0x2826, r28
    1938:	d0 93 27 28 	sts	0x2827, r29
    193c:	80 91 08 28 	lds	r24, 0x2808
    1940:	90 91 09 28 	lds	r25, 0x2809
    1944:	20 91 ba 28 	lds	r18, 0x28BA
    1948:	30 91 bb 28 	lds	r19, 0x28BB
    194c:	28 0f       	add	r18, r24
    194e:	39 1f       	adc	r19, r25
    1950:	20 93 28 28 	sts	0x2828, r18
    1954:	30 93 29 28 	sts	0x2829, r19
    1958:	c8 0f       	add	r28, r24
    195a:	d9 1f       	adc	r29, r25
    195c:	c0 93 08 28 	sts	0x2808, r28
    1960:	d0 93 09 28 	sts	0x2809, r29
    1964:	e4 e2       	ldi	r30, 0x24	; 36
    1966:	f8 e2       	ldi	r31, 0x28	; 40
    1968:	02 e0       	ldi	r16, 0x02	; 2
    196a:	06 93       	lac	Z, r16
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	0f 91       	pop	r16
    1972:	08 95       	ret

00001974 <udd_ep_get_size>:
    1974:	fc 01       	movw	r30, r24
    1976:	81 81       	ldd	r24, Z+1	; 0x01
    1978:	87 70       	andi	r24, 0x07	; 7
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	fc 01       	movw	r30, r24
    197e:	31 97       	sbiw	r30, 0x01	; 1
    1980:	e7 30       	cpi	r30, 0x07	; 7
    1982:	f1 05       	cpc	r31, r1
    1984:	20 f4       	brcc	.+8      	; 0x198e <udd_ep_get_size+0x1a>
    1986:	e2 50       	subi	r30, 0x02	; 2
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	0c 94 e4 26 	jmp	0x4dc8	; 0x4dc8 <__tablejump2__>
    198e:	88 e0       	ldi	r24, 0x08	; 8
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	08 95       	ret
    1994:	80 e2       	ldi	r24, 0x20	; 32
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	08 95       	ret
    199a:	80 e4       	ldi	r24, 0x40	; 64
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	08 95       	ret
    19a0:	80 e8       	ldi	r24, 0x80	; 128
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	08 95       	ret
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	08 95       	ret
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	92 e0       	ldi	r25, 0x02	; 2
    19b0:	08 95       	ret
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
    19b4:	93 e0       	ldi	r25, 0x03	; 3
    19b6:	08 95       	ret
    19b8:	80 e1       	ldi	r24, 0x10	; 16
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	08 95       	ret

000019be <udd_ep_get_job>:
    19be:	28 2f       	mov	r18, r24
    19c0:	2f 70       	andi	r18, 0x0F	; 15
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	22 0f       	add	r18, r18
    19c6:	33 1f       	adc	r19, r19
    19c8:	99 27       	eor	r25, r25
    19ca:	87 fd       	sbrc	r24, 7
    19cc:	90 95       	com	r25
    19ce:	88 27       	eor	r24, r24
    19d0:	99 0f       	add	r25, r25
    19d2:	88 1f       	adc	r24, r24
    19d4:	99 27       	eor	r25, r25
    19d6:	82 0f       	add	r24, r18
    19d8:	93 1f       	adc	r25, r19
    19da:	02 97       	sbiw	r24, 0x02	; 2
    19dc:	9c 01       	movw	r18, r24
    19de:	22 0f       	add	r18, r18
    19e0:	33 1f       	adc	r19, r19
    19e2:	22 0f       	add	r18, r18
    19e4:	33 1f       	adc	r19, r19
    19e6:	22 0f       	add	r18, r18
    19e8:	33 1f       	adc	r19, r19
    19ea:	82 0f       	add	r24, r18
    19ec:	93 1f       	adc	r25, r19
    19ee:	8c 55       	subi	r24, 0x5C	; 92
    19f0:	98 4d       	sbci	r25, 0xD8	; 216
    19f2:	08 95       	ret

000019f4 <udd_ctrl_interrupt_tc_setup>:
    19f4:	0f 93       	push	r16
    19f6:	cf 93       	push	r28
    19f8:	80 91 cc 04 	lds	r24, 0x04CC
    19fc:	80 ff       	sbrs	r24, 0
    19fe:	62 c0       	rjmp	.+196    	; 0x1ac4 <udd_ctrl_interrupt_tc_setup+0xd0>
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	80 93 cc 04 	sts	0x04CC, r24
    1a06:	ec e1       	ldi	r30, 0x1C	; 28
    1a08:	f8 e2       	ldi	r31, 0x28	; 40
    1a0a:	00 e8       	ldi	r16, 0x80	; 128
    1a0c:	06 93       	lac	Z, r16
    1a0e:	e4 e2       	ldi	r30, 0x24	; 36
    1a10:	f8 e2       	ldi	r31, 0x28	; 40
    1a12:	00 e8       	ldi	r16, 0x80	; 128
    1a14:	06 93       	lac	Z, r16
    1a16:	80 93 ca 04 	sts	0x04CA, r24
    1a1a:	ec e1       	ldi	r30, 0x1C	; 28
    1a1c:	f8 e2       	ldi	r31, 0x28	; 40
    1a1e:	00 e1       	ldi	r16, 0x10	; 16
    1a20:	06 93       	lac	Z, r16
    1a22:	80 91 0c 28 	lds	r24, 0x280C
    1a26:	88 23       	and	r24, r24
    1a28:	29 f0       	breq	.+10     	; 0x1a34 <udd_ctrl_interrupt_tc_setup+0x40>
    1a2a:	83 50       	subi	r24, 0x03	; 3
    1a2c:	82 30       	cpi	r24, 0x02	; 2
    1a2e:	08 f4       	brcc	.+2      	; 0x1a32 <udd_ctrl_interrupt_tc_setup+0x3e>
    1a30:	2b df       	rcall	.-426    	; 0x1888 <udd_ctrl_endofrequest>
    1a32:	e3 de       	rcall	.-570    	; 0x17fa <udd_ctrl_init>
    1a34:	80 91 1e 28 	lds	r24, 0x281E
    1a38:	90 91 1f 28 	lds	r25, 0x281F
    1a3c:	08 97       	sbiw	r24, 0x08	; 8
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <udd_ctrl_interrupt_tc_setup+0x4e>
    1a40:	43 c0       	rjmp	.+134    	; 0x1ac8 <udd_ctrl_interrupt_tc_setup+0xd4>
    1a42:	88 e0       	ldi	r24, 0x08	; 8
    1a44:	e8 ec       	ldi	r30, 0xC8	; 200
    1a46:	f7 e2       	ldi	r31, 0x27	; 39
    1a48:	a2 eb       	ldi	r26, 0xB2	; 178
    1a4a:	b8 e2       	ldi	r27, 0x28	; 40
    1a4c:	01 90       	ld	r0, Z+
    1a4e:	0d 92       	st	X+, r0
    1a50:	8a 95       	dec	r24
    1a52:	e1 f7       	brne	.-8      	; 0x1a4c <udd_ctrl_interrupt_tc_setup+0x58>
    1a54:	e8 ec       	ldi	r30, 0xC8	; 200
    1a56:	f4 e0       	ldi	r31, 0x04	; 4
    1a58:	80 81       	ld	r24, Z
    1a5a:	80 62       	ori	r24, 0x20	; 32
    1a5c:	80 83       	st	Z, r24
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 62       	ori	r24, 0x20	; 32
    1a62:	80 83       	st	Z, r24
    1a64:	c2 d8       	rcall	.-3708   	; 0xbea <udc_process_setup>
    1a66:	c8 2f       	mov	r28, r24
    1a68:	81 11       	cpse	r24, r1
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <udd_ctrl_interrupt_tc_setup+0x7e>
    1a6c:	f1 de       	rcall	.-542    	; 0x1850 <udd_ctrl_stall_data>
    1a6e:	c1 e0       	ldi	r28, 0x01	; 1
    1a70:	2c c0       	rjmp	.+88     	; 0x1aca <udd_ctrl_interrupt_tc_setup+0xd6>
    1a72:	80 91 b2 28 	lds	r24, 0x28B2
    1a76:	88 23       	and	r24, r24
    1a78:	6c f4       	brge	.+26     	; 0x1a94 <udd_ctrl_interrupt_tc_setup+0xa0>
    1a7a:	10 92 0a 28 	sts	0x280A, r1
    1a7e:	10 92 0b 28 	sts	0x280B, r1
    1a82:	10 92 08 28 	sts	0x2808, r1
    1a86:	10 92 09 28 	sts	0x2809, r1
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	80 93 0c 28 	sts	0x280C, r24
    1a90:	03 df       	rcall	.-506    	; 0x1898 <udd_ctrl_in_sent>
    1a92:	1b c0       	rjmp	.+54     	; 0x1aca <udd_ctrl_interrupt_tc_setup+0xd6>
    1a94:	20 91 b8 28 	lds	r18, 0x28B8
    1a98:	30 91 b9 28 	lds	r19, 0x28B9
    1a9c:	23 2b       	or	r18, r19
    1a9e:	11 f4       	brne	.+4      	; 0x1aa4 <udd_ctrl_interrupt_tc_setup+0xb0>
    1aa0:	e5 de       	rcall	.-566    	; 0x186c <udd_ctrl_send_zlp_in>
    1aa2:	13 c0       	rjmp	.+38     	; 0x1aca <udd_ctrl_interrupt_tc_setup+0xd6>
    1aa4:	10 92 0a 28 	sts	0x280A, r1
    1aa8:	10 92 0b 28 	sts	0x280B, r1
    1aac:	10 92 08 28 	sts	0x2808, r1
    1ab0:	10 92 09 28 	sts	0x2809, r1
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	80 93 0c 28 	sts	0x280C, r24
    1aba:	ec e1       	ldi	r30, 0x1C	; 28
    1abc:	f8 e2       	ldi	r31, 0x28	; 40
    1abe:	02 e0       	ldi	r16, 0x02	; 2
    1ac0:	06 93       	lac	Z, r16
    1ac2:	03 c0       	rjmp	.+6      	; 0x1aca <udd_ctrl_interrupt_tc_setup+0xd6>
    1ac4:	c0 e0       	ldi	r28, 0x00	; 0
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <udd_ctrl_interrupt_tc_setup+0xd6>
    1ac8:	c1 e0       	ldi	r28, 0x01	; 1
    1aca:	8c 2f       	mov	r24, r28
    1acc:	cf 91       	pop	r28
    1ace:	0f 91       	pop	r16
    1ad0:	08 95       	ret

00001ad2 <udd_ep_trans_complet>:
    1ad2:	bf 92       	push	r11
    1ad4:	cf 92       	push	r12
    1ad6:	df 92       	push	r13
    1ad8:	ef 92       	push	r14
    1ada:	ff 92       	push	r15
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	b8 2e       	mov	r11, r24
    1ae6:	6b df       	rcall	.-298    	; 0x19be <udd_ep_get_job>
    1ae8:	ec 01       	movw	r28, r24
    1aea:	1b 2d       	mov	r17, r11
    1aec:	11 1f       	adc	r17, r17
    1aee:	11 27       	eor	r17, r17
    1af0:	11 1f       	adc	r17, r17
    1af2:	8b 2d       	mov	r24, r11
    1af4:	8f 70       	andi	r24, 0x0F	; 15
    1af6:	e8 2e       	mov	r14, r24
    1af8:	f1 2c       	mov	r15, r1
    1afa:	ee 0c       	add	r14, r14
    1afc:	ff 1c       	adc	r15, r15
    1afe:	e1 0e       	add	r14, r17
    1b00:	f1 1c       	adc	r15, r1
    1b02:	c7 01       	movw	r24, r14
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	9c 01       	movw	r18, r24
    1b12:	24 5e       	subi	r18, 0xE4	; 228
    1b14:	37 4d       	sbci	r19, 0xD7	; 215
    1b16:	79 01       	movw	r14, r18
    1b18:	c9 01       	movw	r24, r18
    1b1a:	2c df       	rcall	.-424    	; 0x1974 <udd_ep_get_size>
    1b1c:	6c 01       	movw	r12, r24
    1b1e:	11 23       	and	r17, r17
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <udd_ep_trans_complet+0x52>
    1b22:	5b c0       	rjmp	.+182    	; 0x1bda <udd_ep_trans_complet+0x108>
    1b24:	d7 01       	movw	r26, r14
    1b26:	16 96       	adiw	r26, 0x06	; 6
    1b28:	2d 91       	ld	r18, X+
    1b2a:	3c 91       	ld	r19, X
    1b2c:	17 97       	sbiw	r26, 0x07	; 7
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
    1b32:	28 0f       	add	r18, r24
    1b34:	39 1f       	adc	r19, r25
    1b36:	2d 83       	std	Y+5, r18	; 0x05
    1b38:	3e 83       	std	Y+6, r19	; 0x06
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	28 17       	cp	r18, r24
    1b40:	39 07       	cpc	r19, r25
    1b42:	c9 f1       	breq	.+114    	; 0x1bb6 <udd_ep_trans_complet+0xe4>
    1b44:	fc 01       	movw	r30, r24
    1b46:	e2 1b       	sub	r30, r18
    1b48:	f3 0b       	sbc	r31, r19
    1b4a:	9f 01       	movw	r18, r30
    1b4c:	21 15       	cp	r18, r1
    1b4e:	f4 e0       	ldi	r31, 0x04	; 4
    1b50:	3f 07       	cpc	r19, r31
    1b52:	40 f0       	brcs	.+16     	; 0x1b64 <udd_ep_trans_complet+0x92>
    1b54:	2f ef       	ldi	r18, 0xFF	; 255
    1b56:	33 e0       	ldi	r19, 0x03	; 3
    1b58:	c9 01       	movw	r24, r18
    1b5a:	b6 01       	movw	r22, r12
    1b5c:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__udivmodhi4>
    1b60:	28 1b       	sub	r18, r24
    1b62:	39 0b       	sbc	r19, r25
    1b64:	88 81       	ld	r24, Y
    1b66:	81 ff       	sbrs	r24, 1
    1b68:	0a c0       	rjmp	.+20     	; 0x1b7e <udd_ep_trans_complet+0xac>
    1b6a:	c9 01       	movw	r24, r18
    1b6c:	b6 01       	movw	r22, r12
    1b6e:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__udivmodhi4>
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	89 2b       	or	r24, r25
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <udd_ep_trans_complet+0xa8>
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	94 2f       	mov	r25, r20
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <udd_ep_trans_complet+0xae>
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	88 81       	ld	r24, Y
    1b82:	90 fb       	bst	r25, 0
    1b84:	81 f9       	bld	r24, 1
    1b86:	88 83       	st	Y, r24
    1b88:	d7 01       	movw	r26, r14
    1b8a:	16 96       	adiw	r26, 0x06	; 6
    1b8c:	1d 92       	st	X+, r1
    1b8e:	1c 92       	st	X, r1
    1b90:	17 97       	sbiw	r26, 0x07	; 7
    1b92:	12 96       	adiw	r26, 0x02	; 2
    1b94:	2d 93       	st	X+, r18
    1b96:	3c 93       	st	X, r19
    1b98:	13 97       	sbiw	r26, 0x03	; 3
    1b9a:	29 81       	ldd	r18, Y+1	; 0x01
    1b9c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	82 0f       	add	r24, r18
    1ba4:	93 1f       	adc	r25, r19
    1ba6:	14 96       	adiw	r26, 0x04	; 4
    1ba8:	8d 93       	st	X+, r24
    1baa:	9c 93       	st	X, r25
    1bac:	15 97       	sbiw	r26, 0x05	; 5
    1bae:	f7 01       	movw	r30, r14
    1bb0:	02 e0       	ldi	r16, 0x02	; 2
    1bb2:	06 93       	lac	Z, r16
    1bb4:	98 c0       	rjmp	.+304    	; 0x1ce6 <udd_ep_trans_complet+0x214>
    1bb6:	88 81       	ld	r24, Y
    1bb8:	81 ff       	sbrs	r24, 1
    1bba:	87 c0       	rjmp	.+270    	; 0x1cca <udd_ep_trans_complet+0x1f8>
    1bbc:	8d 7f       	andi	r24, 0xFD	; 253
    1bbe:	88 83       	st	Y, r24
    1bc0:	d7 01       	movw	r26, r14
    1bc2:	16 96       	adiw	r26, 0x06	; 6
    1bc4:	1d 92       	st	X+, r1
    1bc6:	1c 92       	st	X, r1
    1bc8:	17 97       	sbiw	r26, 0x07	; 7
    1bca:	12 96       	adiw	r26, 0x02	; 2
    1bcc:	1d 92       	st	X+, r1
    1bce:	1c 92       	st	X, r1
    1bd0:	13 97       	sbiw	r26, 0x03	; 3
    1bd2:	f7 01       	movw	r30, r14
    1bd4:	02 e0       	ldi	r16, 0x02	; 2
    1bd6:	06 93       	lac	Z, r16
    1bd8:	86 c0       	rjmp	.+268    	; 0x1ce6 <udd_ep_trans_complet+0x214>
    1bda:	d7 01       	movw	r26, r14
    1bdc:	12 96       	adiw	r26, 0x02	; 2
    1bde:	0d 91       	ld	r16, X+
    1be0:	1c 91       	ld	r17, X
    1be2:	13 97       	sbiw	r26, 0x03	; 3
    1be4:	88 81       	ld	r24, Y
    1be6:	82 ff       	sbrs	r24, 2
    1be8:	15 c0       	rjmp	.+42     	; 0x1c14 <udd_ep_trans_complet+0x142>
    1bea:	e9 81       	ldd	r30, Y+1	; 0x01
    1bec:	fa 81       	ldd	r31, Y+2	; 0x02
    1bee:	2d 81       	ldd	r18, Y+5	; 0x05
    1bf0:	3e 81       	ldd	r19, Y+6	; 0x06
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf6:	b6 01       	movw	r22, r12
    1bf8:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__udivmodhi4>
    1bfc:	b0 e4       	ldi	r27, 0x40	; 64
    1bfe:	bb 9e       	mul	r11, r27
    1c00:	b0 01       	movw	r22, r0
    1c02:	11 24       	eor	r1, r1
    1c04:	6c 51       	subi	r22, 0x1C	; 28
    1c06:	79 4d       	sbci	r23, 0xD9	; 217
    1c08:	ac 01       	movw	r20, r24
    1c0a:	cf 01       	movw	r24, r30
    1c0c:	82 0f       	add	r24, r18
    1c0e:	93 1f       	adc	r25, r19
    1c10:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <memcpy>
    1c14:	2d 81       	ldd	r18, Y+5	; 0x05
    1c16:	3e 81       	ldd	r19, Y+6	; 0x06
    1c18:	20 0f       	add	r18, r16
    1c1a:	31 1f       	adc	r19, r17
    1c1c:	2d 83       	std	Y+5, r18	; 0x05
    1c1e:	3e 83       	std	Y+6, r19	; 0x06
    1c20:	eb 81       	ldd	r30, Y+3	; 0x03
    1c22:	fc 81       	ldd	r31, Y+4	; 0x04
    1c24:	e2 17       	cp	r30, r18
    1c26:	f3 07       	cpc	r31, r19
    1c28:	10 f4       	brcc	.+4      	; 0x1c2e <udd_ep_trans_complet+0x15c>
    1c2a:	ed 83       	std	Y+5, r30	; 0x05
    1c2c:	fe 83       	std	Y+6, r31	; 0x06
    1c2e:	d7 01       	movw	r26, r14
    1c30:	16 96       	adiw	r26, 0x06	; 6
    1c32:	8d 91       	ld	r24, X+
    1c34:	9c 91       	ld	r25, X
    1c36:	17 97       	sbiw	r26, 0x07	; 7
    1c38:	80 17       	cp	r24, r16
    1c3a:	91 07       	cpc	r25, r17
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <udd_ep_trans_complet+0x16e>
    1c3e:	45 c0       	rjmp	.+138    	; 0x1cca <udd_ep_trans_complet+0x1f8>
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	9e 81       	ldd	r25, Y+6	; 0x06
    1c44:	e8 17       	cp	r30, r24
    1c46:	f9 07       	cpc	r31, r25
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <udd_ep_trans_complet+0x17a>
    1c4a:	3f c0       	rjmp	.+126    	; 0x1cca <udd_ep_trans_complet+0x1f8>
    1c4c:	e8 1b       	sub	r30, r24
    1c4e:	f9 0b       	sbc	r31, r25
    1c50:	e1 15       	cp	r30, r1
    1c52:	b4 e0       	ldi	r27, 0x04	; 4
    1c54:	fb 07       	cpc	r31, r27
    1c56:	48 f0       	brcs	.+18     	; 0x1c6a <udd_ep_trans_complet+0x198>
    1c58:	ef ef       	ldi	r30, 0xFF	; 255
    1c5a:	f3 e0       	ldi	r31, 0x03	; 3
    1c5c:	cf 01       	movw	r24, r30
    1c5e:	b6 01       	movw	r22, r12
    1c60:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__udivmodhi4>
    1c64:	e8 1b       	sub	r30, r24
    1c66:	f9 0b       	sbc	r31, r25
    1c68:	06 c0       	rjmp	.+12     	; 0x1c76 <udd_ep_trans_complet+0x1a4>
    1c6a:	cf 01       	movw	r24, r30
    1c6c:	b6 01       	movw	r22, r12
    1c6e:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__udivmodhi4>
    1c72:	e8 1b       	sub	r30, r24
    1c74:	f9 0b       	sbc	r31, r25
    1c76:	d7 01       	movw	r26, r14
    1c78:	12 96       	adiw	r26, 0x02	; 2
    1c7a:	1d 92       	st	X+, r1
    1c7c:	1c 92       	st	X, r1
    1c7e:	13 97       	sbiw	r26, 0x03	; 3
    1c80:	ec 15       	cp	r30, r12
    1c82:	fd 05       	cpc	r31, r13
    1c84:	78 f4       	brcc	.+30     	; 0x1ca4 <udd_ep_trans_complet+0x1d2>
    1c86:	88 81       	ld	r24, Y
    1c88:	84 60       	ori	r24, 0x04	; 4
    1c8a:	88 83       	st	Y, r24
    1c8c:	b0 e4       	ldi	r27, 0x40	; 64
    1c8e:	bb 9e       	mul	r11, r27
    1c90:	c0 01       	movw	r24, r0
    1c92:	11 24       	eor	r1, r1
    1c94:	8c 51       	subi	r24, 0x1C	; 28
    1c96:	99 4d       	sbci	r25, 0xD9	; 217
    1c98:	f7 01       	movw	r30, r14
    1c9a:	84 83       	std	Z+4, r24	; 0x04
    1c9c:	95 83       	std	Z+5, r25	; 0x05
    1c9e:	c6 82       	std	Z+6, r12	; 0x06
    1ca0:	d7 82       	std	Z+7, r13	; 0x07
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <udd_ep_trans_complet+0x1f0>
    1ca4:	29 81       	ldd	r18, Y+1	; 0x01
    1ca6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    1caa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cac:	82 0f       	add	r24, r18
    1cae:	93 1f       	adc	r25, r19
    1cb0:	d7 01       	movw	r26, r14
    1cb2:	14 96       	adiw	r26, 0x04	; 4
    1cb4:	8d 93       	st	X+, r24
    1cb6:	9c 93       	st	X, r25
    1cb8:	15 97       	sbiw	r26, 0x05	; 5
    1cba:	16 96       	adiw	r26, 0x06	; 6
    1cbc:	ed 93       	st	X+, r30
    1cbe:	fc 93       	st	X, r31
    1cc0:	17 97       	sbiw	r26, 0x07	; 7
    1cc2:	f7 01       	movw	r30, r14
    1cc4:	02 e0       	ldi	r16, 0x02	; 2
    1cc6:	06 93       	lac	Z, r16
    1cc8:	0e c0       	rjmp	.+28     	; 0x1ce6 <udd_ep_trans_complet+0x214>
    1cca:	88 81       	ld	r24, Y
    1ccc:	80 ff       	sbrs	r24, 0
    1cce:	0b c0       	rjmp	.+22     	; 0x1ce6 <udd_ep_trans_complet+0x214>
    1cd0:	8e 7f       	andi	r24, 0xFE	; 254
    1cd2:	88 83       	st	Y, r24
    1cd4:	ef 81       	ldd	r30, Y+7	; 0x07
    1cd6:	f8 85       	ldd	r31, Y+8	; 0x08
    1cd8:	30 97       	sbiw	r30, 0x00	; 0
    1cda:	29 f0       	breq	.+10     	; 0x1ce6 <udd_ep_trans_complet+0x214>
    1cdc:	6d 81       	ldd	r22, Y+5	; 0x05
    1cde:	7e 81       	ldd	r23, Y+6	; 0x06
    1ce0:	4b 2d       	mov	r20, r11
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	09 95       	icall
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	ff 90       	pop	r15
    1cf0:	ef 90       	pop	r14
    1cf2:	df 90       	pop	r13
    1cf4:	cf 90       	pop	r12
    1cf6:	bf 90       	pop	r11
    1cf8:	08 95       	ret

00001cfa <udd_attach>:
    1cfa:	cf 93       	push	r28
    1cfc:	cf b7       	in	r28, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	5c dd       	rcall	.-1352   	; 0x17bc <udd_sleep_mode>
    1d04:	ea ec       	ldi	r30, 0xCA	; 202
    1d06:	f4 e0       	ldi	r31, 0x04	; 4
    1d08:	80 e4       	ldi	r24, 0x40	; 64
    1d0a:	80 83       	st	Z, r24
    1d0c:	80 e2       	ldi	r24, 0x20	; 32
    1d0e:	80 83       	st	Z, r24
    1d10:	e1 ec       	ldi	r30, 0xC1	; 193
    1d12:	f4 e0       	ldi	r31, 0x04	; 4
    1d14:	80 81       	ld	r24, Z
    1d16:	81 60       	ori	r24, 0x01	; 1
    1d18:	80 83       	st	Z, r24
    1d1a:	a9 ec       	ldi	r26, 0xC9	; 201
    1d1c:	b4 e0       	ldi	r27, 0x04	; 4
    1d1e:	8c 91       	ld	r24, X
    1d20:	82 60       	ori	r24, 0x02	; 2
    1d22:	8c 93       	st	X, r24
    1d24:	e8 ec       	ldi	r30, 0xC8	; 200
    1d26:	f4 e0       	ldi	r31, 0x04	; 4
    1d28:	80 81       	ld	r24, Z
    1d2a:	80 64       	ori	r24, 0x40	; 64
    1d2c:	80 83       	st	Z, r24
    1d2e:	8c 91       	ld	r24, X
    1d30:	81 60       	ori	r24, 0x01	; 1
    1d32:	8c 93       	st	X, r24
    1d34:	80 81       	ld	r24, Z
    1d36:	80 68       	ori	r24, 0x80	; 128
    1d38:	80 83       	st	Z, r24
    1d3a:	cf bf       	out	0x3f, r28	; 63
    1d3c:	cf 91       	pop	r28
    1d3e:	08 95       	ret

00001d40 <udd_enable>:
    1d40:	cf 93       	push	r28
    1d42:	80 e3       	ldi	r24, 0x30	; 48
    1d44:	1e d4       	rcall	.+2108   	; 0x2582 <sysclk_enable_usb>
    1d46:	e0 ec       	ldi	r30, 0xC0	; 192
    1d48:	f4 e0       	ldi	r31, 0x04	; 4
    1d4a:	80 81       	ld	r24, Z
    1d4c:	80 64       	ori	r24, 0x40	; 64
    1d4e:	80 83       	st	Z, r24
    1d50:	cf b7       	in	r28, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	10 92 1d 28 	sts	0x281D, r1
    1d58:	10 92 25 28 	sts	0x2825, r1
    1d5c:	10 92 2d 28 	sts	0x282D, r1
    1d60:	10 92 35 28 	sts	0x2835, r1
    1d64:	10 92 3d 28 	sts	0x283D, r1
    1d68:	10 92 45 28 	sts	0x2845, r1
    1d6c:	e4 ea       	ldi	r30, 0xA4	; 164
    1d6e:	f7 e2       	ldi	r31, 0x27	; 39
    1d70:	80 81       	ld	r24, Z
    1d72:	8e 7f       	andi	r24, 0xFE	; 254
    1d74:	80 83       	st	Z, r24
    1d76:	ed ea       	ldi	r30, 0xAD	; 173
    1d78:	f7 e2       	ldi	r31, 0x27	; 39
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8e 7f       	andi	r24, 0xFE	; 254
    1d7e:	80 83       	st	Z, r24
    1d80:	e6 eb       	ldi	r30, 0xB6	; 182
    1d82:	f7 e2       	ldi	r31, 0x27	; 39
    1d84:	80 81       	ld	r24, Z
    1d86:	8e 7f       	andi	r24, 0xFE	; 254
    1d88:	80 83       	st	Z, r24
    1d8a:	ef eb       	ldi	r30, 0xBF	; 191
    1d8c:	f7 e2       	ldi	r31, 0x27	; 39
    1d8e:	80 81       	ld	r24, Z
    1d90:	8e 7f       	andi	r24, 0xFE	; 254
    1d92:	80 83       	st	Z, r24
    1d94:	6a e1       	ldi	r22, 0x1A	; 26
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	ec d4       	rcall	.+2520   	; 0x2774 <nvm_read_byte>
    1d9c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d9e:	19 f0       	breq	.+6      	; 0x1da6 <udd_enable+0x66>
    1da0:	80 93 fa 04 	sts	0x04FA, r24
    1da4:	03 c0       	rjmp	.+6      	; 0x1dac <udd_enable+0x6c>
    1da6:	8f e1       	ldi	r24, 0x1F	; 31
    1da8:	80 93 fa 04 	sts	0x04FA, r24
    1dac:	6b e1       	ldi	r22, 0x1B	; 27
    1dae:	70 e0       	ldi	r23, 0x00	; 0
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	e0 d4       	rcall	.+2496   	; 0x2774 <nvm_read_byte>
    1db4:	8f 3f       	cpi	r24, 0xFF	; 255
    1db6:	19 f0       	breq	.+6      	; 0x1dbe <udd_enable+0x7e>
    1db8:	80 93 fb 04 	sts	0x04FB, r24
    1dbc:	03 c0       	rjmp	.+6      	; 0x1dc4 <udd_enable+0x84>
    1dbe:	8f e1       	ldi	r24, 0x1F	; 31
    1dc0:	80 93 fb 04 	sts	0x04FB, r24
    1dc4:	e0 ec       	ldi	r30, 0xC0	; 192
    1dc6:	f4 e0       	ldi	r31, 0x04	; 4
    1dc8:	80 81       	ld	r24, Z
    1dca:	82 60       	ori	r24, 0x02	; 2
    1dcc:	80 83       	st	Z, r24
    1dce:	80 81       	ld	r24, Z
    1dd0:	80 68       	ori	r24, 0x80	; 128
    1dd2:	80 83       	st	Z, r24
    1dd4:	80 81       	ld	r24, Z
    1dd6:	80 61       	ori	r24, 0x10	; 16
    1dd8:	80 83       	st	Z, r24
    1dda:	8c e1       	ldi	r24, 0x1C	; 28
    1ddc:	98 e2       	ldi	r25, 0x28	; 40
    1dde:	86 83       	std	Z+6, r24	; 0x06
    1de0:	97 83       	std	Z+7, r25	; 0x07
    1de2:	80 81       	ld	r24, Z
    1de4:	80 62       	ori	r24, 0x20	; 32
    1de6:	80 83       	st	Z, r24
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	80 93 c5 04 	sts	0x04C5, r24
    1dee:	e8 ec       	ldi	r30, 0xC8	; 200
    1df0:	f4 e0       	ldi	r31, 0x04	; 4
    1df2:	80 81       	ld	r24, Z
    1df4:	81 60       	ori	r24, 0x01	; 1
    1df6:	80 83       	st	Z, r24
    1df8:	10 92 50 28 	sts	0x2850, r1
    1dfc:	8f b7       	in	r24, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	e7 ec       	ldi	r30, 0xC7	; 199
    1e02:	f8 e2       	ldi	r31, 0x28	; 40
    1e04:	90 81       	ld	r25, Z
    1e06:	9f 5f       	subi	r25, 0xFF	; 255
    1e08:	90 83       	st	Z, r25
    1e0a:	8f bf       	out	0x3f, r24	; 63
    1e0c:	76 df       	rcall	.-276    	; 0x1cfa <udd_attach>
    1e0e:	cf bf       	out	0x3f, r28	; 63
    1e10:	cf 91       	pop	r28
    1e12:	08 95       	ret

00001e14 <udd_is_high_speed>:
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	08 95       	ret

00001e18 <udd_set_address>:
    1e18:	80 93 c3 04 	sts	0x04C3, r24
    1e1c:	08 95       	ret

00001e1e <udd_getaddress>:
    1e1e:	80 91 c3 04 	lds	r24, 0x04C3
    1e22:	08 95       	ret

00001e24 <udd_get_frame_number>:
    1e24:	80 91 4c 28 	lds	r24, 0x284C
    1e28:	90 91 4d 28 	lds	r25, 0x284D
    1e2c:	08 95       	ret

00001e2e <udd_get_micro_frame_number>:
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	08 95       	ret

00001e34 <udd_set_setup_payload>:
    1e34:	80 93 ba 28 	sts	0x28BA, r24
    1e38:	90 93 bb 28 	sts	0x28BB, r25
    1e3c:	60 93 bc 28 	sts	0x28BC, r22
    1e40:	70 93 bd 28 	sts	0x28BD, r23
    1e44:	08 95       	ret

00001e46 <udd_ep_alloc>:
    1e46:	e8 2f       	mov	r30, r24
    1e48:	ef 70       	andi	r30, 0x0F	; 15
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	ee 0f       	add	r30, r30
    1e4e:	ff 1f       	adc	r31, r31
    1e50:	99 27       	eor	r25, r25
    1e52:	87 fd       	sbrc	r24, 7
    1e54:	90 95       	com	r25
    1e56:	88 27       	eor	r24, r24
    1e58:	99 0f       	add	r25, r25
    1e5a:	88 1f       	adc	r24, r24
    1e5c:	99 27       	eor	r25, r25
    1e5e:	e8 0f       	add	r30, r24
    1e60:	f9 1f       	adc	r31, r25
    1e62:	ee 0f       	add	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	ee 0f       	add	r30, r30
    1e68:	ff 1f       	adc	r31, r31
    1e6a:	ee 0f       	add	r30, r30
    1e6c:	ff 1f       	adc	r31, r31
    1e6e:	e4 5e       	subi	r30, 0xE4	; 228
    1e70:	f7 4d       	sbci	r31, 0xD7	; 215
    1e72:	81 81       	ldd	r24, Z+1	; 0x01
    1e74:	80 7c       	andi	r24, 0xC0	; 192
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <udd_ep_alloc+0x34>
    1e78:	43 c0       	rjmp	.+134    	; 0x1f00 <udd_ep_alloc+0xba>
    1e7a:	63 70       	andi	r22, 0x03	; 3
    1e7c:	61 30       	cpi	r22, 0x01	; 1
    1e7e:	29 f0       	breq	.+10     	; 0x1e8a <udd_ep_alloc+0x44>
    1e80:	10 f4       	brcc	.+4      	; 0x1e86 <udd_ep_alloc+0x40>
    1e82:	80 e4       	ldi	r24, 0x40	; 64
    1e84:	03 c0       	rjmp	.+6      	; 0x1e8c <udd_ep_alloc+0x46>
    1e86:	80 e8       	ldi	r24, 0x80	; 128
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <udd_ep_alloc+0x46>
    1e8a:	80 ec       	ldi	r24, 0xC0	; 192
    1e8c:	40 38       	cpi	r20, 0x80	; 128
    1e8e:	51 05       	cpc	r21, r1
    1e90:	e1 f0       	breq	.+56     	; 0x1eca <udd_ep_alloc+0x84>
    1e92:	50 f4       	brcc	.+20     	; 0x1ea8 <udd_ep_alloc+0x62>
    1e94:	40 32       	cpi	r20, 0x20	; 32
    1e96:	51 05       	cpc	r21, r1
    1e98:	a1 f0       	breq	.+40     	; 0x1ec2 <udd_ep_alloc+0x7c>
    1e9a:	40 34       	cpi	r20, 0x40	; 64
    1e9c:	51 05       	cpc	r21, r1
    1e9e:	99 f0       	breq	.+38     	; 0x1ec6 <udd_ep_alloc+0x80>
    1ea0:	40 31       	cpi	r20, 0x10	; 16
    1ea2:	51 05       	cpc	r21, r1
    1ea4:	61 f4       	brne	.+24     	; 0x1ebe <udd_ep_alloc+0x78>
    1ea6:	19 c0       	rjmp	.+50     	; 0x1eda <udd_ep_alloc+0x94>
    1ea8:	41 15       	cp	r20, r1
    1eaa:	92 e0       	ldi	r25, 0x02	; 2
    1eac:	59 07       	cpc	r21, r25
    1eae:	89 f0       	breq	.+34     	; 0x1ed2 <udd_ep_alloc+0x8c>
    1eb0:	4f 3f       	cpi	r20, 0xFF	; 255
    1eb2:	93 e0       	ldi	r25, 0x03	; 3
    1eb4:	59 07       	cpc	r21, r25
    1eb6:	79 f0       	breq	.+30     	; 0x1ed6 <udd_ep_alloc+0x90>
    1eb8:	41 15       	cp	r20, r1
    1eba:	51 40       	sbci	r21, 0x01	; 1
    1ebc:	41 f0       	breq	.+16     	; 0x1ece <udd_ep_alloc+0x88>
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	0d c0       	rjmp	.+26     	; 0x1edc <udd_ep_alloc+0x96>
    1ec2:	22 e0       	ldi	r18, 0x02	; 2
    1ec4:	0b c0       	rjmp	.+22     	; 0x1edc <udd_ep_alloc+0x96>
    1ec6:	23 e0       	ldi	r18, 0x03	; 3
    1ec8:	09 c0       	rjmp	.+18     	; 0x1edc <udd_ep_alloc+0x96>
    1eca:	24 e0       	ldi	r18, 0x04	; 4
    1ecc:	07 c0       	rjmp	.+14     	; 0x1edc <udd_ep_alloc+0x96>
    1ece:	25 e0       	ldi	r18, 0x05	; 5
    1ed0:	05 c0       	rjmp	.+10     	; 0x1edc <udd_ep_alloc+0x96>
    1ed2:	26 e0       	ldi	r18, 0x06	; 6
    1ed4:	03 c0       	rjmp	.+6      	; 0x1edc <udd_ep_alloc+0x96>
    1ed6:	27 e0       	ldi	r18, 0x07	; 7
    1ed8:	01 c0       	rjmp	.+2      	; 0x1edc <udd_ep_alloc+0x96>
    1eda:	21 e0       	ldi	r18, 0x01	; 1
    1edc:	11 82       	std	Z+1, r1	; 0x01
    1ede:	96 e0       	ldi	r25, 0x06	; 6
    1ee0:	90 83       	st	Z, r25
    1ee2:	82 2b       	or	r24, r18
    1ee4:	81 83       	std	Z+1, r24	; 0x01
    1ee6:	81 81       	ldd	r24, Z+1	; 0x01
    1ee8:	80 7c       	andi	r24, 0xC0	; 192
    1eea:	80 3c       	cpi	r24, 0xC0	; 192
    1eec:	21 f4       	brne	.+8      	; 0x1ef6 <udd_ep_alloc+0xb0>
    1eee:	81 81       	ldd	r24, Z+1	; 0x01
    1ef0:	87 70       	andi	r24, 0x07	; 7
    1ef2:	87 30       	cpi	r24, 0x07	; 7
    1ef4:	39 f0       	breq	.+14     	; 0x1f04 <udd_ep_alloc+0xbe>
    1ef6:	81 81       	ldd	r24, Z+1	; 0x01
    1ef8:	80 62       	ori	r24, 0x20	; 32
    1efa:	81 83       	std	Z+1, r24	; 0x01
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	08 95       	ret
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	08 95       	ret
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	08 95       	ret

00001f08 <udd_ep_is_halted>:
    1f08:	e8 2f       	mov	r30, r24
    1f0a:	ef 70       	andi	r30, 0x0F	; 15
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	ee 0f       	add	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	99 27       	eor	r25, r25
    1f14:	87 fd       	sbrc	r24, 7
    1f16:	90 95       	com	r25
    1f18:	88 27       	eor	r24, r24
    1f1a:	99 0f       	add	r25, r25
    1f1c:	88 1f       	adc	r24, r24
    1f1e:	99 27       	eor	r25, r25
    1f20:	e8 0f       	add	r30, r24
    1f22:	f9 1f       	adc	r31, r25
    1f24:	ee 0f       	add	r30, r30
    1f26:	ff 1f       	adc	r31, r31
    1f28:	ee 0f       	add	r30, r30
    1f2a:	ff 1f       	adc	r31, r31
    1f2c:	ee 0f       	add	r30, r30
    1f2e:	ff 1f       	adc	r31, r31
    1f30:	e4 5e       	subi	r30, 0xE4	; 228
    1f32:	f7 4d       	sbci	r31, 0xD7	; 215
    1f34:	81 81       	ldd	r24, Z+1	; 0x01
    1f36:	82 fb       	bst	r24, 2
    1f38:	88 27       	eor	r24, r24
    1f3a:	80 f9       	bld	r24, 0
    1f3c:	08 95       	ret

00001f3e <udd_ep_clear_halt>:
    1f3e:	e8 2f       	mov	r30, r24
    1f40:	ef 70       	andi	r30, 0x0F	; 15
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	ee 0f       	add	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	28 2f       	mov	r18, r24
    1f4a:	33 27       	eor	r19, r19
    1f4c:	27 fd       	sbrc	r18, 7
    1f4e:	30 95       	com	r19
    1f50:	22 27       	eor	r18, r18
    1f52:	33 0f       	add	r19, r19
    1f54:	22 1f       	adc	r18, r18
    1f56:	33 27       	eor	r19, r19
    1f58:	e2 0f       	add	r30, r18
    1f5a:	f3 1f       	adc	r31, r19
    1f5c:	ee 0f       	add	r30, r30
    1f5e:	ff 1f       	adc	r31, r31
    1f60:	ee 0f       	add	r30, r30
    1f62:	ff 1f       	adc	r31, r31
    1f64:	ee 0f       	add	r30, r30
    1f66:	ff 1f       	adc	r31, r31
    1f68:	e4 5e       	subi	r30, 0xE4	; 228
    1f6a:	f7 4d       	sbci	r31, 0xD7	; 215
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	92 ff       	sbrs	r25, 2
    1f70:	0e c0       	rjmp	.+28     	; 0x1f8e <udd_ep_clear_halt+0x50>
    1f72:	91 81       	ldd	r25, Z+1	; 0x01
    1f74:	9b 7f       	andi	r25, 0xFB	; 251
    1f76:	91 83       	std	Z+1, r25	; 0x01
    1f78:	22 dd       	rcall	.-1468   	; 0x19be <udd_ep_get_job>
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	80 81       	ld	r24, Z
    1f7e:	80 ff       	sbrs	r24, 0
    1f80:	06 c0       	rjmp	.+12     	; 0x1f8e <udd_ep_clear_halt+0x50>
    1f82:	8e 7f       	andi	r24, 0xFE	; 254
    1f84:	80 83       	st	Z, r24
    1f86:	07 80       	ldd	r0, Z+7	; 0x07
    1f88:	f0 85       	ldd	r31, Z+8	; 0x08
    1f8a:	e0 2d       	mov	r30, r0
    1f8c:	09 95       	icall
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	08 95       	ret

00001f92 <udd_ep_run>:
    1f92:	7f 92       	push	r7
    1f94:	8f 92       	push	r8
    1f96:	9f 92       	push	r9
    1f98:	af 92       	push	r10
    1f9a:	bf 92       	push	r11
    1f9c:	cf 92       	push	r12
    1f9e:	df 92       	push	r13
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	98 2e       	mov	r9, r24
    1fae:	86 2e       	mov	r8, r22
    1fb0:	5a 01       	movw	r10, r20
    1fb2:	69 01       	movw	r12, r18
    1fb4:	04 dd       	rcall	.-1528   	; 0x19be <udd_ep_get_job>
    1fb6:	7c 01       	movw	r14, r24
    1fb8:	79 2c       	mov	r7, r9
    1fba:	77 1c       	adc	r7, r7
    1fbc:	77 24       	eor	r7, r7
    1fbe:	77 1c       	adc	r7, r7
    1fc0:	c9 2d       	mov	r28, r9
    1fc2:	cf 70       	andi	r28, 0x0F	; 15
    1fc4:	d0 e0       	ldi	r29, 0x00	; 0
    1fc6:	cc 0f       	add	r28, r28
    1fc8:	dd 1f       	adc	r29, r29
    1fca:	c7 0d       	add	r28, r7
    1fcc:	d1 1d       	adc	r29, r1
    1fce:	cc 0f       	add	r28, r28
    1fd0:	dd 1f       	adc	r29, r29
    1fd2:	cc 0f       	add	r28, r28
    1fd4:	dd 1f       	adc	r29, r29
    1fd6:	cc 0f       	add	r28, r28
    1fd8:	dd 1f       	adc	r29, r29
    1fda:	c4 5e       	subi	r28, 0xE4	; 228
    1fdc:	d7 4d       	sbci	r29, 0xD7	; 215
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	80 7c       	andi	r24, 0xC0	; 192
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <udd_ep_run+0x54>
    1fe4:	4c c0       	rjmp	.+152    	; 0x207e <udd_ep_run+0xec>
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	80 7c       	andi	r24, 0xC0	; 192
    1fea:	80 3c       	cpi	r24, 0xC0	; 192
    1fec:	19 f0       	breq	.+6      	; 0x1ff4 <udd_ep_run+0x62>
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	82 fd       	sbrc	r24, 2
    1ff2:	47 c0       	rjmp	.+142    	; 0x2082 <udd_ep_run+0xf0>
    1ff4:	8f b7       	in	r24, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	f7 01       	movw	r30, r14
    1ffa:	90 81       	ld	r25, Z
    1ffc:	90 ff       	sbrs	r25, 0
    1ffe:	03 c0       	rjmp	.+6      	; 0x2006 <udd_ep_run+0x74>
    2000:	8f bf       	out	0x3f, r24	; 63
    2002:	71 2c       	mov	r7, r1
    2004:	3f c0       	rjmp	.+126    	; 0x2084 <udd_ep_run+0xf2>
    2006:	f7 01       	movw	r30, r14
    2008:	90 81       	ld	r25, Z
    200a:	91 60       	ori	r25, 0x01	; 1
    200c:	90 83       	st	Z, r25
    200e:	8f bf       	out	0x3f, r24	; 63
    2010:	f7 01       	movw	r30, r14
    2012:	a1 82       	std	Z+1, r10	; 0x01
    2014:	b2 82       	std	Z+2, r11	; 0x02
    2016:	c3 82       	std	Z+3, r12	; 0x03
    2018:	d4 82       	std	Z+4, r13	; 0x04
    201a:	15 82       	std	Z+5, r1	; 0x05
    201c:	16 82       	std	Z+6, r1	; 0x06
    201e:	07 83       	std	Z+7, r16	; 0x07
    2020:	10 87       	std	Z+8, r17	; 0x08
    2022:	81 10       	cpse	r8, r1
    2024:	06 c0       	rjmp	.+12     	; 0x2032 <udd_ep_run+0xa0>
    2026:	91 e0       	ldi	r25, 0x01	; 1
    2028:	c1 14       	cp	r12, r1
    202a:	d1 04       	cpc	r13, r1
    202c:	19 f0       	breq	.+6      	; 0x2034 <udd_ep_run+0xa2>
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	01 c0       	rjmp	.+2      	; 0x2034 <udd_ep_run+0xa2>
    2032:	91 e0       	ldi	r25, 0x01	; 1
    2034:	f7 01       	movw	r30, r14
    2036:	80 81       	ld	r24, Z
    2038:	90 fb       	bst	r25, 0
    203a:	81 f9       	bld	r24, 1
    203c:	8b 7f       	andi	r24, 0xFB	; 251
    203e:	80 83       	st	Z, r24
    2040:	77 20       	and	r7, r7
    2042:	19 f0       	breq	.+6      	; 0x204a <udd_ep_run+0xb8>
    2044:	1e 82       	std	Y+6, r1	; 0x06
    2046:	1f 82       	std	Y+7, r1	; 0x07
    2048:	15 c0       	rjmp	.+42     	; 0x2074 <udd_ep_run+0xe2>
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	80 7c       	andi	r24, 0xC0	; 192
    204e:	80 3c       	cpi	r24, 0xC0	; 192
    2050:	69 f4       	brne	.+26     	; 0x206c <udd_ep_run+0xda>
    2052:	ce 01       	movw	r24, r28
    2054:	8f dc       	rcall	.-1762   	; 0x1974 <udd_ep_get_size>
    2056:	bc 01       	movw	r22, r24
    2058:	c6 01       	movw	r24, r12
    205a:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__udivmodhi4>
    205e:	89 2b       	or	r24, r25
    2060:	29 f0       	breq	.+10     	; 0x206c <udd_ep_run+0xda>
    2062:	f7 01       	movw	r30, r14
    2064:	80 81       	ld	r24, Z
    2066:	8e 7f       	andi	r24, 0xFE	; 254
    2068:	80 83       	st	Z, r24
    206a:	0c c0       	rjmp	.+24     	; 0x2084 <udd_ep_run+0xf2>
    206c:	1a 82       	std	Y+2, r1	; 0x02
    206e:	1b 82       	std	Y+3, r1	; 0x03
    2070:	1e 82       	std	Y+6, r1	; 0x06
    2072:	1f 82       	std	Y+7, r1	; 0x07
    2074:	89 2d       	mov	r24, r9
    2076:	2d dd       	rcall	.-1446   	; 0x1ad2 <udd_ep_trans_complet>
    2078:	77 24       	eor	r7, r7
    207a:	73 94       	inc	r7
    207c:	03 c0       	rjmp	.+6      	; 0x2084 <udd_ep_run+0xf2>
    207e:	71 2c       	mov	r7, r1
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <udd_ep_run+0xf2>
    2082:	71 2c       	mov	r7, r1
    2084:	87 2d       	mov	r24, r7
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	ff 90       	pop	r15
    2090:	ef 90       	pop	r14
    2092:	df 90       	pop	r13
    2094:	cf 90       	pop	r12
    2096:	bf 90       	pop	r11
    2098:	af 90       	pop	r10
    209a:	9f 90       	pop	r9
    209c:	8f 90       	pop	r8
    209e:	7f 90       	pop	r7
    20a0:	08 95       	ret

000020a2 <udd_ep_abort>:
    20a2:	ff 92       	push	r15
    20a4:	0f 93       	push	r16
    20a6:	1f 93       	push	r17
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	18 2f       	mov	r17, r24
    20ae:	f8 2e       	mov	r15, r24
    20b0:	ff 1c       	adc	r15, r15
    20b2:	ff 24       	eor	r15, r15
    20b4:	ff 1c       	adc	r15, r15
    20b6:	c8 2f       	mov	r28, r24
    20b8:	cf 70       	andi	r28, 0x0F	; 15
    20ba:	d0 e0       	ldi	r29, 0x00	; 0
    20bc:	cc 0f       	add	r28, r28
    20be:	dd 1f       	adc	r29, r29
    20c0:	cf 0d       	add	r28, r15
    20c2:	d1 1d       	adc	r29, r1
    20c4:	cc 0f       	add	r28, r28
    20c6:	dd 1f       	adc	r29, r29
    20c8:	cc 0f       	add	r28, r28
    20ca:	dd 1f       	adc	r29, r29
    20cc:	cc 0f       	add	r28, r28
    20ce:	dd 1f       	adc	r29, r29
    20d0:	c4 5e       	subi	r28, 0xE4	; 228
    20d2:	d7 4d       	sbci	r29, 0xD7	; 215
    20d4:	74 dc       	rcall	.-1816   	; 0x19be <udd_ep_get_job>
    20d6:	dc 01       	movw	r26, r24
    20d8:	fe 01       	movw	r30, r28
    20da:	02 e0       	ldi	r16, 0x02	; 2
    20dc:	05 93       	las	Z, r16
    20de:	8c 91       	ld	r24, X
    20e0:	80 ff       	sbrs	r24, 0
    20e2:	12 c0       	rjmp	.+36     	; 0x2108 <udd_ep_abort+0x66>
    20e4:	8e 7f       	andi	r24, 0xFE	; 254
    20e6:	8c 93       	st	X, r24
    20e8:	17 96       	adiw	r26, 0x07	; 7
    20ea:	ed 91       	ld	r30, X+
    20ec:	fc 91       	ld	r31, X
    20ee:	18 97       	sbiw	r26, 0x08	; 8
    20f0:	30 97       	sbiw	r30, 0x00	; 0
    20f2:	51 f0       	breq	.+20     	; 0x2108 <udd_ep_abort+0x66>
    20f4:	ff 20       	and	r15, r15
    20f6:	19 f0       	breq	.+6      	; 0x20fe <udd_ep_abort+0x5c>
    20f8:	6e 81       	ldd	r22, Y+6	; 0x06
    20fa:	7f 81       	ldd	r23, Y+7	; 0x07
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <udd_ep_abort+0x60>
    20fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2100:	7b 81       	ldd	r23, Y+3	; 0x03
    2102:	41 2f       	mov	r20, r17
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	09 95       	icall
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	ff 90       	pop	r15
    2112:	08 95       	ret

00002114 <udd_ep_free>:
    2114:	cf 93       	push	r28
    2116:	c8 2f       	mov	r28, r24
    2118:	c4 df       	rcall	.-120    	; 0x20a2 <udd_ep_abort>
    211a:	ec 2f       	mov	r30, r28
    211c:	ef 70       	andi	r30, 0x0F	; 15
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	8c 2f       	mov	r24, r28
    2126:	99 27       	eor	r25, r25
    2128:	87 fd       	sbrc	r24, 7
    212a:	90 95       	com	r25
    212c:	88 27       	eor	r24, r24
    212e:	99 0f       	add	r25, r25
    2130:	88 1f       	adc	r24, r24
    2132:	99 27       	eor	r25, r25
    2134:	e8 0f       	add	r30, r24
    2136:	f9 1f       	adc	r31, r25
    2138:	ee 0f       	add	r30, r30
    213a:	ff 1f       	adc	r31, r31
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	ee 0f       	add	r30, r30
    2142:	ff 1f       	adc	r31, r31
    2144:	e4 5e       	subi	r30, 0xE4	; 228
    2146:	f7 4d       	sbci	r31, 0xD7	; 215
    2148:	11 82       	std	Z+1, r1	; 0x01
    214a:	cf 91       	pop	r28
    214c:	08 95       	ret

0000214e <udd_ep_set_halt>:
    214e:	0f 93       	push	r16
    2150:	e8 2f       	mov	r30, r24
    2152:	ef 70       	andi	r30, 0x0F	; 15
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	ee 0f       	add	r30, r30
    2158:	ff 1f       	adc	r31, r31
    215a:	28 2f       	mov	r18, r24
    215c:	33 27       	eor	r19, r19
    215e:	27 fd       	sbrc	r18, 7
    2160:	30 95       	com	r19
    2162:	22 27       	eor	r18, r18
    2164:	33 0f       	add	r19, r19
    2166:	22 1f       	adc	r18, r18
    2168:	33 27       	eor	r19, r19
    216a:	e2 0f       	add	r30, r18
    216c:	f3 1f       	adc	r31, r19
    216e:	ee 0f       	add	r30, r30
    2170:	ff 1f       	adc	r31, r31
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	ee 0f       	add	r30, r30
    2178:	ff 1f       	adc	r31, r31
    217a:	e4 5e       	subi	r30, 0xE4	; 228
    217c:	f7 4d       	sbci	r31, 0xD7	; 215
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	94 60       	ori	r25, 0x04	; 4
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	01 e0       	ldi	r16, 0x01	; 1
    2186:	06 93       	lac	Z, r16
    2188:	8c df       	rcall	.-232    	; 0x20a2 <udd_ep_abort>
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	0f 91       	pop	r16
    218e:	08 95       	ret

00002190 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2190:	1f 92       	push	r1
    2192:	0f 92       	push	r0
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	0f 92       	push	r0
    2198:	11 24       	eor	r1, r1
    219a:	0f 93       	push	r16
    219c:	2f 93       	push	r18
    219e:	3f 93       	push	r19
    21a0:	4f 93       	push	r20
    21a2:	5f 93       	push	r21
    21a4:	6f 93       	push	r22
    21a6:	7f 93       	push	r23
    21a8:	8f 93       	push	r24
    21aa:	9f 93       	push	r25
    21ac:	af 93       	push	r26
    21ae:	bf 93       	push	r27
    21b0:	ef 93       	push	r30
    21b2:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    21b4:	80 91 cb 04 	lds	r24, 0x04CB
    21b8:	88 23       	and	r24, r24
    21ba:	34 f4       	brge	.+12     	; 0x21c8 <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    21bc:	80 e8       	ldi	r24, 0x80	; 128
    21be:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    21c2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    21c6:	88 c0       	rjmp	.+272    	; 0x22d8 <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    21c8:	80 91 cb 04 	lds	r24, 0x04CB
    21cc:	82 ff       	sbrs	r24, 2
    21ce:	20 c0       	rjmp	.+64     	; 0x2210 <__vector_125+0x80>
		udd_ack_underflow_event();
    21d0:	84 e0       	ldi	r24, 0x04	; 4
    21d2:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    21d6:	80 91 24 28 	lds	r24, 0x2824
    21da:	86 ff       	sbrs	r24, 6
    21dc:	7d c0       	rjmp	.+250    	; 0x22d8 <__vector_125+0x148>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    21de:	80 91 cc 04 	lds	r24, 0x04CC
    21e2:	81 fd       	sbrc	r24, 1
    21e4:	79 c0       	rjmp	.+242    	; 0x22d8 <__vector_125+0x148>
    21e6:	06 dc       	rcall	.-2036   	; 0x19f4 <udd_ctrl_interrupt_tc_setup>
    21e8:	81 11       	cpse	r24, r1
    21ea:	76 c0       	rjmp	.+236    	; 0x22d8 <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    21ec:	80 91 0c 28 	lds	r24, 0x280C
    21f0:	81 30       	cpi	r24, 0x01	; 1
    21f2:	11 f4       	brne	.+4      	; 0x21f8 <__vector_125+0x68>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    21f4:	3b db       	rcall	.-2442   	; 0x186c <udd_ctrl_send_zlp_in>
    21f6:	70 c0       	rjmp	.+224    	; 0x22d8 <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    21f8:	84 30       	cpi	r24, 0x04	; 4
    21fa:	09 f0       	breq	.+2      	; 0x21fe <__vector_125+0x6e>
    21fc:	6d c0       	rjmp	.+218    	; 0x22d8 <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    21fe:	e5 e2       	ldi	r30, 0x25	; 37
    2200:	f8 e2       	ldi	r31, 0x28	; 40
    2202:	04 e0       	ldi	r16, 0x04	; 4
    2204:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2206:	ed e1       	ldi	r30, 0x1D	; 29
    2208:	f8 e2       	ldi	r31, 0x28	; 40
    220a:	04 e0       	ldi	r16, 0x04	; 4
    220c:	05 93       	las	Z, r16
    220e:	64 c0       	rjmp	.+200    	; 0x22d8 <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2210:	80 91 cb 04 	lds	r24, 0x04CB
    2214:	81 ff       	sbrs	r24, 1
    2216:	5b c0       	rjmp	.+182    	; 0x22ce <__vector_125+0x13e>
		udd_ack_overflow_event();
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    221e:	80 91 1c 28 	lds	r24, 0x281C
    2222:	86 ff       	sbrs	r24, 6
    2224:	59 c0       	rjmp	.+178    	; 0x22d8 <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2226:	80 91 cc 04 	lds	r24, 0x04CC
    222a:	81 fd       	sbrc	r24, 1
    222c:	55 c0       	rjmp	.+170    	; 0x22d8 <__vector_125+0x148>
    222e:	e2 db       	rcall	.-2108   	; 0x19f4 <udd_ctrl_interrupt_tc_setup>
    2230:	81 11       	cpse	r24, r1
    2232:	52 c0       	rjmp	.+164    	; 0x22d8 <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2234:	80 91 0c 28 	lds	r24, 0x280C
    2238:	82 30       	cpi	r24, 0x02	; 2
    223a:	41 f4       	brne	.+16     	; 0x224c <__vector_125+0xbc>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    223c:	84 e0       	ldi	r24, 0x04	; 4
    223e:	80 93 0c 28 	sts	0x280C, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2242:	ec e1       	ldi	r30, 0x1C	; 28
    2244:	f8 e2       	ldi	r31, 0x28	; 40
    2246:	02 e0       	ldi	r16, 0x02	; 2
    2248:	06 93       	lac	Z, r16
    224a:	46 c0       	rjmp	.+140    	; 0x22d8 <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    224c:	83 30       	cpi	r24, 0x03	; 3
    224e:	09 f0       	breq	.+2      	; 0x2252 <__vector_125+0xc2>
    2250:	43 c0       	rjmp	.+134    	; 0x22d8 <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2252:	e5 e2       	ldi	r30, 0x25	; 37
    2254:	f8 e2       	ldi	r31, 0x28	; 40
    2256:	04 e0       	ldi	r16, 0x04	; 4
    2258:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    225a:	ed e1       	ldi	r30, 0x1D	; 29
    225c:	f8 e2       	ldi	r31, 0x28	; 40
    225e:	04 e0       	ldi	r16, 0x04	; 4
    2260:	05 93       	las	Z, r16
    2262:	3a c0       	rjmp	.+116    	; 0x22d8 <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2264:	80 e1       	ldi	r24, 0x10	; 16
    2266:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	1a df       	rcall	.-460    	; 0x20a2 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    226e:	81 e8       	ldi	r24, 0x81	; 129
    2270:	18 df       	rcall	.-464    	; 0x20a2 <udd_ep_abort>
		}
#endif
		udc_reset();
    2272:	0e 94 9f 05 	call	0xb3e	; 0xb3e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2276:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    227a:	ed e1       	ldi	r30, 0x1D	; 29
    227c:	f8 e2       	ldi	r31, 0x28	; 40
    227e:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    2280:	96 e0       	ldi	r25, 0x06	; 6
    2282:	90 93 1c 28 	sts	0x281C, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2286:	83 e4       	ldi	r24, 0x43	; 67
    2288:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    228a:	e5 e2       	ldi	r30, 0x25	; 37
    228c:	f8 e2       	ldi	r31, 0x28	; 40
    228e:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    2290:	90 93 24 28 	sts	0x2824, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2294:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2296:	88 ec       	ldi	r24, 0xC8	; 200
    2298:	97 e2       	ldi	r25, 0x27	; 39
    229a:	80 93 20 28 	sts	0x2820, r24
    229e:	90 93 21 28 	sts	0x2821, r25
		// Reset endpoint control management
		udd_ctrl_init();
    22a2:	ab da       	rcall	.-2730   	; 0x17fa <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    22a4:	19 c0       	rjmp	.+50     	; 0x22d8 <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
    22a6:	80 91 cb 04 	lds	r24, 0x04CB
    22aa:	86 ff       	sbrs	r24, 6
    22ac:	06 c0       	rjmp	.+12     	; 0x22ba <__vector_125+0x12a>
		udd_ack_suspend_event();
    22ae:	80 e4       	ldi	r24, 0x40	; 64
    22b0:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	82 da       	rcall	.-2812   	; 0x17bc <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    22b8:	0f c0       	rjmp	.+30     	; 0x22d8 <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
    22ba:	80 91 cb 04 	lds	r24, 0x04CB
    22be:	85 ff       	sbrs	r24, 5
    22c0:	0b c0       	rjmp	.+22     	; 0x22d8 <__vector_125+0x148>
		udd_ack_resume_event();
    22c2:	80 e2       	ldi	r24, 0x20	; 32
    22c4:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	78 da       	rcall	.-2832   	; 0x17bc <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    22cc:	05 c0       	rjmp	.+10     	; 0x22d8 <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    22ce:	80 91 cb 04 	lds	r24, 0x04CB
    22d2:	84 ff       	sbrs	r24, 4
    22d4:	e8 cf       	rjmp	.-48     	; 0x22a6 <__vector_125+0x116>
    22d6:	c6 cf       	rjmp	.-116    	; 0x2264 <__vector_125+0xd4>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    22d8:	ff 91       	pop	r31
    22da:	ef 91       	pop	r30
    22dc:	bf 91       	pop	r27
    22de:	af 91       	pop	r26
    22e0:	9f 91       	pop	r25
    22e2:	8f 91       	pop	r24
    22e4:	7f 91       	pop	r23
    22e6:	6f 91       	pop	r22
    22e8:	5f 91       	pop	r21
    22ea:	4f 91       	pop	r20
    22ec:	3f 91       	pop	r19
    22ee:	2f 91       	pop	r18
    22f0:	0f 91       	pop	r16
    22f2:	0f 90       	pop	r0
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	0f 90       	pop	r0
    22f8:	1f 90       	pop	r1
    22fa:	18 95       	reti

000022fc <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    22fc:	1f 92       	push	r1
    22fe:	0f 92       	push	r0
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	0f 92       	push	r0
    2304:	11 24       	eor	r1, r1
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	2f 93       	push	r18
    230c:	3f 93       	push	r19
    230e:	4f 93       	push	r20
    2310:	5f 93       	push	r21
    2312:	6f 93       	push	r22
    2314:	7f 93       	push	r23
    2316:	8f 93       	push	r24
    2318:	9f 93       	push	r25
    231a:	af 93       	push	r26
    231c:	bf 93       	push	r27
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	ef 93       	push	r30
    2324:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2326:	80 91 cc 04 	lds	r24, 0x04CC
    232a:	81 fd       	sbrc	r24, 1
    232c:	03 c0       	rjmp	.+6      	; 0x2334 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    232e:	62 db       	rcall	.-2364   	; 0x19f4 <udd_ctrl_interrupt_tc_setup>
    2330:	81 11       	cpse	r24, r1
    2332:	b9 c0       	rjmp	.+370    	; 0x24a6 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    233a:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    233e:	81 95       	neg	r24
    2340:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2342:	ec e1       	ldi	r30, 0x1C	; 28
    2344:	f8 e2       	ldi	r31, 0x28	; 40
    2346:	e8 1b       	sub	r30, r24
    2348:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    234a:	20 81       	ld	r18, Z
    234c:	31 81       	ldd	r19, Z+1	; 0x01
    234e:	2c 51       	subi	r18, 0x1C	; 28
    2350:	38 42       	sbci	r19, 0x28	; 40
    2352:	36 95       	lsr	r19
    2354:	27 95       	ror	r18
    2356:	36 95       	lsr	r19
    2358:	27 95       	ror	r18
    235a:	36 95       	lsr	r19
    235c:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    235e:	82 2f       	mov	r24, r18
    2360:	86 95       	lsr	r24
    2362:	20 ff       	sbrs	r18, 0
    2364:	02 c0       	rjmp	.+4      	; 0x236a <__vector_126+0x6e>
    2366:	90 e8       	ldi	r25, 0x80	; 128
    2368:	01 c0       	rjmp	.+2      	; 0x236c <__vector_126+0x70>
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    236e:	e8 2f       	mov	r30, r24
    2370:	ef 70       	andi	r30, 0x0F	; 15
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2378:	28 2f       	mov	r18, r24
    237a:	33 27       	eor	r19, r19
    237c:	27 fd       	sbrc	r18, 7
    237e:	30 95       	com	r19
    2380:	22 27       	eor	r18, r18
    2382:	33 0f       	add	r19, r19
    2384:	22 1f       	adc	r18, r18
    2386:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2388:	e2 0f       	add	r30, r18
    238a:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	e4 5e       	subi	r30, 0xE4	; 228
    239a:	f7 4d       	sbci	r31, 0xD7	; 215
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    239c:	90 81       	ld	r25, Z
    239e:	95 ff       	sbrs	r25, 5
    23a0:	82 c0       	rjmp	.+260    	; 0x24a6 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    23a2:	00 e2       	ldi	r16, 0x20	; 32
    23a4:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    23a6:	81 11       	cpse	r24, r1
    23a8:	79 c0       	rjmp	.+242    	; 0x249c <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    23aa:	80 91 0c 28 	lds	r24, 0x280C
    23ae:	84 30       	cpi	r24, 0x04	; 4
    23b0:	19 f4       	brne	.+6      	; 0x23b8 <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    23b2:	6a da       	rcall	.-2860   	; 0x1888 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    23b4:	22 da       	rcall	.-3004   	; 0x17fa <udd_ctrl_init>
    23b6:	77 c0       	rjmp	.+238    	; 0x24a6 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    23b8:	c0 91 1e 28 	lds	r28, 0x281E
    23bc:	d0 91 1f 28 	lds	r29, 0x281F

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    23c0:	80 91 bc 28 	lds	r24, 0x28BC
    23c4:	90 91 bd 28 	lds	r25, 0x28BD
    23c8:	00 91 08 28 	lds	r16, 0x2808
    23cc:	10 91 09 28 	lds	r17, 0x2809
    23d0:	98 01       	movw	r18, r16
    23d2:	2c 0f       	add	r18, r28
    23d4:	3d 1f       	adc	r19, r29
    23d6:	82 17       	cp	r24, r18
    23d8:	93 07       	cpc	r25, r19
    23da:	18 f4       	brcc	.+6      	; 0x23e2 <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    23dc:	ec 01       	movw	r28, r24
    23de:	c0 1b       	sub	r28, r16
    23e0:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    23e2:	80 91 ba 28 	lds	r24, 0x28BA
    23e6:	90 91 bb 28 	lds	r25, 0x28BB
    23ea:	ae 01       	movw	r20, r28
    23ec:	68 ec       	ldi	r22, 0xC8	; 200
    23ee:	77 e2       	ldi	r23, 0x27	; 39
    23f0:	80 0f       	add	r24, r16
    23f2:	91 1f       	adc	r25, r17
    23f4:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    23f8:	0c 0f       	add	r16, r28
    23fa:	1d 1f       	adc	r17, r29
    23fc:	00 93 08 28 	sts	0x2808, r16
    2400:	10 93 09 28 	sts	0x2809, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2404:	c0 34       	cpi	r28, 0x40	; 64
    2406:	d1 05       	cpc	r29, r1
    2408:	69 f4       	brne	.+26     	; 0x2424 <__vector_126+0x128>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    240a:	80 91 0a 28 	lds	r24, 0x280A
    240e:	90 91 0b 28 	lds	r25, 0x280B
    2412:	80 0f       	add	r24, r16
    2414:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2416:	20 91 b8 28 	lds	r18, 0x28B8
    241a:	30 91 b9 28 	lds	r19, 0x28B9
    241e:	82 17       	cp	r24, r18
    2420:	93 07       	cpc	r25, r19
    2422:	88 f0       	brcs	.+34     	; 0x2446 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2424:	00 93 bc 28 	sts	0x28BC, r16
    2428:	10 93 bd 28 	sts	0x28BD, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    242c:	e0 91 c0 28 	lds	r30, 0x28C0
    2430:	f0 91 c1 28 	lds	r31, 0x28C1
    2434:	30 97       	sbiw	r30, 0x00	; 0
    2436:	29 f0       	breq	.+10     	; 0x2442 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2438:	09 95       	icall
    243a:	81 11       	cpse	r24, r1
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    243e:	08 da       	rcall	.-3056   	; 0x1850 <udd_ctrl_stall_data>
    2440:	32 c0       	rjmp	.+100    	; 0x24a6 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2442:	14 da       	rcall	.-3032   	; 0x186c <udd_ctrl_send_zlp_in>
    2444:	30 c0       	rjmp	.+96     	; 0x24a6 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2446:	80 91 bc 28 	lds	r24, 0x28BC
    244a:	90 91 bd 28 	lds	r25, 0x28BD
    244e:	08 17       	cp	r16, r24
    2450:	19 07       	cpc	r17, r25
    2452:	f9 f4       	brne	.+62     	; 0x2492 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2454:	e0 91 c0 28 	lds	r30, 0x28C0
    2458:	f0 91 c1 28 	lds	r31, 0x28C1
    245c:	30 97       	sbiw	r30, 0x00	; 0
    245e:	11 f4       	brne	.+4      	; 0x2464 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2460:	f7 d9       	rcall	.-3090   	; 0x1850 <udd_ctrl_stall_data>
    2462:	21 c0       	rjmp	.+66     	; 0x24a6 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2464:	09 95       	icall
    2466:	81 11       	cpse	r24, r1
    2468:	02 c0       	rjmp	.+4      	; 0x246e <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    246a:	f2 d9       	rcall	.-3100   	; 0x1850 <udd_ctrl_stall_data>
    246c:	1c c0       	rjmp	.+56     	; 0x24a6 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    246e:	20 91 0a 28 	lds	r18, 0x280A
    2472:	30 91 0b 28 	lds	r19, 0x280B
    2476:	80 91 08 28 	lds	r24, 0x2808
    247a:	90 91 09 28 	lds	r25, 0x2809
    247e:	82 0f       	add	r24, r18
    2480:	93 1f       	adc	r25, r19
    2482:	80 93 0a 28 	sts	0x280A, r24
    2486:	90 93 0b 28 	sts	0x280B, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    248a:	10 92 08 28 	sts	0x2808, r1
    248e:	10 92 09 28 	sts	0x2809, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2492:	ec e1       	ldi	r30, 0x1C	; 28
    2494:	f8 e2       	ldi	r31, 0x28	; 40
    2496:	02 e0       	ldi	r16, 0x02	; 2
    2498:	06 93       	lac	Z, r16
    249a:	05 c0       	rjmp	.+10     	; 0x24a6 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    249c:	80 38       	cpi	r24, 0x80	; 128
    249e:	11 f4       	brne	.+4      	; 0x24a4 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    24a0:	fb d9       	rcall	.-3082   	; 0x1898 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    24a2:	01 c0       	rjmp	.+2      	; 0x24a6 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    24a4:	16 db       	rcall	.-2516   	; 0x1ad2 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    24a6:	ff 91       	pop	r31
    24a8:	ef 91       	pop	r30
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	bf 91       	pop	r27
    24b0:	af 91       	pop	r26
    24b2:	9f 91       	pop	r25
    24b4:	8f 91       	pop	r24
    24b6:	7f 91       	pop	r23
    24b8:	6f 91       	pop	r22
    24ba:	5f 91       	pop	r21
    24bc:	4f 91       	pop	r20
    24be:	3f 91       	pop	r19
    24c0:	2f 91       	pop	r18
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	0f 90       	pop	r0
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	0f 90       	pop	r0
    24cc:	1f 90       	pop	r1
    24ce:	18 95       	reti

000024d0 <sysclk_init>:
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <sysclk_init+0x6>
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <sysclk_init+0x8>
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	8f ef       	ldi	r24, 0xFF	; 255
    24de:	80 93 70 00 	sts	0x0070, r24
    24e2:	80 93 71 00 	sts	0x0071, r24
    24e6:	80 93 72 00 	sts	0x0072, r24
    24ea:	80 93 73 00 	sts	0x0073, r24
    24ee:	80 93 74 00 	sts	0x0074, r24
    24f2:	80 93 75 00 	sts	0x0075, r24
    24f6:	80 93 76 00 	sts	0x0076, r24
    24fa:	6c e1       	ldi	r22, 0x1C	; 28
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	39 d1       	rcall	.+626    	; 0x2774 <nvm_read_byte>
    2502:	8a 83       	std	Y+2, r24	; 0x02
    2504:	6d e1       	ldi	r22, 0x1D	; 29
    2506:	70 e0       	ldi	r23, 0x00	; 0
    2508:	82 e0       	ldi	r24, 0x02	; 2
    250a:	34 d1       	rcall	.+616    	; 0x2774 <nvm_read_byte>
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	01 96       	adiw	r24, 0x01	; 1
    2514:	21 f4       	brne	.+8      	; 0x251e <sysclk_init+0x4e>
    2516:	80 e4       	ldi	r24, 0x40	; 64
    2518:	93 e2       	ldi	r25, 0x23	; 35
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	9a 81       	ldd	r25, Y+2	; 0x02
    2522:	8b 83       	std	Y+3, r24	; 0x03
    2524:	9c 83       	std	Y+4, r25	; 0x04
    2526:	e0 e6       	ldi	r30, 0x60	; 96
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	82 83       	std	Z+2, r24	; 0x02
    252c:	8c 81       	ldd	r24, Y+4	; 0x04
    252e:	83 83       	std	Z+3, r24	; 0x03
    2530:	8f b7       	in	r24, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	e0 e5       	ldi	r30, 0x50	; 80
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	90 81       	ld	r25, Z
    253a:	92 60       	ori	r25, 0x02	; 2
    253c:	90 83       	st	Z, r25
    253e:	8f bf       	out	0x3f, r24	; 63
    2540:	81 81       	ldd	r24, Z+1	; 0x01
    2542:	81 ff       	sbrs	r24, 1
    2544:	fd cf       	rjmp	.-6      	; 0x2540 <sysclk_init+0x70>
    2546:	61 e0       	ldi	r22, 0x01	; 1
    2548:	80 e4       	ldi	r24, 0x40	; 64
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	1d d1       	rcall	.+570    	; 0x2788 <ccp_write_io>
    254e:	8f b7       	in	r24, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	e0 e5       	ldi	r30, 0x50	; 80
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	90 81       	ld	r25, Z
    2558:	9e 7f       	andi	r25, 0xFE	; 254
    255a:	90 83       	st	Z, r25
    255c:	8f bf       	out	0x3f, r24	; 63
    255e:	24 96       	adiw	r28, 0x04	; 4
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	08 95       	ret

0000256a <sysclk_enable_module>:
    256a:	9f b7       	in	r25, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	e8 2f       	mov	r30, r24
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	e0 59       	subi	r30, 0x90	; 144
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 95       	com	r22
    2578:	80 81       	ld	r24, Z
    257a:	68 23       	and	r22, r24
    257c:	60 83       	st	Z, r22
    257e:	9f bf       	out	0x3f, r25	; 63
    2580:	08 95       	ret

00002582 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    2582:	86 30       	cpi	r24, 0x06	; 6
    2584:	11 f4       	brne	.+4      	; 0x258a <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    2586:	68 e1       	ldi	r22, 0x18	; 24
    2588:	01 c0       	rjmp	.+2      	; 0x258c <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    258a:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    258c:	e0 e5       	ldi	r30, 0x50	; 80
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    2592:	81 fd       	sbrc	r24, 1
    2594:	09 c0       	rjmp	.+18     	; 0x25a8 <sysclk_enable_usb+0x26>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2596:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2598:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    259a:	90 81       	ld	r25, Z
    259c:	92 60       	ori	r25, 0x02	; 2
    259e:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    25a0:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    25a2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    25a4:	81 ff       	sbrs	r24, 1
    25a6:	fd cf       	rjmp	.-6      	; 0x25a2 <sysclk_enable_usb+0x20>
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    25a8:	63 60       	ori	r22, 0x03	; 3
    25aa:	84 e4       	ldi	r24, 0x44	; 68
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	ec d0       	rcall	.+472    	; 0x2788 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    25b0:	60 e4       	ldi	r22, 0x40	; 64
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	da cf       	rjmp	.-76     	; 0x256a <sysclk_enable_module>
    25b6:	08 95       	ret

000025b8 <nvm_eeprom_read_buffer>:
 * \param address   the address to where to read
 * \param buf       pointer to the data
 * \param len       the number of bytes to read
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	9b 01       	movw	r18, r22
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    25be:	e0 ec       	ldi	r30, 0xC0	; 192
    25c0:	f1 e0       	ldi	r31, 0x01	; 1
    25c2:	67 85       	ldd	r22, Z+15	; 0x0f
    25c4:	66 23       	and	r22, r22
    25c6:	ec f3       	brlt	.-6      	; 0x25c2 <nvm_eeprom_read_buffer+0xa>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    25c8:	cc ec       	ldi	r28, 0xCC	; 204
    25ca:	d1 e0       	ldi	r29, 0x01	; 1
    25cc:	68 81       	ld	r22, Y
    25ce:	68 60       	ori	r22, 0x08	; 8
    25d0:	68 83       	st	Y, r22
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    25d2:	bc 01       	movw	r22, r24
    25d4:	70 5f       	subi	r23, 0xF0	; 240
    25d6:	c9 01       	movw	r24, r18
    25d8:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <memcpy>
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    25dc:	88 81       	ld	r24, Y
    25de:	87 7f       	andi	r24, 0xF7	; 247
    25e0:	88 83       	st	Y, r24
	eeprom_disable_mapping();
}
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	08 95       	ret

000025e8 <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    25e8:	e0 ec       	ldi	r30, 0xC0	; 192
    25ea:	f1 e0       	ldi	r31, 0x01	; 1
    25ec:	87 85       	ldd	r24, Z+15	; 0x0f
    25ee:	88 23       	and	r24, r24
    25f0:	ec f3       	brlt	.-6      	; 0x25ec <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    25f2:	e0 ec       	ldi	r30, 0xC0	; 192
    25f4:	f1 e0       	ldi	r31, 0x01	; 1
    25f6:	87 85       	ldd	r24, Z+15	; 0x0f
    25f8:	81 ff       	sbrs	r24, 1
    25fa:	06 c0       	rjmp	.+12     	; 0x2608 <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    25fc:	86 e3       	ldi	r24, 0x36	; 54
    25fe:	82 87       	std	Z+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2600:	61 e0       	ldi	r22, 0x01	; 1
    2602:	8b ec       	ldi	r24, 0xCB	; 203
    2604:	91 e0       	ldi	r25, 0x01	; 1
    2606:	c0 c0       	rjmp	.+384    	; 0x2788 <ccp_write_io>
    2608:	08 95       	ret

0000260a <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    260a:	e0 ec       	ldi	r30, 0xC0	; 192
    260c:	f1 e0       	ldi	r31, 0x01	; 1
    260e:	97 85       	ldd	r25, Z+15	; 0x0f
    2610:	99 23       	and	r25, r25
    2612:	ec f3       	brlt	.-6      	; 0x260e <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    2614:	ec ec       	ldi	r30, 0xCC	; 204
    2616:	f1 e0       	ldi	r31, 0x01	; 1
    2618:	90 81       	ld	r25, Z
    261a:	98 60       	ori	r25, 0x08	; 8
    261c:	90 83       	st	Z, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    261e:	a8 2f       	mov	r26, r24
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	b0 5f       	subi	r27, 0xF0	; 240
    2624:	6c 93       	st	X, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    2626:	80 81       	ld	r24, Z
    2628:	87 7f       	andi	r24, 0xF7	; 247
    262a:	80 83       	st	Z, r24
    262c:	08 95       	ret

0000262e <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    262e:	ff 92       	push	r15
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	18 2f       	mov	r17, r24
    263a:	f9 2e       	mov	r15, r25
    263c:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    263e:	e0 ec       	ldi	r30, 0xC0	; 192
    2640:	f1 e0       	ldi	r31, 0x01	; 1
    2642:	02 85       	ldd	r16, Z+10	; 0x0a
	nvm_eeprom_flush_buffer();
    2644:	d1 df       	rcall	.-94     	; 0x25e8 <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2646:	e0 ec       	ldi	r30, 0xC0	; 192
    2648:	f1 e0       	ldi	r31, 0x01	; 1
    264a:	27 85       	ldd	r18, Z+15	; 0x0f
    264c:	22 23       	and	r18, r18
    264e:	ec f3       	brlt	.-6      	; 0x264a <nvm_eeprom_write_byte+0x1c>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    2650:	6c 2f       	mov	r22, r28
    2652:	81 2f       	mov	r24, r17
    2654:	da df       	rcall	.-76     	; 0x260a <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    2656:	c0 ec       	ldi	r28, 0xC0	; 192
    2658:	d1 e0       	ldi	r29, 0x01	; 1
    265a:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    265c:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    265e:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    2660:	85 e3       	ldi	r24, 0x35	; 53
    2662:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2664:	61 e0       	ldi	r22, 0x01	; 1
    2666:	8b ec       	ldi	r24, 0xCB	; 203
    2668:	91 e0       	ldi	r25, 0x01	; 1
    266a:	8e d0       	rcall	.+284    	; 0x2788 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    266c:	0a 87       	std	Y+10, r16	; 0x0a
}
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	1f 91       	pop	r17
    2674:	0f 91       	pop	r16
    2676:	ff 90       	pop	r15
    2678:	08 95       	ret

0000267a <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    267a:	ef 92       	push	r14
    267c:	ff 92       	push	r15
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2688:	e0 ec       	ldi	r30, 0xC0	; 192
    268a:	f1 e0       	ldi	r31, 0x01	; 1
    268c:	87 85       	ldd	r24, Z+15	; 0x0f
    268e:	88 23       	and	r24, r24
    2690:	ec f3       	brlt	.-6      	; 0x268c <nvm_eeprom_load_page_to_buffer+0x12>
    2692:	78 01       	movw	r14, r16
    2694:	80 e2       	ldi	r24, 0x20	; 32
    2696:	e8 0e       	add	r14, r24
    2698:	f1 1c       	adc	r15, r1
    269a:	e8 01       	movw	r28, r16
    269c:	8c 2f       	mov	r24, r28
    269e:	80 1b       	sub	r24, r16
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
    26a0:	69 91       	ld	r22, Y+
    26a2:	b3 df       	rcall	.-154    	; 0x260a <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    26a4:	ce 15       	cp	r28, r14
    26a6:	df 05       	cpc	r29, r15
    26a8:	c9 f7       	brne	.-14     	; 0x269c <nvm_eeprom_load_page_to_buffer+0x22>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	1f 91       	pop	r17
    26b0:	0f 91       	pop	r16
    26b2:	ff 90       	pop	r15
    26b4:	ef 90       	pop	r14
    26b6:	08 95       	ret

000026b8 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    26b8:	1f 93       	push	r17
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	e0 ec       	ldi	r30, 0xC0	; 192
    26c0:	f1 e0       	ldi	r31, 0x01	; 1
    26c2:	97 85       	ldd	r25, Z+15	; 0x0f
    26c4:	99 23       	and	r25, r25
    26c6:	ec f3       	brlt	.-6      	; 0x26c2 <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    26c8:	20 e2       	ldi	r18, 0x20	; 32
    26ca:	82 9f       	mul	r24, r18
    26cc:	c0 01       	movw	r24, r0
    26ce:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    26d0:	c0 ec       	ldi	r28, 0xC0	; 192
    26d2:	d1 e0       	ldi	r29, 0x01	; 1
    26d4:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    26d6:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    26d8:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    26da:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    26dc:	85 e3       	ldi	r24, 0x35	; 53
    26de:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    26e0:	61 e0       	ldi	r22, 0x01	; 1
    26e2:	8b ec       	ldi	r24, 0xCB	; 203
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	50 d0       	rcall	.+160    	; 0x2788 <ccp_write_io>
	NVM.CMD = old_cmd;
    26e8:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	1f 91       	pop	r17
    26f0:	08 95       	ret

000026f2 <nvm_eeprom_erase_and_write_buffer>:
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
    26f2:	cf 92       	push	r12
    26f4:	df 92       	push	r13
    26f6:	ef 92       	push	r14
    26f8:	ff 92       	push	r15
    26fa:	0f 93       	push	r16
    26fc:	1f 93       	push	r17
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	ec 01       	movw	r28, r24
    2704:	7b 01       	movw	r14, r22
    2706:	8a 01       	movw	r16, r20
	while (len) {
    2708:	41 15       	cp	r20, r1
    270a:	51 05       	cpc	r21, r1
    270c:	51 f1       	breq	.+84     	; 0x2762 <nvm_eeprom_erase_and_write_buffer+0x70>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
    270e:	ce 01       	movw	r24, r28
    2710:	8f 71       	andi	r24, 0x1F	; 31
    2712:	99 27       	eor	r25, r25
    2714:	89 2b       	or	r24, r25
    2716:	b1 f4       	brne	.+44     	; 0x2744 <nvm_eeprom_erase_and_write_buffer+0x52>
    2718:	00 32       	cpi	r16, 0x20	; 32
    271a:	11 05       	cpc	r17, r1
    271c:	98 f0       	brcs	.+38     	; 0x2744 <nvm_eeprom_erase_and_write_buffer+0x52>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
    271e:	c7 01       	movw	r24, r14
    2720:	ac df       	rcall	.-168    	; 0x267a <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
    2722:	ce 01       	movw	r24, r28
    2724:	96 95       	lsr	r25
    2726:	87 95       	ror	r24
    2728:	92 95       	swap	r25
    272a:	82 95       	swap	r24
    272c:	8f 70       	andi	r24, 0x0F	; 15
    272e:	89 27       	eor	r24, r25
    2730:	9f 70       	andi	r25, 0x0F	; 15
    2732:	89 27       	eor	r24, r25
    2734:	c1 df       	rcall	.-126    	; 0x26b8 <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
    2736:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
    2738:	80 e2       	ldi	r24, 0x20	; 32
    273a:	e8 0e       	add	r14, r24
    273c:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
    273e:	00 52       	subi	r16, 0x20	; 32
    2740:	11 09       	sbc	r17, r1
    2742:	0c c0       	rjmp	.+24     	; 0x275c <nvm_eeprom_erase_and_write_buffer+0x6a>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    2744:	6e 01       	movw	r12, r28
    2746:	ef ef       	ldi	r30, 0xFF	; 255
    2748:	ce 1a       	sub	r12, r30
    274a:	de 0a       	sbc	r13, r30
    274c:	f7 01       	movw	r30, r14
    274e:	61 91       	ld	r22, Z+
    2750:	7f 01       	movw	r14, r30
    2752:	ce 01       	movw	r24, r28
    2754:	6c df       	rcall	.-296    	; 0x262e <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
    2756:	01 50       	subi	r16, 0x01	; 1
    2758:	11 09       	sbc	r17, r1
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    275a:	e6 01       	movw	r28, r12
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
	while (len) {
    275c:	01 15       	cp	r16, r1
    275e:	11 05       	cpc	r17, r1
    2760:	b1 f6       	brne	.-84     	; 0x270e <nvm_eeprom_erase_and_write_buffer+0x1c>
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	1f 91       	pop	r17
    2768:	0f 91       	pop	r16
    276a:	ff 90       	pop	r15
    276c:	ef 90       	pop	r14
    276e:	df 90       	pop	r13
    2770:	cf 90       	pop	r12
    2772:	08 95       	ret

00002774 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2774:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    2778:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    277a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    277c:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    2780:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2782:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2786:	08 95       	ret

00002788 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2788:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    278a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    278c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    278e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2790:	60 83       	st	Z, r22
	ret                             // Return to caller
    2792:	08 95       	ret

00002794 <dwt_writetodevice>:
        if(pdw1000local->cbRxErr != NULL)
        {
            pdw1000local->cbRxErr(&pdw1000local->cbData);
        }
    }
}
    2794:	0f 93       	push	r16
    2796:	1f 93       	push	r17
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29
    279c:	00 d0       	rcall	.+0      	; 0x279e <dwt_writetodevice+0xa>
    279e:	1f 92       	push	r1
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	61 15       	cp	r22, r1
    27a6:	71 05       	cpc	r23, r1
    27a8:	29 f4       	brne	.+10     	; 0x27b4 <dwt_writetodevice+0x20>
    27aa:	80 68       	ori	r24, 0x80	; 128
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	14 c0       	rjmp	.+40     	; 0x27dc <dwt_writetodevice+0x48>
    27b4:	80 6c       	ori	r24, 0xC0	; 192
    27b6:	89 83       	std	Y+1, r24	; 0x01
    27b8:	60 38       	cpi	r22, 0x80	; 128
    27ba:	71 05       	cpc	r23, r1
    27bc:	20 f4       	brcc	.+8      	; 0x27c6 <dwt_writetodevice+0x32>
    27be:	6a 83       	std	Y+2, r22	; 0x02
    27c0:	82 e0       	ldi	r24, 0x02	; 2
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	0b c0       	rjmp	.+22     	; 0x27dc <dwt_writetodevice+0x48>
    27c6:	86 2f       	mov	r24, r22
    27c8:	80 68       	ori	r24, 0x80	; 128
    27ca:	8a 83       	std	Y+2, r24	; 0x02
    27cc:	66 0f       	add	r22, r22
    27ce:	67 2f       	mov	r22, r23
    27d0:	66 1f       	adc	r22, r22
    27d2:	77 0b       	sbc	r23, r23
    27d4:	71 95       	neg	r23
    27d6:	6b 83       	std	Y+3, r22	; 0x03
    27d8:	83 e0       	ldi	r24, 0x03	; 3
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	be 01       	movw	r22, r28
    27de:	6f 5f       	subi	r22, 0xFF	; 255
    27e0:	7f 4f       	sbci	r23, 0xFF	; 255
    27e2:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <writetospi>
    27e6:	23 96       	adiw	r28, 0x03	; 3
    27e8:	cd bf       	out	0x3d, r28	; 61
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	08 95       	ret

000027f6 <dwt_writetxdata>:
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	fa 01       	movw	r30, r20
    27fc:	9a 01       	movw	r18, r20
    27fe:	28 0f       	add	r18, r24
    2800:	39 1f       	adc	r19, r25
    2802:	21 30       	cpi	r18, 0x01	; 1
    2804:	34 40       	sbci	r19, 0x04	; 4
    2806:	68 f4       	brcc	.+26     	; 0x2822 <dwt_writetxdata+0x2c>
    2808:	9c 01       	movw	r18, r24
    280a:	22 50       	subi	r18, 0x02	; 2
    280c:	31 09       	sbc	r19, r1
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	50 e0       	ldi	r21, 0x00	; 0
    2812:	8b 01       	movw	r16, r22
    2814:	bf 01       	movw	r22, r30
    2816:	89 e0       	ldi	r24, 0x09	; 9
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	bc df       	rcall	.-136    	; 0x2794 <dwt_writetodevice>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <dwt_writetxdata+0x30>
    2822:	8f ef       	ldi	r24, 0xFF	; 255
    2824:	9f ef       	ldi	r25, 0xFF	; 255
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	08 95       	ret

0000282c <dwt_readfromdevice>:
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	00 d0       	rcall	.+0      	; 0x2836 <dwt_readfromdevice+0xa>
    2836:	1f 92       	push	r1
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	61 15       	cp	r22, r1
    283e:	71 05       	cpc	r23, r1
    2840:	21 f4       	brne	.+8      	; 0x284a <dwt_readfromdevice+0x1e>
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	14 c0       	rjmp	.+40     	; 0x2872 <dwt_readfromdevice+0x46>
    284a:	80 64       	ori	r24, 0x40	; 64
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	60 38       	cpi	r22, 0x80	; 128
    2850:	71 05       	cpc	r23, r1
    2852:	20 f4       	brcc	.+8      	; 0x285c <dwt_readfromdevice+0x30>
    2854:	6a 83       	std	Y+2, r22	; 0x02
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0b c0       	rjmp	.+22     	; 0x2872 <dwt_readfromdevice+0x46>
    285c:	86 2f       	mov	r24, r22
    285e:	80 68       	ori	r24, 0x80	; 128
    2860:	8a 83       	std	Y+2, r24	; 0x02
    2862:	66 0f       	add	r22, r22
    2864:	67 2f       	mov	r22, r23
    2866:	66 1f       	adc	r22, r22
    2868:	77 0b       	sbc	r23, r23
    286a:	71 95       	neg	r23
    286c:	6b 83       	std	Y+3, r22	; 0x03
    286e:	83 e0       	ldi	r24, 0x03	; 3
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	be 01       	movw	r22, r28
    2874:	6f 5f       	subi	r22, 0xFF	; 255
    2876:	7f 4f       	sbci	r23, 0xFF	; 255
    2878:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <readfromspi>
    287c:	23 96       	adiw	r28, 0x03	; 3
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	1f 91       	pop	r17
    2888:	0f 91       	pop	r16
    288a:	08 95       	ret

0000288c <dwt_readrxdata>:
    288c:	0f 93       	push	r16
    288e:	1f 93       	push	r17
    2890:	9b 01       	movw	r18, r22
    2892:	ba 01       	movw	r22, r20
    2894:	40 e0       	ldi	r20, 0x00	; 0
    2896:	50 e0       	ldi	r21, 0x00	; 0
    2898:	8c 01       	movw	r16, r24
    289a:	81 e1       	ldi	r24, 0x11	; 17
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	c6 df       	rcall	.-116    	; 0x282c <dwt_readfromdevice>
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	08 95       	ret

000028a6 <dwt_readtxtimestamp>:
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	8c 01       	movw	r16, r24
    28ac:	25 e0       	ldi	r18, 0x05	; 5
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	60 e0       	ldi	r22, 0x00	; 0
    28b6:	70 e0       	ldi	r23, 0x00	; 0
    28b8:	87 e1       	ldi	r24, 0x17	; 23
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	b7 df       	rcall	.-146    	; 0x282c <dwt_readfromdevice>
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	08 95       	ret

000028c4 <dwt_readrxtimestamp>:
    28c4:	0f 93       	push	r16
    28c6:	1f 93       	push	r17
    28c8:	8c 01       	movw	r16, r24
    28ca:	25 e0       	ldi	r18, 0x05	; 5
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	85 e1       	ldi	r24, 0x15	; 21
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	a8 df       	rcall	.-176    	; 0x282c <dwt_readfromdevice>
    28dc:	1f 91       	pop	r17
    28de:	0f 91       	pop	r16
    28e0:	08 95       	ret

000028e2 <dwt_read32bitoffsetreg>:
    28e2:	ef 92       	push	r14
    28e4:	ff 92       	push	r15
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <dwt_read32bitoffsetreg+0xe>
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <dwt_read32bitoffsetreg+0x10>
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	9e 01       	movw	r18, r28
    28f8:	2f 5f       	subi	r18, 0xFF	; 255
    28fa:	3f 4f       	sbci	r19, 0xFF	; 255
    28fc:	89 01       	movw	r16, r18
    28fe:	24 e0       	ldi	r18, 0x04	; 4
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	50 e0       	ldi	r21, 0x00	; 0
    2906:	92 df       	rcall	.-220    	; 0x282c <dwt_readfromdevice>
    2908:	fe 01       	movw	r30, r28
    290a:	35 96       	adiw	r30, 0x05	; 5
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	70 e0       	ldi	r23, 0x00	; 0
    2910:	cb 01       	movw	r24, r22
    2912:	b8 2f       	mov	r27, r24
    2914:	a7 2f       	mov	r26, r23
    2916:	96 2f       	mov	r25, r22
    2918:	88 27       	eor	r24, r24
    291a:	22 91       	ld	r18, -Z
    291c:	bc 01       	movw	r22, r24
    291e:	cd 01       	movw	r24, r26
    2920:	62 0f       	add	r22, r18
    2922:	71 1d       	adc	r23, r1
    2924:	81 1d       	adc	r24, r1
    2926:	91 1d       	adc	r25, r1
    2928:	e0 17       	cp	r30, r16
    292a:	f1 07       	cpc	r31, r17
    292c:	91 f7       	brne	.-28     	; 0x2912 <dwt_read32bitoffsetreg+0x30>
    292e:	24 96       	adiw	r28, 0x04	; 4
    2930:	cd bf       	out	0x3d, r28	; 61
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	1f 91       	pop	r17
    293a:	0f 91       	pop	r16
    293c:	ff 90       	pop	r15
    293e:	ef 90       	pop	r14
    2940:	08 95       	ret

00002942 <dwt_readdevid>:
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	cb cf       	rjmp	.-106    	; 0x28e2 <dwt_read32bitoffsetreg>
    294c:	08 95       	ret

0000294e <dwt_read16bitoffsetreg>:
    294e:	0f 93       	push	r16
    2950:	1f 93       	push	r17
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	00 d0       	rcall	.+0      	; 0x2958 <dwt_read16bitoffsetreg+0xa>
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	8e 01       	movw	r16, r28
    295e:	0f 5f       	subi	r16, 0xFF	; 255
    2960:	1f 4f       	sbci	r17, 0xFF	; 255
    2962:	22 e0       	ldi	r18, 0x02	; 2
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	60 df       	rcall	.-320    	; 0x282c <dwt_readfromdevice>
    296c:	8a 81       	ldd	r24, Y+2	; 0x02
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	98 2f       	mov	r25, r24
    2972:	88 27       	eor	r24, r24
    2974:	29 81       	ldd	r18, Y+1	; 0x01
    2976:	82 0f       	add	r24, r18
    2978:	91 1d       	adc	r25, r1
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	08 95       	ret

00002988 <dwt_read8bitoffsetreg>:
    2988:	0f 93       	push	r16
    298a:	1f 93       	push	r17
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	1f 92       	push	r1
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	8e 01       	movw	r16, r28
    2998:	0f 5f       	subi	r16, 0xFF	; 255
    299a:	1f 4f       	sbci	r17, 0xFF	; 255
    299c:	21 e0       	ldi	r18, 0x01	; 1
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e0       	ldi	r20, 0x00	; 0
    29a2:	50 e0       	ldi	r21, 0x00	; 0
    29a4:	43 df       	rcall	.-378    	; 0x282c <dwt_readfromdevice>
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	0f 90       	pop	r0
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	1f 91       	pop	r17
    29b0:	0f 91       	pop	r16
    29b2:	08 95       	ret

000029b4 <dwt_write8bitoffsetreg>:
    29b4:	0f 93       	push	r16
    29b6:	1f 93       	push	r17
    29b8:	cf 93       	push	r28
    29ba:	df 93       	push	r29
    29bc:	1f 92       	push	r1
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	49 83       	std	Y+1, r20	; 0x01
    29c4:	8e 01       	movw	r16, r28
    29c6:	0f 5f       	subi	r16, 0xFF	; 255
    29c8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ca:	21 e0       	ldi	r18, 0x01	; 1
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e0       	ldi	r20, 0x00	; 0
    29d0:	50 e0       	ldi	r21, 0x00	; 0
    29d2:	e0 de       	rcall	.-576    	; 0x2794 <dwt_writetodevice>
    29d4:	0f 90       	pop	r0
    29d6:	df 91       	pop	r29
    29d8:	cf 91       	pop	r28
    29da:	1f 91       	pop	r17
    29dc:	0f 91       	pop	r16
    29de:	08 95       	ret

000029e0 <dwt_write16bitoffsetreg>:
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <dwt_write16bitoffsetreg+0xa>
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	49 83       	std	Y+1, r20	; 0x01
    29f0:	5a 83       	std	Y+2, r21	; 0x02
    29f2:	8e 01       	movw	r16, r28
    29f4:	0f 5f       	subi	r16, 0xFF	; 255
    29f6:	1f 4f       	sbci	r17, 0xFF	; 255
    29f8:	22 e0       	ldi	r18, 0x02	; 2
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	c9 de       	rcall	.-622    	; 0x2794 <dwt_writetodevice>
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	1f 91       	pop	r17
    2a0c:	0f 91       	pop	r16
    2a0e:	08 95       	ret

00002a10 <dwt_setrxantennadelay>:
    2a10:	ac 01       	movw	r20, r24
    2a12:	64 e0       	ldi	r22, 0x04	; 4
    2a14:	78 e1       	ldi	r23, 0x18	; 24
    2a16:	8e e2       	ldi	r24, 0x2E	; 46
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	e2 cf       	rjmp	.-60     	; 0x29e0 <dwt_write16bitoffsetreg>
    2a1c:	08 95       	ret

00002a1e <dwt_settxantennadelay>:
    2a1e:	ac 01       	movw	r20, r24
    2a20:	60 e0       	ldi	r22, 0x00	; 0
    2a22:	70 e0       	ldi	r23, 0x00	; 0
    2a24:	88 e1       	ldi	r24, 0x18	; 24
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	db cf       	rjmp	.-74     	; 0x29e0 <dwt_write16bitoffsetreg>
    2a2a:	08 95       	ret

00002a2c <dwt_write32bitoffsetreg>:
    2a2c:	0f 93       	push	r16
    2a2e:	1f 93       	push	r17
    2a30:	cf 93       	push	r28
    2a32:	df 93       	push	r29
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <dwt_write32bitoffsetreg+0xa>
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <dwt_write32bitoffsetreg+0xc>
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	29 83       	std	Y+1, r18	; 0x01
    2a3e:	3a 83       	std	Y+2, r19	; 0x02
    2a40:	4b 83       	std	Y+3, r20	; 0x03
    2a42:	5c 83       	std	Y+4, r21	; 0x04
    2a44:	8e 01       	movw	r16, r28
    2a46:	0f 5f       	subi	r16, 0xFF	; 255
    2a48:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4a:	24 e0       	ldi	r18, 0x04	; 4
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	40 e0       	ldi	r20, 0x00	; 0
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	a0 de       	rcall	.-704    	; 0x2794 <dwt_writetodevice>
    2a54:	24 96       	adiw	r28, 0x04	; 4
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	1f 91       	pop	r17
    2a60:	0f 91       	pop	r16
    2a62:	08 95       	ret

00002a64 <dwt_writetxfctrl>:
    2a64:	cf 92       	push	r12
    2a66:	df 92       	push	r13
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	8c 01       	movw	r16, r24
    2a72:	ca 01       	movw	r24, r20
    2a74:	aa 27       	eor	r26, r26
    2a76:	97 fd       	sbrc	r25, 7
    2a78:	a0 95       	com	r26
    2a7a:	ba 2f       	mov	r27, r26
    2a7c:	07 2e       	mov	r0, r23
    2a7e:	7f e0       	ldi	r23, 0x0F	; 15
    2a80:	88 0f       	add	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	aa 1f       	adc	r26, r26
    2a86:	bb 1f       	adc	r27, r27
    2a88:	7a 95       	dec	r23
    2a8a:	d1 f7       	brne	.-12     	; 0x2a80 <dwt_writetxfctrl+0x1c>
    2a8c:	70 2d       	mov	r23, r0
    2a8e:	e0 91 98 20 	lds	r30, 0x2098
    2a92:	f0 91 99 20 	lds	r31, 0x2099
    2a96:	c2 84       	ldd	r12, Z+10	; 0x0a
    2a98:	d3 84       	ldd	r13, Z+11	; 0x0b
    2a9a:	e4 84       	ldd	r14, Z+12	; 0x0c
    2a9c:	f5 84       	ldd	r15, Z+13	; 0x0d
    2a9e:	8c 29       	or	r24, r12
    2aa0:	9d 29       	or	r25, r13
    2aa2:	ae 29       	or	r26, r14
    2aa4:	bf 29       	or	r27, r15
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	80 2b       	or	r24, r16
    2aac:	91 2b       	or	r25, r17
    2aae:	a2 2b       	or	r26, r18
    2ab0:	b3 2b       	or	r27, r19
    2ab2:	ab 01       	movw	r20, r22
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	70 e0       	ldi	r23, 0x00	; 0
    2ab8:	03 2e       	mov	r0, r19
    2aba:	36 e1       	ldi	r19, 0x16	; 22
    2abc:	44 0f       	add	r20, r20
    2abe:	55 1f       	adc	r21, r21
    2ac0:	66 1f       	adc	r22, r22
    2ac2:	77 1f       	adc	r23, r23
    2ac4:	3a 95       	dec	r19
    2ac6:	d1 f7       	brne	.-12     	; 0x2abc <dwt_writetxfctrl+0x58>
    2ac8:	30 2d       	mov	r19, r0
    2aca:	9a 01       	movw	r18, r20
    2acc:	ab 01       	movw	r20, r22
    2ace:	28 2b       	or	r18, r24
    2ad0:	39 2b       	or	r19, r25
    2ad2:	4a 2b       	or	r20, r26
    2ad4:	5b 2b       	or	r21, r27
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	70 e0       	ldi	r23, 0x00	; 0
    2ada:	88 e0       	ldi	r24, 0x08	; 8
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	a6 df       	rcall	.-180    	; 0x2a2c <dwt_write32bitoffsetreg>
    2ae0:	1f 91       	pop	r17
    2ae2:	0f 91       	pop	r16
    2ae4:	ff 90       	pop	r15
    2ae6:	ef 90       	pop	r14
    2ae8:	df 90       	pop	r13
    2aea:	cf 90       	pop	r12
    2aec:	08 95       	ret

00002aee <_dwt_otpread>:
    2aee:	ab 01       	movw	r20, r22
    2af0:	64 e0       	ldi	r22, 0x04	; 4
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	8d e2       	ldi	r24, 0x2D	; 45
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	73 df       	rcall	.-282    	; 0x29e0 <dwt_write16bitoffsetreg>
    2afa:	43 e0       	ldi	r20, 0x03	; 3
    2afc:	66 e0       	ldi	r22, 0x06	; 6
    2afe:	70 e0       	ldi	r23, 0x00	; 0
    2b00:	8d e2       	ldi	r24, 0x2D	; 45
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	57 df       	rcall	.-338    	; 0x29b4 <dwt_write8bitoffsetreg>
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	66 e0       	ldi	r22, 0x06	; 6
    2b0a:	70 e0       	ldi	r23, 0x00	; 0
    2b0c:	8d e2       	ldi	r24, 0x2D	; 45
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	51 df       	rcall	.-350    	; 0x29b4 <dwt_write8bitoffsetreg>
    2b12:	6a e0       	ldi	r22, 0x0A	; 10
    2b14:	70 e0       	ldi	r23, 0x00	; 0
    2b16:	8d e2       	ldi	r24, 0x2D	; 45
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	e3 ce       	rjmp	.-570    	; 0x28e2 <dwt_read32bitoffsetreg>
    2b1c:	08 95       	ret

00002b1e <_dwt_aonarrayupload>:
    2b1e:	40 e0       	ldi	r20, 0x00	; 0
    2b20:	62 e0       	ldi	r22, 0x02	; 2
    2b22:	70 e0       	ldi	r23, 0x00	; 0
    2b24:	8c e2       	ldi	r24, 0x2C	; 44
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	45 df       	rcall	.-374    	; 0x29b4 <dwt_write8bitoffsetreg>
    2b2a:	42 e0       	ldi	r20, 0x02	; 2
    2b2c:	62 e0       	ldi	r22, 0x02	; 2
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	8c e2       	ldi	r24, 0x2C	; 44
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	3f cf       	rjmp	.-386    	; 0x29b4 <dwt_write8bitoffsetreg>
    2b36:	08 95       	ret

00002b38 <_dwt_configlde>:
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
    2b3c:	ec 01       	movw	r28, r24
    2b3e:	4d e6       	ldi	r20, 0x6D	; 109
    2b40:	66 e0       	ldi	r22, 0x06	; 6
    2b42:	78 e0       	ldi	r23, 0x08	; 8
    2b44:	8e e2       	ldi	r24, 0x2E	; 46
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	35 df       	rcall	.-406    	; 0x29b4 <dwt_write8bitoffsetreg>
    2b4a:	cd 2b       	or	r28, r29
    2b4c:	41 f0       	breq	.+16     	; 0x2b5e <_dwt_configlde+0x26>
    2b4e:	47 e0       	ldi	r20, 0x07	; 7
    2b50:	56 e0       	ldi	r21, 0x06	; 6
    2b52:	66 e0       	ldi	r22, 0x06	; 6
    2b54:	78 e1       	ldi	r23, 0x18	; 24
    2b56:	8e e2       	ldi	r24, 0x2E	; 46
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	42 df       	rcall	.-380    	; 0x29e0 <dwt_write16bitoffsetreg>
    2b5c:	07 c0       	rjmp	.+14     	; 0x2b6c <_dwt_configlde+0x34>
    2b5e:	47 e0       	ldi	r20, 0x07	; 7
    2b60:	56 e1       	ldi	r21, 0x16	; 22
    2b62:	66 e0       	ldi	r22, 0x06	; 6
    2b64:	78 e1       	ldi	r23, 0x18	; 24
    2b66:	8e e2       	ldi	r24, 0x2E	; 46
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	3a df       	rcall	.-396    	; 0x29e0 <dwt_write16bitoffsetreg>
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	08 95       	ret

00002b72 <dwt_configure>:
    2b72:	4f 92       	push	r4
    2b74:	5f 92       	push	r5
    2b76:	6f 92       	push	r6
    2b78:	7f 92       	push	r7
    2b7a:	af 92       	push	r10
    2b7c:	bf 92       	push	r11
    2b7e:	cf 92       	push	r12
    2b80:	df 92       	push	r13
    2b82:	ef 92       	push	r14
    2b84:	ff 92       	push	r15
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
    2b8a:	cf 93       	push	r28
    2b8c:	df 93       	push	r29
    2b8e:	ec 01       	movw	r28, r24
    2b90:	48 80       	ld	r4, Y
    2b92:	59 80       	ldd	r5, Y+1	; 0x01
    2b94:	6a 80       	ldd	r6, Y+2	; 0x02
    2b96:	7b 80       	ldd	r7, Y+3	; 0x03
    2b98:	84 2d       	mov	r24, r4
    2b9a:	ec 89       	ldd	r30, Y+20	; 0x14
    2b9c:	fd 89       	ldd	r31, Y+21	; 0x15
    2b9e:	ee 0f       	add	r30, r30
    2ba0:	ff 1f       	adc	r31, r31
    2ba2:	e6 54       	subi	r30, 0x46	; 70
    2ba4:	fe 4d       	sbci	r31, 0xDE	; 222
    2ba6:	c0 80       	ld	r12, Z
    2ba8:	d1 80       	ldd	r13, Z+1	; 0x01
    2baa:	0c 81       	ldd	r16, Y+4	; 0x04
    2bac:	01 50       	subi	r16, 0x01	; 1
    2bae:	84 30       	cpi	r24, 0x04	; 4
    2bb0:	41 f0       	breq	.+16     	; 0x2bc2 <dwt_configure+0x50>
    2bb2:	21 e0       	ldi	r18, 0x01	; 1
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	87 30       	cpi	r24, 0x07	; 7
    2bb8:	09 f0       	breq	.+2      	; 0x2bbc <dwt_configure+0x4a>
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	e2 2e       	mov	r14, r18
    2bbe:	f9 2e       	mov	r15, r25
    2bc0:	03 c0       	rjmp	.+6      	; 0x2bc8 <dwt_configure+0x56>
    2bc2:	ee 24       	eor	r14, r14
    2bc4:	e3 94       	inc	r14
    2bc6:	f1 2c       	mov	r15, r1
    2bc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2bca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2bcc:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2bce:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2bd0:	89 2b       	or	r24, r25
    2bd2:	8a 2b       	or	r24, r26
    2bd4:	8b 2b       	or	r24, r27
    2bd6:	a1 f4       	brne	.+40     	; 0x2c00 <dwt_configure+0x8e>
    2bd8:	e0 91 98 20 	lds	r30, 0x2098
    2bdc:	f0 91 99 20 	lds	r31, 0x2099
    2be0:	80 89       	ldd	r24, Z+16	; 0x10
    2be2:	91 89       	ldd	r25, Z+17	; 0x11
    2be4:	a2 89       	ldd	r26, Z+18	; 0x12
    2be6:	b3 89       	ldd	r27, Z+19	; 0x13
    2be8:	a0 64       	ori	r26, 0x40	; 64
    2bea:	80 8b       	std	Z+16, r24	; 0x10
    2bec:	91 8b       	std	Z+17, r25	; 0x11
    2bee:	a2 8b       	std	Z+18, r26	; 0x12
    2bf0:	b3 8b       	std	Z+19, r27	; 0x13
    2bf2:	d6 94       	lsr	r13
    2bf4:	c7 94       	ror	r12
    2bf6:	d6 94       	lsr	r13
    2bf8:	c7 94       	ror	r12
    2bfa:	d6 94       	lsr	r13
    2bfc:	c7 94       	ror	r12
    2bfe:	0d c0       	rjmp	.+26     	; 0x2c1a <dwt_configure+0xa8>
    2c00:	e0 91 98 20 	lds	r30, 0x2098
    2c04:	f0 91 99 20 	lds	r31, 0x2099
    2c08:	80 89       	ldd	r24, Z+16	; 0x10
    2c0a:	91 89       	ldd	r25, Z+17	; 0x11
    2c0c:	a2 89       	ldd	r26, Z+18	; 0x12
    2c0e:	b3 89       	ldd	r27, Z+19	; 0x13
    2c10:	af 7b       	andi	r26, 0xBF	; 191
    2c12:	80 8b       	std	Z+16, r24	; 0x10
    2c14:	91 8b       	std	Z+17, r25	; 0x11
    2c16:	a2 8b       	std	Z+18, r26	; 0x12
    2c18:	b3 8b       	std	Z+19, r27	; 0x13
    2c1a:	e0 91 98 20 	lds	r30, 0x2098
    2c1e:	f0 91 99 20 	lds	r31, 0x2099
    2c22:	88 a1       	ldd	r24, Y+32	; 0x20
    2c24:	80 87       	std	Z+8, r24	; 0x08
    2c26:	80 89       	ldd	r24, Z+16	; 0x10
    2c28:	91 89       	ldd	r25, Z+17	; 0x11
    2c2a:	a2 89       	ldd	r26, Z+18	; 0x12
    2c2c:	b3 89       	ldd	r27, Z+19	; 0x13
    2c2e:	ac 7f       	andi	r26, 0xFC	; 252
    2c30:	80 8b       	std	Z+16, r24	; 0x10
    2c32:	91 8b       	std	Z+17, r25	; 0x11
    2c34:	a2 8b       	std	Z+18, r26	; 0x12
    2c36:	b3 8b       	std	Z+19, r27	; 0x13
    2c38:	48 a1       	ldd	r20, Y+32	; 0x20
    2c3a:	59 a1       	ldd	r21, Y+33	; 0x21
    2c3c:	6a a1       	ldd	r22, Y+34	; 0x22
    2c3e:	7b a1       	ldd	r23, Y+35	; 0x23
    2c40:	ba 01       	movw	r22, r20
    2c42:	55 27       	eor	r21, r21
    2c44:	44 27       	eor	r20, r20
    2c46:	44 27       	eor	r20, r20
    2c48:	55 27       	eor	r21, r21
    2c4a:	63 70       	andi	r22, 0x03	; 3
    2c4c:	77 27       	eor	r23, r23
    2c4e:	9a 01       	movw	r18, r20
    2c50:	ab 01       	movw	r20, r22
    2c52:	28 2b       	or	r18, r24
    2c54:	39 2b       	or	r19, r25
    2c56:	4a 2b       	or	r20, r26
    2c58:	5b 2b       	or	r21, r27
    2c5a:	20 8b       	std	Z+16, r18	; 0x10
    2c5c:	31 8b       	std	Z+17, r19	; 0x11
    2c5e:	42 8b       	std	Z+18, r20	; 0x12
    2c60:	53 8b       	std	Z+19, r21	; 0x13
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	70 e0       	ldi	r23, 0x00	; 0
    2c66:	84 e0       	ldi	r24, 0x04	; 4
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	e0 de       	rcall	.-576    	; 0x2a2c <dwt_write32bitoffsetreg>
    2c6c:	a6 01       	movw	r20, r12
    2c6e:	64 e0       	ldi	r22, 0x04	; 4
    2c70:	78 e2       	ldi	r23, 0x28	; 40
    2c72:	8e e2       	ldi	r24, 0x2E	; 46
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	b4 de       	rcall	.-664    	; 0x29e0 <dwt_write16bitoffsetreg>
    2c78:	10 e0       	ldi	r17, 0x00	; 0
    2c7a:	c8 01       	movw	r24, r16
    2c7c:	5d df       	rcall	.-326    	; 0x2b38 <_dwt_configlde>
    2c7e:	e4 2d       	mov	r30, r4
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	e1 5a       	subi	r30, 0xA1	; 161
    2c84:	fd 4d       	sbci	r31, 0xDD	; 221
    2c86:	a0 80       	ld	r10, Z
    2c88:	b1 2c       	mov	r11, r1
    2c8a:	65 01       	movw	r12, r10
    2c8c:	cc 0c       	add	r12, r12
    2c8e:	dd 1c       	adc	r13, r13
    2c90:	cc 0c       	add	r12, r12
    2c92:	dd 1c       	adc	r13, r13
    2c94:	f6 01       	movw	r30, r12
    2c96:	e1 5d       	subi	r30, 0xD1	; 209
    2c98:	fd 4d       	sbci	r31, 0xDD	; 221
    2c9a:	20 81       	ld	r18, Z
    2c9c:	31 81       	ldd	r19, Z+1	; 0x01
    2c9e:	42 81       	ldd	r20, Z+2	; 0x02
    2ca0:	53 81       	ldd	r21, Z+3	; 0x03
    2ca2:	67 e0       	ldi	r22, 0x07	; 7
    2ca4:	70 e0       	ldi	r23, 0x00	; 0
    2ca6:	8b e2       	ldi	r24, 0x2B	; 43
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	c0 de       	rcall	.-640    	; 0x2a2c <dwt_write32bitoffsetreg>
    2cac:	f5 01       	movw	r30, r10
    2cae:	e7 5d       	subi	r30, 0xD7	; 215
    2cb0:	fd 4d       	sbci	r31, 0xDD	; 221
    2cb2:	40 81       	ld	r20, Z
    2cb4:	6b e0       	ldi	r22, 0x0B	; 11
    2cb6:	70 e0       	ldi	r23, 0x00	; 0
    2cb8:	8b e2       	ldi	r24, 0x2B	; 43
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	7b de       	rcall	.-778    	; 0x29b4 <dwt_write8bitoffsetreg>
    2cbe:	f7 01       	movw	r30, r14
    2cc0:	ff 27       	eor	r31, r31
    2cc2:	e9 5d       	subi	r30, 0xD9	; 217
    2cc4:	fd 4d       	sbci	r31, 0xDD	; 221
    2cc6:	40 81       	ld	r20, Z
    2cc8:	6b e0       	ldi	r22, 0x0B	; 11
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	88 e2       	ldi	r24, 0x28	; 40
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	71 de       	rcall	.-798    	; 0x29b4 <dwt_write8bitoffsetreg>
    2cd2:	f6 01       	movw	r30, r12
    2cd4:	e9 5b       	subi	r30, 0xB9	; 185
    2cd6:	fd 4d       	sbci	r31, 0xDD	; 221
    2cd8:	20 81       	ld	r18, Z
    2cda:	31 81       	ldd	r19, Z+1	; 0x01
    2cdc:	42 81       	ldd	r20, Z+2	; 0x02
    2cde:	53 81       	ldd	r21, Z+3	; 0x03
    2ce0:	6c e0       	ldi	r22, 0x0C	; 12
    2ce2:	70 e0       	ldi	r23, 0x00	; 0
    2ce4:	88 e2       	ldi	r24, 0x28	; 40
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	a1 de       	rcall	.-702    	; 0x2a2c <dwt_write32bitoffsetreg>
    2cea:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2cec:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2cee:	ee 0f       	add	r30, r30
    2cf0:	ff 1f       	adc	r31, r31
    2cf2:	88 8d       	ldd	r24, Y+24	; 0x18
    2cf4:	99 8d       	ldd	r25, Y+25	; 0x19
    2cf6:	e8 0f       	add	r30, r24
    2cf8:	f9 1f       	adc	r31, r25
    2cfa:	ee 0f       	add	r30, r30
    2cfc:	ff 1f       	adc	r31, r31
    2cfe:	e0 5f       	subi	r30, 0xF0	; 240
    2d00:	fd 4d       	sbci	r31, 0xDD	; 221
    2d02:	40 81       	ld	r20, Z
    2d04:	51 81       	ldd	r21, Z+1	; 0x01
    2d06:	62 e0       	ldi	r22, 0x02	; 2
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	87 e2       	ldi	r24, 0x27	; 39
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	68 de       	rcall	.-816    	; 0x29e0 <dwt_write16bitoffsetreg>
    2d10:	f8 01       	movw	r30, r16
    2d12:	ee 0f       	add	r30, r30
    2d14:	ff 1f       	adc	r31, r31
    2d16:	e4 5f       	subi	r30, 0xF4	; 244
    2d18:	fd 4d       	sbci	r31, 0xDD	; 221
    2d1a:	40 81       	ld	r20, Z
    2d1c:	51 81       	ldd	r21, Z+1	; 0x01
    2d1e:	64 e0       	ldi	r22, 0x04	; 4
    2d20:	70 e0       	ldi	r23, 0x00	; 0
    2d22:	87 e2       	ldi	r24, 0x27	; 39
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	5c de       	rcall	.-840    	; 0x29e0 <dwt_write16bitoffsetreg>
    2d28:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d2a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d2c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2d2e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2d30:	89 2b       	or	r24, r25
    2d32:	8a 2b       	or	r24, r26
    2d34:	8b 2b       	or	r24, r27
    2d36:	41 f4       	brne	.+16     	; 0x2d48 <dwt_configure+0x1d6>
    2d38:	44 e6       	ldi	r20, 0x64	; 100
    2d3a:	50 e0       	ldi	r21, 0x00	; 0
    2d3c:	66 e0       	ldi	r22, 0x06	; 6
    2d3e:	70 e0       	ldi	r23, 0x00	; 0
    2d40:	87 e2       	ldi	r24, 0x27	; 39
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	4d de       	rcall	.-870    	; 0x29e0 <dwt_write16bitoffsetreg>
    2d46:	23 c0       	rjmp	.+70     	; 0x2d8e <dwt_configure+0x21c>
    2d48:	88 85       	ldd	r24, Y+8	; 0x08
    2d4a:	99 85       	ldd	r25, Y+9	; 0x09
    2d4c:	aa 85       	ldd	r26, Y+10	; 0x0a
    2d4e:	bb 85       	ldd	r27, Y+11	; 0x0b
    2d50:	04 97       	sbiw	r24, 0x04	; 4
    2d52:	a1 05       	cpc	r26, r1
    2d54:	b1 05       	cpc	r27, r1
    2d56:	71 f4       	brne	.+28     	; 0x2d74 <dwt_configure+0x202>
    2d58:	40 e1       	ldi	r20, 0x10	; 16
    2d5a:	50 e0       	ldi	r21, 0x00	; 0
    2d5c:	66 e0       	ldi	r22, 0x06	; 6
    2d5e:	70 e0       	ldi	r23, 0x00	; 0
    2d60:	87 e2       	ldi	r24, 0x27	; 39
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	3d de       	rcall	.-902    	; 0x29e0 <dwt_write16bitoffsetreg>
    2d66:	40 e1       	ldi	r20, 0x10	; 16
    2d68:	66 e2       	ldi	r22, 0x26	; 38
    2d6a:	70 e0       	ldi	r23, 0x00	; 0
    2d6c:	87 e2       	ldi	r24, 0x27	; 39
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	21 de       	rcall	.-958    	; 0x29b4 <dwt_write8bitoffsetreg>
    2d72:	0d c0       	rjmp	.+26     	; 0x2d8e <dwt_configure+0x21c>
    2d74:	40 e2       	ldi	r20, 0x20	; 32
    2d76:	50 e0       	ldi	r21, 0x00	; 0
    2d78:	66 e0       	ldi	r22, 0x06	; 6
    2d7a:	70 e0       	ldi	r23, 0x00	; 0
    2d7c:	87 e2       	ldi	r24, 0x27	; 39
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	2f de       	rcall	.-930    	; 0x29e0 <dwt_write16bitoffsetreg>
    2d82:	48 e2       	ldi	r20, 0x28	; 40
    2d84:	66 e2       	ldi	r22, 0x26	; 38
    2d86:	70 e0       	ldi	r23, 0x00	; 0
    2d88:	87 e2       	ldi	r24, 0x27	; 39
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	13 de       	rcall	.-986    	; 0x29b4 <dwt_write8bitoffsetreg>
    2d8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d90:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d92:	f8 01       	movw	r30, r16
    2d94:	ee 0f       	add	r30, r30
    2d96:	ff 1f       	adc	r31, r31
    2d98:	ee 0f       	add	r30, r30
    2d9a:	ff 1f       	adc	r31, r31
    2d9c:	e8 0f       	add	r30, r24
    2d9e:	f9 1f       	adc	r31, r25
    2da0:	ee 0f       	add	r30, r30
    2da2:	ff 1f       	adc	r31, r31
    2da4:	ee 0f       	add	r30, r30
    2da6:	ff 1f       	adc	r31, r31
    2da8:	e4 51       	subi	r30, 0x14	; 20
    2daa:	fe 4d       	sbci	r31, 0xDE	; 222
    2dac:	20 81       	ld	r18, Z
    2dae:	31 81       	ldd	r19, Z+1	; 0x01
    2db0:	42 81       	ldd	r20, Z+2	; 0x02
    2db2:	53 81       	ldd	r21, Z+3	; 0x03
    2db4:	68 e0       	ldi	r22, 0x08	; 8
    2db6:	70 e0       	ldi	r23, 0x00	; 0
    2db8:	87 e2       	ldi	r24, 0x27	; 39
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	37 de       	rcall	.-914    	; 0x2a2c <dwt_write32bitoffsetreg>
    2dbe:	8c a1       	ldd	r24, Y+36	; 0x24
    2dc0:	9d a1       	ldd	r25, Y+37	; 0x25
    2dc2:	ae a1       	ldd	r26, Y+38	; 0x26
    2dc4:	bf a1       	ldd	r27, Y+39	; 0x27
    2dc6:	89 2b       	or	r24, r25
    2dc8:	8a 2b       	or	r24, r26
    2dca:	8b 2b       	or	r24, r27
    2dcc:	41 f4       	brne	.+16     	; 0x2dde <dwt_configure+0x26c>
    2dce:	81 e4       	ldi	r24, 0x41	; 65
    2dd0:	90 e1       	ldi	r25, 0x10	; 16
    2dd2:	a0 e0       	ldi	r26, 0x00	; 0
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	8c a3       	std	Y+36, r24	; 0x24
    2dd8:	9d a3       	std	Y+37, r25	; 0x25
    2dda:	ae a3       	std	Y+38, r26	; 0x26
    2ddc:	bf a3       	std	Y+39, r27	; 0x27
    2dde:	4c a1       	ldd	r20, Y+36	; 0x24
    2de0:	5d a1       	ldd	r21, Y+37	; 0x25
    2de2:	60 e2       	ldi	r22, 0x20	; 32
    2de4:	70 e0       	ldi	r23, 0x00	; 0
    2de6:	87 e2       	ldi	r24, 0x27	; 39
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	fa dd       	rcall	.-1036   	; 0x29e0 <dwt_write16bitoffsetreg>
    2dec:	20 91 1f 22 	lds	r18, 0x221F
    2df0:	30 91 20 22 	lds	r19, 0x2220
    2df4:	40 91 21 22 	lds	r20, 0x2221
    2df8:	50 91 22 22 	lds	r21, 0x2222
    2dfc:	6c e0       	ldi	r22, 0x0C	; 12
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	83 e2       	ldi	r24, 0x23	; 35
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	13 de       	rcall	.-986    	; 0x2a2c <dwt_write32bitoffsetreg>
    2e06:	f8 01       	movw	r30, r16
    2e08:	ee 0f       	add	r30, r30
    2e0a:	ff 1f       	adc	r31, r31
    2e0c:	ed 5d       	subi	r30, 0xDD	; 221
    2e0e:	fd 4d       	sbci	r31, 0xDD	; 221
    2e10:	40 81       	ld	r20, Z
    2e12:	51 81       	ldd	r21, Z+1	; 0x01
    2e14:	64 e0       	ldi	r22, 0x04	; 4
    2e16:	70 e0       	ldi	r23, 0x00	; 0
    2e18:	83 e2       	ldi	r24, 0x23	; 35
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	e1 dd       	rcall	.-1086   	; 0x29e0 <dwt_write16bitoffsetreg>
    2e1e:	88 8d       	ldd	r24, Y+24	; 0x18
    2e20:	99 8d       	ldd	r25, Y+25	; 0x19
    2e22:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2e24:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2e26:	89 2b       	or	r24, r25
    2e28:	8a 2b       	or	r24, r26
    2e2a:	8b 2b       	or	r24, r27
    2e2c:	69 f0       	breq	.+26     	; 0x2e48 <dwt_configure+0x2d6>
    2e2e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2e30:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2e32:	e4 5e       	subi	r30, 0xE4	; 228
    2e34:	fd 4d       	sbci	r31, 0xDD	; 221
    2e36:	40 81       	ld	r20, Z
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	70 e0       	ldi	r23, 0x00	; 0
    2e3c:	81 e2       	ldi	r24, 0x21	; 33
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	b9 dd       	rcall	.-1166   	; 0x29b4 <dwt_write8bitoffsetreg>
    2e42:	e1 e0       	ldi	r30, 0x01	; 1
    2e44:	83 e0       	ldi	r24, 0x03	; 3
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <dwt_configure+0x2da>
    2e48:	e0 e0       	ldi	r30, 0x00	; 0
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	0c 89       	ldd	r16, Y+20	; 0x14
    2e4e:	1d 89       	ldd	r17, Y+21	; 0x15
    2e50:	2e 89       	ldd	r18, Y+22	; 0x16
    2e52:	3f 89       	ldd	r19, Y+23	; 0x17
    2e54:	0f 2e       	mov	r0, r31
    2e56:	fb e1       	ldi	r31, 0x1B	; 27
    2e58:	00 0f       	add	r16, r16
    2e5a:	11 1f       	adc	r17, r17
    2e5c:	22 1f       	adc	r18, r18
    2e5e:	33 1f       	adc	r19, r19
    2e60:	fa 95       	dec	r31
    2e62:	d1 f7       	brne	.-12     	; 0x2e58 <dwt_configure+0x2e6>
    2e64:	f0 2d       	mov	r31, r0
    2e66:	b3 01       	movw	r22, r6
    2e68:	a2 01       	movw	r20, r4
    2e6a:	4f 70       	andi	r20, 0x0F	; 15
    2e6c:	55 27       	eor	r21, r21
    2e6e:	66 27       	eor	r22, r22
    2e70:	77 27       	eor	r23, r23
    2e72:	04 2b       	or	r16, r20
    2e74:	15 2b       	or	r17, r21
    2e76:	26 2b       	or	r18, r22
    2e78:	37 2b       	or	r19, r23
    2e7a:	4c 81       	ldd	r20, Y+4	; 0x04
    2e7c:	5d 81       	ldd	r21, Y+5	; 0x05
    2e7e:	6e 81       	ldd	r22, Y+6	; 0x06
    2e80:	7f 81       	ldd	r23, Y+7	; 0x07
    2e82:	03 2e       	mov	r0, r19
    2e84:	32 e1       	ldi	r19, 0x12	; 18
    2e86:	44 0f       	add	r20, r20
    2e88:	55 1f       	adc	r21, r21
    2e8a:	66 1f       	adc	r22, r22
    2e8c:	77 1f       	adc	r23, r23
    2e8e:	3a 95       	dec	r19
    2e90:	d1 f7       	brne	.-12     	; 0x2e86 <dwt_configure+0x314>
    2e92:	30 2d       	mov	r19, r0
    2e94:	44 27       	eor	r20, r20
    2e96:	55 27       	eor	r21, r21
    2e98:	6c 70       	andi	r22, 0x0C	; 12
    2e9a:	77 27       	eor	r23, r23
    2e9c:	04 2b       	or	r16, r20
    2e9e:	15 2b       	or	r17, r21
    2ea0:	26 2b       	or	r18, r22
    2ea2:	37 2b       	or	r19, r23
    2ea4:	48 89       	ldd	r20, Y+16	; 0x10
    2ea6:	59 89       	ldd	r21, Y+17	; 0x11
    2ea8:	6a 89       	ldd	r22, Y+18	; 0x12
    2eaa:	7b 89       	ldd	r23, Y+19	; 0x13
    2eac:	03 2e       	mov	r0, r19
    2eae:	36 e1       	ldi	r19, 0x16	; 22
    2eb0:	44 0f       	add	r20, r20
    2eb2:	55 1f       	adc	r21, r21
    2eb4:	66 1f       	adc	r22, r22
    2eb6:	77 1f       	adc	r23, r23
    2eb8:	3a 95       	dec	r19
    2eba:	d1 f7       	brne	.-12     	; 0x2eb0 <dwt_configure+0x33e>
    2ebc:	30 2d       	mov	r19, r0
    2ebe:	44 27       	eor	r20, r20
    2ec0:	55 27       	eor	r21, r21
    2ec2:	60 7c       	andi	r22, 0xC0	; 192
    2ec4:	77 70       	andi	r23, 0x07	; 7
    2ec6:	04 2b       	or	r16, r20
    2ec8:	15 2b       	or	r17, r21
    2eca:	26 2b       	or	r18, r22
    2ecc:	37 2b       	or	r19, r23
    2ece:	55 24       	eor	r5, r5
    2ed0:	66 24       	eor	r6, r6
    2ed2:	77 24       	eor	r7, r7
    2ed4:	b3 01       	movw	r22, r6
    2ed6:	a2 01       	movw	r20, r4
    2ed8:	44 0f       	add	r20, r20
    2eda:	55 1f       	adc	r21, r21
    2edc:	66 1f       	adc	r22, r22
    2ede:	77 1f       	adc	r23, r23
    2ee0:	44 0f       	add	r20, r20
    2ee2:	55 1f       	adc	r21, r21
    2ee4:	66 1f       	adc	r22, r22
    2ee6:	77 1f       	adc	r23, r23
    2ee8:	44 0f       	add	r20, r20
    2eea:	55 1f       	adc	r21, r21
    2eec:	66 1f       	adc	r22, r22
    2eee:	77 1f       	adc	r23, r23
    2ef0:	44 0f       	add	r20, r20
    2ef2:	55 1f       	adc	r21, r21
    2ef4:	66 1f       	adc	r22, r22
    2ef6:	77 1f       	adc	r23, r23
    2ef8:	55 27       	eor	r21, r21
    2efa:	66 27       	eor	r22, r22
    2efc:	77 27       	eor	r23, r23
    2efe:	40 2b       	or	r20, r16
    2f00:	51 2b       	or	r21, r17
    2f02:	62 2b       	or	r22, r18
    2f04:	73 2b       	or	r23, r19
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	a0 e0       	ldi	r26, 0x00	; 0
    2f0a:	b0 e0       	ldi	r27, 0x00	; 0
    2f0c:	07 2e       	mov	r0, r23
    2f0e:	74 e1       	ldi	r23, 0x14	; 20
    2f10:	88 0f       	add	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	aa 1f       	adc	r26, r26
    2f16:	bb 1f       	adc	r27, r27
    2f18:	7a 95       	dec	r23
    2f1a:	d1 f7       	brne	.-12     	; 0x2f10 <dwt_configure+0x39e>
    2f1c:	70 2d       	mov	r23, r0
    2f1e:	84 2b       	or	r24, r20
    2f20:	95 2b       	or	r25, r21
    2f22:	a6 2b       	or	r26, r22
    2f24:	b7 2b       	or	r27, r23
    2f26:	4e 2e       	mov	r4, r30
    2f28:	51 2c       	mov	r5, r1
    2f2a:	61 2c       	mov	r6, r1
    2f2c:	71 2c       	mov	r7, r1
    2f2e:	03 2e       	mov	r0, r19
    2f30:	31 e1       	ldi	r19, 0x11	; 17
    2f32:	44 0c       	add	r4, r4
    2f34:	55 1c       	adc	r5, r5
    2f36:	66 1c       	adc	r6, r6
    2f38:	77 1c       	adc	r7, r7
    2f3a:	3a 95       	dec	r19
    2f3c:	d1 f7       	brne	.-12     	; 0x2f32 <dwt_configure+0x3c0>
    2f3e:	30 2d       	mov	r19, r0
    2f40:	a3 01       	movw	r20, r6
    2f42:	92 01       	movw	r18, r4
    2f44:	28 2b       	or	r18, r24
    2f46:	39 2b       	or	r19, r25
    2f48:	4a 2b       	or	r20, r26
    2f4a:	5b 2b       	or	r21, r27
    2f4c:	60 e0       	ldi	r22, 0x00	; 0
    2f4e:	70 e0       	ldi	r23, 0x00	; 0
    2f50:	8f e1       	ldi	r24, 0x1F	; 31
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	6b dd       	rcall	.-1322   	; 0x2a2c <dwt_write32bitoffsetreg>
    2f56:	4c 81       	ldd	r20, Y+4	; 0x04
    2f58:	5d 81       	ldd	r21, Y+5	; 0x05
    2f5a:	6e 81       	ldd	r22, Y+6	; 0x06
    2f5c:	7f 81       	ldd	r23, Y+7	; 0x07
    2f5e:	88 85       	ldd	r24, Y+8	; 0x08
    2f60:	99 85       	ldd	r25, Y+9	; 0x09
    2f62:	aa 85       	ldd	r26, Y+10	; 0x0a
    2f64:	bb 85       	ldd	r27, Y+11	; 0x0b
    2f66:	84 2b       	or	r24, r20
    2f68:	95 2b       	or	r25, r21
    2f6a:	a6 2b       	or	r26, r22
    2f6c:	b7 2b       	or	r27, r23
    2f6e:	bc 01       	movw	r22, r24
    2f70:	55 27       	eor	r21, r21
    2f72:	44 27       	eor	r20, r20
    2f74:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f76:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f78:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2f7a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2f7c:	07 2e       	mov	r0, r23
    2f7e:	7d e0       	ldi	r23, 0x0D	; 13
    2f80:	88 0f       	add	r24, r24
    2f82:	99 1f       	adc	r25, r25
    2f84:	aa 1f       	adc	r26, r26
    2f86:	bb 1f       	adc	r27, r27
    2f88:	7a 95       	dec	r23
    2f8a:	d1 f7       	brne	.-12     	; 0x2f80 <dwt_configure+0x40e>
    2f8c:	70 2d       	mov	r23, r0
    2f8e:	9a 01       	movw	r18, r20
    2f90:	ab 01       	movw	r20, r22
    2f92:	28 2b       	or	r18, r24
    2f94:	39 2b       	or	r19, r25
    2f96:	4a 2b       	or	r20, r26
    2f98:	5b 2b       	or	r21, r27
    2f9a:	e0 91 98 20 	lds	r30, 0x2098
    2f9e:	f0 91 99 20 	lds	r31, 0x2099
    2fa2:	22 87       	std	Z+10, r18	; 0x0a
    2fa4:	33 87       	std	Z+11, r19	; 0x0b
    2fa6:	44 87       	std	Z+12, r20	; 0x0c
    2fa8:	55 87       	std	Z+13, r21	; 0x0d
    2faa:	60 e0       	ldi	r22, 0x00	; 0
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	88 e0       	ldi	r24, 0x08	; 8
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	3c dd       	rcall	.-1416   	; 0x2a2c <dwt_write32bitoffsetreg>
    2fb4:	42 e4       	ldi	r20, 0x42	; 66
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	70 e0       	ldi	r23, 0x00	; 0
    2fba:	8d e0       	ldi	r24, 0x0D	; 13
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	fa dc       	rcall	.-1548   	; 0x29b4 <dwt_write8bitoffsetreg>
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	ff 90       	pop	r15
    2fca:	ef 90       	pop	r14
    2fcc:	df 90       	pop	r13
    2fce:	cf 90       	pop	r12
    2fd0:	bf 90       	pop	r11
    2fd2:	af 90       	pop	r10
    2fd4:	7f 90       	pop	r7
    2fd6:	6f 90       	pop	r6
    2fd8:	5f 90       	pop	r5
    2fda:	4f 90       	pop	r4
    2fdc:	08 95       	ret

00002fde <dwt_setrxaftertxdelay>:
    2fde:	cf 92       	push	r12
    2fe0:	df 92       	push	r13
    2fe2:	ef 92       	push	r14
    2fe4:	ff 92       	push	r15
    2fe6:	6b 01       	movw	r12, r22
    2fe8:	7c 01       	movw	r14, r24
    2fea:	60 e0       	ldi	r22, 0x00	; 0
    2fec:	70 e0       	ldi	r23, 0x00	; 0
    2fee:	8a e1       	ldi	r24, 0x1A	; 26
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	77 dc       	rcall	.-1810   	; 0x28e2 <dwt_read32bitoffsetreg>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	88 27       	eor	r24, r24
    2ffa:	99 27       	eor	r25, r25
    2ffc:	a0 7f       	andi	r26, 0xF0	; 240
    2ffe:	2f e0       	ldi	r18, 0x0F	; 15
    3000:	e2 22       	and	r14, r18
    3002:	ff 24       	eor	r15, r15
    3004:	9c 01       	movw	r18, r24
    3006:	ad 01       	movw	r20, r26
    3008:	2c 29       	or	r18, r12
    300a:	3d 29       	or	r19, r13
    300c:	4e 29       	or	r20, r14
    300e:	5f 29       	or	r21, r15
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	70 e0       	ldi	r23, 0x00	; 0
    3014:	8a e1       	ldi	r24, 0x1A	; 26
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	09 dd       	rcall	.-1518   	; 0x2a2c <dwt_write32bitoffsetreg>
    301a:	ff 90       	pop	r15
    301c:	ef 90       	pop	r14
    301e:	df 90       	pop	r13
    3020:	cf 90       	pop	r12
    3022:	08 95       	ret

00003024 <dwt_setleds>:
    3024:	cf 93       	push	r28
    3026:	c8 2f       	mov	r28, r24
    3028:	80 ff       	sbrs	r24, 0
    302a:	20 c0       	rjmp	.+64     	; 0x306c <dwt_setleds+0x48>
    302c:	60 e0       	ldi	r22, 0x00	; 0
    302e:	70 e0       	ldi	r23, 0x00	; 0
    3030:	86 e2       	ldi	r24, 0x26	; 38
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	56 dc       	rcall	.-1876   	; 0x28e2 <dwt_read32bitoffsetreg>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	93 7c       	andi	r25, 0xC3	; 195
    303c:	9c 01       	movw	r18, r24
    303e:	ad 01       	movw	r20, r26
    3040:	34 61       	ori	r19, 0x14	; 20
    3042:	60 e0       	ldi	r22, 0x00	; 0
    3044:	70 e0       	ldi	r23, 0x00	; 0
    3046:	86 e2       	ldi	r24, 0x26	; 38
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	f0 dc       	rcall	.-1568   	; 0x2a2c <dwt_write32bitoffsetreg>
    304c:	60 e0       	ldi	r22, 0x00	; 0
    304e:	70 e0       	ldi	r23, 0x00	; 0
    3050:	86 e3       	ldi	r24, 0x36	; 54
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	46 dc       	rcall	.-1908   	; 0x28e2 <dwt_read32bitoffsetreg>
    3056:	9b 01       	movw	r18, r22
    3058:	ac 01       	movw	r20, r24
    305a:	44 68       	ori	r20, 0x84	; 132
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	70 e0       	ldi	r23, 0x00	; 0
    3060:	86 e3       	ldi	r24, 0x36	; 54
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	e3 dc       	rcall	.-1594   	; 0x2a2c <dwt_write32bitoffsetreg>
    3066:	c1 fd       	sbrc	r28, 1
    3068:	19 c0       	rjmp	.+50     	; 0x309c <dwt_setleds+0x78>
    306a:	0e c0       	rjmp	.+28     	; 0x3088 <dwt_setleds+0x64>
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	70 e0       	ldi	r23, 0x00	; 0
    3070:	86 e2       	ldi	r24, 0x26	; 38
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	36 dc       	rcall	.-1940   	; 0x28e2 <dwt_read32bitoffsetreg>
    3076:	9b 01       	movw	r18, r22
    3078:	ac 01       	movw	r20, r24
    307a:	33 7c       	andi	r19, 0xC3	; 195
    307c:	60 e0       	ldi	r22, 0x00	; 0
    307e:	70 e0       	ldi	r23, 0x00	; 0
    3080:	86 e2       	ldi	r24, 0x26	; 38
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	d3 dc       	rcall	.-1626   	; 0x2a2c <dwt_write32bitoffsetreg>
    3086:	1c c0       	rjmp	.+56     	; 0x30c0 <dwt_setleds+0x9c>
    3088:	20 e1       	ldi	r18, 0x10	; 16
    308a:	31 e0       	ldi	r19, 0x01	; 1
    308c:	40 e0       	ldi	r20, 0x00	; 0
    308e:	50 e0       	ldi	r21, 0x00	; 0
    3090:	68 e2       	ldi	r22, 0x28	; 40
    3092:	70 e0       	ldi	r23, 0x00	; 0
    3094:	86 e3       	ldi	r24, 0x36	; 54
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	c9 dc       	rcall	.-1646   	; 0x2a2c <dwt_write32bitoffsetreg>
    309a:	12 c0       	rjmp	.+36     	; 0x30c0 <dwt_setleds+0x9c>
    309c:	20 e1       	ldi	r18, 0x10	; 16
    309e:	31 e0       	ldi	r19, 0x01	; 1
    30a0:	4f e0       	ldi	r20, 0x0F	; 15
    30a2:	50 e0       	ldi	r21, 0x00	; 0
    30a4:	68 e2       	ldi	r22, 0x28	; 40
    30a6:	70 e0       	ldi	r23, 0x00	; 0
    30a8:	86 e3       	ldi	r24, 0x36	; 54
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	bf dc       	rcall	.-1666   	; 0x2a2c <dwt_write32bitoffsetreg>
    30ae:	20 e1       	ldi	r18, 0x10	; 16
    30b0:	31 e0       	ldi	r19, 0x01	; 1
    30b2:	40 e0       	ldi	r20, 0x00	; 0
    30b4:	50 e0       	ldi	r21, 0x00	; 0
    30b6:	68 e2       	ldi	r22, 0x28	; 40
    30b8:	70 e0       	ldi	r23, 0x00	; 0
    30ba:	86 e3       	ldi	r24, 0x36	; 54
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	b6 dc       	rcall	.-1684   	; 0x2a2c <dwt_write32bitoffsetreg>
    30c0:	cf 91       	pop	r28
    30c2:	08 95       	ret

000030c4 <_dwt_enableclocks>:
    30c4:	ef 92       	push	r14
    30c6:	ff 92       	push	r15
    30c8:	0f 93       	push	r16
    30ca:	1f 93       	push	r17
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	00 d0       	rcall	.+0      	; 0x30d2 <_dwt_enableclocks+0xe>
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
    30d6:	7c 01       	movw	r14, r24
    30d8:	8e 01       	movw	r16, r28
    30da:	0f 5f       	subi	r16, 0xFF	; 255
    30dc:	1f 4f       	sbci	r17, 0xFF	; 255
    30de:	22 e0       	ldi	r18, 0x02	; 2
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	40 e0       	ldi	r20, 0x00	; 0
    30e4:	50 e0       	ldi	r21, 0x00	; 0
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	70 e0       	ldi	r23, 0x00	; 0
    30ea:	86 e3       	ldi	r24, 0x36	; 54
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	9e db       	rcall	.-2244   	; 0x282c <dwt_readfromdevice>
    30f0:	8f e0       	ldi	r24, 0x0F	; 15
    30f2:	e8 16       	cp	r14, r24
    30f4:	f1 04       	cpc	r15, r1
    30f6:	a0 f5       	brcc	.+104    	; 0x3160 <_dwt_enableclocks+0x9c>
    30f8:	f7 01       	movw	r30, r14
    30fa:	eb 5f       	subi	r30, 0xFB	; 251
    30fc:	fe 4f       	sbci	r31, 0xFE	; 254
    30fe:	0c 94 e4 26 	jmp	0x4dc8	; 0x4dc8 <__tablejump2__>
    3102:	19 82       	std	Y+1, r1	; 0x01
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	8e 7f       	andi	r24, 0xFE	; 254
    3108:	8a 83       	std	Y+2, r24	; 0x02
    310a:	2a c0       	rjmp	.+84     	; 0x3160 <_dwt_enableclocks+0x9c>
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	8c 7f       	andi	r24, 0xFC	; 252
    3110:	81 60       	ori	r24, 0x01	; 1
    3112:	89 83       	std	Y+1, r24	; 0x01
    3114:	25 c0       	rjmp	.+74     	; 0x3160 <_dwt_enableclocks+0x9c>
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	8c 7f       	andi	r24, 0xFC	; 252
    311a:	82 60       	ori	r24, 0x02	; 2
    311c:	89 83       	std	Y+1, r24	; 0x01
    311e:	20 c0       	rjmp	.+64     	; 0x3160 <_dwt_enableclocks+0x9c>
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	83 7b       	andi	r24, 0xB3	; 179
    3124:	88 64       	ori	r24, 0x48	; 72
    3126:	89 83       	std	Y+1, r24	; 0x01
    3128:	8a 81       	ldd	r24, Y+2	; 0x02
    312a:	80 68       	ori	r24, 0x80	; 128
    312c:	8a 83       	std	Y+2, r24	; 0x02
    312e:	18 c0       	rjmp	.+48     	; 0x3160 <_dwt_enableclocks+0x9c>
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	83 7b       	andi	r24, 0xB3	; 179
    3134:	89 83       	std	Y+1, r24	; 0x01
    3136:	8a 81       	ldd	r24, Y+2	; 0x02
    3138:	8f 77       	andi	r24, 0x7F	; 127
    313a:	8a 83       	std	Y+2, r24	; 0x02
    313c:	11 c0       	rjmp	.+34     	; 0x3160 <_dwt_enableclocks+0x9c>
    313e:	8a 81       	ldd	r24, Y+2	; 0x02
    3140:	82 60       	ori	r24, 0x02	; 2
    3142:	8a 83       	std	Y+2, r24	; 0x02
    3144:	0d c0       	rjmp	.+26     	; 0x3160 <_dwt_enableclocks+0x9c>
    3146:	8a 81       	ldd	r24, Y+2	; 0x02
    3148:	8d 7f       	andi	r24, 0xFD	; 253
    314a:	8a 83       	std	Y+2, r24	; 0x02
    314c:	09 c0       	rjmp	.+18     	; 0x3160 <_dwt_enableclocks+0x9c>
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	8f 7c       	andi	r24, 0xCF	; 207
    3152:	80 62       	ori	r24, 0x20	; 32
    3154:	89 83       	std	Y+1, r24	; 0x01
    3156:	04 c0       	rjmp	.+8      	; 0x3160 <_dwt_enableclocks+0x9c>
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	89 83       	std	Y+1, r24	; 0x01
    315c:	83 e0       	ldi	r24, 0x03	; 3
    315e:	8a 83       	std	Y+2, r24	; 0x02
    3160:	8e 01       	movw	r16, r28
    3162:	0f 5f       	subi	r16, 0xFF	; 255
    3164:	1f 4f       	sbci	r17, 0xFF	; 255
    3166:	21 e0       	ldi	r18, 0x01	; 1
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	40 e0       	ldi	r20, 0x00	; 0
    316c:	50 e0       	ldi	r21, 0x00	; 0
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	70 e0       	ldi	r23, 0x00	; 0
    3172:	86 e3       	ldi	r24, 0x36	; 54
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	0e db       	rcall	.-2532   	; 0x2794 <dwt_writetodevice>
    3178:	0f 5f       	subi	r16, 0xFF	; 255
    317a:	1f 4f       	sbci	r17, 0xFF	; 255
    317c:	21 e0       	ldi	r18, 0x01	; 1
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	40 e0       	ldi	r20, 0x00	; 0
    3182:	50 e0       	ldi	r21, 0x00	; 0
    3184:	61 e0       	ldi	r22, 0x01	; 1
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	86 e3       	ldi	r24, 0x36	; 54
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	03 db       	rcall	.-2554   	; 0x2794 <dwt_writetodevice>
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	1f 91       	pop	r17
    3198:	0f 91       	pop	r16
    319a:	ff 90       	pop	r15
    319c:	ef 90       	pop	r14
    319e:	08 95       	ret

000031a0 <_dwt_loaducodefromrom>:
    31a0:	8e e0       	ldi	r24, 0x0E	; 14
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	8f df       	rcall	.-226    	; 0x30c4 <_dwt_enableclocks>
    31a6:	40 e0       	ldi	r20, 0x00	; 0
    31a8:	50 e8       	ldi	r21, 0x80	; 128
    31aa:	66 e0       	ldi	r22, 0x06	; 6
    31ac:	70 e0       	ldi	r23, 0x00	; 0
    31ae:	8d e2       	ldi	r24, 0x2D	; 45
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	16 dc       	rcall	.-2004   	; 0x29e0 <dwt_write16bitoffsetreg>
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	28 d5       	rcall	.+2640   	; 0x3c0a <deca_sleep>
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	82 cf       	rjmp	.-252    	; 0x30c4 <_dwt_enableclocks>
    31c0:	08 95       	ret

000031c2 <_dwt_disablesequencing>:
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	7e df       	rcall	.-260    	; 0x30c4 <_dwt_enableclocks>
    31c8:	40 e0       	ldi	r20, 0x00	; 0
    31ca:	50 e0       	ldi	r21, 0x00	; 0
    31cc:	64 e0       	ldi	r22, 0x04	; 4
    31ce:	70 e0       	ldi	r23, 0x00	; 0
    31d0:	86 e3       	ldi	r24, 0x36	; 54
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	05 cc       	rjmp	.-2038   	; 0x29e0 <dwt_write16bitoffsetreg>
    31d6:	08 95       	ret

000031d8 <dwt_setdelayedtrxtime>:
    31d8:	9b 01       	movw	r18, r22
    31da:	ac 01       	movw	r20, r24
    31dc:	61 e0       	ldi	r22, 0x01	; 1
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	8a e0       	ldi	r24, 0x0A	; 10
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	23 cc       	rjmp	.-1978   	; 0x2a2c <dwt_write32bitoffsetreg>
    31e6:	08 95       	ret

000031e8 <dwt_starttx>:
    31e8:	cf 93       	push	r28
    31ea:	c8 2f       	mov	r28, r24
    31ec:	81 ff       	sbrs	r24, 1
    31ee:	0e c0       	rjmp	.+28     	; 0x320c <dwt_starttx+0x24>
    31f0:	40 e8       	ldi	r20, 0x80	; 128
    31f2:	60 e0       	ldi	r22, 0x00	; 0
    31f4:	70 e0       	ldi	r23, 0x00	; 0
    31f6:	8d e0       	ldi	r24, 0x0D	; 13
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	dc db       	rcall	.-2120   	; 0x29b4 <dwt_write8bitoffsetreg>
    31fc:	e0 91 98 20 	lds	r30, 0x2098
    3200:	f0 91 99 20 	lds	r31, 0x2099
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	86 8b       	std	Z+22, r24	; 0x16
    3208:	40 e8       	ldi	r20, 0x80	; 128
    320a:	01 c0       	rjmp	.+2      	; 0x320e <dwt_starttx+0x26>
    320c:	40 e0       	ldi	r20, 0x00	; 0
    320e:	c0 ff       	sbrs	r28, 0
    3210:	1d c0       	rjmp	.+58     	; 0x324c <dwt_starttx+0x64>
    3212:	46 60       	ori	r20, 0x06	; 6
    3214:	60 e0       	ldi	r22, 0x00	; 0
    3216:	70 e0       	ldi	r23, 0x00	; 0
    3218:	8d e0       	ldi	r24, 0x0D	; 13
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	cb db       	rcall	.-2154   	; 0x29b4 <dwt_write8bitoffsetreg>
    321e:	63 e0       	ldi	r22, 0x03	; 3
    3220:	70 e0       	ldi	r23, 0x00	; 0
    3222:	8f e0       	ldi	r24, 0x0F	; 15
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	93 db       	rcall	.-2266   	; 0x294e <dwt_read16bitoffsetreg>
    3228:	88 70       	andi	r24, 0x08	; 8
    322a:	94 70       	andi	r25, 0x04	; 4
    322c:	89 2b       	or	r24, r25
    322e:	b9 f0       	breq	.+46     	; 0x325e <dwt_starttx+0x76>
    3230:	40 e4       	ldi	r20, 0x40	; 64
    3232:	60 e0       	ldi	r22, 0x00	; 0
    3234:	70 e0       	ldi	r23, 0x00	; 0
    3236:	8d e0       	ldi	r24, 0x0D	; 13
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	bc db       	rcall	.-2184   	; 0x29b4 <dwt_write8bitoffsetreg>
    323c:	e0 91 98 20 	lds	r30, 0x2098
    3240:	f0 91 99 20 	lds	r31, 0x2099
    3244:	16 8a       	std	Z+22, r1	; 0x16
    3246:	8f ef       	ldi	r24, 0xFF	; 255
    3248:	9f ef       	ldi	r25, 0xFF	; 255
    324a:	0b c0       	rjmp	.+22     	; 0x3262 <dwt_starttx+0x7a>
    324c:	42 60       	ori	r20, 0x02	; 2
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	70 e0       	ldi	r23, 0x00	; 0
    3252:	8d e0       	ldi	r24, 0x0D	; 13
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	ae db       	rcall	.-2212   	; 0x29b4 <dwt_write8bitoffsetreg>
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	02 c0       	rjmp	.+4      	; 0x3262 <dwt_starttx+0x7a>
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	cf 91       	pop	r28
    3264:	08 95       	ret

00003266 <dwt_syncrxbufptrs>:
    3266:	63 e0       	ldi	r22, 0x03	; 3
    3268:	70 e0       	ldi	r23, 0x00	; 0
    326a:	8f e0       	ldi	r24, 0x0F	; 15
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	8c db       	rcall	.-2280   	; 0x2988 <dwt_read8bitoffsetreg>
    3270:	48 2f       	mov	r20, r24
    3272:	40 78       	andi	r20, 0x80	; 128
    3274:	50 e0       	ldi	r21, 0x00	; 0
    3276:	60 e0       	ldi	r22, 0x00	; 0
    3278:	70 e0       	ldi	r23, 0x00	; 0
    327a:	80 74       	andi	r24, 0x40	; 64
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	a0 e0       	ldi	r26, 0x00	; 0
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	88 0f       	add	r24, r24
    3284:	99 1f       	adc	r25, r25
    3286:	aa 1f       	adc	r26, r26
    3288:	bb 1f       	adc	r27, r27
    328a:	48 17       	cp	r20, r24
    328c:	59 07       	cpc	r21, r25
    328e:	6a 07       	cpc	r22, r26
    3290:	7b 07       	cpc	r23, r27
    3292:	31 f0       	breq	.+12     	; 0x32a0 <dwt_syncrxbufptrs+0x3a>
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	63 e0       	ldi	r22, 0x03	; 3
    3298:	70 e0       	ldi	r23, 0x00	; 0
    329a:	8d e0       	ldi	r24, 0x0D	; 13
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	8a cb       	rjmp	.-2284   	; 0x29b4 <dwt_write8bitoffsetreg>
    32a0:	08 95       	ret

000032a2 <dwt_forcetrxoff>:
    32a2:	cf 92       	push	r12
    32a4:	df 92       	push	r13
    32a6:	ef 92       	push	r14
    32a8:	ff 92       	push	r15
    32aa:	cf 93       	push	r28
    32ac:	df 93       	push	r29
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	8e e0       	ldi	r24, 0x0E	; 14
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	15 db       	rcall	.-2518   	; 0x28e2 <dwt_read32bitoffsetreg>
    32b8:	6b 01       	movw	r12, r22
    32ba:	7c 01       	movw	r14, r24
    32bc:	a0 d4       	rcall	.+2368   	; 0x3bfe <decamutexon>
    32be:	ec 01       	movw	r28, r24
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	a9 01       	movw	r20, r18
    32c6:	60 e0       	ldi	r22, 0x00	; 0
    32c8:	70 e0       	ldi	r23, 0x00	; 0
    32ca:	8e e0       	ldi	r24, 0x0E	; 14
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	ae db       	rcall	.-2212   	; 0x2a2c <dwt_write32bitoffsetreg>
    32d0:	40 e4       	ldi	r20, 0x40	; 64
    32d2:	60 e0       	ldi	r22, 0x00	; 0
    32d4:	70 e0       	ldi	r23, 0x00	; 0
    32d6:	8d e0       	ldi	r24, 0x0D	; 13
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	6c db       	rcall	.-2344   	; 0x29b4 <dwt_write8bitoffsetreg>
    32dc:	28 ef       	ldi	r18, 0xF8	; 248
    32de:	3f ef       	ldi	r19, 0xFF	; 255
    32e0:	47 e2       	ldi	r20, 0x27	; 39
    32e2:	54 e2       	ldi	r21, 0x24	; 36
    32e4:	60 e0       	ldi	r22, 0x00	; 0
    32e6:	70 e0       	ldi	r23, 0x00	; 0
    32e8:	8f e0       	ldi	r24, 0x0F	; 15
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	9f db       	rcall	.-2242   	; 0x2a2c <dwt_write32bitoffsetreg>
    32ee:	bb df       	rcall	.-138    	; 0x3266 <dwt_syncrxbufptrs>
    32f0:	a7 01       	movw	r20, r14
    32f2:	96 01       	movw	r18, r12
    32f4:	60 e0       	ldi	r22, 0x00	; 0
    32f6:	70 e0       	ldi	r23, 0x00	; 0
    32f8:	8e e0       	ldi	r24, 0x0E	; 14
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	97 db       	rcall	.-2258   	; 0x2a2c <dwt_write32bitoffsetreg>
    32fe:	ce 01       	movw	r24, r28
    3300:	82 d4       	rcall	.+2308   	; 0x3c06 <decamutexoff>
    3302:	e0 91 98 20 	lds	r30, 0x2098
    3306:	f0 91 99 20 	lds	r31, 0x2099
    330a:	16 8a       	std	Z+22, r1	; 0x16
    330c:	df 91       	pop	r29
    330e:	cf 91       	pop	r28
    3310:	ff 90       	pop	r15
    3312:	ef 90       	pop	r14
    3314:	df 90       	pop	r13
    3316:	cf 90       	pop	r12
    3318:	08 95       	ret

0000331a <dwt_rxenable>:
    331a:	0f 93       	push	r16
    331c:	1f 93       	push	r17
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
    3322:	ec 01       	movw	r28, r24
    3324:	82 ff       	sbrs	r24, 2
    3326:	9f df       	rcall	.-194    	; 0x3266 <dwt_syncrxbufptrs>
    3328:	8e 01       	movw	r16, r28
    332a:	01 70       	andi	r16, 0x01	; 1
    332c:	11 27       	eor	r17, r17
    332e:	c0 fd       	sbrc	r28, 0
    3330:	11 c0       	rjmp	.+34     	; 0x3354 <dwt_rxenable+0x3a>
    3332:	21 c0       	rjmp	.+66     	; 0x3376 <dwt_rxenable+0x5c>
    3334:	b6 df       	rcall	.-148    	; 0x32a2 <dwt_forcetrxoff>
    3336:	c1 fd       	sbrc	r28, 1
    3338:	0a c0       	rjmp	.+20     	; 0x334e <dwt_rxenable+0x34>
    333a:	40 e0       	ldi	r20, 0x00	; 0
    333c:	51 e0       	ldi	r21, 0x01	; 1
    333e:	60 e0       	ldi	r22, 0x00	; 0
    3340:	70 e0       	ldi	r23, 0x00	; 0
    3342:	8d e0       	ldi	r24, 0x0D	; 13
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	4c db       	rcall	.-2408   	; 0x29e0 <dwt_write16bitoffsetreg>
    3348:	0f ef       	ldi	r16, 0xFF	; 255
    334a:	1f ef       	ldi	r17, 0xFF	; 255
    334c:	1b c0       	rjmp	.+54     	; 0x3384 <dwt_rxenable+0x6a>
    334e:	0f ef       	ldi	r16, 0xFF	; 255
    3350:	1f ef       	ldi	r17, 0xFF	; 255
    3352:	18 c0       	rjmp	.+48     	; 0x3384 <dwt_rxenable+0x6a>
    3354:	40 e0       	ldi	r20, 0x00	; 0
    3356:	53 e0       	ldi	r21, 0x03	; 3
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	70 e0       	ldi	r23, 0x00	; 0
    335c:	8d e0       	ldi	r24, 0x0D	; 13
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	3f db       	rcall	.-2434   	; 0x29e0 <dwt_write16bitoffsetreg>
    3362:	63 e0       	ldi	r22, 0x03	; 3
    3364:	70 e0       	ldi	r23, 0x00	; 0
    3366:	8f e0       	ldi	r24, 0x0F	; 15
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	0e db       	rcall	.-2532   	; 0x2988 <dwt_read8bitoffsetreg>
    336c:	83 fd       	sbrc	r24, 3
    336e:	e2 cf       	rjmp	.-60     	; 0x3334 <dwt_rxenable+0x1a>
    3370:	00 e0       	ldi	r16, 0x00	; 0
    3372:	10 e0       	ldi	r17, 0x00	; 0
    3374:	07 c0       	rjmp	.+14     	; 0x3384 <dwt_rxenable+0x6a>
    3376:	40 e0       	ldi	r20, 0x00	; 0
    3378:	51 e0       	ldi	r21, 0x01	; 1
    337a:	60 e0       	ldi	r22, 0x00	; 0
    337c:	70 e0       	ldi	r23, 0x00	; 0
    337e:	8d e0       	ldi	r24, 0x0D	; 13
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	2e db       	rcall	.-2468   	; 0x29e0 <dwt_write16bitoffsetreg>
    3384:	c8 01       	movw	r24, r16
    3386:	df 91       	pop	r29
    3388:	cf 91       	pop	r28
    338a:	1f 91       	pop	r17
    338c:	0f 91       	pop	r16
    338e:	08 95       	ret

00003390 <dwt_setrxtimeout>:
    3390:	0f 93       	push	r16
    3392:	1f 93       	push	r17
    3394:	cf 93       	push	r28
    3396:	8c 01       	movw	r16, r24
    3398:	63 e0       	ldi	r22, 0x03	; 3
    339a:	70 e0       	ldi	r23, 0x00	; 0
    339c:	84 e0       	ldi	r24, 0x04	; 4
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	f3 da       	rcall	.-2586   	; 0x2988 <dwt_read8bitoffsetreg>
    33a2:	c8 2f       	mov	r28, r24
    33a4:	01 15       	cp	r16, r1
    33a6:	11 05       	cpc	r17, r1
    33a8:	d9 f0       	breq	.+54     	; 0x33e0 <dwt_setrxtimeout+0x50>
    33aa:	a8 01       	movw	r20, r16
    33ac:	60 e0       	ldi	r22, 0x00	; 0
    33ae:	70 e0       	ldi	r23, 0x00	; 0
    33b0:	8c e0       	ldi	r24, 0x0C	; 12
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	15 db       	rcall	.-2518   	; 0x29e0 <dwt_write16bitoffsetreg>
    33b6:	e0 91 98 20 	lds	r30, 0x2098
    33ba:	f0 91 99 20 	lds	r31, 0x2099
    33be:	00 89       	ldd	r16, Z+16	; 0x10
    33c0:	11 89       	ldd	r17, Z+17	; 0x11
    33c2:	22 89       	ldd	r18, Z+18	; 0x12
    33c4:	33 89       	ldd	r19, Z+19	; 0x13
    33c6:	30 61       	ori	r19, 0x10	; 16
    33c8:	00 8b       	std	Z+16, r16	; 0x10
    33ca:	11 8b       	std	Z+17, r17	; 0x11
    33cc:	22 8b       	std	Z+18, r18	; 0x12
    33ce:	33 8b       	std	Z+19, r19	; 0x13
    33d0:	4c 2f       	mov	r20, r28
    33d2:	40 61       	ori	r20, 0x10	; 16
    33d4:	63 e0       	ldi	r22, 0x03	; 3
    33d6:	70 e0       	ldi	r23, 0x00	; 0
    33d8:	84 e0       	ldi	r24, 0x04	; 4
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	eb da       	rcall	.-2602   	; 0x29b4 <dwt_write8bitoffsetreg>
    33de:	14 c0       	rjmp	.+40     	; 0x3408 <dwt_setrxtimeout+0x78>
    33e0:	e0 91 98 20 	lds	r30, 0x2098
    33e4:	f0 91 99 20 	lds	r31, 0x2099
    33e8:	00 89       	ldd	r16, Z+16	; 0x10
    33ea:	11 89       	ldd	r17, Z+17	; 0x11
    33ec:	22 89       	ldd	r18, Z+18	; 0x12
    33ee:	33 89       	ldd	r19, Z+19	; 0x13
    33f0:	3f 7e       	andi	r19, 0xEF	; 239
    33f2:	00 8b       	std	Z+16, r16	; 0x10
    33f4:	11 8b       	std	Z+17, r17	; 0x11
    33f6:	22 8b       	std	Z+18, r18	; 0x12
    33f8:	33 8b       	std	Z+19, r19	; 0x13
    33fa:	48 2f       	mov	r20, r24
    33fc:	4f 7e       	andi	r20, 0xEF	; 239
    33fe:	63 e0       	ldi	r22, 0x03	; 3
    3400:	70 e0       	ldi	r23, 0x00	; 0
    3402:	84 e0       	ldi	r24, 0x04	; 4
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	d6 da       	rcall	.-2644   	; 0x29b4 <dwt_write8bitoffsetreg>
    3408:	cf 91       	pop	r28
    340a:	1f 91       	pop	r17
    340c:	0f 91       	pop	r16
    340e:	08 95       	ret

00003410 <dwt_setpreambledetecttimeout>:
    3410:	ac 01       	movw	r20, r24
    3412:	64 e2       	ldi	r22, 0x24	; 36
    3414:	70 e0       	ldi	r23, 0x00	; 0
    3416:	87 e2       	ldi	r24, 0x27	; 39
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	e2 ca       	rjmp	.-2620   	; 0x29e0 <dwt_write16bitoffsetreg>
    341c:	08 95       	ret

0000341e <dwt_rxreset>:
    341e:	40 ee       	ldi	r20, 0xE0	; 224
    3420:	63 e0       	ldi	r22, 0x03	; 3
    3422:	70 e0       	ldi	r23, 0x00	; 0
    3424:	86 e3       	ldi	r24, 0x36	; 54
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	c5 da       	rcall	.-2678   	; 0x29b4 <dwt_write8bitoffsetreg>
    342a:	40 ef       	ldi	r20, 0xF0	; 240
    342c:	63 e0       	ldi	r22, 0x03	; 3
    342e:	70 e0       	ldi	r23, 0x00	; 0
    3430:	86 e3       	ldi	r24, 0x36	; 54
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	bf ca       	rjmp	.-2690   	; 0x29b4 <dwt_write8bitoffsetreg>
    3436:	08 95       	ret

00003438 <dwt_softreset>:
 *
 * no return value
 */
void dwt_softreset(void)
{
    _dwt_disablesequencing();
    3438:	c4 de       	rcall	.-632    	; 0x31c2 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
    343a:	40 e0       	ldi	r20, 0x00	; 0
    343c:	50 e0       	ldi	r21, 0x00	; 0
    343e:	60 e0       	ldi	r22, 0x00	; 0
    3440:	70 e0       	ldi	r23, 0x00	; 0
    3442:	8c e2       	ldi	r24, 0x2C	; 44
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	cc da       	rcall	.-2664   	; 0x29e0 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
    3448:	40 e0       	ldi	r20, 0x00	; 0
    344a:	66 e0       	ldi	r22, 0x06	; 6
    344c:	70 e0       	ldi	r23, 0x00	; 0
    344e:	8c e2       	ldi	r24, 0x2C	; 44
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	b0 da       	rcall	.-2720   	; 0x29b4 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
    3454:	64 db       	rcall	.-2360   	; 0x2b1e <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
    3456:	40 e0       	ldi	r20, 0x00	; 0
    3458:	63 e0       	ldi	r22, 0x03	; 3
    345a:	70 e0       	ldi	r23, 0x00	; 0
    345c:	86 e3       	ldi	r24, 0x36	; 54
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	a9 da       	rcall	.-2734   	; 0x29b4 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	d1 d3       	rcall	.+1954   	; 0x3c0a <deca_sleep>

    // Clear reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
    3468:	40 ef       	ldi	r20, 0xF0	; 240
    346a:	63 e0       	ldi	r22, 0x03	; 3
    346c:	70 e0       	ldi	r23, 0x00	; 0
    346e:	86 e3       	ldi	r24, 0x36	; 54
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	a0 da       	rcall	.-2752   	; 0x29b4 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
    3474:	e0 91 98 20 	lds	r30, 0x2098
    3478:	f0 91 99 20 	lds	r31, 0x2099
    347c:	16 8a       	std	Z+22, r1	; 0x16
    347e:	08 95       	ret

00003480 <dwt_setxtaltrim>:
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
    3480:	8f 71       	andi	r24, 0x1F	; 31
    3482:	48 2f       	mov	r20, r24
    3484:	40 66       	ori	r20, 0x60	; 96
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
    3486:	6e e0       	ldi	r22, 0x0E	; 14
    3488:	70 e0       	ldi	r23, 0x00	; 0
    348a:	8b e2       	ldi	r24, 0x2B	; 43
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	92 ca       	rjmp	.-2780   	; 0x29b4 <dwt_write8bitoffsetreg>
    3490:	08 95       	ret

00003492 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(uint16 config)
{
    3492:	0f 93       	push	r16
    3494:	1f 93       	push	r17
    3496:	cf 93       	push	r28
    3498:	df 93       	push	r29
    349a:	c8 2f       	mov	r28, r24
    uint16 otp_addr = 0;
    uint32 ldo_tune = 0;

    pdw1000local->dblbuffon = 0; // Double buffer mode off by default
    349c:	e0 91 98 20 	lds	r30, 0x2098
    34a0:	f0 91 99 20 	lds	r31, 0x2099
    34a4:	17 86       	std	Z+15, r1	; 0x0f
    pdw1000local->wait4resp = 0;
    34a6:	16 8a       	std	Z+22, r1	; 0x16
    pdw1000local->sleep_mode = 0;
    34a8:	14 8a       	std	Z+20, r1	; 0x14
    34aa:	15 8a       	std	Z+21, r1	; 0x15

    pdw1000local->cbTxDone = NULL;
    34ac:	10 a2       	std	Z+32, r1	; 0x20
    34ae:	11 a2       	std	Z+33, r1	; 0x21
    pdw1000local->cbRxOk = NULL;
    34b0:	12 a2       	std	Z+34, r1	; 0x22
    34b2:	13 a2       	std	Z+35, r1	; 0x23
    pdw1000local->cbRxTo = NULL;
    34b4:	14 a2       	std	Z+36, r1	; 0x24
    34b6:	15 a2       	std	Z+37, r1	; 0x25
    pdw1000local->cbRxErr = NULL;
    34b8:	16 a2       	std	Z+38, r1	; 0x26
    34ba:	17 a2       	std	Z+39, r1	; 0x27

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
    34bc:	42 da       	rcall	.-2940   	; 0x2942 <dwt_readdevid>
    34be:	60 33       	cpi	r22, 0x30	; 48
    34c0:	71 40       	sbci	r23, 0x01	; 1
    34c2:	8a 4c       	sbci	r24, 0xCA	; 202
    34c4:	9e 4d       	sbci	r25, 0xDE	; 222
    34c6:	09 f0       	breq	.+2      	; 0x34ca <dwt_initialise+0x38>
    34c8:	85 c0       	rjmp	.+266    	; 0x35d4 <dwt_initialise+0x142>
    {
        return DWT_ERROR ;
    }

    // Make sure the device is completely reset before starting initialisation
    dwt_softreset();
    34ca:	b6 df       	rcall	.-148    	; 0x3438 <dwt_softreset>

    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	f9 dd       	rcall	.-1038   	; 0x30c4 <_dwt_enableclocks>

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
    34d2:	44 e0       	ldi	r20, 0x04	; 4
    34d4:	60 e0       	ldi	r22, 0x00	; 0
    34d6:	70 e0       	ldi	r23, 0x00	; 0
    34d8:	84 e2       	ldi	r24, 0x24	; 36
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	6b da       	rcall	.-2858   	; 0x29b4 <dwt_write8bitoffsetreg>

    // Read OTP revision number
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
    34de:	6e e1       	ldi	r22, 0x1E	; 30
    34e0:	70 e0       	ldi	r23, 0x00	; 0
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	03 db       	rcall	.-2554   	; 0x2aee <_dwt_otpread>
    34e8:	d6 2f       	mov	r29, r22
    pdw1000local->otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
    34ea:	e0 91 98 20 	lds	r30, 0x2098
    34ee:	f0 91 99 20 	lds	r31, 0x2099
    34f2:	71 87       	std	Z+9, r23	; 0x09

    // Load LDO tune from OTP and kick it if there is a value actually programmed.
    ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
    34f4:	64 e0       	ldi	r22, 0x04	; 4
    34f6:	70 e0       	ldi	r23, 0x00	; 0
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	f8 da       	rcall	.-2576   	; 0x2aee <_dwt_otpread>
    if((ldo_tune & 0xFF) != 0)
    34fe:	66 23       	and	r22, r22
    3500:	79 f0       	breq	.+30     	; 0x3520 <dwt_initialise+0x8e>
    {
        // Kick LDO tune
        dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDE kick bit
    3502:	42 e0       	ldi	r20, 0x02	; 2
    3504:	62 e1       	ldi	r22, 0x12	; 18
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	8d e2       	ldi	r24, 0x2D	; 45
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	53 da       	rcall	.-2906   	; 0x29b4 <dwt_write8bitoffsetreg>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
    350e:	e0 91 98 20 	lds	r30, 0x2098
    3512:	f0 91 99 20 	lds	r31, 0x2099
    3516:	84 89       	ldd	r24, Z+20	; 0x14
    3518:	95 89       	ldd	r25, Z+21	; 0x15
    351a:	90 61       	ori	r25, 0x10	; 16
    351c:	84 8b       	std	Z+20, r24	; 0x14
    351e:	95 8b       	std	Z+21, r25	; 0x15
    }

    // Load Part and Lot ID from OTP
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
    3520:	00 91 98 20 	lds	r16, 0x2098
    3524:	10 91 99 20 	lds	r17, 0x2099
    3528:	66 e0       	ldi	r22, 0x06	; 6
    352a:	70 e0       	ldi	r23, 0x00	; 0
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	de da       	rcall	.-2628   	; 0x2aee <_dwt_otpread>
    3532:	f8 01       	movw	r30, r16
    3534:	60 83       	st	Z, r22
    3536:	71 83       	std	Z+1, r23	; 0x01
    3538:	82 83       	std	Z+2, r24	; 0x02
    353a:	93 83       	std	Z+3, r25	; 0x03
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
    353c:	00 91 98 20 	lds	r16, 0x2098
    3540:	10 91 99 20 	lds	r17, 0x2099
    3544:	67 e0       	ldi	r22, 0x07	; 7
    3546:	70 e0       	ldi	r23, 0x00	; 0
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	d0 da       	rcall	.-2656   	; 0x2aee <_dwt_otpread>
    354e:	f8 01       	movw	r30, r16
    3550:	64 83       	std	Z+4, r22	; 0x04
    3552:	75 83       	std	Z+5, r23	; 0x05
    3554:	86 83       	std	Z+6, r24	; 0x06
    3556:	97 83       	std	Z+7, r25	; 0x07

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    pdw1000local->init_xtrim = otp_addr & 0x1F;
    3558:	e0 91 98 20 	lds	r30, 0x2098
    355c:	f0 91 99 20 	lds	r31, 0x2099
    3560:	df 71       	andi	r29, 0x1F	; 31
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
    3562:	11 f0       	breq	.+4      	; 0x3568 <dwt_initialise+0xd6>
    // Load Part and Lot ID from OTP
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    pdw1000local->init_xtrim = otp_addr & 0x1F;
    3564:	d6 87       	std	Z+14, r29	; 0x0e
    3566:	02 c0       	rjmp	.+4      	; 0x356c <dwt_initialise+0xda>
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
    {
        pdw1000local->init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
    3568:	80 e1       	ldi	r24, 0x10	; 16
    356a:	86 87       	std	Z+14, r24	; 0x0e
    }
    // Configure XTAL trim
    dwt_setxtaltrim(pdw1000local->init_xtrim);
    356c:	86 85       	ldd	r24, Z+14	; 0x0e
    356e:	88 df       	rcall	.-240    	; 0x3480 <dwt_setxtaltrim>

    // Load leading edge detect code
    if(config & DWT_LOADUCODE)
    3570:	c0 ff       	sbrs	r28, 0
    3572:	0b c0       	rjmp	.+22     	; 0x358a <dwt_initialise+0xf8>
    {
        _dwt_loaducodefromrom();
    3574:	15 de       	rcall	.-982    	; 0x31a0 <_dwt_loaducodefromrom>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up
    3576:	e0 91 98 20 	lds	r30, 0x2098
    357a:	f0 91 99 20 	lds	r31, 0x2099
    357e:	84 89       	ldd	r24, Z+20	; 0x14
    3580:	95 89       	ldd	r25, Z+21	; 0x15
    3582:	98 60       	ori	r25, 0x08	; 8
    3584:	84 8b       	std	Z+20, r24	; 0x14
    3586:	95 8b       	std	Z+21, r25	; 0x15
    3588:	0c c0       	rjmp	.+24     	; 0x35a2 <dwt_initialise+0x110>
    }
    else // Should disable the LDERUN enable bit in 0x36, 0x4
    {
        uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
    358a:	65 e0       	ldi	r22, 0x05	; 5
    358c:	70 e0       	ldi	r23, 0x00	; 0
    358e:	86 e3       	ldi	r24, 0x36	; 54
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	dd d9       	rcall	.-3142   	; 0x294e <dwt_read16bitoffsetreg>
        rega &= 0xFDFF ; // Clear LDERUN bit
    3594:	ac 01       	movw	r20, r24
    3596:	5d 7f       	andi	r21, 0xFD	; 253
        dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
    3598:	65 e0       	ldi	r22, 0x05	; 5
    359a:	70 e0       	ldi	r23, 0x00	; 0
    359c:	86 e3       	ldi	r24, 0x36	; 54
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	1f da       	rcall	.-3010   	; 0x29e0 <dwt_write16bitoffsetreg>
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	8e dd       	rcall	.-1252   	; 0x30c4 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
    35a8:	40 e0       	ldi	r20, 0x00	; 0
    35aa:	6a e0       	ldi	r22, 0x0A	; 10
    35ac:	70 e0       	ldi	r23, 0x00	; 0
    35ae:	8c e2       	ldi	r24, 0x2C	; 44
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	00 da       	rcall	.-3072   	; 0x29b4 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
    35b4:	c0 91 98 20 	lds	r28, 0x2098
    35b8:	d0 91 99 20 	lds	r29, 0x2099
    35bc:	60 e0       	ldi	r22, 0x00	; 0
    35be:	70 e0       	ldi	r23, 0x00	; 0
    35c0:	84 e0       	ldi	r24, 0x04	; 4
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	8e d9       	rcall	.-3300   	; 0x28e2 <dwt_read32bitoffsetreg>
    35c6:	68 8b       	std	Y+16, r22	; 0x10
    35c8:	79 8b       	std	Y+17, r23	; 0x11
    35ca:	8a 8b       	std	Y+18, r24	; 0x12
    35cc:	9b 8b       	std	Y+19, r25	; 0x13

    return DWT_SUCCESS ;
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	02 c0       	rjmp	.+4      	; 0x35d8 <dwt_initialise+0x146>
    pdw1000local->cbRxErr = NULL;

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
    {
        return DWT_ERROR ;
    35d4:	8f ef       	ldi	r24, 0xFF	; 255
    35d6:	9f ef       	ldi	r25, 0xFF	; 255
    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register

    return DWT_SUCCESS ;

} // end dwt_initialise()
    35d8:	df 91       	pop	r29
    35da:	cf 91       	pop	r28
    35dc:	1f 91       	pop	r17
    35de:	0f 91       	pop	r16
    35e0:	08 95       	ret

000035e2 <final_msg_get_ts>:
	 *         ts  timestamp value
	 *
	 * @return none
	 */
	static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
	{
    35e2:	8f 92       	push	r8
    35e4:	9f 92       	push	r9
    35e6:	af 92       	push	r10
    35e8:	bf 92       	push	r11
    35ea:	cf 92       	push	r12
    35ec:	df 92       	push	r13
    35ee:	ef 92       	push	r14
    35f0:	ff 92       	push	r15
    35f2:	0f 93       	push	r16
    35f4:	cf 93       	push	r28
    35f6:	df 93       	push	r29
    35f8:	db 01       	movw	r26, r22
		int i;
		*ts = 0;
    35fa:	1d 92       	st	X+, r1
    35fc:	1d 92       	st	X+, r1
    35fe:	1d 92       	st	X+, r1
    3600:	1c 92       	st	X, r1
    3602:	13 97       	sbiw	r26, 0x03	; 3
    3604:	ec 01       	movw	r28, r24
    3606:	e0 e0       	ldi	r30, 0x00	; 0
    3608:	f0 e0       	ldi	r31, 0x00	; 0
		for (i = 0; i < FINAL_MSG_TS_LEN; i++)
		{
			*ts += (uint64_t)(ts_field[i]) << (i * 8);
    360a:	29 91       	ld	r18, Y+
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	40 e0       	ldi	r20, 0x00	; 0
    3610:	50 e0       	ldi	r21, 0x00	; 0
    3612:	60 e0       	ldi	r22, 0x00	; 0
    3614:	70 e0       	ldi	r23, 0x00	; 0
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	0e 2f       	mov	r16, r30
    361c:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__ashldi3>
    3620:	82 2e       	mov	r8, r18
    3622:	93 2e       	mov	r9, r19
    3624:	a4 2e       	mov	r10, r20
    3626:	b5 2e       	mov	r11, r21
    3628:	4d 91       	ld	r20, X+
    362a:	5d 91       	ld	r21, X+
    362c:	6d 91       	ld	r22, X+
    362e:	7c 91       	ld	r23, X
    3630:	13 97       	sbiw	r26, 0x03	; 3
    3632:	84 0e       	add	r8, r20
    3634:	95 1e       	adc	r9, r21
    3636:	a6 1e       	adc	r10, r22
    3638:	b7 1e       	adc	r11, r23
    363a:	8d 92       	st	X+, r8
    363c:	9d 92       	st	X+, r9
    363e:	ad 92       	st	X+, r10
    3640:	bc 92       	st	X, r11
    3642:	13 97       	sbiw	r26, 0x03	; 3
    3644:	38 96       	adiw	r30, 0x08	; 8
	 */
	static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
	{
		int i;
		*ts = 0;
		for (i = 0; i < FINAL_MSG_TS_LEN; i++)
    3646:	e0 32       	cpi	r30, 0x20	; 32
    3648:	f1 05       	cpc	r31, r1
    364a:	f9 f6       	brne	.-66     	; 0x360a <final_msg_get_ts+0x28>
		{
			*ts += (uint64_t)(ts_field[i]) << (i * 8);
		}
	}
    364c:	df 91       	pop	r29
    364e:	cf 91       	pop	r28
    3650:	0f 91       	pop	r16
    3652:	ff 90       	pop	r15
    3654:	ef 90       	pop	r14
    3656:	df 90       	pop	r13
    3658:	cf 90       	pop	r12
    365a:	bf 90       	pop	r11
    365c:	af 90       	pop	r10
    365e:	9f 90       	pop	r9
    3660:	8f 90       	pop	r8
    3662:	08 95       	ret

00003664 <dwt_ds_twr_resp>:
	
	void dwt_ds_twr_resp(void)
	{
    3664:	cf 93       	push	r28
    3666:	df 93       	push	r29
    3668:	cd b7       	in	r28, 0x3d	; 61
    366a:	de b7       	in	r29, 0x3e	; 62
    366c:	6b 97       	sbiw	r28, 0x1b	; 27
    366e:	cd bf       	out	0x3d, r28	; 61
    3670:	de bf       	out	0x3e, r29	; 62
		if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	0d df       	rcall	.-486    	; 0x3492 <dwt_initialise>
    3678:	01 96       	adiw	r24, 0x01	; 1
    367a:	49 f4       	brne	.+18     	; 0x368e <dwt_ds_twr_resp+0x2a>
		{
			printf("INIT FAILED");
    367c:	8f e0       	ldi	r24, 0x0F	; 15
    367e:	91 e2       	ldi	r25, 0x21	; 33
    3680:	9f 93       	push	r25
    3682:	8f 93       	push	r24
    3684:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <printf>
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	ff cf       	rjmp	.-2      	; 0x368c <dwt_ds_twr_resp+0x28>
			while (1)
			{ };
		}
		fast_spi();
    368e:	31 d3       	rcall	.+1634   	; 0x3cf2 <fast_spi>

		/* Configure DW1000. See NOTE 7 below. */
		dwt_configure(&config);
    3690:	8d ec       	ldi	r24, 0xCD	; 205
    3692:	90 e2       	ldi	r25, 0x20	; 32
    3694:	6e da       	rcall	.-2852   	; 0x2b72 <dwt_configure>
		dwt_setleds(DWT_LEDS_ENABLE|DWT_LEDS_INIT_BLINK);
    3696:	83 e0       	ldi	r24, 0x03	; 3
    3698:	c5 dc       	rcall	.-1654   	; 0x3024 <dwt_setleds>
	
		/* Apply default antenna delay value. See NOTE 1 below. */
		dwt_setrxantennadelay(RX_ANT_DLY);
    369a:	84 e3       	ldi	r24, 0x34	; 52
    369c:	90 e4       	ldi	r25, 0x40	; 64
    369e:	b8 d9       	rcall	.-3216   	; 0x2a10 <dwt_setrxantennadelay>
		dwt_settxantennadelay(TX_ANT_DLY);
    36a0:	84 e3       	ldi	r24, 0x34	; 52
    36a2:	90 e4       	ldi	r25, 0x40	; 64
    36a4:	bc d9       	rcall	.-3208   	; 0x2a1e <dwt_settxantennadelay>

		/* Set preamble timeout for expected frames. See NOTE 6 below. */
		dwt_setpreambledetecttimeout(PRE_TIMEOUT);
    36a6:	88 e0       	ldi	r24, 0x08	; 8
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	b2 de       	rcall	.-668    	; 0x3410 <dwt_setpreambledetecttimeout>

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    36ac:	0f 2e       	mov	r0, r31
    36ae:	f0 e2       	ldi	r31, 0x20	; 32
    36b0:	2f 2e       	mov	r2, r31
    36b2:	f6 e0       	ldi	r31, 0x06	; 6
    36b4:	3f 2e       	mov	r3, r31
    36b6:	f0 2d       	mov	r31, r0
    36b8:	12 e0       	ldi	r17, 0x02	; 2
	static uint64_t get_rx_timestamp_u64(void)
	{
		uint8 ts_tab[5];
		uint64_t ts = 0;
		int i;
		dwt_readrxtimestamp(ts_tab);
    36ba:	ae 01       	movw	r20, r28
    36bc:	4f 5f       	subi	r20, 0xFF	; 255
    36be:	5f 4f       	sbci	r21, 0xFF	; 255
    36c0:	4e 87       	std	Y+14, r20	; 0x0e
    36c2:	5f 87       	std	Y+15, r21	; 0x0f

		/* Loop forever responding to ranging requests. */
		while (1)
		{
			/* Clear reception timeout to start next ranging process. */
			dwt_setrxtimeout(0);
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	63 de       	rcall	.-826    	; 0x3390 <dwt_setrxtimeout>

			/* Activate reception immediately. */
			dwt_rxenable(DWT_START_RX_IMMEDIATE);
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	25 de       	rcall	.-950    	; 0x331a <dwt_rxenable>

			/* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
			while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
    36d0:	03 c0       	rjmp	.+6      	; 0x36d8 <dwt_ds_twr_resp+0x74>
    36d2:	d1 01       	movw	r26, r2
    36d4:	17 96       	adiw	r26, 0x07	; 7
    36d6:	1c 93       	st	X, r17
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	70 e0       	ldi	r23, 0x00	; 0
    36dc:	8f e0       	ldi	r24, 0x0F	; 15
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	00 d9       	rcall	.-3584   	; 0x28e2 <dwt_read32bitoffsetreg>
    36e2:	60 93 99 28 	sts	0x2899, r22
    36e6:	70 93 9a 28 	sts	0x289A, r23
    36ea:	80 93 9b 28 	sts	0x289B, r24
    36ee:	90 93 9c 28 	sts	0x289C, r25
    36f2:	6b 01       	movw	r12, r22
    36f4:	7c 01       	movw	r14, r24
    36f6:	cc 24       	eor	r12, r12
    36f8:	b0 ed       	ldi	r27, 0xD0	; 208
    36fa:	db 22       	and	r13, r27
    36fc:	b7 e2       	ldi	r27, 0x27	; 39
    36fe:	eb 22       	and	r14, r27
    3700:	b4 e2       	ldi	r27, 0x24	; 36
    3702:	fb 22       	and	r15, r27
    3704:	cd 28       	or	r12, r13
    3706:	ce 28       	or	r12, r14
    3708:	cf 28       	or	r12, r15
    370a:	19 f3       	breq	.-58     	; 0x36d2 <dwt_ds_twr_resp+0x6e>
			{led4_toogle(); };

			if (status_reg & SYS_STATUS_RXFCG)
    370c:	76 ff       	sbrs	r23, 6
    370e:	6a c2       	rjmp	.+1236   	; 0x3be4 <dwt_ds_twr_resp+0x580>
			{
				uint32 frame_len;

				/* Clear good RX frame event in the DW1000 status register. */
				dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e4       	ldi	r19, 0x40	; 64
    3714:	40 e0       	ldi	r20, 0x00	; 0
    3716:	50 e0       	ldi	r21, 0x00	; 0
    3718:	60 e0       	ldi	r22, 0x00	; 0
    371a:	70 e0       	ldi	r23, 0x00	; 0
    371c:	8f e0       	ldi	r24, 0x0F	; 15
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	85 d9       	rcall	.-3318   	; 0x2a2c <dwt_write32bitoffsetreg>

				/* A frame has been received, read it into the local buffer. */
				frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
    3722:	60 e0       	ldi	r22, 0x00	; 0
    3724:	70 e0       	ldi	r23, 0x00	; 0
    3726:	80 e1       	ldi	r24, 0x10	; 16
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	db d8       	rcall	.-3658   	; 0x28e2 <dwt_read32bitoffsetreg>
    372c:	73 70       	andi	r23, 0x03	; 3
    372e:	88 27       	eor	r24, r24
    3730:	99 27       	eor	r25, r25
				if (frame_len <= RX_BUFFER_LEN)
				{
					dwt_readrxdata(rx_buffer, frame_len, 0);
    3732:	40 e0       	ldi	r20, 0x00	; 0
    3734:	50 e0       	ldi	r21, 0x00	; 0
    3736:	8d e9       	ldi	r24, 0x9D	; 157
    3738:	98 e2       	ldi	r25, 0x28	; 40
    373a:	a8 d8       	rcall	.-3760   	; 0x288c <dwt_readrxdata>
					printf("%s\n",rx_buffer);
    373c:	8d e9       	ldi	r24, 0x9D	; 157
    373e:	98 e2       	ldi	r25, 0x28	; 40
    3740:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
				}

				/* Check that the frame is a poll sent by "DS TWR initiator" example.
				 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
				rx_buffer[ALL_MSG_SN_IDX] = 0;
    3744:	ef e9       	ldi	r30, 0x9F	; 159
    3746:	f8 e2       	ldi	r31, 0x28	; 40
    3748:	10 82       	st	Z, r1
				
				printf("Step 0\n");
    374a:	8b e1       	ldi	r24, 0x1B	; 27
    374c:	91 e2       	ldi	r25, 0x21	; 33
    374e:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
				
				if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
    3752:	4a e0       	ldi	r20, 0x0A	; 10
    3754:	50 e0       	ldi	r21, 0x00	; 0
    3756:	61 ec       	ldi	r22, 0xC1	; 193
    3758:	70 e2       	ldi	r23, 0x20	; 32
    375a:	8d e9       	ldi	r24, 0x9D	; 157
    375c:	98 e2       	ldi	r25, 0x28	; 40
    375e:	0e 94 81 27 	call	0x4f02	; 0x4f02 <memcmp>
    3762:	89 2b       	or	r24, r25
    3764:	09 f0       	breq	.+2      	; 0x3768 <dwt_ds_twr_resp+0x104>
    3766:	ae cf       	rjmp	.-164    	; 0x36c4 <dwt_ds_twr_resp+0x60>
				{
					printf("Step 1\n");
    3768:	82 e2       	ldi	r24, 0x22	; 34
    376a:	91 e2       	ldi	r25, 0x21	; 33
    376c:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
	static uint64_t get_rx_timestamp_u64(void)
	{
		uint8 ts_tab[5];
		uint64_t ts = 0;
		int i;
		dwt_readrxtimestamp(ts_tab);
    3770:	ce 01       	movw	r24, r28
    3772:	01 96       	adiw	r24, 0x01	; 1
    3774:	a7 d8       	rcall	.-3762   	; 0x28c4 <dwt_readrxtimestamp>
    3776:	fe 01       	movw	r30, r28
    3778:	36 96       	adiw	r30, 0x06	; 6
    377a:	de 01       	movw	r26, r28
    377c:	11 96       	adiw	r26, 0x01	; 1
	 * @return  64-bit value of the read time-stamp.
	 */
	static uint64_t get_rx_timestamp_u64(void)
	{
		uint8 ts_tab[5];
		uint64_t ts = 0;
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	40 e0       	ldi	r20, 0x00	; 0
    3784:	50 e0       	ldi	r21, 0x00	; 0
    3786:	60 e0       	ldi	r22, 0x00	; 0
    3788:	70 e0       	ldi	r23, 0x00	; 0
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	90 e0       	ldi	r25, 0x00	; 0
		int i;
		dwt_readrxtimestamp(ts_tab);
		for (i = 4; i >= 0; i--)
		{
			ts <<= 8;
    378e:	08 e0       	ldi	r16, 0x08	; 8
    3790:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__ashldi3>
			ts |= (uint64_t)(ts_tab[i]);
    3794:	02 91       	ld	r16, -Z
    3796:	20 2b       	or	r18, r16
	{
		uint8 ts_tab[5];
		uint64_t ts = 0;
		int i;
		dwt_readrxtimestamp(ts_tab);
		for (i = 4; i >= 0; i--)
    3798:	ea 17       	cp	r30, r26
    379a:	fb 07       	cpc	r31, r27
    379c:	c1 f7       	brne	.-16     	; 0x378e <dwt_ds_twr_resp+0x12a>
					printf("Step 1\n");
					uint32 resp_tx_time;
					int ret;

					/* Retrieve poll reception timestamp. */
					poll_rx_ts = get_rx_timestamp_u64();
    379e:	20 93 91 28 	sts	0x2891, r18
    37a2:	30 93 92 28 	sts	0x2892, r19
    37a6:	40 93 93 28 	sts	0x2893, r20
    37aa:	50 93 94 28 	sts	0x2894, r21
    37ae:	60 93 95 28 	sts	0x2895, r22
    37b2:	70 93 96 28 	sts	0x2896, r23
    37b6:	80 93 97 28 	sts	0x2897, r24
    37ba:	90 93 98 28 	sts	0x2898, r25

					/* Set send time for response. See NOTE 9 below. */
					resp_tx_time = (uint64_t)(poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
    37be:	44 5c       	subi	r20, 0xC4	; 196
    37c0:	50 4f       	sbci	r21, 0xF0	; 240
    37c2:	6f 4f       	sbci	r22, 0xFF	; 255
    37c4:	7f 4f       	sbci	r23, 0xFF	; 255
    37c6:	8f 4f       	sbci	r24, 0xFF	; 255
    37c8:	9f 4f       	sbci	r25, 0xFF	; 255
    37ca:	08 e0       	ldi	r16, 0x08	; 8
    37cc:	0e 94 56 27 	call	0x4eac	; 0x4eac <__lshrdi3>
    37d0:	d5 2e       	mov	r13, r21
    37d2:	02 2f       	mov	r16, r18
    37d4:	f3 2e       	mov	r15, r19
    37d6:	e4 2e       	mov	r14, r20
					dwt_setdelayedtrxtime(resp_tx_time); 
    37d8:	62 2f       	mov	r22, r18
    37da:	7f 2d       	mov	r23, r15
    37dc:	8e 2d       	mov	r24, r14
    37de:	9d 2d       	mov	r25, r13
    37e0:	fb dc       	rcall	.-1546   	; 0x31d8 <dwt_setdelayedtrxtime>
					
					printf("%lX%lX vs %lX%lX \n", (uint32_t)(poll_rx_ts >> 32), (uint32_t)(poll_rx_ts),(uint32_t)(resp_tx_time >> 32),(uint32_t)(resp_tx_time));
    37e2:	20 91 91 28 	lds	r18, 0x2891
    37e6:	30 91 92 28 	lds	r19, 0x2892
    37ea:	40 91 93 28 	lds	r20, 0x2893
    37ee:	50 91 94 28 	lds	r21, 0x2894
    37f2:	60 91 95 28 	lds	r22, 0x2895
    37f6:	70 91 96 28 	lds	r23, 0x2896
    37fa:	df 92       	push	r13
    37fc:	ef 92       	push	r14
    37fe:	ff 92       	push	r15
    3800:	0f 93       	push	r16
    3802:	1f 92       	push	r1
    3804:	1f 92       	push	r1
    3806:	1f 92       	push	r1
    3808:	1f 92       	push	r1
    380a:	5f 93       	push	r21
    380c:	4f 93       	push	r20
    380e:	3f 93       	push	r19
    3810:	2f 93       	push	r18
    3812:	80 91 97 28 	lds	r24, 0x2897
    3816:	90 91 98 28 	lds	r25, 0x2898
    381a:	00 e2       	ldi	r16, 0x20	; 32
    381c:	0e 94 56 27 	call	0x4eac	; 0x4eac <__lshrdi3>
    3820:	5f 93       	push	r21
    3822:	4f 93       	push	r20
    3824:	3f 93       	push	r19
    3826:	2f 93       	push	r18
    3828:	a9 e2       	ldi	r26, 0x29	; 41
    382a:	b1 e2       	ldi	r27, 0x21	; 33
    382c:	bf 93       	push	r27
    382e:	af 93       	push	r26
    3830:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <printf>
					
					/* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
					dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);  
    3834:	64 ef       	ldi	r22, 0xF4	; 244
    3836:	71 e0       	ldi	r23, 0x01	; 1
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	d0 db       	rcall	.-2144   	; 0x2fde <dwt_setrxaftertxdelay>
					dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS); 
    383e:	84 ee       	ldi	r24, 0xE4	; 228
    3840:	9c e0       	ldi	r25, 0x0C	; 12
    3842:	a6 dd       	rcall	.-1204   	; 0x3390 <dwt_setrxtimeout>

					/* Write and send the response message. See NOTE 10 below.*/
					tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
    3844:	80 91 b1 28 	lds	r24, 0x28B1
    3848:	a4 eb       	ldi	r26, 0xB4	; 180
    384a:	b0 e2       	ldi	r27, 0x20	; 32
    384c:	8c 93       	st	X, r24
					dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
    384e:	40 e0       	ldi	r20, 0x00	; 0
    3850:	50 e0       	ldi	r21, 0x00	; 0
    3852:	62 eb       	ldi	r22, 0xB2	; 178
    3854:	70 e2       	ldi	r23, 0x20	; 32
    3856:	8f e0       	ldi	r24, 0x0F	; 15
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <dwt_writetxdata>
					dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
    385e:	41 e0       	ldi	r20, 0x01	; 1
    3860:	50 e0       	ldi	r21, 0x00	; 0
    3862:	60 e0       	ldi	r22, 0x00	; 0
    3864:	70 e0       	ldi	r23, 0x00	; 0
    3866:	8f e0       	ldi	r24, 0x0F	; 15
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	fc d8       	rcall	.-3592   	; 0x2a64 <dwt_writetxfctrl>
					
					ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
    386c:	83 e0       	ldi	r24, 0x03	; 3
    386e:	bc dc       	rcall	.-1672   	; 0x31e8 <dwt_starttx>
				
					/* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
					if (ret == DWT_ERROR)
    3870:	cd bf       	out	0x3d, r28	; 61
    3872:	de bf       	out	0x3e, r29	; 62
    3874:	01 96       	adiw	r24, 0x01	; 1
    3876:	11 f0       	breq	.+4      	; 0x387c <dwt_ds_twr_resp+0x218>
    3878:	00 e4       	ldi	r16, 0x40	; 64
    387a:	07 c0       	rjmp	.+14     	; 0x388a <dwt_ds_twr_resp+0x226>
					{
						printf("DWT_ERROR\n");
    387c:	8c e3       	ldi	r24, 0x3C	; 60
    387e:	91 e2       	ldi	r25, 0x21	; 33
    3880:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
						continue;
    3884:	1f cf       	rjmp	.-450    	; 0x36c4 <dwt_ds_twr_resp+0x60>
    3886:	00 93 07 06 	sts	0x0607, r16
					}

					/* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
					while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
    388a:	60 e0       	ldi	r22, 0x00	; 0
    388c:	70 e0       	ldi	r23, 0x00	; 0
    388e:	8f e0       	ldi	r24, 0x0F	; 15
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	27 d8       	rcall	.-4018   	; 0x28e2 <dwt_read32bitoffsetreg>
    3894:	60 93 99 28 	sts	0x2899, r22
    3898:	70 93 9a 28 	sts	0x289A, r23
    389c:	80 93 9b 28 	sts	0x289B, r24
    38a0:	90 93 9c 28 	sts	0x289C, r25
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	88 27       	eor	r24, r24
    38aa:	90 7d       	andi	r25, 0xD0	; 208
    38ac:	a7 72       	andi	r26, 0x27	; 39
    38ae:	b4 72       	andi	r27, 0x24	; 36
    38b0:	89 2b       	or	r24, r25
    38b2:	8a 2b       	or	r24, r26
    38b4:	8b 2b       	or	r24, r27
    38b6:	39 f3       	breq	.-50     	; 0x3886 <dwt_ds_twr_resp+0x222>
					{ 
						led1_toogle();
					}
					printf("Step 2\n");
    38b8:	86 e4       	ldi	r24, 0x46	; 70
    38ba:	91 e2       	ldi	r25, 0x21	; 33
    38bc:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
					/* Increment frame sequence number after transmission of the response message (modulo 256). */
					frame_seq_nb++;
    38c0:	80 91 b1 28 	lds	r24, 0x28B1
    38c4:	8f 5f       	subi	r24, 0xFF	; 255
    38c6:	80 93 b1 28 	sts	0x28B1, r24

					if (status_reg & SYS_STATUS_RXFCG)
    38ca:	80 91 99 28 	lds	r24, 0x2899
    38ce:	90 91 9a 28 	lds	r25, 0x289A
    38d2:	a0 91 9b 28 	lds	r26, 0x289B
    38d6:	b0 91 9c 28 	lds	r27, 0x289C
    38da:	96 ff       	sbrs	r25, 6
    38dc:	73 c1       	rjmp	.+742    	; 0x3bc4 <dwt_ds_twr_resp+0x560>
					{
						printf("Step 3\n");
    38de:	8d e4       	ldi	r24, 0x4D	; 77
    38e0:	91 e2       	ldi	r25, 0x21	; 33
    38e2:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
    38e6:	80 e8       	ldi	r24, 0x80	; 128
    38e8:	80 93 07 06 	sts	0x0607, r24
						led2_toogle();
						/* Clear good RX frame event and TX frame sent in the DW1000 status register. */
						dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
    38ec:	20 e8       	ldi	r18, 0x80	; 128
    38ee:	30 e4       	ldi	r19, 0x40	; 64
    38f0:	40 e0       	ldi	r20, 0x00	; 0
    38f2:	50 e0       	ldi	r21, 0x00	; 0
    38f4:	60 e0       	ldi	r22, 0x00	; 0
    38f6:	70 e0       	ldi	r23, 0x00	; 0
    38f8:	8f e0       	ldi	r24, 0x0F	; 15
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	97 d8       	rcall	.-3794   	; 0x2a2c <dwt_write32bitoffsetreg>

						/* A frame has been received, read it into the local buffer. */
						frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	70 e0       	ldi	r23, 0x00	; 0
    3902:	80 e1       	ldi	r24, 0x10	; 16
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 71 14 	call	0x28e2	; 0x28e2 <dwt_read32bitoffsetreg>
    390a:	6f 77       	andi	r22, 0x7F	; 127
    390c:	77 27       	eor	r23, r23
    390e:	88 27       	eor	r24, r24
    3910:	99 27       	eor	r25, r25
						if (frame_len <= RX_BUF_LEN)
    3912:	65 31       	cpi	r22, 0x15	; 21
    3914:	71 05       	cpc	r23, r1
    3916:	81 05       	cpc	r24, r1
    3918:	91 05       	cpc	r25, r1
    391a:	a0 f4       	brcc	.+40     	; 0x3944 <dwt_ds_twr_resp+0x2e0>
						{
							dwt_readrxdata(rx_buffer, frame_len, 0);
    391c:	40 e0       	ldi	r20, 0x00	; 0
    391e:	50 e0       	ldi	r21, 0x00	; 0
    3920:	8d e9       	ldi	r24, 0x9D	; 157
    3922:	98 e2       	ldi	r25, 0x28	; 40
    3924:	0e 94 46 14 	call	0x288c	; 0x288c <dwt_readrxdata>
							printf("123132%s\n",rx_buffer);
    3928:	8d e9       	ldi	r24, 0x9D	; 157
    392a:	98 e2       	ldi	r25, 0x28	; 40
    392c:	9f 93       	push	r25
    392e:	8f 93       	push	r24
    3930:	84 e5       	ldi	r24, 0x54	; 84
    3932:	91 e2       	ldi	r25, 0x21	; 33
    3934:	9f 93       	push	r25
    3936:	8f 93       	push	r24
    3938:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <printf>
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
						}

						/* Check that the frame is a final message sent by "DS TWR initiator" example.
						 * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
						rx_buffer[ALL_MSG_SN_IDX] = 0;
    3944:	af e9       	ldi	r26, 0x9F	; 159
    3946:	b8 e2       	ldi	r27, 0x28	; 40
    3948:	1c 92       	st	X, r1
						if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
    394a:	4a e0       	ldi	r20, 0x0A	; 10
    394c:	50 e0       	ldi	r21, 0x00	; 0
    394e:	6a e9       	ldi	r22, 0x9A	; 154
    3950:	70 e2       	ldi	r23, 0x20	; 32
    3952:	8d e9       	ldi	r24, 0x9D	; 157
    3954:	98 e2       	ldi	r25, 0x28	; 40
    3956:	0e 94 81 27 	call	0x4f02	; 0x4f02 <memcmp>
    395a:	89 2b       	or	r24, r25
    395c:	09 f0       	breq	.+2      	; 0x3960 <dwt_ds_twr_resp+0x2fc>
    395e:	2d c1       	rjmp	.+602    	; 0x3bba <dwt_ds_twr_resp+0x556>
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	f1 01       	movw	r30, r2
    3964:	87 83       	std	Z+7, r24	; 0x07
	static uint64_t get_tx_timestamp_u64(void)
	{
		uint8 ts_tab[5];
		uint64_t ts = 0;
		int i;
		dwt_readtxtimestamp(ts_tab);
    3966:	ce 01       	movw	r24, r28
    3968:	01 96       	adiw	r24, 0x01	; 1
    396a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <dwt_readtxtimestamp>
    396e:	fe 01       	movw	r30, r28
    3970:	36 96       	adiw	r30, 0x06	; 6
    3972:	de 01       	movw	r26, r28
    3974:	11 96       	adiw	r26, 0x01	; 1
	 * @return  64-bit value of the read time-stamp.
	 */
	static uint64_t get_tx_timestamp_u64(void)
	{
		uint8 ts_tab[5];
		uint64_t ts = 0;
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	40 e0       	ldi	r20, 0x00	; 0
    397c:	50 e0       	ldi	r21, 0x00	; 0
    397e:	60 e0       	ldi	r22, 0x00	; 0
    3980:	70 e0       	ldi	r23, 0x00	; 0
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	90 e0       	ldi	r25, 0x00	; 0
		int i;
		dwt_readtxtimestamp(ts_tab);
		for (i = 4; i >= 0; i--)
		{
			ts <<= 8;
    3986:	08 e0       	ldi	r16, 0x08	; 8
    3988:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__ashldi3>
			ts |= (uint64_t)(ts_tab[i]);
    398c:	02 91       	ld	r16, -Z
    398e:	20 2b       	or	r18, r16
	{
		uint8 ts_tab[5];
		uint64_t ts = 0;
		int i;
		dwt_readtxtimestamp(ts_tab);
		for (i = 4; i >= 0; i--)
    3990:	ea 17       	cp	r30, r26
    3992:	fb 07       	cpc	r31, r27
    3994:	c1 f7       	brne	.-16     	; 0x3986 <dwt_ds_twr_resp+0x322>
							uint32 poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
							double Ra, Rb, Da, Db;
							int64_t tof_dtu;

							/* Retrieve response transmission and final reception timestamps. */
							resp_tx_ts = get_tx_timestamp_u64();
    3996:	20 93 89 28 	sts	0x2889, r18
    399a:	30 93 8a 28 	sts	0x288A, r19
    399e:	40 93 8b 28 	sts	0x288B, r20
    39a2:	50 93 8c 28 	sts	0x288C, r21
    39a6:	60 93 8d 28 	sts	0x288D, r22
    39aa:	70 93 8e 28 	sts	0x288E, r23
    39ae:	80 93 8f 28 	sts	0x288F, r24
    39b2:	90 93 90 28 	sts	0x2890, r25
	static uint64_t get_rx_timestamp_u64(void)
	{
		uint8 ts_tab[5];
		uint64_t ts = 0;
		int i;
		dwt_readrxtimestamp(ts_tab);
    39b6:	ce 01       	movw	r24, r28
    39b8:	01 96       	adiw	r24, 0x01	; 1
    39ba:	0e 94 62 14 	call	0x28c4	; 0x28c4 <dwt_readrxtimestamp>
    39be:	fe 01       	movw	r30, r28
    39c0:	36 96       	adiw	r30, 0x06	; 6
    39c2:	de 01       	movw	r26, r28
    39c4:	11 96       	adiw	r26, 0x01	; 1
	 * @return  64-bit value of the read time-stamp.
	 */
	static uint64_t get_rx_timestamp_u64(void)
	{
		uint8 ts_tab[5];
		uint64_t ts = 0;
    39c6:	41 2c       	mov	r4, r1
    39c8:	51 2c       	mov	r5, r1
    39ca:	61 2c       	mov	r6, r1
    39cc:	71 2c       	mov	r7, r1
    39ce:	81 2c       	mov	r8, r1
    39d0:	91 2c       	mov	r9, r1
    39d2:	a1 2c       	mov	r10, r1
    39d4:	b1 2c       	mov	r11, r1
		int i;
		dwt_readrxtimestamp(ts_tab);
		for (i = 4; i >= 0; i--)
		{
			ts <<= 8;
    39d6:	24 2d       	mov	r18, r4
    39d8:	35 2d       	mov	r19, r5
    39da:	46 2d       	mov	r20, r6
    39dc:	57 2d       	mov	r21, r7
    39de:	68 2d       	mov	r22, r8
    39e0:	79 2d       	mov	r23, r9
    39e2:	8a 2d       	mov	r24, r10
    39e4:	9b 2d       	mov	r25, r11
    39e6:	08 e0       	ldi	r16, 0x08	; 8
    39e8:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__ashldi3>
			ts |= (uint64_t)(ts_tab[i]);
    39ec:	02 91       	ld	r16, -Z
    39ee:	40 2e       	mov	r4, r16
    39f0:	42 2a       	or	r4, r18
    39f2:	53 2e       	mov	r5, r19
    39f4:	64 2e       	mov	r6, r20
    39f6:	75 2e       	mov	r7, r21
    39f8:	86 2e       	mov	r8, r22
    39fa:	97 2e       	mov	r9, r23
    39fc:	a8 2e       	mov	r10, r24
    39fe:	b9 2e       	mov	r11, r25
	{
		uint8 ts_tab[5];
		uint64_t ts = 0;
		int i;
		dwt_readrxtimestamp(ts_tab);
		for (i = 4; i >= 0; i--)
    3a00:	ea 17       	cp	r30, r26
    3a02:	fb 07       	cpc	r31, r27
    3a04:	41 f7       	brne	.-48     	; 0x39d6 <dwt_ds_twr_resp+0x372>
							double Ra, Rb, Da, Db;
							int64_t tof_dtu;

							/* Retrieve response transmission and final reception timestamps. */
							resp_tx_ts = get_tx_timestamp_u64();
							final_rx_ts = get_rx_timestamp_u64();
    3a06:	40 92 81 28 	sts	0x2881, r4
    3a0a:	30 93 82 28 	sts	0x2882, r19
    3a0e:	40 93 83 28 	sts	0x2883, r20
    3a12:	50 93 84 28 	sts	0x2884, r21
    3a16:	60 93 85 28 	sts	0x2885, r22
    3a1a:	70 93 86 28 	sts	0x2886, r23
    3a1e:	80 93 87 28 	sts	0x2887, r24
    3a22:	90 93 88 28 	sts	0x2888, r25

							/* Get timestamps embedded in the final message. */
							final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
    3a26:	be 01       	movw	r22, r28
    3a28:	66 5f       	subi	r22, 0xF6	; 246
    3a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a2c:	87 ea       	ldi	r24, 0xA7	; 167
    3a2e:	98 e2       	ldi	r25, 0x28	; 40
    3a30:	d8 dd       	rcall	.-1104   	; 0x35e2 <final_msg_get_ts>
							final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
    3a32:	be 01       	movw	r22, r28
    3a34:	6a 5f       	subi	r22, 0xFA	; 250
    3a36:	7f 4f       	sbci	r23, 0xFF	; 255
    3a38:	8b ea       	ldi	r24, 0xAB	; 171
    3a3a:	98 e2       	ldi	r25, 0x28	; 40
    3a3c:	d2 dd       	rcall	.-1116   	; 0x35e2 <final_msg_get_ts>
							final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
    3a3e:	be 01       	movw	r22, r28
    3a40:	6f 5f       	subi	r22, 0xFF	; 255
    3a42:	7f 4f       	sbci	r23, 0xFF	; 255
    3a44:	8f ea       	ldi	r24, 0xAF	; 175
    3a46:	98 e2       	ldi	r25, 0x28	; 40
    3a48:	cc dd       	rcall	.-1128   	; 0x35e2 <final_msg_get_ts>

							/* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
							poll_rx_ts_32 = (uint32)poll_rx_ts;
							resp_tx_ts_32 = (uint32)resp_tx_ts;
    3a4a:	a9 e8       	ldi	r26, 0x89	; 137
    3a4c:	b8 e2       	ldi	r27, 0x28	; 40
    3a4e:	2d 91       	ld	r18, X+
    3a50:	3d 91       	ld	r19, X+
    3a52:	4d 91       	ld	r20, X+
    3a54:	5c 91       	ld	r21, X
    3a56:	2c 8b       	std	Y+20, r18	; 0x14
    3a58:	3d 8b       	std	Y+21, r19	; 0x15
    3a5a:	4e 8b       	std	Y+22, r20	; 0x16
    3a5c:	5f 8b       	std	Y+23, r21	; 0x17
							final_rx_ts_32 = (uint32)final_rx_ts;
							Ra = (double)(resp_rx_ts - poll_tx_ts);
    3a5e:	2e 81       	ldd	r18, Y+6	; 0x06
    3a60:	3f 81       	ldd	r19, Y+7	; 0x07
    3a62:	48 85       	ldd	r20, Y+8	; 0x08
    3a64:	59 85       	ldd	r21, Y+9	; 0x09
    3a66:	28 8b       	std	Y+16, r18	; 0x10
    3a68:	39 8b       	std	Y+17, r19	; 0x11
    3a6a:	4a 8b       	std	Y+18, r20	; 0x12
    3a6c:	5b 8b       	std	Y+19, r21	; 0x13
    3a6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a70:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a72:	ac 85       	ldd	r26, Y+12	; 0x0c
    3a74:	bd 85       	ldd	r27, Y+13	; 0x0d
    3a76:	28 1b       	sub	r18, r24
    3a78:	39 0b       	sbc	r19, r25
    3a7a:	4a 0b       	sbc	r20, r26
    3a7c:	5b 0b       	sbc	r21, r27
    3a7e:	ca 01       	movw	r24, r20
    3a80:	b9 01       	movw	r22, r18
    3a82:	0e 94 6f 25 	call	0x4ade	; 0x4ade <__floatunsisf>
    3a86:	6b 01       	movw	r12, r22
    3a88:	7c 01       	movw	r14, r24
							Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
    3a8a:	c3 01       	movw	r24, r6
    3a8c:	b2 01       	movw	r22, r4
    3a8e:	2c 89       	ldd	r18, Y+20	; 0x14
    3a90:	3d 89       	ldd	r19, Y+21	; 0x15
    3a92:	4e 89       	ldd	r20, Y+22	; 0x16
    3a94:	5f 89       	ldd	r21, Y+23	; 0x17
    3a96:	62 1b       	sub	r22, r18
    3a98:	73 0b       	sbc	r23, r19
    3a9a:	84 0b       	sbc	r24, r20
    3a9c:	95 0b       	sbc	r25, r21
    3a9e:	0e 94 6f 25 	call	0x4ade	; 0x4ade <__floatunsisf>
    3aa2:	68 8f       	std	Y+24, r22	; 0x18
    3aa4:	79 8f       	std	Y+25, r23	; 0x19
    3aa6:	8a 8f       	std	Y+26, r24	; 0x1a
    3aa8:	9b 8f       	std	Y+27, r25	; 0x1b
							Da = (double)(final_tx_ts - resp_rx_ts);
    3aaa:	89 81       	ldd	r24, Y+1	; 0x01
    3aac:	9a 81       	ldd	r25, Y+2	; 0x02
    3aae:	ab 81       	ldd	r26, Y+3	; 0x03
    3ab0:	bc 81       	ldd	r27, Y+4	; 0x04
    3ab2:	bc 01       	movw	r22, r24
    3ab4:	cd 01       	movw	r24, r26
    3ab6:	28 89       	ldd	r18, Y+16	; 0x10
    3ab8:	39 89       	ldd	r19, Y+17	; 0x11
    3aba:	4a 89       	ldd	r20, Y+18	; 0x12
    3abc:	5b 89       	ldd	r21, Y+19	; 0x13
    3abe:	62 1b       	sub	r22, r18
    3ac0:	73 0b       	sbc	r23, r19
    3ac2:	84 0b       	sbc	r24, r20
    3ac4:	95 0b       	sbc	r25, r21
    3ac6:	0e 94 6f 25 	call	0x4ade	; 0x4ade <__floatunsisf>
    3aca:	68 8b       	std	Y+16, r22	; 0x10
    3acc:	79 8b       	std	Y+17, r23	; 0x11
    3ace:	8a 8b       	std	Y+18, r24	; 0x12
    3ad0:	9b 8b       	std	Y+19, r25	; 0x13
							Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
    3ad2:	80 91 91 28 	lds	r24, 0x2891
    3ad6:	90 91 92 28 	lds	r25, 0x2892
    3ada:	a0 91 93 28 	lds	r26, 0x2893
    3ade:	b0 91 94 28 	lds	r27, 0x2894
    3ae2:	2c 89       	ldd	r18, Y+20	; 0x14
    3ae4:	3d 89       	ldd	r19, Y+21	; 0x15
    3ae6:	4e 89       	ldd	r20, Y+22	; 0x16
    3ae8:	5f 89       	ldd	r21, Y+23	; 0x17
    3aea:	28 1b       	sub	r18, r24
    3aec:	39 0b       	sbc	r19, r25
    3aee:	4a 0b       	sbc	r20, r26
    3af0:	5b 0b       	sbc	r21, r27
    3af2:	ca 01       	movw	r24, r20
    3af4:	b9 01       	movw	r22, r18
    3af6:	f3 d7       	rcall	.+4070   	; 0x4ade <__floatunsisf>
    3af8:	4b 01       	movw	r8, r22
    3afa:	5c 01       	movw	r10, r24
							tof_dtu = (int64_t)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
    3afc:	28 8d       	ldd	r18, Y+24	; 0x18
    3afe:	39 8d       	ldd	r19, Y+25	; 0x19
    3b00:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3b02:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3b04:	c7 01       	movw	r24, r14
    3b06:	b6 01       	movw	r22, r12
    3b08:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__mulsf3>
    3b0c:	2b 01       	movw	r4, r22
    3b0e:	3c 01       	movw	r6, r24
    3b10:	a5 01       	movw	r20, r10
    3b12:	94 01       	movw	r18, r8
    3b14:	68 89       	ldd	r22, Y+16	; 0x10
    3b16:	79 89       	ldd	r23, Y+17	; 0x11
    3b18:	8a 89       	ldd	r24, Y+18	; 0x12
    3b1a:	9b 89       	ldd	r25, Y+19	; 0x13
    3b1c:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__mulsf3>
    3b20:	9b 01       	movw	r18, r22
    3b22:	ac 01       	movw	r20, r24
    3b24:	c3 01       	movw	r24, r6
    3b26:	b2 01       	movw	r22, r4
    3b28:	a3 d6       	rcall	.+3398   	; 0x4870 <__subsf3>
    3b2a:	2b 01       	movw	r4, r22
    3b2c:	3c 01       	movw	r6, r24
    3b2e:	28 8d       	ldd	r18, Y+24	; 0x18
    3b30:	39 8d       	ldd	r19, Y+25	; 0x19
    3b32:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3b34:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3b36:	c7 01       	movw	r24, r14
    3b38:	b6 01       	movw	r22, r12
    3b3a:	9b d6       	rcall	.+3382   	; 0x4872 <__addsf3>
    3b3c:	28 89       	ldd	r18, Y+16	; 0x10
    3b3e:	39 89       	ldd	r19, Y+17	; 0x11
    3b40:	4a 89       	ldd	r20, Y+18	; 0x12
    3b42:	5b 89       	ldd	r21, Y+19	; 0x13
    3b44:	96 d6       	rcall	.+3372   	; 0x4872 <__addsf3>
    3b46:	a5 01       	movw	r20, r10
    3b48:	94 01       	movw	r18, r8
    3b4a:	93 d6       	rcall	.+3366   	; 0x4872 <__addsf3>
    3b4c:	9b 01       	movw	r18, r22
    3b4e:	ac 01       	movw	r20, r24
    3b50:	c3 01       	movw	r24, r6
    3b52:	b2 01       	movw	r22, r4
    3b54:	f2 d6       	rcall	.+3556   	; 0x493a <__divsf3>
    3b56:	59 d7       	rcall	.+3762   	; 0x4a0a <__fixsfdi>

							tof = tof_dtu * DWT_TIME_UNITS;
    3b58:	be d7       	rcall	.+3964   	; 0x4ad6 <__floatdisf>
    3b5a:	22 ec       	ldi	r18, 0xC2	; 194
    3b5c:	38 ea       	ldi	r19, 0xA8	; 168
    3b5e:	49 e8       	ldi	r20, 0x89	; 137
    3b60:	5d e2       	ldi	r21, 0x2D	; 45
    3b62:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__mulsf3>
    3b66:	60 93 7d 28 	sts	0x287D, r22
    3b6a:	70 93 7e 28 	sts	0x287E, r23
    3b6e:	80 93 7f 28 	sts	0x287F, r24
    3b72:	90 93 80 28 	sts	0x2880, r25
							distance = tof * SPEED_OF_LIGHT;
    3b76:	29 ec       	ldi	r18, 0xC9	; 201
    3b78:	38 ee       	ldi	r19, 0xE8	; 232
    3b7a:	4e e8       	ldi	r20, 0x8E	; 142
    3b7c:	5d e4       	ldi	r21, 0x4D	; 77
    3b7e:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__mulsf3>
    3b82:	60 93 79 28 	sts	0x2879, r22
    3b86:	70 93 7a 28 	sts	0x287A, r23
    3b8a:	80 93 7b 28 	sts	0x287B, r24
    3b8e:	90 93 7c 28 	sts	0x287C, r25

							/* Display computed distance on LCD. */
							printf("DIST: %d mm\n", (uint16_t)(distance*100));
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	48 ec       	ldi	r20, 0xC8	; 200
    3b98:	52 e4       	ldi	r21, 0x42	; 66
    3b9a:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__mulsf3>
    3b9e:	6f d7       	rcall	.+3806   	; 0x4a7e <__fixunssfsi>
    3ba0:	7f 93       	push	r23
    3ba2:	6f 93       	push	r22
    3ba4:	8e e5       	ldi	r24, 0x5E	; 94
    3ba6:	91 e2       	ldi	r25, 0x21	; 33
    3ba8:	9f 93       	push	r25
    3baa:	8f 93       	push	r24
    3bac:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <printf>
    3bb0:	0f 90       	pop	r0
    3bb2:	0f 90       	pop	r0
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	85 cd       	rjmp	.-1270   	; 0x36c4 <dwt_ds_twr_resp+0x60>
						}
						else
						{
							printf("Failed memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0 \n");
    3bba:	8b e6       	ldi	r24, 0x6B	; 107
    3bbc:	91 e2       	ldi	r25, 0x21	; 33
    3bbe:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
    3bc2:	80 cd       	rjmp	.-1280   	; 0x36c4 <dwt_ds_twr_resp+0x60>
						}
					}
					else
					{
						printf("Step 3 failed\n");
    3bc4:	8c ea       	ldi	r24, 0xAC	; 172
    3bc6:	91 e2       	ldi	r25, 0x21	; 33
    3bc8:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <puts>
						/* Clear RX error/timeout events in the DW1000 status register. */
						dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	30 e9       	ldi	r19, 0x90	; 144
    3bd0:	47 e2       	ldi	r20, 0x27	; 39
    3bd2:	54 e2       	ldi	r21, 0x24	; 36
    3bd4:	60 e0       	ldi	r22, 0x00	; 0
    3bd6:	70 e0       	ldi	r23, 0x00	; 0
    3bd8:	8f e0       	ldi	r24, 0x0F	; 15
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <dwt_write32bitoffsetreg>

						/* Reset RX to properly reinitialise LDE operation. */
						dwt_rxreset();
    3be0:	1e dc       	rcall	.-1988   	; 0x341e <dwt_rxreset>
    3be2:	70 cd       	rjmp	.-1312   	; 0x36c4 <dwt_ds_twr_resp+0x60>
				}
			}
			else
			{
				/* Clear RX error/timeout events in the DW1000 status register. */
				dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e9       	ldi	r19, 0x90	; 144
    3be8:	47 e2       	ldi	r20, 0x27	; 39
    3bea:	54 e2       	ldi	r21, 0x24	; 36
    3bec:	60 e0       	ldi	r22, 0x00	; 0
    3bee:	70 e0       	ldi	r23, 0x00	; 0
    3bf0:	8f e0       	ldi	r24, 0x0F	; 15
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <dwt_write32bitoffsetreg>

				/* Reset RX to properly reinitialise LDE operation. */
				dwt_rxreset();
    3bf8:	12 dc       	rcall	.-2012   	; 0x341e <dwt_rxreset>
    3bfa:	64 cd       	rjmp	.-1336   	; 0x36c4 <dwt_ds_twr_resp+0x60>

00003bfc <dwt_run_examples>:
	#ifdef DWT_DS_TWR_INIT
	dwt_ds_twr_init();
	#endif
	
	#ifdef DWT_DS_TWR_RESP
		dwt_ds_twr_resp();
    3bfc:	33 dd       	rcall	.-1434   	; 0x3664 <dwt_ds_twr_resp>

00003bfe <decamutexon>:
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
	decaIrqStatus_t s = 1;
	cli();
    3bfe:	f8 94       	cli
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	08 95       	ret

00003c06 <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	sei();
    3c06:	78 94       	sei
    3c08:	08 95       	ret

00003c0a <deca_sleep>:

#include "../include/deca_device_api.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
    3c0a:	af 92       	push	r10
    3c0c:	bf 92       	push	r11
    3c0e:	cf 92       	push	r12
    3c10:	df 92       	push	r13
    3c12:	ef 92       	push	r14
    3c14:	ff 92       	push	r15
    3c16:	0f 93       	push	r16
    3c18:	1f 93       	push	r17
    3c1a:	cf 93       	push	r28
    3c1c:	df 93       	push	r29
    delay_ms(time_ms);
    3c1e:	a1 2c       	mov	r10, r1
    3c20:	0f 2e       	mov	r0, r31
    3c22:	fc e6       	ldi	r31, 0x6C	; 108
    3c24:	bf 2e       	mov	r11, r31
    3c26:	f0 2d       	mov	r31, r0
    3c28:	0f 2e       	mov	r0, r31
    3c2a:	fc ed       	ldi	r31, 0xDC	; 220
    3c2c:	cf 2e       	mov	r12, r31
    3c2e:	f0 2d       	mov	r31, r0
    3c30:	68 94       	set
    3c32:	dd 24       	eor	r13, r13
    3c34:	d1 f8       	bld	r13, 1
    3c36:	e1 2c       	mov	r14, r1
    3c38:	f1 2c       	mov	r15, r1
    3c3a:	00 e0       	ldi	r16, 0x00	; 0
    3c3c:	10 e0       	ldi	r17, 0x00	; 0
    3c3e:	28 2f       	mov	r18, r24
    3c40:	39 2f       	mov	r19, r25
    3c42:	40 e0       	ldi	r20, 0x00	; 0
    3c44:	50 e0       	ldi	r21, 0x00	; 0
    3c46:	60 e0       	ldi	r22, 0x00	; 0
    3c48:	70 e0       	ldi	r23, 0x00	; 0
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__muldi3>
    3c52:	29 51       	subi	r18, 0x19	; 25
    3c54:	3c 4f       	sbci	r19, 0xFC	; 252
    3c56:	4f 4f       	sbci	r20, 0xFF	; 255
    3c58:	5f 4f       	sbci	r21, 0xFF	; 255
    3c5a:	6f 4f       	sbci	r22, 0xFF	; 255
    3c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c60:	9f 4f       	sbci	r25, 0xFF	; 255
    3c62:	7a d7       	rcall	.+3828   	; 0x4b58 <__floatundisf>
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e8       	ldi	r19, 0x80	; 128
    3c68:	4b eb       	ldi	r20, 0xBB	; 187
    3c6a:	55 e4       	ldi	r21, 0x45	; 69
    3c6c:	66 d6       	rcall	.+3276   	; 0x493a <__divsf3>
    3c6e:	d2 d6       	rcall	.+3492   	; 0x4a14 <__fixunssfdi>
    3c70:	f2 2f       	mov	r31, r18
    3c72:	e3 2f       	mov	r30, r19
    3c74:	8f 2f       	mov	r24, r31
    3c76:	9e 2f       	mov	r25, r30
    3c78:	a4 2f       	mov	r26, r20
    3c7a:	b5 2f       	mov	r27, r21
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    3c7c:	01 97       	sbiw	r24, 0x01	; 1
    3c7e:	a1 09       	sbc	r26, r1
    3c80:	b1 09       	sbc	r27, r1
    3c82:	00 97       	sbiw	r24, 0x00	; 0
    3c84:	a1 05       	cpc	r26, r1
    3c86:	b1 05       	cpc	r27, r1
    3c88:	c9 f7       	brne	.-14     	; 0x3c7c <deca_sleep+0x72>
}
    3c8a:	df 91       	pop	r29
    3c8c:	cf 91       	pop	r28
    3c8e:	1f 91       	pop	r17
    3c90:	0f 91       	pop	r16
    3c92:	ff 90       	pop	r15
    3c94:	ef 90       	pop	r14
    3c96:	df 90       	pop	r13
    3c98:	cf 90       	pop	r12
    3c9a:	bf 90       	pop	r11
    3c9c:	af 90       	pop	r10
    3c9e:	08 95       	ret

00003ca0 <openspi>:
	spi_disable(&SPIC);


	return 0;

} // end closespi()
    3ca0:	cf 92       	push	r12
    3ca2:	df 92       	push	r13
    3ca4:	ef 92       	push	r14
    3ca6:	ff 92       	push	r15
    3ca8:	0f 93       	push	r16
    3caa:	1f 93       	push	r17
    3cac:	84 e1       	ldi	r24, 0x14	; 20
    3cae:	80 93 f0 28 	sts	0x28F0, r24
    3cb2:	80 ec       	ldi	r24, 0xC0	; 192
    3cb4:	98 e0       	ldi	r25, 0x08	; 8
    3cb6:	0e 94 40 01 	call	0x280	; 0x280 <spi_master_init>
    3cba:	c1 2c       	mov	r12, r1
    3cbc:	d1 2c       	mov	r13, r1
    3cbe:	76 01       	movw	r14, r12
    3cc0:	00 e2       	ldi	r16, 0x20	; 32
    3cc2:	11 ea       	ldi	r17, 0xA1	; 161
    3cc4:	27 e0       	ldi	r18, 0x07	; 7
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	40 e0       	ldi	r20, 0x00	; 0
    3cca:	60 ef       	ldi	r22, 0xF0	; 240
    3ccc:	78 e2       	ldi	r23, 0x28	; 40
    3cce:	80 ec       	ldi	r24, 0xC0	; 192
    3cd0:	98 e0       	ldi	r25, 0x08	; 8
    3cd2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <spi_master_setup_device>
    3cd6:	e0 ec       	ldi	r30, 0xC0	; 192
    3cd8:	f8 e0       	ldi	r31, 0x08	; 8
    3cda:	80 81       	ld	r24, Z
    3cdc:	80 64       	ori	r24, 0x40	; 64
    3cde:	80 83       	st	Z, r24
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	1f 91       	pop	r17
    3ce6:	0f 91       	pop	r16
    3ce8:	ff 90       	pop	r15
    3cea:	ef 90       	pop	r14
    3cec:	df 90       	pop	r13
    3cee:	cf 90       	pop	r12
    3cf0:	08 95       	ret

00003cf2 <fast_spi>:
    3cf2:	cf 92       	push	r12
    3cf4:	df 92       	push	r13
    3cf6:	ef 92       	push	r14
    3cf8:	ff 92       	push	r15
    3cfa:	0f 93       	push	r16
    3cfc:	1f 93       	push	r17
    3cfe:	c1 2c       	mov	r12, r1
    3d00:	d1 2c       	mov	r13, r1
    3d02:	76 01       	movw	r14, r12
    3d04:	00 ec       	ldi	r16, 0xC0	; 192
    3d06:	11 ee       	ldi	r17, 0xE1	; 225
    3d08:	24 ee       	ldi	r18, 0xE4	; 228
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	40 e0       	ldi	r20, 0x00	; 0
    3d0e:	60 ef       	ldi	r22, 0xF0	; 240
    3d10:	78 e2       	ldi	r23, 0x28	; 40
    3d12:	80 ec       	ldi	r24, 0xC0	; 192
    3d14:	98 e0       	ldi	r25, 0x08	; 8
    3d16:	0e 94 59 01 	call	0x2b2	; 0x2b2 <spi_master_setup_device>
    3d1a:	1f 91       	pop	r17
    3d1c:	0f 91       	pop	r16
    3d1e:	ff 90       	pop	r15
    3d20:	ef 90       	pop	r14
    3d22:	df 90       	pop	r13
    3d24:	cf 90       	pop	r12
    3d26:	08 95       	ret

00003d28 <writetospi>:
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
#pragma GCC optimize ("O3")
int writetospi(uint16 headerLength, const uint8 *headerBuffer, uint32 bodylength, const uint8 *bodyBuffer)
{
    3d28:	8f 92       	push	r8
    3d2a:	9f 92       	push	r9
    3d2c:	af 92       	push	r10
    3d2e:	bf 92       	push	r11
    3d30:	cf 92       	push	r12
    3d32:	df 92       	push	r13
    3d34:	ef 92       	push	r14
    3d36:	ff 92       	push	r15
    3d38:	0f 93       	push	r16
    3d3a:	1f 93       	push	r17
    3d3c:	cf 93       	push	r28
    3d3e:	df 93       	push	r29
    3d40:	7c 01       	movw	r14, r24
    3d42:	eb 01       	movw	r28, r22
    3d44:	49 01       	movw	r8, r18
    3d46:	5a 01       	movw	r10, r20

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
    3d48:	5a df       	rcall	.-332    	; 0x3bfe <decamutexon>
    3d4a:	6c 01       	movw	r12, r24

    spi_select_device(&SPIC, &spi_device_conf);
    3d4c:	60 ef       	ldi	r22, 0xF0	; 240
    3d4e:	78 e2       	ldi	r23, 0x28	; 40
    3d50:	80 ec       	ldi	r24, 0xC0	; 192
    3d52:	98 e0       	ldi	r25, 0x08	; 8
    3d54:	0e 94 9a 01 	call	0x334	; 0x334 <spi_select_device>
    spi_write_packet(&SPIC, headerBuffer, headerLength);
    3d58:	a7 01       	movw	r20, r14
    3d5a:	be 01       	movw	r22, r28
    3d5c:	80 ec       	ldi	r24, 0xC0	; 192
    3d5e:	98 e0       	ldi	r25, 0x08	; 8
    3d60:	0e 94 78 01 	call	0x2f0	; 0x2f0 <spi_write_packet>
    spi_write_packet(&SPIC, bodyBuffer, bodylength);
    3d64:	a4 01       	movw	r20, r8
    3d66:	b8 01       	movw	r22, r16
    3d68:	80 ec       	ldi	r24, 0xC0	; 192
    3d6a:	98 e0       	ldi	r25, 0x08	; 8
    3d6c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <spi_write_packet>
    spi_deselect_device(&SPIC, &spi_device_conf);
    3d70:	60 ef       	ldi	r22, 0xF0	; 240
    3d72:	78 e2       	ldi	r23, 0x28	; 40
    3d74:	80 ec       	ldi	r24, 0xC0	; 192
    3d76:	98 e0       	ldi	r25, 0x08	; 8
    3d78:	0e 94 b0 01 	call	0x360	; 0x360 <spi_deselect_device>

    decamutexoff(stat) ;
    3d7c:	c6 01       	movw	r24, r12
    3d7e:	43 df       	rcall	.-378    	; 0x3c06 <decamutexoff>

    return 0;
} // end writetospi()
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	df 91       	pop	r29
    3d86:	cf 91       	pop	r28
    3d88:	1f 91       	pop	r17
    3d8a:	0f 91       	pop	r16
    3d8c:	ff 90       	pop	r15
    3d8e:	ef 90       	pop	r14
    3d90:	df 90       	pop	r13
    3d92:	cf 90       	pop	r12
    3d94:	bf 90       	pop	r11
    3d96:	af 90       	pop	r10
    3d98:	9f 90       	pop	r9
    3d9a:	8f 90       	pop	r8
    3d9c:	08 95       	ret

00003d9e <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
#pragma GCC optimize ("O3")
int readfromspi(uint16 headerLength, const uint8 *headerBuffer, uint32 readlength, uint8 *readBuffer)
{
    3d9e:	8f 92       	push	r8
    3da0:	9f 92       	push	r9
    3da2:	af 92       	push	r10
    3da4:	bf 92       	push	r11
    3da6:	cf 92       	push	r12
    3da8:	df 92       	push	r13
    3daa:	ef 92       	push	r14
    3dac:	ff 92       	push	r15
    3dae:	0f 93       	push	r16
    3db0:	1f 93       	push	r17
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
    3db6:	7c 01       	movw	r14, r24
    3db8:	eb 01       	movw	r28, r22
    3dba:	49 01       	movw	r8, r18
    3dbc:	5a 01       	movw	r10, r20

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
    3dbe:	1f df       	rcall	.-450    	; 0x3bfe <decamutexon>
    3dc0:	6c 01       	movw	r12, r24

    spi_select_device(&SPIC, &spi_device_conf);
    3dc2:	60 ef       	ldi	r22, 0xF0	; 240
    3dc4:	78 e2       	ldi	r23, 0x28	; 40
    3dc6:	80 ec       	ldi	r24, 0xC0	; 192
    3dc8:	98 e0       	ldi	r25, 0x08	; 8
    3dca:	0e 94 9a 01 	call	0x334	; 0x334 <spi_select_device>
    spi_write_packet(&SPIC, headerBuffer, headerLength);
    3dce:	a7 01       	movw	r20, r14
    3dd0:	be 01       	movw	r22, r28
    3dd2:	80 ec       	ldi	r24, 0xC0	; 192
    3dd4:	98 e0       	ldi	r25, 0x08	; 8
    3dd6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <spi_write_packet>
    spi_read_packet(&SPIC, readBuffer, readlength);
    3dda:	a4 01       	movw	r20, r8
    3ddc:	b8 01       	movw	r22, r16
    3dde:	80 ec       	ldi	r24, 0xC0	; 192
    3de0:	98 e0       	ldi	r25, 0x08	; 8
    3de2:	0e 94 87 01 	call	0x30e	; 0x30e <spi_read_packet>
    spi_deselect_device(&SPIC, &spi_device_conf);
    3de6:	60 ef       	ldi	r22, 0xF0	; 240
    3de8:	78 e2       	ldi	r23, 0x28	; 40
    3dea:	80 ec       	ldi	r24, 0xC0	; 192
    3dec:	98 e0       	ldi	r25, 0x08	; 8
    3dee:	0e 94 b0 01 	call	0x360	; 0x360 <spi_deselect_device>

    decamutexoff(stat) ;
    3df2:	c6 01       	movw	r24, r12
    3df4:	08 df       	rcall	.-496    	; 0x3c06 <decamutexoff>

    return 0;
} // end readfromspi()
    3df6:	80 e0       	ldi	r24, 0x00	; 0
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	df 91       	pop	r29
    3dfc:	cf 91       	pop	r28
    3dfe:	1f 91       	pop	r17
    3e00:	0f 91       	pop	r16
    3e02:	ff 90       	pop	r15
    3e04:	ef 90       	pop	r14
    3e06:	df 90       	pop	r13
    3e08:	cf 90       	pop	r12
    3e0a:	bf 90       	pop	r11
    3e0c:	af 90       	pop	r10
    3e0e:	9f 90       	pop	r9
    3e10:	8f 90       	pop	r8
    3e12:	08 95       	ret

00003e14 <init_onepos>:

#include "../onepos.h"

void init_onepos(void)
{
	sysclk_init();
    3e14:	0e 94 68 12 	call	0x24d0	; 0x24d0 <sysclk_init>
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    3e1a:	9a e6       	ldi	r25, 0x6A	; 106
    3e1c:	a8 e1       	ldi	r26, 0x18	; 24
    3e1e:	b0 e0       	ldi	r27, 0x00	; 0
    3e20:	01 97       	sbiw	r24, 0x01	; 1
    3e22:	a1 09       	sbc	r26, r1
    3e24:	b1 09       	sbc	r27, r1
    3e26:	00 97       	sbiw	r24, 0x00	; 0
    3e28:	a1 05       	cpc	r26, r1
    3e2a:	b1 05       	cpc	r27, r1
    3e2c:	c9 f7       	brne	.-14     	; 0x3e20 <init_onepos+0xc>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3e2e:	e0 e4       	ldi	r30, 0x40	; 64
    3e30:	f6 e0       	ldi	r31, 0x06	; 6
    3e32:	88 e0       	ldi	r24, 0x08	; 8
    3e34:	82 83       	std	Z+2, r24	; 0x02
    3e36:	94 e0       	ldi	r25, 0x04	; 4
    3e38:	92 83       	std	Z+2, r25	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3e3a:	a0 e0       	ldi	r26, 0x00	; 0
    3e3c:	b6 e0       	ldi	r27, 0x06	; 6
    3e3e:	20 e4       	ldi	r18, 0x40	; 64
    3e40:	11 96       	adiw	r26, 0x01	; 1
    3e42:	2c 93       	st	X, r18
    3e44:	11 97       	sbiw	r26, 0x01	; 1
    3e46:	30 e8       	ldi	r19, 0x80	; 128
    3e48:	11 96       	adiw	r26, 0x01	; 1
    3e4a:	3c 93       	st	X, r19
    3e4c:	a0 e2       	ldi	r26, 0x20	; 32
    3e4e:	b6 e0       	ldi	r27, 0x06	; 6
    3e50:	41 e0       	ldi	r20, 0x01	; 1
    3e52:	11 96       	adiw	r26, 0x01	; 1
    3e54:	4c 93       	st	X, r20
    3e56:	11 97       	sbiw	r26, 0x01	; 1
    3e58:	42 e0       	ldi	r20, 0x02	; 2
    3e5a:	11 96       	adiw	r26, 0x01	; 1
    3e5c:	4c 93       	st	X, r20
    3e5e:	a0 e8       	ldi	r26, 0x80	; 128
    3e60:	b6 e0       	ldi	r27, 0x06	; 6
    3e62:	11 96       	adiw	r26, 0x01	; 1
    3e64:	4c 93       	st	X, r20
    3e66:	11 97       	sbiw	r26, 0x01	; 1
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3e68:	12 96       	adiw	r26, 0x02	; 2
    3e6a:	9c 93       	st	X, r25
    3e6c:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3e6e:	11 96       	adiw	r26, 0x01	; 1
    3e70:	8c 93       	st	X, r24
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3e72:	a0 e6       	ldi	r26, 0x60	; 96
    3e74:	b6 e0       	ldi	r27, 0x06	; 6
    3e76:	12 96       	adiw	r26, 0x02	; 2
    3e78:	9c 93       	st	X, r25
    3e7a:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3e7c:	11 96       	adiw	r26, 0x01	; 1
    3e7e:	8c 93       	st	X, r24
    3e80:	80 e1       	ldi	r24, 0x10	; 16
    3e82:	81 83       	std	Z+1, r24	; 0x01
    3e84:	80 e2       	ldi	r24, 0x20	; 32
    3e86:	81 83       	std	Z+1, r24	; 0x01
    3e88:	31 83       	std	Z+1, r19	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3e8a:	22 83       	std	Z+2, r18	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3e8c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    3e8e:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3e90:	e6 e5       	ldi	r30, 0x56	; 86
    3e92:	f6 e0       	ldi	r31, 0x06	; 6
    3e94:	90 81       	ld	r25, Z
    3e96:	97 70       	andi	r25, 0x07	; 7
    3e98:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    3e9a:	90 81       	ld	r25, Z
    3e9c:	90 61       	ori	r25, 0x10	; 16
    3e9e:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3ea0:	8f bf       	out	0x3f, r24	; 63
	
	#ifdef ENABLE_RTC
	// 	rtc_init();
	#endif
	#ifdef ENABLE_USB
	usb_init();
    3ea2:	7d c4       	rjmp	.+2298   	; 0x479e <usb_init>
    3ea4:	08 95       	ret

00003ea6 <init_animation>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3ea6:	80 e4       	ldi	r24, 0x40	; 64
    3ea8:	e0 e0       	ldi	r30, 0x00	; 0
    3eaa:	f6 e0       	ldi	r31, 0x06	; 6
    3eac:	85 83       	std	Z+5, r24	; 0x05
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	92 ee       	ldi	r25, 0xE2	; 226
    3eb2:	a4 e0       	ldi	r26, 0x04	; 4
    3eb4:	b0 e0       	ldi	r27, 0x00	; 0
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	a1 09       	sbc	r26, r1
    3eba:	b1 09       	sbc	r27, r1
    3ebc:	00 97       	sbiw	r24, 0x00	; 0
    3ebe:	a1 05       	cpc	r26, r1
    3ec0:	b1 05       	cpc	r27, r1
    3ec2:	c9 f7       	brne	.-14     	; 0x3eb6 <init_animation+0x10>
    3ec4:	80 e8       	ldi	r24, 0x80	; 128
    3ec6:	e0 e0       	ldi	r30, 0x00	; 0
    3ec8:	f6 e0       	ldi	r31, 0x06	; 6
    3eca:	85 83       	std	Z+5, r24	; 0x05
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	92 ee       	ldi	r25, 0xE2	; 226
    3ed0:	a4 e0       	ldi	r26, 0x04	; 4
    3ed2:	b0 e0       	ldi	r27, 0x00	; 0
    3ed4:	01 97       	sbiw	r24, 0x01	; 1
    3ed6:	a1 09       	sbc	r26, r1
    3ed8:	b1 09       	sbc	r27, r1
    3eda:	00 97       	sbiw	r24, 0x00	; 0
    3edc:	a1 05       	cpc	r26, r1
    3ede:	b1 05       	cpc	r27, r1
    3ee0:	c9 f7       	brne	.-14     	; 0x3ed4 <init_animation+0x2e>
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	e0 e2       	ldi	r30, 0x20	; 32
    3ee6:	f6 e0       	ldi	r31, 0x06	; 6
    3ee8:	85 83       	std	Z+5, r24	; 0x05
    3eea:	80 e0       	ldi	r24, 0x00	; 0
    3eec:	92 ee       	ldi	r25, 0xE2	; 226
    3eee:	a4 e0       	ldi	r26, 0x04	; 4
    3ef0:	b0 e0       	ldi	r27, 0x00	; 0
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	a1 09       	sbc	r26, r1
    3ef6:	b1 09       	sbc	r27, r1
    3ef8:	00 97       	sbiw	r24, 0x00	; 0
    3efa:	a1 05       	cpc	r26, r1
    3efc:	b1 05       	cpc	r27, r1
    3efe:	c9 f7       	brne	.-14     	; 0x3ef2 <init_animation+0x4c>
    3f00:	82 e0       	ldi	r24, 0x02	; 2
    3f02:	e0 e2       	ldi	r30, 0x20	; 32
    3f04:	f6 e0       	ldi	r31, 0x06	; 6
    3f06:	85 83       	std	Z+5, r24	; 0x05
    3f08:	80 e0       	ldi	r24, 0x00	; 0
    3f0a:	92 ee       	ldi	r25, 0xE2	; 226
    3f0c:	a4 e0       	ldi	r26, 0x04	; 4
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	01 97       	sbiw	r24, 0x01	; 1
    3f12:	a1 09       	sbc	r26, r1
    3f14:	b1 09       	sbc	r27, r1
    3f16:	00 97       	sbiw	r24, 0x00	; 0
    3f18:	a1 05       	cpc	r26, r1
    3f1a:	b1 05       	cpc	r27, r1
    3f1c:	c9 f7       	brne	.-14     	; 0x3f10 <init_animation+0x6a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3f1e:	80 e4       	ldi	r24, 0x40	; 64
    3f20:	e0 e0       	ldi	r30, 0x00	; 0
    3f22:	f6 e0       	ldi	r31, 0x06	; 6
    3f24:	86 83       	std	Z+6, r24	; 0x06
    3f26:	80 e0       	ldi	r24, 0x00	; 0
    3f28:	92 ee       	ldi	r25, 0xE2	; 226
    3f2a:	a4 e0       	ldi	r26, 0x04	; 4
    3f2c:	b0 e0       	ldi	r27, 0x00	; 0
    3f2e:	01 97       	sbiw	r24, 0x01	; 1
    3f30:	a1 09       	sbc	r26, r1
    3f32:	b1 09       	sbc	r27, r1
    3f34:	00 97       	sbiw	r24, 0x00	; 0
    3f36:	a1 05       	cpc	r26, r1
    3f38:	b1 05       	cpc	r27, r1
    3f3a:	c9 f7       	brne	.-14     	; 0x3f2e <init_animation+0x88>
    3f3c:	80 e8       	ldi	r24, 0x80	; 128
    3f3e:	e0 e0       	ldi	r30, 0x00	; 0
    3f40:	f6 e0       	ldi	r31, 0x06	; 6
    3f42:	86 83       	std	Z+6, r24	; 0x06
    3f44:	80 e0       	ldi	r24, 0x00	; 0
    3f46:	92 ee       	ldi	r25, 0xE2	; 226
    3f48:	a4 e0       	ldi	r26, 0x04	; 4
    3f4a:	b0 e0       	ldi	r27, 0x00	; 0
    3f4c:	01 97       	sbiw	r24, 0x01	; 1
    3f4e:	a1 09       	sbc	r26, r1
    3f50:	b1 09       	sbc	r27, r1
    3f52:	00 97       	sbiw	r24, 0x00	; 0
    3f54:	a1 05       	cpc	r26, r1
    3f56:	b1 05       	cpc	r27, r1
    3f58:	c9 f7       	brne	.-14     	; 0x3f4c <init_animation+0xa6>
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	e0 e2       	ldi	r30, 0x20	; 32
    3f5e:	f6 e0       	ldi	r31, 0x06	; 6
    3f60:	86 83       	std	Z+6, r24	; 0x06
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	92 ee       	ldi	r25, 0xE2	; 226
    3f66:	a4 e0       	ldi	r26, 0x04	; 4
    3f68:	b0 e0       	ldi	r27, 0x00	; 0
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	a1 09       	sbc	r26, r1
    3f6e:	b1 09       	sbc	r27, r1
    3f70:	00 97       	sbiw	r24, 0x00	; 0
    3f72:	a1 05       	cpc	r26, r1
    3f74:	b1 05       	cpc	r27, r1
    3f76:	c9 f7       	brne	.-14     	; 0x3f6a <init_animation+0xc4>
    3f78:	82 e0       	ldi	r24, 0x02	; 2
    3f7a:	e0 e2       	ldi	r30, 0x20	; 32
    3f7c:	f6 e0       	ldi	r31, 0x06	; 6
    3f7e:	86 83       	std	Z+6, r24	; 0x06
    3f80:	80 e0       	ldi	r24, 0x00	; 0
    3f82:	92 ee       	ldi	r25, 0xE2	; 226
    3f84:	a4 e0       	ldi	r26, 0x04	; 4
    3f86:	b0 e0       	ldi	r27, 0x00	; 0
    3f88:	01 97       	sbiw	r24, 0x01	; 1
    3f8a:	a1 09       	sbc	r26, r1
    3f8c:	b1 09       	sbc	r27, r1
    3f8e:	00 97       	sbiw	r24, 0x00	; 0
    3f90:	a1 05       	cpc	r26, r1
    3f92:	b1 05       	cpc	r27, r1
    3f94:	c9 f7       	brne	.-14     	; 0x3f88 <init_animation+0xe2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3f96:	80 e4       	ldi	r24, 0x40	; 64
    3f98:	e0 e0       	ldi	r30, 0x00	; 0
    3f9a:	f6 e0       	ldi	r31, 0x06	; 6
    3f9c:	85 83       	std	Z+5, r24	; 0x05
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	94 ec       	ldi	r25, 0xC4	; 196
    3fa2:	a9 e0       	ldi	r26, 0x09	; 9
    3fa4:	b0 e0       	ldi	r27, 0x00	; 0
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	a1 09       	sbc	r26, r1
    3faa:	b1 09       	sbc	r27, r1
    3fac:	00 97       	sbiw	r24, 0x00	; 0
    3fae:	a1 05       	cpc	r26, r1
    3fb0:	b1 05       	cpc	r27, r1
    3fb2:	c9 f7       	brne	.-14     	; 0x3fa6 <init_animation+0x100>
    3fb4:	80 e8       	ldi	r24, 0x80	; 128
    3fb6:	e0 e0       	ldi	r30, 0x00	; 0
    3fb8:	f6 e0       	ldi	r31, 0x06	; 6
    3fba:	85 83       	std	Z+5, r24	; 0x05
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	94 ec       	ldi	r25, 0xC4	; 196
    3fc0:	a9 e0       	ldi	r26, 0x09	; 9
    3fc2:	b0 e0       	ldi	r27, 0x00	; 0
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	a1 09       	sbc	r26, r1
    3fc8:	b1 09       	sbc	r27, r1
    3fca:	00 97       	sbiw	r24, 0x00	; 0
    3fcc:	a1 05       	cpc	r26, r1
    3fce:	b1 05       	cpc	r27, r1
    3fd0:	c9 f7       	brne	.-14     	; 0x3fc4 <init_animation+0x11e>
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	e0 e2       	ldi	r30, 0x20	; 32
    3fd6:	f6 e0       	ldi	r31, 0x06	; 6
    3fd8:	85 83       	std	Z+5, r24	; 0x05
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	94 ec       	ldi	r25, 0xC4	; 196
    3fde:	a9 e0       	ldi	r26, 0x09	; 9
    3fe0:	b0 e0       	ldi	r27, 0x00	; 0
    3fe2:	01 97       	sbiw	r24, 0x01	; 1
    3fe4:	a1 09       	sbc	r26, r1
    3fe6:	b1 09       	sbc	r27, r1
    3fe8:	00 97       	sbiw	r24, 0x00	; 0
    3fea:	a1 05       	cpc	r26, r1
    3fec:	b1 05       	cpc	r27, r1
    3fee:	c9 f7       	brne	.-14     	; 0x3fe2 <init_animation+0x13c>
    3ff0:	82 e0       	ldi	r24, 0x02	; 2
    3ff2:	e0 e2       	ldi	r30, 0x20	; 32
    3ff4:	f6 e0       	ldi	r31, 0x06	; 6
    3ff6:	85 83       	std	Z+5, r24	; 0x05
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	94 ec       	ldi	r25, 0xC4	; 196
    3ffc:	a9 e0       	ldi	r26, 0x09	; 9
    3ffe:	b0 e0       	ldi	r27, 0x00	; 0
    4000:	01 97       	sbiw	r24, 0x01	; 1
    4002:	a1 09       	sbc	r26, r1
    4004:	b1 09       	sbc	r27, r1
    4006:	00 97       	sbiw	r24, 0x00	; 0
    4008:	a1 05       	cpc	r26, r1
    400a:	b1 05       	cpc	r27, r1
    400c:	c9 f7       	brne	.-14     	; 0x4000 <init_animation+0x15a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    400e:	80 e4       	ldi	r24, 0x40	; 64
    4010:	e0 e0       	ldi	r30, 0x00	; 0
    4012:	f6 e0       	ldi	r31, 0x06	; 6
    4014:	86 83       	std	Z+6, r24	; 0x06
    4016:	80 e0       	ldi	r24, 0x00	; 0
    4018:	94 ec       	ldi	r25, 0xC4	; 196
    401a:	a9 e0       	ldi	r26, 0x09	; 9
    401c:	b0 e0       	ldi	r27, 0x00	; 0
    401e:	01 97       	sbiw	r24, 0x01	; 1
    4020:	a1 09       	sbc	r26, r1
    4022:	b1 09       	sbc	r27, r1
    4024:	00 97       	sbiw	r24, 0x00	; 0
    4026:	a1 05       	cpc	r26, r1
    4028:	b1 05       	cpc	r27, r1
    402a:	c9 f7       	brne	.-14     	; 0x401e <init_animation+0x178>
    402c:	80 e8       	ldi	r24, 0x80	; 128
    402e:	e0 e0       	ldi	r30, 0x00	; 0
    4030:	f6 e0       	ldi	r31, 0x06	; 6
    4032:	86 83       	std	Z+6, r24	; 0x06
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	94 ec       	ldi	r25, 0xC4	; 196
    4038:	a9 e0       	ldi	r26, 0x09	; 9
    403a:	b0 e0       	ldi	r27, 0x00	; 0
    403c:	01 97       	sbiw	r24, 0x01	; 1
    403e:	a1 09       	sbc	r26, r1
    4040:	b1 09       	sbc	r27, r1
    4042:	00 97       	sbiw	r24, 0x00	; 0
    4044:	a1 05       	cpc	r26, r1
    4046:	b1 05       	cpc	r27, r1
    4048:	c9 f7       	brne	.-14     	; 0x403c <init_animation+0x196>
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	e0 e2       	ldi	r30, 0x20	; 32
    404e:	f6 e0       	ldi	r31, 0x06	; 6
    4050:	86 83       	std	Z+6, r24	; 0x06
    4052:	80 e0       	ldi	r24, 0x00	; 0
    4054:	94 ec       	ldi	r25, 0xC4	; 196
    4056:	a9 e0       	ldi	r26, 0x09	; 9
    4058:	b0 e0       	ldi	r27, 0x00	; 0
    405a:	01 97       	sbiw	r24, 0x01	; 1
    405c:	a1 09       	sbc	r26, r1
    405e:	b1 09       	sbc	r27, r1
    4060:	00 97       	sbiw	r24, 0x00	; 0
    4062:	a1 05       	cpc	r26, r1
    4064:	b1 05       	cpc	r27, r1
    4066:	c9 f7       	brne	.-14     	; 0x405a <init_animation+0x1b4>
    4068:	82 e0       	ldi	r24, 0x02	; 2
    406a:	e0 e2       	ldi	r30, 0x20	; 32
    406c:	f6 e0       	ldi	r31, 0x06	; 6
    406e:	86 83       	std	Z+6, r24	; 0x06
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	94 ec       	ldi	r25, 0xC4	; 196
    4074:	a9 e0       	ldi	r26, 0x09	; 9
    4076:	b0 e0       	ldi	r27, 0x00	; 0
    4078:	01 97       	sbiw	r24, 0x01	; 1
    407a:	a1 09       	sbc	r26, r1
    407c:	b1 09       	sbc	r27, r1
    407e:	00 97       	sbiw	r24, 0x00	; 0
    4080:	a1 05       	cpc	r26, r1
    4082:	b1 05       	cpc	r27, r1
    4084:	c9 f7       	brne	.-14     	; 0x4078 <init_animation+0x1d2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4086:	80 e4       	ldi	r24, 0x40	; 64
    4088:	e0 e0       	ldi	r30, 0x00	; 0
    408a:	f6 e0       	ldi	r31, 0x06	; 6
    408c:	85 83       	std	Z+5, r24	; 0x05
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	96 ea       	ldi	r25, 0xA6	; 166
    4092:	ae e0       	ldi	r26, 0x0E	; 14
    4094:	b0 e0       	ldi	r27, 0x00	; 0
    4096:	01 97       	sbiw	r24, 0x01	; 1
    4098:	a1 09       	sbc	r26, r1
    409a:	b1 09       	sbc	r27, r1
    409c:	00 97       	sbiw	r24, 0x00	; 0
    409e:	a1 05       	cpc	r26, r1
    40a0:	b1 05       	cpc	r27, r1
    40a2:	c9 f7       	brne	.-14     	; 0x4096 <init_animation+0x1f0>
    40a4:	80 e8       	ldi	r24, 0x80	; 128
    40a6:	e0 e0       	ldi	r30, 0x00	; 0
    40a8:	f6 e0       	ldi	r31, 0x06	; 6
    40aa:	85 83       	std	Z+5, r24	; 0x05
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	96 ea       	ldi	r25, 0xA6	; 166
    40b0:	ae e0       	ldi	r26, 0x0E	; 14
    40b2:	b0 e0       	ldi	r27, 0x00	; 0
    40b4:	01 97       	sbiw	r24, 0x01	; 1
    40b6:	a1 09       	sbc	r26, r1
    40b8:	b1 09       	sbc	r27, r1
    40ba:	00 97       	sbiw	r24, 0x00	; 0
    40bc:	a1 05       	cpc	r26, r1
    40be:	b1 05       	cpc	r27, r1
    40c0:	c9 f7       	brne	.-14     	; 0x40b4 <init_animation+0x20e>
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	e0 e2       	ldi	r30, 0x20	; 32
    40c6:	f6 e0       	ldi	r31, 0x06	; 6
    40c8:	85 83       	std	Z+5, r24	; 0x05
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	96 ea       	ldi	r25, 0xA6	; 166
    40ce:	ae e0       	ldi	r26, 0x0E	; 14
    40d0:	b0 e0       	ldi	r27, 0x00	; 0
    40d2:	01 97       	sbiw	r24, 0x01	; 1
    40d4:	a1 09       	sbc	r26, r1
    40d6:	b1 09       	sbc	r27, r1
    40d8:	00 97       	sbiw	r24, 0x00	; 0
    40da:	a1 05       	cpc	r26, r1
    40dc:	b1 05       	cpc	r27, r1
    40de:	c9 f7       	brne	.-14     	; 0x40d2 <init_animation+0x22c>
    40e0:	82 e0       	ldi	r24, 0x02	; 2
    40e2:	e0 e2       	ldi	r30, 0x20	; 32
    40e4:	f6 e0       	ldi	r31, 0x06	; 6
    40e6:	85 83       	std	Z+5, r24	; 0x05
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	96 ea       	ldi	r25, 0xA6	; 166
    40ec:	ae e0       	ldi	r26, 0x0E	; 14
    40ee:	b0 e0       	ldi	r27, 0x00	; 0
    40f0:	01 97       	sbiw	r24, 0x01	; 1
    40f2:	a1 09       	sbc	r26, r1
    40f4:	b1 09       	sbc	r27, r1
    40f6:	00 97       	sbiw	r24, 0x00	; 0
    40f8:	a1 05       	cpc	r26, r1
    40fa:	b1 05       	cpc	r27, r1
    40fc:	c9 f7       	brne	.-14     	; 0x40f0 <init_animation+0x24a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    40fe:	80 e4       	ldi	r24, 0x40	; 64
    4100:	e0 e0       	ldi	r30, 0x00	; 0
    4102:	f6 e0       	ldi	r31, 0x06	; 6
    4104:	86 83       	std	Z+6, r24	; 0x06
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	96 ea       	ldi	r25, 0xA6	; 166
    410a:	ae e0       	ldi	r26, 0x0E	; 14
    410c:	b0 e0       	ldi	r27, 0x00	; 0
    410e:	01 97       	sbiw	r24, 0x01	; 1
    4110:	a1 09       	sbc	r26, r1
    4112:	b1 09       	sbc	r27, r1
    4114:	00 97       	sbiw	r24, 0x00	; 0
    4116:	a1 05       	cpc	r26, r1
    4118:	b1 05       	cpc	r27, r1
    411a:	c9 f7       	brne	.-14     	; 0x410e <init_animation+0x268>
    411c:	80 e8       	ldi	r24, 0x80	; 128
    411e:	e0 e0       	ldi	r30, 0x00	; 0
    4120:	f6 e0       	ldi	r31, 0x06	; 6
    4122:	86 83       	std	Z+6, r24	; 0x06
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	96 ea       	ldi	r25, 0xA6	; 166
    4128:	ae e0       	ldi	r26, 0x0E	; 14
    412a:	b0 e0       	ldi	r27, 0x00	; 0
    412c:	01 97       	sbiw	r24, 0x01	; 1
    412e:	a1 09       	sbc	r26, r1
    4130:	b1 09       	sbc	r27, r1
    4132:	00 97       	sbiw	r24, 0x00	; 0
    4134:	a1 05       	cpc	r26, r1
    4136:	b1 05       	cpc	r27, r1
    4138:	c9 f7       	brne	.-14     	; 0x412c <init_animation+0x286>
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	e0 e2       	ldi	r30, 0x20	; 32
    413e:	f6 e0       	ldi	r31, 0x06	; 6
    4140:	86 83       	std	Z+6, r24	; 0x06
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	96 ea       	ldi	r25, 0xA6	; 166
    4146:	ae e0       	ldi	r26, 0x0E	; 14
    4148:	b0 e0       	ldi	r27, 0x00	; 0
    414a:	01 97       	sbiw	r24, 0x01	; 1
    414c:	a1 09       	sbc	r26, r1
    414e:	b1 09       	sbc	r27, r1
    4150:	00 97       	sbiw	r24, 0x00	; 0
    4152:	a1 05       	cpc	r26, r1
    4154:	b1 05       	cpc	r27, r1
    4156:	c9 f7       	brne	.-14     	; 0x414a <init_animation+0x2a4>
    4158:	82 e0       	ldi	r24, 0x02	; 2
    415a:	e0 e2       	ldi	r30, 0x20	; 32
    415c:	f6 e0       	ldi	r31, 0x06	; 6
    415e:	86 83       	std	Z+6, r24	; 0x06
    4160:	80 e0       	ldi	r24, 0x00	; 0
    4162:	96 ea       	ldi	r25, 0xA6	; 166
    4164:	ae e0       	ldi	r26, 0x0E	; 14
    4166:	b0 e0       	ldi	r27, 0x00	; 0
    4168:	01 97       	sbiw	r24, 0x01	; 1
    416a:	a1 09       	sbc	r26, r1
    416c:	b1 09       	sbc	r27, r1
    416e:	00 97       	sbiw	r24, 0x00	; 0
    4170:	a1 05       	cpc	r26, r1
    4172:	b1 05       	cpc	r27, r1
    4174:	c9 f7       	brne	.-14     	; 0x4168 <init_animation+0x2c2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4176:	80 e4       	ldi	r24, 0x40	; 64
    4178:	e0 e0       	ldi	r30, 0x00	; 0
    417a:	f6 e0       	ldi	r31, 0x06	; 6
    417c:	85 83       	std	Z+5, r24	; 0x05
    417e:	80 e0       	ldi	r24, 0x00	; 0
    4180:	98 e8       	ldi	r25, 0x88	; 136
    4182:	a3 e1       	ldi	r26, 0x13	; 19
    4184:	b0 e0       	ldi	r27, 0x00	; 0
    4186:	01 97       	sbiw	r24, 0x01	; 1
    4188:	a1 09       	sbc	r26, r1
    418a:	b1 09       	sbc	r27, r1
    418c:	00 97       	sbiw	r24, 0x00	; 0
    418e:	a1 05       	cpc	r26, r1
    4190:	b1 05       	cpc	r27, r1
    4192:	c9 f7       	brne	.-14     	; 0x4186 <init_animation+0x2e0>
    4194:	80 e8       	ldi	r24, 0x80	; 128
    4196:	e0 e0       	ldi	r30, 0x00	; 0
    4198:	f6 e0       	ldi	r31, 0x06	; 6
    419a:	85 83       	std	Z+5, r24	; 0x05
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	98 e8       	ldi	r25, 0x88	; 136
    41a0:	a3 e1       	ldi	r26, 0x13	; 19
    41a2:	b0 e0       	ldi	r27, 0x00	; 0
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	a1 09       	sbc	r26, r1
    41a8:	b1 09       	sbc	r27, r1
    41aa:	00 97       	sbiw	r24, 0x00	; 0
    41ac:	a1 05       	cpc	r26, r1
    41ae:	b1 05       	cpc	r27, r1
    41b0:	c9 f7       	brne	.-14     	; 0x41a4 <init_animation+0x2fe>
    41b2:	81 e0       	ldi	r24, 0x01	; 1
    41b4:	e0 e2       	ldi	r30, 0x20	; 32
    41b6:	f6 e0       	ldi	r31, 0x06	; 6
    41b8:	85 83       	std	Z+5, r24	; 0x05
    41ba:	80 e0       	ldi	r24, 0x00	; 0
    41bc:	98 e8       	ldi	r25, 0x88	; 136
    41be:	a3 e1       	ldi	r26, 0x13	; 19
    41c0:	b0 e0       	ldi	r27, 0x00	; 0
    41c2:	01 97       	sbiw	r24, 0x01	; 1
    41c4:	a1 09       	sbc	r26, r1
    41c6:	b1 09       	sbc	r27, r1
    41c8:	00 97       	sbiw	r24, 0x00	; 0
    41ca:	a1 05       	cpc	r26, r1
    41cc:	b1 05       	cpc	r27, r1
    41ce:	c9 f7       	brne	.-14     	; 0x41c2 <init_animation+0x31c>
    41d0:	82 e0       	ldi	r24, 0x02	; 2
    41d2:	e0 e2       	ldi	r30, 0x20	; 32
    41d4:	f6 e0       	ldi	r31, 0x06	; 6
    41d6:	85 83       	std	Z+5, r24	; 0x05
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	98 e8       	ldi	r25, 0x88	; 136
    41dc:	a3 e1       	ldi	r26, 0x13	; 19
    41de:	b0 e0       	ldi	r27, 0x00	; 0
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	a1 09       	sbc	r26, r1
    41e4:	b1 09       	sbc	r27, r1
    41e6:	00 97       	sbiw	r24, 0x00	; 0
    41e8:	a1 05       	cpc	r26, r1
    41ea:	b1 05       	cpc	r27, r1
    41ec:	c9 f7       	brne	.-14     	; 0x41e0 <init_animation+0x33a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    41ee:	80 e4       	ldi	r24, 0x40	; 64
    41f0:	e0 e0       	ldi	r30, 0x00	; 0
    41f2:	f6 e0       	ldi	r31, 0x06	; 6
    41f4:	86 83       	std	Z+6, r24	; 0x06
    41f6:	80 e0       	ldi	r24, 0x00	; 0
    41f8:	98 e8       	ldi	r25, 0x88	; 136
    41fa:	a3 e1       	ldi	r26, 0x13	; 19
    41fc:	b0 e0       	ldi	r27, 0x00	; 0
    41fe:	01 97       	sbiw	r24, 0x01	; 1
    4200:	a1 09       	sbc	r26, r1
    4202:	b1 09       	sbc	r27, r1
    4204:	00 97       	sbiw	r24, 0x00	; 0
    4206:	a1 05       	cpc	r26, r1
    4208:	b1 05       	cpc	r27, r1
    420a:	c9 f7       	brne	.-14     	; 0x41fe <init_animation+0x358>
    420c:	80 e8       	ldi	r24, 0x80	; 128
    420e:	e0 e0       	ldi	r30, 0x00	; 0
    4210:	f6 e0       	ldi	r31, 0x06	; 6
    4212:	86 83       	std	Z+6, r24	; 0x06
    4214:	80 e0       	ldi	r24, 0x00	; 0
    4216:	98 e8       	ldi	r25, 0x88	; 136
    4218:	a3 e1       	ldi	r26, 0x13	; 19
    421a:	b0 e0       	ldi	r27, 0x00	; 0
    421c:	01 97       	sbiw	r24, 0x01	; 1
    421e:	a1 09       	sbc	r26, r1
    4220:	b1 09       	sbc	r27, r1
    4222:	00 97       	sbiw	r24, 0x00	; 0
    4224:	a1 05       	cpc	r26, r1
    4226:	b1 05       	cpc	r27, r1
    4228:	c9 f7       	brne	.-14     	; 0x421c <init_animation+0x376>
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	e0 e2       	ldi	r30, 0x20	; 32
    422e:	f6 e0       	ldi	r31, 0x06	; 6
    4230:	86 83       	std	Z+6, r24	; 0x06
    4232:	80 e0       	ldi	r24, 0x00	; 0
    4234:	98 e8       	ldi	r25, 0x88	; 136
    4236:	a3 e1       	ldi	r26, 0x13	; 19
    4238:	b0 e0       	ldi	r27, 0x00	; 0
    423a:	01 97       	sbiw	r24, 0x01	; 1
    423c:	a1 09       	sbc	r26, r1
    423e:	b1 09       	sbc	r27, r1
    4240:	00 97       	sbiw	r24, 0x00	; 0
    4242:	a1 05       	cpc	r26, r1
    4244:	b1 05       	cpc	r27, r1
    4246:	c9 f7       	brne	.-14     	; 0x423a <init_animation+0x394>
    4248:	82 e0       	ldi	r24, 0x02	; 2
    424a:	e0 e2       	ldi	r30, 0x20	; 32
    424c:	f6 e0       	ldi	r31, 0x06	; 6
    424e:	86 83       	std	Z+6, r24	; 0x06
    4250:	80 e0       	ldi	r24, 0x00	; 0
    4252:	98 e8       	ldi	r25, 0x88	; 136
    4254:	a3 e1       	ldi	r26, 0x13	; 19
    4256:	b0 e0       	ldi	r27, 0x00	; 0
    4258:	01 97       	sbiw	r24, 0x01	; 1
    425a:	a1 09       	sbc	r26, r1
    425c:	b1 09       	sbc	r27, r1
    425e:	00 97       	sbiw	r24, 0x00	; 0
    4260:	a1 05       	cpc	r26, r1
    4262:	b1 05       	cpc	r27, r1
    4264:	c9 f7       	brne	.-14     	; 0x4258 <init_animation+0x3b2>
	delay_ms(160);
	led3(OFF);
	delay_ms(160);
	led4(OFF);
	delay_ms(160);
    4266:	08 95       	ret

00004268 <onepos_save_cfg>:
	//onepos_config.node_id = node_id;
//}

void onepos_set_node_mode(uint8_t node_mode)
{
	onepos_config.node_mode = node_mode;
    4268:	48 e2       	ldi	r20, 0x28	; 40
    426a:	50 e0       	ldi	r21, 0x00	; 0
    426c:	68 ec       	ldi	r22, 0xC8	; 200
    426e:	78 e2       	ldi	r23, 0x28	; 40
    4270:	80 e0       	ldi	r24, 0x00	; 0
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <nvm_eeprom_erase_and_write_buffer>
    4278:	08 95       	ret

0000427a <onepos_get_mem_check>:
    427a:	80 91 c8 28 	lds	r24, 0x28C8
    427e:	90 91 c9 28 	lds	r25, 0x28C9
    4282:	08 95       	ret

00004284 <onepos_get_node_id>:
    4284:	60 e0       	ldi	r22, 0x00	; 0
    4286:	70 e0       	ldi	r23, 0x00	; 0
    4288:	81 e0       	ldi	r24, 0x01	; 1
    428a:	0e 94 ba 13 	call	0x2774	; 0x2774 <nvm_read_byte>
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	08 95       	ret

00004292 <onepos_write_default_cfg>:
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    4296:	88 ec       	ldi	r24, 0xC8	; 200
    4298:	90 e1       	ldi	r25, 0x10	; 16
    429a:	80 93 c8 28 	sts	0x28C8, r24
    429e:	90 93 c9 28 	sts	0x28C9, r25
    42a2:	f0 df       	rcall	.-32     	; 0x4284 <onepos_get_node_id>
    42a4:	ca ec       	ldi	r28, 0xCA	; 202
    42a6:	d8 e2       	ldi	r29, 0x28	; 40
    42a8:	88 83       	st	Y, r24
    42aa:	99 83       	std	Y+1, r25	; 0x01
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	80 93 cc 28 	sts	0x28CC, r24
    42b2:	85 e1       	ldi	r24, 0x15	; 21
    42b4:	e7 e6       	ldi	r30, 0x67	; 103
    42b6:	f2 e2       	ldi	r31, 0x22	; 34
    42b8:	ad ec       	ldi	r26, 0xCD	; 205
    42ba:	b8 e2       	ldi	r27, 0x28	; 40
    42bc:	01 90       	ld	r0, Z+
    42be:	0d 92       	st	X+, r0
    42c0:	8a 95       	dec	r24
    42c2:	e1 f7       	brne	.-8      	; 0x42bc <onepos_write_default_cfg+0x2a>
    42c4:	85 e0       	ldi	r24, 0x05	; 5
    42c6:	ec e7       	ldi	r30, 0x7C	; 124
    42c8:	f2 e2       	ldi	r31, 0x22	; 34
    42ca:	a2 ee       	ldi	r26, 0xE2	; 226
    42cc:	b8 e2       	ldi	r27, 0x28	; 40
    42ce:	01 90       	ld	r0, Z+
    42d0:	0d 92       	st	X+, r0
    42d2:	8a 95       	dec	r24
    42d4:	e1 f7       	brne	.-8      	; 0x42ce <onepos_write_default_cfg+0x3c>
    42d6:	85 e0       	ldi	r24, 0x05	; 5
    42d8:	e1 e8       	ldi	r30, 0x81	; 129
    42da:	f2 e2       	ldi	r31, 0x22	; 34
    42dc:	a7 ee       	ldi	r26, 0xE7	; 231
    42de:	b8 e2       	ldi	r27, 0x28	; 40
    42e0:	01 90       	ld	r0, Z+
    42e2:	0d 92       	st	X+, r0
    42e4:	8a 95       	dec	r24
    42e6:	e1 f7       	brne	.-8      	; 0x42e0 <onepos_write_default_cfg+0x4e>
    42e8:	88 81       	ld	r24, Y
    42ea:	99 81       	ldd	r25, Y+1	; 0x01
    42ec:	83 30       	cpi	r24, 0x03	; 3
    42ee:	91 05       	cpc	r25, r1
    42f0:	19 f1       	breq	.+70     	; 0x4338 <onepos_write_default_cfg+0xa6>
    42f2:	30 f4       	brcc	.+12     	; 0x4300 <onepos_write_default_cfg+0x6e>
    42f4:	81 30       	cpi	r24, 0x01	; 1
    42f6:	91 05       	cpc	r25, r1
    42f8:	49 f0       	breq	.+18     	; 0x430c <onepos_write_default_cfg+0x7a>
    42fa:	02 97       	sbiw	r24, 0x02	; 2
    42fc:	91 f0       	breq	.+36     	; 0x4322 <onepos_write_default_cfg+0x90>
    42fe:	3d c0       	rjmp	.+122    	; 0x437a <onepos_write_default_cfg+0xe8>
    4300:	84 30       	cpi	r24, 0x04	; 4
    4302:	91 05       	cpc	r25, r1
    4304:	21 f1       	breq	.+72     	; 0x434e <onepos_write_default_cfg+0xbc>
    4306:	05 97       	sbiw	r24, 0x05	; 5
    4308:	69 f1       	breq	.+90     	; 0x4364 <onepos_write_default_cfg+0xd2>
    430a:	37 c0       	rjmp	.+110    	; 0x437a <onepos_write_default_cfg+0xe8>
    430c:	84 e3       	ldi	r24, 0x34	; 52
    430e:	90 e4       	ldi	r25, 0x40	; 64
    4310:	80 93 ec 28 	sts	0x28EC, r24
    4314:	90 93 ed 28 	sts	0x28ED, r25
    4318:	80 93 ee 28 	sts	0x28EE, r24
    431c:	90 93 ef 28 	sts	0x28EF, r25
    4320:	36 c0       	rjmp	.+108    	; 0x438e <onepos_write_default_cfg+0xfc>
    4322:	84 e3       	ldi	r24, 0x34	; 52
    4324:	90 e4       	ldi	r25, 0x40	; 64
    4326:	80 93 ec 28 	sts	0x28EC, r24
    432a:	90 93 ed 28 	sts	0x28ED, r25
    432e:	80 93 ee 28 	sts	0x28EE, r24
    4332:	90 93 ef 28 	sts	0x28EF, r25
    4336:	2b c0       	rjmp	.+86     	; 0x438e <onepos_write_default_cfg+0xfc>
    4338:	84 e3       	ldi	r24, 0x34	; 52
    433a:	90 e4       	ldi	r25, 0x40	; 64
    433c:	80 93 ec 28 	sts	0x28EC, r24
    4340:	90 93 ed 28 	sts	0x28ED, r25
    4344:	80 93 ee 28 	sts	0x28EE, r24
    4348:	90 93 ef 28 	sts	0x28EF, r25
    434c:	20 c0       	rjmp	.+64     	; 0x438e <onepos_write_default_cfg+0xfc>
    434e:	84 e3       	ldi	r24, 0x34	; 52
    4350:	90 e4       	ldi	r25, 0x40	; 64
    4352:	80 93 ec 28 	sts	0x28EC, r24
    4356:	90 93 ed 28 	sts	0x28ED, r25
    435a:	80 93 ee 28 	sts	0x28EE, r24
    435e:	90 93 ef 28 	sts	0x28EF, r25
    4362:	15 c0       	rjmp	.+42     	; 0x438e <onepos_write_default_cfg+0xfc>
    4364:	84 e3       	ldi	r24, 0x34	; 52
    4366:	90 e4       	ldi	r25, 0x40	; 64
    4368:	80 93 ec 28 	sts	0x28EC, r24
    436c:	90 93 ed 28 	sts	0x28ED, r25
    4370:	80 93 ee 28 	sts	0x28EE, r24
    4374:	90 93 ef 28 	sts	0x28EF, r25
    4378:	0a c0       	rjmp	.+20     	; 0x438e <onepos_write_default_cfg+0xfc>
    437a:	86 e3       	ldi	r24, 0x36	; 54
    437c:	90 e4       	ldi	r25, 0x40	; 64
    437e:	80 93 ec 28 	sts	0x28EC, r24
    4382:	90 93 ed 28 	sts	0x28ED, r25
    4386:	80 93 ee 28 	sts	0x28EE, r24
    438a:	90 93 ef 28 	sts	0x28EF, r25
    438e:	6c df       	rcall	.-296    	; 0x4268 <onepos_save_cfg>
    4390:	df 91       	pop	r29
    4392:	cf 91       	pop	r28
    4394:	08 95       	ret

00004396 <onepos_read_cfg>:
    4396:	48 e2       	ldi	r20, 0x28	; 40
    4398:	50 e0       	ldi	r21, 0x00	; 0
    439a:	68 ec       	ldi	r22, 0xC8	; 200
    439c:	78 e2       	ldi	r23, 0x28	; 40
    439e:	80 e0       	ldi	r24, 0x00	; 0
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <nvm_eeprom_read_buffer>
    43a6:	80 91 c8 28 	lds	r24, 0x28C8
    43aa:	90 91 c9 28 	lds	r25, 0x28C9
    43ae:	88 3c       	cpi	r24, 0xC8	; 200
    43b0:	90 41       	sbci	r25, 0x10	; 16
    43b2:	19 f0       	breq	.+6      	; 0x43ba <onepos_read_cfg+0x24>
    43b4:	6e df       	rcall	.-292    	; 0x4292 <onepos_write_default_cfg>
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    43b8:	08 95       	ret
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	08 95       	ret

000043be <onepos_get_namespaceID>:
    43be:	6d ec       	ldi	r22, 0xCD	; 205
    43c0:	78 e2       	ldi	r23, 0x28	; 40
    43c2:	b5 c5       	rjmp	.+2922   	; 0x4f2e <strcpy>
    43c4:	08 95       	ret

000043c6 <onepos_get_ble_scan_interval>:
    43c6:	62 ee       	ldi	r22, 0xE2	; 226
    43c8:	78 e2       	ldi	r23, 0x28	; 40
    43ca:	b1 c5       	rjmp	.+2914   	; 0x4f2e <strcpy>
    43cc:	08 95       	ret

000043ce <onepos_get_ble_scan_window>:
    43ce:	67 ee       	ldi	r22, 0xE7	; 231
    43d0:	78 e2       	ldi	r23, 0x28	; 40
    43d2:	ad c5       	rjmp	.+2906   	; 0x4f2e <strcpy>
    43d4:	08 95       	ret

000043d6 <onepos_set_namespaceID>:
}

void onepos_set_namespaceID(char * str)
{
	strcpy(onepos_config.namespaceID,str);
    43d6:	bc 01       	movw	r22, r24
    43d8:	8d ec       	ldi	r24, 0xCD	; 205
    43da:	98 e2       	ldi	r25, 0x28	; 40
    43dc:	a8 c5       	rjmp	.+2896   	; 0x4f2e <strcpy>
    43de:	08 95       	ret

000043e0 <onepos_set_ble_scan_interval>:
}

void onepos_set_ble_scan_interval(char * str)
{
	strcpy(onepos_config.ble_scan_interval,str);
    43e0:	bc 01       	movw	r22, r24
    43e2:	82 ee       	ldi	r24, 0xE2	; 226
    43e4:	98 e2       	ldi	r25, 0x28	; 40
    43e6:	a3 c5       	rjmp	.+2886   	; 0x4f2e <strcpy>
    43e8:	08 95       	ret

000043ea <onepos_set_ble_scan_window>:
}

void onepos_set_ble_scan_window(char * str)
{
	strcpy(onepos_config.ble_scan_window,str);
    43ea:	bc 01       	movw	r22, r24
    43ec:	87 ee       	ldi	r24, 0xE7	; 231
    43ee:	98 e2       	ldi	r25, 0x28	; 40
    43f0:	9e c5       	rjmp	.+2876   	; 0x4f2e <strcpy>
    43f2:	08 95       	ret

000043f4 <onepos_configure_interface>:
	printf("0. SAVE AND EXIT\n");
	printf("Select a number to change the current configuration: ");
}

uint8_t onepos_configure_interface(void)
{
    43f4:	2f 92       	push	r2
    43f6:	3f 92       	push	r3
    43f8:	4f 92       	push	r4
    43fa:	5f 92       	push	r5
    43fc:	6f 92       	push	r6
    43fe:	7f 92       	push	r7
    4400:	8f 92       	push	r8
    4402:	9f 92       	push	r9
    4404:	af 92       	push	r10
    4406:	bf 92       	push	r11
    4408:	cf 92       	push	r12
    440a:	df 92       	push	r13
    440c:	ef 92       	push	r14
    440e:	ff 92       	push	r15
    4410:	0f 93       	push	r16
    4412:	1f 93       	push	r17
    4414:	cf 93       	push	r28
    4416:	df 93       	push	r29
    4418:	cd b7       	in	r28, 0x3d	; 61
    441a:	de b7       	in	r29, 0x3e	; 62
    441c:	ce 54       	subi	r28, 0x4E	; 78
    441e:	d1 09       	sbc	r29, r1
    4420:	cd bf       	out	0x3d, r28	; 61
    4422:	de bf       	out	0x3e, r29	; 62
	char new_namespaceID[21];
	char new_ble_scan_interval[5]; 
	char new_ble_scan_window[5]; 
	uint8_t new_node_id=0;
	uint8_t new_node_mode=0;
    4424:	18 a2       	std	Y+32, r1	; 0x20
	uint8_t end_config = 0;
	uint8_t selection;
	uint16_t new_uwb_rx_antenna_delay = 0;
    4426:	1a a2       	std	Y+34, r1	; 0x22
    4428:	1b a2       	std	Y+35, r1	; 0x23
	uint16_t new_uwb_tx_antenna_delay = 0;
    442a:	1c a2       	std	Y+36, r1	; 0x24
    442c:	1d a2       	std	Y+37, r1	; 0x25
	char new_namespaceID[21];
	char new_ble_scan_interval[5]; 
	char new_ble_scan_window[5]; 
	uint8_t new_node_id=0;
	uint8_t new_node_mode=0;
	uint8_t end_config = 0;
    442e:	51 2c       	mov	r5, r1
{
	char namespaceID[21];
	char ble_scan_interval[5];
	char ble_scan_window[5];
	
	onepos_get_namespaceID(namespaceID);
    4430:	6e 01       	movw	r12, r28
    4432:	26 e2       	ldi	r18, 0x26	; 38
    4434:	c2 0e       	add	r12, r18
    4436:	d1 1c       	adc	r13, r1
	onepos_get_ble_scan_interval(ble_scan_interval);
    4438:	7e 01       	movw	r14, r28
    443a:	30 e4       	ldi	r19, 0x40	; 64
    443c:	e3 0e       	add	r14, r19
    443e:	f1 1c       	adc	r15, r1
	onepos_get_ble_scan_window(ble_scan_window);
    4440:	8e 01       	movw	r16, r28
    4442:	05 5c       	subi	r16, 0xC5	; 197
    4444:	1f 4f       	sbci	r17, 0xFF	; 255
	
}

uint16_t onepos_get_mem_check(void)
{
	return onepos_config.mem_check;
    4446:	0f 2e       	mov	r0, r31
    4448:	f8 ec       	ldi	r31, 0xC8	; 200
    444a:	6f 2e       	mov	r6, r31
    444c:	f8 e2       	ldi	r31, 0x28	; 40
    444e:	7f 2e       	mov	r7, r31
    4450:	f0 2d       	mov	r31, r0
	onepos_get_ble_scan_interval(ble_scan_interval);
	onepos_get_ble_scan_window(ble_scan_window);
	
	printf("\n-----------------------\n");
	printf("Current Configuration: \n");
	printf("   MEM CHECK         : %#x\n",onepos_get_mem_check());
    4452:	0f 2e       	mov	r0, r31
    4454:	f7 ed       	ldi	r31, 0xD7	; 215
    4456:	8f 2e       	mov	r8, r31
    4458:	f2 e2       	ldi	r31, 0x22	; 34
    445a:	9f 2e       	mov	r9, r31
    445c:	f0 2d       	mov	r31, r0
	uint16_t new_uwb_tx_antenna_delay = 0;
	
	while(!end_config)
	{
		print_menu1();
		scanf("%d", &selection);
    445e:	5e 01       	movw	r10, r28
    4460:	81 e2       	ldi	r24, 0x21	; 33
    4462:	a8 0e       	add	r10, r24
    4464:	b1 1c       	adc	r11, r1
				scanf("%ld",&new_uwb_rx_antenna_delay);
				onepos_set_uwb_rx_antenna_delay(new_uwb_rx_antenna_delay);
			break;
			case 7:
				printf("\nWrite the new uwb tx antenna delay: ");
				scanf("%ld",&new_uwb_tx_antenna_delay);
    4466:	fe 01       	movw	r30, r28
    4468:	b4 96       	adiw	r30, 0x24	; 36
    446a:	27 96       	adiw	r28, 0x07	; 7
    446c:	ee af       	std	Y+62, r30	; 0x3e
    446e:	ff af       	std	Y+63, r31	; 0x3f
    4470:	27 97       	sbiw	r28, 0x07	; 7
				scanf("%4s",new_ble_scan_window);
				onepos_set_ble_scan_window(new_ble_scan_window);
			break;
			case 6:
				printf("\nWrite the new uwb rx antenna delay: ");
				scanf("%ld",&new_uwb_rx_antenna_delay);
    4472:	9e 01       	movw	r18, r28
    4474:	2e 5d       	subi	r18, 0xDE	; 222
    4476:	3f 4f       	sbci	r19, 0xFF	; 255
    4478:	29 96       	adiw	r28, 0x09	; 9
    447a:	2e af       	std	Y+62, r18	; 0x3e
    447c:	3f af       	std	Y+63, r19	; 0x3f
    447e:	29 97       	sbiw	r28, 0x09	; 9
				scanf("%4s",new_ble_scan_interval);
				onepos_set_ble_scan_interval(new_ble_scan_interval);
			break;
			case 5:
				printf("\nWrite the new ble scan window( 16 hex): ");
				scanf("%4s",new_ble_scan_window);
    4480:	ce 01       	movw	r24, r28
    4482:	4b 96       	adiw	r24, 0x1b	; 27
    4484:	2b 96       	adiw	r28, 0x0b	; 11
    4486:	8e af       	std	Y+62, r24	; 0x3e
    4488:	9f af       	std	Y+63, r25	; 0x3f
    448a:	2b 97       	sbiw	r28, 0x0b	; 11
				scanf("%20s",new_namespaceID);
				onepos_set_namespaceID(new_namespaceID);
			break;
			case 4:
				printf("\nWrite the new ble scan interval(16 hex): ");
				scanf("%4s",new_ble_scan_interval);
    448c:	1e 01       	movw	r2, r28
    448e:	96 e1       	ldi	r25, 0x16	; 22
    4490:	29 0e       	add	r2, r25
    4492:	31 1c       	adc	r3, r1
				}
				onepos_set_node_mode(new_node_mode);
			break;
			case 3:
				printf("\nWrite the new namespace ID: ");
				scanf("%20s",new_namespaceID);
    4494:	b3 97       	sbiw	r30, 0x23	; 35
    4496:	2d 96       	adiw	r28, 0x0d	; 13
    4498:	ee af       	std	Y+62, r30	; 0x3e
    449a:	ff af       	std	Y+63, r31	; 0x3f
    449c:	2d 97       	sbiw	r28, 0x0d	; 13
				printf("\nTo change node ID program the user signature memory at address 0x00\n");
				delay_ms(2000);
			break;
			case 2:
				printf("\nWrite 0 to start as Beacon and 1 to start as OnePos: ");
				scanf("%d",&new_node_mode);
    449e:	22 50       	subi	r18, 0x02	; 2
    44a0:	31 09       	sbc	r19, r1
    44a2:	2f 96       	adiw	r28, 0x0f	; 15
    44a4:	2e af       	std	Y+62, r18	; 0x3e
    44a6:	3f af       	std	Y+63, r19	; 0x3f
    44a8:	2f 97       	sbiw	r28, 0x0f	; 15
		scanf("%d", &selection);
		
		switch(selection)
		{
			case 1:
				printf("\nTo change node ID program the user signature memory at address 0x00\n");
    44aa:	41 2c       	mov	r4, r1
{
	char namespaceID[21];
	char ble_scan_interval[5];
	char ble_scan_window[5];
	
	onepos_get_namespaceID(namespaceID);
    44ac:	c6 01       	movw	r24, r12
    44ae:	87 df       	rcall	.-242    	; 0x43be <onepos_get_namespaceID>
	onepos_get_ble_scan_interval(ble_scan_interval);
    44b0:	c7 01       	movw	r24, r14
    44b2:	89 df       	rcall	.-238    	; 0x43c6 <onepos_get_ble_scan_interval>
	onepos_get_ble_scan_window(ble_scan_window);
    44b4:	c8 01       	movw	r24, r16
    44b6:	8b df       	rcall	.-234    	; 0x43ce <onepos_get_ble_scan_window>
	
	printf("\n-----------------------\n");
    44b8:	86 ea       	ldi	r24, 0xA6	; 166
    44ba:	92 e2       	ldi	r25, 0x22	; 34
    44bc:	50 d5       	rcall	.+2720   	; 0x4f5e <puts>
	printf("Current Configuration: \n");
    44be:	8f eb       	ldi	r24, 0xBF	; 191
    44c0:	92 e2       	ldi	r25, 0x22	; 34
    44c2:	4d d5       	rcall	.+2714   	; 0x4f5e <puts>
	
}

uint16_t onepos_get_mem_check(void)
{
	return onepos_config.mem_check;
    44c4:	f3 01       	movw	r30, r6
    44c6:	80 81       	ld	r24, Z
    44c8:	91 81       	ldd	r25, Z+1	; 0x01
	onepos_get_ble_scan_interval(ble_scan_interval);
	onepos_get_ble_scan_window(ble_scan_window);
	
	printf("\n-----------------------\n");
	printf("Current Configuration: \n");
	printf("   MEM CHECK         : %#x\n",onepos_get_mem_check());
    44ca:	9f 93       	push	r25
    44cc:	8f 93       	push	r24
    44ce:	9f 92       	push	r9
    44d0:	8f 92       	push	r8
    44d2:	34 d5       	rcall	.+2664   	; 0x4f3c <printf>
	printf("1. NODE ID           : %d\n",onepos_get_node_id());
    44d4:	d7 de       	rcall	.-594    	; 0x4284 <onepos_get_node_id>
    44d6:	9f 93       	push	r25
    44d8:	8f 93       	push	r24
    44da:	83 ef       	ldi	r24, 0xF3	; 243
    44dc:	92 e2       	ldi	r25, 0x22	; 34
    44de:	9f 93       	push	r25
    44e0:	8f 93       	push	r24
    44e2:	2c d5       	rcall	.+2648   	; 0x4f3c <printf>
	return nvm_read_user_signature_row(NODE_ID_ADDR);
}

uint8_t onepos_get_node_mode(void)
{
	return onepos_config.node_mode;
    44e4:	80 91 cc 28 	lds	r24, 0x28CC
	
	printf("\n-----------------------\n");
	printf("Current Configuration: \n");
	printf("   MEM CHECK         : %#x\n",onepos_get_mem_check());
	printf("1. NODE ID           : %d\n",onepos_get_node_id());
	printf("2. NODE MODE         : %s\n",onepos_get_node_mode() ? "Start as OnePos" : "Start as Beacon" );
    44e8:	cd bf       	out	0x3d, r28	; 61
    44ea:	de bf       	out	0x3e, r29	; 62
    44ec:	88 23       	and	r24, r24
    44ee:	19 f0       	breq	.+6      	; 0x44f6 <onepos_configure_interface+0x102>
    44f0:	86 e8       	ldi	r24, 0x86	; 134
    44f2:	92 e2       	ldi	r25, 0x22	; 34
    44f4:	02 c0       	rjmp	.+4      	; 0x44fa <onepos_configure_interface+0x106>
    44f6:	86 e9       	ldi	r24, 0x96	; 150
    44f8:	92 e2       	ldi	r25, 0x22	; 34
    44fa:	9f 93       	push	r25
    44fc:	8f 93       	push	r24
    44fe:	8e e0       	ldi	r24, 0x0E	; 14
    4500:	93 e2       	ldi	r25, 0x23	; 35
    4502:	9f 93       	push	r25
    4504:	8f 93       	push	r24
    4506:	1a d5       	rcall	.+2612   	; 0x4f3c <printf>
	printf("3. NAMESPACE ID      : %s\n",namespaceID);
    4508:	df 92       	push	r13
    450a:	cf 92       	push	r12
    450c:	89 e2       	ldi	r24, 0x29	; 41
    450e:	93 e2       	ldi	r25, 0x23	; 35
    4510:	9f 93       	push	r25
    4512:	8f 93       	push	r24
    4514:	13 d5       	rcall	.+2598   	; 0x4f3c <printf>
	printf("4. BLE SCAN INTERVAL : %s\n",ble_scan_interval);
    4516:	ff 92       	push	r15
    4518:	ef 92       	push	r14
    451a:	84 e4       	ldi	r24, 0x44	; 68
    451c:	93 e2       	ldi	r25, 0x23	; 35
    451e:	9f 93       	push	r25
    4520:	8f 93       	push	r24
    4522:	0c d5       	rcall	.+2584   	; 0x4f3c <printf>
	printf("5. BLE SCAN WINDOW   : %s\n",ble_scan_window);
    4524:	1f 93       	push	r17
    4526:	0f 93       	push	r16
    4528:	8f e5       	ldi	r24, 0x5F	; 95
    452a:	93 e2       	ldi	r25, 0x23	; 35
    452c:	9f 93       	push	r25
    452e:	8f 93       	push	r24
    4530:	05 d5       	rcall	.+2570   	; 0x4f3c <printf>
	strcpy(onepos_config.ble_scan_window,str);
}

uint16_t onepos_get_uwb_rx_antenna_delay(void)
{
	return onepos_config.uwb_rx_antenna_delay;
    4532:	80 91 ec 28 	lds	r24, 0x28EC
    4536:	90 91 ed 28 	lds	r25, 0x28ED
	printf("1. NODE ID           : %d\n",onepos_get_node_id());
	printf("2. NODE MODE         : %s\n",onepos_get_node_mode() ? "Start as OnePos" : "Start as Beacon" );
	printf("3. NAMESPACE ID      : %s\n",namespaceID);
	printf("4. BLE SCAN INTERVAL : %s\n",ble_scan_interval);
	printf("5. BLE SCAN WINDOW   : %s\n",ble_scan_window);
	printf("6. UWB RX ANT DELAY  : %d\n",onepos_get_uwb_rx_antenna_delay());
    453a:	9f 93       	push	r25
    453c:	8f 93       	push	r24
    453e:	8a e7       	ldi	r24, 0x7A	; 122
    4540:	93 e2       	ldi	r25, 0x23	; 35
    4542:	9f 93       	push	r25
    4544:	8f 93       	push	r24
    4546:	fa d4       	rcall	.+2548   	; 0x4f3c <printf>
	onepos_config.uwb_rx_antenna_delay = delay;
}

uint16_t onepos_get_uwb_tx_antenna_delay(void)
{
	return onepos_config.uwb_tx_antenna_delay;
    4548:	80 91 ee 28 	lds	r24, 0x28EE
    454c:	90 91 ef 28 	lds	r25, 0x28EF
	printf("2. NODE MODE         : %s\n",onepos_get_node_mode() ? "Start as OnePos" : "Start as Beacon" );
	printf("3. NAMESPACE ID      : %s\n",namespaceID);
	printf("4. BLE SCAN INTERVAL : %s\n",ble_scan_interval);
	printf("5. BLE SCAN WINDOW   : %s\n",ble_scan_window);
	printf("6. UWB RX ANT DELAY  : %d\n",onepos_get_uwb_rx_antenna_delay());
	printf("7. UWB TX ANT DELAY  : %d\n",onepos_get_uwb_tx_antenna_delay());
    4550:	9f 93       	push	r25
    4552:	8f 93       	push	r24
    4554:	85 e9       	ldi	r24, 0x95	; 149
    4556:	93 e2       	ldi	r25, 0x23	; 35
    4558:	9f 93       	push	r25
    455a:	8f 93       	push	r24
    455c:	ef d4       	rcall	.+2526   	; 0x4f3c <printf>
	printf("0. SAVE AND EXIT\n");
    455e:	80 eb       	ldi	r24, 0xB0	; 176
    4560:	93 e2       	ldi	r25, 0x23	; 35
    4562:	fd d4       	rcall	.+2554   	; 0x4f5e <puts>
	printf("Select a number to change the current configuration: ");
    4564:	81 ec       	ldi	r24, 0xC1	; 193
    4566:	93 e2       	ldi	r25, 0x23	; 35
    4568:	9f 93       	push	r25
    456a:	8f 93       	push	r24
    456c:	e7 d4       	rcall	.+2510   	; 0x4f3c <printf>
	uint16_t new_uwb_tx_antenna_delay = 0;
	
	while(!end_config)
	{
		print_menu1();
		scanf("%d", &selection);
    456e:	bf 92       	push	r11
    4570:	af 92       	push	r10
    4572:	87 ef       	ldi	r24, 0xF7	; 247
    4574:	93 e2       	ldi	r25, 0x23	; 35
    4576:	9f 93       	push	r25
    4578:	8f 93       	push	r24
    457a:	1e d5       	rcall	.+2620   	; 0x4fb8 <scanf>
		
		switch(selection)
    457c:	cd bf       	out	0x3d, r28	; 61
    457e:	de bf       	out	0x3e, r29	; 62
    4580:	89 a1       	ldd	r24, Y+33	; 0x21
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	88 30       	cpi	r24, 0x08	; 8
    4586:	91 05       	cpc	r25, r1
    4588:	08 f0       	brcs	.+2      	; 0x458c <onepos_configure_interface+0x198>
    458a:	c8 c0       	rjmp	.+400    	; 0x471c <onepos_configure_interface+0x328>
    458c:	fc 01       	movw	r30, r24
    458e:	ec 5e       	subi	r30, 0xEC	; 236
    4590:	fe 4f       	sbci	r31, 0xFE	; 254
    4592:	1a c4       	rjmp	.+2100   	; 0x4dc8 <__tablejump2__>
		{
			case 1:
				printf("\nTo change node ID program the user signature memory at address 0x00\n");
    4594:	8a ef       	ldi	r24, 0xFA	; 250
    4596:	93 e2       	ldi	r25, 0x23	; 35
    4598:	e2 d4       	rcall	.+2500   	; 0x4f5e <puts>
    459a:	80 e0       	ldi	r24, 0x00	; 0
    459c:	94 e2       	ldi	r25, 0x24	; 36
    459e:	a4 ef       	ldi	r26, 0xF4	; 244
    45a0:	b4 2d       	mov	r27, r4
    45a2:	01 97       	sbiw	r24, 0x01	; 1
    45a4:	a1 09       	sbc	r26, r1
    45a6:	b1 09       	sbc	r27, r1
    45a8:	00 97       	sbiw	r24, 0x00	; 0
    45aa:	a1 05       	cpc	r26, r1
    45ac:	b1 05       	cpc	r27, r1
    45ae:	c9 f7       	brne	.-14     	; 0x45a2 <onepos_configure_interface+0x1ae>
    45b0:	b1 c0       	rjmp	.+354    	; 0x4714 <onepos_configure_interface+0x320>
				delay_ms(2000);
			break;
			case 2:
				printf("\nWrite 0 to start as Beacon and 1 to start as OnePos: ");
    45b2:	8f e3       	ldi	r24, 0x3F	; 63
    45b4:	94 e2       	ldi	r25, 0x24	; 36
    45b6:	9f 93       	push	r25
    45b8:	8f 93       	push	r24
    45ba:	c0 d4       	rcall	.+2432   	; 0x4f3c <printf>
				scanf("%d",&new_node_mode);
    45bc:	2f 96       	adiw	r28, 0x0f	; 15
    45be:	9f ad       	ldd	r25, Y+63	; 0x3f
    45c0:	2f 97       	sbiw	r28, 0x0f	; 15
    45c2:	9f 93       	push	r25
    45c4:	2e 96       	adiw	r28, 0x0e	; 14
    45c6:	ef ad       	ldd	r30, Y+63	; 0x3f
    45c8:	2e 97       	sbiw	r28, 0x0e	; 14
    45ca:	ef 93       	push	r30
    45cc:	87 ef       	ldi	r24, 0xF7	; 247
    45ce:	93 e2       	ldi	r25, 0x23	; 35
    45d0:	9f 93       	push	r25
    45d2:	8f 93       	push	r24
    45d4:	f1 d4       	rcall	.+2530   	; 0x4fb8 <scanf>
				if ( !(new_node_mode == 0 | new_node_id == 1) )
    45d6:	0f 90       	pop	r0
    45d8:	0f 90       	pop	r0
    45da:	0f 90       	pop	r0
    45dc:	0f 90       	pop	r0
    45de:	0f 90       	pop	r0
    45e0:	0f 90       	pop	r0
    45e2:	88 a1       	ldd	r24, Y+32	; 0x20
    45e4:	88 23       	and	r24, r24
    45e6:	11 f0       	breq	.+4      	; 0x45ec <onepos_configure_interface+0x1f8>
				{
					new_node_mode = 1;
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	88 a3       	std	Y+32, r24	; 0x20
				}
				onepos_set_node_mode(new_node_mode);
    45ec:	88 a1       	ldd	r24, Y+32	; 0x20
	//onepos_config.node_id = node_id;
//}

void onepos_set_node_mode(uint8_t node_mode)
{
	onepos_config.node_mode = node_mode;
    45ee:	80 93 cc 28 	sts	0x28CC, r24
    45f2:	90 c0       	rjmp	.+288    	; 0x4714 <onepos_configure_interface+0x320>
					new_node_mode = 1;
				}
				onepos_set_node_mode(new_node_mode);
			break;
			case 3:
				printf("\nWrite the new namespace ID: ");
    45f4:	86 e7       	ldi	r24, 0x76	; 118
    45f6:	94 e2       	ldi	r25, 0x24	; 36
    45f8:	9f 93       	push	r25
    45fa:	8f 93       	push	r24
    45fc:	9f d4       	rcall	.+2366   	; 0x4f3c <printf>
				scanf("%20s",new_namespaceID);
    45fe:	2d 96       	adiw	r28, 0x0d	; 13
    4600:	ff ad       	ldd	r31, Y+63	; 0x3f
    4602:	2d 97       	sbiw	r28, 0x0d	; 13
    4604:	ff 93       	push	r31
    4606:	2c 96       	adiw	r28, 0x0c	; 12
    4608:	2f ad       	ldd	r18, Y+63	; 0x3f
    460a:	2c 97       	sbiw	r28, 0x0c	; 12
    460c:	2f 93       	push	r18
    460e:	84 e9       	ldi	r24, 0x94	; 148
    4610:	94 e2       	ldi	r25, 0x24	; 36
    4612:	9f 93       	push	r25
    4614:	8f 93       	push	r24
    4616:	d0 d4       	rcall	.+2464   	; 0x4fb8 <scanf>
				onepos_set_namespaceID(new_namespaceID);
    4618:	ce 01       	movw	r24, r28
    461a:	01 96       	adiw	r24, 0x01	; 1
    461c:	dc de       	rcall	.-584    	; 0x43d6 <onepos_set_namespaceID>
			break;
    461e:	0f 90       	pop	r0
    4620:	0f 90       	pop	r0
    4622:	0f 90       	pop	r0
    4624:	0f 90       	pop	r0
    4626:	0f 90       	pop	r0
    4628:	0f 90       	pop	r0
    462a:	74 c0       	rjmp	.+232    	; 0x4714 <onepos_configure_interface+0x320>
			case 4:
				printf("\nWrite the new ble scan interval(16 hex): ");
    462c:	89 e9       	ldi	r24, 0x99	; 153
    462e:	94 e2       	ldi	r25, 0x24	; 36
    4630:	9f 93       	push	r25
    4632:	8f 93       	push	r24
    4634:	83 d4       	rcall	.+2310   	; 0x4f3c <printf>
				scanf("%4s",new_ble_scan_interval);
    4636:	3f 92       	push	r3
    4638:	2f 92       	push	r2
    463a:	84 ec       	ldi	r24, 0xC4	; 196
    463c:	94 e2       	ldi	r25, 0x24	; 36
    463e:	9f 93       	push	r25
    4640:	8f 93       	push	r24
    4642:	ba d4       	rcall	.+2420   	; 0x4fb8 <scanf>
				onepos_set_ble_scan_interval(new_ble_scan_interval);
    4644:	c1 01       	movw	r24, r2
    4646:	cc de       	rcall	.-616    	; 0x43e0 <onepos_set_ble_scan_interval>
			break;
    4648:	0f 90       	pop	r0
    464a:	0f 90       	pop	r0
    464c:	0f 90       	pop	r0
    464e:	0f 90       	pop	r0
    4650:	0f 90       	pop	r0
    4652:	0f 90       	pop	r0
    4654:	5f c0       	rjmp	.+190    	; 0x4714 <onepos_configure_interface+0x320>
			case 5:
				printf("\nWrite the new ble scan window( 16 hex): ");
    4656:	88 ec       	ldi	r24, 0xC8	; 200
    4658:	94 e2       	ldi	r25, 0x24	; 36
    465a:	9f 93       	push	r25
    465c:	8f 93       	push	r24
    465e:	6e d4       	rcall	.+2268   	; 0x4f3c <printf>
				scanf("%4s",new_ble_scan_window);
    4660:	2b 96       	adiw	r28, 0x0b	; 11
    4662:	3f ad       	ldd	r19, Y+63	; 0x3f
    4664:	2b 97       	sbiw	r28, 0x0b	; 11
    4666:	3f 93       	push	r19
    4668:	2a 96       	adiw	r28, 0x0a	; 10
    466a:	8f ad       	ldd	r24, Y+63	; 0x3f
    466c:	2a 97       	sbiw	r28, 0x0a	; 10
    466e:	8f 93       	push	r24
    4670:	84 ec       	ldi	r24, 0xC4	; 196
    4672:	94 e2       	ldi	r25, 0x24	; 36
    4674:	9f 93       	push	r25
    4676:	8f 93       	push	r24
    4678:	9f d4       	rcall	.+2366   	; 0x4fb8 <scanf>
				onepos_set_ble_scan_window(new_ble_scan_window);
    467a:	ce 01       	movw	r24, r28
    467c:	4b 96       	adiw	r24, 0x1b	; 27
    467e:	b5 de       	rcall	.-662    	; 0x43ea <onepos_set_ble_scan_window>
			break;
    4680:	0f 90       	pop	r0
    4682:	0f 90       	pop	r0
    4684:	0f 90       	pop	r0
    4686:	0f 90       	pop	r0
    4688:	0f 90       	pop	r0
    468a:	0f 90       	pop	r0
    468c:	43 c0       	rjmp	.+134    	; 0x4714 <onepos_configure_interface+0x320>
			case 6:
				printf("\nWrite the new uwb rx antenna delay: ");
    468e:	82 ef       	ldi	r24, 0xF2	; 242
    4690:	94 e2       	ldi	r25, 0x24	; 36
    4692:	9f 93       	push	r25
    4694:	8f 93       	push	r24
    4696:	52 d4       	rcall	.+2212   	; 0x4f3c <printf>
				scanf("%ld",&new_uwb_rx_antenna_delay);
    4698:	29 96       	adiw	r28, 0x09	; 9
    469a:	9f ad       	ldd	r25, Y+63	; 0x3f
    469c:	29 97       	sbiw	r28, 0x09	; 9
    469e:	9f 93       	push	r25
    46a0:	28 96       	adiw	r28, 0x08	; 8
    46a2:	ef ad       	ldd	r30, Y+63	; 0x3f
    46a4:	28 97       	sbiw	r28, 0x08	; 8
    46a6:	ef 93       	push	r30
    46a8:	88 e1       	ldi	r24, 0x18	; 24
    46aa:	95 e2       	ldi	r25, 0x25	; 37
    46ac:	9f 93       	push	r25
    46ae:	8f 93       	push	r24
    46b0:	83 d4       	rcall	.+2310   	; 0x4fb8 <scanf>
				onepos_set_uwb_rx_antenna_delay(new_uwb_rx_antenna_delay);
    46b2:	8a a1       	ldd	r24, Y+34	; 0x22
    46b4:	9b a1       	ldd	r25, Y+35	; 0x23
	return onepos_config.uwb_rx_antenna_delay;
}

void onepos_set_uwb_rx_antenna_delay(uint16_t delay)
{
	onepos_config.uwb_rx_antenna_delay = delay;
    46b6:	80 93 ec 28 	sts	0x28EC, r24
    46ba:	90 93 ed 28 	sts	0x28ED, r25
    46be:	0f 90       	pop	r0
    46c0:	0f 90       	pop	r0
    46c2:	0f 90       	pop	r0
    46c4:	0f 90       	pop	r0
    46c6:	0f 90       	pop	r0
    46c8:	0f 90       	pop	r0
    46ca:	24 c0       	rjmp	.+72     	; 0x4714 <onepos_configure_interface+0x320>
				printf("\nWrite the new uwb rx antenna delay: ");
				scanf("%ld",&new_uwb_rx_antenna_delay);
				onepos_set_uwb_rx_antenna_delay(new_uwb_rx_antenna_delay);
			break;
			case 7:
				printf("\nWrite the new uwb tx antenna delay: ");
    46cc:	8c e1       	ldi	r24, 0x1C	; 28
    46ce:	95 e2       	ldi	r25, 0x25	; 37
    46d0:	9f 93       	push	r25
    46d2:	8f 93       	push	r24
    46d4:	33 d4       	rcall	.+2150   	; 0x4f3c <printf>
				scanf("%ld",&new_uwb_tx_antenna_delay);
    46d6:	27 96       	adiw	r28, 0x07	; 7
    46d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    46da:	27 97       	sbiw	r28, 0x07	; 7
    46dc:	ff 93       	push	r31
    46de:	26 96       	adiw	r28, 0x06	; 6
    46e0:	2f ad       	ldd	r18, Y+63	; 0x3f
    46e2:	26 97       	sbiw	r28, 0x06	; 6
    46e4:	2f 93       	push	r18
    46e6:	88 e1       	ldi	r24, 0x18	; 24
    46e8:	95 e2       	ldi	r25, 0x25	; 37
    46ea:	9f 93       	push	r25
    46ec:	8f 93       	push	r24
    46ee:	64 d4       	rcall	.+2248   	; 0x4fb8 <scanf>
				onepos_set_uwb_tx_antenna_delay(new_uwb_tx_antenna_delay);
    46f0:	8c a1       	ldd	r24, Y+36	; 0x24
    46f2:	9d a1       	ldd	r25, Y+37	; 0x25
	return onepos_config.uwb_tx_antenna_delay;
}

void onepos_set_uwb_tx_antenna_delay(uint16_t delay)
{
	onepos_config.uwb_tx_antenna_delay = delay;
    46f4:	80 93 ee 28 	sts	0x28EE, r24
    46f8:	90 93 ef 28 	sts	0x28EF, r25
    46fc:	0f 90       	pop	r0
    46fe:	0f 90       	pop	r0
    4700:	0f 90       	pop	r0
    4702:	0f 90       	pop	r0
    4704:	0f 90       	pop	r0
    4706:	0f 90       	pop	r0
    4708:	05 c0       	rjmp	.+10     	; 0x4714 <onepos_configure_interface+0x320>
				printf("\nWrite the new uwb tx antenna delay: ");
				scanf("%ld",&new_uwb_tx_antenna_delay);
				onepos_set_uwb_tx_antenna_delay(new_uwb_tx_antenna_delay);
			break;
			case 0:
				onepos_save_cfg();
    470a:	ae dd       	rcall	.-1188   	; 0x4268 <onepos_save_cfg>
				printf("\nConfiguration saved. Please restart the system\n");
    470c:	82 e4       	ldi	r24, 0x42	; 66
    470e:	95 e2       	ldi	r25, 0x25	; 37
    4710:	26 d4       	rcall	.+2124   	; 0x4f5e <puts>
    4712:	07 c0       	rjmp	.+14     	; 0x4722 <onepos_configure_interface+0x32e>
	uint8_t end_config = 0;
	uint8_t selection;
	uint16_t new_uwb_rx_antenna_delay = 0;
	uint16_t new_uwb_tx_antenna_delay = 0;
	
	while(!end_config)
    4714:	55 20       	and	r5, r5
    4716:	09 f4       	brne	.+2      	; 0x471a <onepos_configure_interface+0x326>
    4718:	c9 ce       	rjmp	.-622    	; 0x44ac <onepos_configure_interface+0xb8>
    471a:	03 c0       	rjmp	.+6      	; 0x4722 <onepos_configure_interface+0x32e>
    471c:	55 20       	and	r5, r5
    471e:	09 f4       	brne	.+2      	; 0x4722 <onepos_configure_interface+0x32e>
    4720:	c5 ce       	rjmp	.-630    	; 0x44ac <onepos_configure_interface+0xb8>
			break;
		}
	}
	
	
}
    4722:	c2 5b       	subi	r28, 0xB2	; 178
    4724:	df 4f       	sbci	r29, 0xFF	; 255
    4726:	cd bf       	out	0x3d, r28	; 61
    4728:	de bf       	out	0x3e, r29	; 62
    472a:	df 91       	pop	r29
    472c:	cf 91       	pop	r28
    472e:	1f 91       	pop	r17
    4730:	0f 91       	pop	r16
    4732:	ff 90       	pop	r15
    4734:	ef 90       	pop	r14
    4736:	df 90       	pop	r13
    4738:	cf 90       	pop	r12
    473a:	bf 90       	pop	r11
    473c:	af 90       	pop	r10
    473e:	9f 90       	pop	r9
    4740:	8f 90       	pop	r8
    4742:	7f 90       	pop	r7
    4744:	6f 90       	pop	r6
    4746:	5f 90       	pop	r5
    4748:	4f 90       	pop	r4
    474a:	3f 90       	pop	r3
    474c:	2f 90       	pop	r2
    474e:	08 95       	ret

00004750 <usb_putchar_printf>:
	usb_putchar(*string++);
}


#ifdef PRINTF_USB
int usb_putchar_printf(char var, FILE *stream) {
    4750:	cf 93       	push	r28
    4752:	c8 2f       	mov	r28, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
    4754:	8a 30       	cpi	r24, 0x0A	; 10
    4756:	21 f4       	brne	.+8      	; 0x4760 <usb_putchar_printf+0x10>
	
}

void usb_putchar(char a)
{
	udi_cdc_putc(a);
    4758:	8d e0       	ldi	r24, 0x0D	; 13
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	0e 94 ae 04 	call	0x95c	; 0x95c <udi_cdc_putc>
    4760:	8c 2f       	mov	r24, r28
    4762:	99 27       	eor	r25, r25
    4764:	87 fd       	sbrc	r24, 7
    4766:	90 95       	com	r25
    4768:	0e 94 ae 04 	call	0x95c	; 0x95c <udi_cdc_putc>
int usb_putchar_printf(char var, FILE *stream) {
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
	usb_putchar(var);
	return 0;
}
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	cf 91       	pop	r28
    4772:	08 95       	ret

00004774 <usb_getchar_scanf>:

int usb_getchar_scanf(FILE *stream)
{
    4774:	0f 93       	push	r16
    4776:	1f 93       	push	r17
    4778:	cf 93       	push	r28
    477a:	df 93       	push	r29
    477c:	8c 01       	movw	r16, r24
	return udi_cdc_getc();
}

int usb_is_rx_ready(void)
{
	return udi_cdc_is_rx_ready();
    477e:	0e 94 ed 03 	call	0x7da	; 0x7da <udi_cdc_is_rx_ready>

int usb_getchar_scanf(FILE *stream)
{
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
    4782:	88 23       	and	r24, r24
    4784:	e1 f3       	breq	.-8      	; 0x477e <usb_getchar_scanf+0xa>
	udi_cdc_putc(a);
}

char usb_getchar(void)
{
	return udi_cdc_getc();
    4786:	0e 94 39 04 	call	0x872	; 0x872 <udi_cdc_getc>
    478a:	ec 01       	movw	r28, r24
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
	u8Data=usb_getchar();
	//echo input data
	usb_putchar_printf(u8Data,stream);
    478c:	b8 01       	movw	r22, r16
    478e:	e0 df       	rcall	.-64     	; 0x4750 <usb_putchar_printf>
	// Return received data
	return u8Data;
}
    4790:	ce 01       	movw	r24, r28
    4792:	99 27       	eor	r25, r25
    4794:	df 91       	pop	r29
    4796:	cf 91       	pop	r28
    4798:	1f 91       	pop	r17
    479a:	0f 91       	pop	r16
    479c:	08 95       	ret

0000479e <usb_init>:

#include "./../include/usb_serial.h"

void usb_init(void)
{
	irq_initialize_vectors();
    479e:	87 e0       	ldi	r24, 0x07	; 7
    47a0:	e0 ea       	ldi	r30, 0xA0	; 160
    47a2:	f0 e0       	ldi	r31, 0x00	; 0
    47a4:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    47a6:	78 94       	sei
	udc_start();
    47a8:	0e 94 9c 05 	call	0xb38	; 0xb38 <udc_start>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    47ac:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <udd_attach>
	udc_attach();
	
	#ifdef PRINTF_USB
	// setup our stdio stream
	stdout = &mystdout;
    47b0:	85 ef       	ldi	r24, 0xF5	; 245
    47b2:	90 e2       	ldi	r25, 0x20	; 32
    47b4:	80 93 f3 28 	sts	0x28F3, r24
    47b8:	90 93 f4 28 	sts	0x28F4, r25
	stdin = &mystdout;
    47bc:	80 93 f1 28 	sts	0x28F1, r24
    47c0:	90 93 f2 28 	sts	0x28F2, r25
    47c4:	08 95       	ret

000047c6 <main>:
	}
}


int main (void)
{
    47c6:	cf 93       	push	r28
    47c8:	df 93       	push	r29
    47ca:	cd b7       	in	r28, 0x3d	; 61
    47cc:	de b7       	in	r29, 0x3e	; 62
    47ce:	27 97       	sbiw	r28, 0x07	; 7
    47d0:	cd bf       	out	0x3d, r28	; 61
    47d2:	de bf       	out	0x3e, r29	; 62
	init_onepos();
    47d4:	1f db       	rcall	.-2498   	; 0x3e14 <init_onepos>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    47d6:	80 91 07 21 	lds	r24, 0x2107
    47da:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    47dc:	80 91 08 21 	lds	r24, 0x2108
    47e0:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    47e2:	80 91 09 21 	lds	r24, 0x2109
    47e6:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    47e8:	80 91 03 21 	lds	r24, 0x2103
    47ec:	90 91 04 21 	lds	r25, 0x2104
    47f0:	a0 91 05 21 	lds	r26, 0x2105
    47f4:	b0 91 06 21 	lds	r27, 0x2106
    47f8:	89 83       	std	Y+1, r24	; 0x01
    47fa:	9a 83       	std	Y+2, r25	; 0x02
    47fc:	ab 83       	std	Y+3, r26	; 0x03
    47fe:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    4800:	60 e1       	ldi	r22, 0x10	; 16
    4802:	85 e0       	ldi	r24, 0x05	; 5
    4804:	0e 94 b5 12 	call	0x256a	; 0x256a <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    4808:	be 01       	movw	r22, r28
    480a:	6f 5f       	subi	r22, 0xFF	; 255
    480c:	7f 4f       	sbci	r23, 0xFF	; 255
    480e:	80 ea       	ldi	r24, 0xA0	; 160
    4810:	9a e0       	ldi	r25, 0x0A	; 10
    4812:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <usart_init_rs232>
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	usart_serial_init(USART_RS485, &RS485_SERIAL_OPTIONS);
	
	init_animation();
    4816:	47 db       	rcall	.-2418   	; 0x3ea6 <init_animation>
	
	uint8_t ret;
	printf("READ_CFG: %d. MEMCHECK = %x\n",ret,onepos_get_mem_check());
    4818:	30 dd       	rcall	.-1440   	; 0x427a <onepos_get_mem_check>
    481a:	9f 93       	push	r25
    481c:	8f 93       	push	r24
    481e:	1f 92       	push	r1
    4820:	1f 92       	push	r1
    4822:	83 ec       	ldi	r24, 0xC3	; 195
    4824:	95 e2       	ldi	r25, 0x25	; 37
    4826:	9f 93       	push	r25
    4828:	8f 93       	push	r24
    482a:	88 d3       	rcall	.+1808   	; 0x4f3c <printf>
	ret = onepos_read_cfg();
    482c:	b4 dd       	rcall	.-1176   	; 0x4396 <onepos_read_cfg>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    482e:	e0 e4       	ldi	r30, 0x40	; 64
    4830:	f6 e0       	ldi	r31, 0x06	; 6
    4832:	80 85       	ldd	r24, Z+8	; 0x08
	
	if (sw2_status())
    4834:	0f 90       	pop	r0
    4836:	0f 90       	pop	r0
    4838:	0f 90       	pop	r0
    483a:	0f 90       	pop	r0
    483c:	0f 90       	pop	r0
    483e:	0f 90       	pop	r0
    4840:	82 ff       	sbrs	r24, 2
	{
		onepos_configure_interface();
    4842:	d8 dd       	rcall	.-1104   	; 0x43f4 <onepos_configure_interface>
	}
	
	//dwt_show_sys_info();
	
	openspi();
    4844:	2d da       	rcall	.-2982   	; 0x3ca0 <openspi>
	dwt_run_examples();
    4846:	da d9       	rcall	.-3148   	; 0x3bfc <dwt_run_examples>

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    4848:	e0 e0       	ldi	r30, 0x00	; 0
    484a:	f6 e0       	ldi	r31, 0x06	; 6
    484c:	60 e4       	ldi	r22, 0x40	; 64
    484e:	50 e0       	ldi	r21, 0x00	; 0
    4850:	49 e0       	ldi	r20, 0x09	; 9
    4852:	3d e3       	ldi	r19, 0x3D	; 61
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	67 83       	std	Z+7, r22	; 0x07
    4858:	85 2f       	mov	r24, r21
    485a:	94 2f       	mov	r25, r20
    485c:	a3 2f       	mov	r26, r19
    485e:	b2 2f       	mov	r27, r18
    4860:	01 97       	sbiw	r24, 0x01	; 1
    4862:	a1 09       	sbc	r26, r1
    4864:	b1 09       	sbc	r27, r1
    4866:	00 97       	sbiw	r24, 0x00	; 0
    4868:	a1 05       	cpc	r26, r1
    486a:	b1 05       	cpc	r27, r1
    486c:	c9 f7       	brne	.-14     	; 0x4860 <main+0x9a>
    486e:	f3 cf       	rjmp	.-26     	; 0x4856 <main+0x90>

00004870 <__subsf3>:
    4870:	50 58       	subi	r21, 0x80	; 128

00004872 <__addsf3>:
    4872:	bb 27       	eor	r27, r27
    4874:	aa 27       	eor	r26, r26
    4876:	0e d0       	rcall	.+28     	; 0x4894 <__addsf3x>
    4878:	d4 c1       	rjmp	.+936    	; 0x4c22 <__fp_round>
    487a:	c5 d1       	rcall	.+906    	; 0x4c06 <__fp_pscA>
    487c:	30 f0       	brcs	.+12     	; 0x488a <__addsf3+0x18>
    487e:	ca d1       	rcall	.+916    	; 0x4c14 <__fp_pscB>
    4880:	20 f0       	brcs	.+8      	; 0x488a <__addsf3+0x18>
    4882:	31 f4       	brne	.+12     	; 0x4890 <__addsf3+0x1e>
    4884:	9f 3f       	cpi	r25, 0xFF	; 255
    4886:	11 f4       	brne	.+4      	; 0x488c <__addsf3+0x1a>
    4888:	1e f4       	brtc	.+6      	; 0x4890 <__addsf3+0x1e>
    488a:	aa c1       	rjmp	.+852    	; 0x4be0 <__fp_nan>
    488c:	0e f4       	brtc	.+2      	; 0x4890 <__addsf3+0x1e>
    488e:	e0 95       	com	r30
    4890:	e7 fb       	bst	r30, 7
    4892:	a0 c1       	rjmp	.+832    	; 0x4bd4 <__fp_inf>

00004894 <__addsf3x>:
    4894:	e9 2f       	mov	r30, r25
    4896:	d6 d1       	rcall	.+940    	; 0x4c44 <__fp_split3>
    4898:	80 f3       	brcs	.-32     	; 0x487a <__addsf3+0x8>
    489a:	ba 17       	cp	r27, r26
    489c:	62 07       	cpc	r22, r18
    489e:	73 07       	cpc	r23, r19
    48a0:	84 07       	cpc	r24, r20
    48a2:	95 07       	cpc	r25, r21
    48a4:	18 f0       	brcs	.+6      	; 0x48ac <__addsf3x+0x18>
    48a6:	71 f4       	brne	.+28     	; 0x48c4 <__addsf3x+0x30>
    48a8:	9e f5       	brtc	.+102    	; 0x4910 <__addsf3x+0x7c>
    48aa:	ee c1       	rjmp	.+988    	; 0x4c88 <__fp_zero>
    48ac:	0e f4       	brtc	.+2      	; 0x48b0 <__addsf3x+0x1c>
    48ae:	e0 95       	com	r30
    48b0:	0b 2e       	mov	r0, r27
    48b2:	ba 2f       	mov	r27, r26
    48b4:	a0 2d       	mov	r26, r0
    48b6:	0b 01       	movw	r0, r22
    48b8:	b9 01       	movw	r22, r18
    48ba:	90 01       	movw	r18, r0
    48bc:	0c 01       	movw	r0, r24
    48be:	ca 01       	movw	r24, r20
    48c0:	a0 01       	movw	r20, r0
    48c2:	11 24       	eor	r1, r1
    48c4:	ff 27       	eor	r31, r31
    48c6:	59 1b       	sub	r21, r25
    48c8:	99 f0       	breq	.+38     	; 0x48f0 <__addsf3x+0x5c>
    48ca:	59 3f       	cpi	r21, 0xF9	; 249
    48cc:	50 f4       	brcc	.+20     	; 0x48e2 <__addsf3x+0x4e>
    48ce:	50 3e       	cpi	r21, 0xE0	; 224
    48d0:	68 f1       	brcs	.+90     	; 0x492c <__addsf3x+0x98>
    48d2:	1a 16       	cp	r1, r26
    48d4:	f0 40       	sbci	r31, 0x00	; 0
    48d6:	a2 2f       	mov	r26, r18
    48d8:	23 2f       	mov	r18, r19
    48da:	34 2f       	mov	r19, r20
    48dc:	44 27       	eor	r20, r20
    48de:	58 5f       	subi	r21, 0xF8	; 248
    48e0:	f3 cf       	rjmp	.-26     	; 0x48c8 <__addsf3x+0x34>
    48e2:	46 95       	lsr	r20
    48e4:	37 95       	ror	r19
    48e6:	27 95       	ror	r18
    48e8:	a7 95       	ror	r26
    48ea:	f0 40       	sbci	r31, 0x00	; 0
    48ec:	53 95       	inc	r21
    48ee:	c9 f7       	brne	.-14     	; 0x48e2 <__addsf3x+0x4e>
    48f0:	7e f4       	brtc	.+30     	; 0x4910 <__addsf3x+0x7c>
    48f2:	1f 16       	cp	r1, r31
    48f4:	ba 0b       	sbc	r27, r26
    48f6:	62 0b       	sbc	r22, r18
    48f8:	73 0b       	sbc	r23, r19
    48fa:	84 0b       	sbc	r24, r20
    48fc:	ba f0       	brmi	.+46     	; 0x492c <__addsf3x+0x98>
    48fe:	91 50       	subi	r25, 0x01	; 1
    4900:	a1 f0       	breq	.+40     	; 0x492a <__addsf3x+0x96>
    4902:	ff 0f       	add	r31, r31
    4904:	bb 1f       	adc	r27, r27
    4906:	66 1f       	adc	r22, r22
    4908:	77 1f       	adc	r23, r23
    490a:	88 1f       	adc	r24, r24
    490c:	c2 f7       	brpl	.-16     	; 0x48fe <__addsf3x+0x6a>
    490e:	0e c0       	rjmp	.+28     	; 0x492c <__addsf3x+0x98>
    4910:	ba 0f       	add	r27, r26
    4912:	62 1f       	adc	r22, r18
    4914:	73 1f       	adc	r23, r19
    4916:	84 1f       	adc	r24, r20
    4918:	48 f4       	brcc	.+18     	; 0x492c <__addsf3x+0x98>
    491a:	87 95       	ror	r24
    491c:	77 95       	ror	r23
    491e:	67 95       	ror	r22
    4920:	b7 95       	ror	r27
    4922:	f7 95       	ror	r31
    4924:	9e 3f       	cpi	r25, 0xFE	; 254
    4926:	08 f0       	brcs	.+2      	; 0x492a <__addsf3x+0x96>
    4928:	b3 cf       	rjmp	.-154    	; 0x4890 <__addsf3+0x1e>
    492a:	93 95       	inc	r25
    492c:	88 0f       	add	r24, r24
    492e:	08 f0       	brcs	.+2      	; 0x4932 <__addsf3x+0x9e>
    4930:	99 27       	eor	r25, r25
    4932:	ee 0f       	add	r30, r30
    4934:	97 95       	ror	r25
    4936:	87 95       	ror	r24
    4938:	08 95       	ret

0000493a <__divsf3>:
    493a:	0c d0       	rcall	.+24     	; 0x4954 <__divsf3x>
    493c:	72 c1       	rjmp	.+740    	; 0x4c22 <__fp_round>
    493e:	6a d1       	rcall	.+724    	; 0x4c14 <__fp_pscB>
    4940:	40 f0       	brcs	.+16     	; 0x4952 <__divsf3+0x18>
    4942:	61 d1       	rcall	.+706    	; 0x4c06 <__fp_pscA>
    4944:	30 f0       	brcs	.+12     	; 0x4952 <__divsf3+0x18>
    4946:	21 f4       	brne	.+8      	; 0x4950 <__divsf3+0x16>
    4948:	5f 3f       	cpi	r21, 0xFF	; 255
    494a:	19 f0       	breq	.+6      	; 0x4952 <__divsf3+0x18>
    494c:	43 c1       	rjmp	.+646    	; 0x4bd4 <__fp_inf>
    494e:	51 11       	cpse	r21, r1
    4950:	9c c1       	rjmp	.+824    	; 0x4c8a <__fp_szero>
    4952:	46 c1       	rjmp	.+652    	; 0x4be0 <__fp_nan>

00004954 <__divsf3x>:
    4954:	77 d1       	rcall	.+750    	; 0x4c44 <__fp_split3>
    4956:	98 f3       	brcs	.-26     	; 0x493e <__divsf3+0x4>

00004958 <__divsf3_pse>:
    4958:	99 23       	and	r25, r25
    495a:	c9 f3       	breq	.-14     	; 0x494e <__divsf3+0x14>
    495c:	55 23       	and	r21, r21
    495e:	b1 f3       	breq	.-20     	; 0x494c <__divsf3+0x12>
    4960:	95 1b       	sub	r25, r21
    4962:	55 0b       	sbc	r21, r21
    4964:	bb 27       	eor	r27, r27
    4966:	aa 27       	eor	r26, r26
    4968:	62 17       	cp	r22, r18
    496a:	73 07       	cpc	r23, r19
    496c:	84 07       	cpc	r24, r20
    496e:	38 f0       	brcs	.+14     	; 0x497e <__divsf3_pse+0x26>
    4970:	9f 5f       	subi	r25, 0xFF	; 255
    4972:	5f 4f       	sbci	r21, 0xFF	; 255
    4974:	22 0f       	add	r18, r18
    4976:	33 1f       	adc	r19, r19
    4978:	44 1f       	adc	r20, r20
    497a:	aa 1f       	adc	r26, r26
    497c:	a9 f3       	breq	.-22     	; 0x4968 <__divsf3_pse+0x10>
    497e:	33 d0       	rcall	.+102    	; 0x49e6 <__divsf3_pse+0x8e>
    4980:	0e 2e       	mov	r0, r30
    4982:	3a f0       	brmi	.+14     	; 0x4992 <__divsf3_pse+0x3a>
    4984:	e0 e8       	ldi	r30, 0x80	; 128
    4986:	30 d0       	rcall	.+96     	; 0x49e8 <__divsf3_pse+0x90>
    4988:	91 50       	subi	r25, 0x01	; 1
    498a:	50 40       	sbci	r21, 0x00	; 0
    498c:	e6 95       	lsr	r30
    498e:	00 1c       	adc	r0, r0
    4990:	ca f7       	brpl	.-14     	; 0x4984 <__divsf3_pse+0x2c>
    4992:	29 d0       	rcall	.+82     	; 0x49e6 <__divsf3_pse+0x8e>
    4994:	fe 2f       	mov	r31, r30
    4996:	27 d0       	rcall	.+78     	; 0x49e6 <__divsf3_pse+0x8e>
    4998:	66 0f       	add	r22, r22
    499a:	77 1f       	adc	r23, r23
    499c:	88 1f       	adc	r24, r24
    499e:	bb 1f       	adc	r27, r27
    49a0:	26 17       	cp	r18, r22
    49a2:	37 07       	cpc	r19, r23
    49a4:	48 07       	cpc	r20, r24
    49a6:	ab 07       	cpc	r26, r27
    49a8:	b0 e8       	ldi	r27, 0x80	; 128
    49aa:	09 f0       	breq	.+2      	; 0x49ae <__divsf3_pse+0x56>
    49ac:	bb 0b       	sbc	r27, r27
    49ae:	80 2d       	mov	r24, r0
    49b0:	bf 01       	movw	r22, r30
    49b2:	ff 27       	eor	r31, r31
    49b4:	93 58       	subi	r25, 0x83	; 131
    49b6:	5f 4f       	sbci	r21, 0xFF	; 255
    49b8:	2a f0       	brmi	.+10     	; 0x49c4 <__divsf3_pse+0x6c>
    49ba:	9e 3f       	cpi	r25, 0xFE	; 254
    49bc:	51 05       	cpc	r21, r1
    49be:	68 f0       	brcs	.+26     	; 0x49da <__divsf3_pse+0x82>
    49c0:	09 c1       	rjmp	.+530    	; 0x4bd4 <__fp_inf>
    49c2:	63 c1       	rjmp	.+710    	; 0x4c8a <__fp_szero>
    49c4:	5f 3f       	cpi	r21, 0xFF	; 255
    49c6:	ec f3       	brlt	.-6      	; 0x49c2 <__divsf3_pse+0x6a>
    49c8:	98 3e       	cpi	r25, 0xE8	; 232
    49ca:	dc f3       	brlt	.-10     	; 0x49c2 <__divsf3_pse+0x6a>
    49cc:	86 95       	lsr	r24
    49ce:	77 95       	ror	r23
    49d0:	67 95       	ror	r22
    49d2:	b7 95       	ror	r27
    49d4:	f7 95       	ror	r31
    49d6:	9f 5f       	subi	r25, 0xFF	; 255
    49d8:	c9 f7       	brne	.-14     	; 0x49cc <__divsf3_pse+0x74>
    49da:	88 0f       	add	r24, r24
    49dc:	91 1d       	adc	r25, r1
    49de:	96 95       	lsr	r25
    49e0:	87 95       	ror	r24
    49e2:	97 f9       	bld	r25, 7
    49e4:	08 95       	ret
    49e6:	e1 e0       	ldi	r30, 0x01	; 1
    49e8:	66 0f       	add	r22, r22
    49ea:	77 1f       	adc	r23, r23
    49ec:	88 1f       	adc	r24, r24
    49ee:	bb 1f       	adc	r27, r27
    49f0:	62 17       	cp	r22, r18
    49f2:	73 07       	cpc	r23, r19
    49f4:	84 07       	cpc	r24, r20
    49f6:	ba 07       	cpc	r27, r26
    49f8:	20 f0       	brcs	.+8      	; 0x4a02 <__divsf3_pse+0xaa>
    49fa:	62 1b       	sub	r22, r18
    49fc:	73 0b       	sbc	r23, r19
    49fe:	84 0b       	sbc	r24, r20
    4a00:	ba 0b       	sbc	r27, r26
    4a02:	ee 1f       	adc	r30, r30
    4a04:	88 f7       	brcc	.-30     	; 0x49e8 <__divsf3_pse+0x90>
    4a06:	e0 95       	com	r30
    4a08:	08 95       	ret

00004a0a <__fixsfdi>:
    4a0a:	be e3       	ldi	r27, 0x3E	; 62
    4a0c:	04 d0       	rcall	.+8      	; 0x4a16 <__fixunssfdi+0x2>
    4a0e:	08 f4       	brcc	.+2      	; 0x4a12 <__fixsfdi+0x8>
    4a10:	90 e8       	ldi	r25, 0x80	; 128
    4a12:	08 95       	ret

00004a14 <__fixunssfdi>:
    4a14:	bf e3       	ldi	r27, 0x3F	; 63
    4a16:	22 27       	eor	r18, r18
    4a18:	33 27       	eor	r19, r19
    4a1a:	a9 01       	movw	r20, r18
    4a1c:	1b d1       	rcall	.+566    	; 0x4c54 <__fp_splitA>
    4a1e:	58 f1       	brcs	.+86     	; 0x4a76 <__fixunssfdi+0x62>
    4a20:	9f 57       	subi	r25, 0x7F	; 127
    4a22:	40 f1       	brcs	.+80     	; 0x4a74 <__fixunssfdi+0x60>
    4a24:	b9 17       	cp	r27, r25
    4a26:	38 f1       	brcs	.+78     	; 0x4a76 <__fixunssfdi+0x62>
    4a28:	bf e3       	ldi	r27, 0x3F	; 63
    4a2a:	b9 1b       	sub	r27, r25
    4a2c:	99 27       	eor	r25, r25
    4a2e:	b8 50       	subi	r27, 0x08	; 8
    4a30:	3a f4       	brpl	.+14     	; 0x4a40 <__fixunssfdi+0x2c>
    4a32:	66 0f       	add	r22, r22
    4a34:	77 1f       	adc	r23, r23
    4a36:	88 1f       	adc	r24, r24
    4a38:	99 1f       	adc	r25, r25
    4a3a:	b3 95       	inc	r27
    4a3c:	d2 f3       	brmi	.-12     	; 0x4a32 <__fixunssfdi+0x1e>
    4a3e:	16 c0       	rjmp	.+44     	; 0x4a6c <__fixunssfdi+0x58>
    4a40:	b8 50       	subi	r27, 0x08	; 8
    4a42:	4a f0       	brmi	.+18     	; 0x4a56 <__fixunssfdi+0x42>
    4a44:	23 2f       	mov	r18, r19
    4a46:	34 2f       	mov	r19, r20
    4a48:	45 2f       	mov	r20, r21
    4a4a:	56 2f       	mov	r21, r22
    4a4c:	67 2f       	mov	r22, r23
    4a4e:	78 2f       	mov	r23, r24
    4a50:	88 27       	eor	r24, r24
    4a52:	b8 50       	subi	r27, 0x08	; 8
    4a54:	ba f7       	brpl	.-18     	; 0x4a44 <__fixunssfdi+0x30>
    4a56:	b8 5f       	subi	r27, 0xF8	; 248
    4a58:	49 f0       	breq	.+18     	; 0x4a6c <__fixunssfdi+0x58>
    4a5a:	86 95       	lsr	r24
    4a5c:	77 95       	ror	r23
    4a5e:	67 95       	ror	r22
    4a60:	57 95       	ror	r21
    4a62:	47 95       	ror	r20
    4a64:	37 95       	ror	r19
    4a66:	27 95       	ror	r18
    4a68:	ba 95       	dec	r27
    4a6a:	b9 f7       	brne	.-18     	; 0x4a5a <__fixunssfdi+0x46>
    4a6c:	0e f4       	brtc	.+2      	; 0x4a70 <__fixunssfdi+0x5c>
    4a6e:	bb d0       	rcall	.+374    	; 0x4be6 <__fp_negdi>
    4a70:	88 94       	clc
    4a72:	08 95       	ret
    4a74:	88 94       	clc
    4a76:	60 e0       	ldi	r22, 0x00	; 0
    4a78:	70 e0       	ldi	r23, 0x00	; 0
    4a7a:	cb 01       	movw	r24, r22
    4a7c:	08 95       	ret

00004a7e <__fixunssfsi>:
    4a7e:	ea d0       	rcall	.+468    	; 0x4c54 <__fp_splitA>
    4a80:	88 f0       	brcs	.+34     	; 0x4aa4 <__fixunssfsi+0x26>
    4a82:	9f 57       	subi	r25, 0x7F	; 127
    4a84:	90 f0       	brcs	.+36     	; 0x4aaa <__fixunssfsi+0x2c>
    4a86:	b9 2f       	mov	r27, r25
    4a88:	99 27       	eor	r25, r25
    4a8a:	b7 51       	subi	r27, 0x17	; 23
    4a8c:	a0 f0       	brcs	.+40     	; 0x4ab6 <__fixunssfsi+0x38>
    4a8e:	d1 f0       	breq	.+52     	; 0x4ac4 <__fixunssfsi+0x46>
    4a90:	66 0f       	add	r22, r22
    4a92:	77 1f       	adc	r23, r23
    4a94:	88 1f       	adc	r24, r24
    4a96:	99 1f       	adc	r25, r25
    4a98:	1a f0       	brmi	.+6      	; 0x4aa0 <__fixunssfsi+0x22>
    4a9a:	ba 95       	dec	r27
    4a9c:	c9 f7       	brne	.-14     	; 0x4a90 <__fixunssfsi+0x12>
    4a9e:	12 c0       	rjmp	.+36     	; 0x4ac4 <__fixunssfsi+0x46>
    4aa0:	b1 30       	cpi	r27, 0x01	; 1
    4aa2:	81 f0       	breq	.+32     	; 0x4ac4 <__fixunssfsi+0x46>
    4aa4:	f1 d0       	rcall	.+482    	; 0x4c88 <__fp_zero>
    4aa6:	b1 e0       	ldi	r27, 0x01	; 1
    4aa8:	08 95       	ret
    4aaa:	ee c0       	rjmp	.+476    	; 0x4c88 <__fp_zero>
    4aac:	67 2f       	mov	r22, r23
    4aae:	78 2f       	mov	r23, r24
    4ab0:	88 27       	eor	r24, r24
    4ab2:	b8 5f       	subi	r27, 0xF8	; 248
    4ab4:	39 f0       	breq	.+14     	; 0x4ac4 <__fixunssfsi+0x46>
    4ab6:	b9 3f       	cpi	r27, 0xF9	; 249
    4ab8:	cc f3       	brlt	.-14     	; 0x4aac <__fixunssfsi+0x2e>
    4aba:	86 95       	lsr	r24
    4abc:	77 95       	ror	r23
    4abe:	67 95       	ror	r22
    4ac0:	b3 95       	inc	r27
    4ac2:	d9 f7       	brne	.-10     	; 0x4aba <__fixunssfsi+0x3c>
    4ac4:	3e f4       	brtc	.+14     	; 0x4ad4 <__fixunssfsi+0x56>
    4ac6:	90 95       	com	r25
    4ac8:	80 95       	com	r24
    4aca:	70 95       	com	r23
    4acc:	61 95       	neg	r22
    4ace:	7f 4f       	sbci	r23, 0xFF	; 255
    4ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ad4:	08 95       	ret

00004ad6 <__floatdisf>:
    4ad6:	97 fb       	bst	r25, 7
    4ad8:	0e f4       	brtc	.+2      	; 0x4adc <__floatdisf+0x6>
    4ada:	85 d0       	rcall	.+266    	; 0x4be6 <__fp_negdi>
    4adc:	3e c0       	rjmp	.+124    	; 0x4b5a <__fp_di2sf>

00004ade <__floatunsisf>:
    4ade:	e8 94       	clt
    4ae0:	09 c0       	rjmp	.+18     	; 0x4af4 <__floatsisf+0x12>

00004ae2 <__floatsisf>:
    4ae2:	97 fb       	bst	r25, 7
    4ae4:	3e f4       	brtc	.+14     	; 0x4af4 <__floatsisf+0x12>
    4ae6:	90 95       	com	r25
    4ae8:	80 95       	com	r24
    4aea:	70 95       	com	r23
    4aec:	61 95       	neg	r22
    4aee:	7f 4f       	sbci	r23, 0xFF	; 255
    4af0:	8f 4f       	sbci	r24, 0xFF	; 255
    4af2:	9f 4f       	sbci	r25, 0xFF	; 255
    4af4:	99 23       	and	r25, r25
    4af6:	a9 f0       	breq	.+42     	; 0x4b22 <__floatsisf+0x40>
    4af8:	f9 2f       	mov	r31, r25
    4afa:	96 e9       	ldi	r25, 0x96	; 150
    4afc:	bb 27       	eor	r27, r27
    4afe:	93 95       	inc	r25
    4b00:	f6 95       	lsr	r31
    4b02:	87 95       	ror	r24
    4b04:	77 95       	ror	r23
    4b06:	67 95       	ror	r22
    4b08:	b7 95       	ror	r27
    4b0a:	f1 11       	cpse	r31, r1
    4b0c:	f8 cf       	rjmp	.-16     	; 0x4afe <__floatsisf+0x1c>
    4b0e:	fa f4       	brpl	.+62     	; 0x4b4e <__floatsisf+0x6c>
    4b10:	bb 0f       	add	r27, r27
    4b12:	11 f4       	brne	.+4      	; 0x4b18 <__floatsisf+0x36>
    4b14:	60 ff       	sbrs	r22, 0
    4b16:	1b c0       	rjmp	.+54     	; 0x4b4e <__floatsisf+0x6c>
    4b18:	6f 5f       	subi	r22, 0xFF	; 255
    4b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b1c:	8f 4f       	sbci	r24, 0xFF	; 255
    4b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    4b20:	16 c0       	rjmp	.+44     	; 0x4b4e <__floatsisf+0x6c>
    4b22:	88 23       	and	r24, r24
    4b24:	11 f0       	breq	.+4      	; 0x4b2a <__floatsisf+0x48>
    4b26:	96 e9       	ldi	r25, 0x96	; 150
    4b28:	11 c0       	rjmp	.+34     	; 0x4b4c <__floatsisf+0x6a>
    4b2a:	77 23       	and	r23, r23
    4b2c:	21 f0       	breq	.+8      	; 0x4b36 <__floatsisf+0x54>
    4b2e:	9e e8       	ldi	r25, 0x8E	; 142
    4b30:	87 2f       	mov	r24, r23
    4b32:	76 2f       	mov	r23, r22
    4b34:	05 c0       	rjmp	.+10     	; 0x4b40 <__floatsisf+0x5e>
    4b36:	66 23       	and	r22, r22
    4b38:	71 f0       	breq	.+28     	; 0x4b56 <__floatsisf+0x74>
    4b3a:	96 e8       	ldi	r25, 0x86	; 134
    4b3c:	86 2f       	mov	r24, r22
    4b3e:	70 e0       	ldi	r23, 0x00	; 0
    4b40:	60 e0       	ldi	r22, 0x00	; 0
    4b42:	2a f0       	brmi	.+10     	; 0x4b4e <__floatsisf+0x6c>
    4b44:	9a 95       	dec	r25
    4b46:	66 0f       	add	r22, r22
    4b48:	77 1f       	adc	r23, r23
    4b4a:	88 1f       	adc	r24, r24
    4b4c:	da f7       	brpl	.-10     	; 0x4b44 <__floatsisf+0x62>
    4b4e:	88 0f       	add	r24, r24
    4b50:	96 95       	lsr	r25
    4b52:	87 95       	ror	r24
    4b54:	97 f9       	bld	r25, 7
    4b56:	08 95       	ret

00004b58 <__floatundisf>:
    4b58:	e8 94       	clt

00004b5a <__fp_di2sf>:
    4b5a:	f9 2f       	mov	r31, r25
    4b5c:	96 eb       	ldi	r25, 0xB6	; 182
    4b5e:	ff 23       	and	r31, r31
    4b60:	81 f0       	breq	.+32     	; 0x4b82 <__fp_di2sf+0x28>
    4b62:	12 16       	cp	r1, r18
    4b64:	13 06       	cpc	r1, r19
    4b66:	14 06       	cpc	r1, r20
    4b68:	44 0b       	sbc	r20, r20
    4b6a:	93 95       	inc	r25
    4b6c:	f6 95       	lsr	r31
    4b6e:	87 95       	ror	r24
    4b70:	77 95       	ror	r23
    4b72:	67 95       	ror	r22
    4b74:	57 95       	ror	r21
    4b76:	40 40       	sbci	r20, 0x00	; 0
    4b78:	ff 23       	and	r31, r31
    4b7a:	b9 f7       	brne	.-18     	; 0x4b6a <__fp_di2sf+0x10>
    4b7c:	1b c0       	rjmp	.+54     	; 0x4bb4 <__fp_di2sf+0x5a>
    4b7e:	99 27       	eor	r25, r25
    4b80:	08 95       	ret
    4b82:	88 23       	and	r24, r24
    4b84:	51 f4       	brne	.+20     	; 0x4b9a <__fp_di2sf+0x40>
    4b86:	98 50       	subi	r25, 0x08	; 8
    4b88:	d2 f7       	brpl	.-12     	; 0x4b7e <__fp_di2sf+0x24>
    4b8a:	87 2b       	or	r24, r23
    4b8c:	76 2f       	mov	r23, r22
    4b8e:	65 2f       	mov	r22, r21
    4b90:	54 2f       	mov	r21, r20
    4b92:	43 2f       	mov	r20, r19
    4b94:	32 2f       	mov	r19, r18
    4b96:	20 e0       	ldi	r18, 0x00	; 0
    4b98:	b1 f3       	breq	.-20     	; 0x4b86 <__fp_di2sf+0x2c>
    4b9a:	12 16       	cp	r1, r18
    4b9c:	13 06       	cpc	r1, r19
    4b9e:	14 06       	cpc	r1, r20
    4ba0:	44 0b       	sbc	r20, r20
    4ba2:	88 23       	and	r24, r24
    4ba4:	3a f0       	brmi	.+14     	; 0x4bb4 <__fp_di2sf+0x5a>
    4ba6:	9a 95       	dec	r25
    4ba8:	44 0f       	add	r20, r20
    4baa:	55 1f       	adc	r21, r21
    4bac:	66 1f       	adc	r22, r22
    4bae:	77 1f       	adc	r23, r23
    4bb0:	88 1f       	adc	r24, r24
    4bb2:	ca f7       	brpl	.-14     	; 0x4ba6 <__fp_di2sf+0x4c>
    4bb4:	55 23       	and	r21, r21
    4bb6:	4a f4       	brpl	.+18     	; 0x4bca <__fp_di2sf+0x70>
    4bb8:	44 0f       	add	r20, r20
    4bba:	55 1f       	adc	r21, r21
    4bbc:	11 f4       	brne	.+4      	; 0x4bc2 <__fp_di2sf+0x68>
    4bbe:	60 ff       	sbrs	r22, 0
    4bc0:	04 c0       	rjmp	.+8      	; 0x4bca <__fp_di2sf+0x70>
    4bc2:	6f 5f       	subi	r22, 0xFF	; 255
    4bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc6:	8f 4f       	sbci	r24, 0xFF	; 255
    4bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    4bca:	88 0f       	add	r24, r24
    4bcc:	96 95       	lsr	r25
    4bce:	87 95       	ror	r24
    4bd0:	97 f9       	bld	r25, 7
    4bd2:	08 95       	ret

00004bd4 <__fp_inf>:
    4bd4:	97 f9       	bld	r25, 7
    4bd6:	9f 67       	ori	r25, 0x7F	; 127
    4bd8:	80 e8       	ldi	r24, 0x80	; 128
    4bda:	70 e0       	ldi	r23, 0x00	; 0
    4bdc:	60 e0       	ldi	r22, 0x00	; 0
    4bde:	08 95       	ret

00004be0 <__fp_nan>:
    4be0:	9f ef       	ldi	r25, 0xFF	; 255
    4be2:	80 ec       	ldi	r24, 0xC0	; 192
    4be4:	08 95       	ret

00004be6 <__fp_negdi>:
    4be6:	90 95       	com	r25
    4be8:	80 95       	com	r24
    4bea:	70 95       	com	r23
    4bec:	60 95       	com	r22
    4bee:	50 95       	com	r21
    4bf0:	40 95       	com	r20
    4bf2:	30 95       	com	r19
    4bf4:	21 95       	neg	r18
    4bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf8:	4f 4f       	sbci	r20, 0xFF	; 255
    4bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    4bfc:	6f 4f       	sbci	r22, 0xFF	; 255
    4bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    4c00:	8f 4f       	sbci	r24, 0xFF	; 255
    4c02:	9f 4f       	sbci	r25, 0xFF	; 255
    4c04:	08 95       	ret

00004c06 <__fp_pscA>:
    4c06:	00 24       	eor	r0, r0
    4c08:	0a 94       	dec	r0
    4c0a:	16 16       	cp	r1, r22
    4c0c:	17 06       	cpc	r1, r23
    4c0e:	18 06       	cpc	r1, r24
    4c10:	09 06       	cpc	r0, r25
    4c12:	08 95       	ret

00004c14 <__fp_pscB>:
    4c14:	00 24       	eor	r0, r0
    4c16:	0a 94       	dec	r0
    4c18:	12 16       	cp	r1, r18
    4c1a:	13 06       	cpc	r1, r19
    4c1c:	14 06       	cpc	r1, r20
    4c1e:	05 06       	cpc	r0, r21
    4c20:	08 95       	ret

00004c22 <__fp_round>:
    4c22:	09 2e       	mov	r0, r25
    4c24:	03 94       	inc	r0
    4c26:	00 0c       	add	r0, r0
    4c28:	11 f4       	brne	.+4      	; 0x4c2e <__fp_round+0xc>
    4c2a:	88 23       	and	r24, r24
    4c2c:	52 f0       	brmi	.+20     	; 0x4c42 <__fp_round+0x20>
    4c2e:	bb 0f       	add	r27, r27
    4c30:	40 f4       	brcc	.+16     	; 0x4c42 <__fp_round+0x20>
    4c32:	bf 2b       	or	r27, r31
    4c34:	11 f4       	brne	.+4      	; 0x4c3a <__fp_round+0x18>
    4c36:	60 ff       	sbrs	r22, 0
    4c38:	04 c0       	rjmp	.+8      	; 0x4c42 <__fp_round+0x20>
    4c3a:	6f 5f       	subi	r22, 0xFF	; 255
    4c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c3e:	8f 4f       	sbci	r24, 0xFF	; 255
    4c40:	9f 4f       	sbci	r25, 0xFF	; 255
    4c42:	08 95       	ret

00004c44 <__fp_split3>:
    4c44:	57 fd       	sbrc	r21, 7
    4c46:	90 58       	subi	r25, 0x80	; 128
    4c48:	44 0f       	add	r20, r20
    4c4a:	55 1f       	adc	r21, r21
    4c4c:	59 f0       	breq	.+22     	; 0x4c64 <__fp_splitA+0x10>
    4c4e:	5f 3f       	cpi	r21, 0xFF	; 255
    4c50:	71 f0       	breq	.+28     	; 0x4c6e <__fp_splitA+0x1a>
    4c52:	47 95       	ror	r20

00004c54 <__fp_splitA>:
    4c54:	88 0f       	add	r24, r24
    4c56:	97 fb       	bst	r25, 7
    4c58:	99 1f       	adc	r25, r25
    4c5a:	61 f0       	breq	.+24     	; 0x4c74 <__fp_splitA+0x20>
    4c5c:	9f 3f       	cpi	r25, 0xFF	; 255
    4c5e:	79 f0       	breq	.+30     	; 0x4c7e <__fp_splitA+0x2a>
    4c60:	87 95       	ror	r24
    4c62:	08 95       	ret
    4c64:	12 16       	cp	r1, r18
    4c66:	13 06       	cpc	r1, r19
    4c68:	14 06       	cpc	r1, r20
    4c6a:	55 1f       	adc	r21, r21
    4c6c:	f2 cf       	rjmp	.-28     	; 0x4c52 <__fp_split3+0xe>
    4c6e:	46 95       	lsr	r20
    4c70:	f1 df       	rcall	.-30     	; 0x4c54 <__fp_splitA>
    4c72:	08 c0       	rjmp	.+16     	; 0x4c84 <__fp_splitA+0x30>
    4c74:	16 16       	cp	r1, r22
    4c76:	17 06       	cpc	r1, r23
    4c78:	18 06       	cpc	r1, r24
    4c7a:	99 1f       	adc	r25, r25
    4c7c:	f1 cf       	rjmp	.-30     	; 0x4c60 <__fp_splitA+0xc>
    4c7e:	86 95       	lsr	r24
    4c80:	71 05       	cpc	r23, r1
    4c82:	61 05       	cpc	r22, r1
    4c84:	08 94       	sec
    4c86:	08 95       	ret

00004c88 <__fp_zero>:
    4c88:	e8 94       	clt

00004c8a <__fp_szero>:
    4c8a:	bb 27       	eor	r27, r27
    4c8c:	66 27       	eor	r22, r22
    4c8e:	77 27       	eor	r23, r23
    4c90:	cb 01       	movw	r24, r22
    4c92:	97 f9       	bld	r25, 7
    4c94:	08 95       	ret

00004c96 <__mulsf3>:
    4c96:	0b d0       	rcall	.+22     	; 0x4cae <__mulsf3x>
    4c98:	c4 cf       	rjmp	.-120    	; 0x4c22 <__fp_round>
    4c9a:	b5 df       	rcall	.-150    	; 0x4c06 <__fp_pscA>
    4c9c:	28 f0       	brcs	.+10     	; 0x4ca8 <__mulsf3+0x12>
    4c9e:	ba df       	rcall	.-140    	; 0x4c14 <__fp_pscB>
    4ca0:	18 f0       	brcs	.+6      	; 0x4ca8 <__mulsf3+0x12>
    4ca2:	95 23       	and	r25, r21
    4ca4:	09 f0       	breq	.+2      	; 0x4ca8 <__mulsf3+0x12>
    4ca6:	96 cf       	rjmp	.-212    	; 0x4bd4 <__fp_inf>
    4ca8:	9b cf       	rjmp	.-202    	; 0x4be0 <__fp_nan>
    4caa:	11 24       	eor	r1, r1
    4cac:	ee cf       	rjmp	.-36     	; 0x4c8a <__fp_szero>

00004cae <__mulsf3x>:
    4cae:	ca df       	rcall	.-108    	; 0x4c44 <__fp_split3>
    4cb0:	a0 f3       	brcs	.-24     	; 0x4c9a <__mulsf3+0x4>

00004cb2 <__mulsf3_pse>:
    4cb2:	95 9f       	mul	r25, r21
    4cb4:	d1 f3       	breq	.-12     	; 0x4caa <__mulsf3+0x14>
    4cb6:	95 0f       	add	r25, r21
    4cb8:	50 e0       	ldi	r21, 0x00	; 0
    4cba:	55 1f       	adc	r21, r21
    4cbc:	62 9f       	mul	r22, r18
    4cbe:	f0 01       	movw	r30, r0
    4cc0:	72 9f       	mul	r23, r18
    4cc2:	bb 27       	eor	r27, r27
    4cc4:	f0 0d       	add	r31, r0
    4cc6:	b1 1d       	adc	r27, r1
    4cc8:	63 9f       	mul	r22, r19
    4cca:	aa 27       	eor	r26, r26
    4ccc:	f0 0d       	add	r31, r0
    4cce:	b1 1d       	adc	r27, r1
    4cd0:	aa 1f       	adc	r26, r26
    4cd2:	64 9f       	mul	r22, r20
    4cd4:	66 27       	eor	r22, r22
    4cd6:	b0 0d       	add	r27, r0
    4cd8:	a1 1d       	adc	r26, r1
    4cda:	66 1f       	adc	r22, r22
    4cdc:	82 9f       	mul	r24, r18
    4cde:	22 27       	eor	r18, r18
    4ce0:	b0 0d       	add	r27, r0
    4ce2:	a1 1d       	adc	r26, r1
    4ce4:	62 1f       	adc	r22, r18
    4ce6:	73 9f       	mul	r23, r19
    4ce8:	b0 0d       	add	r27, r0
    4cea:	a1 1d       	adc	r26, r1
    4cec:	62 1f       	adc	r22, r18
    4cee:	83 9f       	mul	r24, r19
    4cf0:	a0 0d       	add	r26, r0
    4cf2:	61 1d       	adc	r22, r1
    4cf4:	22 1f       	adc	r18, r18
    4cf6:	74 9f       	mul	r23, r20
    4cf8:	33 27       	eor	r19, r19
    4cfa:	a0 0d       	add	r26, r0
    4cfc:	61 1d       	adc	r22, r1
    4cfe:	23 1f       	adc	r18, r19
    4d00:	84 9f       	mul	r24, r20
    4d02:	60 0d       	add	r22, r0
    4d04:	21 1d       	adc	r18, r1
    4d06:	82 2f       	mov	r24, r18
    4d08:	76 2f       	mov	r23, r22
    4d0a:	6a 2f       	mov	r22, r26
    4d0c:	11 24       	eor	r1, r1
    4d0e:	9f 57       	subi	r25, 0x7F	; 127
    4d10:	50 40       	sbci	r21, 0x00	; 0
    4d12:	8a f0       	brmi	.+34     	; 0x4d36 <__mulsf3_pse+0x84>
    4d14:	e1 f0       	breq	.+56     	; 0x4d4e <__mulsf3_pse+0x9c>
    4d16:	88 23       	and	r24, r24
    4d18:	4a f0       	brmi	.+18     	; 0x4d2c <__mulsf3_pse+0x7a>
    4d1a:	ee 0f       	add	r30, r30
    4d1c:	ff 1f       	adc	r31, r31
    4d1e:	bb 1f       	adc	r27, r27
    4d20:	66 1f       	adc	r22, r22
    4d22:	77 1f       	adc	r23, r23
    4d24:	88 1f       	adc	r24, r24
    4d26:	91 50       	subi	r25, 0x01	; 1
    4d28:	50 40       	sbci	r21, 0x00	; 0
    4d2a:	a9 f7       	brne	.-22     	; 0x4d16 <__mulsf3_pse+0x64>
    4d2c:	9e 3f       	cpi	r25, 0xFE	; 254
    4d2e:	51 05       	cpc	r21, r1
    4d30:	70 f0       	brcs	.+28     	; 0x4d4e <__mulsf3_pse+0x9c>
    4d32:	50 cf       	rjmp	.-352    	; 0x4bd4 <__fp_inf>
    4d34:	aa cf       	rjmp	.-172    	; 0x4c8a <__fp_szero>
    4d36:	5f 3f       	cpi	r21, 0xFF	; 255
    4d38:	ec f3       	brlt	.-6      	; 0x4d34 <__mulsf3_pse+0x82>
    4d3a:	98 3e       	cpi	r25, 0xE8	; 232
    4d3c:	dc f3       	brlt	.-10     	; 0x4d34 <__mulsf3_pse+0x82>
    4d3e:	86 95       	lsr	r24
    4d40:	77 95       	ror	r23
    4d42:	67 95       	ror	r22
    4d44:	b7 95       	ror	r27
    4d46:	f7 95       	ror	r31
    4d48:	e7 95       	ror	r30
    4d4a:	9f 5f       	subi	r25, 0xFF	; 255
    4d4c:	c1 f7       	brne	.-16     	; 0x4d3e <__mulsf3_pse+0x8c>
    4d4e:	fe 2b       	or	r31, r30
    4d50:	88 0f       	add	r24, r24
    4d52:	91 1d       	adc	r25, r1
    4d54:	96 95       	lsr	r25
    4d56:	87 95       	ror	r24
    4d58:	97 f9       	bld	r25, 7
    4d5a:	08 95       	ret

00004d5c <__udivmodhi4>:
    4d5c:	aa 1b       	sub	r26, r26
    4d5e:	bb 1b       	sub	r27, r27
    4d60:	51 e1       	ldi	r21, 0x11	; 17
    4d62:	07 c0       	rjmp	.+14     	; 0x4d72 <__udivmodhi4_ep>

00004d64 <__udivmodhi4_loop>:
    4d64:	aa 1f       	adc	r26, r26
    4d66:	bb 1f       	adc	r27, r27
    4d68:	a6 17       	cp	r26, r22
    4d6a:	b7 07       	cpc	r27, r23
    4d6c:	10 f0       	brcs	.+4      	; 0x4d72 <__udivmodhi4_ep>
    4d6e:	a6 1b       	sub	r26, r22
    4d70:	b7 0b       	sbc	r27, r23

00004d72 <__udivmodhi4_ep>:
    4d72:	88 1f       	adc	r24, r24
    4d74:	99 1f       	adc	r25, r25
    4d76:	5a 95       	dec	r21
    4d78:	a9 f7       	brne	.-22     	; 0x4d64 <__udivmodhi4_loop>
    4d7a:	80 95       	com	r24
    4d7c:	90 95       	com	r25
    4d7e:	bc 01       	movw	r22, r24
    4d80:	cd 01       	movw	r24, r26
    4d82:	08 95       	ret

00004d84 <__udivmodsi4>:
    4d84:	a1 e2       	ldi	r26, 0x21	; 33
    4d86:	1a 2e       	mov	r1, r26
    4d88:	aa 1b       	sub	r26, r26
    4d8a:	bb 1b       	sub	r27, r27
    4d8c:	fd 01       	movw	r30, r26
    4d8e:	0d c0       	rjmp	.+26     	; 0x4daa <__udivmodsi4_ep>

00004d90 <__udivmodsi4_loop>:
    4d90:	aa 1f       	adc	r26, r26
    4d92:	bb 1f       	adc	r27, r27
    4d94:	ee 1f       	adc	r30, r30
    4d96:	ff 1f       	adc	r31, r31
    4d98:	a2 17       	cp	r26, r18
    4d9a:	b3 07       	cpc	r27, r19
    4d9c:	e4 07       	cpc	r30, r20
    4d9e:	f5 07       	cpc	r31, r21
    4da0:	20 f0       	brcs	.+8      	; 0x4daa <__udivmodsi4_ep>
    4da2:	a2 1b       	sub	r26, r18
    4da4:	b3 0b       	sbc	r27, r19
    4da6:	e4 0b       	sbc	r30, r20
    4da8:	f5 0b       	sbc	r31, r21

00004daa <__udivmodsi4_ep>:
    4daa:	66 1f       	adc	r22, r22
    4dac:	77 1f       	adc	r23, r23
    4dae:	88 1f       	adc	r24, r24
    4db0:	99 1f       	adc	r25, r25
    4db2:	1a 94       	dec	r1
    4db4:	69 f7       	brne	.-38     	; 0x4d90 <__udivmodsi4_loop>
    4db6:	60 95       	com	r22
    4db8:	70 95       	com	r23
    4dba:	80 95       	com	r24
    4dbc:	90 95       	com	r25
    4dbe:	9b 01       	movw	r18, r22
    4dc0:	ac 01       	movw	r20, r24
    4dc2:	bd 01       	movw	r22, r26
    4dc4:	cf 01       	movw	r24, r30
    4dc6:	08 95       	ret

00004dc8 <__tablejump2__>:
    4dc8:	ee 0f       	add	r30, r30
    4dca:	ff 1f       	adc	r31, r31

00004dcc <__tablejump__>:
    4dcc:	05 90       	lpm	r0, Z+
    4dce:	f4 91       	lpm	r31, Z
    4dd0:	e0 2d       	mov	r30, r0
    4dd2:	09 94       	ijmp

00004dd4 <__muldi3>:
    4dd4:	df 93       	push	r29
    4dd6:	cf 93       	push	r28
    4dd8:	1f 93       	push	r17
    4dda:	0f 93       	push	r16
    4ddc:	9a 9d       	mul	r25, r10
    4dde:	f0 2d       	mov	r31, r0
    4de0:	21 9f       	mul	r18, r17
    4de2:	f0 0d       	add	r31, r0
    4de4:	8b 9d       	mul	r24, r11
    4de6:	f0 0d       	add	r31, r0
    4de8:	8a 9d       	mul	r24, r10
    4dea:	e0 2d       	mov	r30, r0
    4dec:	f1 0d       	add	r31, r1
    4dee:	03 9f       	mul	r16, r19
    4df0:	f0 0d       	add	r31, r0
    4df2:	02 9f       	mul	r16, r18
    4df4:	e0 0d       	add	r30, r0
    4df6:	f1 1d       	adc	r31, r1
    4df8:	4e 9d       	mul	r20, r14
    4dfa:	e0 0d       	add	r30, r0
    4dfc:	f1 1d       	adc	r31, r1
    4dfe:	5e 9d       	mul	r21, r14
    4e00:	f0 0d       	add	r31, r0
    4e02:	4f 9d       	mul	r20, r15
    4e04:	f0 0d       	add	r31, r0
    4e06:	7f 93       	push	r23
    4e08:	6f 93       	push	r22
    4e0a:	bf 92       	push	r11
    4e0c:	af 92       	push	r10
    4e0e:	5f 93       	push	r21
    4e10:	4f 93       	push	r20
    4e12:	d5 01       	movw	r26, r10
    4e14:	67 d0       	rcall	.+206    	; 0x4ee4 <__umulhisi3>
    4e16:	8b 01       	movw	r16, r22
    4e18:	ac 01       	movw	r20, r24
    4e1a:	d7 01       	movw	r26, r14
    4e1c:	63 d0       	rcall	.+198    	; 0x4ee4 <__umulhisi3>
    4e1e:	eb 01       	movw	r28, r22
    4e20:	e8 0f       	add	r30, r24
    4e22:	f9 1f       	adc	r31, r25
    4e24:	d6 01       	movw	r26, r12
    4e26:	1f d0       	rcall	.+62     	; 0x4e66 <__muldi3_6>
    4e28:	2f 91       	pop	r18
    4e2a:	3f 91       	pop	r19
    4e2c:	d6 01       	movw	r26, r12
    4e2e:	5a d0       	rcall	.+180    	; 0x4ee4 <__umulhisi3>
    4e30:	c6 0f       	add	r28, r22
    4e32:	d7 1f       	adc	r29, r23
    4e34:	e8 1f       	adc	r30, r24
    4e36:	f9 1f       	adc	r31, r25
    4e38:	af 91       	pop	r26
    4e3a:	bf 91       	pop	r27
    4e3c:	14 d0       	rcall	.+40     	; 0x4e66 <__muldi3_6>
    4e3e:	2f 91       	pop	r18
    4e40:	3f 91       	pop	r19
    4e42:	50 d0       	rcall	.+160    	; 0x4ee4 <__umulhisi3>
    4e44:	c6 0f       	add	r28, r22
    4e46:	d7 1f       	adc	r29, r23
    4e48:	e8 1f       	adc	r30, r24
    4e4a:	f9 1f       	adc	r31, r25
    4e4c:	d6 01       	movw	r26, r12
    4e4e:	4a d0       	rcall	.+148    	; 0x4ee4 <__umulhisi3>
    4e50:	e6 0f       	add	r30, r22
    4e52:	f7 1f       	adc	r31, r23
    4e54:	98 01       	movw	r18, r16
    4e56:	be 01       	movw	r22, r28
    4e58:	cf 01       	movw	r24, r30
    4e5a:	11 24       	eor	r1, r1
    4e5c:	0f 91       	pop	r16
    4e5e:	1f 91       	pop	r17
    4e60:	cf 91       	pop	r28
    4e62:	df 91       	pop	r29
    4e64:	08 95       	ret

00004e66 <__muldi3_6>:
    4e66:	3e d0       	rcall	.+124    	; 0x4ee4 <__umulhisi3>
    4e68:	46 0f       	add	r20, r22
    4e6a:	57 1f       	adc	r21, r23
    4e6c:	c8 1f       	adc	r28, r24
    4e6e:	d9 1f       	adc	r29, r25
    4e70:	08 f4       	brcc	.+2      	; 0x4e74 <__muldi3_6+0xe>
    4e72:	31 96       	adiw	r30, 0x01	; 1
    4e74:	08 95       	ret

00004e76 <__ashldi3>:
    4e76:	0f 93       	push	r16
    4e78:	08 30       	cpi	r16, 0x08	; 8
    4e7a:	90 f0       	brcs	.+36     	; 0x4ea0 <__ashldi3+0x2a>
    4e7c:	98 2f       	mov	r25, r24
    4e7e:	87 2f       	mov	r24, r23
    4e80:	76 2f       	mov	r23, r22
    4e82:	65 2f       	mov	r22, r21
    4e84:	54 2f       	mov	r21, r20
    4e86:	43 2f       	mov	r20, r19
    4e88:	32 2f       	mov	r19, r18
    4e8a:	22 27       	eor	r18, r18
    4e8c:	08 50       	subi	r16, 0x08	; 8
    4e8e:	f4 cf       	rjmp	.-24     	; 0x4e78 <__ashldi3+0x2>
    4e90:	22 0f       	add	r18, r18
    4e92:	33 1f       	adc	r19, r19
    4e94:	44 1f       	adc	r20, r20
    4e96:	55 1f       	adc	r21, r21
    4e98:	66 1f       	adc	r22, r22
    4e9a:	77 1f       	adc	r23, r23
    4e9c:	88 1f       	adc	r24, r24
    4e9e:	99 1f       	adc	r25, r25
    4ea0:	0a 95       	dec	r16
    4ea2:	b2 f7       	brpl	.-20     	; 0x4e90 <__ashldi3+0x1a>
    4ea4:	0f 91       	pop	r16
    4ea6:	08 95       	ret

00004ea8 <__ashrdi3>:
    4ea8:	97 fb       	bst	r25, 7
    4eaa:	10 f8       	bld	r1, 0

00004eac <__lshrdi3>:
    4eac:	16 94       	lsr	r1
    4eae:	00 08       	sbc	r0, r0
    4eb0:	0f 93       	push	r16
    4eb2:	08 30       	cpi	r16, 0x08	; 8
    4eb4:	98 f0       	brcs	.+38     	; 0x4edc <__lshrdi3+0x30>
    4eb6:	08 50       	subi	r16, 0x08	; 8
    4eb8:	23 2f       	mov	r18, r19
    4eba:	34 2f       	mov	r19, r20
    4ebc:	45 2f       	mov	r20, r21
    4ebe:	56 2f       	mov	r21, r22
    4ec0:	67 2f       	mov	r22, r23
    4ec2:	78 2f       	mov	r23, r24
    4ec4:	89 2f       	mov	r24, r25
    4ec6:	90 2d       	mov	r25, r0
    4ec8:	f4 cf       	rjmp	.-24     	; 0x4eb2 <__lshrdi3+0x6>
    4eca:	05 94       	asr	r0
    4ecc:	97 95       	ror	r25
    4ece:	87 95       	ror	r24
    4ed0:	77 95       	ror	r23
    4ed2:	67 95       	ror	r22
    4ed4:	57 95       	ror	r21
    4ed6:	47 95       	ror	r20
    4ed8:	37 95       	ror	r19
    4eda:	27 95       	ror	r18
    4edc:	0a 95       	dec	r16
    4ede:	aa f7       	brpl	.-22     	; 0x4eca <__lshrdi3+0x1e>
    4ee0:	0f 91       	pop	r16
    4ee2:	08 95       	ret

00004ee4 <__umulhisi3>:
    4ee4:	a2 9f       	mul	r26, r18
    4ee6:	b0 01       	movw	r22, r0
    4ee8:	b3 9f       	mul	r27, r19
    4eea:	c0 01       	movw	r24, r0
    4eec:	a3 9f       	mul	r26, r19
    4eee:	70 0d       	add	r23, r0
    4ef0:	81 1d       	adc	r24, r1
    4ef2:	11 24       	eor	r1, r1
    4ef4:	91 1d       	adc	r25, r1
    4ef6:	b2 9f       	mul	r27, r18
    4ef8:	70 0d       	add	r23, r0
    4efa:	81 1d       	adc	r24, r1
    4efc:	11 24       	eor	r1, r1
    4efe:	91 1d       	adc	r25, r1
    4f00:	08 95       	ret

00004f02 <memcmp>:
    4f02:	fb 01       	movw	r30, r22
    4f04:	dc 01       	movw	r26, r24
    4f06:	04 c0       	rjmp	.+8      	; 0x4f10 <memcmp+0xe>
    4f08:	8d 91       	ld	r24, X+
    4f0a:	01 90       	ld	r0, Z+
    4f0c:	80 19       	sub	r24, r0
    4f0e:	21 f4       	brne	.+8      	; 0x4f18 <memcmp+0x16>
    4f10:	41 50       	subi	r20, 0x01	; 1
    4f12:	50 40       	sbci	r21, 0x00	; 0
    4f14:	c8 f7       	brcc	.-14     	; 0x4f08 <memcmp+0x6>
    4f16:	88 1b       	sub	r24, r24
    4f18:	99 0b       	sbc	r25, r25
    4f1a:	08 95       	ret

00004f1c <memcpy>:
    4f1c:	fb 01       	movw	r30, r22
    4f1e:	dc 01       	movw	r26, r24
    4f20:	02 c0       	rjmp	.+4      	; 0x4f26 <memcpy+0xa>
    4f22:	01 90       	ld	r0, Z+
    4f24:	0d 92       	st	X+, r0
    4f26:	41 50       	subi	r20, 0x01	; 1
    4f28:	50 40       	sbci	r21, 0x00	; 0
    4f2a:	d8 f7       	brcc	.-10     	; 0x4f22 <memcpy+0x6>
    4f2c:	08 95       	ret

00004f2e <strcpy>:
    4f2e:	fb 01       	movw	r30, r22
    4f30:	dc 01       	movw	r26, r24
    4f32:	01 90       	ld	r0, Z+
    4f34:	0d 92       	st	X+, r0
    4f36:	00 20       	and	r0, r0
    4f38:	e1 f7       	brne	.-8      	; 0x4f32 <strcpy+0x4>
    4f3a:	08 95       	ret

00004f3c <printf>:
    4f3c:	a0 e0       	ldi	r26, 0x00	; 0
    4f3e:	b0 e0       	ldi	r27, 0x00	; 0
    4f40:	e3 ea       	ldi	r30, 0xA3	; 163
    4f42:	f7 e2       	ldi	r31, 0x27	; 39
    4f44:	c8 c5       	rjmp	.+2960   	; 0x5ad6 <__prologue_saves__+0x20>
    4f46:	fe 01       	movw	r30, r28
    4f48:	35 96       	adiw	r30, 0x05	; 5
    4f4a:	61 91       	ld	r22, Z+
    4f4c:	71 91       	ld	r23, Z+
    4f4e:	af 01       	movw	r20, r30
    4f50:	80 91 f3 28 	lds	r24, 0x28F3
    4f54:	90 91 f4 28 	lds	r25, 0x28F4
    4f58:	40 d0       	rcall	.+128    	; 0x4fda <vfprintf>
    4f5a:	e2 e0       	ldi	r30, 0x02	; 2
    4f5c:	d5 c5       	rjmp	.+2986   	; 0x5b08 <__epilogue_restores__+0x20>

00004f5e <puts>:
    4f5e:	0f 93       	push	r16
    4f60:	1f 93       	push	r17
    4f62:	cf 93       	push	r28
    4f64:	df 93       	push	r29
    4f66:	e0 91 f3 28 	lds	r30, 0x28F3
    4f6a:	f0 91 f4 28 	lds	r31, 0x28F4
    4f6e:	23 81       	ldd	r18, Z+3	; 0x03
    4f70:	21 ff       	sbrs	r18, 1
    4f72:	1b c0       	rjmp	.+54     	; 0x4faa <puts+0x4c>
    4f74:	ec 01       	movw	r28, r24
    4f76:	00 e0       	ldi	r16, 0x00	; 0
    4f78:	10 e0       	ldi	r17, 0x00	; 0
    4f7a:	89 91       	ld	r24, Y+
    4f7c:	60 91 f3 28 	lds	r22, 0x28F3
    4f80:	70 91 f4 28 	lds	r23, 0x28F4
    4f84:	db 01       	movw	r26, r22
    4f86:	18 96       	adiw	r26, 0x08	; 8
    4f88:	ed 91       	ld	r30, X+
    4f8a:	fc 91       	ld	r31, X
    4f8c:	19 97       	sbiw	r26, 0x09	; 9
    4f8e:	88 23       	and	r24, r24
    4f90:	31 f0       	breq	.+12     	; 0x4f9e <puts+0x40>
    4f92:	09 95       	icall
    4f94:	89 2b       	or	r24, r25
    4f96:	89 f3       	breq	.-30     	; 0x4f7a <puts+0x1c>
    4f98:	0f ef       	ldi	r16, 0xFF	; 255
    4f9a:	1f ef       	ldi	r17, 0xFF	; 255
    4f9c:	ee cf       	rjmp	.-36     	; 0x4f7a <puts+0x1c>
    4f9e:	8a e0       	ldi	r24, 0x0A	; 10
    4fa0:	09 95       	icall
    4fa2:	89 2b       	or	r24, r25
    4fa4:	11 f4       	brne	.+4      	; 0x4faa <puts+0x4c>
    4fa6:	c8 01       	movw	r24, r16
    4fa8:	02 c0       	rjmp	.+4      	; 0x4fae <puts+0x50>
    4faa:	8f ef       	ldi	r24, 0xFF	; 255
    4fac:	9f ef       	ldi	r25, 0xFF	; 255
    4fae:	df 91       	pop	r29
    4fb0:	cf 91       	pop	r28
    4fb2:	1f 91       	pop	r17
    4fb4:	0f 91       	pop	r16
    4fb6:	08 95       	ret

00004fb8 <scanf>:
    4fb8:	a0 e0       	ldi	r26, 0x00	; 0
    4fba:	b0 e0       	ldi	r27, 0x00	; 0
    4fbc:	e1 ee       	ldi	r30, 0xE1	; 225
    4fbe:	f7 e2       	ldi	r31, 0x27	; 39
    4fc0:	8a c5       	rjmp	.+2836   	; 0x5ad6 <__prologue_saves__+0x20>
    4fc2:	fe 01       	movw	r30, r28
    4fc4:	35 96       	adiw	r30, 0x05	; 5
    4fc6:	61 91       	ld	r22, Z+
    4fc8:	71 91       	ld	r23, Z+
    4fca:	af 01       	movw	r20, r30
    4fcc:	80 91 f1 28 	lds	r24, 0x28F1
    4fd0:	90 91 f2 28 	lds	r25, 0x28F2
    4fd4:	34 d3       	rcall	.+1640   	; 0x563e <vfscanf>
    4fd6:	e2 e0       	ldi	r30, 0x02	; 2
    4fd8:	97 c5       	rjmp	.+2862   	; 0x5b08 <__epilogue_restores__+0x20>

00004fda <vfprintf>:
    4fda:	ac e0       	ldi	r26, 0x0C	; 12
    4fdc:	b0 e0       	ldi	r27, 0x00	; 0
    4fde:	e2 ef       	ldi	r30, 0xF2	; 242
    4fe0:	f7 e2       	ldi	r31, 0x27	; 39
    4fe2:	69 c5       	rjmp	.+2770   	; 0x5ab6 <__prologue_saves__>
    4fe4:	7c 01       	movw	r14, r24
    4fe6:	6b 01       	movw	r12, r22
    4fe8:	8a 01       	movw	r16, r20
    4fea:	fc 01       	movw	r30, r24
    4fec:	16 82       	std	Z+6, r1	; 0x06
    4fee:	17 82       	std	Z+7, r1	; 0x07
    4ff0:	83 81       	ldd	r24, Z+3	; 0x03
    4ff2:	81 ff       	sbrs	r24, 1
    4ff4:	b0 c1       	rjmp	.+864    	; 0x5356 <vfprintf+0x37c>
    4ff6:	ce 01       	movw	r24, r28
    4ff8:	01 96       	adiw	r24, 0x01	; 1
    4ffa:	4c 01       	movw	r8, r24
    4ffc:	f7 01       	movw	r30, r14
    4ffe:	93 81       	ldd	r25, Z+3	; 0x03
    5000:	f6 01       	movw	r30, r12
    5002:	93 fd       	sbrc	r25, 3
    5004:	85 91       	lpm	r24, Z+
    5006:	93 ff       	sbrs	r25, 3
    5008:	81 91       	ld	r24, Z+
    500a:	6f 01       	movw	r12, r30
    500c:	88 23       	and	r24, r24
    500e:	09 f4       	brne	.+2      	; 0x5012 <vfprintf+0x38>
    5010:	9e c1       	rjmp	.+828    	; 0x534e <vfprintf+0x374>
    5012:	85 32       	cpi	r24, 0x25	; 37
    5014:	39 f4       	brne	.+14     	; 0x5024 <vfprintf+0x4a>
    5016:	93 fd       	sbrc	r25, 3
    5018:	85 91       	lpm	r24, Z+
    501a:	93 ff       	sbrs	r25, 3
    501c:	81 91       	ld	r24, Z+
    501e:	6f 01       	movw	r12, r30
    5020:	85 32       	cpi	r24, 0x25	; 37
    5022:	21 f4       	brne	.+8      	; 0x502c <vfprintf+0x52>
    5024:	b7 01       	movw	r22, r14
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	9a d4       	rcall	.+2356   	; 0x595e <fputc>
    502a:	e8 cf       	rjmp	.-48     	; 0x4ffc <vfprintf+0x22>
    502c:	51 2c       	mov	r5, r1
    502e:	31 2c       	mov	r3, r1
    5030:	20 e0       	ldi	r18, 0x00	; 0
    5032:	20 32       	cpi	r18, 0x20	; 32
    5034:	a0 f4       	brcc	.+40     	; 0x505e <vfprintf+0x84>
    5036:	8b 32       	cpi	r24, 0x2B	; 43
    5038:	69 f0       	breq	.+26     	; 0x5054 <vfprintf+0x7a>
    503a:	30 f4       	brcc	.+12     	; 0x5048 <vfprintf+0x6e>
    503c:	80 32       	cpi	r24, 0x20	; 32
    503e:	59 f0       	breq	.+22     	; 0x5056 <vfprintf+0x7c>
    5040:	83 32       	cpi	r24, 0x23	; 35
    5042:	69 f4       	brne	.+26     	; 0x505e <vfprintf+0x84>
    5044:	20 61       	ori	r18, 0x10	; 16
    5046:	2c c0       	rjmp	.+88     	; 0x50a0 <vfprintf+0xc6>
    5048:	8d 32       	cpi	r24, 0x2D	; 45
    504a:	39 f0       	breq	.+14     	; 0x505a <vfprintf+0x80>
    504c:	80 33       	cpi	r24, 0x30	; 48
    504e:	39 f4       	brne	.+14     	; 0x505e <vfprintf+0x84>
    5050:	21 60       	ori	r18, 0x01	; 1
    5052:	26 c0       	rjmp	.+76     	; 0x50a0 <vfprintf+0xc6>
    5054:	22 60       	ori	r18, 0x02	; 2
    5056:	24 60       	ori	r18, 0x04	; 4
    5058:	23 c0       	rjmp	.+70     	; 0x50a0 <vfprintf+0xc6>
    505a:	28 60       	ori	r18, 0x08	; 8
    505c:	21 c0       	rjmp	.+66     	; 0x50a0 <vfprintf+0xc6>
    505e:	27 fd       	sbrc	r18, 7
    5060:	27 c0       	rjmp	.+78     	; 0x50b0 <vfprintf+0xd6>
    5062:	30 ed       	ldi	r19, 0xD0	; 208
    5064:	38 0f       	add	r19, r24
    5066:	3a 30       	cpi	r19, 0x0A	; 10
    5068:	78 f4       	brcc	.+30     	; 0x5088 <vfprintf+0xae>
    506a:	26 ff       	sbrs	r18, 6
    506c:	06 c0       	rjmp	.+12     	; 0x507a <vfprintf+0xa0>
    506e:	fa e0       	ldi	r31, 0x0A	; 10
    5070:	5f 9e       	mul	r5, r31
    5072:	30 0d       	add	r19, r0
    5074:	11 24       	eor	r1, r1
    5076:	53 2e       	mov	r5, r19
    5078:	13 c0       	rjmp	.+38     	; 0x50a0 <vfprintf+0xc6>
    507a:	8a e0       	ldi	r24, 0x0A	; 10
    507c:	38 9e       	mul	r3, r24
    507e:	30 0d       	add	r19, r0
    5080:	11 24       	eor	r1, r1
    5082:	33 2e       	mov	r3, r19
    5084:	20 62       	ori	r18, 0x20	; 32
    5086:	0c c0       	rjmp	.+24     	; 0x50a0 <vfprintf+0xc6>
    5088:	8e 32       	cpi	r24, 0x2E	; 46
    508a:	21 f4       	brne	.+8      	; 0x5094 <vfprintf+0xba>
    508c:	26 fd       	sbrc	r18, 6
    508e:	5f c1       	rjmp	.+702    	; 0x534e <vfprintf+0x374>
    5090:	20 64       	ori	r18, 0x40	; 64
    5092:	06 c0       	rjmp	.+12     	; 0x50a0 <vfprintf+0xc6>
    5094:	8c 36       	cpi	r24, 0x6C	; 108
    5096:	11 f4       	brne	.+4      	; 0x509c <vfprintf+0xc2>
    5098:	20 68       	ori	r18, 0x80	; 128
    509a:	02 c0       	rjmp	.+4      	; 0x50a0 <vfprintf+0xc6>
    509c:	88 36       	cpi	r24, 0x68	; 104
    509e:	41 f4       	brne	.+16     	; 0x50b0 <vfprintf+0xd6>
    50a0:	f6 01       	movw	r30, r12
    50a2:	93 fd       	sbrc	r25, 3
    50a4:	85 91       	lpm	r24, Z+
    50a6:	93 ff       	sbrs	r25, 3
    50a8:	81 91       	ld	r24, Z+
    50aa:	6f 01       	movw	r12, r30
    50ac:	81 11       	cpse	r24, r1
    50ae:	c1 cf       	rjmp	.-126    	; 0x5032 <vfprintf+0x58>
    50b0:	98 2f       	mov	r25, r24
    50b2:	9f 7d       	andi	r25, 0xDF	; 223
    50b4:	95 54       	subi	r25, 0x45	; 69
    50b6:	93 30       	cpi	r25, 0x03	; 3
    50b8:	28 f4       	brcc	.+10     	; 0x50c4 <vfprintf+0xea>
    50ba:	0c 5f       	subi	r16, 0xFC	; 252
    50bc:	1f 4f       	sbci	r17, 0xFF	; 255
    50be:	ff e3       	ldi	r31, 0x3F	; 63
    50c0:	f9 83       	std	Y+1, r31	; 0x01
    50c2:	0d c0       	rjmp	.+26     	; 0x50de <vfprintf+0x104>
    50c4:	83 36       	cpi	r24, 0x63	; 99
    50c6:	31 f0       	breq	.+12     	; 0x50d4 <vfprintf+0xfa>
    50c8:	83 37       	cpi	r24, 0x73	; 115
    50ca:	71 f0       	breq	.+28     	; 0x50e8 <vfprintf+0x10e>
    50cc:	83 35       	cpi	r24, 0x53	; 83
    50ce:	09 f0       	breq	.+2      	; 0x50d2 <vfprintf+0xf8>
    50d0:	57 c0       	rjmp	.+174    	; 0x5180 <vfprintf+0x1a6>
    50d2:	21 c0       	rjmp	.+66     	; 0x5116 <vfprintf+0x13c>
    50d4:	f8 01       	movw	r30, r16
    50d6:	80 81       	ld	r24, Z
    50d8:	89 83       	std	Y+1, r24	; 0x01
    50da:	0e 5f       	subi	r16, 0xFE	; 254
    50dc:	1f 4f       	sbci	r17, 0xFF	; 255
    50de:	44 24       	eor	r4, r4
    50e0:	43 94       	inc	r4
    50e2:	51 2c       	mov	r5, r1
    50e4:	54 01       	movw	r10, r8
    50e6:	14 c0       	rjmp	.+40     	; 0x5110 <vfprintf+0x136>
    50e8:	38 01       	movw	r6, r16
    50ea:	f2 e0       	ldi	r31, 0x02	; 2
    50ec:	6f 0e       	add	r6, r31
    50ee:	71 1c       	adc	r7, r1
    50f0:	f8 01       	movw	r30, r16
    50f2:	a0 80       	ld	r10, Z
    50f4:	b1 80       	ldd	r11, Z+1	; 0x01
    50f6:	26 ff       	sbrs	r18, 6
    50f8:	03 c0       	rjmp	.+6      	; 0x5100 <vfprintf+0x126>
    50fa:	65 2d       	mov	r22, r5
    50fc:	70 e0       	ldi	r23, 0x00	; 0
    50fe:	02 c0       	rjmp	.+4      	; 0x5104 <vfprintf+0x12a>
    5100:	6f ef       	ldi	r22, 0xFF	; 255
    5102:	7f ef       	ldi	r23, 0xFF	; 255
    5104:	c5 01       	movw	r24, r10
    5106:	2c 87       	std	Y+12, r18	; 0x0c
    5108:	e1 d3       	rcall	.+1986   	; 0x58cc <strnlen>
    510a:	2c 01       	movw	r4, r24
    510c:	83 01       	movw	r16, r6
    510e:	2c 85       	ldd	r18, Y+12	; 0x0c
    5110:	2f 77       	andi	r18, 0x7F	; 127
    5112:	22 2e       	mov	r2, r18
    5114:	16 c0       	rjmp	.+44     	; 0x5142 <vfprintf+0x168>
    5116:	38 01       	movw	r6, r16
    5118:	f2 e0       	ldi	r31, 0x02	; 2
    511a:	6f 0e       	add	r6, r31
    511c:	71 1c       	adc	r7, r1
    511e:	f8 01       	movw	r30, r16
    5120:	a0 80       	ld	r10, Z
    5122:	b1 80       	ldd	r11, Z+1	; 0x01
    5124:	26 ff       	sbrs	r18, 6
    5126:	03 c0       	rjmp	.+6      	; 0x512e <vfprintf+0x154>
    5128:	65 2d       	mov	r22, r5
    512a:	70 e0       	ldi	r23, 0x00	; 0
    512c:	02 c0       	rjmp	.+4      	; 0x5132 <vfprintf+0x158>
    512e:	6f ef       	ldi	r22, 0xFF	; 255
    5130:	7f ef       	ldi	r23, 0xFF	; 255
    5132:	c5 01       	movw	r24, r10
    5134:	2c 87       	std	Y+12, r18	; 0x0c
    5136:	bf d3       	rcall	.+1918   	; 0x58b6 <strnlen_P>
    5138:	2c 01       	movw	r4, r24
    513a:	2c 85       	ldd	r18, Y+12	; 0x0c
    513c:	20 68       	ori	r18, 0x80	; 128
    513e:	22 2e       	mov	r2, r18
    5140:	83 01       	movw	r16, r6
    5142:	23 fc       	sbrc	r2, 3
    5144:	19 c0       	rjmp	.+50     	; 0x5178 <vfprintf+0x19e>
    5146:	83 2d       	mov	r24, r3
    5148:	90 e0       	ldi	r25, 0x00	; 0
    514a:	48 16       	cp	r4, r24
    514c:	59 06       	cpc	r5, r25
    514e:	a0 f4       	brcc	.+40     	; 0x5178 <vfprintf+0x19e>
    5150:	b7 01       	movw	r22, r14
    5152:	80 e2       	ldi	r24, 0x20	; 32
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	03 d4       	rcall	.+2054   	; 0x595e <fputc>
    5158:	3a 94       	dec	r3
    515a:	f5 cf       	rjmp	.-22     	; 0x5146 <vfprintf+0x16c>
    515c:	f5 01       	movw	r30, r10
    515e:	27 fc       	sbrc	r2, 7
    5160:	85 91       	lpm	r24, Z+
    5162:	27 fe       	sbrs	r2, 7
    5164:	81 91       	ld	r24, Z+
    5166:	5f 01       	movw	r10, r30
    5168:	b7 01       	movw	r22, r14
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	f8 d3       	rcall	.+2032   	; 0x595e <fputc>
    516e:	31 10       	cpse	r3, r1
    5170:	3a 94       	dec	r3
    5172:	f1 e0       	ldi	r31, 0x01	; 1
    5174:	4f 1a       	sub	r4, r31
    5176:	51 08       	sbc	r5, r1
    5178:	41 14       	cp	r4, r1
    517a:	51 04       	cpc	r5, r1
    517c:	79 f7       	brne	.-34     	; 0x515c <vfprintf+0x182>
    517e:	de c0       	rjmp	.+444    	; 0x533c <vfprintf+0x362>
    5180:	84 36       	cpi	r24, 0x64	; 100
    5182:	11 f0       	breq	.+4      	; 0x5188 <vfprintf+0x1ae>
    5184:	89 36       	cpi	r24, 0x69	; 105
    5186:	31 f5       	brne	.+76     	; 0x51d4 <vfprintf+0x1fa>
    5188:	f8 01       	movw	r30, r16
    518a:	27 ff       	sbrs	r18, 7
    518c:	07 c0       	rjmp	.+14     	; 0x519c <vfprintf+0x1c2>
    518e:	60 81       	ld	r22, Z
    5190:	71 81       	ldd	r23, Z+1	; 0x01
    5192:	82 81       	ldd	r24, Z+2	; 0x02
    5194:	93 81       	ldd	r25, Z+3	; 0x03
    5196:	0c 5f       	subi	r16, 0xFC	; 252
    5198:	1f 4f       	sbci	r17, 0xFF	; 255
    519a:	08 c0       	rjmp	.+16     	; 0x51ac <vfprintf+0x1d2>
    519c:	60 81       	ld	r22, Z
    519e:	71 81       	ldd	r23, Z+1	; 0x01
    51a0:	88 27       	eor	r24, r24
    51a2:	77 fd       	sbrc	r23, 7
    51a4:	80 95       	com	r24
    51a6:	98 2f       	mov	r25, r24
    51a8:	0e 5f       	subi	r16, 0xFE	; 254
    51aa:	1f 4f       	sbci	r17, 0xFF	; 255
    51ac:	2f 76       	andi	r18, 0x6F	; 111
    51ae:	b2 2e       	mov	r11, r18
    51b0:	97 ff       	sbrs	r25, 7
    51b2:	09 c0       	rjmp	.+18     	; 0x51c6 <vfprintf+0x1ec>
    51b4:	90 95       	com	r25
    51b6:	80 95       	com	r24
    51b8:	70 95       	com	r23
    51ba:	61 95       	neg	r22
    51bc:	7f 4f       	sbci	r23, 0xFF	; 255
    51be:	8f 4f       	sbci	r24, 0xFF	; 255
    51c0:	9f 4f       	sbci	r25, 0xFF	; 255
    51c2:	20 68       	ori	r18, 0x80	; 128
    51c4:	b2 2e       	mov	r11, r18
    51c6:	2a e0       	ldi	r18, 0x0A	; 10
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	a4 01       	movw	r20, r8
    51cc:	13 d4       	rcall	.+2086   	; 0x59f4 <__ultoa_invert>
    51ce:	a8 2e       	mov	r10, r24
    51d0:	a8 18       	sub	r10, r8
    51d2:	43 c0       	rjmp	.+134    	; 0x525a <vfprintf+0x280>
    51d4:	85 37       	cpi	r24, 0x75	; 117
    51d6:	29 f4       	brne	.+10     	; 0x51e2 <vfprintf+0x208>
    51d8:	2f 7e       	andi	r18, 0xEF	; 239
    51da:	b2 2e       	mov	r11, r18
    51dc:	2a e0       	ldi	r18, 0x0A	; 10
    51de:	30 e0       	ldi	r19, 0x00	; 0
    51e0:	25 c0       	rjmp	.+74     	; 0x522c <vfprintf+0x252>
    51e2:	f2 2f       	mov	r31, r18
    51e4:	f9 7f       	andi	r31, 0xF9	; 249
    51e6:	bf 2e       	mov	r11, r31
    51e8:	8f 36       	cpi	r24, 0x6F	; 111
    51ea:	c1 f0       	breq	.+48     	; 0x521c <vfprintf+0x242>
    51ec:	18 f4       	brcc	.+6      	; 0x51f4 <vfprintf+0x21a>
    51ee:	88 35       	cpi	r24, 0x58	; 88
    51f0:	79 f0       	breq	.+30     	; 0x5210 <vfprintf+0x236>
    51f2:	ad c0       	rjmp	.+346    	; 0x534e <vfprintf+0x374>
    51f4:	80 37       	cpi	r24, 0x70	; 112
    51f6:	19 f0       	breq	.+6      	; 0x51fe <vfprintf+0x224>
    51f8:	88 37       	cpi	r24, 0x78	; 120
    51fa:	21 f0       	breq	.+8      	; 0x5204 <vfprintf+0x22a>
    51fc:	a8 c0       	rjmp	.+336    	; 0x534e <vfprintf+0x374>
    51fe:	2f 2f       	mov	r18, r31
    5200:	20 61       	ori	r18, 0x10	; 16
    5202:	b2 2e       	mov	r11, r18
    5204:	b4 fe       	sbrs	r11, 4
    5206:	0d c0       	rjmp	.+26     	; 0x5222 <vfprintf+0x248>
    5208:	8b 2d       	mov	r24, r11
    520a:	84 60       	ori	r24, 0x04	; 4
    520c:	b8 2e       	mov	r11, r24
    520e:	09 c0       	rjmp	.+18     	; 0x5222 <vfprintf+0x248>
    5210:	24 ff       	sbrs	r18, 4
    5212:	0a c0       	rjmp	.+20     	; 0x5228 <vfprintf+0x24e>
    5214:	9f 2f       	mov	r25, r31
    5216:	96 60       	ori	r25, 0x06	; 6
    5218:	b9 2e       	mov	r11, r25
    521a:	06 c0       	rjmp	.+12     	; 0x5228 <vfprintf+0x24e>
    521c:	28 e0       	ldi	r18, 0x08	; 8
    521e:	30 e0       	ldi	r19, 0x00	; 0
    5220:	05 c0       	rjmp	.+10     	; 0x522c <vfprintf+0x252>
    5222:	20 e1       	ldi	r18, 0x10	; 16
    5224:	30 e0       	ldi	r19, 0x00	; 0
    5226:	02 c0       	rjmp	.+4      	; 0x522c <vfprintf+0x252>
    5228:	20 e1       	ldi	r18, 0x10	; 16
    522a:	32 e0       	ldi	r19, 0x02	; 2
    522c:	f8 01       	movw	r30, r16
    522e:	b7 fe       	sbrs	r11, 7
    5230:	07 c0       	rjmp	.+14     	; 0x5240 <vfprintf+0x266>
    5232:	60 81       	ld	r22, Z
    5234:	71 81       	ldd	r23, Z+1	; 0x01
    5236:	82 81       	ldd	r24, Z+2	; 0x02
    5238:	93 81       	ldd	r25, Z+3	; 0x03
    523a:	0c 5f       	subi	r16, 0xFC	; 252
    523c:	1f 4f       	sbci	r17, 0xFF	; 255
    523e:	06 c0       	rjmp	.+12     	; 0x524c <vfprintf+0x272>
    5240:	60 81       	ld	r22, Z
    5242:	71 81       	ldd	r23, Z+1	; 0x01
    5244:	80 e0       	ldi	r24, 0x00	; 0
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	0e 5f       	subi	r16, 0xFE	; 254
    524a:	1f 4f       	sbci	r17, 0xFF	; 255
    524c:	a4 01       	movw	r20, r8
    524e:	d2 d3       	rcall	.+1956   	; 0x59f4 <__ultoa_invert>
    5250:	a8 2e       	mov	r10, r24
    5252:	a8 18       	sub	r10, r8
    5254:	fb 2d       	mov	r31, r11
    5256:	ff 77       	andi	r31, 0x7F	; 127
    5258:	bf 2e       	mov	r11, r31
    525a:	b6 fe       	sbrs	r11, 6
    525c:	0b c0       	rjmp	.+22     	; 0x5274 <vfprintf+0x29a>
    525e:	2b 2d       	mov	r18, r11
    5260:	2e 7f       	andi	r18, 0xFE	; 254
    5262:	a5 14       	cp	r10, r5
    5264:	50 f4       	brcc	.+20     	; 0x527a <vfprintf+0x2a0>
    5266:	b4 fe       	sbrs	r11, 4
    5268:	0a c0       	rjmp	.+20     	; 0x527e <vfprintf+0x2a4>
    526a:	b2 fc       	sbrc	r11, 2
    526c:	08 c0       	rjmp	.+16     	; 0x527e <vfprintf+0x2a4>
    526e:	2b 2d       	mov	r18, r11
    5270:	2e 7e       	andi	r18, 0xEE	; 238
    5272:	05 c0       	rjmp	.+10     	; 0x527e <vfprintf+0x2a4>
    5274:	7a 2c       	mov	r7, r10
    5276:	2b 2d       	mov	r18, r11
    5278:	03 c0       	rjmp	.+6      	; 0x5280 <vfprintf+0x2a6>
    527a:	7a 2c       	mov	r7, r10
    527c:	01 c0       	rjmp	.+2      	; 0x5280 <vfprintf+0x2a6>
    527e:	75 2c       	mov	r7, r5
    5280:	24 ff       	sbrs	r18, 4
    5282:	0d c0       	rjmp	.+26     	; 0x529e <vfprintf+0x2c4>
    5284:	fe 01       	movw	r30, r28
    5286:	ea 0d       	add	r30, r10
    5288:	f1 1d       	adc	r31, r1
    528a:	80 81       	ld	r24, Z
    528c:	80 33       	cpi	r24, 0x30	; 48
    528e:	11 f4       	brne	.+4      	; 0x5294 <vfprintf+0x2ba>
    5290:	29 7e       	andi	r18, 0xE9	; 233
    5292:	09 c0       	rjmp	.+18     	; 0x52a6 <vfprintf+0x2cc>
    5294:	22 ff       	sbrs	r18, 2
    5296:	06 c0       	rjmp	.+12     	; 0x52a4 <vfprintf+0x2ca>
    5298:	73 94       	inc	r7
    529a:	73 94       	inc	r7
    529c:	04 c0       	rjmp	.+8      	; 0x52a6 <vfprintf+0x2cc>
    529e:	82 2f       	mov	r24, r18
    52a0:	86 78       	andi	r24, 0x86	; 134
    52a2:	09 f0       	breq	.+2      	; 0x52a6 <vfprintf+0x2cc>
    52a4:	73 94       	inc	r7
    52a6:	23 fd       	sbrc	r18, 3
    52a8:	12 c0       	rjmp	.+36     	; 0x52ce <vfprintf+0x2f4>
    52aa:	20 ff       	sbrs	r18, 0
    52ac:	06 c0       	rjmp	.+12     	; 0x52ba <vfprintf+0x2e0>
    52ae:	5a 2c       	mov	r5, r10
    52b0:	73 14       	cp	r7, r3
    52b2:	18 f4       	brcc	.+6      	; 0x52ba <vfprintf+0x2e0>
    52b4:	53 0c       	add	r5, r3
    52b6:	57 18       	sub	r5, r7
    52b8:	73 2c       	mov	r7, r3
    52ba:	73 14       	cp	r7, r3
    52bc:	60 f4       	brcc	.+24     	; 0x52d6 <vfprintf+0x2fc>
    52be:	b7 01       	movw	r22, r14
    52c0:	80 e2       	ldi	r24, 0x20	; 32
    52c2:	90 e0       	ldi	r25, 0x00	; 0
    52c4:	2c 87       	std	Y+12, r18	; 0x0c
    52c6:	4b d3       	rcall	.+1686   	; 0x595e <fputc>
    52c8:	73 94       	inc	r7
    52ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    52cc:	f6 cf       	rjmp	.-20     	; 0x52ba <vfprintf+0x2e0>
    52ce:	73 14       	cp	r7, r3
    52d0:	10 f4       	brcc	.+4      	; 0x52d6 <vfprintf+0x2fc>
    52d2:	37 18       	sub	r3, r7
    52d4:	01 c0       	rjmp	.+2      	; 0x52d8 <vfprintf+0x2fe>
    52d6:	31 2c       	mov	r3, r1
    52d8:	24 ff       	sbrs	r18, 4
    52da:	11 c0       	rjmp	.+34     	; 0x52fe <vfprintf+0x324>
    52dc:	b7 01       	movw	r22, r14
    52de:	80 e3       	ldi	r24, 0x30	; 48
    52e0:	90 e0       	ldi	r25, 0x00	; 0
    52e2:	2c 87       	std	Y+12, r18	; 0x0c
    52e4:	3c d3       	rcall	.+1656   	; 0x595e <fputc>
    52e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    52e8:	22 ff       	sbrs	r18, 2
    52ea:	16 c0       	rjmp	.+44     	; 0x5318 <vfprintf+0x33e>
    52ec:	21 ff       	sbrs	r18, 1
    52ee:	03 c0       	rjmp	.+6      	; 0x52f6 <vfprintf+0x31c>
    52f0:	88 e5       	ldi	r24, 0x58	; 88
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	02 c0       	rjmp	.+4      	; 0x52fa <vfprintf+0x320>
    52f6:	88 e7       	ldi	r24, 0x78	; 120
    52f8:	90 e0       	ldi	r25, 0x00	; 0
    52fa:	b7 01       	movw	r22, r14
    52fc:	0c c0       	rjmp	.+24     	; 0x5316 <vfprintf+0x33c>
    52fe:	82 2f       	mov	r24, r18
    5300:	86 78       	andi	r24, 0x86	; 134
    5302:	51 f0       	breq	.+20     	; 0x5318 <vfprintf+0x33e>
    5304:	21 fd       	sbrc	r18, 1
    5306:	02 c0       	rjmp	.+4      	; 0x530c <vfprintf+0x332>
    5308:	80 e2       	ldi	r24, 0x20	; 32
    530a:	01 c0       	rjmp	.+2      	; 0x530e <vfprintf+0x334>
    530c:	8b e2       	ldi	r24, 0x2B	; 43
    530e:	27 fd       	sbrc	r18, 7
    5310:	8d e2       	ldi	r24, 0x2D	; 45
    5312:	b7 01       	movw	r22, r14
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	23 d3       	rcall	.+1606   	; 0x595e <fputc>
    5318:	a5 14       	cp	r10, r5
    531a:	30 f4       	brcc	.+12     	; 0x5328 <vfprintf+0x34e>
    531c:	b7 01       	movw	r22, r14
    531e:	80 e3       	ldi	r24, 0x30	; 48
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	1d d3       	rcall	.+1594   	; 0x595e <fputc>
    5324:	5a 94       	dec	r5
    5326:	f8 cf       	rjmp	.-16     	; 0x5318 <vfprintf+0x33e>
    5328:	aa 94       	dec	r10
    532a:	f4 01       	movw	r30, r8
    532c:	ea 0d       	add	r30, r10
    532e:	f1 1d       	adc	r31, r1
    5330:	80 81       	ld	r24, Z
    5332:	b7 01       	movw	r22, r14
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	13 d3       	rcall	.+1574   	; 0x595e <fputc>
    5338:	a1 10       	cpse	r10, r1
    533a:	f6 cf       	rjmp	.-20     	; 0x5328 <vfprintf+0x34e>
    533c:	33 20       	and	r3, r3
    533e:	09 f4       	brne	.+2      	; 0x5342 <vfprintf+0x368>
    5340:	5d ce       	rjmp	.-838    	; 0x4ffc <vfprintf+0x22>
    5342:	b7 01       	movw	r22, r14
    5344:	80 e2       	ldi	r24, 0x20	; 32
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	0a d3       	rcall	.+1556   	; 0x595e <fputc>
    534a:	3a 94       	dec	r3
    534c:	f7 cf       	rjmp	.-18     	; 0x533c <vfprintf+0x362>
    534e:	f7 01       	movw	r30, r14
    5350:	86 81       	ldd	r24, Z+6	; 0x06
    5352:	97 81       	ldd	r25, Z+7	; 0x07
    5354:	02 c0       	rjmp	.+4      	; 0x535a <vfprintf+0x380>
    5356:	8f ef       	ldi	r24, 0xFF	; 255
    5358:	9f ef       	ldi	r25, 0xFF	; 255
    535a:	2c 96       	adiw	r28, 0x0c	; 12
    535c:	e2 e1       	ldi	r30, 0x12	; 18
    535e:	c4 c3       	rjmp	.+1928   	; 0x5ae8 <__epilogue_restores__>

00005360 <putval>:
    5360:	20 fd       	sbrc	r18, 0
    5362:	09 c0       	rjmp	.+18     	; 0x5376 <putval+0x16>
    5364:	fc 01       	movw	r30, r24
    5366:	23 fd       	sbrc	r18, 3
    5368:	05 c0       	rjmp	.+10     	; 0x5374 <putval+0x14>
    536a:	22 ff       	sbrs	r18, 2
    536c:	02 c0       	rjmp	.+4      	; 0x5372 <putval+0x12>
    536e:	73 83       	std	Z+3, r23	; 0x03
    5370:	62 83       	std	Z+2, r22	; 0x02
    5372:	51 83       	std	Z+1, r21	; 0x01
    5374:	40 83       	st	Z, r20
    5376:	08 95       	ret

00005378 <mulacc>:
    5378:	44 fd       	sbrc	r20, 4
    537a:	10 c0       	rjmp	.+32     	; 0x539c <mulacc+0x24>
    537c:	46 fd       	sbrc	r20, 6
    537e:	10 c0       	rjmp	.+32     	; 0x53a0 <mulacc+0x28>
    5380:	db 01       	movw	r26, r22
    5382:	fc 01       	movw	r30, r24
    5384:	aa 0f       	add	r26, r26
    5386:	bb 1f       	adc	r27, r27
    5388:	ee 1f       	adc	r30, r30
    538a:	ff 1f       	adc	r31, r31
    538c:	10 94       	com	r1
    538e:	d1 f7       	brne	.-12     	; 0x5384 <mulacc+0xc>
    5390:	6a 0f       	add	r22, r26
    5392:	7b 1f       	adc	r23, r27
    5394:	8e 1f       	adc	r24, r30
    5396:	9f 1f       	adc	r25, r31
    5398:	31 e0       	ldi	r19, 0x01	; 1
    539a:	03 c0       	rjmp	.+6      	; 0x53a2 <mulacc+0x2a>
    539c:	33 e0       	ldi	r19, 0x03	; 3
    539e:	01 c0       	rjmp	.+2      	; 0x53a2 <mulacc+0x2a>
    53a0:	34 e0       	ldi	r19, 0x04	; 4
    53a2:	66 0f       	add	r22, r22
    53a4:	77 1f       	adc	r23, r23
    53a6:	88 1f       	adc	r24, r24
    53a8:	99 1f       	adc	r25, r25
    53aa:	31 50       	subi	r19, 0x01	; 1
    53ac:	d1 f7       	brne	.-12     	; 0x53a2 <mulacc+0x2a>
    53ae:	62 0f       	add	r22, r18
    53b0:	71 1d       	adc	r23, r1
    53b2:	81 1d       	adc	r24, r1
    53b4:	91 1d       	adc	r25, r1
    53b6:	08 95       	ret

000053b8 <skip_spaces>:
    53b8:	0f 93       	push	r16
    53ba:	1f 93       	push	r17
    53bc:	cf 93       	push	r28
    53be:	df 93       	push	r29
    53c0:	8c 01       	movw	r16, r24
    53c2:	c8 01       	movw	r24, r16
    53c4:	8e d2       	rcall	.+1308   	; 0x58e2 <fgetc>
    53c6:	ec 01       	movw	r28, r24
    53c8:	97 fd       	sbrc	r25, 7
    53ca:	06 c0       	rjmp	.+12     	; 0x53d8 <skip_spaces+0x20>
    53cc:	61 d2       	rcall	.+1218   	; 0x5890 <isspace>
    53ce:	89 2b       	or	r24, r25
    53d0:	c1 f7       	brne	.-16     	; 0x53c2 <skip_spaces+0xa>
    53d2:	b8 01       	movw	r22, r16
    53d4:	ce 01       	movw	r24, r28
    53d6:	f5 d2       	rcall	.+1514   	; 0x59c2 <ungetc>
    53d8:	ce 01       	movw	r24, r28
    53da:	df 91       	pop	r29
    53dc:	cf 91       	pop	r28
    53de:	1f 91       	pop	r17
    53e0:	0f 91       	pop	r16
    53e2:	08 95       	ret

000053e4 <conv_int>:
    53e4:	8f 92       	push	r8
    53e6:	9f 92       	push	r9
    53e8:	af 92       	push	r10
    53ea:	cf 92       	push	r12
    53ec:	df 92       	push	r13
    53ee:	ef 92       	push	r14
    53f0:	ff 92       	push	r15
    53f2:	0f 93       	push	r16
    53f4:	1f 93       	push	r17
    53f6:	cf 93       	push	r28
    53f8:	df 93       	push	r29
    53fa:	ec 01       	movw	r28, r24
    53fc:	a6 2e       	mov	r10, r22
    53fe:	4a 01       	movw	r8, r20
    5400:	02 2f       	mov	r16, r18
    5402:	6f d2       	rcall	.+1246   	; 0x58e2 <fgetc>
    5404:	ac 01       	movw	r20, r24
    5406:	55 27       	eor	r21, r21
    5408:	4b 32       	cpi	r20, 0x2B	; 43
    540a:	51 05       	cpc	r21, r1
    540c:	21 f0       	breq	.+8      	; 0x5416 <conv_int+0x32>
    540e:	4d 32       	cpi	r20, 0x2D	; 45
    5410:	51 05       	cpc	r21, r1
    5412:	49 f4       	brne	.+18     	; 0x5426 <conv_int+0x42>
    5414:	00 68       	ori	r16, 0x80	; 128
    5416:	aa 94       	dec	r10
    5418:	11 f4       	brne	.+4      	; 0x541e <conv_int+0x3a>
    541a:	80 e0       	ldi	r24, 0x00	; 0
    541c:	60 c0       	rjmp	.+192    	; 0x54de <conv_int+0xfa>
    541e:	ce 01       	movw	r24, r28
    5420:	60 d2       	rcall	.+1216   	; 0x58e2 <fgetc>
    5422:	97 fd       	sbrc	r25, 7
    5424:	fa cf       	rjmp	.-12     	; 0x541a <conv_int+0x36>
    5426:	10 2f       	mov	r17, r16
    5428:	1d 7f       	andi	r17, 0xFD	; 253
    542a:	30 2f       	mov	r19, r16
    542c:	30 73       	andi	r19, 0x30	; 48
    542e:	f1 f4       	brne	.+60     	; 0x546c <conv_int+0x88>
    5430:	80 33       	cpi	r24, 0x30	; 48
    5432:	e1 f4       	brne	.+56     	; 0x546c <conv_int+0x88>
    5434:	ff 24       	eor	r15, r15
    5436:	fa 94       	dec	r15
    5438:	fa 0c       	add	r15, r10
    543a:	09 f4       	brne	.+2      	; 0x543e <conv_int+0x5a>
    543c:	3d c0       	rjmp	.+122    	; 0x54b8 <conv_int+0xd4>
    543e:	ce 01       	movw	r24, r28
    5440:	50 d2       	rcall	.+1184   	; 0x58e2 <fgetc>
    5442:	97 fd       	sbrc	r25, 7
    5444:	39 c0       	rjmp	.+114    	; 0x54b8 <conv_int+0xd4>
    5446:	38 2f       	mov	r19, r24
    5448:	3f 7d       	andi	r19, 0xDF	; 223
    544a:	38 35       	cpi	r19, 0x58	; 88
    544c:	49 f4       	brne	.+18     	; 0x5460 <conv_int+0x7c>
    544e:	12 64       	ori	r17, 0x42	; 66
    5450:	aa 94       	dec	r10
    5452:	aa 94       	dec	r10
    5454:	89 f1       	breq	.+98     	; 0x54b8 <conv_int+0xd4>
    5456:	ce 01       	movw	r24, r28
    5458:	44 d2       	rcall	.+1160   	; 0x58e2 <fgetc>
    545a:	97 ff       	sbrs	r25, 7
    545c:	07 c0       	rjmp	.+14     	; 0x546c <conv_int+0x88>
    545e:	2c c0       	rjmp	.+88     	; 0x54b8 <conv_int+0xd4>
    5460:	06 ff       	sbrs	r16, 6
    5462:	02 c0       	rjmp	.+4      	; 0x5468 <conv_int+0x84>
    5464:	12 60       	ori	r17, 0x02	; 2
    5466:	01 c0       	rjmp	.+2      	; 0x546a <conv_int+0x86>
    5468:	12 61       	ori	r17, 0x12	; 18
    546a:	af 2c       	mov	r10, r15
    546c:	c1 2c       	mov	r12, r1
    546e:	d1 2c       	mov	r13, r1
    5470:	76 01       	movw	r14, r12
    5472:	20 ed       	ldi	r18, 0xD0	; 208
    5474:	28 0f       	add	r18, r24
    5476:	28 30       	cpi	r18, 0x08	; 8
    5478:	78 f0       	brcs	.+30     	; 0x5498 <conv_int+0xb4>
    547a:	14 ff       	sbrs	r17, 4
    547c:	03 c0       	rjmp	.+6      	; 0x5484 <conv_int+0xa0>
    547e:	be 01       	movw	r22, r28
    5480:	a0 d2       	rcall	.+1344   	; 0x59c2 <ungetc>
    5482:	17 c0       	rjmp	.+46     	; 0x54b2 <conv_int+0xce>
    5484:	2a 30       	cpi	r18, 0x0A	; 10
    5486:	40 f0       	brcs	.+16     	; 0x5498 <conv_int+0xb4>
    5488:	16 ff       	sbrs	r17, 6
    548a:	f9 cf       	rjmp	.-14     	; 0x547e <conv_int+0x9a>
    548c:	2f 7d       	andi	r18, 0xDF	; 223
    548e:	3f ee       	ldi	r19, 0xEF	; 239
    5490:	32 0f       	add	r19, r18
    5492:	36 30       	cpi	r19, 0x06	; 6
    5494:	a0 f7       	brcc	.-24     	; 0x547e <conv_int+0x9a>
    5496:	27 50       	subi	r18, 0x07	; 7
    5498:	41 2f       	mov	r20, r17
    549a:	c7 01       	movw	r24, r14
    549c:	b6 01       	movw	r22, r12
    549e:	6c df       	rcall	.-296    	; 0x5378 <mulacc>
    54a0:	6b 01       	movw	r12, r22
    54a2:	7c 01       	movw	r14, r24
    54a4:	12 60       	ori	r17, 0x02	; 2
    54a6:	aa 94       	dec	r10
    54a8:	51 f0       	breq	.+20     	; 0x54be <conv_int+0xda>
    54aa:	ce 01       	movw	r24, r28
    54ac:	1a d2       	rcall	.+1076   	; 0x58e2 <fgetc>
    54ae:	97 ff       	sbrs	r25, 7
    54b0:	e0 cf       	rjmp	.-64     	; 0x5472 <conv_int+0x8e>
    54b2:	11 fd       	sbrc	r17, 1
    54b4:	04 c0       	rjmp	.+8      	; 0x54be <conv_int+0xda>
    54b6:	b1 cf       	rjmp	.-158    	; 0x541a <conv_int+0x36>
    54b8:	c1 2c       	mov	r12, r1
    54ba:	d1 2c       	mov	r13, r1
    54bc:	76 01       	movw	r14, r12
    54be:	17 ff       	sbrs	r17, 7
    54c0:	08 c0       	rjmp	.+16     	; 0x54d2 <conv_int+0xee>
    54c2:	f0 94       	com	r15
    54c4:	e0 94       	com	r14
    54c6:	d0 94       	com	r13
    54c8:	c0 94       	com	r12
    54ca:	c1 1c       	adc	r12, r1
    54cc:	d1 1c       	adc	r13, r1
    54ce:	e1 1c       	adc	r14, r1
    54d0:	f1 1c       	adc	r15, r1
    54d2:	21 2f       	mov	r18, r17
    54d4:	b7 01       	movw	r22, r14
    54d6:	a6 01       	movw	r20, r12
    54d8:	c4 01       	movw	r24, r8
    54da:	42 df       	rcall	.-380    	; 0x5360 <putval>
    54dc:	81 e0       	ldi	r24, 0x01	; 1
    54de:	df 91       	pop	r29
    54e0:	cf 91       	pop	r28
    54e2:	1f 91       	pop	r17
    54e4:	0f 91       	pop	r16
    54e6:	ff 90       	pop	r15
    54e8:	ef 90       	pop	r14
    54ea:	df 90       	pop	r13
    54ec:	cf 90       	pop	r12
    54ee:	af 90       	pop	r10
    54f0:	9f 90       	pop	r9
    54f2:	8f 90       	pop	r8
    54f4:	08 95       	ret

000054f6 <conv_brk>:
    54f6:	a1 e2       	ldi	r26, 0x21	; 33
    54f8:	b0 e0       	ldi	r27, 0x00	; 0
    54fa:	e0 e8       	ldi	r30, 0x80	; 128
    54fc:	fa e2       	ldi	r31, 0x2A	; 42
    54fe:	e0 c2       	rjmp	.+1472   	; 0x5ac0 <__prologue_saves__+0xa>
    5500:	5c 01       	movw	r10, r24
    5502:	7a 01       	movw	r14, r20
    5504:	8e 01       	movw	r16, r28
    5506:	0f 5f       	subi	r16, 0xFF	; 255
    5508:	1f 4f       	sbci	r17, 0xFF	; 255
    550a:	68 01       	movw	r12, r16
    550c:	80 e2       	ldi	r24, 0x20	; 32
    550e:	d8 01       	movw	r26, r16
    5510:	1d 92       	st	X+, r1
    5512:	8a 95       	dec	r24
    5514:	e9 f7       	brne	.-6      	; 0x5510 <conv_brk+0x1a>
    5516:	f5 01       	movw	r30, r10
    5518:	73 80       	ldd	r7, Z+3	; 0x03
    551a:	40 e0       	ldi	r20, 0x00	; 0
    551c:	50 e0       	ldi	r21, 0x00	; 0
    551e:	81 2c       	mov	r8, r1
    5520:	b0 e0       	ldi	r27, 0x00	; 0
    5522:	91 2c       	mov	r9, r1
    5524:	81 e0       	ldi	r24, 0x01	; 1
    5526:	90 e0       	ldi	r25, 0x00	; 0
    5528:	f9 01       	movw	r30, r18
    552a:	73 fc       	sbrc	r7, 3
    552c:	a5 91       	lpm	r26, Z+
    552e:	73 fe       	sbrs	r7, 3
    5530:	a1 91       	ld	r26, Z+
    5532:	8f 01       	movw	r16, r30
    5534:	7a 2f       	mov	r23, r26
    5536:	9f 01       	movw	r18, r30
    5538:	a1 11       	cpse	r26, r1
    553a:	03 c0       	rjmp	.+6      	; 0x5542 <conv_brk+0x4c>
    553c:	80 e0       	ldi	r24, 0x00	; 0
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	7b c0       	rjmp	.+246    	; 0x5638 <conv_brk+0x142>
    5542:	ae 35       	cpi	r26, 0x5E	; 94
    5544:	19 f4       	brne	.+6      	; 0x554c <conv_brk+0x56>
    5546:	41 15       	cp	r20, r1
    5548:	51 05       	cpc	r21, r1
    554a:	59 f1       	breq	.+86     	; 0x55a2 <conv_brk+0xac>
    554c:	e9 2d       	mov	r30, r9
    554e:	f0 e0       	ldi	r31, 0x00	; 0
    5550:	e4 17       	cp	r30, r20
    5552:	f5 07       	cpc	r31, r21
    5554:	3c f4       	brge	.+14     	; 0x5564 <conv_brk+0x6e>
    5556:	ad 35       	cpi	r26, 0x5D	; 93
    5558:	69 f1       	breq	.+90     	; 0x55b4 <conv_brk+0xbe>
    555a:	ad 32       	cpi	r26, 0x2D	; 45
    555c:	19 f4       	brne	.+6      	; 0x5564 <conv_brk+0x6e>
    555e:	bb 23       	and	r27, r27
    5560:	19 f1       	breq	.+70     	; 0x55a8 <conv_brk+0xb2>
    5562:	03 c0       	rjmp	.+6      	; 0x556a <conv_brk+0x74>
    5564:	b1 11       	cpse	r27, r1
    5566:	01 c0       	rjmp	.+2      	; 0x556a <conv_brk+0x74>
    5568:	8a 2e       	mov	r8, r26
    556a:	e7 2f       	mov	r30, r23
    556c:	e6 95       	lsr	r30
    556e:	e6 95       	lsr	r30
    5570:	e6 95       	lsr	r30
    5572:	86 01       	movw	r16, r12
    5574:	0e 0f       	add	r16, r30
    5576:	11 1d       	adc	r17, r1
    5578:	f8 01       	movw	r30, r16
    557a:	a7 2f       	mov	r26, r23
    557c:	a7 70       	andi	r26, 0x07	; 7
    557e:	8c 01       	movw	r16, r24
    5580:	02 c0       	rjmp	.+4      	; 0x5586 <conv_brk+0x90>
    5582:	00 0f       	add	r16, r16
    5584:	11 1f       	adc	r17, r17
    5586:	aa 95       	dec	r26
    5588:	e2 f7       	brpl	.-8      	; 0x5582 <conv_brk+0x8c>
    558a:	d8 01       	movw	r26, r16
    558c:	b0 81       	ld	r27, Z
    558e:	ba 2b       	or	r27, r26
    5590:	b0 83       	st	Z, r27
    5592:	78 15       	cp	r23, r8
    5594:	59 f0       	breq	.+22     	; 0x55ac <conv_brk+0xb6>
    5596:	78 15       	cp	r23, r8
    5598:	10 f4       	brcc	.+4      	; 0x559e <conv_brk+0xa8>
    559a:	7f 5f       	subi	r23, 0xFF	; 255
    559c:	e6 cf       	rjmp	.-52     	; 0x556a <conv_brk+0x74>
    559e:	71 50       	subi	r23, 0x01	; 1
    55a0:	e4 cf       	rjmp	.-56     	; 0x556a <conv_brk+0x74>
    55a2:	99 24       	eor	r9, r9
    55a4:	93 94       	inc	r9
    55a6:	03 c0       	rjmp	.+6      	; 0x55ae <conv_brk+0xb8>
    55a8:	b1 e0       	ldi	r27, 0x01	; 1
    55aa:	01 c0       	rjmp	.+2      	; 0x55ae <conv_brk+0xb8>
    55ac:	b0 e0       	ldi	r27, 0x00	; 0
    55ae:	4f 5f       	subi	r20, 0xFF	; 255
    55b0:	5f 4f       	sbci	r21, 0xFF	; 255
    55b2:	ba cf       	rjmp	.-140    	; 0x5528 <conv_brk+0x32>
    55b4:	bb 23       	and	r27, r27
    55b6:	19 f0       	breq	.+6      	; 0x55be <conv_brk+0xc8>
    55b8:	8e 81       	ldd	r24, Y+6	; 0x06
    55ba:	80 62       	ori	r24, 0x20	; 32
    55bc:	8e 83       	std	Y+6, r24	; 0x06
    55be:	91 10       	cpse	r9, r1
    55c0:	03 c0       	rjmp	.+6      	; 0x55c8 <conv_brk+0xd2>
    55c2:	99 24       	eor	r9, r9
    55c4:	93 94       	inc	r9
    55c6:	15 c0       	rjmp	.+42     	; 0x55f2 <conv_brk+0xfc>
    55c8:	f6 01       	movw	r30, r12
    55ca:	ce 01       	movw	r24, r28
    55cc:	81 96       	adiw	r24, 0x21	; 33
    55ce:	20 81       	ld	r18, Z
    55d0:	20 95       	com	r18
    55d2:	21 93       	st	Z+, r18
    55d4:	e8 17       	cp	r30, r24
    55d6:	f9 07       	cpc	r31, r25
    55d8:	d1 f7       	brne	.-12     	; 0x55ce <conv_brk+0xd8>
    55da:	f3 cf       	rjmp	.-26     	; 0x55c2 <conv_brk+0xcc>
    55dc:	e1 14       	cp	r14, r1
    55de:	f1 04       	cpc	r15, r1
    55e0:	29 f0       	breq	.+10     	; 0x55ec <conv_brk+0xf6>
    55e2:	d7 01       	movw	r26, r14
    55e4:	8c 93       	st	X, r24
    55e6:	f7 01       	movw	r30, r14
    55e8:	31 96       	adiw	r30, 0x01	; 1
    55ea:	7f 01       	movw	r14, r30
    55ec:	61 50       	subi	r22, 0x01	; 1
    55ee:	f1 f0       	breq	.+60     	; 0x562c <conv_brk+0x136>
    55f0:	91 2c       	mov	r9, r1
    55f2:	c5 01       	movw	r24, r10
    55f4:	69 a3       	std	Y+33, r22	; 0x21
    55f6:	75 d1       	rcall	.+746    	; 0x58e2 <fgetc>
    55f8:	69 a1       	ldd	r22, Y+33	; 0x21
    55fa:	97 fd       	sbrc	r25, 7
    55fc:	15 c0       	rjmp	.+42     	; 0x5628 <conv_brk+0x132>
    55fe:	28 2f       	mov	r18, r24
    5600:	26 95       	lsr	r18
    5602:	26 95       	lsr	r18
    5604:	26 95       	lsr	r18
    5606:	f6 01       	movw	r30, r12
    5608:	e2 0f       	add	r30, r18
    560a:	f1 1d       	adc	r31, r1
    560c:	20 81       	ld	r18, Z
    560e:	30 e0       	ldi	r19, 0x00	; 0
    5610:	ac 01       	movw	r20, r24
    5612:	47 70       	andi	r20, 0x07	; 7
    5614:	55 27       	eor	r21, r21
    5616:	02 c0       	rjmp	.+4      	; 0x561c <conv_brk+0x126>
    5618:	35 95       	asr	r19
    561a:	27 95       	ror	r18
    561c:	4a 95       	dec	r20
    561e:	e2 f7       	brpl	.-8      	; 0x5618 <conv_brk+0x122>
    5620:	20 fd       	sbrc	r18, 0
    5622:	dc cf       	rjmp	.-72     	; 0x55dc <conv_brk+0xe6>
    5624:	b5 01       	movw	r22, r10
    5626:	cd d1       	rcall	.+922    	; 0x59c2 <ungetc>
    5628:	91 10       	cpse	r9, r1
    562a:	88 cf       	rjmp	.-240    	; 0x553c <conv_brk+0x46>
    562c:	e1 14       	cp	r14, r1
    562e:	f1 04       	cpc	r15, r1
    5630:	11 f0       	breq	.+4      	; 0x5636 <conv_brk+0x140>
    5632:	d7 01       	movw	r26, r14
    5634:	1c 92       	st	X, r1
    5636:	c8 01       	movw	r24, r16
    5638:	a1 96       	adiw	r28, 0x21	; 33
    563a:	ed e0       	ldi	r30, 0x0D	; 13
    563c:	5a c2       	rjmp	.+1204   	; 0x5af2 <__epilogue_restores__+0xa>

0000563e <vfscanf>:
    563e:	4f 92       	push	r4
    5640:	5f 92       	push	r5
    5642:	7f 92       	push	r7
    5644:	8f 92       	push	r8
    5646:	9f 92       	push	r9
    5648:	af 92       	push	r10
    564a:	bf 92       	push	r11
    564c:	cf 92       	push	r12
    564e:	df 92       	push	r13
    5650:	ef 92       	push	r14
    5652:	ff 92       	push	r15
    5654:	0f 93       	push	r16
    5656:	1f 93       	push	r17
    5658:	cf 93       	push	r28
    565a:	df 93       	push	r29
    565c:	1f 92       	push	r1
    565e:	cd b7       	in	r28, 0x3d	; 61
    5660:	de b7       	in	r29, 0x3e	; 62
    5662:	8c 01       	movw	r16, r24
    5664:	2b 01       	movw	r4, r22
    5666:	7a 01       	movw	r14, r20
    5668:	fc 01       	movw	r30, r24
    566a:	16 82       	std	Z+6, r1	; 0x06
    566c:	17 82       	std	Z+7, r1	; 0x07
    566e:	a1 2c       	mov	r10, r1
    5670:	f8 01       	movw	r30, r16
    5672:	d3 80       	ldd	r13, Z+3	; 0x03
    5674:	f2 01       	movw	r30, r4
    5676:	d3 fc       	sbrc	r13, 3
    5678:	85 91       	lpm	r24, Z+
    567a:	d3 fe       	sbrs	r13, 3
    567c:	81 91       	ld	r24, Z+
    567e:	38 2f       	mov	r19, r24
    5680:	2f 01       	movw	r4, r30
    5682:	88 23       	and	r24, r24
    5684:	09 f4       	brne	.+2      	; 0x5688 <vfscanf+0x4a>
    5686:	ee c0       	rjmp	.+476    	; 0x5864 <vfscanf+0x226>
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	39 83       	std	Y+1, r19	; 0x01
    568c:	01 d1       	rcall	.+514    	; 0x5890 <isspace>
    568e:	39 81       	ldd	r19, Y+1	; 0x01
    5690:	89 2b       	or	r24, r25
    5692:	19 f0       	breq	.+6      	; 0x569a <vfscanf+0x5c>
    5694:	c8 01       	movw	r24, r16
    5696:	90 de       	rcall	.-736    	; 0x53b8 <skip_spaces>
    5698:	eb cf       	rjmp	.-42     	; 0x5670 <vfscanf+0x32>
    569a:	35 32       	cpi	r19, 0x25	; 37
    569c:	41 f4       	brne	.+16     	; 0x56ae <vfscanf+0x70>
    569e:	f2 01       	movw	r30, r4
    56a0:	d3 fc       	sbrc	r13, 3
    56a2:	35 91       	lpm	r19, Z+
    56a4:	d3 fe       	sbrs	r13, 3
    56a6:	31 91       	ld	r19, Z+
    56a8:	2f 01       	movw	r4, r30
    56aa:	35 32       	cpi	r19, 0x25	; 37
    56ac:	59 f4       	brne	.+22     	; 0x56c4 <vfscanf+0x86>
    56ae:	c8 01       	movw	r24, r16
    56b0:	39 83       	std	Y+1, r19	; 0x01
    56b2:	17 d1       	rcall	.+558    	; 0x58e2 <fgetc>
    56b4:	39 81       	ldd	r19, Y+1	; 0x01
    56b6:	97 fd       	sbrc	r25, 7
    56b8:	d3 c0       	rjmp	.+422    	; 0x5860 <vfscanf+0x222>
    56ba:	38 17       	cp	r19, r24
    56bc:	c9 f2       	breq	.-78     	; 0x5670 <vfscanf+0x32>
    56be:	b8 01       	movw	r22, r16
    56c0:	80 d1       	rcall	.+768    	; 0x59c2 <ungetc>
    56c2:	d0 c0       	rjmp	.+416    	; 0x5864 <vfscanf+0x226>
    56c4:	3a 32       	cpi	r19, 0x2A	; 42
    56c6:	41 f4       	brne	.+16     	; 0x56d8 <vfscanf+0x9a>
    56c8:	d3 fc       	sbrc	r13, 3
    56ca:	35 91       	lpm	r19, Z+
    56cc:	d3 fe       	sbrs	r13, 3
    56ce:	31 91       	ld	r19, Z+
    56d0:	2f 01       	movw	r4, r30
    56d2:	bb 24       	eor	r11, r11
    56d4:	b3 94       	inc	r11
    56d6:	01 c0       	rjmp	.+2      	; 0x56da <vfscanf+0x9c>
    56d8:	b1 2c       	mov	r11, r1
    56da:	71 2c       	mov	r7, r1
    56dc:	20 ed       	ldi	r18, 0xD0	; 208
    56de:	23 0f       	add	r18, r19
    56e0:	2a 30       	cpi	r18, 0x0A	; 10
    56e2:	88 f4       	brcc	.+34     	; 0x5706 <vfscanf+0xc8>
    56e4:	fb 2d       	mov	r31, r11
    56e6:	f2 60       	ori	r31, 0x02	; 2
    56e8:	bf 2e       	mov	r11, r31
    56ea:	67 2d       	mov	r22, r7
    56ec:	70 e0       	ldi	r23, 0x00	; 0
    56ee:	80 e0       	ldi	r24, 0x00	; 0
    56f0:	90 e0       	ldi	r25, 0x00	; 0
    56f2:	40 e2       	ldi	r20, 0x20	; 32
    56f4:	41 de       	rcall	.-894    	; 0x5378 <mulacc>
    56f6:	76 2e       	mov	r7, r22
    56f8:	f2 01       	movw	r30, r4
    56fa:	d3 fc       	sbrc	r13, 3
    56fc:	35 91       	lpm	r19, Z+
    56fe:	d3 fe       	sbrs	r13, 3
    5700:	31 91       	ld	r19, Z+
    5702:	2f 01       	movw	r4, r30
    5704:	eb cf       	rjmp	.-42     	; 0x56dc <vfscanf+0x9e>
    5706:	b1 fe       	sbrs	r11, 1
    5708:	03 c0       	rjmp	.+6      	; 0x5710 <vfscanf+0xd2>
    570a:	71 10       	cpse	r7, r1
    570c:	03 c0       	rjmp	.+6      	; 0x5714 <vfscanf+0xd6>
    570e:	aa c0       	rjmp	.+340    	; 0x5864 <vfscanf+0x226>
    5710:	77 24       	eor	r7, r7
    5712:	7a 94       	dec	r7
    5714:	38 36       	cpi	r19, 0x68	; 104
    5716:	19 f0       	breq	.+6      	; 0x571e <vfscanf+0xe0>
    5718:	3c 36       	cpi	r19, 0x6C	; 108
    571a:	61 f0       	breq	.+24     	; 0x5734 <vfscanf+0xf6>
    571c:	14 c0       	rjmp	.+40     	; 0x5746 <vfscanf+0x108>
    571e:	f2 01       	movw	r30, r4
    5720:	d3 fc       	sbrc	r13, 3
    5722:	35 91       	lpm	r19, Z+
    5724:	d3 fe       	sbrs	r13, 3
    5726:	31 91       	ld	r19, Z+
    5728:	2f 01       	movw	r4, r30
    572a:	38 36       	cpi	r19, 0x68	; 104
    572c:	61 f4       	brne	.+24     	; 0x5746 <vfscanf+0x108>
    572e:	fb 2d       	mov	r31, r11
    5730:	f8 60       	ori	r31, 0x08	; 8
    5732:	bf 2e       	mov	r11, r31
    5734:	8b 2d       	mov	r24, r11
    5736:	84 60       	ori	r24, 0x04	; 4
    5738:	b8 2e       	mov	r11, r24
    573a:	f2 01       	movw	r30, r4
    573c:	d3 fc       	sbrc	r13, 3
    573e:	35 91       	lpm	r19, Z+
    5740:	d3 fe       	sbrs	r13, 3
    5742:	31 91       	ld	r19, Z+
    5744:	2f 01       	movw	r4, r30
    5746:	33 23       	and	r19, r19
    5748:	09 f4       	brne	.+2      	; 0x574c <vfscanf+0x10e>
    574a:	8c c0       	rjmp	.+280    	; 0x5864 <vfscanf+0x226>
    574c:	63 2f       	mov	r22, r19
    574e:	70 e0       	ldi	r23, 0x00	; 0
    5750:	88 e3       	ldi	r24, 0x38	; 56
    5752:	92 e0       	ldi	r25, 0x02	; 2
    5754:	39 83       	std	Y+1, r19	; 0x01
    5756:	a4 d0       	rcall	.+328    	; 0x58a0 <strchr_P>
    5758:	39 81       	ldd	r19, Y+1	; 0x01
    575a:	89 2b       	or	r24, r25
    575c:	09 f4       	brne	.+2      	; 0x5760 <vfscanf+0x122>
    575e:	82 c0       	rjmp	.+260    	; 0x5864 <vfscanf+0x226>
    5760:	b0 fc       	sbrc	r11, 0
    5762:	07 c0       	rjmp	.+14     	; 0x5772 <vfscanf+0x134>
    5764:	f7 01       	movw	r30, r14
    5766:	c0 80       	ld	r12, Z
    5768:	d1 80       	ldd	r13, Z+1	; 0x01
    576a:	c7 01       	movw	r24, r14
    576c:	02 96       	adiw	r24, 0x02	; 2
    576e:	7c 01       	movw	r14, r24
    5770:	02 c0       	rjmp	.+4      	; 0x5776 <vfscanf+0x138>
    5772:	c1 2c       	mov	r12, r1
    5774:	d1 2c       	mov	r13, r1
    5776:	3e 36       	cpi	r19, 0x6E	; 110
    5778:	49 f4       	brne	.+18     	; 0x578c <vfscanf+0x14e>
    577a:	f8 01       	movw	r30, r16
    577c:	46 81       	ldd	r20, Z+6	; 0x06
    577e:	57 81       	ldd	r21, Z+7	; 0x07
    5780:	60 e0       	ldi	r22, 0x00	; 0
    5782:	70 e0       	ldi	r23, 0x00	; 0
    5784:	2b 2d       	mov	r18, r11
    5786:	c6 01       	movw	r24, r12
    5788:	eb dd       	rcall	.-1066   	; 0x5360 <putval>
    578a:	72 cf       	rjmp	.-284    	; 0x5670 <vfscanf+0x32>
    578c:	33 36       	cpi	r19, 0x63	; 99
    578e:	99 f4       	brne	.+38     	; 0x57b6 <vfscanf+0x178>
    5790:	b1 fc       	sbrc	r11, 1
    5792:	02 c0       	rjmp	.+4      	; 0x5798 <vfscanf+0x15a>
    5794:	77 24       	eor	r7, r7
    5796:	73 94       	inc	r7
    5798:	c8 01       	movw	r24, r16
    579a:	a3 d0       	rcall	.+326    	; 0x58e2 <fgetc>
    579c:	97 fd       	sbrc	r25, 7
    579e:	60 c0       	rjmp	.+192    	; 0x5860 <vfscanf+0x222>
    57a0:	c1 14       	cp	r12, r1
    57a2:	d1 04       	cpc	r13, r1
    57a4:	29 f0       	breq	.+10     	; 0x57b0 <vfscanf+0x172>
    57a6:	f6 01       	movw	r30, r12
    57a8:	80 83       	st	Z, r24
    57aa:	c6 01       	movw	r24, r12
    57ac:	01 96       	adiw	r24, 0x01	; 1
    57ae:	6c 01       	movw	r12, r24
    57b0:	7a 94       	dec	r7
    57b2:	91 f7       	brne	.-28     	; 0x5798 <vfscanf+0x15a>
    57b4:	51 c0       	rjmp	.+162    	; 0x5858 <vfscanf+0x21a>
    57b6:	3b 35       	cpi	r19, 0x5B	; 91
    57b8:	51 f4       	brne	.+20     	; 0x57ce <vfscanf+0x190>
    57ba:	92 01       	movw	r18, r4
    57bc:	a6 01       	movw	r20, r12
    57be:	67 2d       	mov	r22, r7
    57c0:	c8 01       	movw	r24, r16
    57c2:	99 de       	rcall	.-718    	; 0x54f6 <conv_brk>
    57c4:	2c 01       	movw	r4, r24
    57c6:	00 97       	sbiw	r24, 0x00	; 0
    57c8:	09 f0       	breq	.+2      	; 0x57cc <vfscanf+0x18e>
    57ca:	46 c0       	rjmp	.+140    	; 0x5858 <vfscanf+0x21a>
    57cc:	40 c0       	rjmp	.+128    	; 0x584e <vfscanf+0x210>
    57ce:	c8 01       	movw	r24, r16
    57d0:	39 83       	std	Y+1, r19	; 0x01
    57d2:	f2 dd       	rcall	.-1052   	; 0x53b8 <skip_spaces>
    57d4:	39 81       	ldd	r19, Y+1	; 0x01
    57d6:	97 fd       	sbrc	r25, 7
    57d8:	43 c0       	rjmp	.+134    	; 0x5860 <vfscanf+0x222>
    57da:	3f 36       	cpi	r19, 0x6F	; 111
    57dc:	51 f1       	breq	.+84     	; 0x5832 <vfscanf+0x1f4>
    57de:	28 f4       	brcc	.+10     	; 0x57ea <vfscanf+0x1ac>
    57e0:	34 36       	cpi	r19, 0x64	; 100
    57e2:	19 f1       	breq	.+70     	; 0x582a <vfscanf+0x1ec>
    57e4:	39 36       	cpi	r19, 0x69	; 105
    57e6:	61 f1       	breq	.+88     	; 0x5840 <vfscanf+0x202>
    57e8:	28 c0       	rjmp	.+80     	; 0x583a <vfscanf+0x1fc>
    57ea:	33 37       	cpi	r19, 0x73	; 115
    57ec:	69 f0       	breq	.+26     	; 0x5808 <vfscanf+0x1ca>
    57ee:	35 37       	cpi	r19, 0x75	; 117
    57f0:	e1 f0       	breq	.+56     	; 0x582a <vfscanf+0x1ec>
    57f2:	23 c0       	rjmp	.+70     	; 0x583a <vfscanf+0x1fc>
    57f4:	c1 14       	cp	r12, r1
    57f6:	d1 04       	cpc	r13, r1
    57f8:	29 f0       	breq	.+10     	; 0x5804 <vfscanf+0x1c6>
    57fa:	f6 01       	movw	r30, r12
    57fc:	80 82       	st	Z, r8
    57fe:	c6 01       	movw	r24, r12
    5800:	01 96       	adiw	r24, 0x01	; 1
    5802:	6c 01       	movw	r12, r24
    5804:	7a 94       	dec	r7
    5806:	59 f0       	breq	.+22     	; 0x581e <vfscanf+0x1e0>
    5808:	c8 01       	movw	r24, r16
    580a:	6b d0       	rcall	.+214    	; 0x58e2 <fgetc>
    580c:	4c 01       	movw	r8, r24
    580e:	97 fd       	sbrc	r25, 7
    5810:	06 c0       	rjmp	.+12     	; 0x581e <vfscanf+0x1e0>
    5812:	3e d0       	rcall	.+124    	; 0x5890 <isspace>
    5814:	89 2b       	or	r24, r25
    5816:	71 f3       	breq	.-36     	; 0x57f4 <vfscanf+0x1b6>
    5818:	b8 01       	movw	r22, r16
    581a:	c4 01       	movw	r24, r8
    581c:	d2 d0       	rcall	.+420    	; 0x59c2 <ungetc>
    581e:	c1 14       	cp	r12, r1
    5820:	d1 04       	cpc	r13, r1
    5822:	d1 f0       	breq	.+52     	; 0x5858 <vfscanf+0x21a>
    5824:	f6 01       	movw	r30, r12
    5826:	10 82       	st	Z, r1
    5828:	17 c0       	rjmp	.+46     	; 0x5858 <vfscanf+0x21a>
    582a:	fb 2d       	mov	r31, r11
    582c:	f0 62       	ori	r31, 0x20	; 32
    582e:	bf 2e       	mov	r11, r31
    5830:	07 c0       	rjmp	.+14     	; 0x5840 <vfscanf+0x202>
    5832:	8b 2d       	mov	r24, r11
    5834:	80 61       	ori	r24, 0x10	; 16
    5836:	b8 2e       	mov	r11, r24
    5838:	03 c0       	rjmp	.+6      	; 0x5840 <vfscanf+0x202>
    583a:	9b 2d       	mov	r25, r11
    583c:	90 64       	ori	r25, 0x40	; 64
    583e:	b9 2e       	mov	r11, r25
    5840:	2b 2d       	mov	r18, r11
    5842:	a6 01       	movw	r20, r12
    5844:	67 2d       	mov	r22, r7
    5846:	c8 01       	movw	r24, r16
    5848:	cd dd       	rcall	.-1126   	; 0x53e4 <conv_int>
    584a:	81 11       	cpse	r24, r1
    584c:	05 c0       	rjmp	.+10     	; 0x5858 <vfscanf+0x21a>
    584e:	f8 01       	movw	r30, r16
    5850:	83 81       	ldd	r24, Z+3	; 0x03
    5852:	80 73       	andi	r24, 0x30	; 48
    5854:	29 f4       	brne	.+10     	; 0x5860 <vfscanf+0x222>
    5856:	06 c0       	rjmp	.+12     	; 0x5864 <vfscanf+0x226>
    5858:	b0 fc       	sbrc	r11, 0
    585a:	0a cf       	rjmp	.-492    	; 0x5670 <vfscanf+0x32>
    585c:	a3 94       	inc	r10
    585e:	08 cf       	rjmp	.-496    	; 0x5670 <vfscanf+0x32>
    5860:	aa 20       	and	r10, r10
    5862:	19 f0       	breq	.+6      	; 0x586a <vfscanf+0x22c>
    5864:	8a 2d       	mov	r24, r10
    5866:	90 e0       	ldi	r25, 0x00	; 0
    5868:	02 c0       	rjmp	.+4      	; 0x586e <vfscanf+0x230>
    586a:	8f ef       	ldi	r24, 0xFF	; 255
    586c:	9f ef       	ldi	r25, 0xFF	; 255
    586e:	0f 90       	pop	r0
    5870:	df 91       	pop	r29
    5872:	cf 91       	pop	r28
    5874:	1f 91       	pop	r17
    5876:	0f 91       	pop	r16
    5878:	ff 90       	pop	r15
    587a:	ef 90       	pop	r14
    587c:	df 90       	pop	r13
    587e:	cf 90       	pop	r12
    5880:	bf 90       	pop	r11
    5882:	af 90       	pop	r10
    5884:	9f 90       	pop	r9
    5886:	8f 90       	pop	r8
    5888:	7f 90       	pop	r7
    588a:	5f 90       	pop	r5
    588c:	4f 90       	pop	r4
    588e:	08 95       	ret

00005890 <isspace>:
    5890:	91 11       	cpse	r25, r1
    5892:	0e c1       	rjmp	.+540    	; 0x5ab0 <__ctype_isfalse>
    5894:	80 32       	cpi	r24, 0x20	; 32
    5896:	19 f0       	breq	.+6      	; 0x589e <isspace+0xe>
    5898:	89 50       	subi	r24, 0x09	; 9
    589a:	85 50       	subi	r24, 0x05	; 5
    589c:	d0 f7       	brcc	.-12     	; 0x5892 <isspace+0x2>
    589e:	08 95       	ret

000058a0 <strchr_P>:
    58a0:	fc 01       	movw	r30, r24
    58a2:	05 90       	lpm	r0, Z+
    58a4:	06 16       	cp	r0, r22
    58a6:	21 f0       	breq	.+8      	; 0x58b0 <strchr_P+0x10>
    58a8:	00 20       	and	r0, r0
    58aa:	d9 f7       	brne	.-10     	; 0x58a2 <strchr_P+0x2>
    58ac:	c0 01       	movw	r24, r0
    58ae:	08 95       	ret
    58b0:	31 97       	sbiw	r30, 0x01	; 1
    58b2:	cf 01       	movw	r24, r30
    58b4:	08 95       	ret

000058b6 <strnlen_P>:
    58b6:	fc 01       	movw	r30, r24
    58b8:	05 90       	lpm	r0, Z+
    58ba:	61 50       	subi	r22, 0x01	; 1
    58bc:	70 40       	sbci	r23, 0x00	; 0
    58be:	01 10       	cpse	r0, r1
    58c0:	d8 f7       	brcc	.-10     	; 0x58b8 <strnlen_P+0x2>
    58c2:	80 95       	com	r24
    58c4:	90 95       	com	r25
    58c6:	8e 0f       	add	r24, r30
    58c8:	9f 1f       	adc	r25, r31
    58ca:	08 95       	ret

000058cc <strnlen>:
    58cc:	fc 01       	movw	r30, r24
    58ce:	61 50       	subi	r22, 0x01	; 1
    58d0:	70 40       	sbci	r23, 0x00	; 0
    58d2:	01 90       	ld	r0, Z+
    58d4:	01 10       	cpse	r0, r1
    58d6:	d8 f7       	brcc	.-10     	; 0x58ce <strnlen+0x2>
    58d8:	80 95       	com	r24
    58da:	90 95       	com	r25
    58dc:	8e 0f       	add	r24, r30
    58de:	9f 1f       	adc	r25, r31
    58e0:	08 95       	ret

000058e2 <fgetc>:
    58e2:	cf 93       	push	r28
    58e4:	df 93       	push	r29
    58e6:	ec 01       	movw	r28, r24
    58e8:	2b 81       	ldd	r18, Y+3	; 0x03
    58ea:	20 ff       	sbrs	r18, 0
    58ec:	33 c0       	rjmp	.+102    	; 0x5954 <fgetc+0x72>
    58ee:	26 ff       	sbrs	r18, 6
    58f0:	0a c0       	rjmp	.+20     	; 0x5906 <fgetc+0x24>
    58f2:	2f 7b       	andi	r18, 0xBF	; 191
    58f4:	2b 83       	std	Y+3, r18	; 0x03
    58f6:	8e 81       	ldd	r24, Y+6	; 0x06
    58f8:	9f 81       	ldd	r25, Y+7	; 0x07
    58fa:	01 96       	adiw	r24, 0x01	; 1
    58fc:	8e 83       	std	Y+6, r24	; 0x06
    58fe:	9f 83       	std	Y+7, r25	; 0x07
    5900:	8a 81       	ldd	r24, Y+2	; 0x02
    5902:	90 e0       	ldi	r25, 0x00	; 0
    5904:	29 c0       	rjmp	.+82     	; 0x5958 <fgetc+0x76>
    5906:	22 ff       	sbrs	r18, 2
    5908:	0f c0       	rjmp	.+30     	; 0x5928 <fgetc+0x46>
    590a:	e8 81       	ld	r30, Y
    590c:	f9 81       	ldd	r31, Y+1	; 0x01
    590e:	80 81       	ld	r24, Z
    5910:	99 27       	eor	r25, r25
    5912:	87 fd       	sbrc	r24, 7
    5914:	90 95       	com	r25
    5916:	00 97       	sbiw	r24, 0x00	; 0
    5918:	19 f4       	brne	.+6      	; 0x5920 <fgetc+0x3e>
    591a:	20 62       	ori	r18, 0x20	; 32
    591c:	2b 83       	std	Y+3, r18	; 0x03
    591e:	1a c0       	rjmp	.+52     	; 0x5954 <fgetc+0x72>
    5920:	31 96       	adiw	r30, 0x01	; 1
    5922:	e8 83       	st	Y, r30
    5924:	f9 83       	std	Y+1, r31	; 0x01
    5926:	0e c0       	rjmp	.+28     	; 0x5944 <fgetc+0x62>
    5928:	ea 85       	ldd	r30, Y+10	; 0x0a
    592a:	fb 85       	ldd	r31, Y+11	; 0x0b
    592c:	09 95       	icall
    592e:	97 ff       	sbrs	r25, 7
    5930:	09 c0       	rjmp	.+18     	; 0x5944 <fgetc+0x62>
    5932:	2b 81       	ldd	r18, Y+3	; 0x03
    5934:	01 96       	adiw	r24, 0x01	; 1
    5936:	11 f4       	brne	.+4      	; 0x593c <fgetc+0x5a>
    5938:	80 e1       	ldi	r24, 0x10	; 16
    593a:	01 c0       	rjmp	.+2      	; 0x593e <fgetc+0x5c>
    593c:	80 e2       	ldi	r24, 0x20	; 32
    593e:	82 2b       	or	r24, r18
    5940:	8b 83       	std	Y+3, r24	; 0x03
    5942:	08 c0       	rjmp	.+16     	; 0x5954 <fgetc+0x72>
    5944:	2e 81       	ldd	r18, Y+6	; 0x06
    5946:	3f 81       	ldd	r19, Y+7	; 0x07
    5948:	2f 5f       	subi	r18, 0xFF	; 255
    594a:	3f 4f       	sbci	r19, 0xFF	; 255
    594c:	2e 83       	std	Y+6, r18	; 0x06
    594e:	3f 83       	std	Y+7, r19	; 0x07
    5950:	99 27       	eor	r25, r25
    5952:	02 c0       	rjmp	.+4      	; 0x5958 <fgetc+0x76>
    5954:	8f ef       	ldi	r24, 0xFF	; 255
    5956:	9f ef       	ldi	r25, 0xFF	; 255
    5958:	df 91       	pop	r29
    595a:	cf 91       	pop	r28
    595c:	08 95       	ret

0000595e <fputc>:
    595e:	0f 93       	push	r16
    5960:	1f 93       	push	r17
    5962:	cf 93       	push	r28
    5964:	df 93       	push	r29
    5966:	18 2f       	mov	r17, r24
    5968:	09 2f       	mov	r16, r25
    596a:	eb 01       	movw	r28, r22
    596c:	8b 81       	ldd	r24, Y+3	; 0x03
    596e:	81 fd       	sbrc	r24, 1
    5970:	03 c0       	rjmp	.+6      	; 0x5978 <fputc+0x1a>
    5972:	8f ef       	ldi	r24, 0xFF	; 255
    5974:	9f ef       	ldi	r25, 0xFF	; 255
    5976:	20 c0       	rjmp	.+64     	; 0x59b8 <fputc+0x5a>
    5978:	82 ff       	sbrs	r24, 2
    597a:	10 c0       	rjmp	.+32     	; 0x599c <fputc+0x3e>
    597c:	4e 81       	ldd	r20, Y+6	; 0x06
    597e:	5f 81       	ldd	r21, Y+7	; 0x07
    5980:	2c 81       	ldd	r18, Y+4	; 0x04
    5982:	3d 81       	ldd	r19, Y+5	; 0x05
    5984:	42 17       	cp	r20, r18
    5986:	53 07       	cpc	r21, r19
    5988:	7c f4       	brge	.+30     	; 0x59a8 <fputc+0x4a>
    598a:	e8 81       	ld	r30, Y
    598c:	f9 81       	ldd	r31, Y+1	; 0x01
    598e:	9f 01       	movw	r18, r30
    5990:	2f 5f       	subi	r18, 0xFF	; 255
    5992:	3f 4f       	sbci	r19, 0xFF	; 255
    5994:	28 83       	st	Y, r18
    5996:	39 83       	std	Y+1, r19	; 0x01
    5998:	10 83       	st	Z, r17
    599a:	06 c0       	rjmp	.+12     	; 0x59a8 <fputc+0x4a>
    599c:	e8 85       	ldd	r30, Y+8	; 0x08
    599e:	f9 85       	ldd	r31, Y+9	; 0x09
    59a0:	81 2f       	mov	r24, r17
    59a2:	09 95       	icall
    59a4:	89 2b       	or	r24, r25
    59a6:	29 f7       	brne	.-54     	; 0x5972 <fputc+0x14>
    59a8:	2e 81       	ldd	r18, Y+6	; 0x06
    59aa:	3f 81       	ldd	r19, Y+7	; 0x07
    59ac:	2f 5f       	subi	r18, 0xFF	; 255
    59ae:	3f 4f       	sbci	r19, 0xFF	; 255
    59b0:	2e 83       	std	Y+6, r18	; 0x06
    59b2:	3f 83       	std	Y+7, r19	; 0x07
    59b4:	81 2f       	mov	r24, r17
    59b6:	90 2f       	mov	r25, r16
    59b8:	df 91       	pop	r29
    59ba:	cf 91       	pop	r28
    59bc:	1f 91       	pop	r17
    59be:	0f 91       	pop	r16
    59c0:	08 95       	ret

000059c2 <ungetc>:
    59c2:	fb 01       	movw	r30, r22
    59c4:	23 81       	ldd	r18, Z+3	; 0x03
    59c6:	20 ff       	sbrs	r18, 0
    59c8:	12 c0       	rjmp	.+36     	; 0x59ee <ungetc+0x2c>
    59ca:	26 fd       	sbrc	r18, 6
    59cc:	10 c0       	rjmp	.+32     	; 0x59ee <ungetc+0x2c>
    59ce:	8f 3f       	cpi	r24, 0xFF	; 255
    59d0:	3f ef       	ldi	r19, 0xFF	; 255
    59d2:	93 07       	cpc	r25, r19
    59d4:	61 f0       	breq	.+24     	; 0x59ee <ungetc+0x2c>
    59d6:	82 83       	std	Z+2, r24	; 0x02
    59d8:	2f 7d       	andi	r18, 0xDF	; 223
    59da:	20 64       	ori	r18, 0x40	; 64
    59dc:	23 83       	std	Z+3, r18	; 0x03
    59de:	26 81       	ldd	r18, Z+6	; 0x06
    59e0:	37 81       	ldd	r19, Z+7	; 0x07
    59e2:	21 50       	subi	r18, 0x01	; 1
    59e4:	31 09       	sbc	r19, r1
    59e6:	26 83       	std	Z+6, r18	; 0x06
    59e8:	37 83       	std	Z+7, r19	; 0x07
    59ea:	99 27       	eor	r25, r25
    59ec:	08 95       	ret
    59ee:	8f ef       	ldi	r24, 0xFF	; 255
    59f0:	9f ef       	ldi	r25, 0xFF	; 255
    59f2:	08 95       	ret

000059f4 <__ultoa_invert>:
    59f4:	fa 01       	movw	r30, r20
    59f6:	aa 27       	eor	r26, r26
    59f8:	28 30       	cpi	r18, 0x08	; 8
    59fa:	51 f1       	breq	.+84     	; 0x5a50 <__ultoa_invert+0x5c>
    59fc:	20 31       	cpi	r18, 0x10	; 16
    59fe:	81 f1       	breq	.+96     	; 0x5a60 <__ultoa_invert+0x6c>
    5a00:	e8 94       	clt
    5a02:	6f 93       	push	r22
    5a04:	6e 7f       	andi	r22, 0xFE	; 254
    5a06:	6e 5f       	subi	r22, 0xFE	; 254
    5a08:	7f 4f       	sbci	r23, 0xFF	; 255
    5a0a:	8f 4f       	sbci	r24, 0xFF	; 255
    5a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a0e:	af 4f       	sbci	r26, 0xFF	; 255
    5a10:	b1 e0       	ldi	r27, 0x01	; 1
    5a12:	3e d0       	rcall	.+124    	; 0x5a90 <__ultoa_invert+0x9c>
    5a14:	b4 e0       	ldi	r27, 0x04	; 4
    5a16:	3c d0       	rcall	.+120    	; 0x5a90 <__ultoa_invert+0x9c>
    5a18:	67 0f       	add	r22, r23
    5a1a:	78 1f       	adc	r23, r24
    5a1c:	89 1f       	adc	r24, r25
    5a1e:	9a 1f       	adc	r25, r26
    5a20:	a1 1d       	adc	r26, r1
    5a22:	68 0f       	add	r22, r24
    5a24:	79 1f       	adc	r23, r25
    5a26:	8a 1f       	adc	r24, r26
    5a28:	91 1d       	adc	r25, r1
    5a2a:	a1 1d       	adc	r26, r1
    5a2c:	6a 0f       	add	r22, r26
    5a2e:	71 1d       	adc	r23, r1
    5a30:	81 1d       	adc	r24, r1
    5a32:	91 1d       	adc	r25, r1
    5a34:	a1 1d       	adc	r26, r1
    5a36:	20 d0       	rcall	.+64     	; 0x5a78 <__ultoa_invert+0x84>
    5a38:	09 f4       	brne	.+2      	; 0x5a3c <__ultoa_invert+0x48>
    5a3a:	68 94       	set
    5a3c:	3f 91       	pop	r19
    5a3e:	2a e0       	ldi	r18, 0x0A	; 10
    5a40:	26 9f       	mul	r18, r22
    5a42:	11 24       	eor	r1, r1
    5a44:	30 19       	sub	r19, r0
    5a46:	30 5d       	subi	r19, 0xD0	; 208
    5a48:	31 93       	st	Z+, r19
    5a4a:	de f6       	brtc	.-74     	; 0x5a02 <__ultoa_invert+0xe>
    5a4c:	cf 01       	movw	r24, r30
    5a4e:	08 95       	ret
    5a50:	46 2f       	mov	r20, r22
    5a52:	47 70       	andi	r20, 0x07	; 7
    5a54:	40 5d       	subi	r20, 0xD0	; 208
    5a56:	41 93       	st	Z+, r20
    5a58:	b3 e0       	ldi	r27, 0x03	; 3
    5a5a:	0f d0       	rcall	.+30     	; 0x5a7a <__ultoa_invert+0x86>
    5a5c:	c9 f7       	brne	.-14     	; 0x5a50 <__ultoa_invert+0x5c>
    5a5e:	f6 cf       	rjmp	.-20     	; 0x5a4c <__ultoa_invert+0x58>
    5a60:	46 2f       	mov	r20, r22
    5a62:	4f 70       	andi	r20, 0x0F	; 15
    5a64:	40 5d       	subi	r20, 0xD0	; 208
    5a66:	4a 33       	cpi	r20, 0x3A	; 58
    5a68:	18 f0       	brcs	.+6      	; 0x5a70 <__ultoa_invert+0x7c>
    5a6a:	49 5d       	subi	r20, 0xD9	; 217
    5a6c:	31 fd       	sbrc	r19, 1
    5a6e:	40 52       	subi	r20, 0x20	; 32
    5a70:	41 93       	st	Z+, r20
    5a72:	02 d0       	rcall	.+4      	; 0x5a78 <__ultoa_invert+0x84>
    5a74:	a9 f7       	brne	.-22     	; 0x5a60 <__ultoa_invert+0x6c>
    5a76:	ea cf       	rjmp	.-44     	; 0x5a4c <__ultoa_invert+0x58>
    5a78:	b4 e0       	ldi	r27, 0x04	; 4
    5a7a:	a6 95       	lsr	r26
    5a7c:	97 95       	ror	r25
    5a7e:	87 95       	ror	r24
    5a80:	77 95       	ror	r23
    5a82:	67 95       	ror	r22
    5a84:	ba 95       	dec	r27
    5a86:	c9 f7       	brne	.-14     	; 0x5a7a <__ultoa_invert+0x86>
    5a88:	00 97       	sbiw	r24, 0x00	; 0
    5a8a:	61 05       	cpc	r22, r1
    5a8c:	71 05       	cpc	r23, r1
    5a8e:	08 95       	ret
    5a90:	9b 01       	movw	r18, r22
    5a92:	ac 01       	movw	r20, r24
    5a94:	0a 2e       	mov	r0, r26
    5a96:	06 94       	lsr	r0
    5a98:	57 95       	ror	r21
    5a9a:	47 95       	ror	r20
    5a9c:	37 95       	ror	r19
    5a9e:	27 95       	ror	r18
    5aa0:	ba 95       	dec	r27
    5aa2:	c9 f7       	brne	.-14     	; 0x5a96 <__ultoa_invert+0xa2>
    5aa4:	62 0f       	add	r22, r18
    5aa6:	73 1f       	adc	r23, r19
    5aa8:	84 1f       	adc	r24, r20
    5aaa:	95 1f       	adc	r25, r21
    5aac:	a0 1d       	adc	r26, r0
    5aae:	08 95       	ret

00005ab0 <__ctype_isfalse>:
    5ab0:	99 27       	eor	r25, r25
    5ab2:	88 27       	eor	r24, r24

00005ab4 <__ctype_istrue>:
    5ab4:	08 95       	ret

00005ab6 <__prologue_saves__>:
    5ab6:	2f 92       	push	r2
    5ab8:	3f 92       	push	r3
    5aba:	4f 92       	push	r4
    5abc:	5f 92       	push	r5
    5abe:	6f 92       	push	r6
    5ac0:	7f 92       	push	r7
    5ac2:	8f 92       	push	r8
    5ac4:	9f 92       	push	r9
    5ac6:	af 92       	push	r10
    5ac8:	bf 92       	push	r11
    5aca:	cf 92       	push	r12
    5acc:	df 92       	push	r13
    5ace:	ef 92       	push	r14
    5ad0:	ff 92       	push	r15
    5ad2:	0f 93       	push	r16
    5ad4:	1f 93       	push	r17
    5ad6:	cf 93       	push	r28
    5ad8:	df 93       	push	r29
    5ada:	cd b7       	in	r28, 0x3d	; 61
    5adc:	de b7       	in	r29, 0x3e	; 62
    5ade:	ca 1b       	sub	r28, r26
    5ae0:	db 0b       	sbc	r29, r27
    5ae2:	cd bf       	out	0x3d, r28	; 61
    5ae4:	de bf       	out	0x3e, r29	; 62
    5ae6:	09 94       	ijmp

00005ae8 <__epilogue_restores__>:
    5ae8:	2a 88       	ldd	r2, Y+18	; 0x12
    5aea:	39 88       	ldd	r3, Y+17	; 0x11
    5aec:	48 88       	ldd	r4, Y+16	; 0x10
    5aee:	5f 84       	ldd	r5, Y+15	; 0x0f
    5af0:	6e 84       	ldd	r6, Y+14	; 0x0e
    5af2:	7d 84       	ldd	r7, Y+13	; 0x0d
    5af4:	8c 84       	ldd	r8, Y+12	; 0x0c
    5af6:	9b 84       	ldd	r9, Y+11	; 0x0b
    5af8:	aa 84       	ldd	r10, Y+10	; 0x0a
    5afa:	b9 84       	ldd	r11, Y+9	; 0x09
    5afc:	c8 84       	ldd	r12, Y+8	; 0x08
    5afe:	df 80       	ldd	r13, Y+7	; 0x07
    5b00:	ee 80       	ldd	r14, Y+6	; 0x06
    5b02:	fd 80       	ldd	r15, Y+5	; 0x05
    5b04:	0c 81       	ldd	r16, Y+4	; 0x04
    5b06:	1b 81       	ldd	r17, Y+3	; 0x03
    5b08:	aa 81       	ldd	r26, Y+2	; 0x02
    5b0a:	b9 81       	ldd	r27, Y+1	; 0x01
    5b0c:	ce 0f       	add	r28, r30
    5b0e:	d1 1d       	adc	r29, r1
    5b10:	cd bf       	out	0x3d, r28	; 61
    5b12:	de bf       	out	0x3e, r29	; 62
    5b14:	ed 01       	movw	r28, r26
    5b16:	08 95       	ret

00005b18 <_exit>:
    5b18:	f8 94       	cli

00005b1a <__stop_program>:
    5b1a:	ff cf       	rjmp	.-2      	; 0x5b1a <__stop_program>
