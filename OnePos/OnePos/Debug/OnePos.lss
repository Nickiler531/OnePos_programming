
OnePos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005162  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000432  00802000  00005162  000051f6  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f1  00802432  00802432  0000562a  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005628  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000938  00000000  00000000  00005688  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00013e40  00000000  00000000  00005fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002f02  00000000  00000000  00019e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000d5f6  00000000  00000000  0001cd02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001d08  00000000  00000000  0002a2f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000377dc  00000000  00000000  0002c000  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009cb2  00000000  00000000  000637dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000920  00000000  00000000  0006d490  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000f12d  00000000  00000000  0006ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c1       	rjmp	.+550    	; 0x228 <__ctors_end>
       2:	00 00       	nop
       4:	2e c1       	rjmp	.+604    	; 0x262 <__bad_interrupt>
       6:	00 00       	nop
       8:	2c c1       	rjmp	.+600    	; 0x262 <__bad_interrupt>
       a:	00 00       	nop
       c:	2a c1       	rjmp	.+596    	; 0x262 <__bad_interrupt>
       e:	00 00       	nop
      10:	28 c1       	rjmp	.+592    	; 0x262 <__bad_interrupt>
      12:	00 00       	nop
      14:	26 c1       	rjmp	.+588    	; 0x262 <__bad_interrupt>
      16:	00 00       	nop
      18:	24 c1       	rjmp	.+584    	; 0x262 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	22 c1       	rjmp	.+580    	; 0x262 <__bad_interrupt>
      1e:	00 00       	nop
      20:	20 c1       	rjmp	.+576    	; 0x262 <__bad_interrupt>
      22:	00 00       	nop
      24:	1e c1       	rjmp	.+572    	; 0x262 <__bad_interrupt>
      26:	00 00       	nop
      28:	1c c1       	rjmp	.+568    	; 0x262 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	1a c1       	rjmp	.+564    	; 0x262 <__bad_interrupt>
      2e:	00 00       	nop
      30:	18 c1       	rjmp	.+560    	; 0x262 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_13>
      38:	14 c1       	rjmp	.+552    	; 0x262 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	12 c1       	rjmp	.+548    	; 0x262 <__bad_interrupt>
      3e:	00 00       	nop
      40:	10 c1       	rjmp	.+544    	; 0x262 <__bad_interrupt>
      42:	00 00       	nop
      44:	0e c1       	rjmp	.+540    	; 0x262 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c c1       	rjmp	.+536    	; 0x262 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0a c1       	rjmp	.+532    	; 0x262 <__bad_interrupt>
      4e:	00 00       	nop
      50:	08 c1       	rjmp	.+528    	; 0x262 <__bad_interrupt>
      52:	00 00       	nop
      54:	06 c1       	rjmp	.+524    	; 0x262 <__bad_interrupt>
      56:	00 00       	nop
      58:	04 c1       	rjmp	.+520    	; 0x262 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	02 c1       	rjmp	.+516    	; 0x262 <__bad_interrupt>
      5e:	00 00       	nop
      60:	00 c1       	rjmp	.+512    	; 0x262 <__bad_interrupt>
      62:	00 00       	nop
      64:	fe c0       	rjmp	.+508    	; 0x262 <__bad_interrupt>
      66:	00 00       	nop
      68:	fc c0       	rjmp	.+504    	; 0x262 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fa c0       	rjmp	.+500    	; 0x262 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f8 c0       	rjmp	.+496    	; 0x262 <__bad_interrupt>
      72:	00 00       	nop
      74:	f6 c0       	rjmp	.+492    	; 0x262 <__bad_interrupt>
      76:	00 00       	nop
      78:	f4 c0       	rjmp	.+488    	; 0x262 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f2 c0       	rjmp	.+484    	; 0x262 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f0 c0       	rjmp	.+480    	; 0x262 <__bad_interrupt>
      82:	00 00       	nop
      84:	ee c0       	rjmp	.+476    	; 0x262 <__bad_interrupt>
      86:	00 00       	nop
      88:	ec c0       	rjmp	.+472    	; 0x262 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ea c0       	rjmp	.+468    	; 0x262 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e8 c0       	rjmp	.+464    	; 0x262 <__bad_interrupt>
      92:	00 00       	nop
      94:	e6 c0       	rjmp	.+460    	; 0x262 <__bad_interrupt>
      96:	00 00       	nop
      98:	e4 c0       	rjmp	.+456    	; 0x262 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e2 c0       	rjmp	.+452    	; 0x262 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e0 c0       	rjmp	.+448    	; 0x262 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	de c0       	rjmp	.+444    	; 0x262 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	dc c0       	rjmp	.+440    	; 0x262 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	da c0       	rjmp	.+436    	; 0x262 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d8 c0       	rjmp	.+432    	; 0x262 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d6 c0       	rjmp	.+428    	; 0x262 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_46>
      bc:	d2 c0       	rjmp	.+420    	; 0x262 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d0 c0       	rjmp	.+416    	; 0x262 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ce c0       	rjmp	.+412    	; 0x262 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	cc c0       	rjmp	.+408    	; 0x262 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ca c0       	rjmp	.+404    	; 0x262 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c8 c0       	rjmp	.+400    	; 0x262 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c6 c0       	rjmp	.+396    	; 0x262 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c4 c0       	rjmp	.+392    	; 0x262 <__bad_interrupt>
      da:	00 00       	nop
      dc:	c2 c0       	rjmp	.+388    	; 0x262 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c0 c0       	rjmp	.+384    	; 0x262 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	be c0       	rjmp	.+380    	; 0x262 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	bc c0       	rjmp	.+376    	; 0x262 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ba c0       	rjmp	.+372    	; 0x262 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b8 c0       	rjmp	.+368    	; 0x262 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b6 c0       	rjmp	.+364    	; 0x262 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b4 c0       	rjmp	.+360    	; 0x262 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b2 c0       	rjmp	.+356    	; 0x262 <__bad_interrupt>
      fe:	00 00       	nop
     100:	b0 c0       	rjmp	.+352    	; 0x262 <__bad_interrupt>
     102:	00 00       	nop
     104:	ae c0       	rjmp	.+348    	; 0x262 <__bad_interrupt>
     106:	00 00       	nop
     108:	ac c0       	rjmp	.+344    	; 0x262 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	aa c0       	rjmp	.+340    	; 0x262 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a8 c0       	rjmp	.+336    	; 0x262 <__bad_interrupt>
     112:	00 00       	nop
     114:	a6 c0       	rjmp	.+332    	; 0x262 <__bad_interrupt>
     116:	00 00       	nop
     118:	a4 c0       	rjmp	.+328    	; 0x262 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a2 c0       	rjmp	.+324    	; 0x262 <__bad_interrupt>
     11e:	00 00       	nop
     120:	a0 c0       	rjmp	.+320    	; 0x262 <__bad_interrupt>
     122:	00 00       	nop
     124:	9e c0       	rjmp	.+316    	; 0x262 <__bad_interrupt>
     126:	00 00       	nop
     128:	9c c0       	rjmp	.+312    	; 0x262 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	9a c0       	rjmp	.+308    	; 0x262 <__bad_interrupt>
     12e:	00 00       	nop
     130:	98 c0       	rjmp	.+304    	; 0x262 <__bad_interrupt>
     132:	00 00       	nop
     134:	96 c0       	rjmp	.+300    	; 0x262 <__bad_interrupt>
     136:	00 00       	nop
     138:	94 c0       	rjmp	.+296    	; 0x262 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	92 c0       	rjmp	.+292    	; 0x262 <__bad_interrupt>
     13e:	00 00       	nop
     140:	90 c0       	rjmp	.+288    	; 0x262 <__bad_interrupt>
     142:	00 00       	nop
     144:	8e c0       	rjmp	.+284    	; 0x262 <__bad_interrupt>
     146:	00 00       	nop
     148:	8c c0       	rjmp	.+280    	; 0x262 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	8a c0       	rjmp	.+276    	; 0x262 <__bad_interrupt>
     14e:	00 00       	nop
     150:	88 c0       	rjmp	.+272    	; 0x262 <__bad_interrupt>
     152:	00 00       	nop
     154:	86 c0       	rjmp	.+268    	; 0x262 <__bad_interrupt>
     156:	00 00       	nop
     158:	84 c0       	rjmp	.+264    	; 0x262 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	82 c0       	rjmp	.+260    	; 0x262 <__bad_interrupt>
     15e:	00 00       	nop
     160:	80 c0       	rjmp	.+256    	; 0x262 <__bad_interrupt>
     162:	00 00       	nop
     164:	7e c0       	rjmp	.+252    	; 0x262 <__bad_interrupt>
     166:	00 00       	nop
     168:	7c c0       	rjmp	.+248    	; 0x262 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	7a c0       	rjmp	.+244    	; 0x262 <__bad_interrupt>
     16e:	00 00       	nop
     170:	78 c0       	rjmp	.+240    	; 0x262 <__bad_interrupt>
     172:	00 00       	nop
     174:	76 c0       	rjmp	.+236    	; 0x262 <__bad_interrupt>
     176:	00 00       	nop
     178:	74 c0       	rjmp	.+232    	; 0x262 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	72 c0       	rjmp	.+228    	; 0x262 <__bad_interrupt>
     17e:	00 00       	nop
     180:	70 c0       	rjmp	.+224    	; 0x262 <__bad_interrupt>
     182:	00 00       	nop
     184:	6e c0       	rjmp	.+220    	; 0x262 <__bad_interrupt>
     186:	00 00       	nop
     188:	6c c0       	rjmp	.+216    	; 0x262 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	6a c0       	rjmp	.+212    	; 0x262 <__bad_interrupt>
     18e:	00 00       	nop
     190:	68 c0       	rjmp	.+208    	; 0x262 <__bad_interrupt>
     192:	00 00       	nop
     194:	66 c0       	rjmp	.+204    	; 0x262 <__bad_interrupt>
     196:	00 00       	nop
     198:	64 c0       	rjmp	.+200    	; 0x262 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	62 c0       	rjmp	.+196    	; 0x262 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	60 c0       	rjmp	.+192    	; 0x262 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5e c0       	rjmp	.+188    	; 0x262 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5c c0       	rjmp	.+184    	; 0x262 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	5a c0       	rjmp	.+180    	; 0x262 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	58 c0       	rjmp	.+176    	; 0x262 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	56 c0       	rjmp	.+172    	; 0x262 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	54 c0       	rjmp	.+168    	; 0x262 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	52 c0       	rjmp	.+164    	; 0x262 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	50 c0       	rjmp	.+160    	; 0x262 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4e c0       	rjmp	.+156    	; 0x262 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4c c0       	rjmp	.+152    	; 0x262 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	4a c0       	rjmp	.+148    	; 0x262 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	48 c0       	rjmp	.+144    	; 0x262 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	46 c0       	rjmp	.+140    	; 0x262 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	44 c0       	rjmp	.+136    	; 0x262 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	42 c0       	rjmp	.+132    	; 0x262 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	40 c0       	rjmp	.+128    	; 0x262 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3e c0       	rjmp	.+124    	; 0x262 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3c c0       	rjmp	.+120    	; 0x262 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	3a c0       	rjmp	.+116    	; 0x262 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	38 c0       	rjmp	.+112    	; 0x262 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__vector_125>
     1f8:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__vector_126>
     1fc:	ce 0c       	add	r12, r14
     1fe:	bc 0c       	add	r11, r12
     200:	bf 0c       	add	r11, r15
     202:	c2 0c       	add	r12, r2
     204:	c5 0c       	add	r12, r5
     206:	c8 0c       	add	r12, r8
     208:	cb 0c       	add	r12, r11
     20a:	b0 17       	cp	r27, r16
     20c:	ab 17       	cp	r26, r27
     20e:	b5 17       	cp	r27, r21
     210:	da 17       	cp	r29, r26
     212:	da 17       	cp	r29, r26
     214:	da 17       	cp	r29, r26
     216:	da 17       	cp	r29, r26
     218:	ba 17       	cp	r27, r26
     21a:	c2 17       	cp	r28, r18
     21c:	da 17       	cp	r29, r26
     21e:	da 17       	cp	r29, r26
     220:	c9 17       	cp	r28, r25
     222:	cd 17       	cp	r28, r29
     224:	d1 17       	cp	r29, r17
     226:	d6 17       	cp	r29, r22

00000228 <__ctors_end>:
     228:	11 24       	eor	r1, r1
     22a:	1f be       	out	0x3f, r1	; 63
     22c:	cf ef       	ldi	r28, 0xFF	; 255
     22e:	cd bf       	out	0x3d, r28	; 61
     230:	df e2       	ldi	r29, 0x2F	; 47
     232:	de bf       	out	0x3e, r29	; 62

00000234 <__do_copy_data>:
     234:	14 e2       	ldi	r17, 0x24	; 36
     236:	a0 e0       	ldi	r26, 0x00	; 0
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	e2 e6       	ldi	r30, 0x62	; 98
     23c:	f1 e5       	ldi	r31, 0x51	; 81
     23e:	02 c0       	rjmp	.+4      	; 0x244 <__do_copy_data+0x10>
     240:	05 90       	lpm	r0, Z+
     242:	0d 92       	st	X+, r0
     244:	a2 33       	cpi	r26, 0x32	; 50
     246:	b1 07       	cpc	r27, r17
     248:	d9 f7       	brne	.-10     	; 0x240 <__do_copy_data+0xc>

0000024a <__do_clear_bss>:
     24a:	27 e2       	ldi	r18, 0x27	; 39
     24c:	a2 e3       	ldi	r26, 0x32	; 50
     24e:	b4 e2       	ldi	r27, 0x24	; 36
     250:	01 c0       	rjmp	.+2      	; 0x254 <.do_clear_bss_start>

00000252 <.do_clear_bss_loop>:
     252:	1d 92       	st	X+, r1

00000254 <.do_clear_bss_start>:
     254:	a3 32       	cpi	r26, 0x23	; 35
     256:	b2 07       	cpc	r27, r18
     258:	e1 f7       	brne	.-8      	; 0x252 <.do_clear_bss_loop>
     25a:	0e 94 69 22 	call	0x44d2	; 0x44d2 <main>
     25e:	0c 94 af 28 	jmp	0x515e	; 0x515e <_exit>

00000262 <__bad_interrupt>:
     262:	ce ce       	rjmp	.-612    	; 0x0 <__vectors>

00000264 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     26a:	c0 3c       	cpi	r28, 0xC0	; 192
     26c:	28 e0       	ldi	r18, 0x08	; 8
     26e:	d2 07       	cpc	r29, r18
     270:	29 f4       	brne	.+10     	; 0x27c <spi_master_init+0x18>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     272:	68 e0       	ldi	r22, 0x08	; 8
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
     27a:	07 c0       	rjmp	.+14     	; 0x28a <spi_master_init+0x26>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     27c:	80 3c       	cpi	r24, 0xC0	; 192
     27e:	99 40       	sbci	r25, 0x09	; 9
     280:	21 f4       	brne	.+8      	; 0x28a <spi_master_init+0x26>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     282:	68 e0       	ldi	r22, 0x08	; 8
     284:	84 e0       	ldi	r24, 0x04	; 4
     286:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
     28a:	88 81       	ld	r24, Y
     28c:	80 61       	ori	r24, 0x10	; 16
     28e:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	ec 01       	movw	r28, r24
     2a2:	f4 2e       	mov	r15, r20
     2a4:	b9 01       	movw	r22, r18
     2a6:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	1c e6       	ldi	r17, 0x6C	; 108
     2ac:	2c ed       	ldi	r18, 0xDC	; 220
     2ae:	32 e0       	ldi	r19, 0x02	; 2
     2b0:	56 d7       	rcall	.+3756   	; 0x115e <spi_xmega_set_baud_div>
     2b2:	88 23       	and	r24, r24
     2b4:	4c f0       	brlt	.+18     	; 0x2c8 <spi_master_setup_device+0x32>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     2b6:	88 81       	ld	r24, Y
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     2b8:	9f 2d       	mov	r25, r15
     2ba:	99 0f       	add	r25, r25
     2bc:	99 0f       	add	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     2be:	9c 70       	andi	r25, 0x0C	; 12
     2c0:	83 7f       	andi	r24, 0xF3	; 243
     2c2:	f9 2e       	mov	r15, r25
     2c4:	f8 2a       	or	r15, r24
     2c6:	f8 82       	st	Y, r15
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	08 95       	ret

000002d4 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     2d4:	fc 01       	movw	r30, r24
     2d6:	db 01       	movw	r26, r22
     2d8:	46 0f       	add	r20, r22
     2da:	57 1f       	adc	r21, r23
	while (len--) {
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <spi_write_packet+0x14>
		spi_write_single(spi, *data++);
     2de:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     2e0:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
		
		while (!spi_is_rx_full(spi)) {
     2e4:	88 23       	and	r24, r24
     2e6:	ec f7       	brge	.-6      	; 0x2e2 <spi_write_packet+0xe>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
     2e8:	a4 17       	cp	r26, r20
     2ea:	b5 07       	cpc	r27, r21
     2ec:	c1 f7       	brne	.-16     	; 0x2de <spi_write_packet+0xa>
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	08 95       	ret

000002f2 <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
     2f2:	fc 01       	movw	r30, r24
     2f4:	db 01       	movw	r26, r22
	while (len--) {
     2f6:	41 15       	cp	r20, r1
     2f8:	51 05       	cpc	r21, r1
     2fa:	61 f0       	breq	.+24     	; 0x314 <spi_read_packet+0x22>
     2fc:	46 0f       	add	r20, r22
     2fe:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     300:	9f ef       	ldi	r25, 0xFF	; 255
     302:	93 83       	std	Z+3, r25	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     304:	82 81       	ldd	r24, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
     306:	88 23       	and	r24, r24
     308:	ec f7       	brge	.-6      	; 0x304 <spi_read_packet+0x12>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
     30a:	83 81       	ldd	r24, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
     30c:	8d 93       	st	X+, r24
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
     30e:	a4 17       	cp	r26, r20
     310:	b5 07       	cpc	r27, r21
     312:	b9 f7       	brne	.-18     	; 0x302 <spi_read_packet+0x10>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	08 95       	ret

00000318 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_level(device->id,0);
     318:	fb 01       	movw	r30, r22
     31a:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     31c:	e8 2f       	mov	r30, r24
     31e:	e6 95       	lsr	r30
     320:	e6 95       	lsr	r30
     322:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     324:	40 e2       	ldi	r20, 0x20	; 32
     326:	e4 9f       	mul	r30, r20
     328:	f0 01       	movw	r30, r0
     32a:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     32c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     32e:	87 70       	andi	r24, 0x07	; 7
     330:	21 e0       	ldi	r18, 0x01	; 1
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	a9 01       	movw	r20, r18
     336:	02 c0       	rjmp	.+4      	; 0x33c <spi_select_device+0x24>
     338:	44 0f       	add	r20, r20
     33a:	55 1f       	adc	r21, r21
     33c:	8a 95       	dec	r24
     33e:	e2 f7       	brpl	.-8      	; 0x338 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     340:	46 83       	std	Z+6, r20	; 0x06
     342:	08 95       	ret

00000344 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_level(device->id,1);
     344:	fb 01       	movw	r30, r22
     346:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     348:	e8 2f       	mov	r30, r24
     34a:	e6 95       	lsr	r30
     34c:	e6 95       	lsr	r30
     34e:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     350:	40 e2       	ldi	r20, 0x20	; 32
     352:	e4 9f       	mul	r30, r20
     354:	f0 01       	movw	r30, r0
     356:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     358:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     35a:	87 70       	andi	r24, 0x07	; 7
     35c:	21 e0       	ldi	r18, 0x01	; 1
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	a9 01       	movw	r20, r18
     362:	02 c0       	rjmp	.+4      	; 0x368 <spi_deselect_device+0x24>
     364:	44 0f       	add	r20, r20
     366:	55 1f       	adc	r21, r21
     368:	8a 95       	dec	r24
     36a:	e2 f7       	brpl	.-8      	; 0x364 <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     36c:	45 83       	std	Z+5, r20	; 0x05
     36e:	08 95       	ret

00000370 <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     370:	10 92 48 25 	sts	0x2548, r1
     374:	10 92 54 25 	sts	0x2554, r1
     378:	10 92 55 25 	sts	0x2555, r1
     37c:	81 ea       	ldi	r24, 0xA1	; 161
     37e:	80 93 4a 25 	sts	0x254A, r24
     382:	80 e2       	ldi	r24, 0x20	; 32
     384:	80 93 4b 25 	sts	0x254B, r24
     388:	10 92 4c 25 	sts	0x254C, r1
     38c:	10 92 4d 25 	sts	0x254D, r1
     390:	10 92 4e 25 	sts	0x254E, r1
     394:	10 92 4f 25 	sts	0x254F, r1
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	80 93 50 25 	sts	0x2550, r24
     3a0:	90 93 51 25 	sts	0x2551, r25
     3a4:	10 92 52 25 	sts	0x2552, r1
     3a8:	10 92 53 25 	sts	0x2553, r1
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	92 ec       	ldi	r25, 0xC2	; 194
     3b0:	a1 e0       	ldi	r26, 0x01	; 1
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	80 93 56 25 	sts	0x2556, r24
     3b8:	90 93 57 25 	sts	0x2557, r25
     3bc:	a0 93 58 25 	sts	0x2558, r26
     3c0:	b0 93 59 25 	sts	0x2559, r27
     3c4:	10 92 5a 25 	sts	0x255A, r1
     3c8:	10 92 5b 25 	sts	0x255B, r1
     3cc:	88 e0       	ldi	r24, 0x08	; 8
     3ce:	80 93 5c 25 	sts	0x255C, r24
     3d2:	80 91 48 25 	lds	r24, 0x2548
     3d6:	8f 5f       	subi	r24, 0xFF	; 255
     3d8:	80 93 48 25 	sts	0x2548, r24
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	08 95       	ret

000003e0 <udi_cdc_comm_disable>:
     3e0:	80 91 48 25 	lds	r24, 0x2548
     3e4:	81 50       	subi	r24, 0x01	; 1
     3e6:	80 93 48 25 	sts	0x2548, r24
     3ea:	08 95       	ret

000003ec <udi_cdc_data_disable>:
     3ec:	80 91 47 25 	lds	r24, 0x2547
     3f0:	81 50       	subi	r24, 0x01	; 1
     3f2:	80 93 47 25 	sts	0x2547, r24
     3f6:	80 91 47 25 	lds	r24, 0x2547
     3fa:	10 92 46 25 	sts	0x2546, r1
     3fe:	08 95       	ret

00000400 <udi_cdc_data_setup>:
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	08 95       	ret

00000404 <udi_cdc_getsetting>:
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	08 95       	ret

00000408 <udi_cdc_comm_setup>:
     408:	80 91 06 27 	lds	r24, 0x2706
     40c:	88 23       	and	r24, r24
     40e:	dc f4       	brge	.+54     	; 0x446 <udi_cdc_comm_setup+0x3e>
     410:	80 76       	andi	r24, 0x60	; 96
     412:	80 32       	cpi	r24, 0x20	; 32
     414:	e9 f5       	brne	.+122    	; 0x490 <udi_cdc_comm_setup+0x88>
     416:	80 91 07 27 	lds	r24, 0x2707
     41a:	81 32       	cpi	r24, 0x21	; 33
     41c:	d9 f5       	brne	.+118    	; 0x494 <udi_cdc_comm_setup+0x8c>
     41e:	80 91 0c 27 	lds	r24, 0x270C
     422:	90 91 0d 27 	lds	r25, 0x270D
     426:	07 97       	sbiw	r24, 0x07	; 7
     428:	b9 f5       	brne	.+110    	; 0x498 <udi_cdc_comm_setup+0x90>
     42a:	86 e5       	ldi	r24, 0x56	; 86
     42c:	95 e2       	ldi	r25, 0x25	; 37
     42e:	80 93 0e 27 	sts	0x270E, r24
     432:	90 93 0f 27 	sts	0x270F, r25
     436:	87 e0       	ldi	r24, 0x07	; 7
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	80 93 10 27 	sts	0x2710, r24
     43e:	90 93 11 27 	sts	0x2711, r25
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	08 95       	ret
     446:	80 76       	andi	r24, 0x60	; 96
     448:	80 32       	cpi	r24, 0x20	; 32
     44a:	41 f5       	brne	.+80     	; 0x49c <udi_cdc_comm_setup+0x94>
     44c:	80 91 07 27 	lds	r24, 0x2707
     450:	80 32       	cpi	r24, 0x20	; 32
     452:	21 f0       	breq	.+8      	; 0x45c <udi_cdc_comm_setup+0x54>
     454:	82 32       	cpi	r24, 0x22	; 34
     456:	21 f5       	brne	.+72     	; 0x4a0 <udi_cdc_comm_setup+0x98>
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	08 95       	ret
     45c:	80 91 0c 27 	lds	r24, 0x270C
     460:	90 91 0d 27 	lds	r25, 0x270D
     464:	07 97       	sbiw	r24, 0x07	; 7
     466:	f1 f4       	brne	.+60     	; 0x4a4 <udi_cdc_comm_setup+0x9c>
     468:	84 e5       	ldi	r24, 0x54	; 84
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	80 93 12 27 	sts	0x2712, r24
     470:	90 93 13 27 	sts	0x2713, r25
     474:	86 e5       	ldi	r24, 0x56	; 86
     476:	95 e2       	ldi	r25, 0x25	; 37
     478:	80 93 0e 27 	sts	0x270E, r24
     47c:	90 93 0f 27 	sts	0x270F, r25
     480:	87 e0       	ldi	r24, 0x07	; 7
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	80 93 10 27 	sts	0x2710, r24
     488:	90 93 11 27 	sts	0x2711, r25
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	08 95       	ret
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	08 95       	ret
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	08 95       	ret
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	08 95       	ret
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	08 95       	ret
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	08 95       	ret
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	08 95       	ret

000004a8 <udi_cdc_line_coding_received>:
     4a8:	08 95       	ret

000004aa <udi_cdc_tx_send>:
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	80 91 35 24 	lds	r24, 0x2435
     4b8:	81 11       	cpse	r24, r1
     4ba:	9c c0       	rjmp	.+312    	; 0x5f4 <udi_cdc_tx_send+0x14a>
     4bc:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <udd_is_high_speed>
     4c0:	88 23       	and	r24, r24
     4c2:	51 f0       	breq	.+20     	; 0x4d8 <udi_cdc_tx_send+0x2e>
     4c4:	c0 91 36 24 	lds	r28, 0x2436
     4c8:	d0 91 37 24 	lds	r29, 0x2437
     4cc:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <udd_get_micro_frame_number>
     4d0:	c8 17       	cp	r28, r24
     4d2:	d9 07       	cpc	r29, r25
     4d4:	59 f4       	brne	.+22     	; 0x4ec <udi_cdc_tx_send+0x42>
     4d6:	8e c0       	rjmp	.+284    	; 0x5f4 <udi_cdc_tx_send+0x14a>
     4d8:	c0 91 36 24 	lds	r28, 0x2436
     4dc:	d0 91 37 24 	lds	r29, 0x2437
     4e0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <udd_get_frame_number>
     4e4:	c8 17       	cp	r28, r24
     4e6:	d9 07       	cpc	r29, r25
     4e8:	09 f4       	brne	.+2      	; 0x4ec <udi_cdc_tx_send+0x42>
     4ea:	84 c0       	rjmp	.+264    	; 0x5f4 <udi_cdc_tx_send+0x14a>
     4ec:	df b7       	in	r29, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	c0 91 38 24 	lds	r28, 0x2438
     4f4:	ec 2f       	mov	r30, r28
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	ee 0f       	add	r30, r30
     4fa:	ff 1f       	adc	r31, r31
     4fc:	e7 5c       	subi	r30, 0xC7	; 199
     4fe:	fb 4d       	sbci	r31, 0xDB	; 219
     500:	80 81       	ld	r24, Z
     502:	91 81       	ldd	r25, Z+1	; 0x01
     504:	89 2b       	or	r24, r25
     506:	09 f5       	brne	.+66     	; 0x54a <udi_cdc_tx_send+0xa0>
     508:	80 91 32 24 	lds	r24, 0x2432
     50c:	90 91 33 24 	lds	r25, 0x2433
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	80 93 32 24 	sts	0x2432, r24
     516:	90 93 33 24 	sts	0x2433, r25
     51a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <udd_is_high_speed>
     51e:	81 11       	cpse	r24, r1
     520:	07 c0       	rjmp	.+14     	; 0x530 <udi_cdc_tx_send+0x86>
     522:	80 91 32 24 	lds	r24, 0x2432
     526:	90 91 33 24 	lds	r25, 0x2433
     52a:	84 36       	cpi	r24, 0x64	; 100
     52c:	91 05       	cpc	r25, r1
     52e:	58 f0       	brcs	.+22     	; 0x546 <udi_cdc_tx_send+0x9c>
     530:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <udd_is_high_speed>
     534:	88 23       	and	r24, r24
     536:	49 f0       	breq	.+18     	; 0x54a <udi_cdc_tx_send+0xa0>
     538:	80 91 32 24 	lds	r24, 0x2432
     53c:	90 91 33 24 	lds	r25, 0x2433
     540:	80 32       	cpi	r24, 0x20	; 32
     542:	93 40       	sbci	r25, 0x03	; 3
     544:	10 f4       	brcc	.+4      	; 0x54a <udi_cdc_tx_send+0xa0>
     546:	df bf       	out	0x3f, r29	; 63
     548:	55 c0       	rjmp	.+170    	; 0x5f4 <udi_cdc_tx_send+0x14a>
     54a:	10 92 32 24 	sts	0x2432, r1
     54e:	10 92 33 24 	sts	0x2433, r1
     552:	80 91 34 24 	lds	r24, 0x2434
     556:	81 11       	cpse	r24, r1
     558:	06 c0       	rjmp	.+12     	; 0x566 <udi_cdc_tx_send+0xbc>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	c1 11       	cpse	r28, r1
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	80 93 38 24 	sts	0x2438, r24
     564:	04 c0       	rjmp	.+8      	; 0x56e <udi_cdc_tx_send+0xc4>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	c1 11       	cpse	r28, r1
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	c8 2f       	mov	r28, r24
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 35 24 	sts	0x2435, r24
     574:	df bf       	out	0x3f, r29	; 63
     576:	d0 e0       	ldi	r29, 0x00	; 0
     578:	fe 01       	movw	r30, r28
     57a:	ee 0f       	add	r30, r30
     57c:	ff 1f       	adc	r31, r31
     57e:	e7 5c       	subi	r30, 0xC7	; 199
     580:	fb 4d       	sbci	r31, 0xDB	; 219
     582:	ff 24       	eor	r15, r15
     584:	f3 94       	inc	r15
     586:	80 81       	ld	r24, Z
     588:	91 81       	ldd	r25, Z+1	; 0x01
     58a:	80 34       	cpi	r24, 0x40	; 64
     58c:	91 05       	cpc	r25, r1
     58e:	09 f4       	brne	.+2      	; 0x592 <udi_cdc_tx_send+0xe8>
     590:	f1 2c       	mov	r15, r1
     592:	ff 20       	and	r15, r15
     594:	91 f0       	breq	.+36     	; 0x5ba <udi_cdc_tx_send+0x110>
     596:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <udd_is_high_speed>
     59a:	88 23       	and	r24, r24
     59c:	39 f0       	breq	.+14     	; 0x5ac <udi_cdc_tx_send+0x102>
     59e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <udd_get_micro_frame_number>
     5a2:	80 93 36 24 	sts	0x2436, r24
     5a6:	90 93 37 24 	sts	0x2437, r25
     5aa:	0b c0       	rjmp	.+22     	; 0x5c2 <udi_cdc_tx_send+0x118>
     5ac:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <udd_get_frame_number>
     5b0:	80 93 36 24 	sts	0x2436, r24
     5b4:	90 93 37 24 	sts	0x2437, r25
     5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <udi_cdc_tx_send+0x118>
     5ba:	10 92 36 24 	sts	0x2436, r1
     5be:	10 92 37 24 	sts	0x2437, r1
     5c2:	fe 01       	movw	r30, r28
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	e7 5c       	subi	r30, 0xC7	; 199
     5ca:	fb 4d       	sbci	r31, 0xDB	; 219
     5cc:	20 81       	ld	r18, Z
     5ce:	31 81       	ldd	r19, Z+1	; 0x01
     5d0:	ae 01       	movw	r20, r28
     5d2:	00 24       	eor	r0, r0
     5d4:	56 95       	lsr	r21
     5d6:	47 95       	ror	r20
     5d8:	07 94       	ror	r0
     5da:	56 95       	lsr	r21
     5dc:	47 95       	ror	r20
     5de:	07 94       	ror	r0
     5e0:	54 2f       	mov	r21, r20
     5e2:	40 2d       	mov	r20, r0
     5e4:	42 5c       	subi	r20, 0xC2	; 194
     5e6:	5b 4d       	sbci	r21, 0xDB	; 219
     5e8:	00 e0       	ldi	r16, 0x00	; 0
     5ea:	13 e0       	ldi	r17, 0x03	; 3
     5ec:	6f 2d       	mov	r22, r15
     5ee:	81 e8       	ldi	r24, 0x81	; 129
     5f0:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <udd_ep_run>
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	08 95       	ret

00000600 <udi_cdc_data_sent>:
     600:	81 11       	cpse	r24, r1
     602:	15 c0       	rjmp	.+42     	; 0x62e <udi_cdc_data_sent+0x2e>
     604:	20 91 38 24 	lds	r18, 0x2438
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	22 23       	and	r18, r18
     60e:	11 f0       	breq	.+4      	; 0x614 <udi_cdc_data_sent+0x14>
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	fc 01       	movw	r30, r24
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	e7 5c       	subi	r30, 0xC7	; 199
     61c:	fb 4d       	sbci	r31, 0xDB	; 219
     61e:	10 82       	st	Z, r1
     620:	11 82       	std	Z+1, r1	; 0x01
     622:	10 92 34 24 	sts	0x2434, r1
     626:	10 92 35 24 	sts	0x2435, r1
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	3e cf       	rjmp	.-388    	; 0x4aa <udi_cdc_tx_send>
     62e:	08 95       	ret

00000630 <udi_cdc_data_sof_notify>:
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	3b cf       	rjmp	.-394    	; 0x4aa <udi_cdc_tx_send>
     634:	08 95       	ret

00000636 <udi_cdc_multi_get_nb_received_data>:
     636:	4f b7       	in	r20, 0x3f	; 63
     638:	f8 94       	cli
     63a:	20 91 bf 24 	lds	r18, 0x24BF
     63e:	30 91 c0 24 	lds	r19, 0x24C0
     642:	e0 91 c1 24 	lds	r30, 0x24C1
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	ee 53       	subi	r30, 0x3E	; 62
     64e:	fb 4d       	sbci	r31, 0xDB	; 219
     650:	80 81       	ld	r24, Z
     652:	91 81       	ldd	r25, Z+1	; 0x01
     654:	82 1b       	sub	r24, r18
     656:	93 0b       	sbc	r25, r19
     658:	4f bf       	out	0x3f, r20	; 63
     65a:	08 95       	ret

0000065c <udi_cdc_multi_is_rx_ready>:
     65c:	ec df       	rcall	.-40     	; 0x636 <udi_cdc_multi_get_nb_received_data>
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	89 2b       	or	r24, r25
     662:	09 f4       	brne	.+2      	; 0x666 <udi_cdc_multi_is_rx_ready+0xa>
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	82 2f       	mov	r24, r18
     668:	08 95       	ret

0000066a <udi_cdc_rx_start>:
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	4f b7       	in	r20, 0x3f	; 63
     674:	f8 94       	cli
     676:	50 91 c1 24 	lds	r21, 0x24C1
     67a:	80 91 be 24 	lds	r24, 0x24BE
     67e:	81 11       	cpse	r24, r1
     680:	10 c0       	rjmp	.+32     	; 0x6a2 <udi_cdc_rx_start+0x38>
     682:	20 91 bf 24 	lds	r18, 0x24BF
     686:	30 91 c0 24 	lds	r19, 0x24C0
     68a:	c5 2f       	mov	r28, r21
     68c:	d0 e0       	ldi	r29, 0x00	; 0
     68e:	fe 01       	movw	r30, r28
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	ee 53       	subi	r30, 0x3E	; 62
     696:	fb 4d       	sbci	r31, 0xDB	; 219
     698:	80 81       	ld	r24, Z
     69a:	91 81       	ldd	r25, Z+1	; 0x01
     69c:	28 17       	cp	r18, r24
     69e:	39 07       	cpc	r19, r25
     6a0:	18 f4       	brcc	.+6      	; 0x6a8 <udi_cdc_rx_start+0x3e>
     6a2:	4f bf       	out	0x3f, r20	; 63
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	23 c0       	rjmp	.+70     	; 0x6ee <udi_cdc_rx_start+0x84>
     6a8:	10 92 bf 24 	sts	0x24BF, r1
     6ac:	10 92 c0 24 	sts	0x24C0, r1
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	51 11       	cpse	r21, r1
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	80 93 c1 24 	sts	0x24C1, r24
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	80 93 be 24 	sts	0x24BE, r24
     6c0:	4f bf       	out	0x3f, r20	; 63
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	cb df       	rcall	.-106    	; 0x65c <udi_cdc_multi_is_rx_ready>
     6c6:	ae 01       	movw	r20, r28
     6c8:	00 24       	eor	r0, r0
     6ca:	56 95       	lsr	r21
     6cc:	47 95       	ror	r20
     6ce:	07 94       	ror	r0
     6d0:	56 95       	lsr	r21
     6d2:	47 95       	ror	r20
     6d4:	07 94       	ror	r0
     6d6:	54 2f       	mov	r21, r20
     6d8:	40 2d       	mov	r20, r0
     6da:	4a 53       	subi	r20, 0x3A	; 58
     6dc:	5b 4d       	sbci	r21, 0xDB	; 219
     6de:	0e ea       	ldi	r16, 0xAE	; 174
     6e0:	13 e0       	ldi	r17, 0x03	; 3
     6e2:	20 e4       	ldi	r18, 0x40	; 64
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <udd_ep_run>
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret

000006f8 <udi_cdc_data_enable>:
     6f8:	10 92 47 25 	sts	0x2547, r1
     6fc:	10 92 35 24 	sts	0x2435, r1
     700:	10 92 34 24 	sts	0x2434, r1
     704:	10 92 38 24 	sts	0x2438, r1
     708:	10 92 39 24 	sts	0x2439, r1
     70c:	10 92 3a 24 	sts	0x243A, r1
     710:	10 92 3b 24 	sts	0x243B, r1
     714:	10 92 3c 24 	sts	0x243C, r1
     718:	10 92 36 24 	sts	0x2436, r1
     71c:	10 92 37 24 	sts	0x2437, r1
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	c3 de       	rcall	.-634    	; 0x4aa <udi_cdc_tx_send>
     724:	10 92 be 24 	sts	0x24BE, r1
     728:	10 92 c1 24 	sts	0x24C1, r1
     72c:	10 92 c2 24 	sts	0x24C2, r1
     730:	10 92 c3 24 	sts	0x24C3, r1
     734:	10 92 bf 24 	sts	0x24BF, r1
     738:	10 92 c0 24 	sts	0x24C0, r1
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	95 df       	rcall	.-214    	; 0x66a <udi_cdc_rx_start>
     740:	88 23       	and	r24, r24
     742:	59 f0       	breq	.+22     	; 0x75a <udi_cdc_data_enable+0x62>
     744:	90 91 47 25 	lds	r25, 0x2547
     748:	9f 5f       	subi	r25, 0xFF	; 255
     74a:	90 93 47 25 	sts	0x2547, r25
     74e:	90 91 47 25 	lds	r25, 0x2547
     752:	91 30       	cpi	r25, 0x01	; 1
     754:	11 f4       	brne	.+4      	; 0x75a <udi_cdc_data_enable+0x62>
     756:	90 93 46 25 	sts	0x2546, r25
     75a:	08 95       	ret

0000075c <udi_cdc_data_received>:
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	94 2f       	mov	r25, r20
     762:	81 11       	cpse	r24, r1
     764:	29 c0       	rjmp	.+82     	; 0x7b8 <udi_cdc_data_received+0x5c>
     766:	80 91 c1 24 	lds	r24, 0x24C1
     76a:	e1 e0       	ldi	r30, 0x01	; 1
     76c:	81 11       	cpse	r24, r1
     76e:	e0 e0       	ldi	r30, 0x00	; 0
     770:	61 15       	cp	r22, r1
     772:	71 05       	cpc	r23, r1
     774:	b1 f4       	brne	.+44     	; 0x7a2 <udi_cdc_data_received+0x46>
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	00 24       	eor	r0, r0
     77a:	f6 95       	lsr	r31
     77c:	e7 95       	ror	r30
     77e:	07 94       	ror	r0
     780:	f6 95       	lsr	r31
     782:	e7 95       	ror	r30
     784:	07 94       	ror	r0
     786:	fe 2f       	mov	r31, r30
     788:	e0 2d       	mov	r30, r0
     78a:	af 01       	movw	r20, r30
     78c:	4a 53       	subi	r20, 0x3A	; 58
     78e:	5b 4d       	sbci	r21, 0xDB	; 219
     790:	0e ea       	ldi	r16, 0xAE	; 174
     792:	13 e0       	ldi	r17, 0x03	; 3
     794:	20 e4       	ldi	r18, 0x40	; 64
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	89 2f       	mov	r24, r25
     79c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <udd_ep_run>
     7a0:	0b c0       	rjmp	.+22     	; 0x7b8 <udi_cdc_data_received+0x5c>
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	ee 0f       	add	r30, r30
     7a6:	ff 1f       	adc	r31, r31
     7a8:	ee 53       	subi	r30, 0x3E	; 62
     7aa:	fb 4d       	sbci	r31, 0xDB	; 219
     7ac:	60 83       	st	Z, r22
     7ae:	71 83       	std	Z+1, r23	; 0x01
     7b0:	10 92 be 24 	sts	0x24BE, r1
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	59 df       	rcall	.-334    	; 0x66a <udi_cdc_rx_start>
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	08 95       	ret

000007be <udi_cdc_is_rx_ready>:
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	4d cf       	rjmp	.-358    	; 0x65c <udi_cdc_multi_is_rx_ready>
     7c2:	08 95       	ret

000007c4 <udi_cdc_multi_getc>:
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	11 e0       	ldi	r17, 0x01	; 1
     7cc:	80 91 5c 25 	lds	r24, 0x255C
     7d0:	89 30       	cpi	r24, 0x09	; 9
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <udi_cdc_multi_getc+0x12>
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	3f b7       	in	r19, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	80 91 bf 24 	lds	r24, 0x24BF
     7e2:	90 91 c0 24 	lds	r25, 0x24C0
     7e6:	20 91 c1 24 	lds	r18, 0x24C1
     7ea:	3f bf       	out	0x3f, r19	; 63
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	f9 01       	movw	r30, r18
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	ee 53       	subi	r30, 0x3E	; 62
     7f6:	fb 4d       	sbci	r31, 0xDB	; 219
     7f8:	40 81       	ld	r20, Z
     7fa:	51 81       	ldd	r21, Z+1	; 0x01
     7fc:	84 17       	cp	r24, r20
     7fe:	95 07       	cpc	r25, r21
     800:	30 f0       	brcs	.+12     	; 0x80e <udi_cdc_multi_getc+0x4a>
     802:	80 91 46 25 	lds	r24, 0x2546
     806:	81 11       	cpse	r24, r1
     808:	e8 cf       	rjmp	.-48     	; 0x7da <udi_cdc_multi_getc+0x16>
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	20 c0       	rjmp	.+64     	; 0x84e <udi_cdc_multi_getc+0x8a>
     80e:	f9 01       	movw	r30, r18
     810:	00 24       	eor	r0, r0
     812:	f6 95       	lsr	r31
     814:	e7 95       	ror	r30
     816:	07 94       	ror	r0
     818:	f6 95       	lsr	r31
     81a:	e7 95       	ror	r30
     81c:	07 94       	ror	r0
     81e:	fe 2f       	mov	r31, r30
     820:	e0 2d       	mov	r30, r0
     822:	e8 0f       	add	r30, r24
     824:	f9 1f       	adc	r31, r25
     826:	ea 53       	subi	r30, 0x3A	; 58
     828:	fb 4d       	sbci	r31, 0xDB	; 219
     82a:	20 81       	ld	r18, Z
     82c:	eb 01       	movw	r28, r22
     82e:	c2 2b       	or	r28, r18
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	80 93 bf 24 	sts	0x24BF, r24
     836:	90 93 c0 24 	sts	0x24C0, r25
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	16 df       	rcall	.-468    	; 0x66a <udi_cdc_rx_start>
     83e:	11 23       	and	r17, r17
     840:	21 f0       	breq	.+8      	; 0x84a <udi_cdc_multi_getc+0x86>
     842:	7c 2f       	mov	r23, r28
     844:	66 27       	eor	r22, r22
     846:	10 e0       	ldi	r17, 0x00	; 0
     848:	c8 cf       	rjmp	.-112    	; 0x7da <udi_cdc_multi_getc+0x16>
     84a:	8c 2f       	mov	r24, r28
     84c:	9d 2f       	mov	r25, r29
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	08 95       	ret

00000856 <udi_cdc_getc>:
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	b5 cf       	rjmp	.-150    	; 0x7c4 <udi_cdc_multi_getc>
     85a:	08 95       	ret

0000085c <udi_cdc_multi_get_free_tx_buffer>:
     85c:	9f b7       	in	r25, 0x3f	; 63
     85e:	f8 94       	cli
     860:	80 91 38 24 	lds	r24, 0x2438
     864:	e8 2f       	mov	r30, r24
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	ee 0f       	add	r30, r30
     86a:	ff 1f       	adc	r31, r31
     86c:	e7 5c       	subi	r30, 0xC7	; 199
     86e:	fb 4d       	sbci	r31, 0xDB	; 219
     870:	20 81       	ld	r18, Z
     872:	31 81       	ldd	r19, Z+1	; 0x01
     874:	20 34       	cpi	r18, 0x40	; 64
     876:	31 05       	cpc	r19, r1
     878:	89 f4       	brne	.+34     	; 0x89c <udi_cdc_multi_get_free_tx_buffer+0x40>
     87a:	40 91 35 24 	lds	r20, 0x2435
     87e:	41 11       	cpse	r20, r1
     880:	0d c0       	rjmp	.+26     	; 0x89c <udi_cdc_multi_get_free_tx_buffer+0x40>
     882:	40 91 34 24 	lds	r20, 0x2434
     886:	41 11       	cpse	r20, r1
     888:	09 c0       	rjmp	.+18     	; 0x89c <udi_cdc_multi_get_free_tx_buffer+0x40>
     88a:	21 e0       	ldi	r18, 0x01	; 1
     88c:	20 93 34 24 	sts	0x2434, r18
     890:	81 11       	cpse	r24, r1
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	20 93 38 24 	sts	0x2438, r18
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	9f bf       	out	0x3f, r25	; 63
     89e:	80 e4       	ldi	r24, 0x40	; 64
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	82 1b       	sub	r24, r18
     8a4:	93 0b       	sbc	r25, r19
     8a6:	08 95       	ret

000008a8 <udi_cdc_multi_is_tx_ready>:
     8a8:	d9 df       	rcall	.-78     	; 0x85c <udi_cdc_multi_get_free_tx_buffer>
     8aa:	21 e0       	ldi	r18, 0x01	; 1
     8ac:	89 2b       	or	r24, r25
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <udi_cdc_multi_is_tx_ready+0xa>
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	82 2f       	mov	r24, r18
     8b4:	08 95       	ret

000008b6 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	16 2f       	mov	r17, r22
     8be:	c7 2f       	mov	r28, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     8c0:	d1 e0       	ldi	r29, 0x01	; 1
     8c2:	80 91 5c 25 	lds	r24, 0x255C
     8c6:	89 30       	cpi	r24, 0x09	; 9
     8c8:	09 f0       	breq	.+2      	; 0x8cc <udi_cdc_multi_putc+0x16>
     8ca:	d0 e0       	ldi	r29, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	ec df       	rcall	.-40     	; 0x8a8 <udi_cdc_multi_is_tx_ready>
     8d0:	81 11       	cpse	r24, r1
     8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <udi_cdc_multi_putc+0x2c>
		if (!udi_cdc_data_running) {
     8d4:	80 91 46 25 	lds	r24, 0x2546
     8d8:	81 11       	cpse	r24, r1
     8da:	f8 cf       	rjmp	.-16     	; 0x8cc <udi_cdc_multi_putc+0x16>
			return false;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	2b c0       	rjmp	.+86     	; 0x938 <udi_cdc_multi_putc+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8e2:	6f b7       	in	r22, 0x3f	; 63
	cpu_irq_disable();
     8e4:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     8e6:	20 91 38 24 	lds	r18, 0x2438
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	f9 01       	movw	r30, r18
     8ee:	ee 0f       	add	r30, r30
     8f0:	ff 1f       	adc	r31, r31
     8f2:	e7 5c       	subi	r30, 0xC7	; 199
     8f4:	fb 4d       	sbci	r31, 0xDB	; 219
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	ac 01       	movw	r20, r24
     8fc:	4f 5f       	subi	r20, 0xFF	; 255
     8fe:	5f 4f       	sbci	r21, 0xFF	; 255
     900:	40 83       	st	Z, r20
     902:	51 83       	std	Z+1, r21	; 0x01
     904:	f9 01       	movw	r30, r18
     906:	00 24       	eor	r0, r0
     908:	f6 95       	lsr	r31
     90a:	e7 95       	ror	r30
     90c:	07 94       	ror	r0
     90e:	f6 95       	lsr	r31
     910:	e7 95       	ror	r30
     912:	07 94       	ror	r0
     914:	fe 2f       	mov	r31, r30
     916:	e0 2d       	mov	r30, r0
     918:	8e 0f       	add	r24, r30
     91a:	9f 1f       	adc	r25, r31
     91c:	fc 01       	movw	r30, r24
     91e:	e2 5c       	subi	r30, 0xC2	; 194
     920:	fb 4d       	sbci	r31, 0xDB	; 219
     922:	10 83       	st	Z, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     924:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     926:	dd 23       	and	r29, r29
     928:	29 f0       	breq	.+10     	; 0x934 <udi_cdc_multi_putc+0x7e>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     92a:	1c 2f       	mov	r17, r28
     92c:	cc 0f       	add	r28, r28
     92e:	cc 0b       	sbc	r28, r28
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     930:	d0 e0       	ldi	r29, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     932:	cc cf       	rjmp	.-104    	; 0x8cc <udi_cdc_multi_putc+0x16>
	}
	return true;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	08 95       	ret

00000940 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     940:	bc 01       	movw	r22, r24
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	b8 cf       	rjmp	.-144    	; 0x8b6 <udi_cdc_multi_putc>
}
     946:	08 95       	ret

00000948 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     948:	e0 91 62 25 	lds	r30, 0x2562
     94c:	f0 91 63 25 	lds	r31, 0x2563
     950:	01 90       	ld	r0, Z+
     952:	f0 81       	ld	r31, Z
     954:	e0 2d       	mov	r30, r0
     956:	22 81       	ldd	r18, Z+2	; 0x02
     958:	33 81       	ldd	r19, Z+3	; 0x03
     95a:	2e 0f       	add	r18, r30
     95c:	3f 1f       	adc	r19, r31
     95e:	fc 01       	movw	r30, r24
     960:	40 81       	ld	r20, Z
     962:	e4 0f       	add	r30, r20
     964:	f1 1d       	adc	r31, r1
     966:	e2 17       	cp	r30, r18
     968:	f3 07       	cpc	r31, r19
     96a:	a0 f4       	brcc	.+40     	; 0x994 <udc_next_desc_in_iface+0x4c>
     96c:	81 81       	ldd	r24, Z+1	; 0x01
     96e:	84 30       	cpi	r24, 0x04	; 4
     970:	a1 f0       	breq	.+40     	; 0x99a <udc_next_desc_in_iface+0x52>
     972:	86 13       	cpse	r24, r22
     974:	06 c0       	rjmp	.+12     	; 0x982 <udc_next_desc_in_iface+0x3a>
     976:	14 c0       	rjmp	.+40     	; 0x9a0 <udc_next_desc_in_iface+0x58>
     978:	81 81       	ldd	r24, Z+1	; 0x01
     97a:	84 30       	cpi	r24, 0x04	; 4
     97c:	a1 f0       	breq	.+40     	; 0x9a6 <udc_next_desc_in_iface+0x5e>
     97e:	86 17       	cp	r24, r22
     980:	a9 f0       	breq	.+42     	; 0x9ac <udc_next_desc_in_iface+0x64>
     982:	80 81       	ld	r24, Z
     984:	e8 0f       	add	r30, r24
     986:	f1 1d       	adc	r31, r1
     988:	e2 17       	cp	r30, r18
     98a:	f3 07       	cpc	r31, r19
     98c:	a8 f3       	brcs	.-22     	; 0x978 <udc_next_desc_in_iface+0x30>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	08 95       	ret
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	08 95       	ret
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	08 95       	ret
     9a0:	8e 2f       	mov	r24, r30
     9a2:	9f 2f       	mov	r25, r31
     9a4:	08 95       	ret
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	08 95       	ret
     9ac:	8e 2f       	mov	r24, r30
     9ae:	9f 2f       	mov	r25, r31
     9b0:	08 95       	ret

000009b2 <udc_valid_address>:
     9b2:	80 91 08 27 	lds	r24, 0x2708
     9b6:	8f 77       	andi	r24, 0x7F	; 127
     9b8:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <udd_set_address>
     9bc:	08 95       	ret

000009be <udc_update_iface_desc>:
     9be:	90 91 64 25 	lds	r25, 0x2564
     9c2:	99 23       	and	r25, r25
     9c4:	81 f1       	breq	.+96     	; 0xa26 <udc_update_iface_desc+0x68>
     9c6:	e0 91 62 25 	lds	r30, 0x2562
     9ca:	f0 91 63 25 	lds	r31, 0x2563
     9ce:	01 90       	ld	r0, Z+
     9d0:	f0 81       	ld	r31, Z
     9d2:	e0 2d       	mov	r30, r0
     9d4:	94 81       	ldd	r25, Z+4	; 0x04
     9d6:	89 17       	cp	r24, r25
     9d8:	40 f5       	brcc	.+80     	; 0xa2a <udc_update_iface_desc+0x6c>
     9da:	e0 93 60 25 	sts	0x2560, r30
     9de:	f0 93 61 25 	sts	0x2561, r31
     9e2:	22 81       	ldd	r18, Z+2	; 0x02
     9e4:	33 81       	ldd	r19, Z+3	; 0x03
     9e6:	2e 0f       	add	r18, r30
     9e8:	3f 1f       	adc	r19, r31
     9ea:	e2 17       	cp	r30, r18
     9ec:	f3 07       	cpc	r31, r19
     9ee:	f8 f4       	brcc	.+62     	; 0xa2e <udc_update_iface_desc+0x70>
     9f0:	91 81       	ldd	r25, Z+1	; 0x01
     9f2:	94 30       	cpi	r25, 0x04	; 4
     9f4:	61 f4       	brne	.+24     	; 0xa0e <udc_update_iface_desc+0x50>
     9f6:	92 81       	ldd	r25, Z+2	; 0x02
     9f8:	98 13       	cpse	r25, r24
     9fa:	09 c0       	rjmp	.+18     	; 0xa0e <udc_update_iface_desc+0x50>
     9fc:	93 81       	ldd	r25, Z+3	; 0x03
     9fe:	96 13       	cpse	r25, r22
     a00:	06 c0       	rjmp	.+12     	; 0xa0e <udc_update_iface_desc+0x50>
     a02:	e0 93 60 25 	sts	0x2560, r30
     a06:	f0 93 61 25 	sts	0x2561, r31
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	08 95       	ret
     a0e:	90 81       	ld	r25, Z
     a10:	e9 0f       	add	r30, r25
     a12:	f1 1d       	adc	r31, r1
     a14:	e2 17       	cp	r30, r18
     a16:	f3 07       	cpc	r31, r19
     a18:	58 f3       	brcs	.-42     	; 0x9f0 <udc_update_iface_desc+0x32>
     a1a:	e0 93 60 25 	sts	0x2560, r30
     a1e:	f0 93 61 25 	sts	0x2561, r31
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	08 95       	ret
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	08 95       	ret
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	08 95       	ret
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	08 95       	ret

00000a32 <udc_iface_disable>:
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	c8 2f       	mov	r28, r24
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	be df       	rcall	.-132    	; 0x9be <udc_update_iface_desc>
     a42:	f8 2e       	mov	r15, r24
     a44:	88 23       	and	r24, r24
     a46:	81 f1       	breq	.+96     	; 0xaa8 <udc_iface_disable+0x76>
     a48:	a0 91 62 25 	lds	r26, 0x2562
     a4c:	b0 91 63 25 	lds	r27, 0x2563
     a50:	ec 2f       	mov	r30, r28
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	12 96       	adiw	r26, 0x02	; 2
     a5a:	2d 91       	ld	r18, X+
     a5c:	3c 91       	ld	r19, X
     a5e:	13 97       	sbiw	r26, 0x03	; 3
     a60:	e2 0f       	add	r30, r18
     a62:	f3 1f       	adc	r31, r19
     a64:	00 81       	ld	r16, Z
     a66:	11 81       	ldd	r17, Z+1	; 0x01
     a68:	d8 01       	movw	r26, r16
     a6a:	16 96       	adiw	r26, 0x06	; 6
     a6c:	ed 91       	ld	r30, X+
     a6e:	fc 91       	ld	r31, X
     a70:	17 97       	sbiw	r26, 0x07	; 7
     a72:	09 95       	icall
     a74:	68 2f       	mov	r22, r24
     a76:	8c 2f       	mov	r24, r28
     a78:	a2 df       	rcall	.-188    	; 0x9be <udc_update_iface_desc>
     a7a:	f8 2e       	mov	r15, r24
     a7c:	88 23       	and	r24, r24
     a7e:	a1 f0       	breq	.+40     	; 0xaa8 <udc_iface_disable+0x76>
     a80:	c0 91 60 25 	lds	r28, 0x2560
     a84:	d0 91 61 25 	lds	r29, 0x2561
     a88:	65 e0       	ldi	r22, 0x05	; 5
     a8a:	ce 01       	movw	r24, r28
     a8c:	5d df       	rcall	.-326    	; 0x948 <udc_next_desc_in_iface>
     a8e:	ec 01       	movw	r28, r24
     a90:	00 97       	sbiw	r24, 0x00	; 0
     a92:	21 f0       	breq	.+8      	; 0xa9c <udc_iface_disable+0x6a>
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <udd_ep_free>
     a9a:	f6 cf       	rjmp	.-20     	; 0xa88 <udc_iface_disable+0x56>
     a9c:	d8 01       	movw	r26, r16
     a9e:	12 96       	adiw	r26, 0x02	; 2
     aa0:	ed 91       	ld	r30, X+
     aa2:	fc 91       	ld	r31, X
     aa4:	13 97       	sbiw	r26, 0x03	; 3
     aa6:	09 95       	icall
     aa8:	8f 2d       	mov	r24, r15
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	08 95       	ret

00000ab6 <udc_iface_enable>:
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	18 2f       	mov	r17, r24
     abe:	7f df       	rcall	.-258    	; 0x9be <udc_update_iface_desc>
     ac0:	88 23       	and	r24, r24
     ac2:	41 f1       	breq	.+80     	; 0xb14 <udc_iface_enable+0x5e>
     ac4:	c0 91 60 25 	lds	r28, 0x2560
     ac8:	d0 91 61 25 	lds	r29, 0x2561
     acc:	65 e0       	ldi	r22, 0x05	; 5
     ace:	ce 01       	movw	r24, r28
     ad0:	3b df       	rcall	.-394    	; 0x948 <udc_next_desc_in_iface>
     ad2:	ec 01       	movw	r28, r24
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	49 f0       	breq	.+18     	; 0xaea <udc_iface_enable+0x34>
     ad8:	4c 81       	ldd	r20, Y+4	; 0x04
     ada:	5d 81       	ldd	r21, Y+5	; 0x05
     adc:	6b 81       	ldd	r22, Y+3	; 0x03
     ade:	8a 81       	ldd	r24, Y+2	; 0x02
     ae0:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <udd_ep_alloc>
     ae4:	81 11       	cpse	r24, r1
     ae6:	f2 cf       	rjmp	.-28     	; 0xacc <udc_iface_enable+0x16>
     ae8:	15 c0       	rjmp	.+42     	; 0xb14 <udc_iface_enable+0x5e>
     aea:	a0 91 62 25 	lds	r26, 0x2562
     aee:	b0 91 63 25 	lds	r27, 0x2563
     af2:	81 2f       	mov	r24, r17
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	12 96       	adiw	r26, 0x02	; 2
     afc:	ed 91       	ld	r30, X+
     afe:	fc 91       	ld	r31, X
     b00:	13 97       	sbiw	r26, 0x03	; 3
     b02:	e8 0f       	add	r30, r24
     b04:	f9 1f       	adc	r31, r25
     b06:	01 90       	ld	r0, Z+
     b08:	f0 81       	ld	r31, Z
     b0a:	e0 2d       	mov	r30, r0
     b0c:	01 90       	ld	r0, Z+
     b0e:	f0 81       	ld	r31, Z
     b10:	e0 2d       	mov	r30, r0
     b12:	09 95       	icall
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	08 95       	ret

00000b1c <udc_start>:
     b1c:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <udd_enable>
     b20:	08 95       	ret

00000b22 <udc_reset>:
     b22:	cf 93       	push	r28
     b24:	80 91 64 25 	lds	r24, 0x2564
     b28:	88 23       	and	r24, r24
     b2a:	c1 f0       	breq	.+48     	; 0xb5c <udc_reset+0x3a>
     b2c:	e0 91 62 25 	lds	r30, 0x2562
     b30:	f0 91 63 25 	lds	r31, 0x2563
     b34:	01 90       	ld	r0, Z+
     b36:	f0 81       	ld	r31, Z
     b38:	e0 2d       	mov	r30, r0
     b3a:	84 81       	ldd	r24, Z+4	; 0x04
     b3c:	88 23       	and	r24, r24
     b3e:	71 f0       	breq	.+28     	; 0xb5c <udc_reset+0x3a>
     b40:	c0 e0       	ldi	r28, 0x00	; 0
     b42:	8c 2f       	mov	r24, r28
     b44:	76 df       	rcall	.-276    	; 0xa32 <udc_iface_disable>
     b46:	cf 5f       	subi	r28, 0xFF	; 255
     b48:	e0 91 62 25 	lds	r30, 0x2562
     b4c:	f0 91 63 25 	lds	r31, 0x2563
     b50:	01 90       	ld	r0, Z+
     b52:	f0 81       	ld	r31, Z
     b54:	e0 2d       	mov	r30, r0
     b56:	84 81       	ldd	r24, Z+4	; 0x04
     b58:	c8 17       	cp	r28, r24
     b5a:	98 f3       	brcs	.-26     	; 0xb42 <udc_reset+0x20>
     b5c:	10 92 64 25 	sts	0x2564, r1
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	80 93 68 25 	sts	0x2568, r24
     b68:	90 93 69 25 	sts	0x2569, r25
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     b70:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     b72:	80 91 64 25 	lds	r24, 0x2564
     b76:	88 23       	and	r24, r24
     b78:	41 f1       	breq	.+80     	; 0xbca <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b7a:	e0 91 62 25 	lds	r30, 0x2562
     b7e:	f0 91 63 25 	lds	r31, 0x2563
     b82:	a0 81       	ld	r26, Z
     b84:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b86:	14 96       	adiw	r26, 0x04	; 4
     b88:	8c 91       	ld	r24, X
     b8a:	88 23       	and	r24, r24
     b8c:	f1 f0       	breq	.+60     	; 0xbca <udc_sof_notify+0x5a>
     b8e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     b90:	8c 2f       	mov	r24, r28
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	02 80       	ldd	r0, Z+2	; 0x02
     b9a:	f3 81       	ldd	r31, Z+3	; 0x03
     b9c:	e0 2d       	mov	r30, r0
     b9e:	e8 0f       	add	r30, r24
     ba0:	f9 1f       	adc	r31, r25
     ba2:	01 90       	ld	r0, Z+
     ba4:	f0 81       	ld	r31, Z
     ba6:	e0 2d       	mov	r30, r0
     ba8:	00 84       	ldd	r0, Z+8	; 0x08
     baa:	f1 85       	ldd	r31, Z+9	; 0x09
     bac:	e0 2d       	mov	r30, r0
     bae:	30 97       	sbiw	r30, 0x00	; 0
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     bb2:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     bb4:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bb6:	e0 91 62 25 	lds	r30, 0x2562
     bba:	f0 91 63 25 	lds	r31, 0x2563
     bbe:	a0 81       	ld	r26, Z
     bc0:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     bc2:	14 96       	adiw	r26, 0x04	; 4
     bc4:	8c 91       	ld	r24, X
     bc6:	c8 17       	cp	r28, r24
     bc8:	18 f3       	brcs	.-58     	; 0xb90 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     bda:	10 92 10 27 	sts	0x2710, r1
     bde:	10 92 11 27 	sts	0x2711, r1
	udd_g_ctrlreq.callback = NULL;
     be2:	10 92 12 27 	sts	0x2712, r1
     be6:	10 92 13 27 	sts	0x2713, r1
	udd_g_ctrlreq.over_under_run = NULL;
     bea:	10 92 14 27 	sts	0x2714, r1
     bee:	10 92 15 27 	sts	0x2715, r1

	if (Udd_setup_is_in()) {
     bf2:	20 91 06 27 	lds	r18, 0x2706
     bf6:	22 23       	and	r18, r18
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <udc_process_setup+0x2e>
     bfa:	97 c2       	rjmp	.+1326   	; 0x112a <udc_process_setup+0x55c>
		if (udd_g_ctrlreq.req.wLength == 0) {
     bfc:	80 91 0c 27 	lds	r24, 0x270C
     c00:	90 91 0d 27 	lds	r25, 0x270D
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	09 f0       	breq	.+2      	; 0xc0a <udc_process_setup+0x3c>
     c08:	95 c2       	rjmp	.+1322   	; 0x1134 <udc_process_setup+0x566>
     c0a:	8b c2       	rjmp	.+1302   	; 0x1122 <udc_process_setup+0x554>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     c0c:	2f 71       	andi	r18, 0x1F	; 31
     c0e:	09 f0       	breq	.+2      	; 0xc12 <udc_process_setup+0x44>
     c10:	b9 c0       	rjmp	.+370    	; 0xd84 <udc_process_setup+0x1b6>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     c12:	30 91 07 27 	lds	r19, 0x2707
     c16:	36 30       	cpi	r19, 0x06	; 6
     c18:	89 f0       	breq	.+34     	; 0xc3c <udc_process_setup+0x6e>
     c1a:	38 30       	cpi	r19, 0x08	; 8
     c1c:	09 f4       	brne	.+2      	; 0xc20 <udc_process_setup+0x52>
     c1e:	a6 c0       	rjmp	.+332    	; 0xd6c <udc_process_setup+0x19e>
     c20:	31 11       	cpse	r19, r1
     c22:	b0 c0       	rjmp	.+352    	; 0xd84 <udc_process_setup+0x1b6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     c24:	02 97       	sbiw	r24, 0x02	; 2
     c26:	41 f4       	brne	.+16     	; 0xc38 <udc_process_setup+0x6a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     c28:	62 e0       	ldi	r22, 0x02	; 2
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	88 e6       	ldi	r24, 0x68	; 104
     c2e:	95 e2       	ldi	r25, 0x25	; 37
     c30:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     c34:	01 e0       	ldi	r16, 0x01	; 1
     c36:	f8 c1       	rjmp	.+1008   	; 0x1028 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     c38:	00 e0       	ldi	r16, 0x00	; 0
     c3a:	f6 c1       	rjmp	.+1004   	; 0x1028 <udc_process_setup+0x45a>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     c3c:	20 91 08 27 	lds	r18, 0x2708
     c40:	30 91 09 27 	lds	r19, 0x2709

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     c44:	83 2f       	mov	r24, r19
     c46:	99 27       	eor	r25, r25
     c48:	82 30       	cpi	r24, 0x02	; 2
     c4a:	91 05       	cpc	r25, r1
     c4c:	a1 f0       	breq	.+40     	; 0xc76 <udc_process_setup+0xa8>
     c4e:	1c f4       	brge	.+6      	; 0xc56 <udc_process_setup+0x88>
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	39 f0       	breq	.+14     	; 0xc62 <udc_process_setup+0x94>
     c54:	81 c0       	rjmp	.+258    	; 0xd58 <udc_process_setup+0x18a>
     c56:	83 30       	cpi	r24, 0x03	; 3
     c58:	91 05       	cpc	r25, r1
     c5a:	f1 f1       	breq	.+124    	; 0xcd8 <udc_process_setup+0x10a>
     c5c:	0f 97       	sbiw	r24, 0x0f	; 15
     c5e:	69 f1       	breq	.+90     	; 0xcba <udc_process_setup+0xec>
     c60:	7b c0       	rjmp	.+246    	; 0xd58 <udc_process_setup+0x18a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     c62:	80 91 34 20 	lds	r24, 0x2034
     c66:	90 91 35 20 	lds	r25, 0x2035
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     c6a:	dc 01       	movw	r26, r24
     c6c:	6c 91       	ld	r22, X
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
     c74:	60 c0       	rjmp	.+192    	; 0xd36 <udc_process_setup+0x168>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     c76:	e0 91 34 20 	lds	r30, 0x2034
     c7a:	f0 91 35 20 	lds	r31, 0x2035
     c7e:	81 89       	ldd	r24, Z+17	; 0x11
     c80:	28 17       	cp	r18, r24
     c82:	08 f0       	brcs	.+2      	; 0xc86 <udc_process_setup+0xb8>
     c84:	6b c0       	rjmp	.+214    	; 0xd5c <udc_process_setup+0x18e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     c86:	c9 01       	movw	r24, r18
     c88:	99 27       	eor	r25, r25
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	e0 91 36 20 	lds	r30, 0x2036
     c96:	f0 91 37 20 	lds	r31, 0x2037
     c9a:	e8 0f       	add	r30, r24
     c9c:	f9 1f       	adc	r31, r25
     c9e:	80 81       	ld	r24, Z
     ca0:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     ca2:	fc 01       	movw	r30, r24
     ca4:	62 81       	ldd	r22, Z+2	; 0x02
     ca6:	73 81       	ldd	r23, Z+3	; 0x03
     ca8:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     cac:	e0 91 0e 27 	lds	r30, 0x270E
     cb0:	f0 91 0f 27 	lds	r31, 0x270F
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	81 83       	std	Z+1, r24	; 0x01
     cb8:	3e c0       	rjmp	.+124    	; 0xd36 <udc_process_setup+0x168>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     cba:	80 91 38 20 	lds	r24, 0x2038
     cbe:	90 91 39 20 	lds	r25, 0x2039
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <udc_process_setup+0xfa>
     cc6:	4c c0       	rjmp	.+152    	; 0xd60 <udc_process_setup+0x192>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     cc8:	dc 01       	movw	r26, r24
     cca:	12 96       	adiw	r26, 0x02	; 2
     ccc:	6d 91       	ld	r22, X+
     cce:	7c 91       	ld	r23, X
     cd0:	13 97       	sbiw	r26, 0x03	; 3
     cd2:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
     cd6:	2f c0       	rjmp	.+94     	; 0xd36 <udc_process_setup+0x168>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     cd8:	33 27       	eor	r19, r19
     cda:	21 30       	cpi	r18, 0x01	; 1
     cdc:	31 05       	cpc	r19, r1
     cde:	89 f0       	breq	.+34     	; 0xd02 <udc_process_setup+0x134>
     ce0:	48 f0       	brcs	.+18     	; 0xcf4 <udc_process_setup+0x126>
     ce2:	22 30       	cpi	r18, 0x02	; 2
     ce4:	31 05       	cpc	r19, r1
     ce6:	09 f4       	brne	.+2      	; 0xcea <udc_process_setup+0x11c>
     ce8:	2a c2       	rjmp	.+1108   	; 0x113e <udc_process_setup+0x570>
     cea:	23 30       	cpi	r18, 0x03	; 3
     cec:	31 05       	cpc	r19, r1
     cee:	09 f4       	brne	.+2      	; 0xcf2 <udc_process_setup+0x124>
     cf0:	2a c2       	rjmp	.+1108   	; 0x1146 <udc_process_setup+0x578>
     cf2:	38 c0       	rjmp	.+112    	; 0xd64 <udc_process_setup+0x196>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     cf4:	64 e0       	ldi	r22, 0x04	; 4
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	80 e3       	ldi	r24, 0x30	; 48
     cfa:	90 e2       	ldi	r25, 0x20	; 32
     cfc:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
     d00:	1a c0       	rjmp	.+52     	; 0xd36 <udc_process_setup+0x168>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     d02:	89 e2       	ldi	r24, 0x29	; 41
     d04:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     d06:	25 e0       	ldi	r18, 0x05	; 5
     d08:	38 2f       	mov	r19, r24
     d0a:	a6 e1       	ldi	r26, 0x16	; 22
     d0c:	b0 e2       	ldi	r27, 0x20	; 32
     d0e:	e8 2f       	mov	r30, r24
     d10:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     d12:	81 91       	ld	r24, Z+
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	8d 93       	st	X+, r24
     d18:	9d 93       	st	X+, r25
     d1a:	8e 2f       	mov	r24, r30
     d1c:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     d1e:	82 17       	cp	r24, r18
     d20:	c0 f3       	brcs	.-16     	; 0xd12 <udc_process_setup+0x144>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     d22:	22 0f       	add	r18, r18
     d24:	62 e0       	ldi	r22, 0x02	; 2
     d26:	62 0f       	add	r22, r18
     d28:	60 93 14 20 	sts	0x2014, r22
		udd_set_setup_payload(
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	84 e1       	ldi	r24, 0x14	; 20
     d30:	90 e2       	ldi	r25, 0x20	; 32
     d32:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     d36:	80 91 0c 27 	lds	r24, 0x270C
     d3a:	90 91 0d 27 	lds	r25, 0x270D
     d3e:	20 91 10 27 	lds	r18, 0x2710
     d42:	30 91 11 27 	lds	r19, 0x2711
     d46:	82 17       	cp	r24, r18
     d48:	93 07       	cpc	r25, r19
     d4a:	70 f4       	brcc	.+28     	; 0xd68 <udc_process_setup+0x19a>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     d4c:	80 93 10 27 	sts	0x2710, r24
     d50:	90 93 11 27 	sts	0x2711, r25
	}
	return true;
     d54:	01 e0       	ldi	r16, 0x01	; 1
     d56:	68 c1       	rjmp	.+720    	; 0x1028 <udc_process_setup+0x45a>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     d58:	00 e0       	ldi	r16, 0x00	; 0
     d5a:	66 c1       	rjmp	.+716    	; 0x1028 <udc_process_setup+0x45a>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     d5c:	00 e0       	ldi	r16, 0x00	; 0
     d5e:	64 c1       	rjmp	.+712    	; 0x1028 <udc_process_setup+0x45a>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     d60:	00 e0       	ldi	r16, 0x00	; 0
     d62:	62 c1       	rjmp	.+708    	; 0x1028 <udc_process_setup+0x45a>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     d64:	00 e0       	ldi	r16, 0x00	; 0
     d66:	60 c1       	rjmp	.+704    	; 0x1028 <udc_process_setup+0x45a>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     d68:	01 e0       	ldi	r16, 0x01	; 1
     d6a:	5e c1       	rjmp	.+700    	; 0x1028 <udc_process_setup+0x45a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	41 f4       	brne	.+16     	; 0xd80 <udc_process_setup+0x1b2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	84 e6       	ldi	r24, 0x64	; 100
     d76:	95 e2       	ldi	r25, 0x25	; 37
     d78:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
	return true;
     d7c:	01 e0       	ldi	r16, 0x01	; 1
     d7e:	54 c1       	rjmp	.+680    	; 0x1028 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     d80:	00 e0       	ldi	r16, 0x00	; 0
     d82:	52 c1       	rjmp	.+676    	; 0x1028 <udc_process_setup+0x45a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     d84:	21 30       	cpi	r18, 0x01	; 1
     d86:	09 f0       	breq	.+2      	; 0xd8a <udc_process_setup+0x1bc>
     d88:	40 c0       	rjmp	.+128    	; 0xe0a <udc_process_setup+0x23c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     d8a:	30 91 07 27 	lds	r19, 0x2707
     d8e:	3a 30       	cpi	r19, 0x0A	; 10
     d90:	e1 f5       	brne	.+120    	; 0xe0a <udc_process_setup+0x23c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	a1 f5       	brne	.+104    	; 0xdfe <udc_process_setup+0x230>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     d96:	80 91 64 25 	lds	r24, 0x2564
     d9a:	88 23       	and	r24, r24
     d9c:	91 f1       	breq	.+100    	; 0xe02 <udc_process_setup+0x234>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d9e:	c0 91 0a 27 	lds	r28, 0x270A
     da2:	d0 91 0b 27 	lds	r29, 0x270B
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     da6:	e0 90 62 25 	lds	r14, 0x2562
     daa:	f0 90 63 25 	lds	r15, 0x2563
     dae:	d7 01       	movw	r26, r14
     db0:	ed 91       	ld	r30, X+
     db2:	fc 91       	ld	r31, X
     db4:	84 81       	ldd	r24, Z+4	; 0x04
     db6:	c8 17       	cp	r28, r24
     db8:	30 f5       	brcc	.+76     	; 0xe06 <udc_process_setup+0x238>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	8c 2f       	mov	r24, r28
     dbe:	ff dd       	rcall	.-1026   	; 0x9be <udc_update_iface_desc>
     dc0:	08 2f       	mov	r16, r24
     dc2:	88 23       	and	r24, r24
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <udc_process_setup+0x1fa>
     dc6:	30 c1       	rjmp	.+608    	; 0x1028 <udc_process_setup+0x45a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     dc8:	ce 01       	movw	r24, r28
     dca:	99 27       	eor	r25, r25
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	d7 01       	movw	r26, r14
     dd2:	12 96       	adiw	r26, 0x02	; 2
     dd4:	ed 91       	ld	r30, X+
     dd6:	fc 91       	ld	r31, X
     dd8:	13 97       	sbiw	r26, 0x03	; 3
     dda:	e8 0f       	add	r30, r24
     ddc:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     dde:	01 90       	ld	r0, Z+
     de0:	f0 81       	ld	r31, Z
     de2:	e0 2d       	mov	r30, r0
     de4:	06 80       	ldd	r0, Z+6	; 0x06
     de6:	f7 81       	ldd	r31, Z+7	; 0x07
     de8:	e0 2d       	mov	r30, r0
     dea:	09 95       	icall
     dec:	80 93 66 25 	sts	0x2566, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	86 e6       	ldi	r24, 0x66	; 102
     df6:	95 e2       	ldi	r25, 0x25	; 37
     df8:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <udd_set_setup_payload>
     dfc:	15 c1       	rjmp	.+554    	; 0x1028 <udc_process_setup+0x45a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     dfe:	00 e0       	ldi	r16, 0x00	; 0
     e00:	13 c1       	rjmp	.+550    	; 0x1028 <udc_process_setup+0x45a>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     e02:	00 e0       	ldi	r16, 0x00	; 0
     e04:	11 c1       	rjmp	.+546    	; 0x1028 <udc_process_setup+0x45a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     e06:	00 e0       	ldi	r16, 0x00	; 0
     e08:	0f c1       	rjmp	.+542    	; 0x1028 <udc_process_setup+0x45a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	09 f0       	breq	.+2      	; 0xe10 <udc_process_setup+0x242>
     e0e:	0e c1       	rjmp	.+540    	; 0x102c <udc_process_setup+0x45e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     e10:	20 91 07 27 	lds	r18, 0x2707
     e14:	21 11       	cpse	r18, r1
     e16:	03 c1       	rjmp	.+518    	; 0x101e <udc_process_setup+0x450>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     e18:	02 97       	sbiw	r24, 0x02	; 2
     e1a:	81 f4       	brne	.+32     	; 0xe3c <udc_process_setup+0x26e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     e1c:	80 91 0a 27 	lds	r24, 0x270A
     e20:	0e 94 76 0f 	call	0x1eec	; 0x1eec <udd_ep_is_halted>
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	80 93 5e 25 	sts	0x255E, r24
     e2a:	90 93 5f 25 	sts	0x255F, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     e2e:	62 e0       	ldi	r22, 0x02	; 2
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	8e e5       	ldi	r24, 0x5E	; 94
     e34:	95 e2       	ldi	r25, 0x25	; 37
     e36:	f0 d7       	rcall	.+4064   	; 0x1e18 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     e38:	01 e0       	ldi	r16, 0x01	; 1
     e3a:	f6 c0       	rjmp	.+492    	; 0x1028 <udc_process_setup+0x45a>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     e3c:	00 e0       	ldi	r16, 0x00	; 0
     e3e:	f4 c0       	rjmp	.+488    	; 0x1028 <udc_process_setup+0x45a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     e40:	2f 71       	andi	r18, 0x1F	; 31
     e42:	09 f0       	breq	.+2      	; 0xe46 <udc_process_setup+0x278>
     e44:	90 c0       	rjmp	.+288    	; 0xf66 <udc_process_setup+0x398>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     e46:	80 91 07 27 	lds	r24, 0x2707
     e4a:	83 30       	cpi	r24, 0x03	; 3
     e4c:	09 f4       	brne	.+2      	; 0xe50 <udc_process_setup+0x282>
     e4e:	e9 c0       	rjmp	.+466    	; 0x1022 <udc_process_setup+0x454>
     e50:	18 f4       	brcc	.+6      	; 0xe58 <udc_process_setup+0x28a>
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	b1 f0       	breq	.+44     	; 0xe82 <udc_process_setup+0x2b4>
     e56:	87 c0       	rjmp	.+270    	; 0xf66 <udc_process_setup+0x398>
     e58:	85 30       	cpi	r24, 0x05	; 5
     e5a:	19 f0       	breq	.+6      	; 0xe62 <udc_process_setup+0x294>
     e5c:	89 30       	cpi	r24, 0x09	; 9
     e5e:	61 f1       	breq	.+88     	; 0xeb8 <udc_process_setup+0x2ea>
     e60:	82 c0       	rjmp	.+260    	; 0xf66 <udc_process_setup+0x398>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e62:	80 91 0c 27 	lds	r24, 0x270C
     e66:	90 91 0d 27 	lds	r25, 0x270D
     e6a:	89 2b       	or	r24, r25
     e6c:	41 f4       	brne	.+16     	; 0xe7e <udc_process_setup+0x2b0>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     e6e:	89 ed       	ldi	r24, 0xD9	; 217
     e70:	94 e0       	ldi	r25, 0x04	; 4
     e72:	80 93 12 27 	sts	0x2712, r24
     e76:	90 93 13 27 	sts	0x2713, r25
	return true;
     e7a:	01 e0       	ldi	r16, 0x01	; 1
     e7c:	d5 c0       	rjmp	.+426    	; 0x1028 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e7e:	00 e0       	ldi	r16, 0x00	; 0
     e80:	d3 c0       	rjmp	.+422    	; 0x1028 <udc_process_setup+0x45a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e82:	80 91 0c 27 	lds	r24, 0x270C
     e86:	90 91 0d 27 	lds	r25, 0x270D
     e8a:	89 2b       	or	r24, r25
     e8c:	89 f4       	brne	.+34     	; 0xeb0 <udc_process_setup+0x2e2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     e8e:	80 91 08 27 	lds	r24, 0x2708
     e92:	90 91 09 27 	lds	r25, 0x2709
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	69 f4       	brne	.+26     	; 0xeb4 <udc_process_setup+0x2e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     e9a:	80 91 68 25 	lds	r24, 0x2568
     e9e:	90 91 69 25 	lds	r25, 0x2569
     ea2:	8d 7f       	andi	r24, 0xFD	; 253
     ea4:	80 93 68 25 	sts	0x2568, r24
     ea8:	90 93 69 25 	sts	0x2569, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     eac:	01 e0       	ldi	r16, 0x01	; 1
     eae:	bc c0       	rjmp	.+376    	; 0x1028 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     eb0:	00 e0       	ldi	r16, 0x00	; 0
     eb2:	ba c0       	rjmp	.+372    	; 0x1028 <udc_process_setup+0x45a>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     eb4:	00 e0       	ldi	r16, 0x00	; 0
     eb6:	b8 c0       	rjmp	.+368    	; 0x1028 <udc_process_setup+0x45a>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     eb8:	80 91 0c 27 	lds	r24, 0x270C
     ebc:	90 91 0d 27 	lds	r25, 0x270D
     ec0:	89 2b       	or	r24, r25
     ec2:	09 f0       	breq	.+2      	; 0xec6 <udc_process_setup+0x2f8>
     ec4:	46 c0       	rjmp	.+140    	; 0xf52 <udc_process_setup+0x384>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     ec6:	9d d7       	rcall	.+3898   	; 0x1e02 <udd_getaddress>
     ec8:	88 23       	and	r24, r24
     eca:	09 f4       	brne	.+2      	; 0xece <udc_process_setup+0x300>
     ecc:	44 c0       	rjmp	.+136    	; 0xf56 <udc_process_setup+0x388>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     ece:	20 91 08 27 	lds	r18, 0x2708
     ed2:	30 91 09 27 	lds	r19, 0x2709
     ed6:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     ed8:	e0 91 34 20 	lds	r30, 0x2034
     edc:	f0 91 35 20 	lds	r31, 0x2035
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     ee0:	81 89       	ldd	r24, Z+17	; 0x11
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	82 17       	cp	r24, r18
     ee6:	93 07       	cpc	r25, r19
     ee8:	c0 f1       	brcs	.+112    	; 0xf5a <udc_process_setup+0x38c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     eea:	1b de       	rcall	.-970    	; 0xb22 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     eec:	80 91 08 27 	lds	r24, 0x2708
     ef0:	90 91 09 27 	lds	r25, 0x2709
     ef4:	80 93 64 25 	sts	0x2564, r24
	if (udc_num_configuration == 0) {
     ef8:	88 23       	and	r24, r24
     efa:	89 f1       	breq	.+98     	; 0xf5e <udc_process_setup+0x390>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     efc:	99 27       	eor	r25, r25
     efe:	81 50       	subi	r24, 0x01	; 1
     f00:	90 4c       	sbci	r25, 0xC0	; 192
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	e0 91 36 20 	lds	r30, 0x2036
     f0e:	f0 91 37 20 	lds	r31, 0x2037
     f12:	e8 0f       	add	r30, r24
     f14:	f9 1f       	adc	r31, r25
     f16:	e0 93 62 25 	sts	0x2562, r30
     f1a:	f0 93 63 25 	sts	0x2563, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f1e:	01 90       	ld	r0, Z+
     f20:	f0 81       	ld	r31, Z
     f22:	e0 2d       	mov	r30, r0
     f24:	84 81       	ldd	r24, Z+4	; 0x04
     f26:	88 23       	and	r24, r24
     f28:	e1 f0       	breq	.+56     	; 0xf62 <udc_process_setup+0x394>
     f2a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	8c 2f       	mov	r24, r28
     f30:	c2 dd       	rcall	.-1148   	; 0xab6 <udc_iface_enable>
     f32:	08 2f       	mov	r16, r24
     f34:	88 23       	and	r24, r24
     f36:	09 f4       	brne	.+2      	; 0xf3a <udc_process_setup+0x36c>
     f38:	77 c0       	rjmp	.+238    	; 0x1028 <udc_process_setup+0x45a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     f3a:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f3c:	e0 91 62 25 	lds	r30, 0x2562
     f40:	f0 91 63 25 	lds	r31, 0x2563
     f44:	01 90       	ld	r0, Z+
     f46:	f0 81       	ld	r31, Z
     f48:	e0 2d       	mov	r30, r0
     f4a:	84 81       	ldd	r24, Z+4	; 0x04
     f4c:	c8 17       	cp	r28, r24
     f4e:	70 f3       	brcs	.-36     	; 0xf2c <udc_process_setup+0x35e>
     f50:	6b c0       	rjmp	.+214    	; 0x1028 <udc_process_setup+0x45a>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     f52:	00 e0       	ldi	r16, 0x00	; 0
     f54:	69 c0       	rjmp	.+210    	; 0x1028 <udc_process_setup+0x45a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     f56:	00 e0       	ldi	r16, 0x00	; 0
     f58:	67 c0       	rjmp	.+206    	; 0x1028 <udc_process_setup+0x45a>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     f5a:	00 e0       	ldi	r16, 0x00	; 0
     f5c:	65 c0       	rjmp	.+202    	; 0x1028 <udc_process_setup+0x45a>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     f5e:	01 e0       	ldi	r16, 0x01	; 1
     f60:	63 c0       	rjmp	.+198    	; 0x1028 <udc_process_setup+0x45a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     f62:	01 e0       	ldi	r16, 0x01	; 1
     f64:	61 c0       	rjmp	.+194    	; 0x1028 <udc_process_setup+0x45a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     f66:	21 30       	cpi	r18, 0x01	; 1
     f68:	09 f5       	brne	.+66     	; 0xfac <udc_process_setup+0x3de>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     f6a:	80 91 07 27 	lds	r24, 0x2707
     f6e:	8b 30       	cpi	r24, 0x0B	; 11
     f70:	e9 f4       	brne	.+58     	; 0xfac <udc_process_setup+0x3de>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     f72:	80 91 0c 27 	lds	r24, 0x270C
     f76:	90 91 0d 27 	lds	r25, 0x270D
     f7a:	89 2b       	or	r24, r25
     f7c:	99 f4       	brne	.+38     	; 0xfa4 <udc_process_setup+0x3d6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     f7e:	80 91 64 25 	lds	r24, 0x2564
     f82:	88 23       	and	r24, r24
     f84:	89 f0       	breq	.+34     	; 0xfa8 <udc_process_setup+0x3da>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f86:	c0 91 0a 27 	lds	r28, 0x270A
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     f8a:	d0 91 08 27 	lds	r29, 0x2708

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     f8e:	8c 2f       	mov	r24, r28
     f90:	50 dd       	rcall	.-1376   	; 0xa32 <udc_iface_disable>
     f92:	08 2f       	mov	r16, r24
     f94:	88 23       	and	r24, r24
     f96:	09 f4       	brne	.+2      	; 0xf9a <udc_process_setup+0x3cc>
     f98:	47 c0       	rjmp	.+142    	; 0x1028 <udc_process_setup+0x45a>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     f9a:	6d 2f       	mov	r22, r29
     f9c:	8c 2f       	mov	r24, r28
     f9e:	8b dd       	rcall	.-1258   	; 0xab6 <udc_iface_enable>
     fa0:	08 2f       	mov	r16, r24
     fa2:	42 c0       	rjmp	.+132    	; 0x1028 <udc_process_setup+0x45a>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     fa4:	00 e0       	ldi	r16, 0x00	; 0
     fa6:	40 c0       	rjmp	.+128    	; 0x1028 <udc_process_setup+0x45a>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     fa8:	00 e0       	ldi	r16, 0x00	; 0
     faa:	3e c0       	rjmp	.+124    	; 0x1028 <udc_process_setup+0x45a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     fac:	22 30       	cpi	r18, 0x02	; 2
     fae:	09 f0       	breq	.+2      	; 0xfb2 <udc_process_setup+0x3e4>
     fb0:	3d c0       	rjmp	.+122    	; 0x102c <udc_process_setup+0x45e>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     fb2:	80 91 07 27 	lds	r24, 0x2707
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	19 f0       	breq	.+6      	; 0xfc0 <udc_process_setup+0x3f2>
     fba:	83 30       	cpi	r24, 0x03	; 3
     fbc:	b1 f0       	breq	.+44     	; 0xfea <udc_process_setup+0x41c>
     fbe:	33 c0       	rjmp	.+102    	; 0x1026 <udc_process_setup+0x458>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     fc0:	80 91 0c 27 	lds	r24, 0x270C
     fc4:	90 91 0d 27 	lds	r25, 0x270D
     fc8:	89 2b       	or	r24, r25
     fca:	59 f4       	brne	.+22     	; 0xfe2 <udc_process_setup+0x414>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     fcc:	80 91 08 27 	lds	r24, 0x2708
     fd0:	90 91 09 27 	lds	r25, 0x2709
     fd4:	89 2b       	or	r24, r25
     fd6:	39 f4       	brne	.+14     	; 0xfe6 <udc_process_setup+0x418>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     fd8:	80 91 0a 27 	lds	r24, 0x270A
     fdc:	a2 d7       	rcall	.+3908   	; 0x1f22 <udd_ep_clear_halt>
     fde:	08 2f       	mov	r16, r24
     fe0:	23 c0       	rjmp	.+70     	; 0x1028 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     fe2:	00 e0       	ldi	r16, 0x00	; 0
     fe4:	21 c0       	rjmp	.+66     	; 0x1028 <udc_process_setup+0x45a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     fe6:	00 e0       	ldi	r16, 0x00	; 0
     fe8:	1f c0       	rjmp	.+62     	; 0x1028 <udc_process_setup+0x45a>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     fea:	80 91 0c 27 	lds	r24, 0x270C
     fee:	90 91 0d 27 	lds	r25, 0x270D
     ff2:	89 2b       	or	r24, r25
     ff4:	81 f4       	brne	.+32     	; 0x1016 <udc_process_setup+0x448>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     ff6:	80 91 08 27 	lds	r24, 0x2708
     ffa:	90 91 09 27 	lds	r25, 0x2709
     ffe:	89 2b       	or	r24, r25
    1000:	61 f4       	brne	.+24     	; 0x101a <udc_process_setup+0x44c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1002:	ca e0       	ldi	r28, 0x0A	; 10
    1004:	d7 e2       	ldi	r29, 0x27	; 39
    1006:	88 81       	ld	r24, Y
    1008:	0e 94 43 10 	call	0x2086	; 0x2086 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    100c:	88 81       	ld	r24, Y
    100e:	0e 94 99 10 	call	0x2132	; 0x2132 <udd_ep_set_halt>
    1012:	08 2f       	mov	r16, r24
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <udc_process_setup+0x45a>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1016:	00 e0       	ldi	r16, 0x00	; 0
    1018:	07 c0       	rjmp	.+14     	; 0x1028 <udc_process_setup+0x45a>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    101a:	00 e0       	ldi	r16, 0x00	; 0
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <udc_process_setup+0x45a>
				break;
			}
		}
#endif
	}
	return false;
    101e:	00 e0       	ldi	r16, 0x00	; 0
    1020:	03 c0       	rjmp	.+6      	; 0x1028 <udc_process_setup+0x45a>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1022:	00 e0       	ldi	r16, 0x00	; 0
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <udc_process_setup+0x45a>
				break;
			}
		}
#endif
	}
	return false;
    1026:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1028:	01 11       	cpse	r16, r1
    102a:	91 c0       	rjmp	.+290    	; 0x114e <udc_process_setup+0x580>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    102c:	80 91 06 27 	lds	r24, 0x2706
    1030:	8f 71       	andi	r24, 0x1F	; 31
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	c1 f5       	brne	.+112    	; 0x10a6 <udc_process_setup+0x4d8>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1036:	80 91 64 25 	lds	r24, 0x2564
    103a:	88 23       	and	r24, r24
    103c:	a1 f1       	breq	.+104    	; 0x10a6 <udc_process_setup+0x4d8>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    103e:	c0 91 0a 27 	lds	r28, 0x270A
    1042:	d0 91 0b 27 	lds	r29, 0x270B
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1046:	00 91 62 25 	lds	r16, 0x2562
    104a:	10 91 63 25 	lds	r17, 0x2563
    104e:	d8 01       	movw	r26, r16
    1050:	ed 91       	ld	r30, X+
    1052:	fc 91       	ld	r31, X
    1054:	84 81       	ldd	r24, Z+4	; 0x04
    1056:	c8 17       	cp	r28, r24
    1058:	30 f5       	brcc	.+76     	; 0x10a6 <udc_process_setup+0x4d8>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	8c 2f       	mov	r24, r28
    105e:	af dc       	rcall	.-1698   	; 0x9be <udc_update_iface_desc>
    1060:	88 23       	and	r24, r24
    1062:	09 f1       	breq	.+66     	; 0x10a6 <udc_process_setup+0x4d8>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1064:	ce 01       	movw	r24, r28
    1066:	99 27       	eor	r25, r25
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	d8 01       	movw	r26, r16
    106e:	12 96       	adiw	r26, 0x02	; 2
    1070:	ed 91       	ld	r30, X+
    1072:	fc 91       	ld	r31, X
    1074:	13 97       	sbiw	r26, 0x03	; 3
    1076:	e8 0f       	add	r30, r24
    1078:	f9 1f       	adc	r31, r25
    107a:	00 81       	ld	r16, Z
    107c:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    107e:	d8 01       	movw	r26, r16
    1080:	16 96       	adiw	r26, 0x06	; 6
    1082:	ed 91       	ld	r30, X+
    1084:	fc 91       	ld	r31, X
    1086:	17 97       	sbiw	r26, 0x07	; 7
    1088:	09 95       	icall
    108a:	68 2f       	mov	r22, r24
    108c:	8c 2f       	mov	r24, r28
    108e:	97 dc       	rcall	.-1746   	; 0x9be <udc_update_iface_desc>
    1090:	88 23       	and	r24, r24
    1092:	49 f0       	breq	.+18     	; 0x10a6 <udc_process_setup+0x4d8>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1094:	d8 01       	movw	r26, r16
    1096:	14 96       	adiw	r26, 0x04	; 4
    1098:	ed 91       	ld	r30, X+
    109a:	fc 91       	ld	r31, X
    109c:	15 97       	sbiw	r26, 0x05	; 5
    109e:	09 95       	icall
    10a0:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    10a2:	81 11       	cpse	r24, r1
    10a4:	54 c0       	rjmp	.+168    	; 0x114e <udc_process_setup+0x580>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    10a6:	80 91 06 27 	lds	r24, 0x2706
    10aa:	8f 71       	andi	r24, 0x1F	; 31
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	d9 f5       	brne	.+118    	; 0x1126 <udc_process_setup+0x558>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    10b0:	80 91 64 25 	lds	r24, 0x2564
    10b4:	88 23       	and	r24, r24
    10b6:	89 f1       	breq	.+98     	; 0x111a <udc_process_setup+0x54c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    10b8:	e0 91 62 25 	lds	r30, 0x2562
    10bc:	f0 91 63 25 	lds	r31, 0x2563
    10c0:	a0 81       	ld	r26, Z
    10c2:	b1 81       	ldd	r27, Z+1	; 0x01
    10c4:	14 96       	adiw	r26, 0x04	; 4
    10c6:	8c 91       	ld	r24, X
    10c8:	88 23       	and	r24, r24
    10ca:	49 f1       	breq	.+82     	; 0x111e <udc_process_setup+0x550>
    10cc:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    10ce:	21 2f       	mov	r18, r17
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	02 80       	ldd	r0, Z+2	; 0x02
    10d8:	f3 81       	ldd	r31, Z+3	; 0x03
    10da:	e0 2d       	mov	r30, r0
    10dc:	e2 0f       	add	r30, r18
    10de:	f3 1f       	adc	r31, r19
    10e0:	c0 81       	ld	r28, Z
    10e2:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    10e4:	ee 81       	ldd	r30, Y+6	; 0x06
    10e6:	ff 81       	ldd	r31, Y+7	; 0x07
    10e8:	09 95       	icall
    10ea:	68 2f       	mov	r22, r24
    10ec:	81 2f       	mov	r24, r17
    10ee:	67 dc       	rcall	.-1842   	; 0x9be <udc_update_iface_desc>
    10f0:	08 2f       	mov	r16, r24
    10f2:	88 23       	and	r24, r24
    10f4:	61 f1       	breq	.+88     	; 0x114e <udc_process_setup+0x580>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    10f6:	ec 81       	ldd	r30, Y+4	; 0x04
    10f8:	fd 81       	ldd	r31, Y+5	; 0x05
    10fa:	09 95       	icall
    10fc:	08 2f       	mov	r16, r24
    10fe:	81 11       	cpse	r24, r1
    1100:	26 c0       	rjmp	.+76     	; 0x114e <udc_process_setup+0x580>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1102:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1104:	e0 91 62 25 	lds	r30, 0x2562
    1108:	f0 91 63 25 	lds	r31, 0x2563
    110c:	a0 81       	ld	r26, Z
    110e:	b1 81       	ldd	r27, Z+1	; 0x01
    1110:	14 96       	adiw	r26, 0x04	; 4
    1112:	8c 91       	ld	r24, X
    1114:	18 17       	cp	r17, r24
    1116:	d8 f2       	brcs	.-74     	; 0x10ce <udc_process_setup+0x500>
    1118:	1a c0       	rjmp	.+52     	; 0x114e <udc_process_setup+0x580>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    111a:	00 e0       	ldi	r16, 0x00	; 0
    111c:	18 c0       	rjmp	.+48     	; 0x114e <udc_process_setup+0x580>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    111e:	00 e0       	ldi	r16, 0x00	; 0
    1120:	16 c0       	rjmp	.+44     	; 0x114e <udc_process_setup+0x580>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1122:	00 e0       	ldi	r16, 0x00	; 0
    1124:	14 c0       	rjmp	.+40     	; 0x114e <udc_process_setup+0x580>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1126:	00 e0       	ldi	r16, 0x00	; 0
    1128:	12 c0       	rjmp	.+36     	; 0x114e <udc_process_setup+0x580>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    112a:	82 2f       	mov	r24, r18
    112c:	80 76       	andi	r24, 0x60	; 96
    112e:	09 f0       	breq	.+2      	; 0x1132 <udc_process_setup+0x564>
    1130:	7d cf       	rjmp	.-262    	; 0x102c <udc_process_setup+0x45e>
    1132:	86 ce       	rjmp	.-756    	; 0xe40 <udc_process_setup+0x272>
    1134:	32 2f       	mov	r19, r18
    1136:	30 76       	andi	r19, 0x60	; 96
    1138:	09 f0       	breq	.+2      	; 0x113c <udc_process_setup+0x56e>
    113a:	78 cf       	rjmp	.-272    	; 0x102c <udc_process_setup+0x45e>
    113c:	67 cd       	rjmp	.-1330   	; 0xc0c <udc_process_setup+0x3e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    113e:	26 e0       	ldi	r18, 0x06	; 6
		str = udc_string_product_name;
    1140:	82 e2       	ldi	r24, 0x22	; 34
    1142:	90 e2       	ldi	r25, 0x20	; 32
    1144:	e1 cd       	rjmp	.-1086   	; 0xd08 <udc_process_setup+0x13a>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1146:	24 e0       	ldi	r18, 0x04	; 4
		str = udc_get_string_serial_name();
    1148:	81 e1       	ldi	r24, 0x11	; 17
    114a:	91 e2       	ldi	r25, 0x21	; 33
    114c:	dd cd       	rjmp	.-1094   	; 0xd08 <udc_process_setup+0x13a>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    114e:	80 2f       	mov	r24, r16
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	08 95       	ret

0000115e <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    115e:	cf 92       	push	r12
    1160:	df 92       	push	r13
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	ec 01       	movw	r28, r24
    1170:	6a 01       	movw	r12, r20
    1172:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    1174:	db 01       	movw	r26, r22
    1176:	ca 01       	movw	r24, r20
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	a1 09       	sbc	r26, r1
    117c:	b1 09       	sbc	r27, r1
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	60 0f       	add	r22, r16
    1184:	71 1f       	adc	r23, r17
    1186:	82 1f       	adc	r24, r18
    1188:	93 1f       	adc	r25, r19
    118a:	a7 01       	movw	r20, r14
    118c:	96 01       	movw	r18, r12
    118e:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__udivmodsi4>

	if (divisor > 128) {
    1192:	21 38       	cpi	r18, 0x81	; 129
    1194:	31 05       	cpc	r19, r1
    1196:	41 05       	cpc	r20, r1
    1198:	51 05       	cpc	r21, r1
    119a:	f8 f4       	brcc	.+62     	; 0x11da <spi_xmega_set_baud_div+0x7c>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    119c:	21 34       	cpi	r18, 0x41	; 65
    119e:	60 f4       	brcc	.+24     	; 0x11b8 <spi_xmega_set_baud_div+0x5a>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    11a0:	21 32       	cpi	r18, 0x21	; 33
    11a2:	60 f4       	brcc	.+24     	; 0x11bc <spi_xmega_set_baud_div+0x5e>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    11a4:	21 31       	cpi	r18, 0x11	; 17
    11a6:	60 f4       	brcc	.+24     	; 0x11c0 <spi_xmega_set_baud_div+0x62>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    11a8:	29 30       	cpi	r18, 0x09	; 9
    11aa:	60 f4       	brcc	.+24     	; 0x11c4 <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    11ac:	25 30       	cpi	r18, 0x05	; 5
    11ae:	60 f4       	brcc	.+24     	; 0x11c8 <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    11b0:	23 30       	cpi	r18, 0x03	; 3
    11b2:	60 f0       	brcs	.+24     	; 0x11cc <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_PRESCALER_DIV4_gc;
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0b c0       	rjmp	.+22     	; 0x11ce <spi_xmega_set_baud_div+0x70>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    11b8:	93 e0       	ldi	r25, 0x03	; 3
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    11bc:	92 e0       	ldi	r25, 0x02	; 2
    11be:	07 c0       	rjmp	.+14     	; 0x11ce <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    11c0:	92 e8       	ldi	r25, 0x82	; 130
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    11c8:	91 e8       	ldi	r25, 0x81	; 129
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    11cc:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    11ce:	88 81       	ld	r24, Y
    11d0:	8c 77       	andi	r24, 0x7C	; 124
    11d2:	89 2b       	or	r24, r25
    11d4:	88 83       	st	Y, r24

	return 1;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <spi_xmega_set_baud_div+0x7e>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    11da:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	df 90       	pop	r13
    11ea:	cf 90       	pop	r12
    11ec:	08 95       	ret

000011ee <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    11f2:	e0 91 6a 25 	lds	r30, 0x256A
    11f6:	f0 91 6b 25 	lds	r31, 0x256B
    11fa:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    11fc:	83 ff       	sbrs	r24, 3
    11fe:	08 c0       	rjmp	.+16     	; 0x1210 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1200:	88 60       	ori	r24, 0x08	; 8
    1202:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1204:	83 e0       	ldi	r24, 0x03	; 3
    1206:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1208:	86 ef       	ldi	r24, 0xF6	; 246
    120a:	80 93 74 25 	sts	0x2574, r24
    120e:	89 c0       	rjmp	.+274    	; 0x1322 <twim_interrupt_handler+0x134>
    1210:	98 2f       	mov	r25, r24
    1212:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1214:	31 f0       	breq	.+12     	; 0x1222 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	80 93 74 25 	sts	0x2574, r24
    1220:	80 c0       	rjmp	.+256    	; 0x1322 <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1222:	86 ff       	sbrs	r24, 6
    1224:	45 c0       	rjmp	.+138    	; 0x12b0 <twim_interrupt_handler+0xc2>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1226:	a0 91 6c 25 	lds	r26, 0x256C
    122a:	b0 91 6d 25 	lds	r27, 0x256D

	if (transfer.addr_count < pkg->addr_length) {
    122e:	80 91 6e 25 	lds	r24, 0x256E
    1232:	90 91 6f 25 	lds	r25, 0x256F
    1236:	14 96       	adiw	r26, 0x04	; 4
    1238:	2d 91       	ld	r18, X+
    123a:	3c 91       	ld	r19, X
    123c:	15 97       	sbiw	r26, 0x05	; 5
    123e:	82 17       	cp	r24, r18
    1240:	93 07       	cpc	r25, r19
    1242:	6c f4       	brge	.+26     	; 0x125e <twim_interrupt_handler+0x70>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1244:	9c 01       	movw	r18, r24
    1246:	2f 5f       	subi	r18, 0xFF	; 255
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	20 93 6e 25 	sts	0x256E, r18
    124e:	30 93 6f 25 	sts	0x256F, r19
    1252:	a8 0f       	add	r26, r24
    1254:	b9 1f       	adc	r27, r25
    1256:	11 96       	adiw	r26, 0x01	; 1
    1258:	8c 91       	ld	r24, X
    125a:	87 83       	std	Z+7, r24	; 0x07
    125c:	62 c0       	rjmp	.+196    	; 0x1322 <twim_interrupt_handler+0x134>

	} else if (transfer.data_count < pkg->length) {
    125e:	80 91 70 25 	lds	r24, 0x2570
    1262:	90 91 71 25 	lds	r25, 0x2571
    1266:	18 96       	adiw	r26, 0x08	; 8
    1268:	2d 91       	ld	r18, X+
    126a:	3c 91       	ld	r19, X
    126c:	19 97       	sbiw	r26, 0x09	; 9
    126e:	82 17       	cp	r24, r18
    1270:	93 07       	cpc	r25, r19
    1272:	c8 f4       	brcc	.+50     	; 0x12a6 <twim_interrupt_handler+0xb8>

		if (transfer.read) {
    1274:	20 91 72 25 	lds	r18, 0x2572
    1278:	22 23       	and	r18, r18
    127a:	21 f0       	breq	.+8      	; 0x1284 <twim_interrupt_handler+0x96>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    127c:	86 81       	ldd	r24, Z+6	; 0x06
    127e:	81 60       	ori	r24, 0x01	; 1
    1280:	86 83       	std	Z+6, r24	; 0x06
    1282:	4f c0       	rjmp	.+158    	; 0x1322 <twim_interrupt_handler+0x134>

		} else {
			const uint8_t * const data = pkg->buffer;
    1284:	16 96       	adiw	r26, 0x06	; 6
    1286:	2d 91       	ld	r18, X+
    1288:	3c 91       	ld	r19, X
    128a:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    128c:	ac 01       	movw	r20, r24
    128e:	4f 5f       	subi	r20, 0xFF	; 255
    1290:	5f 4f       	sbci	r21, 0xFF	; 255
    1292:	40 93 70 25 	sts	0x2570, r20
    1296:	50 93 71 25 	sts	0x2571, r21
    129a:	d9 01       	movw	r26, r18
    129c:	a8 0f       	add	r26, r24
    129e:	b9 1f       	adc	r27, r25
    12a0:	8c 91       	ld	r24, X
    12a2:	87 83       	std	Z+7, r24	; 0x07
    12a4:	3e c0       	rjmp	.+124    	; 0x1322 <twim_interrupt_handler+0x134>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    12a6:	83 e0       	ldi	r24, 0x03	; 3
    12a8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    12aa:	10 92 74 25 	sts	0x2574, r1
    12ae:	39 c0       	rjmp	.+114    	; 0x1322 <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    12b0:	88 23       	and	r24, r24
    12b2:	a4 f5       	brge	.+104    	; 0x131c <twim_interrupt_handler+0x12e>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    12b4:	a0 91 6c 25 	lds	r26, 0x256C
    12b8:	b0 91 6d 25 	lds	r27, 0x256D

	if (transfer.data_count < pkg->length) {
    12bc:	80 91 70 25 	lds	r24, 0x2570
    12c0:	90 91 71 25 	lds	r25, 0x2571
    12c4:	18 96       	adiw	r26, 0x08	; 8
    12c6:	2d 91       	ld	r18, X+
    12c8:	3c 91       	ld	r19, X
    12ca:	19 97       	sbiw	r26, 0x09	; 9
    12cc:	82 17       	cp	r24, r18
    12ce:	93 07       	cpc	r25, r19
    12d0:	f8 f4       	brcc	.+62     	; 0x1310 <twim_interrupt_handler+0x122>

		uint8_t * const data = pkg->buffer;
    12d2:	16 96       	adiw	r26, 0x06	; 6
    12d4:	4d 91       	ld	r20, X+
    12d6:	5c 91       	ld	r21, X
    12d8:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    12da:	9c 01       	movw	r18, r24
    12dc:	2f 5f       	subi	r18, 0xFF	; 255
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	20 93 70 25 	sts	0x2570, r18
    12e4:	30 93 71 25 	sts	0x2571, r19
    12e8:	67 81       	ldd	r22, Z+7	; 0x07
    12ea:	ea 01       	movw	r28, r20
    12ec:	c8 0f       	add	r28, r24
    12ee:	d9 1f       	adc	r29, r25
    12f0:	68 83       	st	Y, r22

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    12f2:	18 96       	adiw	r26, 0x08	; 8
    12f4:	8d 91       	ld	r24, X+
    12f6:	9c 91       	ld	r25, X
    12f8:	19 97       	sbiw	r26, 0x09	; 9
    12fa:	28 17       	cp	r18, r24
    12fc:	39 07       	cpc	r19, r25
    12fe:	18 f4       	brcc	.+6      	; 0x1306 <twim_interrupt_handler+0x118>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	83 83       	std	Z+3, r24	; 0x03
    1304:	0e c0       	rjmp	.+28     	; 0x1322 <twim_interrupt_handler+0x134>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1306:	87 e0       	ldi	r24, 0x07	; 7
    1308:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    130a:	10 92 74 25 	sts	0x2574, r1
    130e:	09 c0       	rjmp	.+18     	; 0x1322 <twim_interrupt_handler+0x134>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1314:	89 ef       	ldi	r24, 0xF9	; 249
    1316:	80 93 74 25 	sts	0x2574, r24
    131a:	03 c0       	rjmp	.+6      	; 0x1322 <twim_interrupt_handler+0x134>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    131c:	8b ef       	ldi	r24, 0xFB	; 251
    131e:	80 93 74 25 	sts	0x2574, r24
	}
}
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	08 95       	ret

00001328 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1328:	1f 92       	push	r1
    132a:	0f 92       	push	r0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	2f 93       	push	r18
    1334:	3f 93       	push	r19
    1336:	4f 93       	push	r20
    1338:	5f 93       	push	r21
    133a:	6f 93       	push	r22
    133c:	7f 93       	push	r23
    133e:	8f 93       	push	r24
    1340:	9f 93       	push	r25
    1342:	af 93       	push	r26
    1344:	bf 93       	push	r27
    1346:	ef 93       	push	r30
    1348:	ff 93       	push	r31
    134a:	51 df       	rcall	.-350    	; 0x11ee <twim_interrupt_handler>
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	bf 91       	pop	r27
    1352:	af 91       	pop	r26
    1354:	9f 91       	pop	r25
    1356:	8f 91       	pop	r24
    1358:	7f 91       	pop	r23
    135a:	6f 91       	pop	r22
    135c:	5f 91       	pop	r21
    135e:	4f 91       	pop	r20
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	ef 93       	push	r30
    138e:	ff 93       	push	r31
    1390:	2e df       	rcall	.-420    	; 0x11ee <twim_interrupt_handler>
    1392:	ff 91       	pop	r31
    1394:	ef 91       	pop	r30
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	7f 91       	pop	r23
    13a0:	6f 91       	pop	r22
    13a2:	5f 91       	pop	r21
    13a4:	4f 91       	pop	r20
    13a6:	3f 91       	pop	r19
    13a8:	2f 91       	pop	r18
    13aa:	0f 90       	pop	r0
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	0f 90       	pop	r0
    13b0:	1f 90       	pop	r1
    13b2:	18 95       	reti

000013b4 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    13b4:	4f 92       	push	r4
    13b6:	5f 92       	push	r5
    13b8:	6f 92       	push	r6
    13ba:	7f 92       	push	r7
    13bc:	8f 92       	push	r8
    13be:	9f 92       	push	r9
    13c0:	af 92       	push	r10
    13c2:	bf 92       	push	r11
    13c4:	cf 92       	push	r12
    13c6:	df 92       	push	r13
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	ec 01       	movw	r28, r24
    13d6:	4a 01       	movw	r8, r20
    13d8:	5b 01       	movw	r10, r22
    13da:	28 01       	movw	r4, r16
    13dc:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    13de:	d9 01       	movw	r26, r18
    13e0:	c8 01       	movw	r24, r16
    13e2:	68 94       	set
    13e4:	12 f8       	bld	r1, 2
    13e6:	b6 95       	lsr	r27
    13e8:	a7 95       	ror	r26
    13ea:	97 95       	ror	r25
    13ec:	87 95       	ror	r24
    13ee:	16 94       	lsr	r1
    13f0:	d1 f7       	brne	.-12     	; 0x13e6 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    13f2:	b9 01       	movw	r22, r18
    13f4:	a8 01       	movw	r20, r16
    13f6:	03 2e       	mov	r0, r19
    13f8:	36 e1       	ldi	r19, 0x16	; 22
    13fa:	76 95       	lsr	r23
    13fc:	67 95       	ror	r22
    13fe:	57 95       	ror	r21
    1400:	47 95       	ror	r20
    1402:	3a 95       	dec	r19
    1404:	d1 f7       	brne	.-12     	; 0x13fa <usart_set_baudrate+0x46>
    1406:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1408:	2c 81       	ldd	r18, Y+4	; 0x04
    140a:	22 fd       	sbrc	r18, 2
    140c:	08 c0       	rjmp	.+16     	; 0x141e <usart_set_baudrate+0x6a>
		max_rate /= 2;
    140e:	b6 95       	lsr	r27
    1410:	a7 95       	ror	r26
    1412:	97 95       	ror	r25
    1414:	87 95       	ror	r24
		min_rate /= 2;
    1416:	76 95       	lsr	r23
    1418:	67 95       	ror	r22
    141a:	57 95       	ror	r21
    141c:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    141e:	88 15       	cp	r24, r8
    1420:	99 05       	cpc	r25, r9
    1422:	aa 05       	cpc	r26, r10
    1424:	bb 05       	cpc	r27, r11
    1426:	08 f4       	brcc	.+2      	; 0x142a <usart_set_baudrate+0x76>
    1428:	a6 c0       	rjmp	.+332    	; 0x1576 <usart_set_baudrate+0x1c2>
    142a:	84 16       	cp	r8, r20
    142c:	95 06       	cpc	r9, r21
    142e:	a6 06       	cpc	r10, r22
    1430:	b7 06       	cpc	r11, r23
    1432:	08 f4       	brcc	.+2      	; 0x1436 <usart_set_baudrate+0x82>
    1434:	a2 c0       	rjmp	.+324    	; 0x157a <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	82 fd       	sbrc	r24, 2
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <usart_set_baudrate+0x90>
		baud *= 2;
    143c:	88 0c       	add	r8, r8
    143e:	99 1c       	adc	r9, r9
    1440:	aa 1c       	adc	r10, r10
    1442:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1444:	c3 01       	movw	r24, r6
    1446:	b2 01       	movw	r22, r4
    1448:	a5 01       	movw	r20, r10
    144a:	94 01       	movw	r18, r8
    144c:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1450:	2f 3f       	cpi	r18, 0xFF	; 255
    1452:	31 05       	cpc	r19, r1
    1454:	41 05       	cpc	r20, r1
    1456:	51 05       	cpc	r21, r1
    1458:	08 f4       	brcc	.+2      	; 0x145c <usart_set_baudrate+0xa8>
    145a:	91 c0       	rjmp	.+290    	; 0x157e <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    145c:	c1 2c       	mov	r12, r1
    145e:	d1 2c       	mov	r13, r1
    1460:	76 01       	movw	r14, r12
    1462:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1464:	19 ef       	ldi	r17, 0xF9	; 249
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    1468:	2c 15       	cp	r18, r12
    146a:	3d 05       	cpc	r19, r13
    146c:	4e 05       	cpc	r20, r14
    146e:	5f 05       	cpc	r21, r15
    1470:	68 f0       	brcs	.+26     	; 0x148c <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    1472:	cc 0c       	add	r12, r12
    1474:	dd 1c       	adc	r13, r13
    1476:	ee 1c       	adc	r14, r14
    1478:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    147a:	1d 3f       	cpi	r17, 0xFD	; 253
    147c:	14 f4       	brge	.+4      	; 0x1482 <usart_set_baudrate+0xce>
			limit |= 1;
    147e:	68 94       	set
    1480:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1482:	1f 5f       	subi	r17, 0xFF	; 255
    1484:	17 30       	cpi	r17, 0x07	; 7
    1486:	81 f7       	brne	.-32     	; 0x1468 <usart_set_baudrate+0xb4>
    1488:	21 2f       	mov	r18, r17
    148a:	50 c0       	rjmp	.+160    	; 0x152c <usart_set_baudrate+0x178>
    148c:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    148e:	11 23       	and	r17, r17
    1490:	0c f0       	brlt	.+2      	; 0x1494 <usart_set_baudrate+0xe0>
    1492:	4c c0       	rjmp	.+152    	; 0x152c <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1494:	d5 01       	movw	r26, r10
    1496:	c4 01       	movw	r24, r8
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	aa 1f       	adc	r26, r26
    149e:	bb 1f       	adc	r27, r27
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	aa 1f       	adc	r26, r26
    14a6:	bb 1f       	adc	r27, r27
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	aa 1f       	adc	r26, r26
    14ae:	bb 1f       	adc	r27, r27
    14b0:	48 1a       	sub	r4, r24
    14b2:	59 0a       	sbc	r5, r25
    14b4:	6a 0a       	sbc	r6, r26
    14b6:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    14b8:	1e 3f       	cpi	r17, 0xFE	; 254
    14ba:	f4 f4       	brge	.+60     	; 0x14f8 <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    14bc:	6d ef       	ldi	r22, 0xFD	; 253
    14be:	7f ef       	ldi	r23, 0xFF	; 255
    14c0:	61 1b       	sub	r22, r17
    14c2:	71 09       	sbc	r23, r1
    14c4:	17 fd       	sbrc	r17, 7
    14c6:	73 95       	inc	r23
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <usart_set_baudrate+0x11e>
    14ca:	44 0c       	add	r4, r4
    14cc:	55 1c       	adc	r5, r5
    14ce:	66 1c       	adc	r6, r6
    14d0:	77 1c       	adc	r7, r7
    14d2:	6a 95       	dec	r22
    14d4:	d2 f7       	brpl	.-12     	; 0x14ca <usart_set_baudrate+0x116>
    14d6:	d5 01       	movw	r26, r10
    14d8:	c4 01       	movw	r24, r8
    14da:	b6 95       	lsr	r27
    14dc:	a7 95       	ror	r26
    14de:	97 95       	ror	r25
    14e0:	87 95       	ror	r24
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	64 0d       	add	r22, r4
    14e8:	75 1d       	adc	r23, r5
    14ea:	86 1d       	adc	r24, r6
    14ec:	97 1d       	adc	r25, r7
    14ee:	a5 01       	movw	r20, r10
    14f0:	94 01       	movw	r18, r8
    14f2:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__udivmodsi4>
    14f6:	36 c0       	rjmp	.+108    	; 0x1564 <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
    14f8:	23 e0       	ldi	r18, 0x03	; 3
    14fa:	21 0f       	add	r18, r17
    14fc:	d5 01       	movw	r26, r10
    14fe:	c4 01       	movw	r24, r8
    1500:	04 c0       	rjmp	.+8      	; 0x150a <usart_set_baudrate+0x156>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	aa 1f       	adc	r26, r26
    1508:	bb 1f       	adc	r27, r27
    150a:	2a 95       	dec	r18
    150c:	d2 f7       	brpl	.-12     	; 0x1502 <usart_set_baudrate+0x14e>
    150e:	9c 01       	movw	r18, r24
    1510:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    1512:	b6 95       	lsr	r27
    1514:	a7 95       	ror	r26
    1516:	97 95       	ror	r25
    1518:	87 95       	ror	r24
    151a:	bc 01       	movw	r22, r24
    151c:	cd 01       	movw	r24, r26
    151e:	64 0d       	add	r22, r4
    1520:	75 1d       	adc	r23, r5
    1522:	86 1d       	adc	r24, r6
    1524:	97 1d       	adc	r25, r7
    1526:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__udivmodsi4>
    152a:	1c c0       	rjmp	.+56     	; 0x1564 <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    152c:	2d 5f       	subi	r18, 0xFD	; 253
    152e:	d5 01       	movw	r26, r10
    1530:	c4 01       	movw	r24, r8
    1532:	04 c0       	rjmp	.+8      	; 0x153c <usart_set_baudrate+0x188>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	aa 1f       	adc	r26, r26
    153a:	bb 1f       	adc	r27, r27
    153c:	2a 95       	dec	r18
    153e:	d2 f7       	brpl	.-12     	; 0x1534 <usart_set_baudrate+0x180>
    1540:	9c 01       	movw	r18, r24
    1542:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1544:	b6 95       	lsr	r27
    1546:	a7 95       	ror	r26
    1548:	97 95       	ror	r25
    154a:	87 95       	ror	r24
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	64 0d       	add	r22, r4
    1552:	75 1d       	adc	r23, r5
    1554:	86 1d       	adc	r24, r6
    1556:	97 1d       	adc	r25, r7
    1558:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__udivmodsi4>
    155c:	21 50       	subi	r18, 0x01	; 1
    155e:	31 09       	sbc	r19, r1
    1560:	41 09       	sbc	r20, r1
    1562:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1564:	83 2f       	mov	r24, r19
    1566:	8f 70       	andi	r24, 0x0F	; 15
    1568:	12 95       	swap	r17
    156a:	10 7f       	andi	r17, 0xF0	; 240
    156c:	18 2b       	or	r17, r24
    156e:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1570:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	18 c0       	rjmp	.+48     	; 0x15a6 <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	16 c0       	rjmp	.+44     	; 0x15a6 <usart_set_baudrate+0x1f2>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    157e:	d5 01       	movw	r26, r10
    1580:	c4 01       	movw	r24, r8
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	aa 1f       	adc	r26, r26
    1588:	bb 1f       	adc	r27, r27
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	aa 1f       	adc	r26, r26
    1590:	bb 1f       	adc	r27, r27
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	aa 1f       	adc	r26, r26
    1598:	bb 1f       	adc	r27, r27
    159a:	48 1a       	sub	r4, r24
    159c:	59 0a       	sbc	r5, r25
    159e:	6a 0a       	sbc	r6, r26
    15a0:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    15a2:	19 ef       	ldi	r17, 0xF9	; 249
    15a4:	8b cf       	rjmp	.-234    	; 0x14bc <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	bf 90       	pop	r11
    15b8:	af 90       	pop	r10
    15ba:	9f 90       	pop	r9
    15bc:	8f 90       	pop	r8
    15be:	7f 90       	pop	r7
    15c0:	6f 90       	pop	r6
    15c2:	5f 90       	pop	r5
    15c4:	4f 90       	pop	r4
    15c6:	08 95       	ret

000015c8 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	ec 01       	movw	r28, r24
    15d2:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	09 f4       	brne	.+2      	; 0x15da <usart_init_rs232+0x12>
    15d8:	be c0       	rjmp	.+380    	; 0x1756 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    15da:	80 3c       	cpi	r24, 0xC0	; 192
    15dc:	91 05       	cpc	r25, r1
    15de:	21 f4       	brne	.+8      	; 0x15e8 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    15e0:	60 e1       	ldi	r22, 0x10	; 16
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	b4 d7       	rcall	.+3944   	; 0x254e <sysclk_enable_module>
    15e6:	b7 c0       	rjmp	.+366    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    15e8:	c1 15       	cp	r28, r1
    15ea:	84 e0       	ldi	r24, 0x04	; 4
    15ec:	d8 07       	cpc	r29, r24
    15ee:	21 f4       	brne	.+8      	; 0x15f8 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    15f0:	64 e0       	ldi	r22, 0x04	; 4
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	ac d7       	rcall	.+3928   	; 0x254e <sysclk_enable_module>
    15f6:	af c0       	rjmp	.+350    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    15f8:	c0 38       	cpi	r28, 0x80	; 128
    15fa:	e1 e0       	ldi	r30, 0x01	; 1
    15fc:	de 07       	cpc	r29, r30
    15fe:	21 f4       	brne	.+8      	; 0x1608 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1600:	62 e0       	ldi	r22, 0x02	; 2
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	a4 d7       	rcall	.+3912   	; 0x254e <sysclk_enable_module>
    1606:	a7 c0       	rjmp	.+334    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1608:	c1 15       	cp	r28, r1
    160a:	f1 e0       	ldi	r31, 0x01	; 1
    160c:	df 07       	cpc	r29, r31
    160e:	21 f4       	brne	.+8      	; 0x1618 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	9c d7       	rcall	.+3896   	; 0x254e <sysclk_enable_module>
    1616:	9f c0       	rjmp	.+318    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1618:	c0 38       	cpi	r28, 0x80	; 128
    161a:	83 e0       	ldi	r24, 0x03	; 3
    161c:	d8 07       	cpc	r29, r24
    161e:	21 f4       	brne	.+8      	; 0x1628 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	94 d7       	rcall	.+3880   	; 0x254e <sysclk_enable_module>
    1626:	97 c0       	rjmp	.+302    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1628:	c1 15       	cp	r28, r1
    162a:	e2 e0       	ldi	r30, 0x02	; 2
    162c:	de 07       	cpc	r29, r30
    162e:	21 f4       	brne	.+8      	; 0x1638 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1630:	62 e0       	ldi	r22, 0x02	; 2
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	8c d7       	rcall	.+3864   	; 0x254e <sysclk_enable_module>
    1636:	8f c0       	rjmp	.+286    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1638:	c0 32       	cpi	r28, 0x20	; 32
    163a:	f3 e0       	ldi	r31, 0x03	; 3
    163c:	df 07       	cpc	r29, r31
    163e:	21 f4       	brne	.+8      	; 0x1648 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1640:	64 e0       	ldi	r22, 0x04	; 4
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	84 d7       	rcall	.+3848   	; 0x254e <sysclk_enable_module>
    1646:	87 c0       	rjmp	.+270    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1648:	c1 15       	cp	r28, r1
    164a:	88 e0       	ldi	r24, 0x08	; 8
    164c:	d8 07       	cpc	r29, r24
    164e:	21 f4       	brne	.+8      	; 0x1658 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1650:	61 e0       	ldi	r22, 0x01	; 1
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	7c d7       	rcall	.+3832   	; 0x254e <sysclk_enable_module>
    1656:	7f c0       	rjmp	.+254    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1658:	c1 15       	cp	r28, r1
    165a:	e9 e0       	ldi	r30, 0x09	; 9
    165c:	de 07       	cpc	r29, r30
    165e:	21 f4       	brne	.+8      	; 0x1668 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	84 e0       	ldi	r24, 0x04	; 4
    1664:	74 d7       	rcall	.+3816   	; 0x254e <sysclk_enable_module>
    1666:	77 c0       	rjmp	.+238    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1668:	c1 15       	cp	r28, r1
    166a:	fa e0       	ldi	r31, 0x0A	; 10
    166c:	df 07       	cpc	r29, r31
    166e:	21 f4       	brne	.+8      	; 0x1678 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1670:	61 e0       	ldi	r22, 0x01	; 1
    1672:	85 e0       	ldi	r24, 0x05	; 5
    1674:	6c d7       	rcall	.+3800   	; 0x254e <sysclk_enable_module>
    1676:	6f c0       	rjmp	.+222    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1678:	c0 34       	cpi	r28, 0x40	; 64
    167a:	88 e0       	ldi	r24, 0x08	; 8
    167c:	d8 07       	cpc	r29, r24
    167e:	21 f4       	brne	.+8      	; 0x1688 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1680:	62 e0       	ldi	r22, 0x02	; 2
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	64 d7       	rcall	.+3784   	; 0x254e <sysclk_enable_module>
    1686:	67 c0       	rjmp	.+206    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1688:	c0 34       	cpi	r28, 0x40	; 64
    168a:	e9 e0       	ldi	r30, 0x09	; 9
    168c:	de 07       	cpc	r29, r30
    168e:	21 f4       	brne	.+8      	; 0x1698 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1690:	62 e0       	ldi	r22, 0x02	; 2
    1692:	84 e0       	ldi	r24, 0x04	; 4
    1694:	5c d7       	rcall	.+3768   	; 0x254e <sysclk_enable_module>
    1696:	5f c0       	rjmp	.+190    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1698:	c0 39       	cpi	r28, 0x90	; 144
    169a:	f8 e0       	ldi	r31, 0x08	; 8
    169c:	df 07       	cpc	r29, r31
    169e:	21 f4       	brne	.+8      	; 0x16a8 <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    16a0:	64 e0       	ldi	r22, 0x04	; 4
    16a2:	83 e0       	ldi	r24, 0x03	; 3
    16a4:	54 d7       	rcall	.+3752   	; 0x254e <sysclk_enable_module>
    16a6:	57 c0       	rjmp	.+174    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    16a8:	c0 39       	cpi	r28, 0x90	; 144
    16aa:	89 e0       	ldi	r24, 0x09	; 9
    16ac:	d8 07       	cpc	r29, r24
    16ae:	21 f4       	brne	.+8      	; 0x16b8 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    16b0:	64 e0       	ldi	r22, 0x04	; 4
    16b2:	84 e0       	ldi	r24, 0x04	; 4
    16b4:	4c d7       	rcall	.+3736   	; 0x254e <sysclk_enable_module>
    16b6:	4f c0       	rjmp	.+158    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    16b8:	c0 39       	cpi	r28, 0x90	; 144
    16ba:	ea e0       	ldi	r30, 0x0A	; 10
    16bc:	de 07       	cpc	r29, r30
    16be:	21 f4       	brne	.+8      	; 0x16c8 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    16c0:	64 e0       	ldi	r22, 0x04	; 4
    16c2:	85 e0       	ldi	r24, 0x05	; 5
    16c4:	44 d7       	rcall	.+3720   	; 0x254e <sysclk_enable_module>
    16c6:	47 c0       	rjmp	.+142    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    16c8:	c0 3c       	cpi	r28, 0xC0	; 192
    16ca:	f8 e0       	ldi	r31, 0x08	; 8
    16cc:	df 07       	cpc	r29, r31
    16ce:	21 f4       	brne	.+8      	; 0x16d8 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    16d0:	68 e0       	ldi	r22, 0x08	; 8
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	3c d7       	rcall	.+3704   	; 0x254e <sysclk_enable_module>
    16d6:	3f c0       	rjmp	.+126    	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    16d8:	c0 3c       	cpi	r28, 0xC0	; 192
    16da:	89 e0       	ldi	r24, 0x09	; 9
    16dc:	d8 07       	cpc	r29, r24
    16de:	21 f4       	brne	.+8      	; 0x16e8 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    16e0:	68 e0       	ldi	r22, 0x08	; 8
    16e2:	84 e0       	ldi	r24, 0x04	; 4
    16e4:	34 d7       	rcall	.+3688   	; 0x254e <sysclk_enable_module>
    16e6:	37 c0       	rjmp	.+110    	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    16e8:	c0 3a       	cpi	r28, 0xA0	; 160
    16ea:	e8 e0       	ldi	r30, 0x08	; 8
    16ec:	de 07       	cpc	r29, r30
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    16f0:	60 e1       	ldi	r22, 0x10	; 16
    16f2:	83 e0       	ldi	r24, 0x03	; 3
    16f4:	2c d7       	rcall	.+3672   	; 0x254e <sysclk_enable_module>
    16f6:	2f c0       	rjmp	.+94     	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    16f8:	c0 3a       	cpi	r28, 0xA0	; 160
    16fa:	f9 e0       	ldi	r31, 0x09	; 9
    16fc:	df 07       	cpc	r29, r31
    16fe:	21 f4       	brne	.+8      	; 0x1708 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1700:	60 e1       	ldi	r22, 0x10	; 16
    1702:	84 e0       	ldi	r24, 0x04	; 4
    1704:	24 d7       	rcall	.+3656   	; 0x254e <sysclk_enable_module>
    1706:	27 c0       	rjmp	.+78     	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1708:	c0 3a       	cpi	r28, 0xA0	; 160
    170a:	8a e0       	ldi	r24, 0x0A	; 10
    170c:	d8 07       	cpc	r29, r24
    170e:	21 f4       	brne	.+8      	; 0x1718 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1710:	60 e1       	ldi	r22, 0x10	; 16
    1712:	85 e0       	ldi	r24, 0x05	; 5
    1714:	1c d7       	rcall	.+3640   	; 0x254e <sysclk_enable_module>
    1716:	1f c0       	rjmp	.+62     	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1718:	c0 3b       	cpi	r28, 0xB0	; 176
    171a:	e8 e0       	ldi	r30, 0x08	; 8
    171c:	de 07       	cpc	r29, r30
    171e:	21 f4       	brne	.+8      	; 0x1728 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1720:	60 e2       	ldi	r22, 0x20	; 32
    1722:	83 e0       	ldi	r24, 0x03	; 3
    1724:	14 d7       	rcall	.+3624   	; 0x254e <sysclk_enable_module>
    1726:	17 c0       	rjmp	.+46     	; 0x1756 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1728:	c0 3b       	cpi	r28, 0xB0	; 176
    172a:	f9 e0       	ldi	r31, 0x09	; 9
    172c:	df 07       	cpc	r29, r31
    172e:	21 f4       	brne	.+8      	; 0x1738 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1730:	60 e2       	ldi	r22, 0x20	; 32
    1732:	84 e0       	ldi	r24, 0x04	; 4
    1734:	0c d7       	rcall	.+3608   	; 0x254e <sysclk_enable_module>
    1736:	0f c0       	rjmp	.+30     	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1738:	c0 38       	cpi	r28, 0x80	; 128
    173a:	84 e0       	ldi	r24, 0x04	; 4
    173c:	d8 07       	cpc	r29, r24
    173e:	21 f4       	brne	.+8      	; 0x1748 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1740:	60 e4       	ldi	r22, 0x40	; 64
    1742:	83 e0       	ldi	r24, 0x03	; 3
    1744:	04 d7       	rcall	.+3592   	; 0x254e <sysclk_enable_module>
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1748:	c0 3a       	cpi	r28, 0xA0	; 160
    174a:	e4 e0       	ldi	r30, 0x04	; 4
    174c:	de 07       	cpc	r29, r30
    174e:	19 f4       	brne	.+6      	; 0x1756 <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1750:	60 e4       	ldi	r22, 0x40	; 64
    1752:	85 e0       	ldi	r24, 0x05	; 5
    1754:	fc d6       	rcall	.+3576   	; 0x254e <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	8f 73       	andi	r24, 0x3F	; 63
    175a:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    175c:	f8 01       	movw	r30, r16
    175e:	94 81       	ldd	r25, Z+4	; 0x04
    1760:	85 81       	ldd	r24, Z+5	; 0x05
    1762:	89 2b       	or	r24, r25
    1764:	96 81       	ldd	r25, Z+6	; 0x06
    1766:	99 23       	and	r25, r25
    1768:	11 f0       	breq	.+4      	; 0x176e <usart_init_rs232+0x1a6>
    176a:	98 e0       	ldi	r25, 0x08	; 8
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <usart_init_rs232+0x1a8>
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	89 2b       	or	r24, r25
    1772:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1774:	f8 01       	movw	r30, r16
    1776:	40 81       	ld	r20, Z
    1778:	51 81       	ldd	r21, Z+1	; 0x01
    177a:	62 81       	ldd	r22, Z+2	; 0x02
    177c:	73 81       	ldd	r23, Z+3	; 0x03
    177e:	00 e0       	ldi	r16, 0x00	; 0
    1780:	1c e6       	ldi	r17, 0x6C	; 108
    1782:	2c ed       	ldi	r18, 0xDC	; 220
    1784:	32 e0       	ldi	r19, 0x02	; 2
    1786:	ce 01       	movw	r24, r28
    1788:	15 de       	rcall	.-982    	; 0x13b4 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    178a:	9c 81       	ldd	r25, Y+4	; 0x04
    178c:	98 60       	ori	r25, 0x08	; 8
    178e:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	90 61       	ori	r25, 0x10	; 16
    1794:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	0f 91       	pop	r16
    179e:	08 95       	ret

000017a0 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    17a0:	81 11       	cpse	r24, r1
    17a2:	18 c0       	rjmp	.+48     	; 0x17d4 <udd_sleep_mode+0x34>
    17a4:	90 91 a0 26 	lds	r25, 0x26A0
    17a8:	99 23       	and	r25, r25
    17aa:	89 f0       	breq	.+34     	; 0x17ce <udd_sleep_mode+0x2e>
    17ac:	9f b7       	in	r25, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	e7 e1       	ldi	r30, 0x17	; 23
    17b2:	f7 e2       	ldi	r31, 0x27	; 39
    17b4:	20 81       	ld	r18, Z
    17b6:	21 50       	subi	r18, 0x01	; 1
    17b8:	20 83       	st	Z, r18
    17ba:	9f bf       	out	0x3f, r25	; 63
    17bc:	08 c0       	rjmp	.+16     	; 0x17ce <udd_sleep_mode+0x2e>
    17be:	9f b7       	in	r25, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	e7 e1       	ldi	r30, 0x17	; 23
    17c4:	f7 e2       	ldi	r31, 0x27	; 39
    17c6:	20 81       	ld	r18, Z
    17c8:	2f 5f       	subi	r18, 0xFF	; 255
    17ca:	20 83       	st	Z, r18
    17cc:	9f bf       	out	0x3f, r25	; 63
    17ce:	80 93 a0 26 	sts	0x26A0, r24
    17d2:	08 95       	ret
    17d4:	90 91 a0 26 	lds	r25, 0x26A0
    17d8:	99 23       	and	r25, r25
    17da:	89 f3       	breq	.-30     	; 0x17be <udd_sleep_mode+0x1e>
    17dc:	f8 cf       	rjmp	.-16     	; 0x17ce <udd_sleep_mode+0x2e>

000017de <udd_ctrl_init>:
    17de:	0f 93       	push	r16
    17e0:	e8 ec       	ldi	r30, 0xC8	; 200
    17e2:	f4 e0       	ldi	r31, 0x04	; 4
    17e4:	80 81       	ld	r24, Z
    17e6:	8f 7d       	andi	r24, 0xDF	; 223
    17e8:	80 83       	st	Z, r24
    17ea:	80 81       	ld	r24, Z
    17ec:	8f 7d       	andi	r24, 0xDF	; 223
    17ee:	80 83       	st	Z, r24
    17f0:	e4 e7       	ldi	r30, 0x74	; 116
    17f2:	f6 e2       	ldi	r31, 0x26	; 38
    17f4:	02 e0       	ldi	r16, 0x02	; 2
    17f6:	05 93       	las	Z, r16
    17f8:	10 92 76 26 	sts	0x2676, r1
    17fc:	10 92 77 26 	sts	0x2677, r1
    1800:	00 e2       	ldi	r16, 0x20	; 32
    1802:	06 93       	lac	Z, r16
    1804:	00 e4       	ldi	r16, 0x40	; 64
    1806:	06 93       	lac	Z, r16
    1808:	ec e6       	ldi	r30, 0x6C	; 108
    180a:	f6 e2       	ldi	r31, 0x26	; 38
    180c:	00 e2       	ldi	r16, 0x20	; 32
    180e:	06 93       	lac	Z, r16
    1810:	00 e4       	ldi	r16, 0x40	; 64
    1812:	06 93       	lac	Z, r16
    1814:	10 92 12 27 	sts	0x2712, r1
    1818:	10 92 13 27 	sts	0x2713, r1
    181c:	10 92 14 27 	sts	0x2714, r1
    1820:	10 92 15 27 	sts	0x2715, r1
    1824:	10 92 10 27 	sts	0x2710, r1
    1828:	10 92 11 27 	sts	0x2711, r1
    182c:	10 92 5e 26 	sts	0x265E, r1
    1830:	0f 91       	pop	r16
    1832:	08 95       	ret

00001834 <udd_ctrl_stall_data>:
    1834:	0f 93       	push	r16
    1836:	85 e0       	ldi	r24, 0x05	; 5
    1838:	80 93 5e 26 	sts	0x265E, r24
    183c:	e5 e7       	ldi	r30, 0x75	; 117
    183e:	f6 e2       	ldi	r31, 0x26	; 38
    1840:	04 e0       	ldi	r16, 0x04	; 4
    1842:	05 93       	las	Z, r16
    1844:	ed e6       	ldi	r30, 0x6D	; 109
    1846:	f6 e2       	ldi	r31, 0x26	; 38
    1848:	04 e0       	ldi	r16, 0x04	; 4
    184a:	05 93       	las	Z, r16
    184c:	0f 91       	pop	r16
    184e:	08 95       	ret

00001850 <udd_ctrl_send_zlp_in>:
    1850:	0f 93       	push	r16
    1852:	83 e0       	ldi	r24, 0x03	; 3
    1854:	80 93 5e 26 	sts	0x265E, r24
    1858:	10 92 76 26 	sts	0x2676, r1
    185c:	10 92 77 26 	sts	0x2677, r1
    1860:	e4 e7       	ldi	r30, 0x74	; 116
    1862:	f6 e2       	ldi	r31, 0x26	; 38
    1864:	02 e0       	ldi	r16, 0x02	; 2
    1866:	06 93       	lac	Z, r16
    1868:	0f 91       	pop	r16
    186a:	08 95       	ret

0000186c <udd_ctrl_endofrequest>:
    186c:	e0 91 12 27 	lds	r30, 0x2712
    1870:	f0 91 13 27 	lds	r31, 0x2713
    1874:	30 97       	sbiw	r30, 0x00	; 0
    1876:	09 f0       	breq	.+2      	; 0x187a <udd_ctrl_endofrequest+0xe>
    1878:	09 95       	icall
    187a:	08 95       	ret

0000187c <udd_ctrl_in_sent>:
    187c:	0f 93       	push	r16
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	80 91 5e 26 	lds	r24, 0x265E
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	19 f4       	brne	.+6      	; 0x1890 <udd_ctrl_in_sent+0x14>
    188a:	f0 df       	rcall	.-32     	; 0x186c <udd_ctrl_endofrequest>
    188c:	a8 df       	rcall	.-176    	; 0x17de <udd_ctrl_init>
    188e:	60 c0       	rjmp	.+192    	; 0x1950 <udd_ctrl_in_sent+0xd4>
    1890:	80 91 5a 26 	lds	r24, 0x265A
    1894:	90 91 5b 26 	lds	r25, 0x265B
    1898:	c0 91 10 27 	lds	r28, 0x2710
    189c:	d0 91 11 27 	lds	r29, 0x2711
    18a0:	c8 1b       	sub	r28, r24
    18a2:	d9 0b       	sbc	r29, r25
    18a4:	71 f5       	brne	.+92     	; 0x1902 <udd_ctrl_in_sent+0x86>
    18a6:	20 91 5c 26 	lds	r18, 0x265C
    18aa:	30 91 5d 26 	lds	r19, 0x265D
    18ae:	82 0f       	add	r24, r18
    18b0:	93 1f       	adc	r25, r19
    18b2:	80 93 5c 26 	sts	0x265C, r24
    18b6:	90 93 5d 26 	sts	0x265D, r25
    18ba:	20 91 0c 27 	lds	r18, 0x270C
    18be:	30 91 0d 27 	lds	r19, 0x270D
    18c2:	82 17       	cp	r24, r18
    18c4:	93 07       	cpc	r25, r19
    18c6:	21 f0       	breq	.+8      	; 0x18d0 <udd_ctrl_in_sent+0x54>
    18c8:	80 91 75 25 	lds	r24, 0x2575
    18cc:	88 23       	and	r24, r24
    18ce:	41 f0       	breq	.+16     	; 0x18e0 <udd_ctrl_in_sent+0x64>
    18d0:	84 e0       	ldi	r24, 0x04	; 4
    18d2:	80 93 5e 26 	sts	0x265E, r24
    18d6:	ec e6       	ldi	r30, 0x6C	; 108
    18d8:	f6 e2       	ldi	r31, 0x26	; 38
    18da:	02 e0       	ldi	r16, 0x02	; 2
    18dc:	06 93       	lac	Z, r16
    18de:	38 c0       	rjmp	.+112    	; 0x1950 <udd_ctrl_in_sent+0xd4>
    18e0:	e0 91 14 27 	lds	r30, 0x2714
    18e4:	f0 91 15 27 	lds	r31, 0x2715
    18e8:	30 97       	sbiw	r30, 0x00	; 0
    18ea:	99 f0       	breq	.+38     	; 0x1912 <udd_ctrl_in_sent+0x96>
    18ec:	09 95       	icall
    18ee:	88 23       	and	r24, r24
    18f0:	81 f0       	breq	.+32     	; 0x1912 <udd_ctrl_in_sent+0x96>
    18f2:	10 92 5a 26 	sts	0x265A, r1
    18f6:	10 92 5b 26 	sts	0x265B, r1
    18fa:	c0 91 10 27 	lds	r28, 0x2710
    18fe:	d0 91 11 27 	lds	r29, 0x2711
    1902:	c0 34       	cpi	r28, 0x40	; 64
    1904:	d1 05       	cpc	r29, r1
    1906:	28 f0       	brcs	.+10     	; 0x1912 <udd_ctrl_in_sent+0x96>
    1908:	10 92 75 25 	sts	0x2575, r1
    190c:	c0 e4       	ldi	r28, 0x40	; 64
    190e:	d0 e0       	ldi	r29, 0x00	; 0
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <udd_ctrl_in_sent+0x9c>
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	80 93 75 25 	sts	0x2575, r24
    1918:	c0 93 76 26 	sts	0x2676, r28
    191c:	d0 93 77 26 	sts	0x2677, r29
    1920:	80 91 5a 26 	lds	r24, 0x265A
    1924:	90 91 5b 26 	lds	r25, 0x265B
    1928:	20 91 0e 27 	lds	r18, 0x270E
    192c:	30 91 0f 27 	lds	r19, 0x270F
    1930:	28 0f       	add	r18, r24
    1932:	39 1f       	adc	r19, r25
    1934:	20 93 78 26 	sts	0x2678, r18
    1938:	30 93 79 26 	sts	0x2679, r19
    193c:	c8 0f       	add	r28, r24
    193e:	d9 1f       	adc	r29, r25
    1940:	c0 93 5a 26 	sts	0x265A, r28
    1944:	d0 93 5b 26 	sts	0x265B, r29
    1948:	e4 e7       	ldi	r30, 0x74	; 116
    194a:	f6 e2       	ldi	r31, 0x26	; 38
    194c:	02 e0       	ldi	r16, 0x02	; 2
    194e:	06 93       	lac	Z, r16
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	0f 91       	pop	r16
    1956:	08 95       	ret

00001958 <udd_ep_get_size>:
    1958:	fc 01       	movw	r30, r24
    195a:	81 81       	ldd	r24, Z+1	; 0x01
    195c:	87 70       	andi	r24, 0x07	; 7
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	fc 01       	movw	r30, r24
    1962:	31 97       	sbiw	r30, 0x01	; 1
    1964:	e7 30       	cpi	r30, 0x07	; 7
    1966:	f1 05       	cpc	r31, r1
    1968:	20 f4       	brcc	.+8      	; 0x1972 <udd_ep_get_size+0x1a>
    196a:	e2 50       	subi	r30, 0x02	; 2
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	0c 94 24 25 	jmp	0x4a48	; 0x4a48 <__tablejump2__>
    1972:	88 e0       	ldi	r24, 0x08	; 8
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	08 95       	ret
    1978:	80 e2       	ldi	r24, 0x20	; 32
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	08 95       	ret
    197e:	80 e4       	ldi	r24, 0x40	; 64
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	08 95       	ret
    1984:	80 e8       	ldi	r24, 0x80	; 128
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	08 95       	ret
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	08 95       	ret
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	92 e0       	ldi	r25, 0x02	; 2
    1994:	08 95       	ret
    1996:	8f ef       	ldi	r24, 0xFF	; 255
    1998:	93 e0       	ldi	r25, 0x03	; 3
    199a:	08 95       	ret
    199c:	80 e1       	ldi	r24, 0x10	; 16
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	08 95       	ret

000019a2 <udd_ep_get_job>:
    19a2:	28 2f       	mov	r18, r24
    19a4:	2f 70       	andi	r18, 0x0F	; 15
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	22 0f       	add	r18, r18
    19aa:	33 1f       	adc	r19, r19
    19ac:	99 27       	eor	r25, r25
    19ae:	87 fd       	sbrc	r24, 7
    19b0:	90 95       	com	r25
    19b2:	88 27       	eor	r24, r24
    19b4:	99 0f       	add	r25, r25
    19b6:	88 1f       	adc	r24, r24
    19b8:	99 27       	eor	r25, r25
    19ba:	82 0f       	add	r24, r18
    19bc:	93 1f       	adc	r25, r19
    19be:	02 97       	sbiw	r24, 0x02	; 2
    19c0:	9c 01       	movw	r18, r24
    19c2:	22 0f       	add	r18, r18
    19c4:	33 1f       	adc	r19, r19
    19c6:	22 0f       	add	r18, r18
    19c8:	33 1f       	adc	r19, r19
    19ca:	22 0f       	add	r18, r18
    19cc:	33 1f       	adc	r19, r19
    19ce:	82 0f       	add	r24, r18
    19d0:	93 1f       	adc	r25, r19
    19d2:	8a 50       	subi	r24, 0x0A	; 10
    19d4:	9a 4d       	sbci	r25, 0xDA	; 218
    19d6:	08 95       	ret

000019d8 <udd_ctrl_interrupt_tc_setup>:
    19d8:	0f 93       	push	r16
    19da:	cf 93       	push	r28
    19dc:	80 91 cc 04 	lds	r24, 0x04CC
    19e0:	80 ff       	sbrs	r24, 0
    19e2:	62 c0       	rjmp	.+196    	; 0x1aa8 <udd_ctrl_interrupt_tc_setup+0xd0>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 93 cc 04 	sts	0x04CC, r24
    19ea:	ec e6       	ldi	r30, 0x6C	; 108
    19ec:	f6 e2       	ldi	r31, 0x26	; 38
    19ee:	00 e8       	ldi	r16, 0x80	; 128
    19f0:	06 93       	lac	Z, r16
    19f2:	e4 e7       	ldi	r30, 0x74	; 116
    19f4:	f6 e2       	ldi	r31, 0x26	; 38
    19f6:	00 e8       	ldi	r16, 0x80	; 128
    19f8:	06 93       	lac	Z, r16
    19fa:	80 93 ca 04 	sts	0x04CA, r24
    19fe:	ec e6       	ldi	r30, 0x6C	; 108
    1a00:	f6 e2       	ldi	r31, 0x26	; 38
    1a02:	00 e1       	ldi	r16, 0x10	; 16
    1a04:	06 93       	lac	Z, r16
    1a06:	80 91 5e 26 	lds	r24, 0x265E
    1a0a:	88 23       	and	r24, r24
    1a0c:	29 f0       	breq	.+10     	; 0x1a18 <udd_ctrl_interrupt_tc_setup+0x40>
    1a0e:	83 50       	subi	r24, 0x03	; 3
    1a10:	82 30       	cpi	r24, 0x02	; 2
    1a12:	08 f4       	brcc	.+2      	; 0x1a16 <udd_ctrl_interrupt_tc_setup+0x3e>
    1a14:	2b df       	rcall	.-426    	; 0x186c <udd_ctrl_endofrequest>
    1a16:	e3 de       	rcall	.-570    	; 0x17de <udd_ctrl_init>
    1a18:	80 91 6e 26 	lds	r24, 0x266E
    1a1c:	90 91 6f 26 	lds	r25, 0x266F
    1a20:	08 97       	sbiw	r24, 0x08	; 8
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <udd_ctrl_interrupt_tc_setup+0x4e>
    1a24:	43 c0       	rjmp	.+134    	; 0x1aac <udd_ctrl_interrupt_tc_setup+0xd4>
    1a26:	88 e0       	ldi	r24, 0x08	; 8
    1a28:	ea e1       	ldi	r30, 0x1A	; 26
    1a2a:	f6 e2       	ldi	r31, 0x26	; 38
    1a2c:	a6 e0       	ldi	r26, 0x06	; 6
    1a2e:	b7 e2       	ldi	r27, 0x27	; 39
    1a30:	01 90       	ld	r0, Z+
    1a32:	0d 92       	st	X+, r0
    1a34:	8a 95       	dec	r24
    1a36:	e1 f7       	brne	.-8      	; 0x1a30 <udd_ctrl_interrupt_tc_setup+0x58>
    1a38:	e8 ec       	ldi	r30, 0xC8	; 200
    1a3a:	f4 e0       	ldi	r31, 0x04	; 4
    1a3c:	80 81       	ld	r24, Z
    1a3e:	80 62       	ori	r24, 0x20	; 32
    1a40:	80 83       	st	Z, r24
    1a42:	80 81       	ld	r24, Z
    1a44:	80 62       	ori	r24, 0x20	; 32
    1a46:	80 83       	st	Z, r24
    1a48:	c2 d8       	rcall	.-3708   	; 0xbce <udc_process_setup>
    1a4a:	c8 2f       	mov	r28, r24
    1a4c:	81 11       	cpse	r24, r1
    1a4e:	03 c0       	rjmp	.+6      	; 0x1a56 <udd_ctrl_interrupt_tc_setup+0x7e>
    1a50:	f1 de       	rcall	.-542    	; 0x1834 <udd_ctrl_stall_data>
    1a52:	c1 e0       	ldi	r28, 0x01	; 1
    1a54:	2c c0       	rjmp	.+88     	; 0x1aae <udd_ctrl_interrupt_tc_setup+0xd6>
    1a56:	80 91 06 27 	lds	r24, 0x2706
    1a5a:	88 23       	and	r24, r24
    1a5c:	6c f4       	brge	.+26     	; 0x1a78 <udd_ctrl_interrupt_tc_setup+0xa0>
    1a5e:	10 92 5c 26 	sts	0x265C, r1
    1a62:	10 92 5d 26 	sts	0x265D, r1
    1a66:	10 92 5a 26 	sts	0x265A, r1
    1a6a:	10 92 5b 26 	sts	0x265B, r1
    1a6e:	82 e0       	ldi	r24, 0x02	; 2
    1a70:	80 93 5e 26 	sts	0x265E, r24
    1a74:	03 df       	rcall	.-506    	; 0x187c <udd_ctrl_in_sent>
    1a76:	1b c0       	rjmp	.+54     	; 0x1aae <udd_ctrl_interrupt_tc_setup+0xd6>
    1a78:	20 91 0c 27 	lds	r18, 0x270C
    1a7c:	30 91 0d 27 	lds	r19, 0x270D
    1a80:	23 2b       	or	r18, r19
    1a82:	11 f4       	brne	.+4      	; 0x1a88 <udd_ctrl_interrupt_tc_setup+0xb0>
    1a84:	e5 de       	rcall	.-566    	; 0x1850 <udd_ctrl_send_zlp_in>
    1a86:	13 c0       	rjmp	.+38     	; 0x1aae <udd_ctrl_interrupt_tc_setup+0xd6>
    1a88:	10 92 5c 26 	sts	0x265C, r1
    1a8c:	10 92 5d 26 	sts	0x265D, r1
    1a90:	10 92 5a 26 	sts	0x265A, r1
    1a94:	10 92 5b 26 	sts	0x265B, r1
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	80 93 5e 26 	sts	0x265E, r24
    1a9e:	ec e6       	ldi	r30, 0x6C	; 108
    1aa0:	f6 e2       	ldi	r31, 0x26	; 38
    1aa2:	02 e0       	ldi	r16, 0x02	; 2
    1aa4:	06 93       	lac	Z, r16
    1aa6:	03 c0       	rjmp	.+6      	; 0x1aae <udd_ctrl_interrupt_tc_setup+0xd6>
    1aa8:	c0 e0       	ldi	r28, 0x00	; 0
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <udd_ctrl_interrupt_tc_setup+0xd6>
    1aac:	c1 e0       	ldi	r28, 0x01	; 1
    1aae:	8c 2f       	mov	r24, r28
    1ab0:	cf 91       	pop	r28
    1ab2:	0f 91       	pop	r16
    1ab4:	08 95       	ret

00001ab6 <udd_ep_trans_complet>:
    1ab6:	bf 92       	push	r11
    1ab8:	cf 92       	push	r12
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	b8 2e       	mov	r11, r24
    1aca:	6b df       	rcall	.-298    	; 0x19a2 <udd_ep_get_job>
    1acc:	ec 01       	movw	r28, r24
    1ace:	1b 2d       	mov	r17, r11
    1ad0:	11 1f       	adc	r17, r17
    1ad2:	11 27       	eor	r17, r17
    1ad4:	11 1f       	adc	r17, r17
    1ad6:	8b 2d       	mov	r24, r11
    1ad8:	8f 70       	andi	r24, 0x0F	; 15
    1ada:	e8 2e       	mov	r14, r24
    1adc:	f1 2c       	mov	r15, r1
    1ade:	ee 0c       	add	r14, r14
    1ae0:	ff 1c       	adc	r15, r15
    1ae2:	e1 0e       	add	r14, r17
    1ae4:	f1 1c       	adc	r15, r1
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	9c 01       	movw	r18, r24
    1af6:	24 59       	subi	r18, 0x94	; 148
    1af8:	39 4d       	sbci	r19, 0xD9	; 217
    1afa:	79 01       	movw	r14, r18
    1afc:	c9 01       	movw	r24, r18
    1afe:	2c df       	rcall	.-424    	; 0x1958 <udd_ep_get_size>
    1b00:	6c 01       	movw	r12, r24
    1b02:	11 23       	and	r17, r17
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <udd_ep_trans_complet+0x52>
    1b06:	5b c0       	rjmp	.+182    	; 0x1bbe <udd_ep_trans_complet+0x108>
    1b08:	d7 01       	movw	r26, r14
    1b0a:	16 96       	adiw	r26, 0x06	; 6
    1b0c:	2d 91       	ld	r18, X+
    1b0e:	3c 91       	ld	r19, X
    1b10:	17 97       	sbiw	r26, 0x07	; 7
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	28 0f       	add	r18, r24
    1b18:	39 1f       	adc	r19, r25
    1b1a:	2d 83       	std	Y+5, r18	; 0x05
    1b1c:	3e 83       	std	Y+6, r19	; 0x06
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	28 17       	cp	r18, r24
    1b24:	39 07       	cpc	r19, r25
    1b26:	c9 f1       	breq	.+114    	; 0x1b9a <udd_ep_trans_complet+0xe4>
    1b28:	fc 01       	movw	r30, r24
    1b2a:	e2 1b       	sub	r30, r18
    1b2c:	f3 0b       	sbc	r31, r19
    1b2e:	9f 01       	movw	r18, r30
    1b30:	21 15       	cp	r18, r1
    1b32:	f4 e0       	ldi	r31, 0x04	; 4
    1b34:	3f 07       	cpc	r19, r31
    1b36:	40 f0       	brcs	.+16     	; 0x1b48 <udd_ep_trans_complet+0x92>
    1b38:	2f ef       	ldi	r18, 0xFF	; 255
    1b3a:	33 e0       	ldi	r19, 0x03	; 3
    1b3c:	c9 01       	movw	r24, r18
    1b3e:	b6 01       	movw	r22, r12
    1b40:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__udivmodhi4>
    1b44:	28 1b       	sub	r18, r24
    1b46:	39 0b       	sbc	r19, r25
    1b48:	88 81       	ld	r24, Y
    1b4a:	81 ff       	sbrs	r24, 1
    1b4c:	0a c0       	rjmp	.+20     	; 0x1b62 <udd_ep_trans_complet+0xac>
    1b4e:	c9 01       	movw	r24, r18
    1b50:	b6 01       	movw	r22, r12
    1b52:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__udivmodhi4>
    1b56:	41 e0       	ldi	r20, 0x01	; 1
    1b58:	89 2b       	or	r24, r25
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <udd_ep_trans_complet+0xa8>
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	94 2f       	mov	r25, r20
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <udd_ep_trans_complet+0xae>
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	88 81       	ld	r24, Y
    1b66:	90 fb       	bst	r25, 0
    1b68:	81 f9       	bld	r24, 1
    1b6a:	88 83       	st	Y, r24
    1b6c:	d7 01       	movw	r26, r14
    1b6e:	16 96       	adiw	r26, 0x06	; 6
    1b70:	1d 92       	st	X+, r1
    1b72:	1c 92       	st	X, r1
    1b74:	17 97       	sbiw	r26, 0x07	; 7
    1b76:	12 96       	adiw	r26, 0x02	; 2
    1b78:	2d 93       	st	X+, r18
    1b7a:	3c 93       	st	X, r19
    1b7c:	13 97       	sbiw	r26, 0x03	; 3
    1b7e:	29 81       	ldd	r18, Y+1	; 0x01
    1b80:	3a 81       	ldd	r19, Y+2	; 0x02
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	9e 81       	ldd	r25, Y+6	; 0x06
    1b86:	82 0f       	add	r24, r18
    1b88:	93 1f       	adc	r25, r19
    1b8a:	14 96       	adiw	r26, 0x04	; 4
    1b8c:	8d 93       	st	X+, r24
    1b8e:	9c 93       	st	X, r25
    1b90:	15 97       	sbiw	r26, 0x05	; 5
    1b92:	f7 01       	movw	r30, r14
    1b94:	02 e0       	ldi	r16, 0x02	; 2
    1b96:	06 93       	lac	Z, r16
    1b98:	98 c0       	rjmp	.+304    	; 0x1cca <udd_ep_trans_complet+0x214>
    1b9a:	88 81       	ld	r24, Y
    1b9c:	81 ff       	sbrs	r24, 1
    1b9e:	87 c0       	rjmp	.+270    	; 0x1cae <udd_ep_trans_complet+0x1f8>
    1ba0:	8d 7f       	andi	r24, 0xFD	; 253
    1ba2:	88 83       	st	Y, r24
    1ba4:	d7 01       	movw	r26, r14
    1ba6:	16 96       	adiw	r26, 0x06	; 6
    1ba8:	1d 92       	st	X+, r1
    1baa:	1c 92       	st	X, r1
    1bac:	17 97       	sbiw	r26, 0x07	; 7
    1bae:	12 96       	adiw	r26, 0x02	; 2
    1bb0:	1d 92       	st	X+, r1
    1bb2:	1c 92       	st	X, r1
    1bb4:	13 97       	sbiw	r26, 0x03	; 3
    1bb6:	f7 01       	movw	r30, r14
    1bb8:	02 e0       	ldi	r16, 0x02	; 2
    1bba:	06 93       	lac	Z, r16
    1bbc:	86 c0       	rjmp	.+268    	; 0x1cca <udd_ep_trans_complet+0x214>
    1bbe:	d7 01       	movw	r26, r14
    1bc0:	12 96       	adiw	r26, 0x02	; 2
    1bc2:	0d 91       	ld	r16, X+
    1bc4:	1c 91       	ld	r17, X
    1bc6:	13 97       	sbiw	r26, 0x03	; 3
    1bc8:	88 81       	ld	r24, Y
    1bca:	82 ff       	sbrs	r24, 2
    1bcc:	15 c0       	rjmp	.+42     	; 0x1bf8 <udd_ep_trans_complet+0x142>
    1bce:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd2:	2d 81       	ldd	r18, Y+5	; 0x05
    1bd4:	3e 81       	ldd	r19, Y+6	; 0x06
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	b6 01       	movw	r22, r12
    1bdc:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__udivmodhi4>
    1be0:	b0 e4       	ldi	r27, 0x40	; 64
    1be2:	bb 9e       	mul	r11, r27
    1be4:	b0 01       	movw	r22, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	6a 5c       	subi	r22, 0xCA	; 202
    1bea:	7a 4d       	sbci	r23, 0xDA	; 218
    1bec:	ac 01       	movw	r20, r24
    1bee:	cf 01       	movw	r24, r30
    1bf0:	82 0f       	add	r24, r18
    1bf2:	93 1f       	adc	r25, r19
    1bf4:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <memcpy>
    1bf8:	2d 81       	ldd	r18, Y+5	; 0x05
    1bfa:	3e 81       	ldd	r19, Y+6	; 0x06
    1bfc:	20 0f       	add	r18, r16
    1bfe:	31 1f       	adc	r19, r17
    1c00:	2d 83       	std	Y+5, r18	; 0x05
    1c02:	3e 83       	std	Y+6, r19	; 0x06
    1c04:	eb 81       	ldd	r30, Y+3	; 0x03
    1c06:	fc 81       	ldd	r31, Y+4	; 0x04
    1c08:	e2 17       	cp	r30, r18
    1c0a:	f3 07       	cpc	r31, r19
    1c0c:	10 f4       	brcc	.+4      	; 0x1c12 <udd_ep_trans_complet+0x15c>
    1c0e:	ed 83       	std	Y+5, r30	; 0x05
    1c10:	fe 83       	std	Y+6, r31	; 0x06
    1c12:	d7 01       	movw	r26, r14
    1c14:	16 96       	adiw	r26, 0x06	; 6
    1c16:	8d 91       	ld	r24, X+
    1c18:	9c 91       	ld	r25, X
    1c1a:	17 97       	sbiw	r26, 0x07	; 7
    1c1c:	80 17       	cp	r24, r16
    1c1e:	91 07       	cpc	r25, r17
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <udd_ep_trans_complet+0x16e>
    1c22:	45 c0       	rjmp	.+138    	; 0x1cae <udd_ep_trans_complet+0x1f8>
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
    1c26:	9e 81       	ldd	r25, Y+6	; 0x06
    1c28:	e8 17       	cp	r30, r24
    1c2a:	f9 07       	cpc	r31, r25
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <udd_ep_trans_complet+0x17a>
    1c2e:	3f c0       	rjmp	.+126    	; 0x1cae <udd_ep_trans_complet+0x1f8>
    1c30:	e8 1b       	sub	r30, r24
    1c32:	f9 0b       	sbc	r31, r25
    1c34:	e1 15       	cp	r30, r1
    1c36:	b4 e0       	ldi	r27, 0x04	; 4
    1c38:	fb 07       	cpc	r31, r27
    1c3a:	48 f0       	brcs	.+18     	; 0x1c4e <udd_ep_trans_complet+0x198>
    1c3c:	ef ef       	ldi	r30, 0xFF	; 255
    1c3e:	f3 e0       	ldi	r31, 0x03	; 3
    1c40:	cf 01       	movw	r24, r30
    1c42:	b6 01       	movw	r22, r12
    1c44:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__udivmodhi4>
    1c48:	e8 1b       	sub	r30, r24
    1c4a:	f9 0b       	sbc	r31, r25
    1c4c:	06 c0       	rjmp	.+12     	; 0x1c5a <udd_ep_trans_complet+0x1a4>
    1c4e:	cf 01       	movw	r24, r30
    1c50:	b6 01       	movw	r22, r12
    1c52:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__udivmodhi4>
    1c56:	e8 1b       	sub	r30, r24
    1c58:	f9 0b       	sbc	r31, r25
    1c5a:	d7 01       	movw	r26, r14
    1c5c:	12 96       	adiw	r26, 0x02	; 2
    1c5e:	1d 92       	st	X+, r1
    1c60:	1c 92       	st	X, r1
    1c62:	13 97       	sbiw	r26, 0x03	; 3
    1c64:	ec 15       	cp	r30, r12
    1c66:	fd 05       	cpc	r31, r13
    1c68:	78 f4       	brcc	.+30     	; 0x1c88 <udd_ep_trans_complet+0x1d2>
    1c6a:	88 81       	ld	r24, Y
    1c6c:	84 60       	ori	r24, 0x04	; 4
    1c6e:	88 83       	st	Y, r24
    1c70:	b0 e4       	ldi	r27, 0x40	; 64
    1c72:	bb 9e       	mul	r11, r27
    1c74:	c0 01       	movw	r24, r0
    1c76:	11 24       	eor	r1, r1
    1c78:	8a 5c       	subi	r24, 0xCA	; 202
    1c7a:	9a 4d       	sbci	r25, 0xDA	; 218
    1c7c:	f7 01       	movw	r30, r14
    1c7e:	84 83       	std	Z+4, r24	; 0x04
    1c80:	95 83       	std	Z+5, r25	; 0x05
    1c82:	c6 82       	std	Z+6, r12	; 0x06
    1c84:	d7 82       	std	Z+7, r13	; 0x07
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <udd_ep_trans_complet+0x1f0>
    1c88:	29 81       	ldd	r18, Y+1	; 0x01
    1c8a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	82 0f       	add	r24, r18
    1c92:	93 1f       	adc	r25, r19
    1c94:	d7 01       	movw	r26, r14
    1c96:	14 96       	adiw	r26, 0x04	; 4
    1c98:	8d 93       	st	X+, r24
    1c9a:	9c 93       	st	X, r25
    1c9c:	15 97       	sbiw	r26, 0x05	; 5
    1c9e:	16 96       	adiw	r26, 0x06	; 6
    1ca0:	ed 93       	st	X+, r30
    1ca2:	fc 93       	st	X, r31
    1ca4:	17 97       	sbiw	r26, 0x07	; 7
    1ca6:	f7 01       	movw	r30, r14
    1ca8:	02 e0       	ldi	r16, 0x02	; 2
    1caa:	06 93       	lac	Z, r16
    1cac:	0e c0       	rjmp	.+28     	; 0x1cca <udd_ep_trans_complet+0x214>
    1cae:	88 81       	ld	r24, Y
    1cb0:	80 ff       	sbrs	r24, 0
    1cb2:	0b c0       	rjmp	.+22     	; 0x1cca <udd_ep_trans_complet+0x214>
    1cb4:	8e 7f       	andi	r24, 0xFE	; 254
    1cb6:	88 83       	st	Y, r24
    1cb8:	ef 81       	ldd	r30, Y+7	; 0x07
    1cba:	f8 85       	ldd	r31, Y+8	; 0x08
    1cbc:	30 97       	sbiw	r30, 0x00	; 0
    1cbe:	29 f0       	breq	.+10     	; 0x1cca <udd_ep_trans_complet+0x214>
    1cc0:	6d 81       	ldd	r22, Y+5	; 0x05
    1cc2:	7e 81       	ldd	r23, Y+6	; 0x06
    1cc4:	4b 2d       	mov	r20, r11
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	09 95       	icall
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	ff 90       	pop	r15
    1cd4:	ef 90       	pop	r14
    1cd6:	df 90       	pop	r13
    1cd8:	cf 90       	pop	r12
    1cda:	bf 90       	pop	r11
    1cdc:	08 95       	ret

00001cde <udd_attach>:
    1cde:	cf 93       	push	r28
    1ce0:	cf b7       	in	r28, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	5c dd       	rcall	.-1352   	; 0x17a0 <udd_sleep_mode>
    1ce8:	ea ec       	ldi	r30, 0xCA	; 202
    1cea:	f4 e0       	ldi	r31, 0x04	; 4
    1cec:	80 e4       	ldi	r24, 0x40	; 64
    1cee:	80 83       	st	Z, r24
    1cf0:	80 e2       	ldi	r24, 0x20	; 32
    1cf2:	80 83       	st	Z, r24
    1cf4:	e1 ec       	ldi	r30, 0xC1	; 193
    1cf6:	f4 e0       	ldi	r31, 0x04	; 4
    1cf8:	80 81       	ld	r24, Z
    1cfa:	81 60       	ori	r24, 0x01	; 1
    1cfc:	80 83       	st	Z, r24
    1cfe:	a9 ec       	ldi	r26, 0xC9	; 201
    1d00:	b4 e0       	ldi	r27, 0x04	; 4
    1d02:	8c 91       	ld	r24, X
    1d04:	82 60       	ori	r24, 0x02	; 2
    1d06:	8c 93       	st	X, r24
    1d08:	e8 ec       	ldi	r30, 0xC8	; 200
    1d0a:	f4 e0       	ldi	r31, 0x04	; 4
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 64       	ori	r24, 0x40	; 64
    1d10:	80 83       	st	Z, r24
    1d12:	8c 91       	ld	r24, X
    1d14:	81 60       	ori	r24, 0x01	; 1
    1d16:	8c 93       	st	X, r24
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 68       	ori	r24, 0x80	; 128
    1d1c:	80 83       	st	Z, r24
    1d1e:	cf bf       	out	0x3f, r28	; 63
    1d20:	cf 91       	pop	r28
    1d22:	08 95       	ret

00001d24 <udd_enable>:
    1d24:	cf 93       	push	r28
    1d26:	80 e3       	ldi	r24, 0x30	; 48
    1d28:	1e d4       	rcall	.+2108   	; 0x2566 <sysclk_enable_usb>
    1d2a:	e0 ec       	ldi	r30, 0xC0	; 192
    1d2c:	f4 e0       	ldi	r31, 0x04	; 4
    1d2e:	80 81       	ld	r24, Z
    1d30:	80 64       	ori	r24, 0x40	; 64
    1d32:	80 83       	st	Z, r24
    1d34:	cf b7       	in	r28, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	10 92 6d 26 	sts	0x266D, r1
    1d3c:	10 92 75 26 	sts	0x2675, r1
    1d40:	10 92 7d 26 	sts	0x267D, r1
    1d44:	10 92 85 26 	sts	0x2685, r1
    1d48:	10 92 8d 26 	sts	0x268D, r1
    1d4c:	10 92 95 26 	sts	0x2695, r1
    1d50:	e6 ef       	ldi	r30, 0xF6	; 246
    1d52:	f5 e2       	ldi	r31, 0x25	; 37
    1d54:	80 81       	ld	r24, Z
    1d56:	8e 7f       	andi	r24, 0xFE	; 254
    1d58:	80 83       	st	Z, r24
    1d5a:	ef ef       	ldi	r30, 0xFF	; 255
    1d5c:	f5 e2       	ldi	r31, 0x25	; 37
    1d5e:	80 81       	ld	r24, Z
    1d60:	8e 7f       	andi	r24, 0xFE	; 254
    1d62:	80 83       	st	Z, r24
    1d64:	e8 e0       	ldi	r30, 0x08	; 8
    1d66:	f6 e2       	ldi	r31, 0x26	; 38
    1d68:	80 81       	ld	r24, Z
    1d6a:	8e 7f       	andi	r24, 0xFE	; 254
    1d6c:	80 83       	st	Z, r24
    1d6e:	e1 e1       	ldi	r30, 0x11	; 17
    1d70:	f6 e2       	ldi	r31, 0x26	; 38
    1d72:	80 81       	ld	r24, Z
    1d74:	8e 7f       	andi	r24, 0xFE	; 254
    1d76:	80 83       	st	Z, r24
    1d78:	6a e1       	ldi	r22, 0x1A	; 26
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	0e d4       	rcall	.+2076   	; 0x259c <nvm_read_byte>
    1d80:	8f 3f       	cpi	r24, 0xFF	; 255
    1d82:	19 f0       	breq	.+6      	; 0x1d8a <udd_enable+0x66>
    1d84:	80 93 fa 04 	sts	0x04FA, r24
    1d88:	03 c0       	rjmp	.+6      	; 0x1d90 <udd_enable+0x6c>
    1d8a:	8f e1       	ldi	r24, 0x1F	; 31
    1d8c:	80 93 fa 04 	sts	0x04FA, r24
    1d90:	6b e1       	ldi	r22, 0x1B	; 27
    1d92:	70 e0       	ldi	r23, 0x00	; 0
    1d94:	82 e0       	ldi	r24, 0x02	; 2
    1d96:	02 d4       	rcall	.+2052   	; 0x259c <nvm_read_byte>
    1d98:	8f 3f       	cpi	r24, 0xFF	; 255
    1d9a:	19 f0       	breq	.+6      	; 0x1da2 <udd_enable+0x7e>
    1d9c:	80 93 fb 04 	sts	0x04FB, r24
    1da0:	03 c0       	rjmp	.+6      	; 0x1da8 <udd_enable+0x84>
    1da2:	8f e1       	ldi	r24, 0x1F	; 31
    1da4:	80 93 fb 04 	sts	0x04FB, r24
    1da8:	e0 ec       	ldi	r30, 0xC0	; 192
    1daa:	f4 e0       	ldi	r31, 0x04	; 4
    1dac:	80 81       	ld	r24, Z
    1dae:	82 60       	ori	r24, 0x02	; 2
    1db0:	80 83       	st	Z, r24
    1db2:	80 81       	ld	r24, Z
    1db4:	80 68       	ori	r24, 0x80	; 128
    1db6:	80 83       	st	Z, r24
    1db8:	80 81       	ld	r24, Z
    1dba:	80 61       	ori	r24, 0x10	; 16
    1dbc:	80 83       	st	Z, r24
    1dbe:	8c e6       	ldi	r24, 0x6C	; 108
    1dc0:	96 e2       	ldi	r25, 0x26	; 38
    1dc2:	86 83       	std	Z+6, r24	; 0x06
    1dc4:	97 83       	std	Z+7, r25	; 0x07
    1dc6:	80 81       	ld	r24, Z
    1dc8:	80 62       	ori	r24, 0x20	; 32
    1dca:	80 83       	st	Z, r24
    1dcc:	8f ef       	ldi	r24, 0xFF	; 255
    1dce:	80 93 c5 04 	sts	0x04C5, r24
    1dd2:	e8 ec       	ldi	r30, 0xC8	; 200
    1dd4:	f4 e0       	ldi	r31, 0x04	; 4
    1dd6:	80 81       	ld	r24, Z
    1dd8:	81 60       	ori	r24, 0x01	; 1
    1dda:	80 83       	st	Z, r24
    1ddc:	10 92 a0 26 	sts	0x26A0, r1
    1de0:	8f b7       	in	r24, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	eb e1       	ldi	r30, 0x1B	; 27
    1de6:	f7 e2       	ldi	r31, 0x27	; 39
    1de8:	90 81       	ld	r25, Z
    1dea:	9f 5f       	subi	r25, 0xFF	; 255
    1dec:	90 83       	st	Z, r25
    1dee:	8f bf       	out	0x3f, r24	; 63
    1df0:	76 df       	rcall	.-276    	; 0x1cde <udd_attach>
    1df2:	cf bf       	out	0x3f, r28	; 63
    1df4:	cf 91       	pop	r28
    1df6:	08 95       	ret

00001df8 <udd_is_high_speed>:
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	08 95       	ret

00001dfc <udd_set_address>:
    1dfc:	80 93 c3 04 	sts	0x04C3, r24
    1e00:	08 95       	ret

00001e02 <udd_getaddress>:
    1e02:	80 91 c3 04 	lds	r24, 0x04C3
    1e06:	08 95       	ret

00001e08 <udd_get_frame_number>:
    1e08:	80 91 9c 26 	lds	r24, 0x269C
    1e0c:	90 91 9d 26 	lds	r25, 0x269D
    1e10:	08 95       	ret

00001e12 <udd_get_micro_frame_number>:
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	08 95       	ret

00001e18 <udd_set_setup_payload>:
    1e18:	80 93 0e 27 	sts	0x270E, r24
    1e1c:	90 93 0f 27 	sts	0x270F, r25
    1e20:	60 93 10 27 	sts	0x2710, r22
    1e24:	70 93 11 27 	sts	0x2711, r23
    1e28:	08 95       	ret

00001e2a <udd_ep_alloc>:
    1e2a:	e8 2f       	mov	r30, r24
    1e2c:	ef 70       	andi	r30, 0x0F	; 15
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	ee 0f       	add	r30, r30
    1e32:	ff 1f       	adc	r31, r31
    1e34:	99 27       	eor	r25, r25
    1e36:	87 fd       	sbrc	r24, 7
    1e38:	90 95       	com	r25
    1e3a:	88 27       	eor	r24, r24
    1e3c:	99 0f       	add	r25, r25
    1e3e:	88 1f       	adc	r24, r24
    1e40:	99 27       	eor	r25, r25
    1e42:	e8 0f       	add	r30, r24
    1e44:	f9 1f       	adc	r31, r25
    1e46:	ee 0f       	add	r30, r30
    1e48:	ff 1f       	adc	r31, r31
    1e4a:	ee 0f       	add	r30, r30
    1e4c:	ff 1f       	adc	r31, r31
    1e4e:	ee 0f       	add	r30, r30
    1e50:	ff 1f       	adc	r31, r31
    1e52:	e4 59       	subi	r30, 0x94	; 148
    1e54:	f9 4d       	sbci	r31, 0xD9	; 217
    1e56:	81 81       	ldd	r24, Z+1	; 0x01
    1e58:	80 7c       	andi	r24, 0xC0	; 192
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <udd_ep_alloc+0x34>
    1e5c:	43 c0       	rjmp	.+134    	; 0x1ee4 <udd_ep_alloc+0xba>
    1e5e:	63 70       	andi	r22, 0x03	; 3
    1e60:	61 30       	cpi	r22, 0x01	; 1
    1e62:	29 f0       	breq	.+10     	; 0x1e6e <udd_ep_alloc+0x44>
    1e64:	10 f4       	brcc	.+4      	; 0x1e6a <udd_ep_alloc+0x40>
    1e66:	80 e4       	ldi	r24, 0x40	; 64
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <udd_ep_alloc+0x46>
    1e6a:	80 e8       	ldi	r24, 0x80	; 128
    1e6c:	01 c0       	rjmp	.+2      	; 0x1e70 <udd_ep_alloc+0x46>
    1e6e:	80 ec       	ldi	r24, 0xC0	; 192
    1e70:	40 38       	cpi	r20, 0x80	; 128
    1e72:	51 05       	cpc	r21, r1
    1e74:	e1 f0       	breq	.+56     	; 0x1eae <udd_ep_alloc+0x84>
    1e76:	50 f4       	brcc	.+20     	; 0x1e8c <udd_ep_alloc+0x62>
    1e78:	40 32       	cpi	r20, 0x20	; 32
    1e7a:	51 05       	cpc	r21, r1
    1e7c:	a1 f0       	breq	.+40     	; 0x1ea6 <udd_ep_alloc+0x7c>
    1e7e:	40 34       	cpi	r20, 0x40	; 64
    1e80:	51 05       	cpc	r21, r1
    1e82:	99 f0       	breq	.+38     	; 0x1eaa <udd_ep_alloc+0x80>
    1e84:	40 31       	cpi	r20, 0x10	; 16
    1e86:	51 05       	cpc	r21, r1
    1e88:	61 f4       	brne	.+24     	; 0x1ea2 <udd_ep_alloc+0x78>
    1e8a:	19 c0       	rjmp	.+50     	; 0x1ebe <udd_ep_alloc+0x94>
    1e8c:	41 15       	cp	r20, r1
    1e8e:	92 e0       	ldi	r25, 0x02	; 2
    1e90:	59 07       	cpc	r21, r25
    1e92:	89 f0       	breq	.+34     	; 0x1eb6 <udd_ep_alloc+0x8c>
    1e94:	4f 3f       	cpi	r20, 0xFF	; 255
    1e96:	93 e0       	ldi	r25, 0x03	; 3
    1e98:	59 07       	cpc	r21, r25
    1e9a:	79 f0       	breq	.+30     	; 0x1eba <udd_ep_alloc+0x90>
    1e9c:	41 15       	cp	r20, r1
    1e9e:	51 40       	sbci	r21, 0x01	; 1
    1ea0:	41 f0       	breq	.+16     	; 0x1eb2 <udd_ep_alloc+0x88>
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	0d c0       	rjmp	.+26     	; 0x1ec0 <udd_ep_alloc+0x96>
    1ea6:	22 e0       	ldi	r18, 0x02	; 2
    1ea8:	0b c0       	rjmp	.+22     	; 0x1ec0 <udd_ep_alloc+0x96>
    1eaa:	23 e0       	ldi	r18, 0x03	; 3
    1eac:	09 c0       	rjmp	.+18     	; 0x1ec0 <udd_ep_alloc+0x96>
    1eae:	24 e0       	ldi	r18, 0x04	; 4
    1eb0:	07 c0       	rjmp	.+14     	; 0x1ec0 <udd_ep_alloc+0x96>
    1eb2:	25 e0       	ldi	r18, 0x05	; 5
    1eb4:	05 c0       	rjmp	.+10     	; 0x1ec0 <udd_ep_alloc+0x96>
    1eb6:	26 e0       	ldi	r18, 0x06	; 6
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <udd_ep_alloc+0x96>
    1eba:	27 e0       	ldi	r18, 0x07	; 7
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <udd_ep_alloc+0x96>
    1ebe:	21 e0       	ldi	r18, 0x01	; 1
    1ec0:	11 82       	std	Z+1, r1	; 0x01
    1ec2:	96 e0       	ldi	r25, 0x06	; 6
    1ec4:	90 83       	st	Z, r25
    1ec6:	82 2b       	or	r24, r18
    1ec8:	81 83       	std	Z+1, r24	; 0x01
    1eca:	81 81       	ldd	r24, Z+1	; 0x01
    1ecc:	80 7c       	andi	r24, 0xC0	; 192
    1ece:	80 3c       	cpi	r24, 0xC0	; 192
    1ed0:	21 f4       	brne	.+8      	; 0x1eda <udd_ep_alloc+0xb0>
    1ed2:	81 81       	ldd	r24, Z+1	; 0x01
    1ed4:	87 70       	andi	r24, 0x07	; 7
    1ed6:	87 30       	cpi	r24, 0x07	; 7
    1ed8:	39 f0       	breq	.+14     	; 0x1ee8 <udd_ep_alloc+0xbe>
    1eda:	81 81       	ldd	r24, Z+1	; 0x01
    1edc:	80 62       	ori	r24, 0x20	; 32
    1ede:	81 83       	std	Z+1, r24	; 0x01
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	08 95       	ret
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	08 95       	ret
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	08 95       	ret

00001eec <udd_ep_is_halted>:
    1eec:	e8 2f       	mov	r30, r24
    1eee:	ef 70       	andi	r30, 0x0F	; 15
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	ee 0f       	add	r30, r30
    1ef4:	ff 1f       	adc	r31, r31
    1ef6:	99 27       	eor	r25, r25
    1ef8:	87 fd       	sbrc	r24, 7
    1efa:	90 95       	com	r25
    1efc:	88 27       	eor	r24, r24
    1efe:	99 0f       	add	r25, r25
    1f00:	88 1f       	adc	r24, r24
    1f02:	99 27       	eor	r25, r25
    1f04:	e8 0f       	add	r30, r24
    1f06:	f9 1f       	adc	r31, r25
    1f08:	ee 0f       	add	r30, r30
    1f0a:	ff 1f       	adc	r31, r31
    1f0c:	ee 0f       	add	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	e4 59       	subi	r30, 0x94	; 148
    1f16:	f9 4d       	sbci	r31, 0xD9	; 217
    1f18:	81 81       	ldd	r24, Z+1	; 0x01
    1f1a:	82 fb       	bst	r24, 2
    1f1c:	88 27       	eor	r24, r24
    1f1e:	80 f9       	bld	r24, 0
    1f20:	08 95       	ret

00001f22 <udd_ep_clear_halt>:
    1f22:	e8 2f       	mov	r30, r24
    1f24:	ef 70       	andi	r30, 0x0F	; 15
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	ee 0f       	add	r30, r30
    1f2a:	ff 1f       	adc	r31, r31
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	33 27       	eor	r19, r19
    1f30:	27 fd       	sbrc	r18, 7
    1f32:	30 95       	com	r19
    1f34:	22 27       	eor	r18, r18
    1f36:	33 0f       	add	r19, r19
    1f38:	22 1f       	adc	r18, r18
    1f3a:	33 27       	eor	r19, r19
    1f3c:	e2 0f       	add	r30, r18
    1f3e:	f3 1f       	adc	r31, r19
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	ee 0f       	add	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	ee 0f       	add	r30, r30
    1f4a:	ff 1f       	adc	r31, r31
    1f4c:	e4 59       	subi	r30, 0x94	; 148
    1f4e:	f9 4d       	sbci	r31, 0xD9	; 217
    1f50:	91 81       	ldd	r25, Z+1	; 0x01
    1f52:	92 ff       	sbrs	r25, 2
    1f54:	0e c0       	rjmp	.+28     	; 0x1f72 <udd_ep_clear_halt+0x50>
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	9b 7f       	andi	r25, 0xFB	; 251
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	22 dd       	rcall	.-1468   	; 0x19a2 <udd_ep_get_job>
    1f5e:	fc 01       	movw	r30, r24
    1f60:	80 81       	ld	r24, Z
    1f62:	80 ff       	sbrs	r24, 0
    1f64:	06 c0       	rjmp	.+12     	; 0x1f72 <udd_ep_clear_halt+0x50>
    1f66:	8e 7f       	andi	r24, 0xFE	; 254
    1f68:	80 83       	st	Z, r24
    1f6a:	07 80       	ldd	r0, Z+7	; 0x07
    1f6c:	f0 85       	ldd	r31, Z+8	; 0x08
    1f6e:	e0 2d       	mov	r30, r0
    1f70:	09 95       	icall
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	08 95       	ret

00001f76 <udd_ep_run>:
    1f76:	7f 92       	push	r7
    1f78:	8f 92       	push	r8
    1f7a:	9f 92       	push	r9
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	98 2e       	mov	r9, r24
    1f92:	86 2e       	mov	r8, r22
    1f94:	5a 01       	movw	r10, r20
    1f96:	69 01       	movw	r12, r18
    1f98:	04 dd       	rcall	.-1528   	; 0x19a2 <udd_ep_get_job>
    1f9a:	7c 01       	movw	r14, r24
    1f9c:	79 2c       	mov	r7, r9
    1f9e:	77 1c       	adc	r7, r7
    1fa0:	77 24       	eor	r7, r7
    1fa2:	77 1c       	adc	r7, r7
    1fa4:	c9 2d       	mov	r28, r9
    1fa6:	cf 70       	andi	r28, 0x0F	; 15
    1fa8:	d0 e0       	ldi	r29, 0x00	; 0
    1faa:	cc 0f       	add	r28, r28
    1fac:	dd 1f       	adc	r29, r29
    1fae:	c7 0d       	add	r28, r7
    1fb0:	d1 1d       	adc	r29, r1
    1fb2:	cc 0f       	add	r28, r28
    1fb4:	dd 1f       	adc	r29, r29
    1fb6:	cc 0f       	add	r28, r28
    1fb8:	dd 1f       	adc	r29, r29
    1fba:	cc 0f       	add	r28, r28
    1fbc:	dd 1f       	adc	r29, r29
    1fbe:	c4 59       	subi	r28, 0x94	; 148
    1fc0:	d9 4d       	sbci	r29, 0xD9	; 217
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	80 7c       	andi	r24, 0xC0	; 192
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <udd_ep_run+0x54>
    1fc8:	4c c0       	rjmp	.+152    	; 0x2062 <udd_ep_run+0xec>
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	80 7c       	andi	r24, 0xC0	; 192
    1fce:	80 3c       	cpi	r24, 0xC0	; 192
    1fd0:	19 f0       	breq	.+6      	; 0x1fd8 <udd_ep_run+0x62>
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	82 fd       	sbrc	r24, 2
    1fd6:	47 c0       	rjmp	.+142    	; 0x2066 <udd_ep_run+0xf0>
    1fd8:	8f b7       	in	r24, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	f7 01       	movw	r30, r14
    1fde:	90 81       	ld	r25, Z
    1fe0:	90 ff       	sbrs	r25, 0
    1fe2:	03 c0       	rjmp	.+6      	; 0x1fea <udd_ep_run+0x74>
    1fe4:	8f bf       	out	0x3f, r24	; 63
    1fe6:	71 2c       	mov	r7, r1
    1fe8:	3f c0       	rjmp	.+126    	; 0x2068 <udd_ep_run+0xf2>
    1fea:	f7 01       	movw	r30, r14
    1fec:	90 81       	ld	r25, Z
    1fee:	91 60       	ori	r25, 0x01	; 1
    1ff0:	90 83       	st	Z, r25
    1ff2:	8f bf       	out	0x3f, r24	; 63
    1ff4:	f7 01       	movw	r30, r14
    1ff6:	a1 82       	std	Z+1, r10	; 0x01
    1ff8:	b2 82       	std	Z+2, r11	; 0x02
    1ffa:	c3 82       	std	Z+3, r12	; 0x03
    1ffc:	d4 82       	std	Z+4, r13	; 0x04
    1ffe:	15 82       	std	Z+5, r1	; 0x05
    2000:	16 82       	std	Z+6, r1	; 0x06
    2002:	07 83       	std	Z+7, r16	; 0x07
    2004:	10 87       	std	Z+8, r17	; 0x08
    2006:	81 10       	cpse	r8, r1
    2008:	06 c0       	rjmp	.+12     	; 0x2016 <udd_ep_run+0xa0>
    200a:	91 e0       	ldi	r25, 0x01	; 1
    200c:	c1 14       	cp	r12, r1
    200e:	d1 04       	cpc	r13, r1
    2010:	19 f0       	breq	.+6      	; 0x2018 <udd_ep_run+0xa2>
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	01 c0       	rjmp	.+2      	; 0x2018 <udd_ep_run+0xa2>
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	f7 01       	movw	r30, r14
    201a:	80 81       	ld	r24, Z
    201c:	90 fb       	bst	r25, 0
    201e:	81 f9       	bld	r24, 1
    2020:	8b 7f       	andi	r24, 0xFB	; 251
    2022:	80 83       	st	Z, r24
    2024:	77 20       	and	r7, r7
    2026:	19 f0       	breq	.+6      	; 0x202e <udd_ep_run+0xb8>
    2028:	1e 82       	std	Y+6, r1	; 0x06
    202a:	1f 82       	std	Y+7, r1	; 0x07
    202c:	15 c0       	rjmp	.+42     	; 0x2058 <udd_ep_run+0xe2>
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	80 7c       	andi	r24, 0xC0	; 192
    2032:	80 3c       	cpi	r24, 0xC0	; 192
    2034:	69 f4       	brne	.+26     	; 0x2050 <udd_ep_run+0xda>
    2036:	ce 01       	movw	r24, r28
    2038:	8f dc       	rcall	.-1762   	; 0x1958 <udd_ep_get_size>
    203a:	bc 01       	movw	r22, r24
    203c:	c6 01       	movw	r24, r12
    203e:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__udivmodhi4>
    2042:	89 2b       	or	r24, r25
    2044:	29 f0       	breq	.+10     	; 0x2050 <udd_ep_run+0xda>
    2046:	f7 01       	movw	r30, r14
    2048:	80 81       	ld	r24, Z
    204a:	8e 7f       	andi	r24, 0xFE	; 254
    204c:	80 83       	st	Z, r24
    204e:	0c c0       	rjmp	.+24     	; 0x2068 <udd_ep_run+0xf2>
    2050:	1a 82       	std	Y+2, r1	; 0x02
    2052:	1b 82       	std	Y+3, r1	; 0x03
    2054:	1e 82       	std	Y+6, r1	; 0x06
    2056:	1f 82       	std	Y+7, r1	; 0x07
    2058:	89 2d       	mov	r24, r9
    205a:	2d dd       	rcall	.-1446   	; 0x1ab6 <udd_ep_trans_complet>
    205c:	77 24       	eor	r7, r7
    205e:	73 94       	inc	r7
    2060:	03 c0       	rjmp	.+6      	; 0x2068 <udd_ep_run+0xf2>
    2062:	71 2c       	mov	r7, r1
    2064:	01 c0       	rjmp	.+2      	; 0x2068 <udd_ep_run+0xf2>
    2066:	71 2c       	mov	r7, r1
    2068:	87 2d       	mov	r24, r7
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	df 90       	pop	r13
    2078:	cf 90       	pop	r12
    207a:	bf 90       	pop	r11
    207c:	af 90       	pop	r10
    207e:	9f 90       	pop	r9
    2080:	8f 90       	pop	r8
    2082:	7f 90       	pop	r7
    2084:	08 95       	ret

00002086 <udd_ep_abort>:
    2086:	ff 92       	push	r15
    2088:	0f 93       	push	r16
    208a:	1f 93       	push	r17
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    2090:	18 2f       	mov	r17, r24
    2092:	f8 2e       	mov	r15, r24
    2094:	ff 1c       	adc	r15, r15
    2096:	ff 24       	eor	r15, r15
    2098:	ff 1c       	adc	r15, r15
    209a:	c8 2f       	mov	r28, r24
    209c:	cf 70       	andi	r28, 0x0F	; 15
    209e:	d0 e0       	ldi	r29, 0x00	; 0
    20a0:	cc 0f       	add	r28, r28
    20a2:	dd 1f       	adc	r29, r29
    20a4:	cf 0d       	add	r28, r15
    20a6:	d1 1d       	adc	r29, r1
    20a8:	cc 0f       	add	r28, r28
    20aa:	dd 1f       	adc	r29, r29
    20ac:	cc 0f       	add	r28, r28
    20ae:	dd 1f       	adc	r29, r29
    20b0:	cc 0f       	add	r28, r28
    20b2:	dd 1f       	adc	r29, r29
    20b4:	c4 59       	subi	r28, 0x94	; 148
    20b6:	d9 4d       	sbci	r29, 0xD9	; 217
    20b8:	74 dc       	rcall	.-1816   	; 0x19a2 <udd_ep_get_job>
    20ba:	dc 01       	movw	r26, r24
    20bc:	fe 01       	movw	r30, r28
    20be:	02 e0       	ldi	r16, 0x02	; 2
    20c0:	05 93       	las	Z, r16
    20c2:	8c 91       	ld	r24, X
    20c4:	80 ff       	sbrs	r24, 0
    20c6:	12 c0       	rjmp	.+36     	; 0x20ec <udd_ep_abort+0x66>
    20c8:	8e 7f       	andi	r24, 0xFE	; 254
    20ca:	8c 93       	st	X, r24
    20cc:	17 96       	adiw	r26, 0x07	; 7
    20ce:	ed 91       	ld	r30, X+
    20d0:	fc 91       	ld	r31, X
    20d2:	18 97       	sbiw	r26, 0x08	; 8
    20d4:	30 97       	sbiw	r30, 0x00	; 0
    20d6:	51 f0       	breq	.+20     	; 0x20ec <udd_ep_abort+0x66>
    20d8:	ff 20       	and	r15, r15
    20da:	19 f0       	breq	.+6      	; 0x20e2 <udd_ep_abort+0x5c>
    20dc:	6e 81       	ldd	r22, Y+6	; 0x06
    20de:	7f 81       	ldd	r23, Y+7	; 0x07
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <udd_ep_abort+0x60>
    20e2:	6a 81       	ldd	r22, Y+2	; 0x02
    20e4:	7b 81       	ldd	r23, Y+3	; 0x03
    20e6:	41 2f       	mov	r20, r17
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	09 95       	icall
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	08 95       	ret

000020f8 <udd_ep_free>:
    20f8:	cf 93       	push	r28
    20fa:	c8 2f       	mov	r28, r24
    20fc:	c4 df       	rcall	.-120    	; 0x2086 <udd_ep_abort>
    20fe:	ec 2f       	mov	r30, r28
    2100:	ef 70       	andi	r30, 0x0F	; 15
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	ee 0f       	add	r30, r30
    2106:	ff 1f       	adc	r31, r31
    2108:	8c 2f       	mov	r24, r28
    210a:	99 27       	eor	r25, r25
    210c:	87 fd       	sbrc	r24, 7
    210e:	90 95       	com	r25
    2110:	88 27       	eor	r24, r24
    2112:	99 0f       	add	r25, r25
    2114:	88 1f       	adc	r24, r24
    2116:	99 27       	eor	r25, r25
    2118:	e8 0f       	add	r30, r24
    211a:	f9 1f       	adc	r31, r25
    211c:	ee 0f       	add	r30, r30
    211e:	ff 1f       	adc	r31, r31
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	ee 0f       	add	r30, r30
    2126:	ff 1f       	adc	r31, r31
    2128:	e4 59       	subi	r30, 0x94	; 148
    212a:	f9 4d       	sbci	r31, 0xD9	; 217
    212c:	11 82       	std	Z+1, r1	; 0x01
    212e:	cf 91       	pop	r28
    2130:	08 95       	ret

00002132 <udd_ep_set_halt>:
    2132:	0f 93       	push	r16
    2134:	e8 2f       	mov	r30, r24
    2136:	ef 70       	andi	r30, 0x0F	; 15
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	28 2f       	mov	r18, r24
    2140:	33 27       	eor	r19, r19
    2142:	27 fd       	sbrc	r18, 7
    2144:	30 95       	com	r19
    2146:	22 27       	eor	r18, r18
    2148:	33 0f       	add	r19, r19
    214a:	22 1f       	adc	r18, r18
    214c:	33 27       	eor	r19, r19
    214e:	e2 0f       	add	r30, r18
    2150:	f3 1f       	adc	r31, r19
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	ee 0f       	add	r30, r30
    2158:	ff 1f       	adc	r31, r31
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	e4 59       	subi	r30, 0x94	; 148
    2160:	f9 4d       	sbci	r31, 0xD9	; 217
    2162:	91 81       	ldd	r25, Z+1	; 0x01
    2164:	94 60       	ori	r25, 0x04	; 4
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	01 e0       	ldi	r16, 0x01	; 1
    216a:	06 93       	lac	Z, r16
    216c:	8c df       	rcall	.-232    	; 0x2086 <udd_ep_abort>
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	0f 91       	pop	r16
    2172:	08 95       	ret

00002174 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2174:	1f 92       	push	r1
    2176:	0f 92       	push	r0
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	0f 92       	push	r0
    217c:	11 24       	eor	r1, r1
    217e:	0f 93       	push	r16
    2180:	2f 93       	push	r18
    2182:	3f 93       	push	r19
    2184:	4f 93       	push	r20
    2186:	5f 93       	push	r21
    2188:	6f 93       	push	r22
    218a:	7f 93       	push	r23
    218c:	8f 93       	push	r24
    218e:	9f 93       	push	r25
    2190:	af 93       	push	r26
    2192:	bf 93       	push	r27
    2194:	ef 93       	push	r30
    2196:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2198:	80 91 cb 04 	lds	r24, 0x04CB
    219c:	88 23       	and	r24, r24
    219e:	34 f4       	brge	.+12     	; 0x21ac <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    21a0:	80 e8       	ldi	r24, 0x80	; 128
    21a2:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    21a6:	0e 94 b8 05 	call	0xb70	; 0xb70 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    21aa:	88 c0       	rjmp	.+272    	; 0x22bc <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    21ac:	80 91 cb 04 	lds	r24, 0x04CB
    21b0:	82 ff       	sbrs	r24, 2
    21b2:	20 c0       	rjmp	.+64     	; 0x21f4 <__vector_125+0x80>
		udd_ack_underflow_event();
    21b4:	84 e0       	ldi	r24, 0x04	; 4
    21b6:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    21ba:	80 91 74 26 	lds	r24, 0x2674
    21be:	86 ff       	sbrs	r24, 6
    21c0:	7d c0       	rjmp	.+250    	; 0x22bc <__vector_125+0x148>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    21c2:	80 91 cc 04 	lds	r24, 0x04CC
    21c6:	81 fd       	sbrc	r24, 1
    21c8:	79 c0       	rjmp	.+242    	; 0x22bc <__vector_125+0x148>
    21ca:	06 dc       	rcall	.-2036   	; 0x19d8 <udd_ctrl_interrupt_tc_setup>
    21cc:	81 11       	cpse	r24, r1
    21ce:	76 c0       	rjmp	.+236    	; 0x22bc <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    21d0:	80 91 5e 26 	lds	r24, 0x265E
    21d4:	81 30       	cpi	r24, 0x01	; 1
    21d6:	11 f4       	brne	.+4      	; 0x21dc <__vector_125+0x68>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    21d8:	3b db       	rcall	.-2442   	; 0x1850 <udd_ctrl_send_zlp_in>
    21da:	70 c0       	rjmp	.+224    	; 0x22bc <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	09 f0       	breq	.+2      	; 0x21e2 <__vector_125+0x6e>
    21e0:	6d c0       	rjmp	.+218    	; 0x22bc <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    21e2:	e5 e7       	ldi	r30, 0x75	; 117
    21e4:	f6 e2       	ldi	r31, 0x26	; 38
    21e6:	04 e0       	ldi	r16, 0x04	; 4
    21e8:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    21ea:	ed e6       	ldi	r30, 0x6D	; 109
    21ec:	f6 e2       	ldi	r31, 0x26	; 38
    21ee:	04 e0       	ldi	r16, 0x04	; 4
    21f0:	05 93       	las	Z, r16
    21f2:	64 c0       	rjmp	.+200    	; 0x22bc <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    21f4:	80 91 cb 04 	lds	r24, 0x04CB
    21f8:	81 ff       	sbrs	r24, 1
    21fa:	5b c0       	rjmp	.+182    	; 0x22b2 <__vector_125+0x13e>
		udd_ack_overflow_event();
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    2202:	80 91 6c 26 	lds	r24, 0x266C
    2206:	86 ff       	sbrs	r24, 6
    2208:	59 c0       	rjmp	.+178    	; 0x22bc <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    220a:	80 91 cc 04 	lds	r24, 0x04CC
    220e:	81 fd       	sbrc	r24, 1
    2210:	55 c0       	rjmp	.+170    	; 0x22bc <__vector_125+0x148>
    2212:	e2 db       	rcall	.-2108   	; 0x19d8 <udd_ctrl_interrupt_tc_setup>
    2214:	81 11       	cpse	r24, r1
    2216:	52 c0       	rjmp	.+164    	; 0x22bc <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2218:	80 91 5e 26 	lds	r24, 0x265E
    221c:	82 30       	cpi	r24, 0x02	; 2
    221e:	41 f4       	brne	.+16     	; 0x2230 <__vector_125+0xbc>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2220:	84 e0       	ldi	r24, 0x04	; 4
    2222:	80 93 5e 26 	sts	0x265E, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2226:	ec e6       	ldi	r30, 0x6C	; 108
    2228:	f6 e2       	ldi	r31, 0x26	; 38
    222a:	02 e0       	ldi	r16, 0x02	; 2
    222c:	06 93       	lac	Z, r16
    222e:	46 c0       	rjmp	.+140    	; 0x22bc <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2230:	83 30       	cpi	r24, 0x03	; 3
    2232:	09 f0       	breq	.+2      	; 0x2236 <__vector_125+0xc2>
    2234:	43 c0       	rjmp	.+134    	; 0x22bc <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2236:	e5 e7       	ldi	r30, 0x75	; 117
    2238:	f6 e2       	ldi	r31, 0x26	; 38
    223a:	04 e0       	ldi	r16, 0x04	; 4
    223c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    223e:	ed e6       	ldi	r30, 0x6D	; 109
    2240:	f6 e2       	ldi	r31, 0x26	; 38
    2242:	04 e0       	ldi	r16, 0x04	; 4
    2244:	05 93       	las	Z, r16
    2246:	3a c0       	rjmp	.+116    	; 0x22bc <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2248:	80 e1       	ldi	r24, 0x10	; 16
    224a:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	1a df       	rcall	.-460    	; 0x2086 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2252:	81 e8       	ldi	r24, 0x81	; 129
    2254:	18 df       	rcall	.-464    	; 0x2086 <udd_ep_abort>
		}
#endif
		udc_reset();
    2256:	0e 94 91 05 	call	0xb22	; 0xb22 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    225a:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    225e:	ed e6       	ldi	r30, 0x6D	; 109
    2260:	f6 e2       	ldi	r31, 0x26	; 38
    2262:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    2264:	96 e0       	ldi	r25, 0x06	; 6
    2266:	90 93 6c 26 	sts	0x266C, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    226a:	83 e4       	ldi	r24, 0x43	; 67
    226c:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    226e:	e5 e7       	ldi	r30, 0x75	; 117
    2270:	f6 e2       	ldi	r31, 0x26	; 38
    2272:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    2274:	90 93 74 26 	sts	0x2674, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2278:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    227a:	8a e1       	ldi	r24, 0x1A	; 26
    227c:	96 e2       	ldi	r25, 0x26	; 38
    227e:	80 93 70 26 	sts	0x2670, r24
    2282:	90 93 71 26 	sts	0x2671, r25
		// Reset endpoint control management
		udd_ctrl_init();
    2286:	ab da       	rcall	.-2730   	; 0x17de <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2288:	19 c0       	rjmp	.+50     	; 0x22bc <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
    228a:	80 91 cb 04 	lds	r24, 0x04CB
    228e:	86 ff       	sbrs	r24, 6
    2290:	06 c0       	rjmp	.+12     	; 0x229e <__vector_125+0x12a>
		udd_ack_suspend_event();
    2292:	80 e4       	ldi	r24, 0x40	; 64
    2294:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	82 da       	rcall	.-2812   	; 0x17a0 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
    229e:	80 91 cb 04 	lds	r24, 0x04CB
    22a2:	85 ff       	sbrs	r24, 5
    22a4:	0b c0       	rjmp	.+22     	; 0x22bc <__vector_125+0x148>
		udd_ack_resume_event();
    22a6:	80 e2       	ldi	r24, 0x20	; 32
    22a8:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	78 da       	rcall	.-2832   	; 0x17a0 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    22b0:	05 c0       	rjmp	.+10     	; 0x22bc <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    22b2:	80 91 cb 04 	lds	r24, 0x04CB
    22b6:	84 ff       	sbrs	r24, 4
    22b8:	e8 cf       	rjmp	.-48     	; 0x228a <__vector_125+0x116>
    22ba:	c6 cf       	rjmp	.-116    	; 0x2248 <__vector_125+0xd4>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    22bc:	ff 91       	pop	r31
    22be:	ef 91       	pop	r30
    22c0:	bf 91       	pop	r27
    22c2:	af 91       	pop	r26
    22c4:	9f 91       	pop	r25
    22c6:	8f 91       	pop	r24
    22c8:	7f 91       	pop	r23
    22ca:	6f 91       	pop	r22
    22cc:	5f 91       	pop	r21
    22ce:	4f 91       	pop	r20
    22d0:	3f 91       	pop	r19
    22d2:	2f 91       	pop	r18
    22d4:	0f 91       	pop	r16
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	0f 90       	pop	r0
    22dc:	1f 90       	pop	r1
    22de:	18 95       	reti

000022e0 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    22e0:	1f 92       	push	r1
    22e2:	0f 92       	push	r0
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	0f 92       	push	r0
    22e8:	11 24       	eor	r1, r1
    22ea:	0f 93       	push	r16
    22ec:	1f 93       	push	r17
    22ee:	2f 93       	push	r18
    22f0:	3f 93       	push	r19
    22f2:	4f 93       	push	r20
    22f4:	5f 93       	push	r21
    22f6:	6f 93       	push	r22
    22f8:	7f 93       	push	r23
    22fa:	8f 93       	push	r24
    22fc:	9f 93       	push	r25
    22fe:	af 93       	push	r26
    2300:	bf 93       	push	r27
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	ef 93       	push	r30
    2308:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    230a:	80 91 cc 04 	lds	r24, 0x04CC
    230e:	81 fd       	sbrc	r24, 1
    2310:	03 c0       	rjmp	.+6      	; 0x2318 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2312:	62 db       	rcall	.-2364   	; 0x19d8 <udd_ctrl_interrupt_tc_setup>
    2314:	81 11       	cpse	r24, r1
    2316:	b9 c0       	rjmp	.+370    	; 0x248a <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    231e:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    2322:	81 95       	neg	r24
    2324:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2326:	ec e6       	ldi	r30, 0x6C	; 108
    2328:	f6 e2       	ldi	r31, 0x26	; 38
    232a:	e8 1b       	sub	r30, r24
    232c:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    232e:	20 81       	ld	r18, Z
    2330:	31 81       	ldd	r19, Z+1	; 0x01
    2332:	2c 56       	subi	r18, 0x6C	; 108
    2334:	36 42       	sbci	r19, 0x26	; 38
    2336:	36 95       	lsr	r19
    2338:	27 95       	ror	r18
    233a:	36 95       	lsr	r19
    233c:	27 95       	ror	r18
    233e:	36 95       	lsr	r19
    2340:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2342:	82 2f       	mov	r24, r18
    2344:	86 95       	lsr	r24
    2346:	20 ff       	sbrs	r18, 0
    2348:	02 c0       	rjmp	.+4      	; 0x234e <__vector_126+0x6e>
    234a:	90 e8       	ldi	r25, 0x80	; 128
    234c:	01 c0       	rjmp	.+2      	; 0x2350 <__vector_126+0x70>
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2352:	e8 2f       	mov	r30, r24
    2354:	ef 70       	andi	r30, 0x0F	; 15
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    235c:	28 2f       	mov	r18, r24
    235e:	33 27       	eor	r19, r19
    2360:	27 fd       	sbrc	r18, 7
    2362:	30 95       	com	r19
    2364:	22 27       	eor	r18, r18
    2366:	33 0f       	add	r19, r19
    2368:	22 1f       	adc	r18, r18
    236a:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    236c:	e2 0f       	add	r30, r18
    236e:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	e4 59       	subi	r30, 0x94	; 148
    237e:	f9 4d       	sbci	r31, 0xD9	; 217
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2380:	90 81       	ld	r25, Z
    2382:	95 ff       	sbrs	r25, 5
    2384:	82 c0       	rjmp	.+260    	; 0x248a <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2386:	00 e2       	ldi	r16, 0x20	; 32
    2388:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    238a:	81 11       	cpse	r24, r1
    238c:	79 c0       	rjmp	.+242    	; 0x2480 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    238e:	80 91 5e 26 	lds	r24, 0x265E
    2392:	84 30       	cpi	r24, 0x04	; 4
    2394:	19 f4       	brne	.+6      	; 0x239c <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2396:	6a da       	rcall	.-2860   	; 0x186c <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2398:	22 da       	rcall	.-3004   	; 0x17de <udd_ctrl_init>
    239a:	77 c0       	rjmp	.+238    	; 0x248a <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    239c:	c0 91 6e 26 	lds	r28, 0x266E
    23a0:	d0 91 6f 26 	lds	r29, 0x266F

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    23a4:	80 91 10 27 	lds	r24, 0x2710
    23a8:	90 91 11 27 	lds	r25, 0x2711
    23ac:	00 91 5a 26 	lds	r16, 0x265A
    23b0:	10 91 5b 26 	lds	r17, 0x265B
    23b4:	98 01       	movw	r18, r16
    23b6:	2c 0f       	add	r18, r28
    23b8:	3d 1f       	adc	r19, r29
    23ba:	82 17       	cp	r24, r18
    23bc:	93 07       	cpc	r25, r19
    23be:	18 f4       	brcc	.+6      	; 0x23c6 <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    23c0:	ec 01       	movw	r28, r24
    23c2:	c0 1b       	sub	r28, r16
    23c4:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    23c6:	80 91 0e 27 	lds	r24, 0x270E
    23ca:	90 91 0f 27 	lds	r25, 0x270F
    23ce:	ae 01       	movw	r20, r28
    23d0:	6a e1       	ldi	r22, 0x1A	; 26
    23d2:	76 e2       	ldi	r23, 0x26	; 38
    23d4:	80 0f       	add	r24, r16
    23d6:	91 1f       	adc	r25, r17
    23d8:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    23dc:	0c 0f       	add	r16, r28
    23de:	1d 1f       	adc	r17, r29
    23e0:	00 93 5a 26 	sts	0x265A, r16
    23e4:	10 93 5b 26 	sts	0x265B, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    23e8:	c0 34       	cpi	r28, 0x40	; 64
    23ea:	d1 05       	cpc	r29, r1
    23ec:	69 f4       	brne	.+26     	; 0x2408 <__vector_126+0x128>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    23ee:	80 91 5c 26 	lds	r24, 0x265C
    23f2:	90 91 5d 26 	lds	r25, 0x265D
    23f6:	80 0f       	add	r24, r16
    23f8:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    23fa:	20 91 0c 27 	lds	r18, 0x270C
    23fe:	30 91 0d 27 	lds	r19, 0x270D
    2402:	82 17       	cp	r24, r18
    2404:	93 07       	cpc	r25, r19
    2406:	88 f0       	brcs	.+34     	; 0x242a <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2408:	00 93 10 27 	sts	0x2710, r16
    240c:	10 93 11 27 	sts	0x2711, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2410:	e0 91 14 27 	lds	r30, 0x2714
    2414:	f0 91 15 27 	lds	r31, 0x2715
    2418:	30 97       	sbiw	r30, 0x00	; 0
    241a:	29 f0       	breq	.+10     	; 0x2426 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    241c:	09 95       	icall
    241e:	81 11       	cpse	r24, r1
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2422:	08 da       	rcall	.-3056   	; 0x1834 <udd_ctrl_stall_data>
    2424:	32 c0       	rjmp	.+100    	; 0x248a <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2426:	14 da       	rcall	.-3032   	; 0x1850 <udd_ctrl_send_zlp_in>
    2428:	30 c0       	rjmp	.+96     	; 0x248a <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    242a:	80 91 10 27 	lds	r24, 0x2710
    242e:	90 91 11 27 	lds	r25, 0x2711
    2432:	08 17       	cp	r16, r24
    2434:	19 07       	cpc	r17, r25
    2436:	f9 f4       	brne	.+62     	; 0x2476 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2438:	e0 91 14 27 	lds	r30, 0x2714
    243c:	f0 91 15 27 	lds	r31, 0x2715
    2440:	30 97       	sbiw	r30, 0x00	; 0
    2442:	11 f4       	brne	.+4      	; 0x2448 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2444:	f7 d9       	rcall	.-3090   	; 0x1834 <udd_ctrl_stall_data>
    2446:	21 c0       	rjmp	.+66     	; 0x248a <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2448:	09 95       	icall
    244a:	81 11       	cpse	r24, r1
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    244e:	f2 d9       	rcall	.-3100   	; 0x1834 <udd_ctrl_stall_data>
    2450:	1c c0       	rjmp	.+56     	; 0x248a <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2452:	20 91 5c 26 	lds	r18, 0x265C
    2456:	30 91 5d 26 	lds	r19, 0x265D
    245a:	80 91 5a 26 	lds	r24, 0x265A
    245e:	90 91 5b 26 	lds	r25, 0x265B
    2462:	82 0f       	add	r24, r18
    2464:	93 1f       	adc	r25, r19
    2466:	80 93 5c 26 	sts	0x265C, r24
    246a:	90 93 5d 26 	sts	0x265D, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    246e:	10 92 5a 26 	sts	0x265A, r1
    2472:	10 92 5b 26 	sts	0x265B, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2476:	ec e6       	ldi	r30, 0x6C	; 108
    2478:	f6 e2       	ldi	r31, 0x26	; 38
    247a:	02 e0       	ldi	r16, 0x02	; 2
    247c:	06 93       	lac	Z, r16
    247e:	05 c0       	rjmp	.+10     	; 0x248a <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2480:	80 38       	cpi	r24, 0x80	; 128
    2482:	11 f4       	brne	.+4      	; 0x2488 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2484:	fb d9       	rcall	.-3082   	; 0x187c <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2486:	01 c0       	rjmp	.+2      	; 0x248a <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2488:	16 db       	rcall	.-2516   	; 0x1ab6 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    248a:	ff 91       	pop	r31
    248c:	ef 91       	pop	r30
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	bf 91       	pop	r27
    2494:	af 91       	pop	r26
    2496:	9f 91       	pop	r25
    2498:	8f 91       	pop	r24
    249a:	7f 91       	pop	r23
    249c:	6f 91       	pop	r22
    249e:	5f 91       	pop	r21
    24a0:	4f 91       	pop	r20
    24a2:	3f 91       	pop	r19
    24a4:	2f 91       	pop	r18
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	0f 90       	pop	r0
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	0f 90       	pop	r0
    24b0:	1f 90       	pop	r1
    24b2:	18 95       	reti

000024b4 <sysclk_init>:
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <sysclk_init+0x6>
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <sysclk_init+0x8>
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	8f ef       	ldi	r24, 0xFF	; 255
    24c2:	80 93 70 00 	sts	0x0070, r24
    24c6:	80 93 71 00 	sts	0x0071, r24
    24ca:	80 93 72 00 	sts	0x0072, r24
    24ce:	80 93 73 00 	sts	0x0073, r24
    24d2:	80 93 74 00 	sts	0x0074, r24
    24d6:	80 93 75 00 	sts	0x0075, r24
    24da:	80 93 76 00 	sts	0x0076, r24
    24de:	6c e1       	ldi	r22, 0x1C	; 28
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	82 e0       	ldi	r24, 0x02	; 2
    24e4:	5b d0       	rcall	.+182    	; 0x259c <nvm_read_byte>
    24e6:	8a 83       	std	Y+2, r24	; 0x02
    24e8:	6d e1       	ldi	r22, 0x1D	; 29
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	56 d0       	rcall	.+172    	; 0x259c <nvm_read_byte>
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	9a 81       	ldd	r25, Y+2	; 0x02
    24f6:	01 96       	adiw	r24, 0x01	; 1
    24f8:	21 f4       	brne	.+8      	; 0x2502 <sysclk_init+0x4e>
    24fa:	80 e4       	ldi	r24, 0x40	; 64
    24fc:	93 e2       	ldi	r25, 0x23	; 35
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	9a 81       	ldd	r25, Y+2	; 0x02
    2506:	8b 83       	std	Y+3, r24	; 0x03
    2508:	9c 83       	std	Y+4, r25	; 0x04
    250a:	e0 e6       	ldi	r30, 0x60	; 96
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	82 83       	std	Z+2, r24	; 0x02
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	83 83       	std	Z+3, r24	; 0x03
    2514:	8f b7       	in	r24, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	e0 e5       	ldi	r30, 0x50	; 80
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	90 81       	ld	r25, Z
    251e:	92 60       	ori	r25, 0x02	; 2
    2520:	90 83       	st	Z, r25
    2522:	8f bf       	out	0x3f, r24	; 63
    2524:	81 81       	ldd	r24, Z+1	; 0x01
    2526:	81 ff       	sbrs	r24, 1
    2528:	fd cf       	rjmp	.-6      	; 0x2524 <sysclk_init+0x70>
    252a:	61 e0       	ldi	r22, 0x01	; 1
    252c:	80 e4       	ldi	r24, 0x40	; 64
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	3f d0       	rcall	.+126    	; 0x25b0 <ccp_write_io>
    2532:	8f b7       	in	r24, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	e0 e5       	ldi	r30, 0x50	; 80
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	90 81       	ld	r25, Z
    253c:	9e 7f       	andi	r25, 0xFE	; 254
    253e:	90 83       	st	Z, r25
    2540:	8f bf       	out	0x3f, r24	; 63
    2542:	24 96       	adiw	r28, 0x04	; 4
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	de bf       	out	0x3e, r29	; 62
    2548:	df 91       	pop	r29
    254a:	cf 91       	pop	r28
    254c:	08 95       	ret

0000254e <sysclk_enable_module>:
    254e:	9f b7       	in	r25, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	e8 2f       	mov	r30, r24
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	e0 59       	subi	r30, 0x90	; 144
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	60 95       	com	r22
    255c:	80 81       	ld	r24, Z
    255e:	68 23       	and	r22, r24
    2560:	60 83       	st	Z, r22
    2562:	9f bf       	out	0x3f, r25	; 63
    2564:	08 95       	ret

00002566 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    2566:	86 30       	cpi	r24, 0x06	; 6
    2568:	11 f4       	brne	.+4      	; 0x256e <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    256a:	68 e1       	ldi	r22, 0x18	; 24
    256c:	01 c0       	rjmp	.+2      	; 0x2570 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    256e:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2570:	e0 e5       	ldi	r30, 0x50	; 80
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    2576:	81 fd       	sbrc	r24, 1
    2578:	09 c0       	rjmp	.+18     	; 0x258c <sysclk_enable_usb+0x26>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    257a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    257c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    257e:	90 81       	ld	r25, Z
    2580:	92 60       	ori	r25, 0x02	; 2
    2582:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2584:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2586:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2588:	81 ff       	sbrs	r24, 1
    258a:	fd cf       	rjmp	.-6      	; 0x2586 <sysclk_enable_usb+0x20>
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    258c:	63 60       	ori	r22, 0x03	; 3
    258e:	84 e4       	ldi	r24, 0x44	; 68
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e d0       	rcall	.+28     	; 0x25b0 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    2594:	60 e4       	ldi	r22, 0x40	; 64
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	da cf       	rjmp	.-76     	; 0x254e <sysclk_enable_module>
    259a:	08 95       	ret

0000259c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    259c:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    25a0:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    25a2:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    25a4:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    25a8:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    25aa:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    25ae:	08 95       	ret

000025b0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    25b0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    25b2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    25b4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    25b6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    25b8:	60 83       	st	Z, r22
	ret                             // Return to caller
    25ba:	08 95       	ret

000025bc <dwt_getpartid>:
        if(pdw1000local->cbRxErr != NULL)
        {
            pdw1000local->cbRxErr(&pdw1000local->cbData);
        }
    }
}
    25bc:	e0 91 98 20 	lds	r30, 0x2098
    25c0:	f0 91 99 20 	lds	r31, 0x2099
    25c4:	60 81       	ld	r22, Z
    25c6:	71 81       	ldd	r23, Z+1	; 0x01
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	08 95       	ret

000025ce <dwt_writetodevice>:
    25ce:	0f 93       	push	r16
    25d0:	1f 93       	push	r17
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <dwt_writetodevice+0xa>
    25d8:	1f 92       	push	r1
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	61 15       	cp	r22, r1
    25e0:	71 05       	cpc	r23, r1
    25e2:	29 f4       	brne	.+10     	; 0x25ee <dwt_writetodevice+0x20>
    25e4:	80 68       	ori	r24, 0x80	; 128
    25e6:	89 83       	std	Y+1, r24	; 0x01
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	14 c0       	rjmp	.+40     	; 0x2616 <dwt_writetodevice+0x48>
    25ee:	80 6c       	ori	r24, 0xC0	; 192
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	60 38       	cpi	r22, 0x80	; 128
    25f4:	71 05       	cpc	r23, r1
    25f6:	20 f4       	brcc	.+8      	; 0x2600 <dwt_writetodevice+0x32>
    25f8:	6a 83       	std	Y+2, r22	; 0x02
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0b c0       	rjmp	.+22     	; 0x2616 <dwt_writetodevice+0x48>
    2600:	86 2f       	mov	r24, r22
    2602:	80 68       	ori	r24, 0x80	; 128
    2604:	8a 83       	std	Y+2, r24	; 0x02
    2606:	66 0f       	add	r22, r22
    2608:	67 2f       	mov	r22, r23
    260a:	66 1f       	adc	r22, r22
    260c:	77 0b       	sbc	r23, r23
    260e:	71 95       	neg	r23
    2610:	6b 83       	std	Y+3, r22	; 0x03
    2612:	83 e0       	ldi	r24, 0x03	; 3
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	be 01       	movw	r22, r28
    2618:	6f 5f       	subi	r22, 0xFF	; 255
    261a:	7f 4f       	sbci	r23, 0xFF	; 255
    261c:	a4 d7       	rcall	.+3912   	; 0x3566 <writetospi>
    261e:	23 96       	adiw	r28, 0x03	; 3
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	08 95       	ret

0000262e <dwt_writetxdata>:
    262e:	0f 93       	push	r16
    2630:	1f 93       	push	r17
    2632:	fa 01       	movw	r30, r20
    2634:	9a 01       	movw	r18, r20
    2636:	28 0f       	add	r18, r24
    2638:	39 1f       	adc	r19, r25
    263a:	21 30       	cpi	r18, 0x01	; 1
    263c:	34 40       	sbci	r19, 0x04	; 4
    263e:	68 f4       	brcc	.+26     	; 0x265a <dwt_writetxdata+0x2c>
    2640:	9c 01       	movw	r18, r24
    2642:	22 50       	subi	r18, 0x02	; 2
    2644:	31 09       	sbc	r19, r1
    2646:	40 e0       	ldi	r20, 0x00	; 0
    2648:	50 e0       	ldi	r21, 0x00	; 0
    264a:	8b 01       	movw	r16, r22
    264c:	bf 01       	movw	r22, r30
    264e:	89 e0       	ldi	r24, 0x09	; 9
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	bd df       	rcall	.-134    	; 0x25ce <dwt_writetodevice>
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	02 c0       	rjmp	.+4      	; 0x265e <dwt_writetxdata+0x30>
    265a:	8f ef       	ldi	r24, 0xFF	; 255
    265c:	9f ef       	ldi	r25, 0xFF	; 255
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	08 95       	ret

00002664 <dwt_readfromdevice>:
    2664:	0f 93       	push	r16
    2666:	1f 93       	push	r17
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	00 d0       	rcall	.+0      	; 0x266e <dwt_readfromdevice+0xa>
    266e:	1f 92       	push	r1
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	61 15       	cp	r22, r1
    2676:	71 05       	cpc	r23, r1
    2678:	21 f4       	brne	.+8      	; 0x2682 <dwt_readfromdevice+0x1e>
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	14 c0       	rjmp	.+40     	; 0x26aa <dwt_readfromdevice+0x46>
    2682:	80 64       	ori	r24, 0x40	; 64
    2684:	89 83       	std	Y+1, r24	; 0x01
    2686:	60 38       	cpi	r22, 0x80	; 128
    2688:	71 05       	cpc	r23, r1
    268a:	20 f4       	brcc	.+8      	; 0x2694 <dwt_readfromdevice+0x30>
    268c:	6a 83       	std	Y+2, r22	; 0x02
    268e:	82 e0       	ldi	r24, 0x02	; 2
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0b c0       	rjmp	.+22     	; 0x26aa <dwt_readfromdevice+0x46>
    2694:	86 2f       	mov	r24, r22
    2696:	80 68       	ori	r24, 0x80	; 128
    2698:	8a 83       	std	Y+2, r24	; 0x02
    269a:	66 0f       	add	r22, r22
    269c:	67 2f       	mov	r22, r23
    269e:	66 1f       	adc	r22, r22
    26a0:	77 0b       	sbc	r23, r23
    26a2:	71 95       	neg	r23
    26a4:	6b 83       	std	Y+3, r22	; 0x03
    26a6:	83 e0       	ldi	r24, 0x03	; 3
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	be 01       	movw	r22, r28
    26ac:	6f 5f       	subi	r22, 0xFF	; 255
    26ae:	7f 4f       	sbci	r23, 0xFF	; 255
    26b0:	95 d7       	rcall	.+3882   	; 0x35dc <readfromspi>
    26b2:	23 96       	adiw	r28, 0x03	; 3
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	08 95       	ret

000026c2 <dwt_readrxdata>:
    26c2:	0f 93       	push	r16
    26c4:	1f 93       	push	r17
    26c6:	9b 01       	movw	r18, r22
    26c8:	ba 01       	movw	r22, r20
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	8c 01       	movw	r16, r24
    26d0:	81 e1       	ldi	r24, 0x11	; 17
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	c7 df       	rcall	.-114    	; 0x2664 <dwt_readfromdevice>
    26d6:	1f 91       	pop	r17
    26d8:	0f 91       	pop	r16
    26da:	08 95       	ret

000026dc <dwt_readtxtimestamp>:
    26dc:	0f 93       	push	r16
    26de:	1f 93       	push	r17
    26e0:	8c 01       	movw	r16, r24
    26e2:	25 e0       	ldi	r18, 0x05	; 5
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	50 e0       	ldi	r21, 0x00	; 0
    26ea:	60 e0       	ldi	r22, 0x00	; 0
    26ec:	70 e0       	ldi	r23, 0x00	; 0
    26ee:	87 e1       	ldi	r24, 0x17	; 23
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	b8 df       	rcall	.-144    	; 0x2664 <dwt_readfromdevice>
    26f4:	1f 91       	pop	r17
    26f6:	0f 91       	pop	r16
    26f8:	08 95       	ret

000026fa <dwt_readrxtimestamp>:
    26fa:	0f 93       	push	r16
    26fc:	1f 93       	push	r17
    26fe:	8c 01       	movw	r16, r24
    2700:	25 e0       	ldi	r18, 0x05	; 5
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e0       	ldi	r20, 0x00	; 0
    2706:	50 e0       	ldi	r21, 0x00	; 0
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	70 e0       	ldi	r23, 0x00	; 0
    270c:	85 e1       	ldi	r24, 0x15	; 21
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	a9 df       	rcall	.-174    	; 0x2664 <dwt_readfromdevice>
    2712:	1f 91       	pop	r17
    2714:	0f 91       	pop	r16
    2716:	08 95       	ret

00002718 <dwt_read32bitoffsetreg>:
    2718:	ef 92       	push	r14
    271a:	ff 92       	push	r15
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	00 d0       	rcall	.+0      	; 0x2726 <dwt_read32bitoffsetreg+0xe>
    2726:	00 d0       	rcall	.+0      	; 0x2728 <dwt_read32bitoffsetreg+0x10>
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	9e 01       	movw	r18, r28
    272e:	2f 5f       	subi	r18, 0xFF	; 255
    2730:	3f 4f       	sbci	r19, 0xFF	; 255
    2732:	89 01       	movw	r16, r18
    2734:	24 e0       	ldi	r18, 0x04	; 4
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	93 df       	rcall	.-218    	; 0x2664 <dwt_readfromdevice>
    273e:	fe 01       	movw	r30, r28
    2740:	35 96       	adiw	r30, 0x05	; 5
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	70 e0       	ldi	r23, 0x00	; 0
    2746:	cb 01       	movw	r24, r22
    2748:	b8 2f       	mov	r27, r24
    274a:	a7 2f       	mov	r26, r23
    274c:	96 2f       	mov	r25, r22
    274e:	88 27       	eor	r24, r24
    2750:	22 91       	ld	r18, -Z
    2752:	bc 01       	movw	r22, r24
    2754:	cd 01       	movw	r24, r26
    2756:	62 0f       	add	r22, r18
    2758:	71 1d       	adc	r23, r1
    275a:	81 1d       	adc	r24, r1
    275c:	91 1d       	adc	r25, r1
    275e:	e0 17       	cp	r30, r16
    2760:	f1 07       	cpc	r31, r17
    2762:	91 f7       	brne	.-28     	; 0x2748 <dwt_read32bitoffsetreg+0x30>
    2764:	24 96       	adiw	r28, 0x04	; 4
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	de bf       	out	0x3e, r29	; 62
    276a:	df 91       	pop	r29
    276c:	cf 91       	pop	r28
    276e:	1f 91       	pop	r17
    2770:	0f 91       	pop	r16
    2772:	ff 90       	pop	r15
    2774:	ef 90       	pop	r14
    2776:	08 95       	ret

00002778 <dwt_readdevid>:
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	70 e0       	ldi	r23, 0x00	; 0
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	cb cf       	rjmp	.-106    	; 0x2718 <dwt_read32bitoffsetreg>
    2782:	08 95       	ret

00002784 <dwt_read16bitoffsetreg>:
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	00 d0       	rcall	.+0      	; 0x278e <dwt_read16bitoffsetreg+0xa>
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	8e 01       	movw	r16, r28
    2794:	0f 5f       	subi	r16, 0xFF	; 255
    2796:	1f 4f       	sbci	r17, 0xFF	; 255
    2798:	22 e0       	ldi	r18, 0x02	; 2
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e0       	ldi	r20, 0x00	; 0
    279e:	50 e0       	ldi	r21, 0x00	; 0
    27a0:	61 df       	rcall	.-318    	; 0x2664 <dwt_readfromdevice>
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	98 2f       	mov	r25, r24
    27a8:	88 27       	eor	r24, r24
    27aa:	29 81       	ldd	r18, Y+1	; 0x01
    27ac:	82 0f       	add	r24, r18
    27ae:	91 1d       	adc	r25, r1
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	df 91       	pop	r29
    27b6:	cf 91       	pop	r28
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	08 95       	ret

000027be <dwt_read8bitoffsetreg>:
    27be:	0f 93       	push	r16
    27c0:	1f 93       	push	r17
    27c2:	cf 93       	push	r28
    27c4:	df 93       	push	r29
    27c6:	1f 92       	push	r1
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	8e 01       	movw	r16, r28
    27ce:	0f 5f       	subi	r16, 0xFF	; 255
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
    27d2:	21 e0       	ldi	r18, 0x01	; 1
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	44 df       	rcall	.-376    	; 0x2664 <dwt_readfromdevice>
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	0f 90       	pop	r0
    27e0:	df 91       	pop	r29
    27e2:	cf 91       	pop	r28
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	08 95       	ret

000027ea <dwt_write8bitoffsetreg>:
    27ea:	0f 93       	push	r16
    27ec:	1f 93       	push	r17
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	1f 92       	push	r1
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	49 83       	std	Y+1, r20	; 0x01
    27fa:	8e 01       	movw	r16, r28
    27fc:	0f 5f       	subi	r16, 0xFF	; 255
    27fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2800:	21 e0       	ldi	r18, 0x01	; 1
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	e2 de       	rcall	.-572    	; 0x25ce <dwt_writetodevice>
    280a:	0f 90       	pop	r0
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	1f 91       	pop	r17
    2812:	0f 91       	pop	r16
    2814:	08 95       	ret

00002816 <dwt_write16bitoffsetreg>:
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	00 d0       	rcall	.+0      	; 0x2820 <dwt_write16bitoffsetreg+0xa>
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	49 83       	std	Y+1, r20	; 0x01
    2826:	5a 83       	std	Y+2, r21	; 0x02
    2828:	8e 01       	movw	r16, r28
    282a:	0f 5f       	subi	r16, 0xFF	; 255
    282c:	1f 4f       	sbci	r17, 0xFF	; 255
    282e:	22 e0       	ldi	r18, 0x02	; 2
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	cb de       	rcall	.-618    	; 0x25ce <dwt_writetodevice>
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	df 91       	pop	r29
    283e:	cf 91       	pop	r28
    2840:	1f 91       	pop	r17
    2842:	0f 91       	pop	r16
    2844:	08 95       	ret

00002846 <dwt_setrxantennadelay>:
    2846:	ac 01       	movw	r20, r24
    2848:	64 e0       	ldi	r22, 0x04	; 4
    284a:	78 e1       	ldi	r23, 0x18	; 24
    284c:	8e e2       	ldi	r24, 0x2E	; 46
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	e2 cf       	rjmp	.-60     	; 0x2816 <dwt_write16bitoffsetreg>
    2852:	08 95       	ret

00002854 <dwt_settxantennadelay>:
    2854:	ac 01       	movw	r20, r24
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	70 e0       	ldi	r23, 0x00	; 0
    285a:	88 e1       	ldi	r24, 0x18	; 24
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	db cf       	rjmp	.-74     	; 0x2816 <dwt_write16bitoffsetreg>
    2860:	08 95       	ret

00002862 <dwt_write32bitoffsetreg>:
    2862:	0f 93       	push	r16
    2864:	1f 93       	push	r17
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	00 d0       	rcall	.+0      	; 0x286c <dwt_write32bitoffsetreg+0xa>
    286c:	00 d0       	rcall	.+0      	; 0x286e <dwt_write32bitoffsetreg+0xc>
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	29 83       	std	Y+1, r18	; 0x01
    2874:	3a 83       	std	Y+2, r19	; 0x02
    2876:	4b 83       	std	Y+3, r20	; 0x03
    2878:	5c 83       	std	Y+4, r21	; 0x04
    287a:	8e 01       	movw	r16, r28
    287c:	0f 5f       	subi	r16, 0xFF	; 255
    287e:	1f 4f       	sbci	r17, 0xFF	; 255
    2880:	24 e0       	ldi	r18, 0x04	; 4
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e0       	ldi	r20, 0x00	; 0
    2886:	50 e0       	ldi	r21, 0x00	; 0
    2888:	a2 de       	rcall	.-700    	; 0x25ce <dwt_writetodevice>
    288a:	24 96       	adiw	r28, 0x04	; 4
    288c:	cd bf       	out	0x3d, r28	; 61
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
    2894:	1f 91       	pop	r17
    2896:	0f 91       	pop	r16
    2898:	08 95       	ret

0000289a <dwt_writetxfctrl>:
    289a:	cf 92       	push	r12
    289c:	df 92       	push	r13
    289e:	ef 92       	push	r14
    28a0:	ff 92       	push	r15
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	8c 01       	movw	r16, r24
    28a8:	ca 01       	movw	r24, r20
    28aa:	aa 27       	eor	r26, r26
    28ac:	97 fd       	sbrc	r25, 7
    28ae:	a0 95       	com	r26
    28b0:	ba 2f       	mov	r27, r26
    28b2:	07 2e       	mov	r0, r23
    28b4:	7f e0       	ldi	r23, 0x0F	; 15
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	aa 1f       	adc	r26, r26
    28bc:	bb 1f       	adc	r27, r27
    28be:	7a 95       	dec	r23
    28c0:	d1 f7       	brne	.-12     	; 0x28b6 <dwt_writetxfctrl+0x1c>
    28c2:	70 2d       	mov	r23, r0
    28c4:	e0 91 98 20 	lds	r30, 0x2098
    28c8:	f0 91 99 20 	lds	r31, 0x2099
    28cc:	c2 84       	ldd	r12, Z+10	; 0x0a
    28ce:	d3 84       	ldd	r13, Z+11	; 0x0b
    28d0:	e4 84       	ldd	r14, Z+12	; 0x0c
    28d2:	f5 84       	ldd	r15, Z+13	; 0x0d
    28d4:	8c 29       	or	r24, r12
    28d6:	9d 29       	or	r25, r13
    28d8:	ae 29       	or	r26, r14
    28da:	bf 29       	or	r27, r15
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	80 2b       	or	r24, r16
    28e2:	91 2b       	or	r25, r17
    28e4:	a2 2b       	or	r26, r18
    28e6:	b3 2b       	or	r27, r19
    28e8:	ab 01       	movw	r20, r22
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	70 e0       	ldi	r23, 0x00	; 0
    28ee:	03 2e       	mov	r0, r19
    28f0:	36 e1       	ldi	r19, 0x16	; 22
    28f2:	44 0f       	add	r20, r20
    28f4:	55 1f       	adc	r21, r21
    28f6:	66 1f       	adc	r22, r22
    28f8:	77 1f       	adc	r23, r23
    28fa:	3a 95       	dec	r19
    28fc:	d1 f7       	brne	.-12     	; 0x28f2 <dwt_writetxfctrl+0x58>
    28fe:	30 2d       	mov	r19, r0
    2900:	9a 01       	movw	r18, r20
    2902:	ab 01       	movw	r20, r22
    2904:	28 2b       	or	r18, r24
    2906:	39 2b       	or	r19, r25
    2908:	4a 2b       	or	r20, r26
    290a:	5b 2b       	or	r21, r27
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	70 e0       	ldi	r23, 0x00	; 0
    2910:	88 e0       	ldi	r24, 0x08	; 8
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	a6 df       	rcall	.-180    	; 0x2862 <dwt_write32bitoffsetreg>
    2916:	1f 91       	pop	r17
    2918:	0f 91       	pop	r16
    291a:	ff 90       	pop	r15
    291c:	ef 90       	pop	r14
    291e:	df 90       	pop	r13
    2920:	cf 90       	pop	r12
    2922:	08 95       	ret

00002924 <dwt_geteui>:
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
    2928:	8c 01       	movw	r16, r24
    292a:	28 e0       	ldi	r18, 0x08	; 8
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	70 e0       	ldi	r23, 0x00	; 0
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	94 de       	rcall	.-728    	; 0x2664 <dwt_readfromdevice>
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	08 95       	ret

00002942 <_dwt_otpread>:
    2942:	ab 01       	movw	r20, r22
    2944:	64 e0       	ldi	r22, 0x04	; 4
    2946:	70 e0       	ldi	r23, 0x00	; 0
    2948:	8d e2       	ldi	r24, 0x2D	; 45
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	64 df       	rcall	.-312    	; 0x2816 <dwt_write16bitoffsetreg>
    294e:	43 e0       	ldi	r20, 0x03	; 3
    2950:	66 e0       	ldi	r22, 0x06	; 6
    2952:	70 e0       	ldi	r23, 0x00	; 0
    2954:	8d e2       	ldi	r24, 0x2D	; 45
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	48 df       	rcall	.-368    	; 0x27ea <dwt_write8bitoffsetreg>
    295a:	40 e0       	ldi	r20, 0x00	; 0
    295c:	66 e0       	ldi	r22, 0x06	; 6
    295e:	70 e0       	ldi	r23, 0x00	; 0
    2960:	8d e2       	ldi	r24, 0x2D	; 45
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	42 df       	rcall	.-380    	; 0x27ea <dwt_write8bitoffsetreg>
    2966:	6a e0       	ldi	r22, 0x0A	; 10
    2968:	70 e0       	ldi	r23, 0x00	; 0
    296a:	8d e2       	ldi	r24, 0x2D	; 45
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	d4 ce       	rjmp	.-600    	; 0x2718 <dwt_read32bitoffsetreg>
    2970:	08 95       	ret

00002972 <_dwt_aonarrayupload>:
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	62 e0       	ldi	r22, 0x02	; 2
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	8c e2       	ldi	r24, 0x2C	; 44
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	36 df       	rcall	.-404    	; 0x27ea <dwt_write8bitoffsetreg>
    297e:	42 e0       	ldi	r20, 0x02	; 2
    2980:	62 e0       	ldi	r22, 0x02	; 2
    2982:	70 e0       	ldi	r23, 0x00	; 0
    2984:	8c e2       	ldi	r24, 0x2C	; 44
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	30 cf       	rjmp	.-416    	; 0x27ea <dwt_write8bitoffsetreg>
    298a:	08 95       	ret

0000298c <_dwt_configlde>:
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	ec 01       	movw	r28, r24
    2992:	4d e6       	ldi	r20, 0x6D	; 109
    2994:	66 e0       	ldi	r22, 0x06	; 6
    2996:	78 e0       	ldi	r23, 0x08	; 8
    2998:	8e e2       	ldi	r24, 0x2E	; 46
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	26 df       	rcall	.-436    	; 0x27ea <dwt_write8bitoffsetreg>
    299e:	cd 2b       	or	r28, r29
    29a0:	41 f0       	breq	.+16     	; 0x29b2 <_dwt_configlde+0x26>
    29a2:	47 e0       	ldi	r20, 0x07	; 7
    29a4:	56 e0       	ldi	r21, 0x06	; 6
    29a6:	66 e0       	ldi	r22, 0x06	; 6
    29a8:	78 e1       	ldi	r23, 0x18	; 24
    29aa:	8e e2       	ldi	r24, 0x2E	; 46
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	33 df       	rcall	.-410    	; 0x2816 <dwt_write16bitoffsetreg>
    29b0:	07 c0       	rjmp	.+14     	; 0x29c0 <_dwt_configlde+0x34>
    29b2:	47 e0       	ldi	r20, 0x07	; 7
    29b4:	56 e1       	ldi	r21, 0x16	; 22
    29b6:	66 e0       	ldi	r22, 0x06	; 6
    29b8:	78 e1       	ldi	r23, 0x18	; 24
    29ba:	8e e2       	ldi	r24, 0x2E	; 46
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	2b df       	rcall	.-426    	; 0x2816 <dwt_write16bitoffsetreg>
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	08 95       	ret

000029c6 <dwt_configure>:
    29c6:	4f 92       	push	r4
    29c8:	5f 92       	push	r5
    29ca:	6f 92       	push	r6
    29cc:	7f 92       	push	r7
    29ce:	af 92       	push	r10
    29d0:	bf 92       	push	r11
    29d2:	cf 92       	push	r12
    29d4:	df 92       	push	r13
    29d6:	ef 92       	push	r14
    29d8:	ff 92       	push	r15
    29da:	0f 93       	push	r16
    29dc:	1f 93       	push	r17
    29de:	cf 93       	push	r28
    29e0:	df 93       	push	r29
    29e2:	ec 01       	movw	r28, r24
    29e4:	48 80       	ld	r4, Y
    29e6:	59 80       	ldd	r5, Y+1	; 0x01
    29e8:	6a 80       	ldd	r6, Y+2	; 0x02
    29ea:	7b 80       	ldd	r7, Y+3	; 0x03
    29ec:	84 2d       	mov	r24, r4
    29ee:	ec 89       	ldd	r30, Y+20	; 0x14
    29f0:	fd 89       	ldd	r31, Y+21	; 0x15
    29f2:	ee 0f       	add	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	ea 5e       	subi	r30, 0xEA	; 234
    29f8:	fe 4d       	sbci	r31, 0xDE	; 222
    29fa:	c0 80       	ld	r12, Z
    29fc:	d1 80       	ldd	r13, Z+1	; 0x01
    29fe:	0c 81       	ldd	r16, Y+4	; 0x04
    2a00:	01 50       	subi	r16, 0x01	; 1
    2a02:	84 30       	cpi	r24, 0x04	; 4
    2a04:	41 f0       	breq	.+16     	; 0x2a16 <dwt_configure+0x50>
    2a06:	21 e0       	ldi	r18, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	87 30       	cpi	r24, 0x07	; 7
    2a0c:	09 f0       	breq	.+2      	; 0x2a10 <dwt_configure+0x4a>
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	e2 2e       	mov	r14, r18
    2a12:	f9 2e       	mov	r15, r25
    2a14:	03 c0       	rjmp	.+6      	; 0x2a1c <dwt_configure+0x56>
    2a16:	ee 24       	eor	r14, r14
    2a18:	e3 94       	inc	r14
    2a1a:	f1 2c       	mov	r15, r1
    2a1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a1e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a20:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2a22:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2a24:	89 2b       	or	r24, r25
    2a26:	8a 2b       	or	r24, r26
    2a28:	8b 2b       	or	r24, r27
    2a2a:	a1 f4       	brne	.+40     	; 0x2a54 <dwt_configure+0x8e>
    2a2c:	e0 91 98 20 	lds	r30, 0x2098
    2a30:	f0 91 99 20 	lds	r31, 0x2099
    2a34:	80 89       	ldd	r24, Z+16	; 0x10
    2a36:	91 89       	ldd	r25, Z+17	; 0x11
    2a38:	a2 89       	ldd	r26, Z+18	; 0x12
    2a3a:	b3 89       	ldd	r27, Z+19	; 0x13
    2a3c:	a0 64       	ori	r26, 0x40	; 64
    2a3e:	80 8b       	std	Z+16, r24	; 0x10
    2a40:	91 8b       	std	Z+17, r25	; 0x11
    2a42:	a2 8b       	std	Z+18, r26	; 0x12
    2a44:	b3 8b       	std	Z+19, r27	; 0x13
    2a46:	d6 94       	lsr	r13
    2a48:	c7 94       	ror	r12
    2a4a:	d6 94       	lsr	r13
    2a4c:	c7 94       	ror	r12
    2a4e:	d6 94       	lsr	r13
    2a50:	c7 94       	ror	r12
    2a52:	0d c0       	rjmp	.+26     	; 0x2a6e <dwt_configure+0xa8>
    2a54:	e0 91 98 20 	lds	r30, 0x2098
    2a58:	f0 91 99 20 	lds	r31, 0x2099
    2a5c:	80 89       	ldd	r24, Z+16	; 0x10
    2a5e:	91 89       	ldd	r25, Z+17	; 0x11
    2a60:	a2 89       	ldd	r26, Z+18	; 0x12
    2a62:	b3 89       	ldd	r27, Z+19	; 0x13
    2a64:	af 7b       	andi	r26, 0xBF	; 191
    2a66:	80 8b       	std	Z+16, r24	; 0x10
    2a68:	91 8b       	std	Z+17, r25	; 0x11
    2a6a:	a2 8b       	std	Z+18, r26	; 0x12
    2a6c:	b3 8b       	std	Z+19, r27	; 0x13
    2a6e:	e0 91 98 20 	lds	r30, 0x2098
    2a72:	f0 91 99 20 	lds	r31, 0x2099
    2a76:	88 a1       	ldd	r24, Y+32	; 0x20
    2a78:	80 87       	std	Z+8, r24	; 0x08
    2a7a:	80 89       	ldd	r24, Z+16	; 0x10
    2a7c:	91 89       	ldd	r25, Z+17	; 0x11
    2a7e:	a2 89       	ldd	r26, Z+18	; 0x12
    2a80:	b3 89       	ldd	r27, Z+19	; 0x13
    2a82:	ac 7f       	andi	r26, 0xFC	; 252
    2a84:	80 8b       	std	Z+16, r24	; 0x10
    2a86:	91 8b       	std	Z+17, r25	; 0x11
    2a88:	a2 8b       	std	Z+18, r26	; 0x12
    2a8a:	b3 8b       	std	Z+19, r27	; 0x13
    2a8c:	48 a1       	ldd	r20, Y+32	; 0x20
    2a8e:	59 a1       	ldd	r21, Y+33	; 0x21
    2a90:	6a a1       	ldd	r22, Y+34	; 0x22
    2a92:	7b a1       	ldd	r23, Y+35	; 0x23
    2a94:	ba 01       	movw	r22, r20
    2a96:	55 27       	eor	r21, r21
    2a98:	44 27       	eor	r20, r20
    2a9a:	44 27       	eor	r20, r20
    2a9c:	55 27       	eor	r21, r21
    2a9e:	63 70       	andi	r22, 0x03	; 3
    2aa0:	77 27       	eor	r23, r23
    2aa2:	9a 01       	movw	r18, r20
    2aa4:	ab 01       	movw	r20, r22
    2aa6:	28 2b       	or	r18, r24
    2aa8:	39 2b       	or	r19, r25
    2aaa:	4a 2b       	or	r20, r26
    2aac:	5b 2b       	or	r21, r27
    2aae:	20 8b       	std	Z+16, r18	; 0x10
    2ab0:	31 8b       	std	Z+17, r19	; 0x11
    2ab2:	42 8b       	std	Z+18, r20	; 0x12
    2ab4:	53 8b       	std	Z+19, r21	; 0x13
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	84 e0       	ldi	r24, 0x04	; 4
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	d1 de       	rcall	.-606    	; 0x2862 <dwt_write32bitoffsetreg>
    2ac0:	a6 01       	movw	r20, r12
    2ac2:	64 e0       	ldi	r22, 0x04	; 4
    2ac4:	78 e2       	ldi	r23, 0x28	; 40
    2ac6:	8e e2       	ldi	r24, 0x2E	; 46
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a5 de       	rcall	.-694    	; 0x2816 <dwt_write16bitoffsetreg>
    2acc:	10 e0       	ldi	r17, 0x00	; 0
    2ace:	c8 01       	movw	r24, r16
    2ad0:	5d df       	rcall	.-326    	; 0x298c <_dwt_configlde>
    2ad2:	e4 2d       	mov	r30, r4
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	e5 54       	subi	r30, 0x45	; 69
    2ad8:	fe 4d       	sbci	r31, 0xDE	; 222
    2ada:	a0 80       	ld	r10, Z
    2adc:	b1 2c       	mov	r11, r1
    2ade:	65 01       	movw	r12, r10
    2ae0:	cc 0c       	add	r12, r12
    2ae2:	dd 1c       	adc	r13, r13
    2ae4:	cc 0c       	add	r12, r12
    2ae6:	dd 1c       	adc	r13, r13
    2ae8:	f6 01       	movw	r30, r12
    2aea:	e5 57       	subi	r30, 0x75	; 117
    2aec:	fe 4d       	sbci	r31, 0xDE	; 222
    2aee:	20 81       	ld	r18, Z
    2af0:	31 81       	ldd	r19, Z+1	; 0x01
    2af2:	42 81       	ldd	r20, Z+2	; 0x02
    2af4:	53 81       	ldd	r21, Z+3	; 0x03
    2af6:	67 e0       	ldi	r22, 0x07	; 7
    2af8:	70 e0       	ldi	r23, 0x00	; 0
    2afa:	8b e2       	ldi	r24, 0x2B	; 43
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	b1 de       	rcall	.-670    	; 0x2862 <dwt_write32bitoffsetreg>
    2b00:	f5 01       	movw	r30, r10
    2b02:	eb 57       	subi	r30, 0x7B	; 123
    2b04:	fe 4d       	sbci	r31, 0xDE	; 222
    2b06:	40 81       	ld	r20, Z
    2b08:	6b e0       	ldi	r22, 0x0B	; 11
    2b0a:	70 e0       	ldi	r23, 0x00	; 0
    2b0c:	8b e2       	ldi	r24, 0x2B	; 43
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	6c de       	rcall	.-808    	; 0x27ea <dwt_write8bitoffsetreg>
    2b12:	f7 01       	movw	r30, r14
    2b14:	ff 27       	eor	r31, r31
    2b16:	ed 57       	subi	r30, 0x7D	; 125
    2b18:	fe 4d       	sbci	r31, 0xDE	; 222
    2b1a:	40 81       	ld	r20, Z
    2b1c:	6b e0       	ldi	r22, 0x0B	; 11
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	88 e2       	ldi	r24, 0x28	; 40
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	62 de       	rcall	.-828    	; 0x27ea <dwt_write8bitoffsetreg>
    2b26:	f6 01       	movw	r30, r12
    2b28:	ed 55       	subi	r30, 0x5D	; 93
    2b2a:	fe 4d       	sbci	r31, 0xDE	; 222
    2b2c:	20 81       	ld	r18, Z
    2b2e:	31 81       	ldd	r19, Z+1	; 0x01
    2b30:	42 81       	ldd	r20, Z+2	; 0x02
    2b32:	53 81       	ldd	r21, Z+3	; 0x03
    2b34:	6c e0       	ldi	r22, 0x0C	; 12
    2b36:	70 e0       	ldi	r23, 0x00	; 0
    2b38:	88 e2       	ldi	r24, 0x28	; 40
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	92 de       	rcall	.-732    	; 0x2862 <dwt_write32bitoffsetreg>
    2b3e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2b40:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2b42:	ee 0f       	add	r30, r30
    2b44:	ff 1f       	adc	r31, r31
    2b46:	88 8d       	ldd	r24, Y+24	; 0x18
    2b48:	99 8d       	ldd	r25, Y+25	; 0x19
    2b4a:	e8 0f       	add	r30, r24
    2b4c:	f9 1f       	adc	r31, r25
    2b4e:	ee 0f       	add	r30, r30
    2b50:	ff 1f       	adc	r31, r31
    2b52:	e4 59       	subi	r30, 0x94	; 148
    2b54:	fe 4d       	sbci	r31, 0xDE	; 222
    2b56:	40 81       	ld	r20, Z
    2b58:	51 81       	ldd	r21, Z+1	; 0x01
    2b5a:	62 e0       	ldi	r22, 0x02	; 2
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	87 e2       	ldi	r24, 0x27	; 39
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	59 de       	rcall	.-846    	; 0x2816 <dwt_write16bitoffsetreg>
    2b64:	f8 01       	movw	r30, r16
    2b66:	ee 0f       	add	r30, r30
    2b68:	ff 1f       	adc	r31, r31
    2b6a:	e8 59       	subi	r30, 0x98	; 152
    2b6c:	fe 4d       	sbci	r31, 0xDE	; 222
    2b6e:	40 81       	ld	r20, Z
    2b70:	51 81       	ldd	r21, Z+1	; 0x01
    2b72:	64 e0       	ldi	r22, 0x04	; 4
    2b74:	70 e0       	ldi	r23, 0x00	; 0
    2b76:	87 e2       	ldi	r24, 0x27	; 39
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	4d de       	rcall	.-870    	; 0x2816 <dwt_write16bitoffsetreg>
    2b7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b7e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b80:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2b82:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2b84:	89 2b       	or	r24, r25
    2b86:	8a 2b       	or	r24, r26
    2b88:	8b 2b       	or	r24, r27
    2b8a:	41 f4       	brne	.+16     	; 0x2b9c <dwt_configure+0x1d6>
    2b8c:	44 e6       	ldi	r20, 0x64	; 100
    2b8e:	50 e0       	ldi	r21, 0x00	; 0
    2b90:	66 e0       	ldi	r22, 0x06	; 6
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	87 e2       	ldi	r24, 0x27	; 39
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	3e de       	rcall	.-900    	; 0x2816 <dwt_write16bitoffsetreg>
    2b9a:	23 c0       	rjmp	.+70     	; 0x2be2 <dwt_configure+0x21c>
    2b9c:	88 85       	ldd	r24, Y+8	; 0x08
    2b9e:	99 85       	ldd	r25, Y+9	; 0x09
    2ba0:	aa 85       	ldd	r26, Y+10	; 0x0a
    2ba2:	bb 85       	ldd	r27, Y+11	; 0x0b
    2ba4:	04 97       	sbiw	r24, 0x04	; 4
    2ba6:	a1 05       	cpc	r26, r1
    2ba8:	b1 05       	cpc	r27, r1
    2baa:	71 f4       	brne	.+28     	; 0x2bc8 <dwt_configure+0x202>
    2bac:	40 e1       	ldi	r20, 0x10	; 16
    2bae:	50 e0       	ldi	r21, 0x00	; 0
    2bb0:	66 e0       	ldi	r22, 0x06	; 6
    2bb2:	70 e0       	ldi	r23, 0x00	; 0
    2bb4:	87 e2       	ldi	r24, 0x27	; 39
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	2e de       	rcall	.-932    	; 0x2816 <dwt_write16bitoffsetreg>
    2bba:	40 e1       	ldi	r20, 0x10	; 16
    2bbc:	66 e2       	ldi	r22, 0x26	; 38
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	87 e2       	ldi	r24, 0x27	; 39
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	12 de       	rcall	.-988    	; 0x27ea <dwt_write8bitoffsetreg>
    2bc6:	0d c0       	rjmp	.+26     	; 0x2be2 <dwt_configure+0x21c>
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	50 e0       	ldi	r21, 0x00	; 0
    2bcc:	66 e0       	ldi	r22, 0x06	; 6
    2bce:	70 e0       	ldi	r23, 0x00	; 0
    2bd0:	87 e2       	ldi	r24, 0x27	; 39
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	20 de       	rcall	.-960    	; 0x2816 <dwt_write16bitoffsetreg>
    2bd6:	48 e2       	ldi	r20, 0x28	; 40
    2bd8:	66 e2       	ldi	r22, 0x26	; 38
    2bda:	70 e0       	ldi	r23, 0x00	; 0
    2bdc:	87 e2       	ldi	r24, 0x27	; 39
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	04 de       	rcall	.-1016   	; 0x27ea <dwt_write8bitoffsetreg>
    2be2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2be4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2be6:	f8 01       	movw	r30, r16
    2be8:	ee 0f       	add	r30, r30
    2bea:	ff 1f       	adc	r31, r31
    2bec:	ee 0f       	add	r30, r30
    2bee:	ff 1f       	adc	r31, r31
    2bf0:	e8 0f       	add	r30, r24
    2bf2:	f9 1f       	adc	r31, r25
    2bf4:	ee 0f       	add	r30, r30
    2bf6:	ff 1f       	adc	r31, r31
    2bf8:	ee 0f       	add	r30, r30
    2bfa:	ff 1f       	adc	r31, r31
    2bfc:	e8 5b       	subi	r30, 0xB8	; 184
    2bfe:	fe 4d       	sbci	r31, 0xDE	; 222
    2c00:	20 81       	ld	r18, Z
    2c02:	31 81       	ldd	r19, Z+1	; 0x01
    2c04:	42 81       	ldd	r20, Z+2	; 0x02
    2c06:	53 81       	ldd	r21, Z+3	; 0x03
    2c08:	68 e0       	ldi	r22, 0x08	; 8
    2c0a:	70 e0       	ldi	r23, 0x00	; 0
    2c0c:	87 e2       	ldi	r24, 0x27	; 39
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	28 de       	rcall	.-944    	; 0x2862 <dwt_write32bitoffsetreg>
    2c12:	8c a1       	ldd	r24, Y+36	; 0x24
    2c14:	9d a1       	ldd	r25, Y+37	; 0x25
    2c16:	ae a1       	ldd	r26, Y+38	; 0x26
    2c18:	bf a1       	ldd	r27, Y+39	; 0x27
    2c1a:	89 2b       	or	r24, r25
    2c1c:	8a 2b       	or	r24, r26
    2c1e:	8b 2b       	or	r24, r27
    2c20:	41 f4       	brne	.+16     	; 0x2c32 <dwt_configure+0x26c>
    2c22:	81 e4       	ldi	r24, 0x41	; 65
    2c24:	90 e1       	ldi	r25, 0x10	; 16
    2c26:	a0 e0       	ldi	r26, 0x00	; 0
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	8c a3       	std	Y+36, r24	; 0x24
    2c2c:	9d a3       	std	Y+37, r25	; 0x25
    2c2e:	ae a3       	std	Y+38, r26	; 0x26
    2c30:	bf a3       	std	Y+39, r27	; 0x27
    2c32:	4c a1       	ldd	r20, Y+36	; 0x24
    2c34:	5d a1       	ldd	r21, Y+37	; 0x25
    2c36:	60 e2       	ldi	r22, 0x20	; 32
    2c38:	70 e0       	ldi	r23, 0x00	; 0
    2c3a:	87 e2       	ldi	r24, 0x27	; 39
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	eb dd       	rcall	.-1066   	; 0x2816 <dwt_write16bitoffsetreg>
    2c40:	20 91 7b 21 	lds	r18, 0x217B
    2c44:	30 91 7c 21 	lds	r19, 0x217C
    2c48:	40 91 7d 21 	lds	r20, 0x217D
    2c4c:	50 91 7e 21 	lds	r21, 0x217E
    2c50:	6c e0       	ldi	r22, 0x0C	; 12
    2c52:	70 e0       	ldi	r23, 0x00	; 0
    2c54:	83 e2       	ldi	r24, 0x23	; 35
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	04 de       	rcall	.-1016   	; 0x2862 <dwt_write32bitoffsetreg>
    2c5a:	f8 01       	movw	r30, r16
    2c5c:	ee 0f       	add	r30, r30
    2c5e:	ff 1f       	adc	r31, r31
    2c60:	e1 58       	subi	r30, 0x81	; 129
    2c62:	fe 4d       	sbci	r31, 0xDE	; 222
    2c64:	40 81       	ld	r20, Z
    2c66:	51 81       	ldd	r21, Z+1	; 0x01
    2c68:	64 e0       	ldi	r22, 0x04	; 4
    2c6a:	70 e0       	ldi	r23, 0x00	; 0
    2c6c:	83 e2       	ldi	r24, 0x23	; 35
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	d2 dd       	rcall	.-1116   	; 0x2816 <dwt_write16bitoffsetreg>
    2c72:	88 8d       	ldd	r24, Y+24	; 0x18
    2c74:	99 8d       	ldd	r25, Y+25	; 0x19
    2c76:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2c78:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2c7a:	89 2b       	or	r24, r25
    2c7c:	8a 2b       	or	r24, r26
    2c7e:	8b 2b       	or	r24, r27
    2c80:	69 f0       	breq	.+26     	; 0x2c9c <dwt_configure+0x2d6>
    2c82:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2c84:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2c86:	e8 58       	subi	r30, 0x88	; 136
    2c88:	fe 4d       	sbci	r31, 0xDE	; 222
    2c8a:	40 81       	ld	r20, Z
    2c8c:	60 e0       	ldi	r22, 0x00	; 0
    2c8e:	70 e0       	ldi	r23, 0x00	; 0
    2c90:	81 e2       	ldi	r24, 0x21	; 33
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	aa dd       	rcall	.-1196   	; 0x27ea <dwt_write8bitoffsetreg>
    2c96:	e1 e0       	ldi	r30, 0x01	; 1
    2c98:	83 e0       	ldi	r24, 0x03	; 3
    2c9a:	02 c0       	rjmp	.+4      	; 0x2ca0 <dwt_configure+0x2da>
    2c9c:	e0 e0       	ldi	r30, 0x00	; 0
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	0c 89       	ldd	r16, Y+20	; 0x14
    2ca2:	1d 89       	ldd	r17, Y+21	; 0x15
    2ca4:	2e 89       	ldd	r18, Y+22	; 0x16
    2ca6:	3f 89       	ldd	r19, Y+23	; 0x17
    2ca8:	0f 2e       	mov	r0, r31
    2caa:	fb e1       	ldi	r31, 0x1B	; 27
    2cac:	00 0f       	add	r16, r16
    2cae:	11 1f       	adc	r17, r17
    2cb0:	22 1f       	adc	r18, r18
    2cb2:	33 1f       	adc	r19, r19
    2cb4:	fa 95       	dec	r31
    2cb6:	d1 f7       	brne	.-12     	; 0x2cac <dwt_configure+0x2e6>
    2cb8:	f0 2d       	mov	r31, r0
    2cba:	b3 01       	movw	r22, r6
    2cbc:	a2 01       	movw	r20, r4
    2cbe:	4f 70       	andi	r20, 0x0F	; 15
    2cc0:	55 27       	eor	r21, r21
    2cc2:	66 27       	eor	r22, r22
    2cc4:	77 27       	eor	r23, r23
    2cc6:	04 2b       	or	r16, r20
    2cc8:	15 2b       	or	r17, r21
    2cca:	26 2b       	or	r18, r22
    2ccc:	37 2b       	or	r19, r23
    2cce:	4c 81       	ldd	r20, Y+4	; 0x04
    2cd0:	5d 81       	ldd	r21, Y+5	; 0x05
    2cd2:	6e 81       	ldd	r22, Y+6	; 0x06
    2cd4:	7f 81       	ldd	r23, Y+7	; 0x07
    2cd6:	03 2e       	mov	r0, r19
    2cd8:	32 e1       	ldi	r19, 0x12	; 18
    2cda:	44 0f       	add	r20, r20
    2cdc:	55 1f       	adc	r21, r21
    2cde:	66 1f       	adc	r22, r22
    2ce0:	77 1f       	adc	r23, r23
    2ce2:	3a 95       	dec	r19
    2ce4:	d1 f7       	brne	.-12     	; 0x2cda <dwt_configure+0x314>
    2ce6:	30 2d       	mov	r19, r0
    2ce8:	44 27       	eor	r20, r20
    2cea:	55 27       	eor	r21, r21
    2cec:	6c 70       	andi	r22, 0x0C	; 12
    2cee:	77 27       	eor	r23, r23
    2cf0:	04 2b       	or	r16, r20
    2cf2:	15 2b       	or	r17, r21
    2cf4:	26 2b       	or	r18, r22
    2cf6:	37 2b       	or	r19, r23
    2cf8:	48 89       	ldd	r20, Y+16	; 0x10
    2cfa:	59 89       	ldd	r21, Y+17	; 0x11
    2cfc:	6a 89       	ldd	r22, Y+18	; 0x12
    2cfe:	7b 89       	ldd	r23, Y+19	; 0x13
    2d00:	03 2e       	mov	r0, r19
    2d02:	36 e1       	ldi	r19, 0x16	; 22
    2d04:	44 0f       	add	r20, r20
    2d06:	55 1f       	adc	r21, r21
    2d08:	66 1f       	adc	r22, r22
    2d0a:	77 1f       	adc	r23, r23
    2d0c:	3a 95       	dec	r19
    2d0e:	d1 f7       	brne	.-12     	; 0x2d04 <dwt_configure+0x33e>
    2d10:	30 2d       	mov	r19, r0
    2d12:	44 27       	eor	r20, r20
    2d14:	55 27       	eor	r21, r21
    2d16:	60 7c       	andi	r22, 0xC0	; 192
    2d18:	77 70       	andi	r23, 0x07	; 7
    2d1a:	04 2b       	or	r16, r20
    2d1c:	15 2b       	or	r17, r21
    2d1e:	26 2b       	or	r18, r22
    2d20:	37 2b       	or	r19, r23
    2d22:	55 24       	eor	r5, r5
    2d24:	66 24       	eor	r6, r6
    2d26:	77 24       	eor	r7, r7
    2d28:	b3 01       	movw	r22, r6
    2d2a:	a2 01       	movw	r20, r4
    2d2c:	44 0f       	add	r20, r20
    2d2e:	55 1f       	adc	r21, r21
    2d30:	66 1f       	adc	r22, r22
    2d32:	77 1f       	adc	r23, r23
    2d34:	44 0f       	add	r20, r20
    2d36:	55 1f       	adc	r21, r21
    2d38:	66 1f       	adc	r22, r22
    2d3a:	77 1f       	adc	r23, r23
    2d3c:	44 0f       	add	r20, r20
    2d3e:	55 1f       	adc	r21, r21
    2d40:	66 1f       	adc	r22, r22
    2d42:	77 1f       	adc	r23, r23
    2d44:	44 0f       	add	r20, r20
    2d46:	55 1f       	adc	r21, r21
    2d48:	66 1f       	adc	r22, r22
    2d4a:	77 1f       	adc	r23, r23
    2d4c:	55 27       	eor	r21, r21
    2d4e:	66 27       	eor	r22, r22
    2d50:	77 27       	eor	r23, r23
    2d52:	40 2b       	or	r20, r16
    2d54:	51 2b       	or	r21, r17
    2d56:	62 2b       	or	r22, r18
    2d58:	73 2b       	or	r23, r19
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	a0 e0       	ldi	r26, 0x00	; 0
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	07 2e       	mov	r0, r23
    2d62:	74 e1       	ldi	r23, 0x14	; 20
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	aa 1f       	adc	r26, r26
    2d6a:	bb 1f       	adc	r27, r27
    2d6c:	7a 95       	dec	r23
    2d6e:	d1 f7       	brne	.-12     	; 0x2d64 <dwt_configure+0x39e>
    2d70:	70 2d       	mov	r23, r0
    2d72:	84 2b       	or	r24, r20
    2d74:	95 2b       	or	r25, r21
    2d76:	a6 2b       	or	r26, r22
    2d78:	b7 2b       	or	r27, r23
    2d7a:	4e 2e       	mov	r4, r30
    2d7c:	51 2c       	mov	r5, r1
    2d7e:	61 2c       	mov	r6, r1
    2d80:	71 2c       	mov	r7, r1
    2d82:	03 2e       	mov	r0, r19
    2d84:	31 e1       	ldi	r19, 0x11	; 17
    2d86:	44 0c       	add	r4, r4
    2d88:	55 1c       	adc	r5, r5
    2d8a:	66 1c       	adc	r6, r6
    2d8c:	77 1c       	adc	r7, r7
    2d8e:	3a 95       	dec	r19
    2d90:	d1 f7       	brne	.-12     	; 0x2d86 <dwt_configure+0x3c0>
    2d92:	30 2d       	mov	r19, r0
    2d94:	a3 01       	movw	r20, r6
    2d96:	92 01       	movw	r18, r4
    2d98:	28 2b       	or	r18, r24
    2d9a:	39 2b       	or	r19, r25
    2d9c:	4a 2b       	or	r20, r26
    2d9e:	5b 2b       	or	r21, r27
    2da0:	60 e0       	ldi	r22, 0x00	; 0
    2da2:	70 e0       	ldi	r23, 0x00	; 0
    2da4:	8f e1       	ldi	r24, 0x1F	; 31
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	5c dd       	rcall	.-1352   	; 0x2862 <dwt_write32bitoffsetreg>
    2daa:	4c 81       	ldd	r20, Y+4	; 0x04
    2dac:	5d 81       	ldd	r21, Y+5	; 0x05
    2dae:	6e 81       	ldd	r22, Y+6	; 0x06
    2db0:	7f 81       	ldd	r23, Y+7	; 0x07
    2db2:	88 85       	ldd	r24, Y+8	; 0x08
    2db4:	99 85       	ldd	r25, Y+9	; 0x09
    2db6:	aa 85       	ldd	r26, Y+10	; 0x0a
    2db8:	bb 85       	ldd	r27, Y+11	; 0x0b
    2dba:	84 2b       	or	r24, r20
    2dbc:	95 2b       	or	r25, r21
    2dbe:	a6 2b       	or	r26, r22
    2dc0:	b7 2b       	or	r27, r23
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	55 27       	eor	r21, r21
    2dc6:	44 27       	eor	r20, r20
    2dc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dcc:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2dce:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2dd0:	07 2e       	mov	r0, r23
    2dd2:	7d e0       	ldi	r23, 0x0D	; 13
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	aa 1f       	adc	r26, r26
    2dda:	bb 1f       	adc	r27, r27
    2ddc:	7a 95       	dec	r23
    2dde:	d1 f7       	brne	.-12     	; 0x2dd4 <dwt_configure+0x40e>
    2de0:	70 2d       	mov	r23, r0
    2de2:	9a 01       	movw	r18, r20
    2de4:	ab 01       	movw	r20, r22
    2de6:	28 2b       	or	r18, r24
    2de8:	39 2b       	or	r19, r25
    2dea:	4a 2b       	or	r20, r26
    2dec:	5b 2b       	or	r21, r27
    2dee:	e0 91 98 20 	lds	r30, 0x2098
    2df2:	f0 91 99 20 	lds	r31, 0x2099
    2df6:	22 87       	std	Z+10, r18	; 0x0a
    2df8:	33 87       	std	Z+11, r19	; 0x0b
    2dfa:	44 87       	std	Z+12, r20	; 0x0c
    2dfc:	55 87       	std	Z+13, r21	; 0x0d
    2dfe:	60 e0       	ldi	r22, 0x00	; 0
    2e00:	70 e0       	ldi	r23, 0x00	; 0
    2e02:	88 e0       	ldi	r24, 0x08	; 8
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	2d dd       	rcall	.-1446   	; 0x2862 <dwt_write32bitoffsetreg>
    2e08:	42 e4       	ldi	r20, 0x42	; 66
    2e0a:	60 e0       	ldi	r22, 0x00	; 0
    2e0c:	70 e0       	ldi	r23, 0x00	; 0
    2e0e:	8d e0       	ldi	r24, 0x0D	; 13
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	eb dc       	rcall	.-1578   	; 0x27ea <dwt_write8bitoffsetreg>
    2e14:	df 91       	pop	r29
    2e16:	cf 91       	pop	r28
    2e18:	1f 91       	pop	r17
    2e1a:	0f 91       	pop	r16
    2e1c:	ff 90       	pop	r15
    2e1e:	ef 90       	pop	r14
    2e20:	df 90       	pop	r13
    2e22:	cf 90       	pop	r12
    2e24:	bf 90       	pop	r11
    2e26:	af 90       	pop	r10
    2e28:	7f 90       	pop	r7
    2e2a:	6f 90       	pop	r6
    2e2c:	5f 90       	pop	r5
    2e2e:	4f 90       	pop	r4
    2e30:	08 95       	ret

00002e32 <dwt_setrxaftertxdelay>:
    2e32:	cf 92       	push	r12
    2e34:	df 92       	push	r13
    2e36:	ef 92       	push	r14
    2e38:	ff 92       	push	r15
    2e3a:	6b 01       	movw	r12, r22
    2e3c:	7c 01       	movw	r14, r24
    2e3e:	60 e0       	ldi	r22, 0x00	; 0
    2e40:	70 e0       	ldi	r23, 0x00	; 0
    2e42:	8a e1       	ldi	r24, 0x1A	; 26
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	68 dc       	rcall	.-1840   	; 0x2718 <dwt_read32bitoffsetreg>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	88 27       	eor	r24, r24
    2e4e:	99 27       	eor	r25, r25
    2e50:	a0 7f       	andi	r26, 0xF0	; 240
    2e52:	2f e0       	ldi	r18, 0x0F	; 15
    2e54:	e2 22       	and	r14, r18
    2e56:	ff 24       	eor	r15, r15
    2e58:	9c 01       	movw	r18, r24
    2e5a:	ad 01       	movw	r20, r26
    2e5c:	2c 29       	or	r18, r12
    2e5e:	3d 29       	or	r19, r13
    2e60:	4e 29       	or	r20, r14
    2e62:	5f 29       	or	r21, r15
    2e64:	60 e0       	ldi	r22, 0x00	; 0
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	8a e1       	ldi	r24, 0x1A	; 26
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	fa dc       	rcall	.-1548   	; 0x2862 <dwt_write32bitoffsetreg>
    2e6e:	ff 90       	pop	r15
    2e70:	ef 90       	pop	r14
    2e72:	df 90       	pop	r13
    2e74:	cf 90       	pop	r12
    2e76:	08 95       	ret

00002e78 <dwt_setleds>:
    2e78:	cf 93       	push	r28
    2e7a:	c8 2f       	mov	r28, r24
    2e7c:	80 ff       	sbrs	r24, 0
    2e7e:	20 c0       	rjmp	.+64     	; 0x2ec0 <dwt_setleds+0x48>
    2e80:	60 e0       	ldi	r22, 0x00	; 0
    2e82:	70 e0       	ldi	r23, 0x00	; 0
    2e84:	86 e2       	ldi	r24, 0x26	; 38
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	47 dc       	rcall	.-1906   	; 0x2718 <dwt_read32bitoffsetreg>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	93 7c       	andi	r25, 0xC3	; 195
    2e90:	9c 01       	movw	r18, r24
    2e92:	ad 01       	movw	r20, r26
    2e94:	34 61       	ori	r19, 0x14	; 20
    2e96:	60 e0       	ldi	r22, 0x00	; 0
    2e98:	70 e0       	ldi	r23, 0x00	; 0
    2e9a:	86 e2       	ldi	r24, 0x26	; 38
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	e1 dc       	rcall	.-1598   	; 0x2862 <dwt_write32bitoffsetreg>
    2ea0:	60 e0       	ldi	r22, 0x00	; 0
    2ea2:	70 e0       	ldi	r23, 0x00	; 0
    2ea4:	86 e3       	ldi	r24, 0x36	; 54
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	37 dc       	rcall	.-1938   	; 0x2718 <dwt_read32bitoffsetreg>
    2eaa:	9b 01       	movw	r18, r22
    2eac:	ac 01       	movw	r20, r24
    2eae:	44 68       	ori	r20, 0x84	; 132
    2eb0:	60 e0       	ldi	r22, 0x00	; 0
    2eb2:	70 e0       	ldi	r23, 0x00	; 0
    2eb4:	86 e3       	ldi	r24, 0x36	; 54
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	d4 dc       	rcall	.-1624   	; 0x2862 <dwt_write32bitoffsetreg>
    2eba:	c1 fd       	sbrc	r28, 1
    2ebc:	19 c0       	rjmp	.+50     	; 0x2ef0 <dwt_setleds+0x78>
    2ebe:	0e c0       	rjmp	.+28     	; 0x2edc <dwt_setleds+0x64>
    2ec0:	60 e0       	ldi	r22, 0x00	; 0
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	86 e2       	ldi	r24, 0x26	; 38
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	27 dc       	rcall	.-1970   	; 0x2718 <dwt_read32bitoffsetreg>
    2eca:	9b 01       	movw	r18, r22
    2ecc:	ac 01       	movw	r20, r24
    2ece:	33 7c       	andi	r19, 0xC3	; 195
    2ed0:	60 e0       	ldi	r22, 0x00	; 0
    2ed2:	70 e0       	ldi	r23, 0x00	; 0
    2ed4:	86 e2       	ldi	r24, 0x26	; 38
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	c4 dc       	rcall	.-1656   	; 0x2862 <dwt_write32bitoffsetreg>
    2eda:	1c c0       	rjmp	.+56     	; 0x2f14 <dwt_setleds+0x9c>
    2edc:	20 e1       	ldi	r18, 0x10	; 16
    2ede:	31 e0       	ldi	r19, 0x01	; 1
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	68 e2       	ldi	r22, 0x28	; 40
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	86 e3       	ldi	r24, 0x36	; 54
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	ba dc       	rcall	.-1676   	; 0x2862 <dwt_write32bitoffsetreg>
    2eee:	12 c0       	rjmp	.+36     	; 0x2f14 <dwt_setleds+0x9c>
    2ef0:	20 e1       	ldi	r18, 0x10	; 16
    2ef2:	31 e0       	ldi	r19, 0x01	; 1
    2ef4:	4f e0       	ldi	r20, 0x0F	; 15
    2ef6:	50 e0       	ldi	r21, 0x00	; 0
    2ef8:	68 e2       	ldi	r22, 0x28	; 40
    2efa:	70 e0       	ldi	r23, 0x00	; 0
    2efc:	86 e3       	ldi	r24, 0x36	; 54
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	b0 dc       	rcall	.-1696   	; 0x2862 <dwt_write32bitoffsetreg>
    2f02:	20 e1       	ldi	r18, 0x10	; 16
    2f04:	31 e0       	ldi	r19, 0x01	; 1
    2f06:	40 e0       	ldi	r20, 0x00	; 0
    2f08:	50 e0       	ldi	r21, 0x00	; 0
    2f0a:	68 e2       	ldi	r22, 0x28	; 40
    2f0c:	70 e0       	ldi	r23, 0x00	; 0
    2f0e:	86 e3       	ldi	r24, 0x36	; 54
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	a7 dc       	rcall	.-1714   	; 0x2862 <dwt_write32bitoffsetreg>
    2f14:	cf 91       	pop	r28
    2f16:	08 95       	ret

00002f18 <_dwt_enableclocks>:
    2f18:	ef 92       	push	r14
    2f1a:	ff 92       	push	r15
    2f1c:	0f 93       	push	r16
    2f1e:	1f 93       	push	r17
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	00 d0       	rcall	.+0      	; 0x2f26 <_dwt_enableclocks+0xe>
    2f26:	cd b7       	in	r28, 0x3d	; 61
    2f28:	de b7       	in	r29, 0x3e	; 62
    2f2a:	7c 01       	movw	r14, r24
    2f2c:	8e 01       	movw	r16, r28
    2f2e:	0f 5f       	subi	r16, 0xFF	; 255
    2f30:	1f 4f       	sbci	r17, 0xFF	; 255
    2f32:	22 e0       	ldi	r18, 0x02	; 2
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e0       	ldi	r20, 0x00	; 0
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	60 e0       	ldi	r22, 0x00	; 0
    2f3c:	70 e0       	ldi	r23, 0x00	; 0
    2f3e:	86 e3       	ldi	r24, 0x36	; 54
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	90 db       	rcall	.-2272   	; 0x2664 <dwt_readfromdevice>
    2f44:	8f e0       	ldi	r24, 0x0F	; 15
    2f46:	e8 16       	cp	r14, r24
    2f48:	f1 04       	cpc	r15, r1
    2f4a:	a0 f5       	brcc	.+104    	; 0x2fb4 <_dwt_enableclocks+0x9c>
    2f4c:	f7 01       	movw	r30, r14
    2f4e:	eb 5f       	subi	r30, 0xFB	; 251
    2f50:	fe 4f       	sbci	r31, 0xFE	; 254
    2f52:	0c 94 24 25 	jmp	0x4a48	; 0x4a48 <__tablejump2__>
    2f56:	19 82       	std	Y+1, r1	; 0x01
    2f58:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5a:	8e 7f       	andi	r24, 0xFE	; 254
    2f5c:	8a 83       	std	Y+2, r24	; 0x02
    2f5e:	2a c0       	rjmp	.+84     	; 0x2fb4 <_dwt_enableclocks+0x9c>
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	8c 7f       	andi	r24, 0xFC	; 252
    2f64:	81 60       	ori	r24, 0x01	; 1
    2f66:	89 83       	std	Y+1, r24	; 0x01
    2f68:	25 c0       	rjmp	.+74     	; 0x2fb4 <_dwt_enableclocks+0x9c>
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	8c 7f       	andi	r24, 0xFC	; 252
    2f6e:	82 60       	ori	r24, 0x02	; 2
    2f70:	89 83       	std	Y+1, r24	; 0x01
    2f72:	20 c0       	rjmp	.+64     	; 0x2fb4 <_dwt_enableclocks+0x9c>
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	83 7b       	andi	r24, 0xB3	; 179
    2f78:	88 64       	ori	r24, 0x48	; 72
    2f7a:	89 83       	std	Y+1, r24	; 0x01
    2f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7e:	80 68       	ori	r24, 0x80	; 128
    2f80:	8a 83       	std	Y+2, r24	; 0x02
    2f82:	18 c0       	rjmp	.+48     	; 0x2fb4 <_dwt_enableclocks+0x9c>
    2f84:	89 81       	ldd	r24, Y+1	; 0x01
    2f86:	83 7b       	andi	r24, 0xB3	; 179
    2f88:	89 83       	std	Y+1, r24	; 0x01
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	8f 77       	andi	r24, 0x7F	; 127
    2f8e:	8a 83       	std	Y+2, r24	; 0x02
    2f90:	11 c0       	rjmp	.+34     	; 0x2fb4 <_dwt_enableclocks+0x9c>
    2f92:	8a 81       	ldd	r24, Y+2	; 0x02
    2f94:	82 60       	ori	r24, 0x02	; 2
    2f96:	8a 83       	std	Y+2, r24	; 0x02
    2f98:	0d c0       	rjmp	.+26     	; 0x2fb4 <_dwt_enableclocks+0x9c>
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	8d 7f       	andi	r24, 0xFD	; 253
    2f9e:	8a 83       	std	Y+2, r24	; 0x02
    2fa0:	09 c0       	rjmp	.+18     	; 0x2fb4 <_dwt_enableclocks+0x9c>
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	8f 7c       	andi	r24, 0xCF	; 207
    2fa6:	80 62       	ori	r24, 0x20	; 32
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	04 c0       	rjmp	.+8      	; 0x2fb4 <_dwt_enableclocks+0x9c>
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	89 83       	std	Y+1, r24	; 0x01
    2fb0:	83 e0       	ldi	r24, 0x03	; 3
    2fb2:	8a 83       	std	Y+2, r24	; 0x02
    2fb4:	8e 01       	movw	r16, r28
    2fb6:	0f 5f       	subi	r16, 0xFF	; 255
    2fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fba:	21 e0       	ldi	r18, 0x01	; 1
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e0       	ldi	r20, 0x00	; 0
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	60 e0       	ldi	r22, 0x00	; 0
    2fc4:	70 e0       	ldi	r23, 0x00	; 0
    2fc6:	86 e3       	ldi	r24, 0x36	; 54
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	01 db       	rcall	.-2558   	; 0x25ce <dwt_writetodevice>
    2fcc:	0f 5f       	subi	r16, 0xFF	; 255
    2fce:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd0:	21 e0       	ldi	r18, 0x01	; 1
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e0       	ldi	r20, 0x00	; 0
    2fd6:	50 e0       	ldi	r21, 0x00	; 0
    2fd8:	61 e0       	ldi	r22, 0x01	; 1
    2fda:	70 e0       	ldi	r23, 0x00	; 0
    2fdc:	86 e3       	ldi	r24, 0x36	; 54
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	f6 da       	rcall	.-2580   	; 0x25ce <dwt_writetodevice>
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	1f 91       	pop	r17
    2fec:	0f 91       	pop	r16
    2fee:	ff 90       	pop	r15
    2ff0:	ef 90       	pop	r14
    2ff2:	08 95       	ret

00002ff4 <_dwt_loaducodefromrom>:
    2ff4:	8e e0       	ldi	r24, 0x0E	; 14
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	8f df       	rcall	.-226    	; 0x2f18 <_dwt_enableclocks>
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	50 e8       	ldi	r21, 0x80	; 128
    2ffe:	66 e0       	ldi	r22, 0x06	; 6
    3000:	70 e0       	ldi	r23, 0x00	; 0
    3002:	8d e2       	ldi	r24, 0x2D	; 45
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	07 dc       	rcall	.-2034   	; 0x2816 <dwt_write16bitoffsetreg>
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	1a d2       	rcall	.+1076   	; 0x3442 <deca_sleep>
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	82 cf       	rjmp	.-252    	; 0x2f18 <_dwt_enableclocks>
    3014:	08 95       	ret

00003016 <_dwt_disablesequencing>:
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	7e df       	rcall	.-260    	; 0x2f18 <_dwt_enableclocks>
    301c:	40 e0       	ldi	r20, 0x00	; 0
    301e:	50 e0       	ldi	r21, 0x00	; 0
    3020:	64 e0       	ldi	r22, 0x04	; 4
    3022:	70 e0       	ldi	r23, 0x00	; 0
    3024:	86 e3       	ldi	r24, 0x36	; 54
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	f6 cb       	rjmp	.-2068   	; 0x2816 <dwt_write16bitoffsetreg>
    302a:	08 95       	ret

0000302c <dwt_setdelayedtrxtime>:
    302c:	9b 01       	movw	r18, r22
    302e:	ac 01       	movw	r20, r24
    3030:	61 e0       	ldi	r22, 0x01	; 1
    3032:	70 e0       	ldi	r23, 0x00	; 0
    3034:	8a e0       	ldi	r24, 0x0A	; 10
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	14 cc       	rjmp	.-2008   	; 0x2862 <dwt_write32bitoffsetreg>
    303a:	08 95       	ret

0000303c <dwt_starttx>:
    303c:	cf 93       	push	r28
    303e:	c8 2f       	mov	r28, r24
    3040:	81 ff       	sbrs	r24, 1
    3042:	0e c0       	rjmp	.+28     	; 0x3060 <dwt_starttx+0x24>
    3044:	40 e8       	ldi	r20, 0x80	; 128
    3046:	60 e0       	ldi	r22, 0x00	; 0
    3048:	70 e0       	ldi	r23, 0x00	; 0
    304a:	8d e0       	ldi	r24, 0x0D	; 13
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	cd db       	rcall	.-2150   	; 0x27ea <dwt_write8bitoffsetreg>
    3050:	e0 91 98 20 	lds	r30, 0x2098
    3054:	f0 91 99 20 	lds	r31, 0x2099
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	86 8b       	std	Z+22, r24	; 0x16
    305c:	40 e8       	ldi	r20, 0x80	; 128
    305e:	01 c0       	rjmp	.+2      	; 0x3062 <dwt_starttx+0x26>
    3060:	40 e0       	ldi	r20, 0x00	; 0
    3062:	c0 ff       	sbrs	r28, 0
    3064:	1d c0       	rjmp	.+58     	; 0x30a0 <dwt_starttx+0x64>
    3066:	46 60       	ori	r20, 0x06	; 6
    3068:	60 e0       	ldi	r22, 0x00	; 0
    306a:	70 e0       	ldi	r23, 0x00	; 0
    306c:	8d e0       	ldi	r24, 0x0D	; 13
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	bc db       	rcall	.-2184   	; 0x27ea <dwt_write8bitoffsetreg>
    3072:	63 e0       	ldi	r22, 0x03	; 3
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	8f e0       	ldi	r24, 0x0F	; 15
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	84 db       	rcall	.-2296   	; 0x2784 <dwt_read16bitoffsetreg>
    307c:	88 70       	andi	r24, 0x08	; 8
    307e:	94 70       	andi	r25, 0x04	; 4
    3080:	89 2b       	or	r24, r25
    3082:	b9 f0       	breq	.+46     	; 0x30b2 <dwt_starttx+0x76>
    3084:	40 e4       	ldi	r20, 0x40	; 64
    3086:	60 e0       	ldi	r22, 0x00	; 0
    3088:	70 e0       	ldi	r23, 0x00	; 0
    308a:	8d e0       	ldi	r24, 0x0D	; 13
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	ad db       	rcall	.-2214   	; 0x27ea <dwt_write8bitoffsetreg>
    3090:	e0 91 98 20 	lds	r30, 0x2098
    3094:	f0 91 99 20 	lds	r31, 0x2099
    3098:	16 8a       	std	Z+22, r1	; 0x16
    309a:	8f ef       	ldi	r24, 0xFF	; 255
    309c:	9f ef       	ldi	r25, 0xFF	; 255
    309e:	0b c0       	rjmp	.+22     	; 0x30b6 <dwt_starttx+0x7a>
    30a0:	42 60       	ori	r20, 0x02	; 2
    30a2:	60 e0       	ldi	r22, 0x00	; 0
    30a4:	70 e0       	ldi	r23, 0x00	; 0
    30a6:	8d e0       	ldi	r24, 0x0D	; 13
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	9f db       	rcall	.-2242   	; 0x27ea <dwt_write8bitoffsetreg>
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	02 c0       	rjmp	.+4      	; 0x30b6 <dwt_starttx+0x7a>
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	cf 91       	pop	r28
    30b8:	08 95       	ret

000030ba <dwt_syncrxbufptrs>:
    30ba:	63 e0       	ldi	r22, 0x03	; 3
    30bc:	70 e0       	ldi	r23, 0x00	; 0
    30be:	8f e0       	ldi	r24, 0x0F	; 15
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	7d db       	rcall	.-2310   	; 0x27be <dwt_read8bitoffsetreg>
    30c4:	48 2f       	mov	r20, r24
    30c6:	40 78       	andi	r20, 0x80	; 128
    30c8:	50 e0       	ldi	r21, 0x00	; 0
    30ca:	60 e0       	ldi	r22, 0x00	; 0
    30cc:	70 e0       	ldi	r23, 0x00	; 0
    30ce:	80 74       	andi	r24, 0x40	; 64
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	a0 e0       	ldi	r26, 0x00	; 0
    30d4:	b0 e0       	ldi	r27, 0x00	; 0
    30d6:	88 0f       	add	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	aa 1f       	adc	r26, r26
    30dc:	bb 1f       	adc	r27, r27
    30de:	48 17       	cp	r20, r24
    30e0:	59 07       	cpc	r21, r25
    30e2:	6a 07       	cpc	r22, r26
    30e4:	7b 07       	cpc	r23, r27
    30e6:	31 f0       	breq	.+12     	; 0x30f4 <dwt_syncrxbufptrs+0x3a>
    30e8:	41 e0       	ldi	r20, 0x01	; 1
    30ea:	63 e0       	ldi	r22, 0x03	; 3
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	8d e0       	ldi	r24, 0x0D	; 13
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	7b cb       	rjmp	.-2314   	; 0x27ea <dwt_write8bitoffsetreg>
    30f4:	08 95       	ret

000030f6 <dwt_forcetrxoff>:
    30f6:	cf 92       	push	r12
    30f8:	df 92       	push	r13
    30fa:	ef 92       	push	r14
    30fc:	ff 92       	push	r15
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	60 e0       	ldi	r22, 0x00	; 0
    3104:	70 e0       	ldi	r23, 0x00	; 0
    3106:	8e e0       	ldi	r24, 0x0E	; 14
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	06 db       	rcall	.-2548   	; 0x2718 <dwt_read32bitoffsetreg>
    310c:	6b 01       	movw	r12, r22
    310e:	7c 01       	movw	r14, r24
    3110:	92 d1       	rcall	.+804    	; 0x3436 <decamutexon>
    3112:	ec 01       	movw	r28, r24
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	a9 01       	movw	r20, r18
    311a:	60 e0       	ldi	r22, 0x00	; 0
    311c:	70 e0       	ldi	r23, 0x00	; 0
    311e:	8e e0       	ldi	r24, 0x0E	; 14
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	9f db       	rcall	.-2242   	; 0x2862 <dwt_write32bitoffsetreg>
    3124:	40 e4       	ldi	r20, 0x40	; 64
    3126:	60 e0       	ldi	r22, 0x00	; 0
    3128:	70 e0       	ldi	r23, 0x00	; 0
    312a:	8d e0       	ldi	r24, 0x0D	; 13
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	5d db       	rcall	.-2374   	; 0x27ea <dwt_write8bitoffsetreg>
    3130:	28 ef       	ldi	r18, 0xF8	; 248
    3132:	3f ef       	ldi	r19, 0xFF	; 255
    3134:	47 e2       	ldi	r20, 0x27	; 39
    3136:	54 e2       	ldi	r21, 0x24	; 36
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	8f e0       	ldi	r24, 0x0F	; 15
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	90 db       	rcall	.-2272   	; 0x2862 <dwt_write32bitoffsetreg>
    3142:	bb df       	rcall	.-138    	; 0x30ba <dwt_syncrxbufptrs>
    3144:	a7 01       	movw	r20, r14
    3146:	96 01       	movw	r18, r12
    3148:	60 e0       	ldi	r22, 0x00	; 0
    314a:	70 e0       	ldi	r23, 0x00	; 0
    314c:	8e e0       	ldi	r24, 0x0E	; 14
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	88 db       	rcall	.-2288   	; 0x2862 <dwt_write32bitoffsetreg>
    3152:	ce 01       	movw	r24, r28
    3154:	74 d1       	rcall	.+744    	; 0x343e <decamutexoff>
    3156:	e0 91 98 20 	lds	r30, 0x2098
    315a:	f0 91 99 20 	lds	r31, 0x2099
    315e:	16 8a       	std	Z+22, r1	; 0x16
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	ff 90       	pop	r15
    3166:	ef 90       	pop	r14
    3168:	df 90       	pop	r13
    316a:	cf 90       	pop	r12
    316c:	08 95       	ret

0000316e <dwt_rxenable>:
    316e:	0f 93       	push	r16
    3170:	1f 93       	push	r17
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
    3176:	ec 01       	movw	r28, r24
    3178:	82 ff       	sbrs	r24, 2
    317a:	9f df       	rcall	.-194    	; 0x30ba <dwt_syncrxbufptrs>
    317c:	8e 01       	movw	r16, r28
    317e:	01 70       	andi	r16, 0x01	; 1
    3180:	11 27       	eor	r17, r17
    3182:	c0 fd       	sbrc	r28, 0
    3184:	11 c0       	rjmp	.+34     	; 0x31a8 <dwt_rxenable+0x3a>
    3186:	21 c0       	rjmp	.+66     	; 0x31ca <dwt_rxenable+0x5c>
    3188:	b6 df       	rcall	.-148    	; 0x30f6 <dwt_forcetrxoff>
    318a:	c1 fd       	sbrc	r28, 1
    318c:	0a c0       	rjmp	.+20     	; 0x31a2 <dwt_rxenable+0x34>
    318e:	40 e0       	ldi	r20, 0x00	; 0
    3190:	51 e0       	ldi	r21, 0x01	; 1
    3192:	60 e0       	ldi	r22, 0x00	; 0
    3194:	70 e0       	ldi	r23, 0x00	; 0
    3196:	8d e0       	ldi	r24, 0x0D	; 13
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	3d db       	rcall	.-2438   	; 0x2816 <dwt_write16bitoffsetreg>
    319c:	0f ef       	ldi	r16, 0xFF	; 255
    319e:	1f ef       	ldi	r17, 0xFF	; 255
    31a0:	1b c0       	rjmp	.+54     	; 0x31d8 <dwt_rxenable+0x6a>
    31a2:	0f ef       	ldi	r16, 0xFF	; 255
    31a4:	1f ef       	ldi	r17, 0xFF	; 255
    31a6:	18 c0       	rjmp	.+48     	; 0x31d8 <dwt_rxenable+0x6a>
    31a8:	40 e0       	ldi	r20, 0x00	; 0
    31aa:	53 e0       	ldi	r21, 0x03	; 3
    31ac:	60 e0       	ldi	r22, 0x00	; 0
    31ae:	70 e0       	ldi	r23, 0x00	; 0
    31b0:	8d e0       	ldi	r24, 0x0D	; 13
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	30 db       	rcall	.-2464   	; 0x2816 <dwt_write16bitoffsetreg>
    31b6:	63 e0       	ldi	r22, 0x03	; 3
    31b8:	70 e0       	ldi	r23, 0x00	; 0
    31ba:	8f e0       	ldi	r24, 0x0F	; 15
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	ff da       	rcall	.-2562   	; 0x27be <dwt_read8bitoffsetreg>
    31c0:	83 fd       	sbrc	r24, 3
    31c2:	e2 cf       	rjmp	.-60     	; 0x3188 <dwt_rxenable+0x1a>
    31c4:	00 e0       	ldi	r16, 0x00	; 0
    31c6:	10 e0       	ldi	r17, 0x00	; 0
    31c8:	07 c0       	rjmp	.+14     	; 0x31d8 <dwt_rxenable+0x6a>
    31ca:	40 e0       	ldi	r20, 0x00	; 0
    31cc:	51 e0       	ldi	r21, 0x01	; 1
    31ce:	60 e0       	ldi	r22, 0x00	; 0
    31d0:	70 e0       	ldi	r23, 0x00	; 0
    31d2:	8d e0       	ldi	r24, 0x0D	; 13
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	1f db       	rcall	.-2498   	; 0x2816 <dwt_write16bitoffsetreg>
    31d8:	c8 01       	movw	r24, r16
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	1f 91       	pop	r17
    31e0:	0f 91       	pop	r16
    31e2:	08 95       	ret

000031e4 <dwt_setrxtimeout>:
    31e4:	0f 93       	push	r16
    31e6:	1f 93       	push	r17
    31e8:	cf 93       	push	r28
    31ea:	8c 01       	movw	r16, r24
    31ec:	63 e0       	ldi	r22, 0x03	; 3
    31ee:	70 e0       	ldi	r23, 0x00	; 0
    31f0:	84 e0       	ldi	r24, 0x04	; 4
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	e4 da       	rcall	.-2616   	; 0x27be <dwt_read8bitoffsetreg>
    31f6:	c8 2f       	mov	r28, r24
    31f8:	01 15       	cp	r16, r1
    31fa:	11 05       	cpc	r17, r1
    31fc:	d9 f0       	breq	.+54     	; 0x3234 <dwt_setrxtimeout+0x50>
    31fe:	a8 01       	movw	r20, r16
    3200:	60 e0       	ldi	r22, 0x00	; 0
    3202:	70 e0       	ldi	r23, 0x00	; 0
    3204:	8c e0       	ldi	r24, 0x0C	; 12
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	06 db       	rcall	.-2548   	; 0x2816 <dwt_write16bitoffsetreg>
    320a:	e0 91 98 20 	lds	r30, 0x2098
    320e:	f0 91 99 20 	lds	r31, 0x2099
    3212:	00 89       	ldd	r16, Z+16	; 0x10
    3214:	11 89       	ldd	r17, Z+17	; 0x11
    3216:	22 89       	ldd	r18, Z+18	; 0x12
    3218:	33 89       	ldd	r19, Z+19	; 0x13
    321a:	30 61       	ori	r19, 0x10	; 16
    321c:	00 8b       	std	Z+16, r16	; 0x10
    321e:	11 8b       	std	Z+17, r17	; 0x11
    3220:	22 8b       	std	Z+18, r18	; 0x12
    3222:	33 8b       	std	Z+19, r19	; 0x13
    3224:	4c 2f       	mov	r20, r28
    3226:	40 61       	ori	r20, 0x10	; 16
    3228:	63 e0       	ldi	r22, 0x03	; 3
    322a:	70 e0       	ldi	r23, 0x00	; 0
    322c:	84 e0       	ldi	r24, 0x04	; 4
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	dc da       	rcall	.-2632   	; 0x27ea <dwt_write8bitoffsetreg>
    3232:	14 c0       	rjmp	.+40     	; 0x325c <dwt_setrxtimeout+0x78>
    3234:	e0 91 98 20 	lds	r30, 0x2098
    3238:	f0 91 99 20 	lds	r31, 0x2099
    323c:	00 89       	ldd	r16, Z+16	; 0x10
    323e:	11 89       	ldd	r17, Z+17	; 0x11
    3240:	22 89       	ldd	r18, Z+18	; 0x12
    3242:	33 89       	ldd	r19, Z+19	; 0x13
    3244:	3f 7e       	andi	r19, 0xEF	; 239
    3246:	00 8b       	std	Z+16, r16	; 0x10
    3248:	11 8b       	std	Z+17, r17	; 0x11
    324a:	22 8b       	std	Z+18, r18	; 0x12
    324c:	33 8b       	std	Z+19, r19	; 0x13
    324e:	48 2f       	mov	r20, r24
    3250:	4f 7e       	andi	r20, 0xEF	; 239
    3252:	63 e0       	ldi	r22, 0x03	; 3
    3254:	70 e0       	ldi	r23, 0x00	; 0
    3256:	84 e0       	ldi	r24, 0x04	; 4
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	c7 da       	rcall	.-2674   	; 0x27ea <dwt_write8bitoffsetreg>
    325c:	cf 91       	pop	r28
    325e:	1f 91       	pop	r17
    3260:	0f 91       	pop	r16
    3262:	08 95       	ret

00003264 <dwt_setpreambledetecttimeout>:
    3264:	ac 01       	movw	r20, r24
    3266:	64 e2       	ldi	r22, 0x24	; 36
    3268:	70 e0       	ldi	r23, 0x00	; 0
    326a:	87 e2       	ldi	r24, 0x27	; 39
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	d3 ca       	rjmp	.-2650   	; 0x2816 <dwt_write16bitoffsetreg>
    3270:	08 95       	ret

00003272 <dwt_rxreset>:
    3272:	40 ee       	ldi	r20, 0xE0	; 224
    3274:	63 e0       	ldi	r22, 0x03	; 3
    3276:	70 e0       	ldi	r23, 0x00	; 0
    3278:	86 e3       	ldi	r24, 0x36	; 54
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	b6 da       	rcall	.-2708   	; 0x27ea <dwt_write8bitoffsetreg>
    327e:	40 ef       	ldi	r20, 0xF0	; 240
    3280:	63 e0       	ldi	r22, 0x03	; 3
    3282:	70 e0       	ldi	r23, 0x00	; 0
    3284:	86 e3       	ldi	r24, 0x36	; 54
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	b0 ca       	rjmp	.-2720   	; 0x27ea <dwt_write8bitoffsetreg>
    328a:	08 95       	ret

0000328c <dwt_softreset>:
 *
 * no return value
 */
void dwt_softreset(void)
{
    _dwt_disablesequencing();
    328c:	c4 de       	rcall	.-632    	; 0x3016 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
    328e:	40 e0       	ldi	r20, 0x00	; 0
    3290:	50 e0       	ldi	r21, 0x00	; 0
    3292:	60 e0       	ldi	r22, 0x00	; 0
    3294:	70 e0       	ldi	r23, 0x00	; 0
    3296:	8c e2       	ldi	r24, 0x2C	; 44
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	bd da       	rcall	.-2694   	; 0x2816 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
    329c:	40 e0       	ldi	r20, 0x00	; 0
    329e:	66 e0       	ldi	r22, 0x06	; 6
    32a0:	70 e0       	ldi	r23, 0x00	; 0
    32a2:	8c e2       	ldi	r24, 0x2C	; 44
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	a1 da       	rcall	.-2750   	; 0x27ea <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
    32a8:	64 db       	rcall	.-2360   	; 0x2972 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
    32aa:	40 e0       	ldi	r20, 0x00	; 0
    32ac:	63 e0       	ldi	r22, 0x03	; 3
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	86 e3       	ldi	r24, 0x36	; 54
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	9a da       	rcall	.-2764   	; 0x27ea <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	c3 d0       	rcall	.+390    	; 0x3442 <deca_sleep>

    // Clear reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
    32bc:	40 ef       	ldi	r20, 0xF0	; 240
    32be:	63 e0       	ldi	r22, 0x03	; 3
    32c0:	70 e0       	ldi	r23, 0x00	; 0
    32c2:	86 e3       	ldi	r24, 0x36	; 54
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	91 da       	rcall	.-2782   	; 0x27ea <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
    32c8:	e0 91 98 20 	lds	r30, 0x2098
    32cc:	f0 91 99 20 	lds	r31, 0x2099
    32d0:	16 8a       	std	Z+22, r1	; 0x16
    32d2:	08 95       	ret

000032d4 <dwt_setxtaltrim>:
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
    32d4:	8f 71       	andi	r24, 0x1F	; 31
    32d6:	48 2f       	mov	r20, r24
    32d8:	40 66       	ori	r20, 0x60	; 96
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
    32da:	6e e0       	ldi	r22, 0x0E	; 14
    32dc:	70 e0       	ldi	r23, 0x00	; 0
    32de:	8b e2       	ldi	r24, 0x2B	; 43
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	83 ca       	rjmp	.-2810   	; 0x27ea <dwt_write8bitoffsetreg>
    32e4:	08 95       	ret

000032e6 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(uint16 config)
{
    32e6:	0f 93       	push	r16
    32e8:	1f 93       	push	r17
    32ea:	cf 93       	push	r28
    32ec:	df 93       	push	r29
    32ee:	c8 2f       	mov	r28, r24
    uint16 otp_addr = 0;
    uint32 ldo_tune = 0;

    pdw1000local->dblbuffon = 0; // Double buffer mode off by default
    32f0:	e0 91 98 20 	lds	r30, 0x2098
    32f4:	f0 91 99 20 	lds	r31, 0x2099
    32f8:	17 86       	std	Z+15, r1	; 0x0f
    pdw1000local->wait4resp = 0;
    32fa:	16 8a       	std	Z+22, r1	; 0x16
    pdw1000local->sleep_mode = 0;
    32fc:	14 8a       	std	Z+20, r1	; 0x14
    32fe:	15 8a       	std	Z+21, r1	; 0x15

    pdw1000local->cbTxDone = NULL;
    3300:	10 a2       	std	Z+32, r1	; 0x20
    3302:	11 a2       	std	Z+33, r1	; 0x21
    pdw1000local->cbRxOk = NULL;
    3304:	12 a2       	std	Z+34, r1	; 0x22
    3306:	13 a2       	std	Z+35, r1	; 0x23
    pdw1000local->cbRxTo = NULL;
    3308:	14 a2       	std	Z+36, r1	; 0x24
    330a:	15 a2       	std	Z+37, r1	; 0x25
    pdw1000local->cbRxErr = NULL;
    330c:	16 a2       	std	Z+38, r1	; 0x26
    330e:	17 a2       	std	Z+39, r1	; 0x27

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
    3310:	33 da       	rcall	.-2970   	; 0x2778 <dwt_readdevid>
    3312:	60 33       	cpi	r22, 0x30	; 48
    3314:	71 40       	sbci	r23, 0x01	; 1
    3316:	8a 4c       	sbci	r24, 0xCA	; 202
    3318:	9e 4d       	sbci	r25, 0xDE	; 222
    331a:	09 f0       	breq	.+2      	; 0x331e <dwt_initialise+0x38>
    331c:	85 c0       	rjmp	.+266    	; 0x3428 <dwt_initialise+0x142>
    {
        return DWT_ERROR ;
    }

    // Make sure the device is completely reset before starting initialisation
    dwt_softreset();
    331e:	b6 df       	rcall	.-148    	; 0x328c <dwt_softreset>

    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	f9 dd       	rcall	.-1038   	; 0x2f18 <_dwt_enableclocks>

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
    3326:	44 e0       	ldi	r20, 0x04	; 4
    3328:	60 e0       	ldi	r22, 0x00	; 0
    332a:	70 e0       	ldi	r23, 0x00	; 0
    332c:	84 e2       	ldi	r24, 0x24	; 36
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	5c da       	rcall	.-2888   	; 0x27ea <dwt_write8bitoffsetreg>

    // Read OTP revision number
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
    3332:	6e e1       	ldi	r22, 0x1E	; 30
    3334:	70 e0       	ldi	r23, 0x00	; 0
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	03 db       	rcall	.-2554   	; 0x2942 <_dwt_otpread>
    333c:	d6 2f       	mov	r29, r22
    pdw1000local->otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
    333e:	e0 91 98 20 	lds	r30, 0x2098
    3342:	f0 91 99 20 	lds	r31, 0x2099
    3346:	71 87       	std	Z+9, r23	; 0x09

    // Load LDO tune from OTP and kick it if there is a value actually programmed.
    ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
    3348:	64 e0       	ldi	r22, 0x04	; 4
    334a:	70 e0       	ldi	r23, 0x00	; 0
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	f8 da       	rcall	.-2576   	; 0x2942 <_dwt_otpread>
    if((ldo_tune & 0xFF) != 0)
    3352:	66 23       	and	r22, r22
    3354:	79 f0       	breq	.+30     	; 0x3374 <dwt_initialise+0x8e>
    {
        // Kick LDO tune
        dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDE kick bit
    3356:	42 e0       	ldi	r20, 0x02	; 2
    3358:	62 e1       	ldi	r22, 0x12	; 18
    335a:	70 e0       	ldi	r23, 0x00	; 0
    335c:	8d e2       	ldi	r24, 0x2D	; 45
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	44 da       	rcall	.-2936   	; 0x27ea <dwt_write8bitoffsetreg>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
    3362:	e0 91 98 20 	lds	r30, 0x2098
    3366:	f0 91 99 20 	lds	r31, 0x2099
    336a:	84 89       	ldd	r24, Z+20	; 0x14
    336c:	95 89       	ldd	r25, Z+21	; 0x15
    336e:	90 61       	ori	r25, 0x10	; 16
    3370:	84 8b       	std	Z+20, r24	; 0x14
    3372:	95 8b       	std	Z+21, r25	; 0x15
    }

    // Load Part and Lot ID from OTP
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
    3374:	00 91 98 20 	lds	r16, 0x2098
    3378:	10 91 99 20 	lds	r17, 0x2099
    337c:	66 e0       	ldi	r22, 0x06	; 6
    337e:	70 e0       	ldi	r23, 0x00	; 0
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	de da       	rcall	.-2628   	; 0x2942 <_dwt_otpread>
    3386:	f8 01       	movw	r30, r16
    3388:	60 83       	st	Z, r22
    338a:	71 83       	std	Z+1, r23	; 0x01
    338c:	82 83       	std	Z+2, r24	; 0x02
    338e:	93 83       	std	Z+3, r25	; 0x03
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
    3390:	00 91 98 20 	lds	r16, 0x2098
    3394:	10 91 99 20 	lds	r17, 0x2099
    3398:	67 e0       	ldi	r22, 0x07	; 7
    339a:	70 e0       	ldi	r23, 0x00	; 0
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	d0 da       	rcall	.-2656   	; 0x2942 <_dwt_otpread>
    33a2:	f8 01       	movw	r30, r16
    33a4:	64 83       	std	Z+4, r22	; 0x04
    33a6:	75 83       	std	Z+5, r23	; 0x05
    33a8:	86 83       	std	Z+6, r24	; 0x06
    33aa:	97 83       	std	Z+7, r25	; 0x07

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    pdw1000local->init_xtrim = otp_addr & 0x1F;
    33ac:	e0 91 98 20 	lds	r30, 0x2098
    33b0:	f0 91 99 20 	lds	r31, 0x2099
    33b4:	df 71       	andi	r29, 0x1F	; 31
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
    33b6:	11 f0       	breq	.+4      	; 0x33bc <dwt_initialise+0xd6>
    // Load Part and Lot ID from OTP
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    pdw1000local->init_xtrim = otp_addr & 0x1F;
    33b8:	d6 87       	std	Z+14, r29	; 0x0e
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <dwt_initialise+0xda>
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
    {
        pdw1000local->init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
    33bc:	80 e1       	ldi	r24, 0x10	; 16
    33be:	86 87       	std	Z+14, r24	; 0x0e
    }
    // Configure XTAL trim
    dwt_setxtaltrim(pdw1000local->init_xtrim);
    33c0:	86 85       	ldd	r24, Z+14	; 0x0e
    33c2:	88 df       	rcall	.-240    	; 0x32d4 <dwt_setxtaltrim>

    // Load leading edge detect code
    if(config & DWT_LOADUCODE)
    33c4:	c0 ff       	sbrs	r28, 0
    33c6:	0b c0       	rjmp	.+22     	; 0x33de <dwt_initialise+0xf8>
    {
        _dwt_loaducodefromrom();
    33c8:	15 de       	rcall	.-982    	; 0x2ff4 <_dwt_loaducodefromrom>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up
    33ca:	e0 91 98 20 	lds	r30, 0x2098
    33ce:	f0 91 99 20 	lds	r31, 0x2099
    33d2:	84 89       	ldd	r24, Z+20	; 0x14
    33d4:	95 89       	ldd	r25, Z+21	; 0x15
    33d6:	98 60       	ori	r25, 0x08	; 8
    33d8:	84 8b       	std	Z+20, r24	; 0x14
    33da:	95 8b       	std	Z+21, r25	; 0x15
    33dc:	0c c0       	rjmp	.+24     	; 0x33f6 <dwt_initialise+0x110>
    }
    else // Should disable the LDERUN enable bit in 0x36, 0x4
    {
        uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
    33de:	65 e0       	ldi	r22, 0x05	; 5
    33e0:	70 e0       	ldi	r23, 0x00	; 0
    33e2:	86 e3       	ldi	r24, 0x36	; 54
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	ce d9       	rcall	.-3172   	; 0x2784 <dwt_read16bitoffsetreg>
        rega &= 0xFDFF ; // Clear LDERUN bit
    33e8:	ac 01       	movw	r20, r24
    33ea:	5d 7f       	andi	r21, 0xFD	; 253
        dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
    33ec:	65 e0       	ldi	r22, 0x05	; 5
    33ee:	70 e0       	ldi	r23, 0x00	; 0
    33f0:	86 e3       	ldi	r24, 0x36	; 54
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	10 da       	rcall	.-3040   	; 0x2816 <dwt_write16bitoffsetreg>
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	8e dd       	rcall	.-1252   	; 0x2f18 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
    33fc:	40 e0       	ldi	r20, 0x00	; 0
    33fe:	6a e0       	ldi	r22, 0x0A	; 10
    3400:	70 e0       	ldi	r23, 0x00	; 0
    3402:	8c e2       	ldi	r24, 0x2C	; 44
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	f1 d9       	rcall	.-3102   	; 0x27ea <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
    3408:	c0 91 98 20 	lds	r28, 0x2098
    340c:	d0 91 99 20 	lds	r29, 0x2099
    3410:	60 e0       	ldi	r22, 0x00	; 0
    3412:	70 e0       	ldi	r23, 0x00	; 0
    3414:	84 e0       	ldi	r24, 0x04	; 4
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	7f d9       	rcall	.-3330   	; 0x2718 <dwt_read32bitoffsetreg>
    341a:	68 8b       	std	Y+16, r22	; 0x10
    341c:	79 8b       	std	Y+17, r23	; 0x11
    341e:	8a 8b       	std	Y+18, r24	; 0x12
    3420:	9b 8b       	std	Y+19, r25	; 0x13

    return DWT_SUCCESS ;
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	02 c0       	rjmp	.+4      	; 0x342c <dwt_initialise+0x146>
    pdw1000local->cbRxErr = NULL;

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
    {
        return DWT_ERROR ;
    3428:	8f ef       	ldi	r24, 0xFF	; 255
    342a:	9f ef       	ldi	r25, 0xFF	; 255
    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register

    return DWT_SUCCESS ;

} // end dwt_initialise()
    342c:	df 91       	pop	r29
    342e:	cf 91       	pop	r28
    3430:	1f 91       	pop	r17
    3432:	0f 91       	pop	r16
    3434:	08 95       	ret

00003436 <decamutexon>:
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
	decaIrqStatus_t s = 1;
	cli();
    3436:	f8 94       	cli
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	08 95       	ret

0000343e <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	sei();
    343e:	78 94       	sei
    3440:	08 95       	ret

00003442 <deca_sleep>:

#include "../include/deca_device_api.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
    3442:	af 92       	push	r10
    3444:	bf 92       	push	r11
    3446:	cf 92       	push	r12
    3448:	df 92       	push	r13
    344a:	ef 92       	push	r14
    344c:	ff 92       	push	r15
    344e:	0f 93       	push	r16
    3450:	1f 93       	push	r17
    3452:	cf 93       	push	r28
    3454:	df 93       	push	r29
    delay_ms(time_ms);
    3456:	a1 2c       	mov	r10, r1
    3458:	0f 2e       	mov	r0, r31
    345a:	fc e6       	ldi	r31, 0x6C	; 108
    345c:	bf 2e       	mov	r11, r31
    345e:	f0 2d       	mov	r31, r0
    3460:	0f 2e       	mov	r0, r31
    3462:	fc ed       	ldi	r31, 0xDC	; 220
    3464:	cf 2e       	mov	r12, r31
    3466:	f0 2d       	mov	r31, r0
    3468:	68 94       	set
    346a:	dd 24       	eor	r13, r13
    346c:	d1 f8       	bld	r13, 1
    346e:	e1 2c       	mov	r14, r1
    3470:	f1 2c       	mov	r15, r1
    3472:	00 e0       	ldi	r16, 0x00	; 0
    3474:	10 e0       	ldi	r17, 0x00	; 0
    3476:	28 2f       	mov	r18, r24
    3478:	39 2f       	mov	r19, r25
    347a:	40 e0       	ldi	r20, 0x00	; 0
    347c:	50 e0       	ldi	r21, 0x00	; 0
    347e:	60 e0       	ldi	r22, 0x00	; 0
    3480:	70 e0       	ldi	r23, 0x00	; 0
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__muldi3>
    348a:	29 51       	subi	r18, 0x19	; 25
    348c:	3c 4f       	sbci	r19, 0xFC	; 252
    348e:	4f 4f       	sbci	r20, 0xFF	; 255
    3490:	5f 4f       	sbci	r21, 0xFF	; 255
    3492:	6f 4f       	sbci	r22, 0xFF	; 255
    3494:	7f 4f       	sbci	r23, 0xFF	; 255
    3496:	8f 4f       	sbci	r24, 0xFF	; 255
    3498:	9f 4f       	sbci	r25, 0xFF	; 255
    349a:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <__floatundisf>
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e8       	ldi	r19, 0x80	; 128
    34a2:	4b eb       	ldi	r20, 0xBB	; 187
    34a4:	55 e4       	ldi	r21, 0x45	; 69
    34a6:	0e 94 dd 22 	call	0x45ba	; 0x45ba <__divsf3>
    34aa:	0e 94 4a 23 	call	0x4694	; 0x4694 <__fixunssfdi>
    34ae:	f2 2f       	mov	r31, r18
    34b0:	e3 2f       	mov	r30, r19
    34b2:	8f 2f       	mov	r24, r31
    34b4:	9e 2f       	mov	r25, r30
    34b6:	a4 2f       	mov	r26, r20
    34b8:	b5 2f       	mov	r27, r21
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	a1 09       	sbc	r26, r1
    34be:	b1 09       	sbc	r27, r1
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	a1 05       	cpc	r26, r1
    34c4:	b1 05       	cpc	r27, r1
    34c6:	c9 f7       	brne	.-14     	; 0x34ba <deca_sleep+0x78>
}
    34c8:	df 91       	pop	r29
    34ca:	cf 91       	pop	r28
    34cc:	1f 91       	pop	r17
    34ce:	0f 91       	pop	r16
    34d0:	ff 90       	pop	r15
    34d2:	ef 90       	pop	r14
    34d4:	df 90       	pop	r13
    34d6:	cf 90       	pop	r12
    34d8:	bf 90       	pop	r11
    34da:	af 90       	pop	r10
    34dc:	08 95       	ret

000034de <openspi>:
	spi_disable(&SPIC);


	return 0;

} // end closespi()
    34de:	cf 92       	push	r12
    34e0:	df 92       	push	r13
    34e2:	ef 92       	push	r14
    34e4:	ff 92       	push	r15
    34e6:	0f 93       	push	r16
    34e8:	1f 93       	push	r17
    34ea:	84 e1       	ldi	r24, 0x14	; 20
    34ec:	80 93 1c 27 	sts	0x271C, r24
    34f0:	80 ec       	ldi	r24, 0xC0	; 192
    34f2:	98 e0       	ldi	r25, 0x08	; 8
    34f4:	0e 94 32 01 	call	0x264	; 0x264 <spi_master_init>
    34f8:	c1 2c       	mov	r12, r1
    34fa:	d1 2c       	mov	r13, r1
    34fc:	76 01       	movw	r14, r12
    34fe:	00 e2       	ldi	r16, 0x20	; 32
    3500:	11 ea       	ldi	r17, 0xA1	; 161
    3502:	27 e0       	ldi	r18, 0x07	; 7
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	40 e0       	ldi	r20, 0x00	; 0
    3508:	6c e1       	ldi	r22, 0x1C	; 28
    350a:	77 e2       	ldi	r23, 0x27	; 39
    350c:	80 ec       	ldi	r24, 0xC0	; 192
    350e:	98 e0       	ldi	r25, 0x08	; 8
    3510:	0e 94 4b 01 	call	0x296	; 0x296 <spi_master_setup_device>
    3514:	e0 ec       	ldi	r30, 0xC0	; 192
    3516:	f8 e0       	ldi	r31, 0x08	; 8
    3518:	80 81       	ld	r24, Z
    351a:	80 64       	ori	r24, 0x40	; 64
    351c:	80 83       	st	Z, r24
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	1f 91       	pop	r17
    3524:	0f 91       	pop	r16
    3526:	ff 90       	pop	r15
    3528:	ef 90       	pop	r14
    352a:	df 90       	pop	r13
    352c:	cf 90       	pop	r12
    352e:	08 95       	ret

00003530 <fast_spi>:
    3530:	cf 92       	push	r12
    3532:	df 92       	push	r13
    3534:	ef 92       	push	r14
    3536:	ff 92       	push	r15
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    353c:	c1 2c       	mov	r12, r1
    353e:	d1 2c       	mov	r13, r1
    3540:	76 01       	movw	r14, r12
    3542:	00 ec       	ldi	r16, 0xC0	; 192
    3544:	11 ee       	ldi	r17, 0xE1	; 225
    3546:	24 ee       	ldi	r18, 0xE4	; 228
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e0       	ldi	r20, 0x00	; 0
    354c:	6c e1       	ldi	r22, 0x1C	; 28
    354e:	77 e2       	ldi	r23, 0x27	; 39
    3550:	80 ec       	ldi	r24, 0xC0	; 192
    3552:	98 e0       	ldi	r25, 0x08	; 8
    3554:	0e 94 4b 01 	call	0x296	; 0x296 <spi_master_setup_device>
    3558:	1f 91       	pop	r17
    355a:	0f 91       	pop	r16
    355c:	ff 90       	pop	r15
    355e:	ef 90       	pop	r14
    3560:	df 90       	pop	r13
    3562:	cf 90       	pop	r12
    3564:	08 95       	ret

00003566 <writetospi>:
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
#pragma GCC optimize ("O3")
int writetospi(uint16 headerLength, const uint8 *headerBuffer, uint32 bodylength, const uint8 *bodyBuffer)
{
    3566:	8f 92       	push	r8
    3568:	9f 92       	push	r9
    356a:	af 92       	push	r10
    356c:	bf 92       	push	r11
    356e:	cf 92       	push	r12
    3570:	df 92       	push	r13
    3572:	ef 92       	push	r14
    3574:	ff 92       	push	r15
    3576:	0f 93       	push	r16
    3578:	1f 93       	push	r17
    357a:	cf 93       	push	r28
    357c:	df 93       	push	r29
    357e:	7c 01       	movw	r14, r24
    3580:	eb 01       	movw	r28, r22
    3582:	49 01       	movw	r8, r18
    3584:	5a 01       	movw	r10, r20

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
    3586:	57 df       	rcall	.-338    	; 0x3436 <decamutexon>
    3588:	6c 01       	movw	r12, r24

    spi_select_device(&SPIC, &spi_device_conf);
    358a:	6c e1       	ldi	r22, 0x1C	; 28
    358c:	77 e2       	ldi	r23, 0x27	; 39
    358e:	80 ec       	ldi	r24, 0xC0	; 192
    3590:	98 e0       	ldi	r25, 0x08	; 8
    3592:	0e 94 8c 01 	call	0x318	; 0x318 <spi_select_device>
    spi_write_packet(&SPIC, headerBuffer, headerLength);
    3596:	a7 01       	movw	r20, r14
    3598:	be 01       	movw	r22, r28
    359a:	80 ec       	ldi	r24, 0xC0	; 192
    359c:	98 e0       	ldi	r25, 0x08	; 8
    359e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spi_write_packet>
    spi_write_packet(&SPIC, bodyBuffer, bodylength);
    35a2:	a4 01       	movw	r20, r8
    35a4:	b8 01       	movw	r22, r16
    35a6:	80 ec       	ldi	r24, 0xC0	; 192
    35a8:	98 e0       	ldi	r25, 0x08	; 8
    35aa:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spi_write_packet>
    spi_deselect_device(&SPIC, &spi_device_conf);
    35ae:	6c e1       	ldi	r22, 0x1C	; 28
    35b0:	77 e2       	ldi	r23, 0x27	; 39
    35b2:	80 ec       	ldi	r24, 0xC0	; 192
    35b4:	98 e0       	ldi	r25, 0x08	; 8
    35b6:	0e 94 a2 01 	call	0x344	; 0x344 <spi_deselect_device>

    decamutexoff(stat) ;
    35ba:	c6 01       	movw	r24, r12
    35bc:	40 df       	rcall	.-384    	; 0x343e <decamutexoff>

    return 0;
} // end writetospi()
    35be:	80 e0       	ldi	r24, 0x00	; 0
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	df 91       	pop	r29
    35c4:	cf 91       	pop	r28
    35c6:	1f 91       	pop	r17
    35c8:	0f 91       	pop	r16
    35ca:	ff 90       	pop	r15
    35cc:	ef 90       	pop	r14
    35ce:	df 90       	pop	r13
    35d0:	cf 90       	pop	r12
    35d2:	bf 90       	pop	r11
    35d4:	af 90       	pop	r10
    35d6:	9f 90       	pop	r9
    35d8:	8f 90       	pop	r8
    35da:	08 95       	ret

000035dc <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
#pragma GCC optimize ("O3")
int readfromspi(uint16 headerLength, const uint8 *headerBuffer, uint32 readlength, uint8 *readBuffer)
{
    35dc:	8f 92       	push	r8
    35de:	9f 92       	push	r9
    35e0:	af 92       	push	r10
    35e2:	bf 92       	push	r11
    35e4:	cf 92       	push	r12
    35e6:	df 92       	push	r13
    35e8:	ef 92       	push	r14
    35ea:	ff 92       	push	r15
    35ec:	0f 93       	push	r16
    35ee:	1f 93       	push	r17
    35f0:	cf 93       	push	r28
    35f2:	df 93       	push	r29
    35f4:	7c 01       	movw	r14, r24
    35f6:	eb 01       	movw	r28, r22
    35f8:	49 01       	movw	r8, r18
    35fa:	5a 01       	movw	r10, r20

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
    35fc:	1c df       	rcall	.-456    	; 0x3436 <decamutexon>
    35fe:	6c 01       	movw	r12, r24

    spi_select_device(&SPIC, &spi_device_conf);
    3600:	6c e1       	ldi	r22, 0x1C	; 28
    3602:	77 e2       	ldi	r23, 0x27	; 39
    3604:	80 ec       	ldi	r24, 0xC0	; 192
    3606:	98 e0       	ldi	r25, 0x08	; 8
    3608:	0e 94 8c 01 	call	0x318	; 0x318 <spi_select_device>
    spi_write_packet(&SPIC, headerBuffer, headerLength);
    360c:	a7 01       	movw	r20, r14
    360e:	be 01       	movw	r22, r28
    3610:	80 ec       	ldi	r24, 0xC0	; 192
    3612:	98 e0       	ldi	r25, 0x08	; 8
    3614:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spi_write_packet>
    spi_read_packet(&SPIC, readBuffer, readlength);
    3618:	a4 01       	movw	r20, r8
    361a:	b8 01       	movw	r22, r16
    361c:	80 ec       	ldi	r24, 0xC0	; 192
    361e:	98 e0       	ldi	r25, 0x08	; 8
    3620:	0e 94 79 01 	call	0x2f2	; 0x2f2 <spi_read_packet>
    spi_deselect_device(&SPIC, &spi_device_conf);
    3624:	6c e1       	ldi	r22, 0x1C	; 28
    3626:	77 e2       	ldi	r23, 0x27	; 39
    3628:	80 ec       	ldi	r24, 0xC0	; 192
    362a:	98 e0       	ldi	r25, 0x08	; 8
    362c:	0e 94 a2 01 	call	0x344	; 0x344 <spi_deselect_device>

    decamutexoff(stat) ;
    3630:	c6 01       	movw	r24, r12
    3632:	05 df       	rcall	.-502    	; 0x343e <decamutexoff>

    return 0;
} // end readfromspi()
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	df 91       	pop	r29
    363a:	cf 91       	pop	r28
    363c:	1f 91       	pop	r17
    363e:	0f 91       	pop	r16
    3640:	ff 90       	pop	r15
    3642:	ef 90       	pop	r14
    3644:	df 90       	pop	r13
    3646:	cf 90       	pop	r12
    3648:	bf 90       	pop	r11
    364a:	af 90       	pop	r10
    364c:	9f 90       	pop	r9
    364e:	8f 90       	pop	r8
    3650:	08 95       	ret

00003652 <init_onepos>:

#include "../onepos.h"

void init_onepos(void)
{
	sysclk_init();
    3652:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <sysclk_init>
	
	#ifdef ENABLE_RTC
	// 	rtc_init();
	#endif
	#ifdef ENABLE_USB
		usb_init();
    3656:	43 d2       	rcall	.+1158   	; 0x3ade <usb_init>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3658:	e0 e4       	ldi	r30, 0x40	; 64
    365a:	f6 e0       	ldi	r31, 0x06	; 6
    365c:	88 e0       	ldi	r24, 0x08	; 8
    365e:	82 83       	std	Z+2, r24	; 0x02
    3660:	94 e0       	ldi	r25, 0x04	; 4
    3662:	92 83       	std	Z+2, r25	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3664:	a0 e0       	ldi	r26, 0x00	; 0
    3666:	b6 e0       	ldi	r27, 0x06	; 6
    3668:	20 e4       	ldi	r18, 0x40	; 64
    366a:	11 96       	adiw	r26, 0x01	; 1
    366c:	2c 93       	st	X, r18
    366e:	11 97       	sbiw	r26, 0x01	; 1
    3670:	30 e8       	ldi	r19, 0x80	; 128
    3672:	11 96       	adiw	r26, 0x01	; 1
    3674:	3c 93       	st	X, r19
    3676:	a0 e2       	ldi	r26, 0x20	; 32
    3678:	b6 e0       	ldi	r27, 0x06	; 6
    367a:	41 e0       	ldi	r20, 0x01	; 1
    367c:	11 96       	adiw	r26, 0x01	; 1
    367e:	4c 93       	st	X, r20
    3680:	11 97       	sbiw	r26, 0x01	; 1
    3682:	42 e0       	ldi	r20, 0x02	; 2
    3684:	11 96       	adiw	r26, 0x01	; 1
    3686:	4c 93       	st	X, r20
    3688:	a0 e8       	ldi	r26, 0x80	; 128
    368a:	b6 e0       	ldi	r27, 0x06	; 6
    368c:	11 96       	adiw	r26, 0x01	; 1
    368e:	4c 93       	st	X, r20
    3690:	11 97       	sbiw	r26, 0x01	; 1
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3692:	12 96       	adiw	r26, 0x02	; 2
    3694:	9c 93       	st	X, r25
    3696:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3698:	11 96       	adiw	r26, 0x01	; 1
    369a:	8c 93       	st	X, r24
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    369c:	a0 e6       	ldi	r26, 0x60	; 96
    369e:	b6 e0       	ldi	r27, 0x06	; 6
    36a0:	12 96       	adiw	r26, 0x02	; 2
    36a2:	9c 93       	st	X, r25
    36a4:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    36a6:	11 96       	adiw	r26, 0x01	; 1
    36a8:	8c 93       	st	X, r24
    36aa:	80 e1       	ldi	r24, 0x10	; 16
    36ac:	81 83       	std	Z+1, r24	; 0x01
    36ae:	80 e2       	ldi	r24, 0x20	; 32
    36b0:	81 83       	std	Z+1, r24	; 0x01
    36b2:	31 83       	std	Z+1, r19	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    36b4:	22 83       	std	Z+2, r18	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    36b6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    36b8:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    36ba:	e6 e5       	ldi	r30, 0x56	; 86
    36bc:	f6 e0       	ldi	r31, 0x06	; 6
    36be:	90 81       	ld	r25, Z
    36c0:	97 70       	andi	r25, 0x07	; 7
    36c2:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    36c4:	90 81       	ld	r25, Z
    36c6:	90 61       	ori	r25, 0x10	; 16
    36c8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    36ca:	8f bf       	out	0x3f, r24	; 63
    36cc:	08 95       	ret

000036ce <init_animation>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    36ce:	80 e4       	ldi	r24, 0x40	; 64
    36d0:	e0 e0       	ldi	r30, 0x00	; 0
    36d2:	f6 e0       	ldi	r31, 0x06	; 6
    36d4:	85 83       	std	Z+5, r24	; 0x05
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	92 ee       	ldi	r25, 0xE2	; 226
    36da:	a4 e0       	ldi	r26, 0x04	; 4
    36dc:	b0 e0       	ldi	r27, 0x00	; 0
    36de:	01 97       	sbiw	r24, 0x01	; 1
    36e0:	a1 09       	sbc	r26, r1
    36e2:	b1 09       	sbc	r27, r1
    36e4:	00 97       	sbiw	r24, 0x00	; 0
    36e6:	a1 05       	cpc	r26, r1
    36e8:	b1 05       	cpc	r27, r1
    36ea:	c9 f7       	brne	.-14     	; 0x36de <init_animation+0x10>
    36ec:	80 e8       	ldi	r24, 0x80	; 128
    36ee:	e0 e0       	ldi	r30, 0x00	; 0
    36f0:	f6 e0       	ldi	r31, 0x06	; 6
    36f2:	85 83       	std	Z+5, r24	; 0x05
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	92 ee       	ldi	r25, 0xE2	; 226
    36f8:	a4 e0       	ldi	r26, 0x04	; 4
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	a1 09       	sbc	r26, r1
    3700:	b1 09       	sbc	r27, r1
    3702:	00 97       	sbiw	r24, 0x00	; 0
    3704:	a1 05       	cpc	r26, r1
    3706:	b1 05       	cpc	r27, r1
    3708:	c9 f7       	brne	.-14     	; 0x36fc <init_animation+0x2e>
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	e0 e2       	ldi	r30, 0x20	; 32
    370e:	f6 e0       	ldi	r31, 0x06	; 6
    3710:	85 83       	std	Z+5, r24	; 0x05
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	92 ee       	ldi	r25, 0xE2	; 226
    3716:	a4 e0       	ldi	r26, 0x04	; 4
    3718:	b0 e0       	ldi	r27, 0x00	; 0
    371a:	01 97       	sbiw	r24, 0x01	; 1
    371c:	a1 09       	sbc	r26, r1
    371e:	b1 09       	sbc	r27, r1
    3720:	00 97       	sbiw	r24, 0x00	; 0
    3722:	a1 05       	cpc	r26, r1
    3724:	b1 05       	cpc	r27, r1
    3726:	c9 f7       	brne	.-14     	; 0x371a <init_animation+0x4c>
    3728:	82 e0       	ldi	r24, 0x02	; 2
    372a:	e0 e2       	ldi	r30, 0x20	; 32
    372c:	f6 e0       	ldi	r31, 0x06	; 6
    372e:	85 83       	std	Z+5, r24	; 0x05
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	92 ee       	ldi	r25, 0xE2	; 226
    3734:	a4 e0       	ldi	r26, 0x04	; 4
    3736:	b0 e0       	ldi	r27, 0x00	; 0
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	a1 09       	sbc	r26, r1
    373c:	b1 09       	sbc	r27, r1
    373e:	00 97       	sbiw	r24, 0x00	; 0
    3740:	a1 05       	cpc	r26, r1
    3742:	b1 05       	cpc	r27, r1
    3744:	c9 f7       	brne	.-14     	; 0x3738 <init_animation+0x6a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3746:	80 e4       	ldi	r24, 0x40	; 64
    3748:	e0 e0       	ldi	r30, 0x00	; 0
    374a:	f6 e0       	ldi	r31, 0x06	; 6
    374c:	86 83       	std	Z+6, r24	; 0x06
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	92 ee       	ldi	r25, 0xE2	; 226
    3752:	a4 e0       	ldi	r26, 0x04	; 4
    3754:	b0 e0       	ldi	r27, 0x00	; 0
    3756:	01 97       	sbiw	r24, 0x01	; 1
    3758:	a1 09       	sbc	r26, r1
    375a:	b1 09       	sbc	r27, r1
    375c:	00 97       	sbiw	r24, 0x00	; 0
    375e:	a1 05       	cpc	r26, r1
    3760:	b1 05       	cpc	r27, r1
    3762:	c9 f7       	brne	.-14     	; 0x3756 <init_animation+0x88>
    3764:	80 e8       	ldi	r24, 0x80	; 128
    3766:	e0 e0       	ldi	r30, 0x00	; 0
    3768:	f6 e0       	ldi	r31, 0x06	; 6
    376a:	86 83       	std	Z+6, r24	; 0x06
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	92 ee       	ldi	r25, 0xE2	; 226
    3770:	a4 e0       	ldi	r26, 0x04	; 4
    3772:	b0 e0       	ldi	r27, 0x00	; 0
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	a1 09       	sbc	r26, r1
    3778:	b1 09       	sbc	r27, r1
    377a:	00 97       	sbiw	r24, 0x00	; 0
    377c:	a1 05       	cpc	r26, r1
    377e:	b1 05       	cpc	r27, r1
    3780:	c9 f7       	brne	.-14     	; 0x3774 <init_animation+0xa6>
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	e0 e2       	ldi	r30, 0x20	; 32
    3786:	f6 e0       	ldi	r31, 0x06	; 6
    3788:	86 83       	std	Z+6, r24	; 0x06
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	92 ee       	ldi	r25, 0xE2	; 226
    378e:	a4 e0       	ldi	r26, 0x04	; 4
    3790:	b0 e0       	ldi	r27, 0x00	; 0
    3792:	01 97       	sbiw	r24, 0x01	; 1
    3794:	a1 09       	sbc	r26, r1
    3796:	b1 09       	sbc	r27, r1
    3798:	00 97       	sbiw	r24, 0x00	; 0
    379a:	a1 05       	cpc	r26, r1
    379c:	b1 05       	cpc	r27, r1
    379e:	c9 f7       	brne	.-14     	; 0x3792 <init_animation+0xc4>
    37a0:	82 e0       	ldi	r24, 0x02	; 2
    37a2:	e0 e2       	ldi	r30, 0x20	; 32
    37a4:	f6 e0       	ldi	r31, 0x06	; 6
    37a6:	86 83       	std	Z+6, r24	; 0x06
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	92 ee       	ldi	r25, 0xE2	; 226
    37ac:	a4 e0       	ldi	r26, 0x04	; 4
    37ae:	b0 e0       	ldi	r27, 0x00	; 0
    37b0:	01 97       	sbiw	r24, 0x01	; 1
    37b2:	a1 09       	sbc	r26, r1
    37b4:	b1 09       	sbc	r27, r1
    37b6:	00 97       	sbiw	r24, 0x00	; 0
    37b8:	a1 05       	cpc	r26, r1
    37ba:	b1 05       	cpc	r27, r1
    37bc:	c9 f7       	brne	.-14     	; 0x37b0 <init_animation+0xe2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    37be:	80 e4       	ldi	r24, 0x40	; 64
    37c0:	e0 e0       	ldi	r30, 0x00	; 0
    37c2:	f6 e0       	ldi	r31, 0x06	; 6
    37c4:	85 83       	std	Z+5, r24	; 0x05
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	94 ec       	ldi	r25, 0xC4	; 196
    37ca:	a9 e0       	ldi	r26, 0x09	; 9
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	01 97       	sbiw	r24, 0x01	; 1
    37d0:	a1 09       	sbc	r26, r1
    37d2:	b1 09       	sbc	r27, r1
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	a1 05       	cpc	r26, r1
    37d8:	b1 05       	cpc	r27, r1
    37da:	c9 f7       	brne	.-14     	; 0x37ce <init_animation+0x100>
    37dc:	80 e8       	ldi	r24, 0x80	; 128
    37de:	e0 e0       	ldi	r30, 0x00	; 0
    37e0:	f6 e0       	ldi	r31, 0x06	; 6
    37e2:	85 83       	std	Z+5, r24	; 0x05
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	94 ec       	ldi	r25, 0xC4	; 196
    37e8:	a9 e0       	ldi	r26, 0x09	; 9
    37ea:	b0 e0       	ldi	r27, 0x00	; 0
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	a1 09       	sbc	r26, r1
    37f0:	b1 09       	sbc	r27, r1
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	a1 05       	cpc	r26, r1
    37f6:	b1 05       	cpc	r27, r1
    37f8:	c9 f7       	brne	.-14     	; 0x37ec <init_animation+0x11e>
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	e0 e2       	ldi	r30, 0x20	; 32
    37fe:	f6 e0       	ldi	r31, 0x06	; 6
    3800:	85 83       	std	Z+5, r24	; 0x05
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	94 ec       	ldi	r25, 0xC4	; 196
    3806:	a9 e0       	ldi	r26, 0x09	; 9
    3808:	b0 e0       	ldi	r27, 0x00	; 0
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	a1 09       	sbc	r26, r1
    380e:	b1 09       	sbc	r27, r1
    3810:	00 97       	sbiw	r24, 0x00	; 0
    3812:	a1 05       	cpc	r26, r1
    3814:	b1 05       	cpc	r27, r1
    3816:	c9 f7       	brne	.-14     	; 0x380a <init_animation+0x13c>
    3818:	82 e0       	ldi	r24, 0x02	; 2
    381a:	e0 e2       	ldi	r30, 0x20	; 32
    381c:	f6 e0       	ldi	r31, 0x06	; 6
    381e:	85 83       	std	Z+5, r24	; 0x05
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	94 ec       	ldi	r25, 0xC4	; 196
    3824:	a9 e0       	ldi	r26, 0x09	; 9
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	a1 09       	sbc	r26, r1
    382c:	b1 09       	sbc	r27, r1
    382e:	00 97       	sbiw	r24, 0x00	; 0
    3830:	a1 05       	cpc	r26, r1
    3832:	b1 05       	cpc	r27, r1
    3834:	c9 f7       	brne	.-14     	; 0x3828 <init_animation+0x15a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3836:	80 e4       	ldi	r24, 0x40	; 64
    3838:	e0 e0       	ldi	r30, 0x00	; 0
    383a:	f6 e0       	ldi	r31, 0x06	; 6
    383c:	86 83       	std	Z+6, r24	; 0x06
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	94 ec       	ldi	r25, 0xC4	; 196
    3842:	a9 e0       	ldi	r26, 0x09	; 9
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	01 97       	sbiw	r24, 0x01	; 1
    3848:	a1 09       	sbc	r26, r1
    384a:	b1 09       	sbc	r27, r1
    384c:	00 97       	sbiw	r24, 0x00	; 0
    384e:	a1 05       	cpc	r26, r1
    3850:	b1 05       	cpc	r27, r1
    3852:	c9 f7       	brne	.-14     	; 0x3846 <init_animation+0x178>
    3854:	80 e8       	ldi	r24, 0x80	; 128
    3856:	e0 e0       	ldi	r30, 0x00	; 0
    3858:	f6 e0       	ldi	r31, 0x06	; 6
    385a:	86 83       	std	Z+6, r24	; 0x06
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	94 ec       	ldi	r25, 0xC4	; 196
    3860:	a9 e0       	ldi	r26, 0x09	; 9
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	01 97       	sbiw	r24, 0x01	; 1
    3866:	a1 09       	sbc	r26, r1
    3868:	b1 09       	sbc	r27, r1
    386a:	00 97       	sbiw	r24, 0x00	; 0
    386c:	a1 05       	cpc	r26, r1
    386e:	b1 05       	cpc	r27, r1
    3870:	c9 f7       	brne	.-14     	; 0x3864 <init_animation+0x196>
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	e0 e2       	ldi	r30, 0x20	; 32
    3876:	f6 e0       	ldi	r31, 0x06	; 6
    3878:	86 83       	std	Z+6, r24	; 0x06
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	94 ec       	ldi	r25, 0xC4	; 196
    387e:	a9 e0       	ldi	r26, 0x09	; 9
    3880:	b0 e0       	ldi	r27, 0x00	; 0
    3882:	01 97       	sbiw	r24, 0x01	; 1
    3884:	a1 09       	sbc	r26, r1
    3886:	b1 09       	sbc	r27, r1
    3888:	00 97       	sbiw	r24, 0x00	; 0
    388a:	a1 05       	cpc	r26, r1
    388c:	b1 05       	cpc	r27, r1
    388e:	c9 f7       	brne	.-14     	; 0x3882 <init_animation+0x1b4>
    3890:	82 e0       	ldi	r24, 0x02	; 2
    3892:	e0 e2       	ldi	r30, 0x20	; 32
    3894:	f6 e0       	ldi	r31, 0x06	; 6
    3896:	86 83       	std	Z+6, r24	; 0x06
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	94 ec       	ldi	r25, 0xC4	; 196
    389c:	a9 e0       	ldi	r26, 0x09	; 9
    389e:	b0 e0       	ldi	r27, 0x00	; 0
    38a0:	01 97       	sbiw	r24, 0x01	; 1
    38a2:	a1 09       	sbc	r26, r1
    38a4:	b1 09       	sbc	r27, r1
    38a6:	00 97       	sbiw	r24, 0x00	; 0
    38a8:	a1 05       	cpc	r26, r1
    38aa:	b1 05       	cpc	r27, r1
    38ac:	c9 f7       	brne	.-14     	; 0x38a0 <init_animation+0x1d2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    38ae:	80 e4       	ldi	r24, 0x40	; 64
    38b0:	e0 e0       	ldi	r30, 0x00	; 0
    38b2:	f6 e0       	ldi	r31, 0x06	; 6
    38b4:	85 83       	std	Z+5, r24	; 0x05
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	96 ea       	ldi	r25, 0xA6	; 166
    38ba:	ae e0       	ldi	r26, 0x0E	; 14
    38bc:	b0 e0       	ldi	r27, 0x00	; 0
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	a1 09       	sbc	r26, r1
    38c2:	b1 09       	sbc	r27, r1
    38c4:	00 97       	sbiw	r24, 0x00	; 0
    38c6:	a1 05       	cpc	r26, r1
    38c8:	b1 05       	cpc	r27, r1
    38ca:	c9 f7       	brne	.-14     	; 0x38be <init_animation+0x1f0>
    38cc:	80 e8       	ldi	r24, 0x80	; 128
    38ce:	e0 e0       	ldi	r30, 0x00	; 0
    38d0:	f6 e0       	ldi	r31, 0x06	; 6
    38d2:	85 83       	std	Z+5, r24	; 0x05
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	96 ea       	ldi	r25, 0xA6	; 166
    38d8:	ae e0       	ldi	r26, 0x0E	; 14
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	01 97       	sbiw	r24, 0x01	; 1
    38de:	a1 09       	sbc	r26, r1
    38e0:	b1 09       	sbc	r27, r1
    38e2:	00 97       	sbiw	r24, 0x00	; 0
    38e4:	a1 05       	cpc	r26, r1
    38e6:	b1 05       	cpc	r27, r1
    38e8:	c9 f7       	brne	.-14     	; 0x38dc <init_animation+0x20e>
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	e0 e2       	ldi	r30, 0x20	; 32
    38ee:	f6 e0       	ldi	r31, 0x06	; 6
    38f0:	85 83       	std	Z+5, r24	; 0x05
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	96 ea       	ldi	r25, 0xA6	; 166
    38f6:	ae e0       	ldi	r26, 0x0E	; 14
    38f8:	b0 e0       	ldi	r27, 0x00	; 0
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	a1 09       	sbc	r26, r1
    38fe:	b1 09       	sbc	r27, r1
    3900:	00 97       	sbiw	r24, 0x00	; 0
    3902:	a1 05       	cpc	r26, r1
    3904:	b1 05       	cpc	r27, r1
    3906:	c9 f7       	brne	.-14     	; 0x38fa <init_animation+0x22c>
    3908:	82 e0       	ldi	r24, 0x02	; 2
    390a:	e0 e2       	ldi	r30, 0x20	; 32
    390c:	f6 e0       	ldi	r31, 0x06	; 6
    390e:	85 83       	std	Z+5, r24	; 0x05
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	96 ea       	ldi	r25, 0xA6	; 166
    3914:	ae e0       	ldi	r26, 0x0E	; 14
    3916:	b0 e0       	ldi	r27, 0x00	; 0
    3918:	01 97       	sbiw	r24, 0x01	; 1
    391a:	a1 09       	sbc	r26, r1
    391c:	b1 09       	sbc	r27, r1
    391e:	00 97       	sbiw	r24, 0x00	; 0
    3920:	a1 05       	cpc	r26, r1
    3922:	b1 05       	cpc	r27, r1
    3924:	c9 f7       	brne	.-14     	; 0x3918 <init_animation+0x24a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3926:	80 e4       	ldi	r24, 0x40	; 64
    3928:	e0 e0       	ldi	r30, 0x00	; 0
    392a:	f6 e0       	ldi	r31, 0x06	; 6
    392c:	86 83       	std	Z+6, r24	; 0x06
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	96 ea       	ldi	r25, 0xA6	; 166
    3932:	ae e0       	ldi	r26, 0x0E	; 14
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	a1 09       	sbc	r26, r1
    393a:	b1 09       	sbc	r27, r1
    393c:	00 97       	sbiw	r24, 0x00	; 0
    393e:	a1 05       	cpc	r26, r1
    3940:	b1 05       	cpc	r27, r1
    3942:	c9 f7       	brne	.-14     	; 0x3936 <init_animation+0x268>
    3944:	80 e8       	ldi	r24, 0x80	; 128
    3946:	e0 e0       	ldi	r30, 0x00	; 0
    3948:	f6 e0       	ldi	r31, 0x06	; 6
    394a:	86 83       	std	Z+6, r24	; 0x06
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	96 ea       	ldi	r25, 0xA6	; 166
    3950:	ae e0       	ldi	r26, 0x0E	; 14
    3952:	b0 e0       	ldi	r27, 0x00	; 0
    3954:	01 97       	sbiw	r24, 0x01	; 1
    3956:	a1 09       	sbc	r26, r1
    3958:	b1 09       	sbc	r27, r1
    395a:	00 97       	sbiw	r24, 0x00	; 0
    395c:	a1 05       	cpc	r26, r1
    395e:	b1 05       	cpc	r27, r1
    3960:	c9 f7       	brne	.-14     	; 0x3954 <init_animation+0x286>
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	e0 e2       	ldi	r30, 0x20	; 32
    3966:	f6 e0       	ldi	r31, 0x06	; 6
    3968:	86 83       	std	Z+6, r24	; 0x06
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	96 ea       	ldi	r25, 0xA6	; 166
    396e:	ae e0       	ldi	r26, 0x0E	; 14
    3970:	b0 e0       	ldi	r27, 0x00	; 0
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	a1 09       	sbc	r26, r1
    3976:	b1 09       	sbc	r27, r1
    3978:	00 97       	sbiw	r24, 0x00	; 0
    397a:	a1 05       	cpc	r26, r1
    397c:	b1 05       	cpc	r27, r1
    397e:	c9 f7       	brne	.-14     	; 0x3972 <init_animation+0x2a4>
    3980:	82 e0       	ldi	r24, 0x02	; 2
    3982:	e0 e2       	ldi	r30, 0x20	; 32
    3984:	f6 e0       	ldi	r31, 0x06	; 6
    3986:	86 83       	std	Z+6, r24	; 0x06
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	96 ea       	ldi	r25, 0xA6	; 166
    398c:	ae e0       	ldi	r26, 0x0E	; 14
    398e:	b0 e0       	ldi	r27, 0x00	; 0
    3990:	01 97       	sbiw	r24, 0x01	; 1
    3992:	a1 09       	sbc	r26, r1
    3994:	b1 09       	sbc	r27, r1
    3996:	00 97       	sbiw	r24, 0x00	; 0
    3998:	a1 05       	cpc	r26, r1
    399a:	b1 05       	cpc	r27, r1
    399c:	c9 f7       	brne	.-14     	; 0x3990 <init_animation+0x2c2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    399e:	80 e4       	ldi	r24, 0x40	; 64
    39a0:	e0 e0       	ldi	r30, 0x00	; 0
    39a2:	f6 e0       	ldi	r31, 0x06	; 6
    39a4:	85 83       	std	Z+5, r24	; 0x05
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	98 e8       	ldi	r25, 0x88	; 136
    39aa:	a3 e1       	ldi	r26, 0x13	; 19
    39ac:	b0 e0       	ldi	r27, 0x00	; 0
    39ae:	01 97       	sbiw	r24, 0x01	; 1
    39b0:	a1 09       	sbc	r26, r1
    39b2:	b1 09       	sbc	r27, r1
    39b4:	00 97       	sbiw	r24, 0x00	; 0
    39b6:	a1 05       	cpc	r26, r1
    39b8:	b1 05       	cpc	r27, r1
    39ba:	c9 f7       	brne	.-14     	; 0x39ae <init_animation+0x2e0>
    39bc:	80 e8       	ldi	r24, 0x80	; 128
    39be:	e0 e0       	ldi	r30, 0x00	; 0
    39c0:	f6 e0       	ldi	r31, 0x06	; 6
    39c2:	85 83       	std	Z+5, r24	; 0x05
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	98 e8       	ldi	r25, 0x88	; 136
    39c8:	a3 e1       	ldi	r26, 0x13	; 19
    39ca:	b0 e0       	ldi	r27, 0x00	; 0
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	a1 09       	sbc	r26, r1
    39d0:	b1 09       	sbc	r27, r1
    39d2:	00 97       	sbiw	r24, 0x00	; 0
    39d4:	a1 05       	cpc	r26, r1
    39d6:	b1 05       	cpc	r27, r1
    39d8:	c9 f7       	brne	.-14     	; 0x39cc <init_animation+0x2fe>
    39da:	81 e0       	ldi	r24, 0x01	; 1
    39dc:	e0 e2       	ldi	r30, 0x20	; 32
    39de:	f6 e0       	ldi	r31, 0x06	; 6
    39e0:	85 83       	std	Z+5, r24	; 0x05
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	98 e8       	ldi	r25, 0x88	; 136
    39e6:	a3 e1       	ldi	r26, 0x13	; 19
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	01 97       	sbiw	r24, 0x01	; 1
    39ec:	a1 09       	sbc	r26, r1
    39ee:	b1 09       	sbc	r27, r1
    39f0:	00 97       	sbiw	r24, 0x00	; 0
    39f2:	a1 05       	cpc	r26, r1
    39f4:	b1 05       	cpc	r27, r1
    39f6:	c9 f7       	brne	.-14     	; 0x39ea <init_animation+0x31c>
    39f8:	82 e0       	ldi	r24, 0x02	; 2
    39fa:	e0 e2       	ldi	r30, 0x20	; 32
    39fc:	f6 e0       	ldi	r31, 0x06	; 6
    39fe:	85 83       	std	Z+5, r24	; 0x05
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	98 e8       	ldi	r25, 0x88	; 136
    3a04:	a3 e1       	ldi	r26, 0x13	; 19
    3a06:	b0 e0       	ldi	r27, 0x00	; 0
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	a1 09       	sbc	r26, r1
    3a0c:	b1 09       	sbc	r27, r1
    3a0e:	00 97       	sbiw	r24, 0x00	; 0
    3a10:	a1 05       	cpc	r26, r1
    3a12:	b1 05       	cpc	r27, r1
    3a14:	c9 f7       	brne	.-14     	; 0x3a08 <init_animation+0x33a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3a16:	80 e4       	ldi	r24, 0x40	; 64
    3a18:	e0 e0       	ldi	r30, 0x00	; 0
    3a1a:	f6 e0       	ldi	r31, 0x06	; 6
    3a1c:	86 83       	std	Z+6, r24	; 0x06
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	98 e8       	ldi	r25, 0x88	; 136
    3a22:	a3 e1       	ldi	r26, 0x13	; 19
    3a24:	b0 e0       	ldi	r27, 0x00	; 0
    3a26:	01 97       	sbiw	r24, 0x01	; 1
    3a28:	a1 09       	sbc	r26, r1
    3a2a:	b1 09       	sbc	r27, r1
    3a2c:	00 97       	sbiw	r24, 0x00	; 0
    3a2e:	a1 05       	cpc	r26, r1
    3a30:	b1 05       	cpc	r27, r1
    3a32:	c9 f7       	brne	.-14     	; 0x3a26 <init_animation+0x358>
    3a34:	80 e8       	ldi	r24, 0x80	; 128
    3a36:	e0 e0       	ldi	r30, 0x00	; 0
    3a38:	f6 e0       	ldi	r31, 0x06	; 6
    3a3a:	86 83       	std	Z+6, r24	; 0x06
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
    3a3e:	98 e8       	ldi	r25, 0x88	; 136
    3a40:	a3 e1       	ldi	r26, 0x13	; 19
    3a42:	b0 e0       	ldi	r27, 0x00	; 0
    3a44:	01 97       	sbiw	r24, 0x01	; 1
    3a46:	a1 09       	sbc	r26, r1
    3a48:	b1 09       	sbc	r27, r1
    3a4a:	00 97       	sbiw	r24, 0x00	; 0
    3a4c:	a1 05       	cpc	r26, r1
    3a4e:	b1 05       	cpc	r27, r1
    3a50:	c9 f7       	brne	.-14     	; 0x3a44 <init_animation+0x376>
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	e0 e2       	ldi	r30, 0x20	; 32
    3a56:	f6 e0       	ldi	r31, 0x06	; 6
    3a58:	86 83       	std	Z+6, r24	; 0x06
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	98 e8       	ldi	r25, 0x88	; 136
    3a5e:	a3 e1       	ldi	r26, 0x13	; 19
    3a60:	b0 e0       	ldi	r27, 0x00	; 0
    3a62:	01 97       	sbiw	r24, 0x01	; 1
    3a64:	a1 09       	sbc	r26, r1
    3a66:	b1 09       	sbc	r27, r1
    3a68:	00 97       	sbiw	r24, 0x00	; 0
    3a6a:	a1 05       	cpc	r26, r1
    3a6c:	b1 05       	cpc	r27, r1
    3a6e:	c9 f7       	brne	.-14     	; 0x3a62 <init_animation+0x394>
    3a70:	82 e0       	ldi	r24, 0x02	; 2
    3a72:	e0 e2       	ldi	r30, 0x20	; 32
    3a74:	f6 e0       	ldi	r31, 0x06	; 6
    3a76:	86 83       	std	Z+6, r24	; 0x06
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	98 e8       	ldi	r25, 0x88	; 136
    3a7c:	a3 e1       	ldi	r26, 0x13	; 19
    3a7e:	b0 e0       	ldi	r27, 0x00	; 0
    3a80:	01 97       	sbiw	r24, 0x01	; 1
    3a82:	a1 09       	sbc	r26, r1
    3a84:	b1 09       	sbc	r27, r1
    3a86:	00 97       	sbiw	r24, 0x00	; 0
    3a88:	a1 05       	cpc	r26, r1
    3a8a:	b1 05       	cpc	r27, r1
    3a8c:	c9 f7       	brne	.-14     	; 0x3a80 <init_animation+0x3b2>
	delay_ms(160);
	led3(OFF);
	delay_ms(160);
	led4(OFF);
	delay_ms(160);
    3a8e:	08 95       	ret

00003a90 <usb_putchar_printf>:
	usb_putchar(*string++);
}


#ifdef PRINTF_USB
int usb_putchar_printf(char var, FILE *stream) {
    3a90:	cf 93       	push	r28
    3a92:	c8 2f       	mov	r28, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
    3a94:	8a 30       	cpi	r24, 0x0A	; 10
    3a96:	21 f4       	brne	.+8      	; 0x3aa0 <usb_putchar_printf+0x10>
	
}

void usb_putchar(char a)
{
	udi_cdc_putc(a);
    3a98:	8d e0       	ldi	r24, 0x0D	; 13
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	0e 94 a0 04 	call	0x940	; 0x940 <udi_cdc_putc>
    3aa0:	8c 2f       	mov	r24, r28
    3aa2:	99 27       	eor	r25, r25
    3aa4:	87 fd       	sbrc	r24, 7
    3aa6:	90 95       	com	r25
    3aa8:	0e 94 a0 04 	call	0x940	; 0x940 <udi_cdc_putc>
int usb_putchar_printf(char var, FILE *stream) {
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
	usb_putchar(var);
	return 0;
}
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	cf 91       	pop	r28
    3ab2:	08 95       	ret

00003ab4 <usb_getchar_scanf>:

int usb_getchar_scanf(FILE *stream)
{
    3ab4:	0f 93       	push	r16
    3ab6:	1f 93       	push	r17
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	8c 01       	movw	r16, r24
	return udi_cdc_getc();
}

int usb_is_rx_ready(void)
{
	return udi_cdc_is_rx_ready();
    3abe:	0e 94 df 03 	call	0x7be	; 0x7be <udi_cdc_is_rx_ready>

int usb_getchar_scanf(FILE *stream)
{
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
    3ac2:	88 23       	and	r24, r24
    3ac4:	e1 f3       	breq	.-8      	; 0x3abe <usb_getchar_scanf+0xa>
	udi_cdc_putc(a);
}

char usb_getchar(void)
{
	return udi_cdc_getc();
    3ac6:	0e 94 2b 04 	call	0x856	; 0x856 <udi_cdc_getc>
    3aca:	ec 01       	movw	r28, r24
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
	u8Data=usb_getchar();
	//echo input data
	usb_putchar_printf(u8Data,stream);
    3acc:	b8 01       	movw	r22, r16
    3ace:	e0 df       	rcall	.-64     	; 0x3a90 <usb_putchar_printf>
	// Return received data
	return u8Data;
}
    3ad0:	ce 01       	movw	r24, r28
    3ad2:	99 27       	eor	r25, r25
    3ad4:	df 91       	pop	r29
    3ad6:	cf 91       	pop	r28
    3ad8:	1f 91       	pop	r17
    3ada:	0f 91       	pop	r16
    3adc:	08 95       	ret

00003ade <usb_init>:

#include "./../include/usb_serial.h"

void usb_init(void)
{
	irq_initialize_vectors();
    3ade:	87 e0       	ldi	r24, 0x07	; 7
    3ae0:	e0 ea       	ldi	r30, 0xA0	; 160
    3ae2:	f0 e0       	ldi	r31, 0x00	; 0
    3ae4:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    3ae6:	78 94       	sei
	udc_start();
    3ae8:	0e 94 8e 05 	call	0xb1c	; 0xb1c <udc_start>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    3aec:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <udd_attach>
	udc_attach();
	
	#ifdef PRINTF_USB
	// setup our stdio stream
	stdout = &mystdout;
    3af0:	8a e9       	ldi	r24, 0x9A	; 154
    3af2:	90 e2       	ldi	r25, 0x20	; 32
    3af4:	80 93 1f 27 	sts	0x271F, r24
    3af8:	90 93 20 27 	sts	0x2720, r25
	stdin = &mystdout;
    3afc:	80 93 1d 27 	sts	0x271D, r24
    3b00:	90 93 1e 27 	sts	0x271E, r25
    3b04:	08 95       	ret

00003b06 <final_msg_get_ts>:
	{
		printf("Big-endian\n\r");
	}
	else
	{
		printf("Middle-endian or unknown storage type. Variable= %x", e.var);
    3b06:	8f 92       	push	r8
    3b08:	9f 92       	push	r9
    3b0a:	af 92       	push	r10
    3b0c:	bf 92       	push	r11
    3b0e:	cf 92       	push	r12
    3b10:	df 92       	push	r13
    3b12:	ef 92       	push	r14
    3b14:	ff 92       	push	r15
    3b16:	0f 93       	push	r16
    3b18:	cf 93       	push	r28
    3b1a:	df 93       	push	r29
    3b1c:	db 01       	movw	r26, r22
    3b1e:	1d 92       	st	X+, r1
    3b20:	1d 92       	st	X+, r1
    3b22:	1d 92       	st	X+, r1
    3b24:	1c 92       	st	X, r1
    3b26:	13 97       	sbiw	r26, 0x03	; 3
    3b28:	ec 01       	movw	r28, r24
    3b2a:	e0 e0       	ldi	r30, 0x00	; 0
    3b2c:	f0 e0       	ldi	r31, 0x00	; 0
    3b2e:	29 91       	ld	r18, Y+
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	40 e0       	ldi	r20, 0x00	; 0
    3b34:	50 e0       	ldi	r21, 0x00	; 0
    3b36:	60 e0       	ldi	r22, 0x00	; 0
    3b38:	70 e0       	ldi	r23, 0x00	; 0
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	0e 2f       	mov	r16, r30
    3b40:	da d7       	rcall	.+4020   	; 0x4af6 <__ashldi3>
    3b42:	82 2e       	mov	r8, r18
    3b44:	93 2e       	mov	r9, r19
    3b46:	a4 2e       	mov	r10, r20
    3b48:	b5 2e       	mov	r11, r21
    3b4a:	4d 91       	ld	r20, X+
    3b4c:	5d 91       	ld	r21, X+
    3b4e:	6d 91       	ld	r22, X+
    3b50:	7c 91       	ld	r23, X
    3b52:	13 97       	sbiw	r26, 0x03	; 3
    3b54:	84 0e       	add	r8, r20
    3b56:	95 1e       	adc	r9, r21
    3b58:	a6 1e       	adc	r10, r22
    3b5a:	b7 1e       	adc	r11, r23
    3b5c:	8d 92       	st	X+, r8
    3b5e:	9d 92       	st	X+, r9
    3b60:	ad 92       	st	X+, r10
    3b62:	bc 92       	st	X, r11
    3b64:	13 97       	sbiw	r26, 0x03	; 3
    3b66:	38 96       	adiw	r30, 0x08	; 8
    3b68:	e0 32       	cpi	r30, 0x20	; 32
    3b6a:	f1 05       	cpc	r31, r1
    3b6c:	01 f7       	brne	.-64     	; 0x3b2e <final_msg_get_ts+0x28>
    3b6e:	df 91       	pop	r29
    3b70:	cf 91       	pop	r28
    3b72:	0f 91       	pop	r16
    3b74:	ff 90       	pop	r15
    3b76:	ef 90       	pop	r14
    3b78:	df 90       	pop	r13
    3b7a:	cf 90       	pop	r12
    3b7c:	bf 90       	pop	r11
    3b7e:	af 90       	pop	r10
    3b80:	9f 90       	pop	r9
    3b82:	8f 90       	pop	r8
    3b84:	08 95       	ret

00003b86 <usart_serial_init>:
    3b86:	ef 92       	push	r14
    3b88:	ff 92       	push	r15
    3b8a:	0f 93       	push	r16
    3b8c:	1f 93       	push	r17
    3b8e:	cf 93       	push	r28
    3b90:	df 93       	push	r29
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
    3b96:	27 97       	sbiw	r28, 0x07	; 7
    3b98:	cd bf       	out	0x3d, r28	; 61
    3b9a:	de bf       	out	0x3e, r29	; 62
    3b9c:	7c 01       	movw	r14, r24
    3b9e:	fb 01       	movw	r30, r22
    3ba0:	84 81       	ldd	r24, Z+4	; 0x04
    3ba2:	8d 83       	std	Y+5, r24	; 0x05
    3ba4:	85 81       	ldd	r24, Z+5	; 0x05
    3ba6:	8e 83       	std	Y+6, r24	; 0x06
    3ba8:	86 81       	ldd	r24, Z+6	; 0x06
    3baa:	8f 83       	std	Y+7, r24	; 0x07
    3bac:	40 81       	ld	r20, Z
    3bae:	51 81       	ldd	r21, Z+1	; 0x01
    3bb0:	62 81       	ldd	r22, Z+2	; 0x02
    3bb2:	73 81       	ldd	r23, Z+3	; 0x03
    3bb4:	49 83       	std	Y+1, r20	; 0x01
    3bb6:	5a 83       	std	Y+2, r21	; 0x02
    3bb8:	6b 83       	std	Y+3, r22	; 0x03
    3bba:	7c 83       	std	Y+4, r23	; 0x04
    3bbc:	87 01       	movw	r16, r14
    3bbe:	80 ea       	ldi	r24, 0xA0	; 160
    3bc0:	e8 16       	cp	r14, r24
    3bc2:	88 e0       	ldi	r24, 0x08	; 8
    3bc4:	f8 06       	cpc	r15, r24
    3bc6:	29 f4       	brne	.+10     	; 0x3bd2 <usart_serial_init+0x4c>
    3bc8:	60 e1       	ldi	r22, 0x10	; 16
    3bca:	83 e0       	ldi	r24, 0x03	; 3
    3bcc:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
    3bd0:	14 c0       	rjmp	.+40     	; 0x3bfa <usart_serial_init+0x74>
    3bd2:	80 eb       	ldi	r24, 0xB0	; 176
    3bd4:	e8 16       	cp	r14, r24
    3bd6:	88 e0       	ldi	r24, 0x08	; 8
    3bd8:	f8 06       	cpc	r15, r24
    3bda:	29 f4       	brne	.+10     	; 0x3be6 <usart_serial_init+0x60>
    3bdc:	60 e2       	ldi	r22, 0x20	; 32
    3bde:	83 e0       	ldi	r24, 0x03	; 3
    3be0:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
    3be4:	13 c0       	rjmp	.+38     	; 0x3c0c <usart_serial_init+0x86>
    3be6:	80 ea       	ldi	r24, 0xA0	; 160
    3be8:	e8 16       	cp	r14, r24
    3bea:	89 e0       	ldi	r24, 0x09	; 9
    3bec:	f8 06       	cpc	r15, r24
    3bee:	29 f4       	brne	.+10     	; 0x3bfa <usart_serial_init+0x74>
    3bf0:	60 e1       	ldi	r22, 0x10	; 16
    3bf2:	84 e0       	ldi	r24, 0x04	; 4
    3bf4:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
    3bf8:	10 c0       	rjmp	.+32     	; 0x3c1a <usart_serial_init+0x94>
    3bfa:	00 3b       	cpi	r16, 0xB0	; 176
    3bfc:	89 e0       	ldi	r24, 0x09	; 9
    3bfe:	18 07       	cpc	r17, r24
    3c00:	29 f4       	brne	.+10     	; 0x3c0c <usart_serial_init+0x86>
    3c02:	60 e2       	ldi	r22, 0x20	; 32
    3c04:	84 e0       	ldi	r24, 0x04	; 4
    3c06:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
    3c0a:	07 c0       	rjmp	.+14     	; 0x3c1a <usart_serial_init+0x94>
    3c0c:	00 3a       	cpi	r16, 0xA0	; 160
    3c0e:	1a 40       	sbci	r17, 0x0A	; 10
    3c10:	21 f4       	brne	.+8      	; 0x3c1a <usart_serial_init+0x94>
    3c12:	60 e1       	ldi	r22, 0x10	; 16
    3c14:	85 e0       	ldi	r24, 0x05	; 5
    3c16:	0e 94 a7 12 	call	0x254e	; 0x254e <sysclk_enable_module>
    3c1a:	be 01       	movw	r22, r28
    3c1c:	6f 5f       	subi	r22, 0xFF	; 255
    3c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c20:	c7 01       	movw	r24, r14
    3c22:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <usart_init_rs232>
    3c26:	27 96       	adiw	r28, 0x07	; 7
    3c28:	cd bf       	out	0x3d, r28	; 61
    3c2a:	de bf       	out	0x3e, r29	; 62
    3c2c:	df 91       	pop	r29
    3c2e:	cf 91       	pop	r28
    3c30:	1f 91       	pop	r17
    3c32:	0f 91       	pop	r16
    3c34:	ff 90       	pop	r15
    3c36:	ef 90       	pop	r14
    3c38:	08 95       	ret

00003c3a <dwt_show_sys_info>:
    3c3a:	4f 92       	push	r4
    3c3c:	5f 92       	push	r5
    3c3e:	6f 92       	push	r6
    3c40:	7f 92       	push	r7
    3c42:	8f 92       	push	r8
    3c44:	9f 92       	push	r9
    3c46:	af 92       	push	r10
    3c48:	bf 92       	push	r11
    3c4a:	cf 92       	push	r12
    3c4c:	df 92       	push	r13
    3c4e:	ef 92       	push	r14
    3c50:	ff 92       	push	r15
    3c52:	0f 93       	push	r16
    3c54:	1f 93       	push	r17
    3c56:	cf 93       	push	r28
    3c58:	df 93       	push	r29
    3c5a:	cd b7       	in	r28, 0x3d	; 61
    3c5c:	de b7       	in	r29, 0x3e	; 62
    3c5e:	aa 97       	sbiw	r28, 0x2a	; 42
    3c60:	cd bf       	out	0x3d, r28	; 61
    3c62:	de bf       	out	0x3e, r29	; 62
    3c64:	0e 94 bc 13 	call	0x2778	; 0x2778 <dwt_readdevid>
    3c68:	4b 01       	movw	r8, r22
    3c6a:	5c 01       	movw	r10, r24
    3c6c:	0e 94 de 12 	call	0x25bc	; 0x25bc <dwt_getpartid>
    3c70:	6b 01       	movw	r12, r22
    3c72:	7c 01       	movw	r14, r24
    3c74:	ce 01       	movw	r24, r28
    3c76:	01 96       	adiw	r24, 0x01	; 1
    3c78:	0e 94 92 14 	call	0x2924	; 0x2924 <dwt_geteui>
    3c7c:	8e 01       	movw	r16, r28
    3c7e:	0f 5f       	subi	r16, 0xFF	; 255
    3c80:	1f 4f       	sbci	r17, 0xFF	; 255
    3c82:	24 e0       	ldi	r18, 0x04	; 4
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	40 e0       	ldi	r20, 0x00	; 0
    3c88:	50 e0       	ldi	r21, 0x00	; 0
    3c8a:	60 e0       	ldi	r22, 0x00	; 0
    3c8c:	70 e0       	ldi	r23, 0x00	; 0
    3c8e:	83 e0       	ldi	r24, 0x03	; 3
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	0e 94 32 13 	call	0x2664	; 0x2664 <dwt_readfromdevice>
    3c96:	60 e0       	ldi	r22, 0x00	; 0
    3c98:	70 e0       	ldi	r23, 0x00	; 0
    3c9a:	84 e0       	ldi	r24, 0x04	; 4
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	0e 94 8c 13 	call	0x2718	; 0x2718 <dwt_read32bitoffsetreg>
    3ca2:	6b 8f       	std	Y+27, r22	; 0x1b
    3ca4:	7c 8f       	std	Y+28, r23	; 0x1c
    3ca6:	8d 8f       	std	Y+29, r24	; 0x1d
    3ca8:	9e 8f       	std	Y+30, r25	; 0x1e
    3caa:	08 5f       	subi	r16, 0xF8	; 248
    3cac:	1f 4f       	sbci	r17, 0xFF	; 255
    3cae:	25 e0       	ldi	r18, 0x05	; 5
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	40 e0       	ldi	r20, 0x00	; 0
    3cb4:	50 e0       	ldi	r21, 0x00	; 0
    3cb6:	60 e0       	ldi	r22, 0x00	; 0
    3cb8:	70 e0       	ldi	r23, 0x00	; 0
    3cba:	88 e0       	ldi	r24, 0x08	; 8
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	0e 94 32 13 	call	0x2664	; 0x2664 <dwt_readfromdevice>
    3cc2:	60 e0       	ldi	r22, 0x00	; 0
    3cc4:	70 e0       	ldi	r23, 0x00	; 0
    3cc6:	8d e0       	ldi	r24, 0x0D	; 13
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	0e 94 8c 13 	call	0x2718	; 0x2718 <dwt_read32bitoffsetreg>
    3cce:	6f 8f       	std	Y+31, r22	; 0x1f
    3cd0:	78 a3       	std	Y+32, r23	; 0x20
    3cd2:	89 a3       	std	Y+33, r24	; 0x21
    3cd4:	9a a3       	std	Y+34, r25	; 0x22
    3cd6:	60 e0       	ldi	r22, 0x00	; 0
    3cd8:	70 e0       	ldi	r23, 0x00	; 0
    3cda:	8e e0       	ldi	r24, 0x0E	; 14
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	0e 94 8c 13 	call	0x2718	; 0x2718 <dwt_read32bitoffsetreg>
    3ce2:	6b a3       	std	Y+35, r22	; 0x23
    3ce4:	7c a3       	std	Y+36, r23	; 0x24
    3ce6:	8d a3       	std	Y+37, r24	; 0x25
    3ce8:	9e a3       	std	Y+38, r25	; 0x26
    3cea:	0b 5f       	subi	r16, 0xFB	; 251
    3cec:	1f 4f       	sbci	r17, 0xFF	; 255
    3cee:	25 e0       	ldi	r18, 0x05	; 5
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	40 e0       	ldi	r20, 0x00	; 0
    3cf4:	50 e0       	ldi	r21, 0x00	; 0
    3cf6:	60 e0       	ldi	r22, 0x00	; 0
    3cf8:	70 e0       	ldi	r23, 0x00	; 0
    3cfa:	8f e0       	ldi	r24, 0x0F	; 15
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	0e 94 32 13 	call	0x2664	; 0x2664 <dwt_readfromdevice>
    3d02:	60 e0       	ldi	r22, 0x00	; 0
    3d04:	70 e0       	ldi	r23, 0x00	; 0
    3d06:	80 e1       	ldi	r24, 0x10	; 16
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	0e 94 8c 13 	call	0x2718	; 0x2718 <dwt_read32bitoffsetreg>
    3d0e:	6f a3       	std	Y+39, r22	; 0x27
    3d10:	78 a7       	std	Y+40, r23	; 0x28
    3d12:	89 a7       	std	Y+41, r24	; 0x29
    3d14:	9a a7       	std	Y+42, r25	; 0x2a
    3d16:	0b 5f       	subi	r16, 0xFB	; 251
    3d18:	1f 4f       	sbci	r17, 0xFF	; 255
    3d1a:	28 e0       	ldi	r18, 0x08	; 8
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	40 e0       	ldi	r20, 0x00	; 0
    3d20:	50 e0       	ldi	r21, 0x00	; 0
    3d22:	60 e0       	ldi	r22, 0x00	; 0
    3d24:	70 e0       	ldi	r23, 0x00	; 0
    3d26:	82 e1       	ldi	r24, 0x12	; 18
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	0e 94 32 13 	call	0x2664	; 0x2664 <dwt_readfromdevice>
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	70 e0       	ldi	r23, 0x00	; 0
    3d32:	8f e1       	ldi	r24, 0x1F	; 31
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	0e 94 8c 13 	call	0x2718	; 0x2718 <dwt_read32bitoffsetreg>
    3d3a:	2b 01       	movw	r4, r22
    3d3c:	3c 01       	movw	r6, r24
    3d3e:	83 ec       	ldi	r24, 0xC3	; 195
    3d40:	91 e2       	ldi	r25, 0x21	; 33
    3d42:	46 d7       	rcall	.+3724   	; 0x4bd0 <puts>
    3d44:	8f ee       	ldi	r24, 0xEF	; 239
    3d46:	91 e2       	ldi	r25, 0x21	; 33
    3d48:	43 d7       	rcall	.+3718   	; 0x4bd0 <puts>
    3d4a:	9f 92       	push	r9
    3d4c:	8f 92       	push	r8
    3d4e:	45 01       	movw	r8, r10
    3d50:	aa 24       	eor	r10, r10
    3d52:	bb 24       	eor	r11, r11
    3d54:	9f 92       	push	r9
    3d56:	8f 92       	push	r8
    3d58:	8c ef       	ldi	r24, 0xFC	; 252
    3d5a:	91 e2       	ldi	r25, 0x21	; 33
    3d5c:	9f 93       	push	r25
    3d5e:	8f 93       	push	r24
    3d60:	26 d7       	rcall	.+3660   	; 0x4bae <printf>
    3d62:	df 92       	push	r13
    3d64:	cf 92       	push	r12
    3d66:	67 01       	movw	r12, r14
    3d68:	ee 24       	eor	r14, r14
    3d6a:	ff 24       	eor	r15, r15
    3d6c:	df 92       	push	r13
    3d6e:	cf 92       	push	r12
    3d70:	84 e1       	ldi	r24, 0x14	; 20
    3d72:	92 e2       	ldi	r25, 0x22	; 34
    3d74:	9f 93       	push	r25
    3d76:	8f 93       	push	r24
    3d78:	1a d7       	rcall	.+3636   	; 0x4bae <printf>
    3d7a:	89 81       	ldd	r24, Y+1	; 0x01
    3d7c:	1f 92       	push	r1
    3d7e:	8f 93       	push	r24
    3d80:	8a 81       	ldd	r24, Y+2	; 0x02
    3d82:	1f 92       	push	r1
    3d84:	8f 93       	push	r24
    3d86:	8b 81       	ldd	r24, Y+3	; 0x03
    3d88:	1f 92       	push	r1
    3d8a:	8f 93       	push	r24
    3d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d8e:	1f 92       	push	r1
    3d90:	8f 93       	push	r24
    3d92:	8d 81       	ldd	r24, Y+5	; 0x05
    3d94:	1f 92       	push	r1
    3d96:	8f 93       	push	r24
    3d98:	8e 81       	ldd	r24, Y+6	; 0x06
    3d9a:	1f 92       	push	r1
    3d9c:	8f 93       	push	r24
    3d9e:	8f 81       	ldd	r24, Y+7	; 0x07
    3da0:	1f 92       	push	r1
    3da2:	8f 93       	push	r24
    3da4:	88 85       	ldd	r24, Y+8	; 0x08
    3da6:	1f 92       	push	r1
    3da8:	8f 93       	push	r24
    3daa:	8c e2       	ldi	r24, 0x2C	; 44
    3dac:	92 e2       	ldi	r25, 0x22	; 34
    3dae:	9f 93       	push	r25
    3db0:	8f 93       	push	r24
    3db2:	fd d6       	rcall	.+3578   	; 0x4bae <printf>
    3db4:	1f 92       	push	r1
    3db6:	1f 92       	push	r1
    3db8:	1f 92       	push	r1
    3dba:	1f 92       	push	r1
    3dbc:	1f 92       	push	r1
    3dbe:	1f 92       	push	r1
    3dc0:	1f 92       	push	r1
    3dc2:	1f 92       	push	r1
    3dc4:	82 e6       	ldi	r24, 0x62	; 98
    3dc6:	92 e2       	ldi	r25, 0x22	; 34
    3dc8:	9f 93       	push	r25
    3dca:	8f 93       	push	r24
    3dcc:	f0 d6       	rcall	.+3552   	; 0x4bae <printf>
    3dce:	cd bf       	out	0x3d, r28	; 61
    3dd0:	de bf       	out	0x3e, r29	; 62
    3dd2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3dd4:	3f 93       	push	r19
    3dd6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3dd8:	4f 93       	push	r20
    3dda:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3ddc:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3dde:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3de0:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3de2:	ca 01       	movw	r24, r20
    3de4:	aa 27       	eor	r26, r26
    3de6:	bb 27       	eor	r27, r27
    3de8:	9f 93       	push	r25
    3dea:	8f 93       	push	r24
    3dec:	84 e8       	ldi	r24, 0x84	; 132
    3dee:	92 e2       	ldi	r25, 0x22	; 34
    3df0:	9f 93       	push	r25
    3df2:	8f 93       	push	r24
    3df4:	dc d6       	rcall	.+3512   	; 0x4bae <printf>
    3df6:	89 85       	ldd	r24, Y+9	; 0x09
    3df8:	1f 92       	push	r1
    3dfa:	8f 93       	push	r24
    3dfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dfe:	1f 92       	push	r1
    3e00:	8f 93       	push	r24
    3e02:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e04:	1f 92       	push	r1
    3e06:	8f 93       	push	r24
    3e08:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e0a:	1f 92       	push	r1
    3e0c:	8f 93       	push	r24
    3e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e10:	1f 92       	push	r1
    3e12:	8f 93       	push	r24
    3e14:	8c e9       	ldi	r24, 0x9C	; 156
    3e16:	92 e2       	ldi	r25, 0x22	; 34
    3e18:	9f 93       	push	r25
    3e1a:	8f 93       	push	r24
    3e1c:	c8 d6       	rcall	.+3472   	; 0x4bae <printf>
    3e1e:	38 a1       	ldd	r19, Y+32	; 0x20
    3e20:	3f 93       	push	r19
    3e22:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3e24:	4f 93       	push	r20
    3e26:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3e28:	38 a1       	ldd	r19, Y+32	; 0x20
    3e2a:	49 a1       	ldd	r20, Y+33	; 0x21
    3e2c:	5a a1       	ldd	r21, Y+34	; 0x22
    3e2e:	ca 01       	movw	r24, r20
    3e30:	aa 27       	eor	r26, r26
    3e32:	bb 27       	eor	r27, r27
    3e34:	9f 93       	push	r25
    3e36:	8f 93       	push	r24
    3e38:	83 ec       	ldi	r24, 0xC3	; 195
    3e3a:	92 e2       	ldi	r25, 0x22	; 34
    3e3c:	9f 93       	push	r25
    3e3e:	8f 93       	push	r24
    3e40:	b6 d6       	rcall	.+3436   	; 0x4bae <printf>
    3e42:	3c a1       	ldd	r19, Y+36	; 0x24
    3e44:	3f 93       	push	r19
    3e46:	4b a1       	ldd	r20, Y+35	; 0x23
    3e48:	4f 93       	push	r20
    3e4a:	2b a1       	ldd	r18, Y+35	; 0x23
    3e4c:	3c a1       	ldd	r19, Y+36	; 0x24
    3e4e:	4d a1       	ldd	r20, Y+37	; 0x25
    3e50:	5e a1       	ldd	r21, Y+38	; 0x26
    3e52:	ca 01       	movw	r24, r20
    3e54:	aa 27       	eor	r26, r26
    3e56:	bb 27       	eor	r27, r27
    3e58:	9f 93       	push	r25
    3e5a:	8f 93       	push	r24
    3e5c:	8b ed       	ldi	r24, 0xDB	; 219
    3e5e:	92 e2       	ldi	r25, 0x22	; 34
    3e60:	9f 93       	push	r25
    3e62:	8f 93       	push	r24
    3e64:	a4 d6       	rcall	.+3400   	; 0x4bae <printf>
    3e66:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e68:	1f 92       	push	r1
    3e6a:	8f 93       	push	r24
    3e6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e6e:	1f 92       	push	r1
    3e70:	8f 93       	push	r24
    3e72:	88 89       	ldd	r24, Y+16	; 0x10
    3e74:	1f 92       	push	r1
    3e76:	8f 93       	push	r24
    3e78:	89 89       	ldd	r24, Y+17	; 0x11
    3e7a:	1f 92       	push	r1
    3e7c:	8f 93       	push	r24
    3e7e:	8a 89       	ldd	r24, Y+18	; 0x12
    3e80:	1f 92       	push	r1
    3e82:	8f 93       	push	r24
    3e84:	83 ef       	ldi	r24, 0xF3	; 243
    3e86:	92 e2       	ldi	r25, 0x22	; 34
    3e88:	9f 93       	push	r25
    3e8a:	8f 93       	push	r24
    3e8c:	90 d6       	rcall	.+3360   	; 0x4bae <printf>
    3e8e:	cd bf       	out	0x3d, r28	; 61
    3e90:	de bf       	out	0x3e, r29	; 62
    3e92:	58 a5       	ldd	r21, Y+40	; 0x28
    3e94:	5f 93       	push	r21
    3e96:	8f a1       	ldd	r24, Y+39	; 0x27
    3e98:	8f 93       	push	r24
    3e9a:	2f a1       	ldd	r18, Y+39	; 0x27
    3e9c:	38 a5       	ldd	r19, Y+40	; 0x28
    3e9e:	49 a5       	ldd	r20, Y+41	; 0x29
    3ea0:	5a a5       	ldd	r21, Y+42	; 0x2a
    3ea2:	ca 01       	movw	r24, r20
    3ea4:	aa 27       	eor	r26, r26
    3ea6:	bb 27       	eor	r27, r27
    3ea8:	9f 93       	push	r25
    3eaa:	8f 93       	push	r24
    3eac:	8a e1       	ldi	r24, 0x1A	; 26
    3eae:	93 e2       	ldi	r25, 0x23	; 35
    3eb0:	9f 93       	push	r25
    3eb2:	8f 93       	push	r24
    3eb4:	7c d6       	rcall	.+3320   	; 0x4bae <printf>
    3eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    3eb8:	1f 92       	push	r1
    3eba:	8f 93       	push	r24
    3ebc:	8c 89       	ldd	r24, Y+20	; 0x14
    3ebe:	1f 92       	push	r1
    3ec0:	8f 93       	push	r24
    3ec2:	8d 89       	ldd	r24, Y+21	; 0x15
    3ec4:	1f 92       	push	r1
    3ec6:	8f 93       	push	r24
    3ec8:	8e 89       	ldd	r24, Y+22	; 0x16
    3eca:	1f 92       	push	r1
    3ecc:	8f 93       	push	r24
    3ece:	8f 89       	ldd	r24, Y+23	; 0x17
    3ed0:	1f 92       	push	r1
    3ed2:	8f 93       	push	r24
    3ed4:	88 8d       	ldd	r24, Y+24	; 0x18
    3ed6:	1f 92       	push	r1
    3ed8:	8f 93       	push	r24
    3eda:	89 8d       	ldd	r24, Y+25	; 0x19
    3edc:	1f 92       	push	r1
    3ede:	8f 93       	push	r24
    3ee0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3ee2:	1f 92       	push	r1
    3ee4:	8f 93       	push	r24
    3ee6:	82 e3       	ldi	r24, 0x32	; 50
    3ee8:	93 e2       	ldi	r25, 0x23	; 35
    3eea:	9f 93       	push	r25
    3eec:	8f 93       	push	r24
    3eee:	5f d6       	rcall	.+3262   	; 0x4bae <printf>
    3ef0:	5f 92       	push	r5
    3ef2:	4f 92       	push	r4
    3ef4:	23 01       	movw	r4, r6
    3ef6:	66 24       	eor	r6, r6
    3ef8:	77 24       	eor	r7, r7
    3efa:	5f 92       	push	r5
    3efc:	4f 92       	push	r4
    3efe:	88 e6       	ldi	r24, 0x68	; 104
    3f00:	93 e2       	ldi	r25, 0x23	; 35
    3f02:	9f 93       	push	r25
    3f04:	8f 93       	push	r24
    3f06:	53 d6       	rcall	.+3238   	; 0x4bae <printf>
    3f08:	83 ec       	ldi	r24, 0xC3	; 195
    3f0a:	91 e2       	ldi	r25, 0x21	; 33
    3f0c:	61 d6       	rcall	.+3266   	; 0x4bd0 <puts>
    3f0e:	cd bf       	out	0x3d, r28	; 61
    3f10:	de bf       	out	0x3e, r29	; 62
    3f12:	aa 96       	adiw	r28, 0x2a	; 42
    3f14:	cd bf       	out	0x3d, r28	; 61
    3f16:	de bf       	out	0x3e, r29	; 62
    3f18:	df 91       	pop	r29
    3f1a:	cf 91       	pop	r28
    3f1c:	1f 91       	pop	r17
    3f1e:	0f 91       	pop	r16
    3f20:	ff 90       	pop	r15
    3f22:	ef 90       	pop	r14
    3f24:	df 90       	pop	r13
    3f26:	cf 90       	pop	r12
    3f28:	bf 90       	pop	r11
    3f2a:	af 90       	pop	r10
    3f2c:	9f 90       	pop	r9
    3f2e:	8f 90       	pop	r8
    3f30:	7f 90       	pop	r7
    3f32:	6f 90       	pop	r6
    3f34:	5f 90       	pop	r5
    3f36:	4f 90       	pop	r4
    3f38:	08 95       	ret

00003f3a <dwt_ds_twr_resp>:
    3f3a:	cf 93       	push	r28
    3f3c:	df 93       	push	r29
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
    3f42:	a1 97       	sbiw	r28, 0x21	; 33
    3f44:	cd bf       	out	0x3d, r28	; 61
    3f46:	de bf       	out	0x3e, r29	; 62
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	cc d9       	rcall	.-3176   	; 0x32e6 <dwt_initialise>
    3f4e:	01 96       	adiw	r24, 0x01	; 1
    3f50:	41 f4       	brne	.+16     	; 0x3f62 <dwt_ds_twr_resp+0x28>
    3f52:	80 e8       	ldi	r24, 0x80	; 128
    3f54:	93 e2       	ldi	r25, 0x23	; 35
    3f56:	9f 93       	push	r25
    3f58:	8f 93       	push	r24
    3f5a:	29 d6       	rcall	.+3154   	; 0x4bae <printf>
    3f5c:	0f 90       	pop	r0
    3f5e:	0f 90       	pop	r0
    3f60:	ff cf       	rjmp	.-2      	; 0x3f60 <dwt_ds_twr_resp+0x26>
    3f62:	e6 da       	rcall	.-2612   	; 0x3530 <fast_spi>
    3f64:	89 ee       	ldi	r24, 0xE9	; 233
    3f66:	90 e2       	ldi	r25, 0x20	; 32
    3f68:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <dwt_configure>
    3f6c:	83 e0       	ldi	r24, 0x03	; 3
    3f6e:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <dwt_setleds>
    3f72:	84 e3       	ldi	r24, 0x34	; 52
    3f74:	90 e4       	ldi	r25, 0x40	; 64
    3f76:	0e 94 23 14 	call	0x2846	; 0x2846 <dwt_setrxantennadelay>
    3f7a:	84 e3       	ldi	r24, 0x34	; 52
    3f7c:	90 e4       	ldi	r25, 0x40	; 64
    3f7e:	0e 94 2a 14 	call	0x2854	; 0x2854 <dwt_settxantennadelay>
    3f82:	88 e0       	ldi	r24, 0x08	; 8
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	6e d9       	rcall	.-3364   	; 0x3264 <dwt_setpreambledetecttimeout>
    3f88:	0f 2e       	mov	r0, r31
    3f8a:	f0 e2       	ldi	r31, 0x20	; 32
    3f8c:	2f 2e       	mov	r2, r31
    3f8e:	f6 e0       	ldi	r31, 0x06	; 6
    3f90:	3f 2e       	mov	r3, r31
    3f92:	f0 2d       	mov	r31, r0
    3f94:	12 e0       	ldi	r17, 0x02	; 2
    3f96:	0f 2e       	mov	r0, r31
    3f98:	ff ee       	ldi	r31, 0xEF	; 239
    3f9a:	6f 2e       	mov	r6, r31
    3f9c:	f6 e2       	ldi	r31, 0x26	; 38
    3f9e:	7f 2e       	mov	r7, r31
    3fa0:	f0 2d       	mov	r31, r0
    3fa2:	ae 01       	movw	r20, r28
    3fa4:	4f 5f       	subi	r20, 0xFF	; 255
    3fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    3fa8:	4a 01       	movw	r8, r20
    3faa:	0f 2e       	mov	r0, r31
    3fac:	f0 ed       	ldi	r31, 0xD0	; 208
    3fae:	4f 2e       	mov	r4, r31
    3fb0:	f0 e2       	ldi	r31, 0x20	; 32
    3fb2:	5f 2e       	mov	r5, r31
    3fb4:	f0 2d       	mov	r31, r0
    3fb6:	0f 2e       	mov	r0, r31
    3fb8:	a1 2c       	mov	r10, r1
    3fba:	f6 e0       	ldi	r31, 0x06	; 6
    3fbc:	bf 2e       	mov	r11, r31
    3fbe:	f0 2d       	mov	r31, r0
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	0f d9       	rcall	.-3554   	; 0x31e4 <dwt_setrxtimeout>
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	d1 d8       	rcall	.-3678   	; 0x316e <dwt_rxenable>
    3fcc:	03 c0       	rjmp	.+6      	; 0x3fd4 <dwt_ds_twr_resp+0x9a>
    3fce:	d1 01       	movw	r26, r2
    3fd0:	17 96       	adiw	r26, 0x07	; 7
    3fd2:	1c 93       	st	X, r17
    3fd4:	60 e0       	ldi	r22, 0x00	; 0
    3fd6:	70 e0       	ldi	r23, 0x00	; 0
    3fd8:	8f e0       	ldi	r24, 0x0F	; 15
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	0e 94 8c 13 	call	0x2718	; 0x2718 <dwt_read32bitoffsetreg>
    3fe0:	60 93 e9 26 	sts	0x26E9, r22
    3fe4:	70 93 ea 26 	sts	0x26EA, r23
    3fe8:	80 93 eb 26 	sts	0x26EB, r24
    3fec:	90 93 ec 26 	sts	0x26EC, r25
    3ff0:	6b 01       	movw	r12, r22
    3ff2:	7c 01       	movw	r14, r24
    3ff4:	cc 24       	eor	r12, r12
    3ff6:	b0 ed       	ldi	r27, 0xD0	; 208
    3ff8:	db 22       	and	r13, r27
    3ffa:	b7 e2       	ldi	r27, 0x27	; 39
    3ffc:	eb 22       	and	r14, r27
    3ffe:	b4 e2       	ldi	r27, 0x24	; 36
    4000:	fb 22       	and	r15, r27
    4002:	cd 28       	or	r12, r13
    4004:	ce 28       	or	r12, r14
    4006:	cf 28       	or	r12, r15
    4008:	11 f3       	breq	.-60     	; 0x3fce <dwt_ds_twr_resp+0x94>
    400a:	76 ff       	sbrs	r23, 6
    400c:	55 c2       	rjmp	.+1194   	; 0x44b8 <dwt_ds_twr_resp+0x57e>
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	30 e4       	ldi	r19, 0x40	; 64
    4012:	40 e0       	ldi	r20, 0x00	; 0
    4014:	50 e0       	ldi	r21, 0x00	; 0
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	70 e0       	ldi	r23, 0x00	; 0
    401a:	8f e0       	ldi	r24, 0x0F	; 15
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	0e 94 31 14 	call	0x2862	; 0x2862 <dwt_write32bitoffsetreg>
    4022:	60 e0       	ldi	r22, 0x00	; 0
    4024:	70 e0       	ldi	r23, 0x00	; 0
    4026:	80 e1       	ldi	r24, 0x10	; 16
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	0e 94 8c 13 	call	0x2718	; 0x2718 <dwt_read32bitoffsetreg>
    402e:	73 70       	andi	r23, 0x03	; 3
    4030:	88 27       	eor	r24, r24
    4032:	99 27       	eor	r25, r25
    4034:	40 e0       	ldi	r20, 0x00	; 0
    4036:	50 e0       	ldi	r21, 0x00	; 0
    4038:	8d ee       	ldi	r24, 0xED	; 237
    403a:	96 e2       	ldi	r25, 0x26	; 38
    403c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <dwt_readrxdata>
    4040:	8d ee       	ldi	r24, 0xED	; 237
    4042:	96 e2       	ldi	r25, 0x26	; 38
    4044:	c5 d5       	rcall	.+2954   	; 0x4bd0 <puts>
    4046:	f3 01       	movw	r30, r6
    4048:	10 82       	st	Z, r1
    404a:	8c e8       	ldi	r24, 0x8C	; 140
    404c:	93 e2       	ldi	r25, 0x23	; 35
    404e:	c0 d5       	rcall	.+2944   	; 0x4bd0 <puts>
    4050:	4a e0       	ldi	r20, 0x0A	; 10
    4052:	50 e0       	ldi	r21, 0x00	; 0
    4054:	6d ed       	ldi	r22, 0xDD	; 221
    4056:	70 e2       	ldi	r23, 0x20	; 32
    4058:	8d ee       	ldi	r24, 0xED	; 237
    405a:	96 e2       	ldi	r25, 0x26	; 38
    405c:	92 d5       	rcall	.+2852   	; 0x4b82 <memcmp>
    405e:	89 2b       	or	r24, r25
    4060:	09 f0       	breq	.+2      	; 0x4064 <dwt_ds_twr_resp+0x12a>
    4062:	ae cf       	rjmp	.-164    	; 0x3fc0 <dwt_ds_twr_resp+0x86>
    4064:	83 e9       	ldi	r24, 0x93	; 147
    4066:	93 e2       	ldi	r25, 0x23	; 35
    4068:	b3 d5       	rcall	.+2918   	; 0x4bd0 <puts>
    406a:	c4 01       	movw	r24, r8
    406c:	0e 94 7d 13 	call	0x26fa	; 0x26fa <dwt_readrxtimestamp>
    4070:	fe 01       	movw	r30, r28
    4072:	36 96       	adiw	r30, 0x06	; 6
    4074:	d4 01       	movw	r26, r8
    4076:	20 e0       	ldi	r18, 0x00	; 0
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	40 e0       	ldi	r20, 0x00	; 0
    407c:	50 e0       	ldi	r21, 0x00	; 0
    407e:	60 e0       	ldi	r22, 0x00	; 0
    4080:	70 e0       	ldi	r23, 0x00	; 0
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	08 e0       	ldi	r16, 0x08	; 8
    4088:	36 d5       	rcall	.+2668   	; 0x4af6 <__ashldi3>
    408a:	02 91       	ld	r16, -Z
    408c:	20 2b       	or	r18, r16
    408e:	ea 17       	cp	r30, r26
    4090:	fb 07       	cpc	r31, r27
    4092:	c9 f7       	brne	.-14     	; 0x4086 <dwt_ds_twr_resp+0x14c>
    4094:	20 93 e1 26 	sts	0x26E1, r18
    4098:	30 93 e2 26 	sts	0x26E2, r19
    409c:	40 93 e3 26 	sts	0x26E3, r20
    40a0:	50 93 e4 26 	sts	0x26E4, r21
    40a4:	60 93 e5 26 	sts	0x26E5, r22
    40a8:	70 93 e6 26 	sts	0x26E6, r23
    40ac:	80 93 e7 26 	sts	0x26E7, r24
    40b0:	90 93 e8 26 	sts	0x26E8, r25
    40b4:	44 5c       	subi	r20, 0xC4	; 196
    40b6:	50 4f       	sbci	r21, 0xF0	; 240
    40b8:	6f 4f       	sbci	r22, 0xFF	; 255
    40ba:	7f 4f       	sbci	r23, 0xFF	; 255
    40bc:	8f 4f       	sbci	r24, 0xFF	; 255
    40be:	9f 4f       	sbci	r25, 0xFF	; 255
    40c0:	08 e0       	ldi	r16, 0x08	; 8
    40c2:	34 d5       	rcall	.+2664   	; 0x4b2c <__lshrdi3>
    40c4:	d5 2e       	mov	r13, r21
    40c6:	02 2f       	mov	r16, r18
    40c8:	f3 2e       	mov	r15, r19
    40ca:	e4 2e       	mov	r14, r20
    40cc:	62 2f       	mov	r22, r18
    40ce:	7f 2d       	mov	r23, r15
    40d0:	8e 2d       	mov	r24, r14
    40d2:	9d 2d       	mov	r25, r13
    40d4:	0e 94 16 18 	call	0x302c	; 0x302c <dwt_setdelayedtrxtime>
    40d8:	20 91 e1 26 	lds	r18, 0x26E1
    40dc:	30 91 e2 26 	lds	r19, 0x26E2
    40e0:	40 91 e3 26 	lds	r20, 0x26E3
    40e4:	50 91 e4 26 	lds	r21, 0x26E4
    40e8:	60 91 e5 26 	lds	r22, 0x26E5
    40ec:	70 91 e6 26 	lds	r23, 0x26E6
    40f0:	df 92       	push	r13
    40f2:	ef 92       	push	r14
    40f4:	ff 92       	push	r15
    40f6:	0f 93       	push	r16
    40f8:	1f 92       	push	r1
    40fa:	1f 92       	push	r1
    40fc:	1f 92       	push	r1
    40fe:	1f 92       	push	r1
    4100:	5f 93       	push	r21
    4102:	4f 93       	push	r20
    4104:	3f 93       	push	r19
    4106:	2f 93       	push	r18
    4108:	80 91 e7 26 	lds	r24, 0x26E7
    410c:	90 91 e8 26 	lds	r25, 0x26E8
    4110:	00 e2       	ldi	r16, 0x20	; 32
    4112:	0c d5       	rcall	.+2584   	; 0x4b2c <__lshrdi3>
    4114:	5f 93       	push	r21
    4116:	4f 93       	push	r20
    4118:	3f 93       	push	r19
    411a:	2f 93       	push	r18
    411c:	aa e9       	ldi	r26, 0x9A	; 154
    411e:	b3 e2       	ldi	r27, 0x23	; 35
    4120:	bf 93       	push	r27
    4122:	af 93       	push	r26
    4124:	44 d5       	rcall	.+2696   	; 0x4bae <printf>
    4126:	64 ef       	ldi	r22, 0xF4	; 244
    4128:	71 e0       	ldi	r23, 0x01	; 1
    412a:	80 e0       	ldi	r24, 0x00	; 0
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	0e 94 19 17 	call	0x2e32	; 0x2e32 <dwt_setrxaftertxdelay>
    4132:	84 ee       	ldi	r24, 0xE4	; 228
    4134:	9c e0       	ldi	r25, 0x0C	; 12
    4136:	56 d8       	rcall	.-3924   	; 0x31e4 <dwt_setrxtimeout>
    4138:	80 91 05 27 	lds	r24, 0x2705
    413c:	d2 01       	movw	r26, r4
    413e:	8c 93       	st	X, r24
    4140:	40 e0       	ldi	r20, 0x00	; 0
    4142:	50 e0       	ldi	r21, 0x00	; 0
    4144:	6e ec       	ldi	r22, 0xCE	; 206
    4146:	70 e2       	ldi	r23, 0x20	; 32
    4148:	8f e0       	ldi	r24, 0x0F	; 15
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	0e 94 17 13 	call	0x262e	; 0x262e <dwt_writetxdata>
    4150:	41 e0       	ldi	r20, 0x01	; 1
    4152:	50 e0       	ldi	r21, 0x00	; 0
    4154:	60 e0       	ldi	r22, 0x00	; 0
    4156:	70 e0       	ldi	r23, 0x00	; 0
    4158:	8f e0       	ldi	r24, 0x0F	; 15
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	0e 94 4d 14 	call	0x289a	; 0x289a <dwt_writetxfctrl>
    4160:	83 e0       	ldi	r24, 0x03	; 3
    4162:	0e 94 1e 18 	call	0x303c	; 0x303c <dwt_starttx>
    4166:	cd bf       	out	0x3d, r28	; 61
    4168:	de bf       	out	0x3e, r29	; 62
    416a:	01 96       	adiw	r24, 0x01	; 1
    416c:	11 f0       	breq	.+4      	; 0x4172 <dwt_ds_twr_resp+0x238>
    416e:	00 e4       	ldi	r16, 0x40	; 64
    4170:	07 c0       	rjmp	.+14     	; 0x4180 <dwt_ds_twr_resp+0x246>
    4172:	8d ea       	ldi	r24, 0xAD	; 173
    4174:	93 e2       	ldi	r25, 0x23	; 35
    4176:	2c d5       	rcall	.+2648   	; 0x4bd0 <puts>
    4178:	23 cf       	rjmp	.-442    	; 0x3fc0 <dwt_ds_twr_resp+0x86>
    417a:	d5 01       	movw	r26, r10
    417c:	17 96       	adiw	r26, 0x07	; 7
    417e:	0c 93       	st	X, r16
    4180:	60 e0       	ldi	r22, 0x00	; 0
    4182:	70 e0       	ldi	r23, 0x00	; 0
    4184:	8f e0       	ldi	r24, 0x0F	; 15
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	0e 94 8c 13 	call	0x2718	; 0x2718 <dwt_read32bitoffsetreg>
    418c:	60 93 e9 26 	sts	0x26E9, r22
    4190:	70 93 ea 26 	sts	0x26EA, r23
    4194:	80 93 eb 26 	sts	0x26EB, r24
    4198:	90 93 ec 26 	sts	0x26EC, r25
    419c:	dc 01       	movw	r26, r24
    419e:	cb 01       	movw	r24, r22
    41a0:	88 27       	eor	r24, r24
    41a2:	90 7d       	andi	r25, 0xD0	; 208
    41a4:	a7 72       	andi	r26, 0x27	; 39
    41a6:	b4 72       	andi	r27, 0x24	; 36
    41a8:	89 2b       	or	r24, r25
    41aa:	8a 2b       	or	r24, r26
    41ac:	8b 2b       	or	r24, r27
    41ae:	29 f3       	breq	.-54     	; 0x417a <dwt_ds_twr_resp+0x240>
    41b0:	87 eb       	ldi	r24, 0xB7	; 183
    41b2:	93 e2       	ldi	r25, 0x23	; 35
    41b4:	0d d5       	rcall	.+2586   	; 0x4bd0 <puts>
    41b6:	80 91 05 27 	lds	r24, 0x2705
    41ba:	8f 5f       	subi	r24, 0xFF	; 255
    41bc:	80 93 05 27 	sts	0x2705, r24
    41c0:	80 91 e9 26 	lds	r24, 0x26E9
    41c4:	90 91 ea 26 	lds	r25, 0x26EA
    41c8:	a0 91 eb 26 	lds	r26, 0x26EB
    41cc:	b0 91 ec 26 	lds	r27, 0x26EC
    41d0:	96 ff       	sbrs	r25, 6
    41d2:	62 c1       	rjmp	.+708    	; 0x4498 <dwt_ds_twr_resp+0x55e>
    41d4:	8e eb       	ldi	r24, 0xBE	; 190
    41d6:	93 e2       	ldi	r25, 0x23	; 35
    41d8:	fb d4       	rcall	.+2550   	; 0x4bd0 <puts>
    41da:	80 e8       	ldi	r24, 0x80	; 128
    41dc:	f5 01       	movw	r30, r10
    41de:	87 83       	std	Z+7, r24	; 0x07
    41e0:	20 e8       	ldi	r18, 0x80	; 128
    41e2:	30 e4       	ldi	r19, 0x40	; 64
    41e4:	40 e0       	ldi	r20, 0x00	; 0
    41e6:	50 e0       	ldi	r21, 0x00	; 0
    41e8:	60 e0       	ldi	r22, 0x00	; 0
    41ea:	70 e0       	ldi	r23, 0x00	; 0
    41ec:	8f e0       	ldi	r24, 0x0F	; 15
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	0e 94 31 14 	call	0x2862	; 0x2862 <dwt_write32bitoffsetreg>
    41f4:	60 e0       	ldi	r22, 0x00	; 0
    41f6:	70 e0       	ldi	r23, 0x00	; 0
    41f8:	80 e1       	ldi	r24, 0x10	; 16
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	0e 94 8c 13 	call	0x2718	; 0x2718 <dwt_read32bitoffsetreg>
    4200:	6f 77       	andi	r22, 0x7F	; 127
    4202:	77 27       	eor	r23, r23
    4204:	88 27       	eor	r24, r24
    4206:	99 27       	eor	r25, r25
    4208:	69 31       	cpi	r22, 0x19	; 25
    420a:	71 05       	cpc	r23, r1
    420c:	81 05       	cpc	r24, r1
    420e:	91 05       	cpc	r25, r1
    4210:	48 f4       	brcc	.+18     	; 0x4224 <dwt_ds_twr_resp+0x2ea>
    4212:	40 e0       	ldi	r20, 0x00	; 0
    4214:	50 e0       	ldi	r21, 0x00	; 0
    4216:	8d ee       	ldi	r24, 0xED	; 237
    4218:	96 e2       	ldi	r25, 0x26	; 38
    421a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <dwt_readrxdata>
    421e:	8d ee       	ldi	r24, 0xED	; 237
    4220:	96 e2       	ldi	r25, 0x26	; 38
    4222:	d6 d4       	rcall	.+2476   	; 0x4bd0 <puts>
    4224:	d3 01       	movw	r26, r6
    4226:	1c 92       	st	X, r1
    4228:	4a e0       	ldi	r20, 0x0A	; 10
    422a:	50 e0       	ldi	r21, 0x00	; 0
    422c:	66 eb       	ldi	r22, 0xB6	; 182
    422e:	70 e2       	ldi	r23, 0x20	; 32
    4230:	8d ee       	ldi	r24, 0xED	; 237
    4232:	96 e2       	ldi	r25, 0x26	; 38
    4234:	a6 d4       	rcall	.+2380   	; 0x4b82 <memcmp>
    4236:	89 2b       	or	r24, r25
    4238:	09 f0       	breq	.+2      	; 0x423c <dwt_ds_twr_resp+0x302>
    423a:	c2 ce       	rjmp	.-636    	; 0x3fc0 <dwt_ds_twr_resp+0x86>
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	f1 01       	movw	r30, r2
    4240:	87 83       	std	Z+7, r24	; 0x07
    4242:	c4 01       	movw	r24, r8
    4244:	0e 94 6e 13 	call	0x26dc	; 0x26dc <dwt_readtxtimestamp>
    4248:	fe 01       	movw	r30, r28
    424a:	36 96       	adiw	r30, 0x06	; 6
    424c:	d4 01       	movw	r26, r8
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	40 e0       	ldi	r20, 0x00	; 0
    4254:	50 e0       	ldi	r21, 0x00	; 0
    4256:	60 e0       	ldi	r22, 0x00	; 0
    4258:	70 e0       	ldi	r23, 0x00	; 0
    425a:	80 e0       	ldi	r24, 0x00	; 0
    425c:	90 e0       	ldi	r25, 0x00	; 0
    425e:	08 e0       	ldi	r16, 0x08	; 8
    4260:	4a d4       	rcall	.+2196   	; 0x4af6 <__ashldi3>
    4262:	02 91       	ld	r16, -Z
    4264:	20 2b       	or	r18, r16
    4266:	ea 17       	cp	r30, r26
    4268:	fb 07       	cpc	r31, r27
    426a:	c9 f7       	brne	.-14     	; 0x425e <dwt_ds_twr_resp+0x324>
    426c:	20 93 d9 26 	sts	0x26D9, r18
    4270:	30 93 da 26 	sts	0x26DA, r19
    4274:	40 93 db 26 	sts	0x26DB, r20
    4278:	50 93 dc 26 	sts	0x26DC, r21
    427c:	60 93 dd 26 	sts	0x26DD, r22
    4280:	70 93 de 26 	sts	0x26DE, r23
    4284:	80 93 df 26 	sts	0x26DF, r24
    4288:	90 93 e0 26 	sts	0x26E0, r25
    428c:	c4 01       	movw	r24, r8
    428e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <dwt_readrxtimestamp>
    4292:	fe 01       	movw	r30, r28
    4294:	36 96       	adiw	r30, 0x06	; 6
    4296:	d4 01       	movw	r26, r8
    4298:	1e 86       	std	Y+14, r1	; 0x0e
    429a:	1f 86       	std	Y+15, r1	; 0x0f
    429c:	18 8a       	std	Y+16, r1	; 0x10
    429e:	19 8a       	std	Y+17, r1	; 0x11
    42a0:	1a 8a       	std	Y+18, r1	; 0x12
    42a2:	1b 8a       	std	Y+19, r1	; 0x13
    42a4:	1c 8a       	std	Y+20, r1	; 0x14
    42a6:	1d 8a       	std	Y+21, r1	; 0x15
    42a8:	2e 85       	ldd	r18, Y+14	; 0x0e
    42aa:	3f 85       	ldd	r19, Y+15	; 0x0f
    42ac:	48 89       	ldd	r20, Y+16	; 0x10
    42ae:	59 89       	ldd	r21, Y+17	; 0x11
    42b0:	6a 89       	ldd	r22, Y+18	; 0x12
    42b2:	7b 89       	ldd	r23, Y+19	; 0x13
    42b4:	8c 89       	ldd	r24, Y+20	; 0x14
    42b6:	9d 89       	ldd	r25, Y+21	; 0x15
    42b8:	08 e0       	ldi	r16, 0x08	; 8
    42ba:	1d d4       	rcall	.+2106   	; 0x4af6 <__ashldi3>
    42bc:	02 91       	ld	r16, -Z
    42be:	02 2b       	or	r16, r18
    42c0:	0e 87       	std	Y+14, r16	; 0x0e
    42c2:	3f 87       	std	Y+15, r19	; 0x0f
    42c4:	48 8b       	std	Y+16, r20	; 0x10
    42c6:	59 8b       	std	Y+17, r21	; 0x11
    42c8:	6a 8b       	std	Y+18, r22	; 0x12
    42ca:	7b 8b       	std	Y+19, r23	; 0x13
    42cc:	8c 8b       	std	Y+20, r24	; 0x14
    42ce:	9d 8b       	std	Y+21, r25	; 0x15
    42d0:	ea 17       	cp	r30, r26
    42d2:	fb 07       	cpc	r31, r27
    42d4:	49 f7       	brne	.-46     	; 0x42a8 <dwt_ds_twr_resp+0x36e>
    42d6:	00 93 d1 26 	sts	0x26D1, r16
    42da:	30 93 d2 26 	sts	0x26D2, r19
    42de:	40 93 d3 26 	sts	0x26D3, r20
    42e2:	50 93 d4 26 	sts	0x26D4, r21
    42e6:	60 93 d5 26 	sts	0x26D5, r22
    42ea:	70 93 d6 26 	sts	0x26D6, r23
    42ee:	9c 89       	ldd	r25, Y+20	; 0x14
    42f0:	90 93 d7 26 	sts	0x26D7, r25
    42f4:	ad 89       	ldd	r26, Y+21	; 0x15
    42f6:	a0 93 d8 26 	sts	0x26D8, r26
    42fa:	be 01       	movw	r22, r28
    42fc:	66 5f       	subi	r22, 0xF6	; 246
    42fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4300:	87 ef       	ldi	r24, 0xF7	; 247
    4302:	96 e2       	ldi	r25, 0x26	; 38
    4304:	00 dc       	rcall	.-2048   	; 0x3b06 <final_msg_get_ts>
    4306:	be 01       	movw	r22, r28
    4308:	6a 5f       	subi	r22, 0xFA	; 250
    430a:	7f 4f       	sbci	r23, 0xFF	; 255
    430c:	8b ef       	ldi	r24, 0xFB	; 251
    430e:	96 e2       	ldi	r25, 0x26	; 38
    4310:	fa db       	rcall	.-2060   	; 0x3b06 <final_msg_get_ts>
    4312:	b4 01       	movw	r22, r8
    4314:	8f ef       	ldi	r24, 0xFF	; 255
    4316:	96 e2       	ldi	r25, 0x26	; 38
    4318:	f6 db       	rcall	.-2068   	; 0x3b06 <final_msg_get_ts>
    431a:	a9 ed       	ldi	r26, 0xD9	; 217
    431c:	b6 e2       	ldi	r27, 0x26	; 38
    431e:	2d 91       	ld	r18, X+
    4320:	3d 91       	ld	r19, X+
    4322:	4d 91       	ld	r20, X+
    4324:	5c 91       	ld	r21, X
    4326:	2e 8b       	std	Y+22, r18	; 0x16
    4328:	3f 8b       	std	Y+23, r19	; 0x17
    432a:	48 8f       	std	Y+24, r20	; 0x18
    432c:	59 8f       	std	Y+25, r21	; 0x19
    432e:	2e 81       	ldd	r18, Y+6	; 0x06
    4330:	3f 81       	ldd	r19, Y+7	; 0x07
    4332:	48 85       	ldd	r20, Y+8	; 0x08
    4334:	59 85       	ldd	r21, Y+9	; 0x09
    4336:	2a 8f       	std	Y+26, r18	; 0x1a
    4338:	3b 8f       	std	Y+27, r19	; 0x1b
    433a:	4c 8f       	std	Y+28, r20	; 0x1c
    433c:	5d 8f       	std	Y+29, r21	; 0x1d
    433e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4340:	9b 85       	ldd	r25, Y+11	; 0x0b
    4342:	ac 85       	ldd	r26, Y+12	; 0x0c
    4344:	bd 85       	ldd	r27, Y+13	; 0x0d
    4346:	28 1b       	sub	r18, r24
    4348:	39 0b       	sbc	r19, r25
    434a:	4a 0b       	sbc	r20, r26
    434c:	5b 0b       	sbc	r21, r27
    434e:	ca 01       	movw	r24, r20
    4350:	b9 01       	movw	r22, r18
    4352:	05 d2       	rcall	.+1034   	; 0x475e <__floatunsisf>
    4354:	6b 01       	movw	r12, r22
    4356:	7c 01       	movw	r14, r24
    4358:	6e 85       	ldd	r22, Y+14	; 0x0e
    435a:	7f 85       	ldd	r23, Y+15	; 0x0f
    435c:	88 89       	ldd	r24, Y+16	; 0x10
    435e:	99 89       	ldd	r25, Y+17	; 0x11
    4360:	2e 89       	ldd	r18, Y+22	; 0x16
    4362:	3f 89       	ldd	r19, Y+23	; 0x17
    4364:	48 8d       	ldd	r20, Y+24	; 0x18
    4366:	59 8d       	ldd	r21, Y+25	; 0x19
    4368:	62 1b       	sub	r22, r18
    436a:	73 0b       	sbc	r23, r19
    436c:	84 0b       	sbc	r24, r20
    436e:	95 0b       	sbc	r25, r21
    4370:	f6 d1       	rcall	.+1004   	; 0x475e <__floatunsisf>
    4372:	6e 87       	std	Y+14, r22	; 0x0e
    4374:	7f 87       	std	Y+15, r23	; 0x0f
    4376:	88 8b       	std	Y+16, r24	; 0x10
    4378:	99 8b       	std	Y+17, r25	; 0x11
    437a:	89 81       	ldd	r24, Y+1	; 0x01
    437c:	9a 81       	ldd	r25, Y+2	; 0x02
    437e:	ab 81       	ldd	r26, Y+3	; 0x03
    4380:	bc 81       	ldd	r27, Y+4	; 0x04
    4382:	bc 01       	movw	r22, r24
    4384:	cd 01       	movw	r24, r26
    4386:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4388:	3b 8d       	ldd	r19, Y+27	; 0x1b
    438a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    438c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    438e:	62 1b       	sub	r22, r18
    4390:	73 0b       	sbc	r23, r19
    4392:	84 0b       	sbc	r24, r20
    4394:	95 0b       	sbc	r25, r21
    4396:	e3 d1       	rcall	.+966    	; 0x475e <__floatunsisf>
    4398:	6a 8f       	std	Y+26, r22	; 0x1a
    439a:	7b 8f       	std	Y+27, r23	; 0x1b
    439c:	8c 8f       	std	Y+28, r24	; 0x1c
    439e:	9d 8f       	std	Y+29, r25	; 0x1d
    43a0:	80 91 e1 26 	lds	r24, 0x26E1
    43a4:	90 91 e2 26 	lds	r25, 0x26E2
    43a8:	a0 91 e3 26 	lds	r26, 0x26E3
    43ac:	b0 91 e4 26 	lds	r27, 0x26E4
    43b0:	2e 89       	ldd	r18, Y+22	; 0x16
    43b2:	3f 89       	ldd	r19, Y+23	; 0x17
    43b4:	48 8d       	ldd	r20, Y+24	; 0x18
    43b6:	59 8d       	ldd	r21, Y+25	; 0x19
    43b8:	28 1b       	sub	r18, r24
    43ba:	39 0b       	sbc	r19, r25
    43bc:	4a 0b       	sbc	r20, r26
    43be:	5b 0b       	sbc	r21, r27
    43c0:	ca 01       	movw	r24, r20
    43c2:	b9 01       	movw	r22, r18
    43c4:	cc d1       	rcall	.+920    	; 0x475e <__floatunsisf>
    43c6:	6e 8b       	std	Y+22, r22	; 0x16
    43c8:	7f 8b       	std	Y+23, r23	; 0x17
    43ca:	88 8f       	std	Y+24, r24	; 0x18
    43cc:	99 8f       	std	Y+25, r25	; 0x19
    43ce:	2e 85       	ldd	r18, Y+14	; 0x0e
    43d0:	3f 85       	ldd	r19, Y+15	; 0x0f
    43d2:	48 89       	ldd	r20, Y+16	; 0x10
    43d4:	59 89       	ldd	r21, Y+17	; 0x11
    43d6:	c7 01       	movw	r24, r14
    43d8:	b6 01       	movw	r22, r12
    43da:	9d d2       	rcall	.+1338   	; 0x4916 <__mulsf3>
    43dc:	6e 8f       	std	Y+30, r22	; 0x1e
    43de:	7f 8f       	std	Y+31, r23	; 0x1f
    43e0:	88 a3       	std	Y+32, r24	; 0x20
    43e2:	99 a3       	std	Y+33, r25	; 0x21
    43e4:	2e 89       	ldd	r18, Y+22	; 0x16
    43e6:	3f 89       	ldd	r19, Y+23	; 0x17
    43e8:	48 8d       	ldd	r20, Y+24	; 0x18
    43ea:	59 8d       	ldd	r21, Y+25	; 0x19
    43ec:	6a 8d       	ldd	r22, Y+26	; 0x1a
    43ee:	7b 8d       	ldd	r23, Y+27	; 0x1b
    43f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    43f2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    43f4:	90 d2       	rcall	.+1312   	; 0x4916 <__mulsf3>
    43f6:	9b 01       	movw	r18, r22
    43f8:	ac 01       	movw	r20, r24
    43fa:	6e 8d       	ldd	r22, Y+30	; 0x1e
    43fc:	7f 8d       	ldd	r23, Y+31	; 0x1f
    43fe:	88 a1       	ldd	r24, Y+32	; 0x20
    4400:	99 a1       	ldd	r25, Y+33	; 0x21
    4402:	76 d0       	rcall	.+236    	; 0x44f0 <__subsf3>
    4404:	6e 8f       	std	Y+30, r22	; 0x1e
    4406:	7f 8f       	std	Y+31, r23	; 0x1f
    4408:	88 a3       	std	Y+32, r24	; 0x20
    440a:	99 a3       	std	Y+33, r25	; 0x21
    440c:	2e 85       	ldd	r18, Y+14	; 0x0e
    440e:	3f 85       	ldd	r19, Y+15	; 0x0f
    4410:	48 89       	ldd	r20, Y+16	; 0x10
    4412:	59 89       	ldd	r21, Y+17	; 0x11
    4414:	c7 01       	movw	r24, r14
    4416:	b6 01       	movw	r22, r12
    4418:	6c d0       	rcall	.+216    	; 0x44f2 <__addsf3>
    441a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    441c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    441e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4420:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4422:	67 d0       	rcall	.+206    	; 0x44f2 <__addsf3>
    4424:	2e 89       	ldd	r18, Y+22	; 0x16
    4426:	3f 89       	ldd	r19, Y+23	; 0x17
    4428:	48 8d       	ldd	r20, Y+24	; 0x18
    442a:	59 8d       	ldd	r21, Y+25	; 0x19
    442c:	62 d0       	rcall	.+196    	; 0x44f2 <__addsf3>
    442e:	9b 01       	movw	r18, r22
    4430:	ac 01       	movw	r20, r24
    4432:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4434:	7f 8d       	ldd	r23, Y+31	; 0x1f
    4436:	88 a1       	ldd	r24, Y+32	; 0x20
    4438:	99 a1       	ldd	r25, Y+33	; 0x21
    443a:	bf d0       	rcall	.+382    	; 0x45ba <__divsf3>
    443c:	26 d1       	rcall	.+588    	; 0x468a <__fixsfdi>
    443e:	8b d1       	rcall	.+790    	; 0x4756 <__floatdisf>
    4440:	22 ec       	ldi	r18, 0xC2	; 194
    4442:	38 ea       	ldi	r19, 0xA8	; 168
    4444:	49 e8       	ldi	r20, 0x89	; 137
    4446:	5d e2       	ldi	r21, 0x2D	; 45
    4448:	66 d2       	rcall	.+1228   	; 0x4916 <__mulsf3>
    444a:	60 93 cd 26 	sts	0x26CD, r22
    444e:	70 93 ce 26 	sts	0x26CE, r23
    4452:	80 93 cf 26 	sts	0x26CF, r24
    4456:	90 93 d0 26 	sts	0x26D0, r25
    445a:	29 ec       	ldi	r18, 0xC9	; 201
    445c:	38 ee       	ldi	r19, 0xE8	; 232
    445e:	4e e8       	ldi	r20, 0x8E	; 142
    4460:	5d e4       	ldi	r21, 0x4D	; 77
    4462:	59 d2       	rcall	.+1202   	; 0x4916 <__mulsf3>
    4464:	60 93 c9 26 	sts	0x26C9, r22
    4468:	70 93 ca 26 	sts	0x26CA, r23
    446c:	80 93 cb 26 	sts	0x26CB, r24
    4470:	90 93 cc 26 	sts	0x26CC, r25
    4474:	20 e0       	ldi	r18, 0x00	; 0
    4476:	30 e0       	ldi	r19, 0x00	; 0
    4478:	48 ec       	ldi	r20, 0xC8	; 200
    447a:	52 e4       	ldi	r21, 0x42	; 66
    447c:	4c d2       	rcall	.+1176   	; 0x4916 <__mulsf3>
    447e:	3f d1       	rcall	.+638    	; 0x46fe <__fixunssfsi>
    4480:	7f 93       	push	r23
    4482:	6f 93       	push	r22
    4484:	85 ec       	ldi	r24, 0xC5	; 197
    4486:	93 e2       	ldi	r25, 0x23	; 35
    4488:	9f 93       	push	r25
    448a:	8f 93       	push	r24
    448c:	90 d3       	rcall	.+1824   	; 0x4bae <printf>
    448e:	0f 90       	pop	r0
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	94 cd       	rjmp	.-1240   	; 0x3fc0 <dwt_ds_twr_resp+0x86>
    4498:	82 ed       	ldi	r24, 0xD2	; 210
    449a:	93 e2       	ldi	r25, 0x23	; 35
    449c:	99 d3       	rcall	.+1842   	; 0x4bd0 <puts>
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	30 e9       	ldi	r19, 0x90	; 144
    44a2:	47 e2       	ldi	r20, 0x27	; 39
    44a4:	54 e2       	ldi	r21, 0x24	; 36
    44a6:	60 e0       	ldi	r22, 0x00	; 0
    44a8:	70 e0       	ldi	r23, 0x00	; 0
    44aa:	8f e0       	ldi	r24, 0x0F	; 15
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	0e 94 31 14 	call	0x2862	; 0x2862 <dwt_write32bitoffsetreg>
    44b2:	0e 94 39 19 	call	0x3272	; 0x3272 <dwt_rxreset>
    44b6:	84 cd       	rjmp	.-1272   	; 0x3fc0 <dwt_ds_twr_resp+0x86>
    44b8:	20 e0       	ldi	r18, 0x00	; 0
    44ba:	30 e9       	ldi	r19, 0x90	; 144
    44bc:	47 e2       	ldi	r20, 0x27	; 39
    44be:	54 e2       	ldi	r21, 0x24	; 36
    44c0:	60 e0       	ldi	r22, 0x00	; 0
    44c2:	70 e0       	ldi	r23, 0x00	; 0
    44c4:	8f e0       	ldi	r24, 0x0F	; 15
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	0e 94 31 14 	call	0x2862	; 0x2862 <dwt_write32bitoffsetreg>
    44cc:	0e 94 39 19 	call	0x3272	; 0x3272 <dwt_rxreset>
    44d0:	77 cd       	rjmp	.-1298   	; 0x3fc0 <dwt_ds_twr_resp+0x86>

000044d2 <main>:
}


int main (void)
{
	init_onepos();
    44d2:	bf d8       	rcall	.-3714   	; 0x3652 <init_onepos>
	openspi();
    44d4:	04 d8       	rcall	.-4088   	; 0x34de <openspi>
		.baudrate = USART_SERIAL_BAUDRATE,
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	usart_serial_init(USART_BLE, &BLE_SERIAL_OPTIONS);
    44d6:	6f ea       	ldi	r22, 0xAF	; 175
    44d8:	70 e2       	ldi	r23, 0x20	; 32
    44da:	80 ea       	ldi	r24, 0xA0	; 160
    44dc:	99 e0       	ldi	r25, 0x09	; 9
    44de:	53 db       	rcall	.-2394   	; 0x3b86 <usart_serial_init>
		.baudrate = USART_SERIAL_BAUDRATE,
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	usart_serial_init(USART_RS485, &RS485_SERIAL_OPTIONS);
    44e0:	68 ea       	ldi	r22, 0xA8	; 168
    44e2:	70 e2       	ldi	r23, 0x20	; 32
    44e4:	80 ea       	ldi	r24, 0xA0	; 160
    44e6:	9a e0       	ldi	r25, 0x0A	; 10
    44e8:	4e db       	rcall	.-2404   	; 0x3b86 <usart_serial_init>
	
	init_animation();
    44ea:	f1 d8       	rcall	.-3614   	; 0x36ce <init_animation>
	
	//dwt_rx_send_respond();
	//dwt_tx_wait_respond();
	
	
	dwt_show_sys_info();
    44ec:	a6 db       	rcall	.-2228   	; 0x3c3a <dwt_show_sys_info>
	#endif
	#ifdef DWT_DS_TWR_INIT
		dwt_ds_twr_init();
	#endif
	#ifdef DWT_DS_TWR_RESP 
		dwt_ds_twr_resp();
    44ee:	25 dd       	rcall	.-1462   	; 0x3f3a <dwt_ds_twr_resp>

000044f0 <__subsf3>:
    44f0:	50 58       	subi	r21, 0x80	; 128

000044f2 <__addsf3>:
    44f2:	bb 27       	eor	r27, r27
    44f4:	aa 27       	eor	r26, r26
    44f6:	0e d0       	rcall	.+28     	; 0x4514 <__addsf3x>
    44f8:	d4 c1       	rjmp	.+936    	; 0x48a2 <__fp_round>
    44fa:	c5 d1       	rcall	.+906    	; 0x4886 <__fp_pscA>
    44fc:	30 f0       	brcs	.+12     	; 0x450a <__addsf3+0x18>
    44fe:	ca d1       	rcall	.+916    	; 0x4894 <__fp_pscB>
    4500:	20 f0       	brcs	.+8      	; 0x450a <__addsf3+0x18>
    4502:	31 f4       	brne	.+12     	; 0x4510 <__addsf3+0x1e>
    4504:	9f 3f       	cpi	r25, 0xFF	; 255
    4506:	11 f4       	brne	.+4      	; 0x450c <__addsf3+0x1a>
    4508:	1e f4       	brtc	.+6      	; 0x4510 <__addsf3+0x1e>
    450a:	aa c1       	rjmp	.+852    	; 0x4860 <__fp_nan>
    450c:	0e f4       	brtc	.+2      	; 0x4510 <__addsf3+0x1e>
    450e:	e0 95       	com	r30
    4510:	e7 fb       	bst	r30, 7
    4512:	a0 c1       	rjmp	.+832    	; 0x4854 <__fp_inf>

00004514 <__addsf3x>:
    4514:	e9 2f       	mov	r30, r25
    4516:	d6 d1       	rcall	.+940    	; 0x48c4 <__fp_split3>
    4518:	80 f3       	brcs	.-32     	; 0x44fa <__addsf3+0x8>
    451a:	ba 17       	cp	r27, r26
    451c:	62 07       	cpc	r22, r18
    451e:	73 07       	cpc	r23, r19
    4520:	84 07       	cpc	r24, r20
    4522:	95 07       	cpc	r25, r21
    4524:	18 f0       	brcs	.+6      	; 0x452c <__addsf3x+0x18>
    4526:	71 f4       	brne	.+28     	; 0x4544 <__addsf3x+0x30>
    4528:	9e f5       	brtc	.+102    	; 0x4590 <__addsf3x+0x7c>
    452a:	ee c1       	rjmp	.+988    	; 0x4908 <__fp_zero>
    452c:	0e f4       	brtc	.+2      	; 0x4530 <__addsf3x+0x1c>
    452e:	e0 95       	com	r30
    4530:	0b 2e       	mov	r0, r27
    4532:	ba 2f       	mov	r27, r26
    4534:	a0 2d       	mov	r26, r0
    4536:	0b 01       	movw	r0, r22
    4538:	b9 01       	movw	r22, r18
    453a:	90 01       	movw	r18, r0
    453c:	0c 01       	movw	r0, r24
    453e:	ca 01       	movw	r24, r20
    4540:	a0 01       	movw	r20, r0
    4542:	11 24       	eor	r1, r1
    4544:	ff 27       	eor	r31, r31
    4546:	59 1b       	sub	r21, r25
    4548:	99 f0       	breq	.+38     	; 0x4570 <__addsf3x+0x5c>
    454a:	59 3f       	cpi	r21, 0xF9	; 249
    454c:	50 f4       	brcc	.+20     	; 0x4562 <__addsf3x+0x4e>
    454e:	50 3e       	cpi	r21, 0xE0	; 224
    4550:	68 f1       	brcs	.+90     	; 0x45ac <__addsf3x+0x98>
    4552:	1a 16       	cp	r1, r26
    4554:	f0 40       	sbci	r31, 0x00	; 0
    4556:	a2 2f       	mov	r26, r18
    4558:	23 2f       	mov	r18, r19
    455a:	34 2f       	mov	r19, r20
    455c:	44 27       	eor	r20, r20
    455e:	58 5f       	subi	r21, 0xF8	; 248
    4560:	f3 cf       	rjmp	.-26     	; 0x4548 <__addsf3x+0x34>
    4562:	46 95       	lsr	r20
    4564:	37 95       	ror	r19
    4566:	27 95       	ror	r18
    4568:	a7 95       	ror	r26
    456a:	f0 40       	sbci	r31, 0x00	; 0
    456c:	53 95       	inc	r21
    456e:	c9 f7       	brne	.-14     	; 0x4562 <__addsf3x+0x4e>
    4570:	7e f4       	brtc	.+30     	; 0x4590 <__addsf3x+0x7c>
    4572:	1f 16       	cp	r1, r31
    4574:	ba 0b       	sbc	r27, r26
    4576:	62 0b       	sbc	r22, r18
    4578:	73 0b       	sbc	r23, r19
    457a:	84 0b       	sbc	r24, r20
    457c:	ba f0       	brmi	.+46     	; 0x45ac <__addsf3x+0x98>
    457e:	91 50       	subi	r25, 0x01	; 1
    4580:	a1 f0       	breq	.+40     	; 0x45aa <__addsf3x+0x96>
    4582:	ff 0f       	add	r31, r31
    4584:	bb 1f       	adc	r27, r27
    4586:	66 1f       	adc	r22, r22
    4588:	77 1f       	adc	r23, r23
    458a:	88 1f       	adc	r24, r24
    458c:	c2 f7       	brpl	.-16     	; 0x457e <__addsf3x+0x6a>
    458e:	0e c0       	rjmp	.+28     	; 0x45ac <__addsf3x+0x98>
    4590:	ba 0f       	add	r27, r26
    4592:	62 1f       	adc	r22, r18
    4594:	73 1f       	adc	r23, r19
    4596:	84 1f       	adc	r24, r20
    4598:	48 f4       	brcc	.+18     	; 0x45ac <__addsf3x+0x98>
    459a:	87 95       	ror	r24
    459c:	77 95       	ror	r23
    459e:	67 95       	ror	r22
    45a0:	b7 95       	ror	r27
    45a2:	f7 95       	ror	r31
    45a4:	9e 3f       	cpi	r25, 0xFE	; 254
    45a6:	08 f0       	brcs	.+2      	; 0x45aa <__addsf3x+0x96>
    45a8:	b3 cf       	rjmp	.-154    	; 0x4510 <__addsf3+0x1e>
    45aa:	93 95       	inc	r25
    45ac:	88 0f       	add	r24, r24
    45ae:	08 f0       	brcs	.+2      	; 0x45b2 <__addsf3x+0x9e>
    45b0:	99 27       	eor	r25, r25
    45b2:	ee 0f       	add	r30, r30
    45b4:	97 95       	ror	r25
    45b6:	87 95       	ror	r24
    45b8:	08 95       	ret

000045ba <__divsf3>:
    45ba:	0c d0       	rcall	.+24     	; 0x45d4 <__divsf3x>
    45bc:	72 c1       	rjmp	.+740    	; 0x48a2 <__fp_round>
    45be:	6a d1       	rcall	.+724    	; 0x4894 <__fp_pscB>
    45c0:	40 f0       	brcs	.+16     	; 0x45d2 <__divsf3+0x18>
    45c2:	61 d1       	rcall	.+706    	; 0x4886 <__fp_pscA>
    45c4:	30 f0       	brcs	.+12     	; 0x45d2 <__divsf3+0x18>
    45c6:	21 f4       	brne	.+8      	; 0x45d0 <__divsf3+0x16>
    45c8:	5f 3f       	cpi	r21, 0xFF	; 255
    45ca:	19 f0       	breq	.+6      	; 0x45d2 <__divsf3+0x18>
    45cc:	43 c1       	rjmp	.+646    	; 0x4854 <__fp_inf>
    45ce:	51 11       	cpse	r21, r1
    45d0:	9c c1       	rjmp	.+824    	; 0x490a <__fp_szero>
    45d2:	46 c1       	rjmp	.+652    	; 0x4860 <__fp_nan>

000045d4 <__divsf3x>:
    45d4:	77 d1       	rcall	.+750    	; 0x48c4 <__fp_split3>
    45d6:	98 f3       	brcs	.-26     	; 0x45be <__divsf3+0x4>

000045d8 <__divsf3_pse>:
    45d8:	99 23       	and	r25, r25
    45da:	c9 f3       	breq	.-14     	; 0x45ce <__divsf3+0x14>
    45dc:	55 23       	and	r21, r21
    45de:	b1 f3       	breq	.-20     	; 0x45cc <__divsf3+0x12>
    45e0:	95 1b       	sub	r25, r21
    45e2:	55 0b       	sbc	r21, r21
    45e4:	bb 27       	eor	r27, r27
    45e6:	aa 27       	eor	r26, r26
    45e8:	62 17       	cp	r22, r18
    45ea:	73 07       	cpc	r23, r19
    45ec:	84 07       	cpc	r24, r20
    45ee:	38 f0       	brcs	.+14     	; 0x45fe <__divsf3_pse+0x26>
    45f0:	9f 5f       	subi	r25, 0xFF	; 255
    45f2:	5f 4f       	sbci	r21, 0xFF	; 255
    45f4:	22 0f       	add	r18, r18
    45f6:	33 1f       	adc	r19, r19
    45f8:	44 1f       	adc	r20, r20
    45fa:	aa 1f       	adc	r26, r26
    45fc:	a9 f3       	breq	.-22     	; 0x45e8 <__divsf3_pse+0x10>
    45fe:	33 d0       	rcall	.+102    	; 0x4666 <__divsf3_pse+0x8e>
    4600:	0e 2e       	mov	r0, r30
    4602:	3a f0       	brmi	.+14     	; 0x4612 <__divsf3_pse+0x3a>
    4604:	e0 e8       	ldi	r30, 0x80	; 128
    4606:	30 d0       	rcall	.+96     	; 0x4668 <__divsf3_pse+0x90>
    4608:	91 50       	subi	r25, 0x01	; 1
    460a:	50 40       	sbci	r21, 0x00	; 0
    460c:	e6 95       	lsr	r30
    460e:	00 1c       	adc	r0, r0
    4610:	ca f7       	brpl	.-14     	; 0x4604 <__divsf3_pse+0x2c>
    4612:	29 d0       	rcall	.+82     	; 0x4666 <__divsf3_pse+0x8e>
    4614:	fe 2f       	mov	r31, r30
    4616:	27 d0       	rcall	.+78     	; 0x4666 <__divsf3_pse+0x8e>
    4618:	66 0f       	add	r22, r22
    461a:	77 1f       	adc	r23, r23
    461c:	88 1f       	adc	r24, r24
    461e:	bb 1f       	adc	r27, r27
    4620:	26 17       	cp	r18, r22
    4622:	37 07       	cpc	r19, r23
    4624:	48 07       	cpc	r20, r24
    4626:	ab 07       	cpc	r26, r27
    4628:	b0 e8       	ldi	r27, 0x80	; 128
    462a:	09 f0       	breq	.+2      	; 0x462e <__divsf3_pse+0x56>
    462c:	bb 0b       	sbc	r27, r27
    462e:	80 2d       	mov	r24, r0
    4630:	bf 01       	movw	r22, r30
    4632:	ff 27       	eor	r31, r31
    4634:	93 58       	subi	r25, 0x83	; 131
    4636:	5f 4f       	sbci	r21, 0xFF	; 255
    4638:	2a f0       	brmi	.+10     	; 0x4644 <__divsf3_pse+0x6c>
    463a:	9e 3f       	cpi	r25, 0xFE	; 254
    463c:	51 05       	cpc	r21, r1
    463e:	68 f0       	brcs	.+26     	; 0x465a <__divsf3_pse+0x82>
    4640:	09 c1       	rjmp	.+530    	; 0x4854 <__fp_inf>
    4642:	63 c1       	rjmp	.+710    	; 0x490a <__fp_szero>
    4644:	5f 3f       	cpi	r21, 0xFF	; 255
    4646:	ec f3       	brlt	.-6      	; 0x4642 <__divsf3_pse+0x6a>
    4648:	98 3e       	cpi	r25, 0xE8	; 232
    464a:	dc f3       	brlt	.-10     	; 0x4642 <__divsf3_pse+0x6a>
    464c:	86 95       	lsr	r24
    464e:	77 95       	ror	r23
    4650:	67 95       	ror	r22
    4652:	b7 95       	ror	r27
    4654:	f7 95       	ror	r31
    4656:	9f 5f       	subi	r25, 0xFF	; 255
    4658:	c9 f7       	brne	.-14     	; 0x464c <__divsf3_pse+0x74>
    465a:	88 0f       	add	r24, r24
    465c:	91 1d       	adc	r25, r1
    465e:	96 95       	lsr	r25
    4660:	87 95       	ror	r24
    4662:	97 f9       	bld	r25, 7
    4664:	08 95       	ret
    4666:	e1 e0       	ldi	r30, 0x01	; 1
    4668:	66 0f       	add	r22, r22
    466a:	77 1f       	adc	r23, r23
    466c:	88 1f       	adc	r24, r24
    466e:	bb 1f       	adc	r27, r27
    4670:	62 17       	cp	r22, r18
    4672:	73 07       	cpc	r23, r19
    4674:	84 07       	cpc	r24, r20
    4676:	ba 07       	cpc	r27, r26
    4678:	20 f0       	brcs	.+8      	; 0x4682 <__divsf3_pse+0xaa>
    467a:	62 1b       	sub	r22, r18
    467c:	73 0b       	sbc	r23, r19
    467e:	84 0b       	sbc	r24, r20
    4680:	ba 0b       	sbc	r27, r26
    4682:	ee 1f       	adc	r30, r30
    4684:	88 f7       	brcc	.-30     	; 0x4668 <__divsf3_pse+0x90>
    4686:	e0 95       	com	r30
    4688:	08 95       	ret

0000468a <__fixsfdi>:
    468a:	be e3       	ldi	r27, 0x3E	; 62
    468c:	04 d0       	rcall	.+8      	; 0x4696 <__fixunssfdi+0x2>
    468e:	08 f4       	brcc	.+2      	; 0x4692 <__fixsfdi+0x8>
    4690:	90 e8       	ldi	r25, 0x80	; 128
    4692:	08 95       	ret

00004694 <__fixunssfdi>:
    4694:	bf e3       	ldi	r27, 0x3F	; 63
    4696:	22 27       	eor	r18, r18
    4698:	33 27       	eor	r19, r19
    469a:	a9 01       	movw	r20, r18
    469c:	1b d1       	rcall	.+566    	; 0x48d4 <__fp_splitA>
    469e:	58 f1       	brcs	.+86     	; 0x46f6 <__fixunssfdi+0x62>
    46a0:	9f 57       	subi	r25, 0x7F	; 127
    46a2:	40 f1       	brcs	.+80     	; 0x46f4 <__fixunssfdi+0x60>
    46a4:	b9 17       	cp	r27, r25
    46a6:	38 f1       	brcs	.+78     	; 0x46f6 <__fixunssfdi+0x62>
    46a8:	bf e3       	ldi	r27, 0x3F	; 63
    46aa:	b9 1b       	sub	r27, r25
    46ac:	99 27       	eor	r25, r25
    46ae:	b8 50       	subi	r27, 0x08	; 8
    46b0:	3a f4       	brpl	.+14     	; 0x46c0 <__fixunssfdi+0x2c>
    46b2:	66 0f       	add	r22, r22
    46b4:	77 1f       	adc	r23, r23
    46b6:	88 1f       	adc	r24, r24
    46b8:	99 1f       	adc	r25, r25
    46ba:	b3 95       	inc	r27
    46bc:	d2 f3       	brmi	.-12     	; 0x46b2 <__fixunssfdi+0x1e>
    46be:	16 c0       	rjmp	.+44     	; 0x46ec <__fixunssfdi+0x58>
    46c0:	b8 50       	subi	r27, 0x08	; 8
    46c2:	4a f0       	brmi	.+18     	; 0x46d6 <__fixunssfdi+0x42>
    46c4:	23 2f       	mov	r18, r19
    46c6:	34 2f       	mov	r19, r20
    46c8:	45 2f       	mov	r20, r21
    46ca:	56 2f       	mov	r21, r22
    46cc:	67 2f       	mov	r22, r23
    46ce:	78 2f       	mov	r23, r24
    46d0:	88 27       	eor	r24, r24
    46d2:	b8 50       	subi	r27, 0x08	; 8
    46d4:	ba f7       	brpl	.-18     	; 0x46c4 <__fixunssfdi+0x30>
    46d6:	b8 5f       	subi	r27, 0xF8	; 248
    46d8:	49 f0       	breq	.+18     	; 0x46ec <__fixunssfdi+0x58>
    46da:	86 95       	lsr	r24
    46dc:	77 95       	ror	r23
    46de:	67 95       	ror	r22
    46e0:	57 95       	ror	r21
    46e2:	47 95       	ror	r20
    46e4:	37 95       	ror	r19
    46e6:	27 95       	ror	r18
    46e8:	ba 95       	dec	r27
    46ea:	b9 f7       	brne	.-18     	; 0x46da <__fixunssfdi+0x46>
    46ec:	0e f4       	brtc	.+2      	; 0x46f0 <__fixunssfdi+0x5c>
    46ee:	bb d0       	rcall	.+374    	; 0x4866 <__fp_negdi>
    46f0:	88 94       	clc
    46f2:	08 95       	ret
    46f4:	88 94       	clc
    46f6:	60 e0       	ldi	r22, 0x00	; 0
    46f8:	70 e0       	ldi	r23, 0x00	; 0
    46fa:	cb 01       	movw	r24, r22
    46fc:	08 95       	ret

000046fe <__fixunssfsi>:
    46fe:	ea d0       	rcall	.+468    	; 0x48d4 <__fp_splitA>
    4700:	88 f0       	brcs	.+34     	; 0x4724 <__fixunssfsi+0x26>
    4702:	9f 57       	subi	r25, 0x7F	; 127
    4704:	90 f0       	brcs	.+36     	; 0x472a <__fixunssfsi+0x2c>
    4706:	b9 2f       	mov	r27, r25
    4708:	99 27       	eor	r25, r25
    470a:	b7 51       	subi	r27, 0x17	; 23
    470c:	a0 f0       	brcs	.+40     	; 0x4736 <__fixunssfsi+0x38>
    470e:	d1 f0       	breq	.+52     	; 0x4744 <__fixunssfsi+0x46>
    4710:	66 0f       	add	r22, r22
    4712:	77 1f       	adc	r23, r23
    4714:	88 1f       	adc	r24, r24
    4716:	99 1f       	adc	r25, r25
    4718:	1a f0       	brmi	.+6      	; 0x4720 <__fixunssfsi+0x22>
    471a:	ba 95       	dec	r27
    471c:	c9 f7       	brne	.-14     	; 0x4710 <__fixunssfsi+0x12>
    471e:	12 c0       	rjmp	.+36     	; 0x4744 <__fixunssfsi+0x46>
    4720:	b1 30       	cpi	r27, 0x01	; 1
    4722:	81 f0       	breq	.+32     	; 0x4744 <__fixunssfsi+0x46>
    4724:	f1 d0       	rcall	.+482    	; 0x4908 <__fp_zero>
    4726:	b1 e0       	ldi	r27, 0x01	; 1
    4728:	08 95       	ret
    472a:	ee c0       	rjmp	.+476    	; 0x4908 <__fp_zero>
    472c:	67 2f       	mov	r22, r23
    472e:	78 2f       	mov	r23, r24
    4730:	88 27       	eor	r24, r24
    4732:	b8 5f       	subi	r27, 0xF8	; 248
    4734:	39 f0       	breq	.+14     	; 0x4744 <__fixunssfsi+0x46>
    4736:	b9 3f       	cpi	r27, 0xF9	; 249
    4738:	cc f3       	brlt	.-14     	; 0x472c <__fixunssfsi+0x2e>
    473a:	86 95       	lsr	r24
    473c:	77 95       	ror	r23
    473e:	67 95       	ror	r22
    4740:	b3 95       	inc	r27
    4742:	d9 f7       	brne	.-10     	; 0x473a <__fixunssfsi+0x3c>
    4744:	3e f4       	brtc	.+14     	; 0x4754 <__fixunssfsi+0x56>
    4746:	90 95       	com	r25
    4748:	80 95       	com	r24
    474a:	70 95       	com	r23
    474c:	61 95       	neg	r22
    474e:	7f 4f       	sbci	r23, 0xFF	; 255
    4750:	8f 4f       	sbci	r24, 0xFF	; 255
    4752:	9f 4f       	sbci	r25, 0xFF	; 255
    4754:	08 95       	ret

00004756 <__floatdisf>:
    4756:	97 fb       	bst	r25, 7
    4758:	0e f4       	brtc	.+2      	; 0x475c <__floatdisf+0x6>
    475a:	85 d0       	rcall	.+266    	; 0x4866 <__fp_negdi>
    475c:	3e c0       	rjmp	.+124    	; 0x47da <__fp_di2sf>

0000475e <__floatunsisf>:
    475e:	e8 94       	clt
    4760:	09 c0       	rjmp	.+18     	; 0x4774 <__floatsisf+0x12>

00004762 <__floatsisf>:
    4762:	97 fb       	bst	r25, 7
    4764:	3e f4       	brtc	.+14     	; 0x4774 <__floatsisf+0x12>
    4766:	90 95       	com	r25
    4768:	80 95       	com	r24
    476a:	70 95       	com	r23
    476c:	61 95       	neg	r22
    476e:	7f 4f       	sbci	r23, 0xFF	; 255
    4770:	8f 4f       	sbci	r24, 0xFF	; 255
    4772:	9f 4f       	sbci	r25, 0xFF	; 255
    4774:	99 23       	and	r25, r25
    4776:	a9 f0       	breq	.+42     	; 0x47a2 <__floatsisf+0x40>
    4778:	f9 2f       	mov	r31, r25
    477a:	96 e9       	ldi	r25, 0x96	; 150
    477c:	bb 27       	eor	r27, r27
    477e:	93 95       	inc	r25
    4780:	f6 95       	lsr	r31
    4782:	87 95       	ror	r24
    4784:	77 95       	ror	r23
    4786:	67 95       	ror	r22
    4788:	b7 95       	ror	r27
    478a:	f1 11       	cpse	r31, r1
    478c:	f8 cf       	rjmp	.-16     	; 0x477e <__floatsisf+0x1c>
    478e:	fa f4       	brpl	.+62     	; 0x47ce <__floatsisf+0x6c>
    4790:	bb 0f       	add	r27, r27
    4792:	11 f4       	brne	.+4      	; 0x4798 <__floatsisf+0x36>
    4794:	60 ff       	sbrs	r22, 0
    4796:	1b c0       	rjmp	.+54     	; 0x47ce <__floatsisf+0x6c>
    4798:	6f 5f       	subi	r22, 0xFF	; 255
    479a:	7f 4f       	sbci	r23, 0xFF	; 255
    479c:	8f 4f       	sbci	r24, 0xFF	; 255
    479e:	9f 4f       	sbci	r25, 0xFF	; 255
    47a0:	16 c0       	rjmp	.+44     	; 0x47ce <__floatsisf+0x6c>
    47a2:	88 23       	and	r24, r24
    47a4:	11 f0       	breq	.+4      	; 0x47aa <__floatsisf+0x48>
    47a6:	96 e9       	ldi	r25, 0x96	; 150
    47a8:	11 c0       	rjmp	.+34     	; 0x47cc <__floatsisf+0x6a>
    47aa:	77 23       	and	r23, r23
    47ac:	21 f0       	breq	.+8      	; 0x47b6 <__floatsisf+0x54>
    47ae:	9e e8       	ldi	r25, 0x8E	; 142
    47b0:	87 2f       	mov	r24, r23
    47b2:	76 2f       	mov	r23, r22
    47b4:	05 c0       	rjmp	.+10     	; 0x47c0 <__floatsisf+0x5e>
    47b6:	66 23       	and	r22, r22
    47b8:	71 f0       	breq	.+28     	; 0x47d6 <__floatsisf+0x74>
    47ba:	96 e8       	ldi	r25, 0x86	; 134
    47bc:	86 2f       	mov	r24, r22
    47be:	70 e0       	ldi	r23, 0x00	; 0
    47c0:	60 e0       	ldi	r22, 0x00	; 0
    47c2:	2a f0       	brmi	.+10     	; 0x47ce <__floatsisf+0x6c>
    47c4:	9a 95       	dec	r25
    47c6:	66 0f       	add	r22, r22
    47c8:	77 1f       	adc	r23, r23
    47ca:	88 1f       	adc	r24, r24
    47cc:	da f7       	brpl	.-10     	; 0x47c4 <__floatsisf+0x62>
    47ce:	88 0f       	add	r24, r24
    47d0:	96 95       	lsr	r25
    47d2:	87 95       	ror	r24
    47d4:	97 f9       	bld	r25, 7
    47d6:	08 95       	ret

000047d8 <__floatundisf>:
    47d8:	e8 94       	clt

000047da <__fp_di2sf>:
    47da:	f9 2f       	mov	r31, r25
    47dc:	96 eb       	ldi	r25, 0xB6	; 182
    47de:	ff 23       	and	r31, r31
    47e0:	81 f0       	breq	.+32     	; 0x4802 <__fp_di2sf+0x28>
    47e2:	12 16       	cp	r1, r18
    47e4:	13 06       	cpc	r1, r19
    47e6:	14 06       	cpc	r1, r20
    47e8:	44 0b       	sbc	r20, r20
    47ea:	93 95       	inc	r25
    47ec:	f6 95       	lsr	r31
    47ee:	87 95       	ror	r24
    47f0:	77 95       	ror	r23
    47f2:	67 95       	ror	r22
    47f4:	57 95       	ror	r21
    47f6:	40 40       	sbci	r20, 0x00	; 0
    47f8:	ff 23       	and	r31, r31
    47fa:	b9 f7       	brne	.-18     	; 0x47ea <__fp_di2sf+0x10>
    47fc:	1b c0       	rjmp	.+54     	; 0x4834 <__fp_di2sf+0x5a>
    47fe:	99 27       	eor	r25, r25
    4800:	08 95       	ret
    4802:	88 23       	and	r24, r24
    4804:	51 f4       	brne	.+20     	; 0x481a <__fp_di2sf+0x40>
    4806:	98 50       	subi	r25, 0x08	; 8
    4808:	d2 f7       	brpl	.-12     	; 0x47fe <__fp_di2sf+0x24>
    480a:	87 2b       	or	r24, r23
    480c:	76 2f       	mov	r23, r22
    480e:	65 2f       	mov	r22, r21
    4810:	54 2f       	mov	r21, r20
    4812:	43 2f       	mov	r20, r19
    4814:	32 2f       	mov	r19, r18
    4816:	20 e0       	ldi	r18, 0x00	; 0
    4818:	b1 f3       	breq	.-20     	; 0x4806 <__fp_di2sf+0x2c>
    481a:	12 16       	cp	r1, r18
    481c:	13 06       	cpc	r1, r19
    481e:	14 06       	cpc	r1, r20
    4820:	44 0b       	sbc	r20, r20
    4822:	88 23       	and	r24, r24
    4824:	3a f0       	brmi	.+14     	; 0x4834 <__fp_di2sf+0x5a>
    4826:	9a 95       	dec	r25
    4828:	44 0f       	add	r20, r20
    482a:	55 1f       	adc	r21, r21
    482c:	66 1f       	adc	r22, r22
    482e:	77 1f       	adc	r23, r23
    4830:	88 1f       	adc	r24, r24
    4832:	ca f7       	brpl	.-14     	; 0x4826 <__fp_di2sf+0x4c>
    4834:	55 23       	and	r21, r21
    4836:	4a f4       	brpl	.+18     	; 0x484a <__fp_di2sf+0x70>
    4838:	44 0f       	add	r20, r20
    483a:	55 1f       	adc	r21, r21
    483c:	11 f4       	brne	.+4      	; 0x4842 <__fp_di2sf+0x68>
    483e:	60 ff       	sbrs	r22, 0
    4840:	04 c0       	rjmp	.+8      	; 0x484a <__fp_di2sf+0x70>
    4842:	6f 5f       	subi	r22, 0xFF	; 255
    4844:	7f 4f       	sbci	r23, 0xFF	; 255
    4846:	8f 4f       	sbci	r24, 0xFF	; 255
    4848:	9f 4f       	sbci	r25, 0xFF	; 255
    484a:	88 0f       	add	r24, r24
    484c:	96 95       	lsr	r25
    484e:	87 95       	ror	r24
    4850:	97 f9       	bld	r25, 7
    4852:	08 95       	ret

00004854 <__fp_inf>:
    4854:	97 f9       	bld	r25, 7
    4856:	9f 67       	ori	r25, 0x7F	; 127
    4858:	80 e8       	ldi	r24, 0x80	; 128
    485a:	70 e0       	ldi	r23, 0x00	; 0
    485c:	60 e0       	ldi	r22, 0x00	; 0
    485e:	08 95       	ret

00004860 <__fp_nan>:
    4860:	9f ef       	ldi	r25, 0xFF	; 255
    4862:	80 ec       	ldi	r24, 0xC0	; 192
    4864:	08 95       	ret

00004866 <__fp_negdi>:
    4866:	90 95       	com	r25
    4868:	80 95       	com	r24
    486a:	70 95       	com	r23
    486c:	60 95       	com	r22
    486e:	50 95       	com	r21
    4870:	40 95       	com	r20
    4872:	30 95       	com	r19
    4874:	21 95       	neg	r18
    4876:	3f 4f       	sbci	r19, 0xFF	; 255
    4878:	4f 4f       	sbci	r20, 0xFF	; 255
    487a:	5f 4f       	sbci	r21, 0xFF	; 255
    487c:	6f 4f       	sbci	r22, 0xFF	; 255
    487e:	7f 4f       	sbci	r23, 0xFF	; 255
    4880:	8f 4f       	sbci	r24, 0xFF	; 255
    4882:	9f 4f       	sbci	r25, 0xFF	; 255
    4884:	08 95       	ret

00004886 <__fp_pscA>:
    4886:	00 24       	eor	r0, r0
    4888:	0a 94       	dec	r0
    488a:	16 16       	cp	r1, r22
    488c:	17 06       	cpc	r1, r23
    488e:	18 06       	cpc	r1, r24
    4890:	09 06       	cpc	r0, r25
    4892:	08 95       	ret

00004894 <__fp_pscB>:
    4894:	00 24       	eor	r0, r0
    4896:	0a 94       	dec	r0
    4898:	12 16       	cp	r1, r18
    489a:	13 06       	cpc	r1, r19
    489c:	14 06       	cpc	r1, r20
    489e:	05 06       	cpc	r0, r21
    48a0:	08 95       	ret

000048a2 <__fp_round>:
    48a2:	09 2e       	mov	r0, r25
    48a4:	03 94       	inc	r0
    48a6:	00 0c       	add	r0, r0
    48a8:	11 f4       	brne	.+4      	; 0x48ae <__fp_round+0xc>
    48aa:	88 23       	and	r24, r24
    48ac:	52 f0       	brmi	.+20     	; 0x48c2 <__fp_round+0x20>
    48ae:	bb 0f       	add	r27, r27
    48b0:	40 f4       	brcc	.+16     	; 0x48c2 <__fp_round+0x20>
    48b2:	bf 2b       	or	r27, r31
    48b4:	11 f4       	brne	.+4      	; 0x48ba <__fp_round+0x18>
    48b6:	60 ff       	sbrs	r22, 0
    48b8:	04 c0       	rjmp	.+8      	; 0x48c2 <__fp_round+0x20>
    48ba:	6f 5f       	subi	r22, 0xFF	; 255
    48bc:	7f 4f       	sbci	r23, 0xFF	; 255
    48be:	8f 4f       	sbci	r24, 0xFF	; 255
    48c0:	9f 4f       	sbci	r25, 0xFF	; 255
    48c2:	08 95       	ret

000048c4 <__fp_split3>:
    48c4:	57 fd       	sbrc	r21, 7
    48c6:	90 58       	subi	r25, 0x80	; 128
    48c8:	44 0f       	add	r20, r20
    48ca:	55 1f       	adc	r21, r21
    48cc:	59 f0       	breq	.+22     	; 0x48e4 <__fp_splitA+0x10>
    48ce:	5f 3f       	cpi	r21, 0xFF	; 255
    48d0:	71 f0       	breq	.+28     	; 0x48ee <__fp_splitA+0x1a>
    48d2:	47 95       	ror	r20

000048d4 <__fp_splitA>:
    48d4:	88 0f       	add	r24, r24
    48d6:	97 fb       	bst	r25, 7
    48d8:	99 1f       	adc	r25, r25
    48da:	61 f0       	breq	.+24     	; 0x48f4 <__fp_splitA+0x20>
    48dc:	9f 3f       	cpi	r25, 0xFF	; 255
    48de:	79 f0       	breq	.+30     	; 0x48fe <__fp_splitA+0x2a>
    48e0:	87 95       	ror	r24
    48e2:	08 95       	ret
    48e4:	12 16       	cp	r1, r18
    48e6:	13 06       	cpc	r1, r19
    48e8:	14 06       	cpc	r1, r20
    48ea:	55 1f       	adc	r21, r21
    48ec:	f2 cf       	rjmp	.-28     	; 0x48d2 <__fp_split3+0xe>
    48ee:	46 95       	lsr	r20
    48f0:	f1 df       	rcall	.-30     	; 0x48d4 <__fp_splitA>
    48f2:	08 c0       	rjmp	.+16     	; 0x4904 <__fp_splitA+0x30>
    48f4:	16 16       	cp	r1, r22
    48f6:	17 06       	cpc	r1, r23
    48f8:	18 06       	cpc	r1, r24
    48fa:	99 1f       	adc	r25, r25
    48fc:	f1 cf       	rjmp	.-30     	; 0x48e0 <__fp_splitA+0xc>
    48fe:	86 95       	lsr	r24
    4900:	71 05       	cpc	r23, r1
    4902:	61 05       	cpc	r22, r1
    4904:	08 94       	sec
    4906:	08 95       	ret

00004908 <__fp_zero>:
    4908:	e8 94       	clt

0000490a <__fp_szero>:
    490a:	bb 27       	eor	r27, r27
    490c:	66 27       	eor	r22, r22
    490e:	77 27       	eor	r23, r23
    4910:	cb 01       	movw	r24, r22
    4912:	97 f9       	bld	r25, 7
    4914:	08 95       	ret

00004916 <__mulsf3>:
    4916:	0b d0       	rcall	.+22     	; 0x492e <__mulsf3x>
    4918:	c4 cf       	rjmp	.-120    	; 0x48a2 <__fp_round>
    491a:	b5 df       	rcall	.-150    	; 0x4886 <__fp_pscA>
    491c:	28 f0       	brcs	.+10     	; 0x4928 <__mulsf3+0x12>
    491e:	ba df       	rcall	.-140    	; 0x4894 <__fp_pscB>
    4920:	18 f0       	brcs	.+6      	; 0x4928 <__mulsf3+0x12>
    4922:	95 23       	and	r25, r21
    4924:	09 f0       	breq	.+2      	; 0x4928 <__mulsf3+0x12>
    4926:	96 cf       	rjmp	.-212    	; 0x4854 <__fp_inf>
    4928:	9b cf       	rjmp	.-202    	; 0x4860 <__fp_nan>
    492a:	11 24       	eor	r1, r1
    492c:	ee cf       	rjmp	.-36     	; 0x490a <__fp_szero>

0000492e <__mulsf3x>:
    492e:	ca df       	rcall	.-108    	; 0x48c4 <__fp_split3>
    4930:	a0 f3       	brcs	.-24     	; 0x491a <__mulsf3+0x4>

00004932 <__mulsf3_pse>:
    4932:	95 9f       	mul	r25, r21
    4934:	d1 f3       	breq	.-12     	; 0x492a <__mulsf3+0x14>
    4936:	95 0f       	add	r25, r21
    4938:	50 e0       	ldi	r21, 0x00	; 0
    493a:	55 1f       	adc	r21, r21
    493c:	62 9f       	mul	r22, r18
    493e:	f0 01       	movw	r30, r0
    4940:	72 9f       	mul	r23, r18
    4942:	bb 27       	eor	r27, r27
    4944:	f0 0d       	add	r31, r0
    4946:	b1 1d       	adc	r27, r1
    4948:	63 9f       	mul	r22, r19
    494a:	aa 27       	eor	r26, r26
    494c:	f0 0d       	add	r31, r0
    494e:	b1 1d       	adc	r27, r1
    4950:	aa 1f       	adc	r26, r26
    4952:	64 9f       	mul	r22, r20
    4954:	66 27       	eor	r22, r22
    4956:	b0 0d       	add	r27, r0
    4958:	a1 1d       	adc	r26, r1
    495a:	66 1f       	adc	r22, r22
    495c:	82 9f       	mul	r24, r18
    495e:	22 27       	eor	r18, r18
    4960:	b0 0d       	add	r27, r0
    4962:	a1 1d       	adc	r26, r1
    4964:	62 1f       	adc	r22, r18
    4966:	73 9f       	mul	r23, r19
    4968:	b0 0d       	add	r27, r0
    496a:	a1 1d       	adc	r26, r1
    496c:	62 1f       	adc	r22, r18
    496e:	83 9f       	mul	r24, r19
    4970:	a0 0d       	add	r26, r0
    4972:	61 1d       	adc	r22, r1
    4974:	22 1f       	adc	r18, r18
    4976:	74 9f       	mul	r23, r20
    4978:	33 27       	eor	r19, r19
    497a:	a0 0d       	add	r26, r0
    497c:	61 1d       	adc	r22, r1
    497e:	23 1f       	adc	r18, r19
    4980:	84 9f       	mul	r24, r20
    4982:	60 0d       	add	r22, r0
    4984:	21 1d       	adc	r18, r1
    4986:	82 2f       	mov	r24, r18
    4988:	76 2f       	mov	r23, r22
    498a:	6a 2f       	mov	r22, r26
    498c:	11 24       	eor	r1, r1
    498e:	9f 57       	subi	r25, 0x7F	; 127
    4990:	50 40       	sbci	r21, 0x00	; 0
    4992:	8a f0       	brmi	.+34     	; 0x49b6 <__mulsf3_pse+0x84>
    4994:	e1 f0       	breq	.+56     	; 0x49ce <__mulsf3_pse+0x9c>
    4996:	88 23       	and	r24, r24
    4998:	4a f0       	brmi	.+18     	; 0x49ac <__mulsf3_pse+0x7a>
    499a:	ee 0f       	add	r30, r30
    499c:	ff 1f       	adc	r31, r31
    499e:	bb 1f       	adc	r27, r27
    49a0:	66 1f       	adc	r22, r22
    49a2:	77 1f       	adc	r23, r23
    49a4:	88 1f       	adc	r24, r24
    49a6:	91 50       	subi	r25, 0x01	; 1
    49a8:	50 40       	sbci	r21, 0x00	; 0
    49aa:	a9 f7       	brne	.-22     	; 0x4996 <__mulsf3_pse+0x64>
    49ac:	9e 3f       	cpi	r25, 0xFE	; 254
    49ae:	51 05       	cpc	r21, r1
    49b0:	70 f0       	brcs	.+28     	; 0x49ce <__mulsf3_pse+0x9c>
    49b2:	50 cf       	rjmp	.-352    	; 0x4854 <__fp_inf>
    49b4:	aa cf       	rjmp	.-172    	; 0x490a <__fp_szero>
    49b6:	5f 3f       	cpi	r21, 0xFF	; 255
    49b8:	ec f3       	brlt	.-6      	; 0x49b4 <__mulsf3_pse+0x82>
    49ba:	98 3e       	cpi	r25, 0xE8	; 232
    49bc:	dc f3       	brlt	.-10     	; 0x49b4 <__mulsf3_pse+0x82>
    49be:	86 95       	lsr	r24
    49c0:	77 95       	ror	r23
    49c2:	67 95       	ror	r22
    49c4:	b7 95       	ror	r27
    49c6:	f7 95       	ror	r31
    49c8:	e7 95       	ror	r30
    49ca:	9f 5f       	subi	r25, 0xFF	; 255
    49cc:	c1 f7       	brne	.-16     	; 0x49be <__mulsf3_pse+0x8c>
    49ce:	fe 2b       	or	r31, r30
    49d0:	88 0f       	add	r24, r24
    49d2:	91 1d       	adc	r25, r1
    49d4:	96 95       	lsr	r25
    49d6:	87 95       	ror	r24
    49d8:	97 f9       	bld	r25, 7
    49da:	08 95       	ret

000049dc <__udivmodhi4>:
    49dc:	aa 1b       	sub	r26, r26
    49de:	bb 1b       	sub	r27, r27
    49e0:	51 e1       	ldi	r21, 0x11	; 17
    49e2:	07 c0       	rjmp	.+14     	; 0x49f2 <__udivmodhi4_ep>

000049e4 <__udivmodhi4_loop>:
    49e4:	aa 1f       	adc	r26, r26
    49e6:	bb 1f       	adc	r27, r27
    49e8:	a6 17       	cp	r26, r22
    49ea:	b7 07       	cpc	r27, r23
    49ec:	10 f0       	brcs	.+4      	; 0x49f2 <__udivmodhi4_ep>
    49ee:	a6 1b       	sub	r26, r22
    49f0:	b7 0b       	sbc	r27, r23

000049f2 <__udivmodhi4_ep>:
    49f2:	88 1f       	adc	r24, r24
    49f4:	99 1f       	adc	r25, r25
    49f6:	5a 95       	dec	r21
    49f8:	a9 f7       	brne	.-22     	; 0x49e4 <__udivmodhi4_loop>
    49fa:	80 95       	com	r24
    49fc:	90 95       	com	r25
    49fe:	bc 01       	movw	r22, r24
    4a00:	cd 01       	movw	r24, r26
    4a02:	08 95       	ret

00004a04 <__udivmodsi4>:
    4a04:	a1 e2       	ldi	r26, 0x21	; 33
    4a06:	1a 2e       	mov	r1, r26
    4a08:	aa 1b       	sub	r26, r26
    4a0a:	bb 1b       	sub	r27, r27
    4a0c:	fd 01       	movw	r30, r26
    4a0e:	0d c0       	rjmp	.+26     	; 0x4a2a <__udivmodsi4_ep>

00004a10 <__udivmodsi4_loop>:
    4a10:	aa 1f       	adc	r26, r26
    4a12:	bb 1f       	adc	r27, r27
    4a14:	ee 1f       	adc	r30, r30
    4a16:	ff 1f       	adc	r31, r31
    4a18:	a2 17       	cp	r26, r18
    4a1a:	b3 07       	cpc	r27, r19
    4a1c:	e4 07       	cpc	r30, r20
    4a1e:	f5 07       	cpc	r31, r21
    4a20:	20 f0       	brcs	.+8      	; 0x4a2a <__udivmodsi4_ep>
    4a22:	a2 1b       	sub	r26, r18
    4a24:	b3 0b       	sbc	r27, r19
    4a26:	e4 0b       	sbc	r30, r20
    4a28:	f5 0b       	sbc	r31, r21

00004a2a <__udivmodsi4_ep>:
    4a2a:	66 1f       	adc	r22, r22
    4a2c:	77 1f       	adc	r23, r23
    4a2e:	88 1f       	adc	r24, r24
    4a30:	99 1f       	adc	r25, r25
    4a32:	1a 94       	dec	r1
    4a34:	69 f7       	brne	.-38     	; 0x4a10 <__udivmodsi4_loop>
    4a36:	60 95       	com	r22
    4a38:	70 95       	com	r23
    4a3a:	80 95       	com	r24
    4a3c:	90 95       	com	r25
    4a3e:	9b 01       	movw	r18, r22
    4a40:	ac 01       	movw	r20, r24
    4a42:	bd 01       	movw	r22, r26
    4a44:	cf 01       	movw	r24, r30
    4a46:	08 95       	ret

00004a48 <__tablejump2__>:
    4a48:	ee 0f       	add	r30, r30
    4a4a:	ff 1f       	adc	r31, r31

00004a4c <__tablejump__>:
    4a4c:	05 90       	lpm	r0, Z+
    4a4e:	f4 91       	lpm	r31, Z
    4a50:	e0 2d       	mov	r30, r0
    4a52:	09 94       	ijmp

00004a54 <__muldi3>:
    4a54:	df 93       	push	r29
    4a56:	cf 93       	push	r28
    4a58:	1f 93       	push	r17
    4a5a:	0f 93       	push	r16
    4a5c:	9a 9d       	mul	r25, r10
    4a5e:	f0 2d       	mov	r31, r0
    4a60:	21 9f       	mul	r18, r17
    4a62:	f0 0d       	add	r31, r0
    4a64:	8b 9d       	mul	r24, r11
    4a66:	f0 0d       	add	r31, r0
    4a68:	8a 9d       	mul	r24, r10
    4a6a:	e0 2d       	mov	r30, r0
    4a6c:	f1 0d       	add	r31, r1
    4a6e:	03 9f       	mul	r16, r19
    4a70:	f0 0d       	add	r31, r0
    4a72:	02 9f       	mul	r16, r18
    4a74:	e0 0d       	add	r30, r0
    4a76:	f1 1d       	adc	r31, r1
    4a78:	4e 9d       	mul	r20, r14
    4a7a:	e0 0d       	add	r30, r0
    4a7c:	f1 1d       	adc	r31, r1
    4a7e:	5e 9d       	mul	r21, r14
    4a80:	f0 0d       	add	r31, r0
    4a82:	4f 9d       	mul	r20, r15
    4a84:	f0 0d       	add	r31, r0
    4a86:	7f 93       	push	r23
    4a88:	6f 93       	push	r22
    4a8a:	bf 92       	push	r11
    4a8c:	af 92       	push	r10
    4a8e:	5f 93       	push	r21
    4a90:	4f 93       	push	r20
    4a92:	d5 01       	movw	r26, r10
    4a94:	67 d0       	rcall	.+206    	; 0x4b64 <__umulhisi3>
    4a96:	8b 01       	movw	r16, r22
    4a98:	ac 01       	movw	r20, r24
    4a9a:	d7 01       	movw	r26, r14
    4a9c:	63 d0       	rcall	.+198    	; 0x4b64 <__umulhisi3>
    4a9e:	eb 01       	movw	r28, r22
    4aa0:	e8 0f       	add	r30, r24
    4aa2:	f9 1f       	adc	r31, r25
    4aa4:	d6 01       	movw	r26, r12
    4aa6:	1f d0       	rcall	.+62     	; 0x4ae6 <__muldi3_6>
    4aa8:	2f 91       	pop	r18
    4aaa:	3f 91       	pop	r19
    4aac:	d6 01       	movw	r26, r12
    4aae:	5a d0       	rcall	.+180    	; 0x4b64 <__umulhisi3>
    4ab0:	c6 0f       	add	r28, r22
    4ab2:	d7 1f       	adc	r29, r23
    4ab4:	e8 1f       	adc	r30, r24
    4ab6:	f9 1f       	adc	r31, r25
    4ab8:	af 91       	pop	r26
    4aba:	bf 91       	pop	r27
    4abc:	14 d0       	rcall	.+40     	; 0x4ae6 <__muldi3_6>
    4abe:	2f 91       	pop	r18
    4ac0:	3f 91       	pop	r19
    4ac2:	50 d0       	rcall	.+160    	; 0x4b64 <__umulhisi3>
    4ac4:	c6 0f       	add	r28, r22
    4ac6:	d7 1f       	adc	r29, r23
    4ac8:	e8 1f       	adc	r30, r24
    4aca:	f9 1f       	adc	r31, r25
    4acc:	d6 01       	movw	r26, r12
    4ace:	4a d0       	rcall	.+148    	; 0x4b64 <__umulhisi3>
    4ad0:	e6 0f       	add	r30, r22
    4ad2:	f7 1f       	adc	r31, r23
    4ad4:	98 01       	movw	r18, r16
    4ad6:	be 01       	movw	r22, r28
    4ad8:	cf 01       	movw	r24, r30
    4ada:	11 24       	eor	r1, r1
    4adc:	0f 91       	pop	r16
    4ade:	1f 91       	pop	r17
    4ae0:	cf 91       	pop	r28
    4ae2:	df 91       	pop	r29
    4ae4:	08 95       	ret

00004ae6 <__muldi3_6>:
    4ae6:	3e d0       	rcall	.+124    	; 0x4b64 <__umulhisi3>
    4ae8:	46 0f       	add	r20, r22
    4aea:	57 1f       	adc	r21, r23
    4aec:	c8 1f       	adc	r28, r24
    4aee:	d9 1f       	adc	r29, r25
    4af0:	08 f4       	brcc	.+2      	; 0x4af4 <__muldi3_6+0xe>
    4af2:	31 96       	adiw	r30, 0x01	; 1
    4af4:	08 95       	ret

00004af6 <__ashldi3>:
    4af6:	0f 93       	push	r16
    4af8:	08 30       	cpi	r16, 0x08	; 8
    4afa:	90 f0       	brcs	.+36     	; 0x4b20 <__ashldi3+0x2a>
    4afc:	98 2f       	mov	r25, r24
    4afe:	87 2f       	mov	r24, r23
    4b00:	76 2f       	mov	r23, r22
    4b02:	65 2f       	mov	r22, r21
    4b04:	54 2f       	mov	r21, r20
    4b06:	43 2f       	mov	r20, r19
    4b08:	32 2f       	mov	r19, r18
    4b0a:	22 27       	eor	r18, r18
    4b0c:	08 50       	subi	r16, 0x08	; 8
    4b0e:	f4 cf       	rjmp	.-24     	; 0x4af8 <__ashldi3+0x2>
    4b10:	22 0f       	add	r18, r18
    4b12:	33 1f       	adc	r19, r19
    4b14:	44 1f       	adc	r20, r20
    4b16:	55 1f       	adc	r21, r21
    4b18:	66 1f       	adc	r22, r22
    4b1a:	77 1f       	adc	r23, r23
    4b1c:	88 1f       	adc	r24, r24
    4b1e:	99 1f       	adc	r25, r25
    4b20:	0a 95       	dec	r16
    4b22:	b2 f7       	brpl	.-20     	; 0x4b10 <__ashldi3+0x1a>
    4b24:	0f 91       	pop	r16
    4b26:	08 95       	ret

00004b28 <__ashrdi3>:
    4b28:	97 fb       	bst	r25, 7
    4b2a:	10 f8       	bld	r1, 0

00004b2c <__lshrdi3>:
    4b2c:	16 94       	lsr	r1
    4b2e:	00 08       	sbc	r0, r0
    4b30:	0f 93       	push	r16
    4b32:	08 30       	cpi	r16, 0x08	; 8
    4b34:	98 f0       	brcs	.+38     	; 0x4b5c <__lshrdi3+0x30>
    4b36:	08 50       	subi	r16, 0x08	; 8
    4b38:	23 2f       	mov	r18, r19
    4b3a:	34 2f       	mov	r19, r20
    4b3c:	45 2f       	mov	r20, r21
    4b3e:	56 2f       	mov	r21, r22
    4b40:	67 2f       	mov	r22, r23
    4b42:	78 2f       	mov	r23, r24
    4b44:	89 2f       	mov	r24, r25
    4b46:	90 2d       	mov	r25, r0
    4b48:	f4 cf       	rjmp	.-24     	; 0x4b32 <__lshrdi3+0x6>
    4b4a:	05 94       	asr	r0
    4b4c:	97 95       	ror	r25
    4b4e:	87 95       	ror	r24
    4b50:	77 95       	ror	r23
    4b52:	67 95       	ror	r22
    4b54:	57 95       	ror	r21
    4b56:	47 95       	ror	r20
    4b58:	37 95       	ror	r19
    4b5a:	27 95       	ror	r18
    4b5c:	0a 95       	dec	r16
    4b5e:	aa f7       	brpl	.-22     	; 0x4b4a <__lshrdi3+0x1e>
    4b60:	0f 91       	pop	r16
    4b62:	08 95       	ret

00004b64 <__umulhisi3>:
    4b64:	a2 9f       	mul	r26, r18
    4b66:	b0 01       	movw	r22, r0
    4b68:	b3 9f       	mul	r27, r19
    4b6a:	c0 01       	movw	r24, r0
    4b6c:	a3 9f       	mul	r26, r19
    4b6e:	70 0d       	add	r23, r0
    4b70:	81 1d       	adc	r24, r1
    4b72:	11 24       	eor	r1, r1
    4b74:	91 1d       	adc	r25, r1
    4b76:	b2 9f       	mul	r27, r18
    4b78:	70 0d       	add	r23, r0
    4b7a:	81 1d       	adc	r24, r1
    4b7c:	11 24       	eor	r1, r1
    4b7e:	91 1d       	adc	r25, r1
    4b80:	08 95       	ret

00004b82 <memcmp>:
    4b82:	fb 01       	movw	r30, r22
    4b84:	dc 01       	movw	r26, r24
    4b86:	04 c0       	rjmp	.+8      	; 0x4b90 <memcmp+0xe>
    4b88:	8d 91       	ld	r24, X+
    4b8a:	01 90       	ld	r0, Z+
    4b8c:	80 19       	sub	r24, r0
    4b8e:	21 f4       	brne	.+8      	; 0x4b98 <memcmp+0x16>
    4b90:	41 50       	subi	r20, 0x01	; 1
    4b92:	50 40       	sbci	r21, 0x00	; 0
    4b94:	c8 f7       	brcc	.-14     	; 0x4b88 <memcmp+0x6>
    4b96:	88 1b       	sub	r24, r24
    4b98:	99 0b       	sbc	r25, r25
    4b9a:	08 95       	ret

00004b9c <memcpy>:
    4b9c:	fb 01       	movw	r30, r22
    4b9e:	dc 01       	movw	r26, r24
    4ba0:	02 c0       	rjmp	.+4      	; 0x4ba6 <memcpy+0xa>
    4ba2:	01 90       	ld	r0, Z+
    4ba4:	0d 92       	st	X+, r0
    4ba6:	41 50       	subi	r20, 0x01	; 1
    4ba8:	50 40       	sbci	r21, 0x00	; 0
    4baa:	d8 f7       	brcc	.-10     	; 0x4ba2 <memcpy+0x6>
    4bac:	08 95       	ret

00004bae <printf>:
    4bae:	a0 e0       	ldi	r26, 0x00	; 0
    4bb0:	b0 e0       	ldi	r27, 0x00	; 0
    4bb2:	ec ed       	ldi	r30, 0xDC	; 220
    4bb4:	f5 e2       	ldi	r31, 0x25	; 37
    4bb6:	b2 c2       	rjmp	.+1380   	; 0x511c <__prologue_saves__+0x20>
    4bb8:	fe 01       	movw	r30, r28
    4bba:	35 96       	adiw	r30, 0x05	; 5
    4bbc:	61 91       	ld	r22, Z+
    4bbe:	71 91       	ld	r23, Z+
    4bc0:	af 01       	movw	r20, r30
    4bc2:	80 91 1f 27 	lds	r24, 0x271F
    4bc6:	90 91 20 27 	lds	r25, 0x2720
    4bca:	2f d0       	rcall	.+94     	; 0x4c2a <vfprintf>
    4bcc:	e2 e0       	ldi	r30, 0x02	; 2
    4bce:	bf c2       	rjmp	.+1406   	; 0x514e <__epilogue_restores__+0x20>

00004bd0 <puts>:
    4bd0:	0f 93       	push	r16
    4bd2:	1f 93       	push	r17
    4bd4:	cf 93       	push	r28
    4bd6:	df 93       	push	r29
    4bd8:	e0 91 1f 27 	lds	r30, 0x271F
    4bdc:	f0 91 20 27 	lds	r31, 0x2720
    4be0:	23 81       	ldd	r18, Z+3	; 0x03
    4be2:	21 ff       	sbrs	r18, 1
    4be4:	1b c0       	rjmp	.+54     	; 0x4c1c <puts+0x4c>
    4be6:	ec 01       	movw	r28, r24
    4be8:	00 e0       	ldi	r16, 0x00	; 0
    4bea:	10 e0       	ldi	r17, 0x00	; 0
    4bec:	89 91       	ld	r24, Y+
    4bee:	60 91 1f 27 	lds	r22, 0x271F
    4bf2:	70 91 20 27 	lds	r23, 0x2720
    4bf6:	db 01       	movw	r26, r22
    4bf8:	18 96       	adiw	r26, 0x08	; 8
    4bfa:	ed 91       	ld	r30, X+
    4bfc:	fc 91       	ld	r31, X
    4bfe:	19 97       	sbiw	r26, 0x09	; 9
    4c00:	88 23       	and	r24, r24
    4c02:	31 f0       	breq	.+12     	; 0x4c10 <puts+0x40>
    4c04:	09 95       	icall
    4c06:	89 2b       	or	r24, r25
    4c08:	89 f3       	breq	.-30     	; 0x4bec <puts+0x1c>
    4c0a:	0f ef       	ldi	r16, 0xFF	; 255
    4c0c:	1f ef       	ldi	r17, 0xFF	; 255
    4c0e:	ee cf       	rjmp	.-36     	; 0x4bec <puts+0x1c>
    4c10:	8a e0       	ldi	r24, 0x0A	; 10
    4c12:	09 95       	icall
    4c14:	89 2b       	or	r24, r25
    4c16:	11 f4       	brne	.+4      	; 0x4c1c <puts+0x4c>
    4c18:	c8 01       	movw	r24, r16
    4c1a:	02 c0       	rjmp	.+4      	; 0x4c20 <puts+0x50>
    4c1c:	8f ef       	ldi	r24, 0xFF	; 255
    4c1e:	9f ef       	ldi	r25, 0xFF	; 255
    4c20:	df 91       	pop	r29
    4c22:	cf 91       	pop	r28
    4c24:	1f 91       	pop	r17
    4c26:	0f 91       	pop	r16
    4c28:	08 95       	ret

00004c2a <vfprintf>:
    4c2a:	ac e0       	ldi	r26, 0x0C	; 12
    4c2c:	b0 e0       	ldi	r27, 0x00	; 0
    4c2e:	ea e1       	ldi	r30, 0x1A	; 26
    4c30:	f6 e2       	ldi	r31, 0x26	; 38
    4c32:	64 c2       	rjmp	.+1224   	; 0x50fc <__prologue_saves__>
    4c34:	7c 01       	movw	r14, r24
    4c36:	6b 01       	movw	r12, r22
    4c38:	8a 01       	movw	r16, r20
    4c3a:	fc 01       	movw	r30, r24
    4c3c:	16 82       	std	Z+6, r1	; 0x06
    4c3e:	17 82       	std	Z+7, r1	; 0x07
    4c40:	83 81       	ldd	r24, Z+3	; 0x03
    4c42:	81 ff       	sbrs	r24, 1
    4c44:	b0 c1       	rjmp	.+864    	; 0x4fa6 <vfprintf+0x37c>
    4c46:	ce 01       	movw	r24, r28
    4c48:	01 96       	adiw	r24, 0x01	; 1
    4c4a:	4c 01       	movw	r8, r24
    4c4c:	f7 01       	movw	r30, r14
    4c4e:	93 81       	ldd	r25, Z+3	; 0x03
    4c50:	f6 01       	movw	r30, r12
    4c52:	93 fd       	sbrc	r25, 3
    4c54:	85 91       	lpm	r24, Z+
    4c56:	93 ff       	sbrs	r25, 3
    4c58:	81 91       	ld	r24, Z+
    4c5a:	6f 01       	movw	r12, r30
    4c5c:	88 23       	and	r24, r24
    4c5e:	09 f4       	brne	.+2      	; 0x4c62 <vfprintf+0x38>
    4c60:	9e c1       	rjmp	.+828    	; 0x4f9e <vfprintf+0x374>
    4c62:	85 32       	cpi	r24, 0x25	; 37
    4c64:	39 f4       	brne	.+14     	; 0x4c74 <vfprintf+0x4a>
    4c66:	93 fd       	sbrc	r25, 3
    4c68:	85 91       	lpm	r24, Z+
    4c6a:	93 ff       	sbrs	r25, 3
    4c6c:	81 91       	ld	r24, Z+
    4c6e:	6f 01       	movw	r12, r30
    4c70:	85 32       	cpi	r24, 0x25	; 37
    4c72:	21 f4       	brne	.+8      	; 0x4c7c <vfprintf+0x52>
    4c74:	b7 01       	movw	r22, r14
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	b1 d1       	rcall	.+866    	; 0x4fdc <fputc>
    4c7a:	e8 cf       	rjmp	.-48     	; 0x4c4c <vfprintf+0x22>
    4c7c:	51 2c       	mov	r5, r1
    4c7e:	31 2c       	mov	r3, r1
    4c80:	20 e0       	ldi	r18, 0x00	; 0
    4c82:	20 32       	cpi	r18, 0x20	; 32
    4c84:	a0 f4       	brcc	.+40     	; 0x4cae <vfprintf+0x84>
    4c86:	8b 32       	cpi	r24, 0x2B	; 43
    4c88:	69 f0       	breq	.+26     	; 0x4ca4 <vfprintf+0x7a>
    4c8a:	30 f4       	brcc	.+12     	; 0x4c98 <vfprintf+0x6e>
    4c8c:	80 32       	cpi	r24, 0x20	; 32
    4c8e:	59 f0       	breq	.+22     	; 0x4ca6 <vfprintf+0x7c>
    4c90:	83 32       	cpi	r24, 0x23	; 35
    4c92:	69 f4       	brne	.+26     	; 0x4cae <vfprintf+0x84>
    4c94:	20 61       	ori	r18, 0x10	; 16
    4c96:	2c c0       	rjmp	.+88     	; 0x4cf0 <vfprintf+0xc6>
    4c98:	8d 32       	cpi	r24, 0x2D	; 45
    4c9a:	39 f0       	breq	.+14     	; 0x4caa <vfprintf+0x80>
    4c9c:	80 33       	cpi	r24, 0x30	; 48
    4c9e:	39 f4       	brne	.+14     	; 0x4cae <vfprintf+0x84>
    4ca0:	21 60       	ori	r18, 0x01	; 1
    4ca2:	26 c0       	rjmp	.+76     	; 0x4cf0 <vfprintf+0xc6>
    4ca4:	22 60       	ori	r18, 0x02	; 2
    4ca6:	24 60       	ori	r18, 0x04	; 4
    4ca8:	23 c0       	rjmp	.+70     	; 0x4cf0 <vfprintf+0xc6>
    4caa:	28 60       	ori	r18, 0x08	; 8
    4cac:	21 c0       	rjmp	.+66     	; 0x4cf0 <vfprintf+0xc6>
    4cae:	27 fd       	sbrc	r18, 7
    4cb0:	27 c0       	rjmp	.+78     	; 0x4d00 <vfprintf+0xd6>
    4cb2:	30 ed       	ldi	r19, 0xD0	; 208
    4cb4:	38 0f       	add	r19, r24
    4cb6:	3a 30       	cpi	r19, 0x0A	; 10
    4cb8:	78 f4       	brcc	.+30     	; 0x4cd8 <vfprintf+0xae>
    4cba:	26 ff       	sbrs	r18, 6
    4cbc:	06 c0       	rjmp	.+12     	; 0x4cca <vfprintf+0xa0>
    4cbe:	fa e0       	ldi	r31, 0x0A	; 10
    4cc0:	5f 9e       	mul	r5, r31
    4cc2:	30 0d       	add	r19, r0
    4cc4:	11 24       	eor	r1, r1
    4cc6:	53 2e       	mov	r5, r19
    4cc8:	13 c0       	rjmp	.+38     	; 0x4cf0 <vfprintf+0xc6>
    4cca:	8a e0       	ldi	r24, 0x0A	; 10
    4ccc:	38 9e       	mul	r3, r24
    4cce:	30 0d       	add	r19, r0
    4cd0:	11 24       	eor	r1, r1
    4cd2:	33 2e       	mov	r3, r19
    4cd4:	20 62       	ori	r18, 0x20	; 32
    4cd6:	0c c0       	rjmp	.+24     	; 0x4cf0 <vfprintf+0xc6>
    4cd8:	8e 32       	cpi	r24, 0x2E	; 46
    4cda:	21 f4       	brne	.+8      	; 0x4ce4 <vfprintf+0xba>
    4cdc:	26 fd       	sbrc	r18, 6
    4cde:	5f c1       	rjmp	.+702    	; 0x4f9e <vfprintf+0x374>
    4ce0:	20 64       	ori	r18, 0x40	; 64
    4ce2:	06 c0       	rjmp	.+12     	; 0x4cf0 <vfprintf+0xc6>
    4ce4:	8c 36       	cpi	r24, 0x6C	; 108
    4ce6:	11 f4       	brne	.+4      	; 0x4cec <vfprintf+0xc2>
    4ce8:	20 68       	ori	r18, 0x80	; 128
    4cea:	02 c0       	rjmp	.+4      	; 0x4cf0 <vfprintf+0xc6>
    4cec:	88 36       	cpi	r24, 0x68	; 104
    4cee:	41 f4       	brne	.+16     	; 0x4d00 <vfprintf+0xd6>
    4cf0:	f6 01       	movw	r30, r12
    4cf2:	93 fd       	sbrc	r25, 3
    4cf4:	85 91       	lpm	r24, Z+
    4cf6:	93 ff       	sbrs	r25, 3
    4cf8:	81 91       	ld	r24, Z+
    4cfa:	6f 01       	movw	r12, r30
    4cfc:	81 11       	cpse	r24, r1
    4cfe:	c1 cf       	rjmp	.-126    	; 0x4c82 <vfprintf+0x58>
    4d00:	98 2f       	mov	r25, r24
    4d02:	9f 7d       	andi	r25, 0xDF	; 223
    4d04:	95 54       	subi	r25, 0x45	; 69
    4d06:	93 30       	cpi	r25, 0x03	; 3
    4d08:	28 f4       	brcc	.+10     	; 0x4d14 <vfprintf+0xea>
    4d0a:	0c 5f       	subi	r16, 0xFC	; 252
    4d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d0e:	ff e3       	ldi	r31, 0x3F	; 63
    4d10:	f9 83       	std	Y+1, r31	; 0x01
    4d12:	0d c0       	rjmp	.+26     	; 0x4d2e <vfprintf+0x104>
    4d14:	83 36       	cpi	r24, 0x63	; 99
    4d16:	31 f0       	breq	.+12     	; 0x4d24 <vfprintf+0xfa>
    4d18:	83 37       	cpi	r24, 0x73	; 115
    4d1a:	71 f0       	breq	.+28     	; 0x4d38 <vfprintf+0x10e>
    4d1c:	83 35       	cpi	r24, 0x53	; 83
    4d1e:	09 f0       	breq	.+2      	; 0x4d22 <vfprintf+0xf8>
    4d20:	57 c0       	rjmp	.+174    	; 0x4dd0 <vfprintf+0x1a6>
    4d22:	21 c0       	rjmp	.+66     	; 0x4d66 <vfprintf+0x13c>
    4d24:	f8 01       	movw	r30, r16
    4d26:	80 81       	ld	r24, Z
    4d28:	89 83       	std	Y+1, r24	; 0x01
    4d2a:	0e 5f       	subi	r16, 0xFE	; 254
    4d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d2e:	44 24       	eor	r4, r4
    4d30:	43 94       	inc	r4
    4d32:	51 2c       	mov	r5, r1
    4d34:	54 01       	movw	r10, r8
    4d36:	14 c0       	rjmp	.+40     	; 0x4d60 <vfprintf+0x136>
    4d38:	38 01       	movw	r6, r16
    4d3a:	f2 e0       	ldi	r31, 0x02	; 2
    4d3c:	6f 0e       	add	r6, r31
    4d3e:	71 1c       	adc	r7, r1
    4d40:	f8 01       	movw	r30, r16
    4d42:	a0 80       	ld	r10, Z
    4d44:	b1 80       	ldd	r11, Z+1	; 0x01
    4d46:	26 ff       	sbrs	r18, 6
    4d48:	03 c0       	rjmp	.+6      	; 0x4d50 <vfprintf+0x126>
    4d4a:	65 2d       	mov	r22, r5
    4d4c:	70 e0       	ldi	r23, 0x00	; 0
    4d4e:	02 c0       	rjmp	.+4      	; 0x4d54 <vfprintf+0x12a>
    4d50:	6f ef       	ldi	r22, 0xFF	; 255
    4d52:	7f ef       	ldi	r23, 0xFF	; 255
    4d54:	c5 01       	movw	r24, r10
    4d56:	2c 87       	std	Y+12, r18	; 0x0c
    4d58:	36 d1       	rcall	.+620    	; 0x4fc6 <strnlen>
    4d5a:	2c 01       	movw	r4, r24
    4d5c:	83 01       	movw	r16, r6
    4d5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4d60:	2f 77       	andi	r18, 0x7F	; 127
    4d62:	22 2e       	mov	r2, r18
    4d64:	16 c0       	rjmp	.+44     	; 0x4d92 <vfprintf+0x168>
    4d66:	38 01       	movw	r6, r16
    4d68:	f2 e0       	ldi	r31, 0x02	; 2
    4d6a:	6f 0e       	add	r6, r31
    4d6c:	71 1c       	adc	r7, r1
    4d6e:	f8 01       	movw	r30, r16
    4d70:	a0 80       	ld	r10, Z
    4d72:	b1 80       	ldd	r11, Z+1	; 0x01
    4d74:	26 ff       	sbrs	r18, 6
    4d76:	03 c0       	rjmp	.+6      	; 0x4d7e <vfprintf+0x154>
    4d78:	65 2d       	mov	r22, r5
    4d7a:	70 e0       	ldi	r23, 0x00	; 0
    4d7c:	02 c0       	rjmp	.+4      	; 0x4d82 <vfprintf+0x158>
    4d7e:	6f ef       	ldi	r22, 0xFF	; 255
    4d80:	7f ef       	ldi	r23, 0xFF	; 255
    4d82:	c5 01       	movw	r24, r10
    4d84:	2c 87       	std	Y+12, r18	; 0x0c
    4d86:	14 d1       	rcall	.+552    	; 0x4fb0 <strnlen_P>
    4d88:	2c 01       	movw	r4, r24
    4d8a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4d8c:	20 68       	ori	r18, 0x80	; 128
    4d8e:	22 2e       	mov	r2, r18
    4d90:	83 01       	movw	r16, r6
    4d92:	23 fc       	sbrc	r2, 3
    4d94:	19 c0       	rjmp	.+50     	; 0x4dc8 <vfprintf+0x19e>
    4d96:	83 2d       	mov	r24, r3
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	48 16       	cp	r4, r24
    4d9c:	59 06       	cpc	r5, r25
    4d9e:	a0 f4       	brcc	.+40     	; 0x4dc8 <vfprintf+0x19e>
    4da0:	b7 01       	movw	r22, r14
    4da2:	80 e2       	ldi	r24, 0x20	; 32
    4da4:	90 e0       	ldi	r25, 0x00	; 0
    4da6:	1a d1       	rcall	.+564    	; 0x4fdc <fputc>
    4da8:	3a 94       	dec	r3
    4daa:	f5 cf       	rjmp	.-22     	; 0x4d96 <vfprintf+0x16c>
    4dac:	f5 01       	movw	r30, r10
    4dae:	27 fc       	sbrc	r2, 7
    4db0:	85 91       	lpm	r24, Z+
    4db2:	27 fe       	sbrs	r2, 7
    4db4:	81 91       	ld	r24, Z+
    4db6:	5f 01       	movw	r10, r30
    4db8:	b7 01       	movw	r22, r14
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	0f d1       	rcall	.+542    	; 0x4fdc <fputc>
    4dbe:	31 10       	cpse	r3, r1
    4dc0:	3a 94       	dec	r3
    4dc2:	f1 e0       	ldi	r31, 0x01	; 1
    4dc4:	4f 1a       	sub	r4, r31
    4dc6:	51 08       	sbc	r5, r1
    4dc8:	41 14       	cp	r4, r1
    4dca:	51 04       	cpc	r5, r1
    4dcc:	79 f7       	brne	.-34     	; 0x4dac <vfprintf+0x182>
    4dce:	de c0       	rjmp	.+444    	; 0x4f8c <vfprintf+0x362>
    4dd0:	84 36       	cpi	r24, 0x64	; 100
    4dd2:	11 f0       	breq	.+4      	; 0x4dd8 <vfprintf+0x1ae>
    4dd4:	89 36       	cpi	r24, 0x69	; 105
    4dd6:	31 f5       	brne	.+76     	; 0x4e24 <vfprintf+0x1fa>
    4dd8:	f8 01       	movw	r30, r16
    4dda:	27 ff       	sbrs	r18, 7
    4ddc:	07 c0       	rjmp	.+14     	; 0x4dec <vfprintf+0x1c2>
    4dde:	60 81       	ld	r22, Z
    4de0:	71 81       	ldd	r23, Z+1	; 0x01
    4de2:	82 81       	ldd	r24, Z+2	; 0x02
    4de4:	93 81       	ldd	r25, Z+3	; 0x03
    4de6:	0c 5f       	subi	r16, 0xFC	; 252
    4de8:	1f 4f       	sbci	r17, 0xFF	; 255
    4dea:	08 c0       	rjmp	.+16     	; 0x4dfc <vfprintf+0x1d2>
    4dec:	60 81       	ld	r22, Z
    4dee:	71 81       	ldd	r23, Z+1	; 0x01
    4df0:	88 27       	eor	r24, r24
    4df2:	77 fd       	sbrc	r23, 7
    4df4:	80 95       	com	r24
    4df6:	98 2f       	mov	r25, r24
    4df8:	0e 5f       	subi	r16, 0xFE	; 254
    4dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    4dfc:	2f 76       	andi	r18, 0x6F	; 111
    4dfe:	b2 2e       	mov	r11, r18
    4e00:	97 ff       	sbrs	r25, 7
    4e02:	09 c0       	rjmp	.+18     	; 0x4e16 <vfprintf+0x1ec>
    4e04:	90 95       	com	r25
    4e06:	80 95       	com	r24
    4e08:	70 95       	com	r23
    4e0a:	61 95       	neg	r22
    4e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e0e:	8f 4f       	sbci	r24, 0xFF	; 255
    4e10:	9f 4f       	sbci	r25, 0xFF	; 255
    4e12:	20 68       	ori	r18, 0x80	; 128
    4e14:	b2 2e       	mov	r11, r18
    4e16:	2a e0       	ldi	r18, 0x0A	; 10
    4e18:	30 e0       	ldi	r19, 0x00	; 0
    4e1a:	a4 01       	movw	r20, r8
    4e1c:	11 d1       	rcall	.+546    	; 0x5040 <__ultoa_invert>
    4e1e:	a8 2e       	mov	r10, r24
    4e20:	a8 18       	sub	r10, r8
    4e22:	43 c0       	rjmp	.+134    	; 0x4eaa <vfprintf+0x280>
    4e24:	85 37       	cpi	r24, 0x75	; 117
    4e26:	29 f4       	brne	.+10     	; 0x4e32 <vfprintf+0x208>
    4e28:	2f 7e       	andi	r18, 0xEF	; 239
    4e2a:	b2 2e       	mov	r11, r18
    4e2c:	2a e0       	ldi	r18, 0x0A	; 10
    4e2e:	30 e0       	ldi	r19, 0x00	; 0
    4e30:	25 c0       	rjmp	.+74     	; 0x4e7c <vfprintf+0x252>
    4e32:	f2 2f       	mov	r31, r18
    4e34:	f9 7f       	andi	r31, 0xF9	; 249
    4e36:	bf 2e       	mov	r11, r31
    4e38:	8f 36       	cpi	r24, 0x6F	; 111
    4e3a:	c1 f0       	breq	.+48     	; 0x4e6c <vfprintf+0x242>
    4e3c:	18 f4       	brcc	.+6      	; 0x4e44 <vfprintf+0x21a>
    4e3e:	88 35       	cpi	r24, 0x58	; 88
    4e40:	79 f0       	breq	.+30     	; 0x4e60 <vfprintf+0x236>
    4e42:	ad c0       	rjmp	.+346    	; 0x4f9e <vfprintf+0x374>
    4e44:	80 37       	cpi	r24, 0x70	; 112
    4e46:	19 f0       	breq	.+6      	; 0x4e4e <vfprintf+0x224>
    4e48:	88 37       	cpi	r24, 0x78	; 120
    4e4a:	21 f0       	breq	.+8      	; 0x4e54 <vfprintf+0x22a>
    4e4c:	a8 c0       	rjmp	.+336    	; 0x4f9e <vfprintf+0x374>
    4e4e:	2f 2f       	mov	r18, r31
    4e50:	20 61       	ori	r18, 0x10	; 16
    4e52:	b2 2e       	mov	r11, r18
    4e54:	b4 fe       	sbrs	r11, 4
    4e56:	0d c0       	rjmp	.+26     	; 0x4e72 <vfprintf+0x248>
    4e58:	8b 2d       	mov	r24, r11
    4e5a:	84 60       	ori	r24, 0x04	; 4
    4e5c:	b8 2e       	mov	r11, r24
    4e5e:	09 c0       	rjmp	.+18     	; 0x4e72 <vfprintf+0x248>
    4e60:	24 ff       	sbrs	r18, 4
    4e62:	0a c0       	rjmp	.+20     	; 0x4e78 <vfprintf+0x24e>
    4e64:	9f 2f       	mov	r25, r31
    4e66:	96 60       	ori	r25, 0x06	; 6
    4e68:	b9 2e       	mov	r11, r25
    4e6a:	06 c0       	rjmp	.+12     	; 0x4e78 <vfprintf+0x24e>
    4e6c:	28 e0       	ldi	r18, 0x08	; 8
    4e6e:	30 e0       	ldi	r19, 0x00	; 0
    4e70:	05 c0       	rjmp	.+10     	; 0x4e7c <vfprintf+0x252>
    4e72:	20 e1       	ldi	r18, 0x10	; 16
    4e74:	30 e0       	ldi	r19, 0x00	; 0
    4e76:	02 c0       	rjmp	.+4      	; 0x4e7c <vfprintf+0x252>
    4e78:	20 e1       	ldi	r18, 0x10	; 16
    4e7a:	32 e0       	ldi	r19, 0x02	; 2
    4e7c:	f8 01       	movw	r30, r16
    4e7e:	b7 fe       	sbrs	r11, 7
    4e80:	07 c0       	rjmp	.+14     	; 0x4e90 <vfprintf+0x266>
    4e82:	60 81       	ld	r22, Z
    4e84:	71 81       	ldd	r23, Z+1	; 0x01
    4e86:	82 81       	ldd	r24, Z+2	; 0x02
    4e88:	93 81       	ldd	r25, Z+3	; 0x03
    4e8a:	0c 5f       	subi	r16, 0xFC	; 252
    4e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e8e:	06 c0       	rjmp	.+12     	; 0x4e9c <vfprintf+0x272>
    4e90:	60 81       	ld	r22, Z
    4e92:	71 81       	ldd	r23, Z+1	; 0x01
    4e94:	80 e0       	ldi	r24, 0x00	; 0
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	0e 5f       	subi	r16, 0xFE	; 254
    4e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e9c:	a4 01       	movw	r20, r8
    4e9e:	d0 d0       	rcall	.+416    	; 0x5040 <__ultoa_invert>
    4ea0:	a8 2e       	mov	r10, r24
    4ea2:	a8 18       	sub	r10, r8
    4ea4:	fb 2d       	mov	r31, r11
    4ea6:	ff 77       	andi	r31, 0x7F	; 127
    4ea8:	bf 2e       	mov	r11, r31
    4eaa:	b6 fe       	sbrs	r11, 6
    4eac:	0b c0       	rjmp	.+22     	; 0x4ec4 <vfprintf+0x29a>
    4eae:	2b 2d       	mov	r18, r11
    4eb0:	2e 7f       	andi	r18, 0xFE	; 254
    4eb2:	a5 14       	cp	r10, r5
    4eb4:	50 f4       	brcc	.+20     	; 0x4eca <vfprintf+0x2a0>
    4eb6:	b4 fe       	sbrs	r11, 4
    4eb8:	0a c0       	rjmp	.+20     	; 0x4ece <vfprintf+0x2a4>
    4eba:	b2 fc       	sbrc	r11, 2
    4ebc:	08 c0       	rjmp	.+16     	; 0x4ece <vfprintf+0x2a4>
    4ebe:	2b 2d       	mov	r18, r11
    4ec0:	2e 7e       	andi	r18, 0xEE	; 238
    4ec2:	05 c0       	rjmp	.+10     	; 0x4ece <vfprintf+0x2a4>
    4ec4:	7a 2c       	mov	r7, r10
    4ec6:	2b 2d       	mov	r18, r11
    4ec8:	03 c0       	rjmp	.+6      	; 0x4ed0 <vfprintf+0x2a6>
    4eca:	7a 2c       	mov	r7, r10
    4ecc:	01 c0       	rjmp	.+2      	; 0x4ed0 <vfprintf+0x2a6>
    4ece:	75 2c       	mov	r7, r5
    4ed0:	24 ff       	sbrs	r18, 4
    4ed2:	0d c0       	rjmp	.+26     	; 0x4eee <vfprintf+0x2c4>
    4ed4:	fe 01       	movw	r30, r28
    4ed6:	ea 0d       	add	r30, r10
    4ed8:	f1 1d       	adc	r31, r1
    4eda:	80 81       	ld	r24, Z
    4edc:	80 33       	cpi	r24, 0x30	; 48
    4ede:	11 f4       	brne	.+4      	; 0x4ee4 <vfprintf+0x2ba>
    4ee0:	29 7e       	andi	r18, 0xE9	; 233
    4ee2:	09 c0       	rjmp	.+18     	; 0x4ef6 <vfprintf+0x2cc>
    4ee4:	22 ff       	sbrs	r18, 2
    4ee6:	06 c0       	rjmp	.+12     	; 0x4ef4 <vfprintf+0x2ca>
    4ee8:	73 94       	inc	r7
    4eea:	73 94       	inc	r7
    4eec:	04 c0       	rjmp	.+8      	; 0x4ef6 <vfprintf+0x2cc>
    4eee:	82 2f       	mov	r24, r18
    4ef0:	86 78       	andi	r24, 0x86	; 134
    4ef2:	09 f0       	breq	.+2      	; 0x4ef6 <vfprintf+0x2cc>
    4ef4:	73 94       	inc	r7
    4ef6:	23 fd       	sbrc	r18, 3
    4ef8:	12 c0       	rjmp	.+36     	; 0x4f1e <vfprintf+0x2f4>
    4efa:	20 ff       	sbrs	r18, 0
    4efc:	06 c0       	rjmp	.+12     	; 0x4f0a <vfprintf+0x2e0>
    4efe:	5a 2c       	mov	r5, r10
    4f00:	73 14       	cp	r7, r3
    4f02:	18 f4       	brcc	.+6      	; 0x4f0a <vfprintf+0x2e0>
    4f04:	53 0c       	add	r5, r3
    4f06:	57 18       	sub	r5, r7
    4f08:	73 2c       	mov	r7, r3
    4f0a:	73 14       	cp	r7, r3
    4f0c:	60 f4       	brcc	.+24     	; 0x4f26 <vfprintf+0x2fc>
    4f0e:	b7 01       	movw	r22, r14
    4f10:	80 e2       	ldi	r24, 0x20	; 32
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	2c 87       	std	Y+12, r18	; 0x0c
    4f16:	62 d0       	rcall	.+196    	; 0x4fdc <fputc>
    4f18:	73 94       	inc	r7
    4f1a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f1c:	f6 cf       	rjmp	.-20     	; 0x4f0a <vfprintf+0x2e0>
    4f1e:	73 14       	cp	r7, r3
    4f20:	10 f4       	brcc	.+4      	; 0x4f26 <vfprintf+0x2fc>
    4f22:	37 18       	sub	r3, r7
    4f24:	01 c0       	rjmp	.+2      	; 0x4f28 <vfprintf+0x2fe>
    4f26:	31 2c       	mov	r3, r1
    4f28:	24 ff       	sbrs	r18, 4
    4f2a:	11 c0       	rjmp	.+34     	; 0x4f4e <vfprintf+0x324>
    4f2c:	b7 01       	movw	r22, r14
    4f2e:	80 e3       	ldi	r24, 0x30	; 48
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	2c 87       	std	Y+12, r18	; 0x0c
    4f34:	53 d0       	rcall	.+166    	; 0x4fdc <fputc>
    4f36:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f38:	22 ff       	sbrs	r18, 2
    4f3a:	16 c0       	rjmp	.+44     	; 0x4f68 <vfprintf+0x33e>
    4f3c:	21 ff       	sbrs	r18, 1
    4f3e:	03 c0       	rjmp	.+6      	; 0x4f46 <vfprintf+0x31c>
    4f40:	88 e5       	ldi	r24, 0x58	; 88
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	02 c0       	rjmp	.+4      	; 0x4f4a <vfprintf+0x320>
    4f46:	88 e7       	ldi	r24, 0x78	; 120
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	b7 01       	movw	r22, r14
    4f4c:	0c c0       	rjmp	.+24     	; 0x4f66 <vfprintf+0x33c>
    4f4e:	82 2f       	mov	r24, r18
    4f50:	86 78       	andi	r24, 0x86	; 134
    4f52:	51 f0       	breq	.+20     	; 0x4f68 <vfprintf+0x33e>
    4f54:	21 fd       	sbrc	r18, 1
    4f56:	02 c0       	rjmp	.+4      	; 0x4f5c <vfprintf+0x332>
    4f58:	80 e2       	ldi	r24, 0x20	; 32
    4f5a:	01 c0       	rjmp	.+2      	; 0x4f5e <vfprintf+0x334>
    4f5c:	8b e2       	ldi	r24, 0x2B	; 43
    4f5e:	27 fd       	sbrc	r18, 7
    4f60:	8d e2       	ldi	r24, 0x2D	; 45
    4f62:	b7 01       	movw	r22, r14
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	3a d0       	rcall	.+116    	; 0x4fdc <fputc>
    4f68:	a5 14       	cp	r10, r5
    4f6a:	30 f4       	brcc	.+12     	; 0x4f78 <vfprintf+0x34e>
    4f6c:	b7 01       	movw	r22, r14
    4f6e:	80 e3       	ldi	r24, 0x30	; 48
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	34 d0       	rcall	.+104    	; 0x4fdc <fputc>
    4f74:	5a 94       	dec	r5
    4f76:	f8 cf       	rjmp	.-16     	; 0x4f68 <vfprintf+0x33e>
    4f78:	aa 94       	dec	r10
    4f7a:	f4 01       	movw	r30, r8
    4f7c:	ea 0d       	add	r30, r10
    4f7e:	f1 1d       	adc	r31, r1
    4f80:	80 81       	ld	r24, Z
    4f82:	b7 01       	movw	r22, r14
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	2a d0       	rcall	.+84     	; 0x4fdc <fputc>
    4f88:	a1 10       	cpse	r10, r1
    4f8a:	f6 cf       	rjmp	.-20     	; 0x4f78 <vfprintf+0x34e>
    4f8c:	33 20       	and	r3, r3
    4f8e:	09 f4       	brne	.+2      	; 0x4f92 <vfprintf+0x368>
    4f90:	5d ce       	rjmp	.-838    	; 0x4c4c <vfprintf+0x22>
    4f92:	b7 01       	movw	r22, r14
    4f94:	80 e2       	ldi	r24, 0x20	; 32
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	21 d0       	rcall	.+66     	; 0x4fdc <fputc>
    4f9a:	3a 94       	dec	r3
    4f9c:	f7 cf       	rjmp	.-18     	; 0x4f8c <vfprintf+0x362>
    4f9e:	f7 01       	movw	r30, r14
    4fa0:	86 81       	ldd	r24, Z+6	; 0x06
    4fa2:	97 81       	ldd	r25, Z+7	; 0x07
    4fa4:	02 c0       	rjmp	.+4      	; 0x4faa <vfprintf+0x380>
    4fa6:	8f ef       	ldi	r24, 0xFF	; 255
    4fa8:	9f ef       	ldi	r25, 0xFF	; 255
    4faa:	2c 96       	adiw	r28, 0x0c	; 12
    4fac:	e2 e1       	ldi	r30, 0x12	; 18
    4fae:	bf c0       	rjmp	.+382    	; 0x512e <__epilogue_restores__>

00004fb0 <strnlen_P>:
    4fb0:	fc 01       	movw	r30, r24
    4fb2:	05 90       	lpm	r0, Z+
    4fb4:	61 50       	subi	r22, 0x01	; 1
    4fb6:	70 40       	sbci	r23, 0x00	; 0
    4fb8:	01 10       	cpse	r0, r1
    4fba:	d8 f7       	brcc	.-10     	; 0x4fb2 <strnlen_P+0x2>
    4fbc:	80 95       	com	r24
    4fbe:	90 95       	com	r25
    4fc0:	8e 0f       	add	r24, r30
    4fc2:	9f 1f       	adc	r25, r31
    4fc4:	08 95       	ret

00004fc6 <strnlen>:
    4fc6:	fc 01       	movw	r30, r24
    4fc8:	61 50       	subi	r22, 0x01	; 1
    4fca:	70 40       	sbci	r23, 0x00	; 0
    4fcc:	01 90       	ld	r0, Z+
    4fce:	01 10       	cpse	r0, r1
    4fd0:	d8 f7       	brcc	.-10     	; 0x4fc8 <strnlen+0x2>
    4fd2:	80 95       	com	r24
    4fd4:	90 95       	com	r25
    4fd6:	8e 0f       	add	r24, r30
    4fd8:	9f 1f       	adc	r25, r31
    4fda:	08 95       	ret

00004fdc <fputc>:
    4fdc:	0f 93       	push	r16
    4fde:	1f 93       	push	r17
    4fe0:	cf 93       	push	r28
    4fe2:	df 93       	push	r29
    4fe4:	18 2f       	mov	r17, r24
    4fe6:	09 2f       	mov	r16, r25
    4fe8:	eb 01       	movw	r28, r22
    4fea:	8b 81       	ldd	r24, Y+3	; 0x03
    4fec:	81 fd       	sbrc	r24, 1
    4fee:	03 c0       	rjmp	.+6      	; 0x4ff6 <fputc+0x1a>
    4ff0:	8f ef       	ldi	r24, 0xFF	; 255
    4ff2:	9f ef       	ldi	r25, 0xFF	; 255
    4ff4:	20 c0       	rjmp	.+64     	; 0x5036 <fputc+0x5a>
    4ff6:	82 ff       	sbrs	r24, 2
    4ff8:	10 c0       	rjmp	.+32     	; 0x501a <fputc+0x3e>
    4ffa:	4e 81       	ldd	r20, Y+6	; 0x06
    4ffc:	5f 81       	ldd	r21, Y+7	; 0x07
    4ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    5000:	3d 81       	ldd	r19, Y+5	; 0x05
    5002:	42 17       	cp	r20, r18
    5004:	53 07       	cpc	r21, r19
    5006:	7c f4       	brge	.+30     	; 0x5026 <fputc+0x4a>
    5008:	e8 81       	ld	r30, Y
    500a:	f9 81       	ldd	r31, Y+1	; 0x01
    500c:	9f 01       	movw	r18, r30
    500e:	2f 5f       	subi	r18, 0xFF	; 255
    5010:	3f 4f       	sbci	r19, 0xFF	; 255
    5012:	28 83       	st	Y, r18
    5014:	39 83       	std	Y+1, r19	; 0x01
    5016:	10 83       	st	Z, r17
    5018:	06 c0       	rjmp	.+12     	; 0x5026 <fputc+0x4a>
    501a:	e8 85       	ldd	r30, Y+8	; 0x08
    501c:	f9 85       	ldd	r31, Y+9	; 0x09
    501e:	81 2f       	mov	r24, r17
    5020:	09 95       	icall
    5022:	89 2b       	or	r24, r25
    5024:	29 f7       	brne	.-54     	; 0x4ff0 <fputc+0x14>
    5026:	2e 81       	ldd	r18, Y+6	; 0x06
    5028:	3f 81       	ldd	r19, Y+7	; 0x07
    502a:	2f 5f       	subi	r18, 0xFF	; 255
    502c:	3f 4f       	sbci	r19, 0xFF	; 255
    502e:	2e 83       	std	Y+6, r18	; 0x06
    5030:	3f 83       	std	Y+7, r19	; 0x07
    5032:	81 2f       	mov	r24, r17
    5034:	90 2f       	mov	r25, r16
    5036:	df 91       	pop	r29
    5038:	cf 91       	pop	r28
    503a:	1f 91       	pop	r17
    503c:	0f 91       	pop	r16
    503e:	08 95       	ret

00005040 <__ultoa_invert>:
    5040:	fa 01       	movw	r30, r20
    5042:	aa 27       	eor	r26, r26
    5044:	28 30       	cpi	r18, 0x08	; 8
    5046:	51 f1       	breq	.+84     	; 0x509c <__ultoa_invert+0x5c>
    5048:	20 31       	cpi	r18, 0x10	; 16
    504a:	81 f1       	breq	.+96     	; 0x50ac <__ultoa_invert+0x6c>
    504c:	e8 94       	clt
    504e:	6f 93       	push	r22
    5050:	6e 7f       	andi	r22, 0xFE	; 254
    5052:	6e 5f       	subi	r22, 0xFE	; 254
    5054:	7f 4f       	sbci	r23, 0xFF	; 255
    5056:	8f 4f       	sbci	r24, 0xFF	; 255
    5058:	9f 4f       	sbci	r25, 0xFF	; 255
    505a:	af 4f       	sbci	r26, 0xFF	; 255
    505c:	b1 e0       	ldi	r27, 0x01	; 1
    505e:	3e d0       	rcall	.+124    	; 0x50dc <__ultoa_invert+0x9c>
    5060:	b4 e0       	ldi	r27, 0x04	; 4
    5062:	3c d0       	rcall	.+120    	; 0x50dc <__ultoa_invert+0x9c>
    5064:	67 0f       	add	r22, r23
    5066:	78 1f       	adc	r23, r24
    5068:	89 1f       	adc	r24, r25
    506a:	9a 1f       	adc	r25, r26
    506c:	a1 1d       	adc	r26, r1
    506e:	68 0f       	add	r22, r24
    5070:	79 1f       	adc	r23, r25
    5072:	8a 1f       	adc	r24, r26
    5074:	91 1d       	adc	r25, r1
    5076:	a1 1d       	adc	r26, r1
    5078:	6a 0f       	add	r22, r26
    507a:	71 1d       	adc	r23, r1
    507c:	81 1d       	adc	r24, r1
    507e:	91 1d       	adc	r25, r1
    5080:	a1 1d       	adc	r26, r1
    5082:	20 d0       	rcall	.+64     	; 0x50c4 <__ultoa_invert+0x84>
    5084:	09 f4       	brne	.+2      	; 0x5088 <__ultoa_invert+0x48>
    5086:	68 94       	set
    5088:	3f 91       	pop	r19
    508a:	2a e0       	ldi	r18, 0x0A	; 10
    508c:	26 9f       	mul	r18, r22
    508e:	11 24       	eor	r1, r1
    5090:	30 19       	sub	r19, r0
    5092:	30 5d       	subi	r19, 0xD0	; 208
    5094:	31 93       	st	Z+, r19
    5096:	de f6       	brtc	.-74     	; 0x504e <__ultoa_invert+0xe>
    5098:	cf 01       	movw	r24, r30
    509a:	08 95       	ret
    509c:	46 2f       	mov	r20, r22
    509e:	47 70       	andi	r20, 0x07	; 7
    50a0:	40 5d       	subi	r20, 0xD0	; 208
    50a2:	41 93       	st	Z+, r20
    50a4:	b3 e0       	ldi	r27, 0x03	; 3
    50a6:	0f d0       	rcall	.+30     	; 0x50c6 <__ultoa_invert+0x86>
    50a8:	c9 f7       	brne	.-14     	; 0x509c <__ultoa_invert+0x5c>
    50aa:	f6 cf       	rjmp	.-20     	; 0x5098 <__ultoa_invert+0x58>
    50ac:	46 2f       	mov	r20, r22
    50ae:	4f 70       	andi	r20, 0x0F	; 15
    50b0:	40 5d       	subi	r20, 0xD0	; 208
    50b2:	4a 33       	cpi	r20, 0x3A	; 58
    50b4:	18 f0       	brcs	.+6      	; 0x50bc <__ultoa_invert+0x7c>
    50b6:	49 5d       	subi	r20, 0xD9	; 217
    50b8:	31 fd       	sbrc	r19, 1
    50ba:	40 52       	subi	r20, 0x20	; 32
    50bc:	41 93       	st	Z+, r20
    50be:	02 d0       	rcall	.+4      	; 0x50c4 <__ultoa_invert+0x84>
    50c0:	a9 f7       	brne	.-22     	; 0x50ac <__ultoa_invert+0x6c>
    50c2:	ea cf       	rjmp	.-44     	; 0x5098 <__ultoa_invert+0x58>
    50c4:	b4 e0       	ldi	r27, 0x04	; 4
    50c6:	a6 95       	lsr	r26
    50c8:	97 95       	ror	r25
    50ca:	87 95       	ror	r24
    50cc:	77 95       	ror	r23
    50ce:	67 95       	ror	r22
    50d0:	ba 95       	dec	r27
    50d2:	c9 f7       	brne	.-14     	; 0x50c6 <__ultoa_invert+0x86>
    50d4:	00 97       	sbiw	r24, 0x00	; 0
    50d6:	61 05       	cpc	r22, r1
    50d8:	71 05       	cpc	r23, r1
    50da:	08 95       	ret
    50dc:	9b 01       	movw	r18, r22
    50de:	ac 01       	movw	r20, r24
    50e0:	0a 2e       	mov	r0, r26
    50e2:	06 94       	lsr	r0
    50e4:	57 95       	ror	r21
    50e6:	47 95       	ror	r20
    50e8:	37 95       	ror	r19
    50ea:	27 95       	ror	r18
    50ec:	ba 95       	dec	r27
    50ee:	c9 f7       	brne	.-14     	; 0x50e2 <__ultoa_invert+0xa2>
    50f0:	62 0f       	add	r22, r18
    50f2:	73 1f       	adc	r23, r19
    50f4:	84 1f       	adc	r24, r20
    50f6:	95 1f       	adc	r25, r21
    50f8:	a0 1d       	adc	r26, r0
    50fa:	08 95       	ret

000050fc <__prologue_saves__>:
    50fc:	2f 92       	push	r2
    50fe:	3f 92       	push	r3
    5100:	4f 92       	push	r4
    5102:	5f 92       	push	r5
    5104:	6f 92       	push	r6
    5106:	7f 92       	push	r7
    5108:	8f 92       	push	r8
    510a:	9f 92       	push	r9
    510c:	af 92       	push	r10
    510e:	bf 92       	push	r11
    5110:	cf 92       	push	r12
    5112:	df 92       	push	r13
    5114:	ef 92       	push	r14
    5116:	ff 92       	push	r15
    5118:	0f 93       	push	r16
    511a:	1f 93       	push	r17
    511c:	cf 93       	push	r28
    511e:	df 93       	push	r29
    5120:	cd b7       	in	r28, 0x3d	; 61
    5122:	de b7       	in	r29, 0x3e	; 62
    5124:	ca 1b       	sub	r28, r26
    5126:	db 0b       	sbc	r29, r27
    5128:	cd bf       	out	0x3d, r28	; 61
    512a:	de bf       	out	0x3e, r29	; 62
    512c:	09 94       	ijmp

0000512e <__epilogue_restores__>:
    512e:	2a 88       	ldd	r2, Y+18	; 0x12
    5130:	39 88       	ldd	r3, Y+17	; 0x11
    5132:	48 88       	ldd	r4, Y+16	; 0x10
    5134:	5f 84       	ldd	r5, Y+15	; 0x0f
    5136:	6e 84       	ldd	r6, Y+14	; 0x0e
    5138:	7d 84       	ldd	r7, Y+13	; 0x0d
    513a:	8c 84       	ldd	r8, Y+12	; 0x0c
    513c:	9b 84       	ldd	r9, Y+11	; 0x0b
    513e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5140:	b9 84       	ldd	r11, Y+9	; 0x09
    5142:	c8 84       	ldd	r12, Y+8	; 0x08
    5144:	df 80       	ldd	r13, Y+7	; 0x07
    5146:	ee 80       	ldd	r14, Y+6	; 0x06
    5148:	fd 80       	ldd	r15, Y+5	; 0x05
    514a:	0c 81       	ldd	r16, Y+4	; 0x04
    514c:	1b 81       	ldd	r17, Y+3	; 0x03
    514e:	aa 81       	ldd	r26, Y+2	; 0x02
    5150:	b9 81       	ldd	r27, Y+1	; 0x01
    5152:	ce 0f       	add	r28, r30
    5154:	d1 1d       	adc	r29, r1
    5156:	cd bf       	out	0x3d, r28	; 61
    5158:	de bf       	out	0x3e, r29	; 62
    515a:	ed 01       	movw	r28, r26
    515c:	08 95       	ret

0000515e <_exit>:
    515e:	f8 94       	cli

00005160 <__stop_program>:
    5160:	ff cf       	rjmp	.-2      	; 0x5160 <__stop_program>
