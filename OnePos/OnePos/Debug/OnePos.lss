
OnePos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000628  00802000  000057bc  00005850  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000359  00802628  00802628  00005e78  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005e78  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000b08  00000000  00000000  00005ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00016f33  00000000  00000000  000069e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003bbd  00000000  00000000  0001d913  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00010c5d  00000000  00000000  000214d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000022d4  00000000  00000000  00032130  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000380ed  00000000  00000000  00034404  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000af05  00000000  00000000  0006c4f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a90  00000000  00000000  000773f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000881c  00000000  00000000  00077e88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	00 00       	nop
       4:	34 c1       	rjmp	.+616    	; 0x26e <__bad_interrupt>
       6:	00 00       	nop
       8:	32 c1       	rjmp	.+612    	; 0x26e <__bad_interrupt>
       a:	00 00       	nop
       c:	30 c1       	rjmp	.+608    	; 0x26e <__bad_interrupt>
       e:	00 00       	nop
      10:	2e c1       	rjmp	.+604    	; 0x26e <__bad_interrupt>
      12:	00 00       	nop
      14:	2c c1       	rjmp	.+600    	; 0x26e <__bad_interrupt>
      16:	00 00       	nop
      18:	2a c1       	rjmp	.+596    	; 0x26e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	28 c1       	rjmp	.+592    	; 0x26e <__bad_interrupt>
      1e:	00 00       	nop
      20:	26 c1       	rjmp	.+588    	; 0x26e <__bad_interrupt>
      22:	00 00       	nop
      24:	24 c1       	rjmp	.+584    	; 0x26e <__bad_interrupt>
      26:	00 00       	nop
      28:	22 c1       	rjmp	.+580    	; 0x26e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	20 c1       	rjmp	.+576    	; 0x26e <__bad_interrupt>
      2e:	00 00       	nop
      30:	1e c1       	rjmp	.+572    	; 0x26e <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__vector_13>
      38:	1a c1       	rjmp	.+564    	; 0x26e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	18 c1       	rjmp	.+560    	; 0x26e <__bad_interrupt>
      3e:	00 00       	nop
      40:	16 c1       	rjmp	.+556    	; 0x26e <__bad_interrupt>
      42:	00 00       	nop
      44:	14 c1       	rjmp	.+552    	; 0x26e <__bad_interrupt>
      46:	00 00       	nop
      48:	12 c1       	rjmp	.+548    	; 0x26e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	10 c1       	rjmp	.+544    	; 0x26e <__bad_interrupt>
      4e:	00 00       	nop
      50:	0e c1       	rjmp	.+540    	; 0x26e <__bad_interrupt>
      52:	00 00       	nop
      54:	0c c1       	rjmp	.+536    	; 0x26e <__bad_interrupt>
      56:	00 00       	nop
      58:	0a c1       	rjmp	.+532    	; 0x26e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	08 c1       	rjmp	.+528    	; 0x26e <__bad_interrupt>
      5e:	00 00       	nop
      60:	06 c1       	rjmp	.+524    	; 0x26e <__bad_interrupt>
      62:	00 00       	nop
      64:	04 c1       	rjmp	.+520    	; 0x26e <__bad_interrupt>
      66:	00 00       	nop
      68:	02 c1       	rjmp	.+516    	; 0x26e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	00 c1       	rjmp	.+512    	; 0x26e <__bad_interrupt>
      6e:	00 00       	nop
      70:	fe c0       	rjmp	.+508    	; 0x26e <__bad_interrupt>
      72:	00 00       	nop
      74:	fc c0       	rjmp	.+504    	; 0x26e <__bad_interrupt>
      76:	00 00       	nop
      78:	fa c0       	rjmp	.+500    	; 0x26e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f8 c0       	rjmp	.+496    	; 0x26e <__bad_interrupt>
      7e:	00 00       	nop
      80:	f6 c0       	rjmp	.+492    	; 0x26e <__bad_interrupt>
      82:	00 00       	nop
      84:	f4 c0       	rjmp	.+488    	; 0x26e <__bad_interrupt>
      86:	00 00       	nop
      88:	f2 c0       	rjmp	.+484    	; 0x26e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f0 c0       	rjmp	.+480    	; 0x26e <__bad_interrupt>
      8e:	00 00       	nop
      90:	ee c0       	rjmp	.+476    	; 0x26e <__bad_interrupt>
      92:	00 00       	nop
      94:	ec c0       	rjmp	.+472    	; 0x26e <__bad_interrupt>
      96:	00 00       	nop
      98:	ea c0       	rjmp	.+468    	; 0x26e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e8 c0       	rjmp	.+464    	; 0x26e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e6 c0       	rjmp	.+460    	; 0x26e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e4 c0       	rjmp	.+456    	; 0x26e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e2 c0       	rjmp	.+452    	; 0x26e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e0 c0       	rjmp	.+448    	; 0x26e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	de c0       	rjmp	.+444    	; 0x26e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	dc c0       	rjmp	.+440    	; 0x26e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__vector_46>
      bc:	d8 c0       	rjmp	.+432    	; 0x26e <__bad_interrupt>
      be:	00 00       	nop
      c0:	d6 c0       	rjmp	.+428    	; 0x26e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d4 c0       	rjmp	.+424    	; 0x26e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d2 c0       	rjmp	.+420    	; 0x26e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d0 c0       	rjmp	.+416    	; 0x26e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ce c0       	rjmp	.+412    	; 0x26e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cc c0       	rjmp	.+408    	; 0x26e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ca c0       	rjmp	.+404    	; 0x26e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c8 c0       	rjmp	.+400    	; 0x26e <__bad_interrupt>
      de:	00 00       	nop
      e0:	c6 c0       	rjmp	.+396    	; 0x26e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c4 c0       	rjmp	.+392    	; 0x26e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c2 c0       	rjmp	.+388    	; 0x26e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c0 c0       	rjmp	.+384    	; 0x26e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	be c0       	rjmp	.+380    	; 0x26e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	bc c0       	rjmp	.+376    	; 0x26e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ba c0       	rjmp	.+372    	; 0x26e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b8 c0       	rjmp	.+368    	; 0x26e <__bad_interrupt>
      fe:	00 00       	nop
     100:	b6 c0       	rjmp	.+364    	; 0x26e <__bad_interrupt>
     102:	00 00       	nop
     104:	b4 c0       	rjmp	.+360    	; 0x26e <__bad_interrupt>
     106:	00 00       	nop
     108:	b2 c0       	rjmp	.+356    	; 0x26e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b0 c0       	rjmp	.+352    	; 0x26e <__bad_interrupt>
     10e:	00 00       	nop
     110:	ae c0       	rjmp	.+348    	; 0x26e <__bad_interrupt>
     112:	00 00       	nop
     114:	ac c0       	rjmp	.+344    	; 0x26e <__bad_interrupt>
     116:	00 00       	nop
     118:	aa c0       	rjmp	.+340    	; 0x26e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a8 c0       	rjmp	.+336    	; 0x26e <__bad_interrupt>
     11e:	00 00       	nop
     120:	a6 c0       	rjmp	.+332    	; 0x26e <__bad_interrupt>
     122:	00 00       	nop
     124:	a4 c0       	rjmp	.+328    	; 0x26e <__bad_interrupt>
     126:	00 00       	nop
     128:	a2 c0       	rjmp	.+324    	; 0x26e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a0 c0       	rjmp	.+320    	; 0x26e <__bad_interrupt>
     12e:	00 00       	nop
     130:	9e c0       	rjmp	.+316    	; 0x26e <__bad_interrupt>
     132:	00 00       	nop
     134:	9c c0       	rjmp	.+312    	; 0x26e <__bad_interrupt>
     136:	00 00       	nop
     138:	9a c0       	rjmp	.+308    	; 0x26e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	98 c0       	rjmp	.+304    	; 0x26e <__bad_interrupt>
     13e:	00 00       	nop
     140:	96 c0       	rjmp	.+300    	; 0x26e <__bad_interrupt>
     142:	00 00       	nop
     144:	94 c0       	rjmp	.+296    	; 0x26e <__bad_interrupt>
     146:	00 00       	nop
     148:	92 c0       	rjmp	.+292    	; 0x26e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	90 c0       	rjmp	.+288    	; 0x26e <__bad_interrupt>
     14e:	00 00       	nop
     150:	8e c0       	rjmp	.+284    	; 0x26e <__bad_interrupt>
     152:	00 00       	nop
     154:	8c c0       	rjmp	.+280    	; 0x26e <__bad_interrupt>
     156:	00 00       	nop
     158:	8a c0       	rjmp	.+276    	; 0x26e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	88 c0       	rjmp	.+272    	; 0x26e <__bad_interrupt>
     15e:	00 00       	nop
     160:	86 c0       	rjmp	.+268    	; 0x26e <__bad_interrupt>
     162:	00 00       	nop
     164:	84 c0       	rjmp	.+264    	; 0x26e <__bad_interrupt>
     166:	00 00       	nop
     168:	82 c0       	rjmp	.+260    	; 0x26e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	80 c0       	rjmp	.+256    	; 0x26e <__bad_interrupt>
     16e:	00 00       	nop
     170:	7e c0       	rjmp	.+252    	; 0x26e <__bad_interrupt>
     172:	00 00       	nop
     174:	7c c0       	rjmp	.+248    	; 0x26e <__bad_interrupt>
     176:	00 00       	nop
     178:	7a c0       	rjmp	.+244    	; 0x26e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	78 c0       	rjmp	.+240    	; 0x26e <__bad_interrupt>
     17e:	00 00       	nop
     180:	76 c0       	rjmp	.+236    	; 0x26e <__bad_interrupt>
     182:	00 00       	nop
     184:	74 c0       	rjmp	.+232    	; 0x26e <__bad_interrupt>
     186:	00 00       	nop
     188:	72 c0       	rjmp	.+228    	; 0x26e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	70 c0       	rjmp	.+224    	; 0x26e <__bad_interrupt>
     18e:	00 00       	nop
     190:	6e c0       	rjmp	.+220    	; 0x26e <__bad_interrupt>
     192:	00 00       	nop
     194:	6c c0       	rjmp	.+216    	; 0x26e <__bad_interrupt>
     196:	00 00       	nop
     198:	6a c0       	rjmp	.+212    	; 0x26e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	68 c0       	rjmp	.+208    	; 0x26e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	66 c0       	rjmp	.+204    	; 0x26e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	64 c0       	rjmp	.+200    	; 0x26e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	62 c0       	rjmp	.+196    	; 0x26e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	60 c0       	rjmp	.+192    	; 0x26e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	5e c0       	rjmp	.+188    	; 0x26e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	5c c0       	rjmp	.+184    	; 0x26e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	5a c0       	rjmp	.+180    	; 0x26e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	58 c0       	rjmp	.+176    	; 0x26e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	56 c0       	rjmp	.+172    	; 0x26e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	54 c0       	rjmp	.+168    	; 0x26e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	52 c0       	rjmp	.+164    	; 0x26e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	50 c0       	rjmp	.+160    	; 0x26e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	4e c0       	rjmp	.+156    	; 0x26e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	4c c0       	rjmp	.+152    	; 0x26e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	4a c0       	rjmp	.+148    	; 0x26e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	48 c0       	rjmp	.+144    	; 0x26e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	46 c0       	rjmp	.+140    	; 0x26e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	44 c0       	rjmp	.+136    	; 0x26e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	42 c0       	rjmp	.+132    	; 0x26e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	40 c0       	rjmp	.+128    	; 0x26e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	3e c0       	rjmp	.+124    	; 0x26e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__vector_125>
     1f8:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__vector_126>
     1fc:	d4 0c       	add	r13, r4
     1fe:	c2 0c       	add	r12, r2
     200:	c5 0c       	add	r12, r5
     202:	c8 0c       	add	r12, r8
     204:	cb 0c       	add	r12, r11
     206:	ce 0c       	add	r12, r14
     208:	d1 0c       	add	r13, r1
     20a:	77 18       	sub	r7, r7
     20c:	72 18       	sub	r7, r2
     20e:	7c 18       	sub	r7, r12
     210:	a1 18       	sub	r10, r1
     212:	a1 18       	sub	r10, r1
     214:	a1 18       	sub	r10, r1
     216:	a1 18       	sub	r10, r1
     218:	81 18       	sub	r8, r1
     21a:	89 18       	sub	r8, r9
     21c:	a1 18       	sub	r10, r1
     21e:	a1 18       	sub	r10, r1
     220:	90 18       	sub	r9, r0
     222:	94 18       	sub	r9, r4
     224:	98 18       	sub	r9, r8
     226:	9d 18       	sub	r9, r13

00000228 <__trampolines_end>:
     228:	63 64       	ori	r22, 0x43	; 67
     22a:	69 6e       	ori	r22, 0xE9	; 233
     22c:	6f 70       	andi	r22, 0x0F	; 15
     22e:	73 75       	andi	r23, 0x53	; 83
     230:	78 58       	subi	r23, 0x88	; 136
     232:	5b 00       	.word	0x005b	; ????

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf ef       	ldi	r28, 0xFF	; 255
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	df e2       	ldi	r29, 0x2F	; 47
     23e:	de bf       	out	0x3e, r29	; 62

00000240 <__do_copy_data>:
     240:	16 e2       	ldi	r17, 0x26	; 38
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b0 e2       	ldi	r27, 0x20	; 32
     246:	ec eb       	ldi	r30, 0xBC	; 188
     248:	f7 e5       	ldi	r31, 0x57	; 87
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
     24c:	05 90       	lpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a8 32       	cpi	r26, 0x28	; 40
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_clear_bss>:
     256:	29 e2       	ldi	r18, 0x29	; 41
     258:	a8 e2       	ldi	r26, 0x28	; 40
     25a:	b6 e2       	ldi	r27, 0x26	; 38
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a1 38       	cpi	r26, 0x81	; 129
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	0e 94 a3 23 	call	0x4746	; 0x4746 <main>
     26a:	0c 94 dc 2b 	jmp	0x57b8	; 0x57b8 <_exit>

0000026e <__bad_interrupt>:
     26e:	c8 ce       	rjmp	.-624    	; 0x0 <__vectors>

00000270 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     276:	c0 3c       	cpi	r28, 0xC0	; 192
     278:	28 e0       	ldi	r18, 0x08	; 8
     27a:	d2 07       	cpc	r29, r18
     27c:	29 f4       	brne	.+10     	; 0x288 <spi_master_init+0x18>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     27e:	68 e0       	ldi	r22, 0x08	; 8
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	0e 94 ad 12 	call	0x255a	; 0x255a <sysclk_enable_module>
     286:	07 c0       	rjmp	.+14     	; 0x296 <spi_master_init+0x26>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     288:	80 3c       	cpi	r24, 0xC0	; 192
     28a:	99 40       	sbci	r25, 0x09	; 9
     28c:	21 f4       	brne	.+8      	; 0x296 <spi_master_init+0x26>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     28e:	68 e0       	ldi	r22, 0x08	; 8
     290:	84 e0       	ldi	r24, 0x04	; 4
     292:	0e 94 ad 12 	call	0x255a	; 0x255a <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
     296:	88 81       	ld	r24, Y
     298:	80 61       	ori	r24, 0x10	; 16
     29a:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	ec 01       	movw	r28, r24
     2ae:	f4 2e       	mov	r15, r20
     2b0:	b9 01       	movw	r22, r18
     2b2:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     2b4:	00 e0       	ldi	r16, 0x00	; 0
     2b6:	1c e6       	ldi	r17, 0x6C	; 108
     2b8:	2c ed       	ldi	r18, 0xDC	; 220
     2ba:	32 e0       	ldi	r19, 0x02	; 2
     2bc:	56 d7       	rcall	.+3756   	; 0x116a <spi_xmega_set_baud_div>
     2be:	88 23       	and	r24, r24
     2c0:	4c f0       	brlt	.+18     	; 0x2d4 <spi_master_setup_device+0x32>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     2c2:	88 81       	ld	r24, Y
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     2c4:	9f 2d       	mov	r25, r15
     2c6:	99 0f       	add	r25, r25
     2c8:	99 0f       	add	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     2ca:	9c 70       	andi	r25, 0x0C	; 12
     2cc:	83 7f       	andi	r24, 0xF3	; 243
     2ce:	f9 2e       	mov	r15, r25
     2d0:	f8 2a       	or	r15, r24
     2d2:	f8 82       	st	Y, r15
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	ff 90       	pop	r15
     2de:	08 95       	ret

000002e0 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     2e0:	fc 01       	movw	r30, r24
     2e2:	db 01       	movw	r26, r22
     2e4:	46 0f       	add	r20, r22
     2e6:	57 1f       	adc	r21, r23
	while (len--) {
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <spi_write_packet+0x14>
		spi_write_single(spi, *data++);
     2ea:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     2ec:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
		
		while (!spi_is_rx_full(spi)) {
     2f0:	88 23       	and	r24, r24
     2f2:	ec f7       	brge	.-6      	; 0x2ee <spi_write_packet+0xe>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
     2f4:	a4 17       	cp	r26, r20
     2f6:	b5 07       	cpc	r27, r21
     2f8:	c1 f7       	brne	.-16     	; 0x2ea <spi_write_packet+0xa>
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	08 95       	ret

000002fe <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
     2fe:	fc 01       	movw	r30, r24
     300:	db 01       	movw	r26, r22
	while (len--) {
     302:	41 15       	cp	r20, r1
     304:	51 05       	cpc	r21, r1
     306:	61 f0       	breq	.+24     	; 0x320 <spi_read_packet+0x22>
     308:	46 0f       	add	r20, r22
     30a:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     30c:	9f ef       	ldi	r25, 0xFF	; 255
     30e:	93 83       	std	Z+3, r25	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     310:	82 81       	ldd	r24, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
     312:	88 23       	and	r24, r24
     314:	ec f7       	brge	.-6      	; 0x310 <spi_read_packet+0x12>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
     316:	83 81       	ldd	r24, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
     318:	8d 93       	st	X+, r24
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
     31a:	a4 17       	cp	r26, r20
     31c:	b5 07       	cpc	r27, r21
     31e:	b9 f7       	brne	.-18     	; 0x30e <spi_read_packet+0x10>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	08 95       	ret

00000324 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_level(device->id,0);
     324:	fb 01       	movw	r30, r22
     326:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     328:	e8 2f       	mov	r30, r24
     32a:	e6 95       	lsr	r30
     32c:	e6 95       	lsr	r30
     32e:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     330:	40 e2       	ldi	r20, 0x20	; 32
     332:	e4 9f       	mul	r30, r20
     334:	f0 01       	movw	r30, r0
     336:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     338:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     33a:	87 70       	andi	r24, 0x07	; 7
     33c:	21 e0       	ldi	r18, 0x01	; 1
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	a9 01       	movw	r20, r18
     342:	02 c0       	rjmp	.+4      	; 0x348 <spi_select_device+0x24>
     344:	44 0f       	add	r20, r20
     346:	55 1f       	adc	r21, r21
     348:	8a 95       	dec	r24
     34a:	e2 f7       	brpl	.-8      	; 0x344 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     34c:	46 83       	std	Z+6, r20	; 0x06
     34e:	08 95       	ret

00000350 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_level(device->id,1);
     350:	fb 01       	movw	r30, r22
     352:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     354:	e8 2f       	mov	r30, r24
     356:	e6 95       	lsr	r30
     358:	e6 95       	lsr	r30
     35a:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     35c:	40 e2       	ldi	r20, 0x20	; 32
     35e:	e4 9f       	mul	r30, r20
     360:	f0 01       	movw	r30, r0
     362:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     364:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     366:	87 70       	andi	r24, 0x07	; 7
     368:	21 e0       	ldi	r18, 0x01	; 1
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	a9 01       	movw	r20, r18
     36e:	02 c0       	rjmp	.+4      	; 0x374 <spi_deselect_device+0x24>
     370:	44 0f       	add	r20, r20
     372:	55 1f       	adc	r21, r21
     374:	8a 95       	dec	r24
     376:	e2 f7       	brpl	.-8      	; 0x370 <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     378:	45 83       	std	Z+5, r20	; 0x05
     37a:	08 95       	ret

0000037c <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     37c:	10 92 3e 27 	sts	0x273E, r1
     380:	10 92 4a 27 	sts	0x274A, r1
     384:	10 92 4b 27 	sts	0x274B, r1
     388:	81 ea       	ldi	r24, 0xA1	; 161
     38a:	80 93 40 27 	sts	0x2740, r24
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	80 93 41 27 	sts	0x2741, r24
     394:	10 92 42 27 	sts	0x2742, r1
     398:	10 92 43 27 	sts	0x2743, r1
     39c:	10 92 44 27 	sts	0x2744, r1
     3a0:	10 92 45 27 	sts	0x2745, r1
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	80 93 46 27 	sts	0x2746, r24
     3ac:	90 93 47 27 	sts	0x2747, r25
     3b0:	10 92 48 27 	sts	0x2748, r1
     3b4:	10 92 49 27 	sts	0x2749, r1
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	92 ec       	ldi	r25, 0xC2	; 194
     3bc:	a1 e0       	ldi	r26, 0x01	; 1
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	80 93 4c 27 	sts	0x274C, r24
     3c4:	90 93 4d 27 	sts	0x274D, r25
     3c8:	a0 93 4e 27 	sts	0x274E, r26
     3cc:	b0 93 4f 27 	sts	0x274F, r27
     3d0:	10 92 50 27 	sts	0x2750, r1
     3d4:	10 92 51 27 	sts	0x2751, r1
     3d8:	88 e0       	ldi	r24, 0x08	; 8
     3da:	80 93 52 27 	sts	0x2752, r24
     3de:	80 91 3e 27 	lds	r24, 0x273E
     3e2:	8f 5f       	subi	r24, 0xFF	; 255
     3e4:	80 93 3e 27 	sts	0x273E, r24
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	08 95       	ret

000003ec <udi_cdc_comm_disable>:
     3ec:	80 91 3e 27 	lds	r24, 0x273E
     3f0:	81 50       	subi	r24, 0x01	; 1
     3f2:	80 93 3e 27 	sts	0x273E, r24
     3f6:	08 95       	ret

000003f8 <udi_cdc_data_disable>:
     3f8:	80 91 3d 27 	lds	r24, 0x273D
     3fc:	81 50       	subi	r24, 0x01	; 1
     3fe:	80 93 3d 27 	sts	0x273D, r24
     402:	80 91 3d 27 	lds	r24, 0x273D
     406:	10 92 3c 27 	sts	0x273C, r1
     40a:	08 95       	ret

0000040c <udi_cdc_data_setup>:
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	08 95       	ret

00000410 <udi_cdc_getsetting>:
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	08 95       	ret

00000414 <udi_cdc_comm_setup>:
     414:	80 91 40 29 	lds	r24, 0x2940
     418:	88 23       	and	r24, r24
     41a:	dc f4       	brge	.+54     	; 0x452 <udi_cdc_comm_setup+0x3e>
     41c:	80 76       	andi	r24, 0x60	; 96
     41e:	80 32       	cpi	r24, 0x20	; 32
     420:	e9 f5       	brne	.+122    	; 0x49c <udi_cdc_comm_setup+0x88>
     422:	80 91 41 29 	lds	r24, 0x2941
     426:	81 32       	cpi	r24, 0x21	; 33
     428:	d9 f5       	brne	.+118    	; 0x4a0 <udi_cdc_comm_setup+0x8c>
     42a:	80 91 46 29 	lds	r24, 0x2946
     42e:	90 91 47 29 	lds	r25, 0x2947
     432:	07 97       	sbiw	r24, 0x07	; 7
     434:	b9 f5       	brne	.+110    	; 0x4a4 <udi_cdc_comm_setup+0x90>
     436:	8c e4       	ldi	r24, 0x4C	; 76
     438:	97 e2       	ldi	r25, 0x27	; 39
     43a:	80 93 48 29 	sts	0x2948, r24
     43e:	90 93 49 29 	sts	0x2949, r25
     442:	87 e0       	ldi	r24, 0x07	; 7
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	80 93 4a 29 	sts	0x294A, r24
     44a:	90 93 4b 29 	sts	0x294B, r25
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	08 95       	ret
     452:	80 76       	andi	r24, 0x60	; 96
     454:	80 32       	cpi	r24, 0x20	; 32
     456:	41 f5       	brne	.+80     	; 0x4a8 <udi_cdc_comm_setup+0x94>
     458:	80 91 41 29 	lds	r24, 0x2941
     45c:	80 32       	cpi	r24, 0x20	; 32
     45e:	21 f0       	breq	.+8      	; 0x468 <udi_cdc_comm_setup+0x54>
     460:	82 32       	cpi	r24, 0x22	; 34
     462:	21 f5       	brne	.+72     	; 0x4ac <udi_cdc_comm_setup+0x98>
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	08 95       	ret
     468:	80 91 46 29 	lds	r24, 0x2946
     46c:	90 91 47 29 	lds	r25, 0x2947
     470:	07 97       	sbiw	r24, 0x07	; 7
     472:	f1 f4       	brne	.+60     	; 0x4b0 <udi_cdc_comm_setup+0x9c>
     474:	8a e5       	ldi	r24, 0x5A	; 90
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	80 93 4c 29 	sts	0x294C, r24
     47c:	90 93 4d 29 	sts	0x294D, r25
     480:	8c e4       	ldi	r24, 0x4C	; 76
     482:	97 e2       	ldi	r25, 0x27	; 39
     484:	80 93 48 29 	sts	0x2948, r24
     488:	90 93 49 29 	sts	0x2949, r25
     48c:	87 e0       	ldi	r24, 0x07	; 7
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	80 93 4a 29 	sts	0x294A, r24
     494:	90 93 4b 29 	sts	0x294B, r25
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	08 95       	ret
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	08 95       	ret
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	08 95       	ret
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	08 95       	ret
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	08 95       	ret
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	08 95       	ret
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	08 95       	ret

000004b4 <udi_cdc_line_coding_received>:
     4b4:	08 95       	ret

000004b6 <udi_cdc_tx_send>:
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	80 91 2b 26 	lds	r24, 0x262B
     4c4:	81 11       	cpse	r24, r1
     4c6:	9c c0       	rjmp	.+312    	; 0x600 <udi_cdc_tx_send+0x14a>
     4c8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <udd_is_high_speed>
     4cc:	88 23       	and	r24, r24
     4ce:	51 f0       	breq	.+20     	; 0x4e4 <udi_cdc_tx_send+0x2e>
     4d0:	c0 91 2c 26 	lds	r28, 0x262C
     4d4:	d0 91 2d 26 	lds	r29, 0x262D
     4d8:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <udd_get_micro_frame_number>
     4dc:	c8 17       	cp	r28, r24
     4de:	d9 07       	cpc	r29, r25
     4e0:	59 f4       	brne	.+22     	; 0x4f8 <udi_cdc_tx_send+0x42>
     4e2:	8e c0       	rjmp	.+284    	; 0x600 <udi_cdc_tx_send+0x14a>
     4e4:	c0 91 2c 26 	lds	r28, 0x262C
     4e8:	d0 91 2d 26 	lds	r29, 0x262D
     4ec:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <udd_get_frame_number>
     4f0:	c8 17       	cp	r28, r24
     4f2:	d9 07       	cpc	r29, r25
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <udi_cdc_tx_send+0x42>
     4f6:	84 c0       	rjmp	.+264    	; 0x600 <udi_cdc_tx_send+0x14a>
     4f8:	df b7       	in	r29, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	c0 91 2e 26 	lds	r28, 0x262E
     500:	ec 2f       	mov	r30, r28
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	ee 0f       	add	r30, r30
     506:	ff 1f       	adc	r31, r31
     508:	e1 5d       	subi	r30, 0xD1	; 209
     50a:	f9 4d       	sbci	r31, 0xD9	; 217
     50c:	80 81       	ld	r24, Z
     50e:	91 81       	ldd	r25, Z+1	; 0x01
     510:	89 2b       	or	r24, r25
     512:	09 f5       	brne	.+66     	; 0x556 <udi_cdc_tx_send+0xa0>
     514:	80 91 28 26 	lds	r24, 0x2628
     518:	90 91 29 26 	lds	r25, 0x2629
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	80 93 28 26 	sts	0x2628, r24
     522:	90 93 29 26 	sts	0x2629, r25
     526:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <udd_is_high_speed>
     52a:	81 11       	cpse	r24, r1
     52c:	07 c0       	rjmp	.+14     	; 0x53c <udi_cdc_tx_send+0x86>
     52e:	80 91 28 26 	lds	r24, 0x2628
     532:	90 91 29 26 	lds	r25, 0x2629
     536:	84 36       	cpi	r24, 0x64	; 100
     538:	91 05       	cpc	r25, r1
     53a:	58 f0       	brcs	.+22     	; 0x552 <udi_cdc_tx_send+0x9c>
     53c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <udd_is_high_speed>
     540:	88 23       	and	r24, r24
     542:	49 f0       	breq	.+18     	; 0x556 <udi_cdc_tx_send+0xa0>
     544:	80 91 28 26 	lds	r24, 0x2628
     548:	90 91 29 26 	lds	r25, 0x2629
     54c:	80 32       	cpi	r24, 0x20	; 32
     54e:	93 40       	sbci	r25, 0x03	; 3
     550:	10 f4       	brcc	.+4      	; 0x556 <udi_cdc_tx_send+0xa0>
     552:	df bf       	out	0x3f, r29	; 63
     554:	55 c0       	rjmp	.+170    	; 0x600 <udi_cdc_tx_send+0x14a>
     556:	10 92 28 26 	sts	0x2628, r1
     55a:	10 92 29 26 	sts	0x2629, r1
     55e:	80 91 2a 26 	lds	r24, 0x262A
     562:	81 11       	cpse	r24, r1
     564:	06 c0       	rjmp	.+12     	; 0x572 <udi_cdc_tx_send+0xbc>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	c1 11       	cpse	r28, r1
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	80 93 2e 26 	sts	0x262E, r24
     570:	04 c0       	rjmp	.+8      	; 0x57a <udi_cdc_tx_send+0xc4>
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	c1 11       	cpse	r28, r1
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	c8 2f       	mov	r28, r24
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	80 93 2b 26 	sts	0x262B, r24
     580:	df bf       	out	0x3f, r29	; 63
     582:	d0 e0       	ldi	r29, 0x00	; 0
     584:	fe 01       	movw	r30, r28
     586:	ee 0f       	add	r30, r30
     588:	ff 1f       	adc	r31, r31
     58a:	e1 5d       	subi	r30, 0xD1	; 209
     58c:	f9 4d       	sbci	r31, 0xD9	; 217
     58e:	ff 24       	eor	r15, r15
     590:	f3 94       	inc	r15
     592:	80 81       	ld	r24, Z
     594:	91 81       	ldd	r25, Z+1	; 0x01
     596:	80 34       	cpi	r24, 0x40	; 64
     598:	91 05       	cpc	r25, r1
     59a:	09 f4       	brne	.+2      	; 0x59e <udi_cdc_tx_send+0xe8>
     59c:	f1 2c       	mov	r15, r1
     59e:	ff 20       	and	r15, r15
     5a0:	91 f0       	breq	.+36     	; 0x5c6 <udi_cdc_tx_send+0x110>
     5a2:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <udd_is_high_speed>
     5a6:	88 23       	and	r24, r24
     5a8:	39 f0       	breq	.+14     	; 0x5b8 <udi_cdc_tx_send+0x102>
     5aa:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <udd_get_micro_frame_number>
     5ae:	80 93 2c 26 	sts	0x262C, r24
     5b2:	90 93 2d 26 	sts	0x262D, r25
     5b6:	0b c0       	rjmp	.+22     	; 0x5ce <udi_cdc_tx_send+0x118>
     5b8:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <udd_get_frame_number>
     5bc:	80 93 2c 26 	sts	0x262C, r24
     5c0:	90 93 2d 26 	sts	0x262D, r25
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <udi_cdc_tx_send+0x118>
     5c6:	10 92 2c 26 	sts	0x262C, r1
     5ca:	10 92 2d 26 	sts	0x262D, r1
     5ce:	fe 01       	movw	r30, r28
     5d0:	ee 0f       	add	r30, r30
     5d2:	ff 1f       	adc	r31, r31
     5d4:	e1 5d       	subi	r30, 0xD1	; 209
     5d6:	f9 4d       	sbci	r31, 0xD9	; 217
     5d8:	20 81       	ld	r18, Z
     5da:	31 81       	ldd	r19, Z+1	; 0x01
     5dc:	ae 01       	movw	r20, r28
     5de:	00 24       	eor	r0, r0
     5e0:	56 95       	lsr	r21
     5e2:	47 95       	ror	r20
     5e4:	07 94       	ror	r0
     5e6:	56 95       	lsr	r21
     5e8:	47 95       	ror	r20
     5ea:	07 94       	ror	r0
     5ec:	54 2f       	mov	r21, r20
     5ee:	40 2d       	mov	r20, r0
     5f0:	4c 5c       	subi	r20, 0xCC	; 204
     5f2:	59 4d       	sbci	r21, 0xD9	; 217
     5f4:	06 e0       	ldi	r16, 0x06	; 6
     5f6:	13 e0       	ldi	r17, 0x03	; 3
     5f8:	6f 2d       	mov	r22, r15
     5fa:	81 e8       	ldi	r24, 0x81	; 129
     5fc:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <udd_ep_run>
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	08 95       	ret

0000060c <udi_cdc_data_sent>:
     60c:	81 11       	cpse	r24, r1
     60e:	15 c0       	rjmp	.+42     	; 0x63a <udi_cdc_data_sent+0x2e>
     610:	20 91 2e 26 	lds	r18, 0x262E
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	22 23       	and	r18, r18
     61a:	11 f0       	breq	.+4      	; 0x620 <udi_cdc_data_sent+0x14>
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	fc 01       	movw	r30, r24
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	e1 5d       	subi	r30, 0xD1	; 209
     628:	f9 4d       	sbci	r31, 0xD9	; 217
     62a:	10 82       	st	Z, r1
     62c:	11 82       	std	Z+1, r1	; 0x01
     62e:	10 92 2a 26 	sts	0x262A, r1
     632:	10 92 2b 26 	sts	0x262B, r1
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	3e cf       	rjmp	.-388    	; 0x4b6 <udi_cdc_tx_send>
     63a:	08 95       	ret

0000063c <udi_cdc_data_sof_notify>:
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	3b cf       	rjmp	.-394    	; 0x4b6 <udi_cdc_tx_send>
     640:	08 95       	ret

00000642 <udi_cdc_multi_get_nb_received_data>:
     642:	4f b7       	in	r20, 0x3f	; 63
     644:	f8 94       	cli
     646:	20 91 b5 26 	lds	r18, 0x26B5
     64a:	30 91 b6 26 	lds	r19, 0x26B6
     64e:	e0 91 b7 26 	lds	r30, 0x26B7
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	ee 0f       	add	r30, r30
     656:	ff 1f       	adc	r31, r31
     658:	e8 54       	subi	r30, 0x48	; 72
     65a:	f9 4d       	sbci	r31, 0xD9	; 217
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	82 1b       	sub	r24, r18
     662:	93 0b       	sbc	r25, r19
     664:	4f bf       	out	0x3f, r20	; 63
     666:	08 95       	ret

00000668 <udi_cdc_multi_is_rx_ready>:
     668:	ec df       	rcall	.-40     	; 0x642 <udi_cdc_multi_get_nb_received_data>
     66a:	21 e0       	ldi	r18, 0x01	; 1
     66c:	89 2b       	or	r24, r25
     66e:	09 f4       	brne	.+2      	; 0x672 <udi_cdc_multi_is_rx_ready+0xa>
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	82 2f       	mov	r24, r18
     674:	08 95       	ret

00000676 <udi_cdc_rx_start>:
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	4f b7       	in	r20, 0x3f	; 63
     680:	f8 94       	cli
     682:	50 91 b7 26 	lds	r21, 0x26B7
     686:	80 91 b4 26 	lds	r24, 0x26B4
     68a:	81 11       	cpse	r24, r1
     68c:	10 c0       	rjmp	.+32     	; 0x6ae <udi_cdc_rx_start+0x38>
     68e:	20 91 b5 26 	lds	r18, 0x26B5
     692:	30 91 b6 26 	lds	r19, 0x26B6
     696:	c5 2f       	mov	r28, r21
     698:	d0 e0       	ldi	r29, 0x00	; 0
     69a:	fe 01       	movw	r30, r28
     69c:	ee 0f       	add	r30, r30
     69e:	ff 1f       	adc	r31, r31
     6a0:	e8 54       	subi	r30, 0x48	; 72
     6a2:	f9 4d       	sbci	r31, 0xD9	; 217
     6a4:	80 81       	ld	r24, Z
     6a6:	91 81       	ldd	r25, Z+1	; 0x01
     6a8:	28 17       	cp	r18, r24
     6aa:	39 07       	cpc	r19, r25
     6ac:	18 f4       	brcc	.+6      	; 0x6b4 <udi_cdc_rx_start+0x3e>
     6ae:	4f bf       	out	0x3f, r20	; 63
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	23 c0       	rjmp	.+70     	; 0x6fa <udi_cdc_rx_start+0x84>
     6b4:	10 92 b5 26 	sts	0x26B5, r1
     6b8:	10 92 b6 26 	sts	0x26B6, r1
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	51 11       	cpse	r21, r1
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	80 93 b7 26 	sts	0x26B7, r24
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 b4 26 	sts	0x26B4, r24
     6cc:	4f bf       	out	0x3f, r20	; 63
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	cb df       	rcall	.-106    	; 0x668 <udi_cdc_multi_is_rx_ready>
     6d2:	ae 01       	movw	r20, r28
     6d4:	00 24       	eor	r0, r0
     6d6:	56 95       	lsr	r21
     6d8:	47 95       	ror	r20
     6da:	07 94       	ror	r0
     6dc:	56 95       	lsr	r21
     6de:	47 95       	ror	r20
     6e0:	07 94       	ror	r0
     6e2:	54 2f       	mov	r21, r20
     6e4:	40 2d       	mov	r20, r0
     6e6:	44 54       	subi	r20, 0x44	; 68
     6e8:	59 4d       	sbci	r21, 0xD9	; 217
     6ea:	04 eb       	ldi	r16, 0xB4	; 180
     6ec:	13 e0       	ldi	r17, 0x03	; 3
     6ee:	20 e4       	ldi	r18, 0x40	; 64
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <udd_ep_run>
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	08 95       	ret

00000704 <udi_cdc_data_enable>:
     704:	10 92 3d 27 	sts	0x273D, r1
     708:	10 92 2b 26 	sts	0x262B, r1
     70c:	10 92 2a 26 	sts	0x262A, r1
     710:	10 92 2e 26 	sts	0x262E, r1
     714:	10 92 2f 26 	sts	0x262F, r1
     718:	10 92 30 26 	sts	0x2630, r1
     71c:	10 92 31 26 	sts	0x2631, r1
     720:	10 92 32 26 	sts	0x2632, r1
     724:	10 92 2c 26 	sts	0x262C, r1
     728:	10 92 2d 26 	sts	0x262D, r1
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	c3 de       	rcall	.-634    	; 0x4b6 <udi_cdc_tx_send>
     730:	10 92 b4 26 	sts	0x26B4, r1
     734:	10 92 b7 26 	sts	0x26B7, r1
     738:	10 92 b8 26 	sts	0x26B8, r1
     73c:	10 92 b9 26 	sts	0x26B9, r1
     740:	10 92 b5 26 	sts	0x26B5, r1
     744:	10 92 b6 26 	sts	0x26B6, r1
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	95 df       	rcall	.-214    	; 0x676 <udi_cdc_rx_start>
     74c:	88 23       	and	r24, r24
     74e:	59 f0       	breq	.+22     	; 0x766 <udi_cdc_data_enable+0x62>
     750:	90 91 3d 27 	lds	r25, 0x273D
     754:	9f 5f       	subi	r25, 0xFF	; 255
     756:	90 93 3d 27 	sts	0x273D, r25
     75a:	90 91 3d 27 	lds	r25, 0x273D
     75e:	91 30       	cpi	r25, 0x01	; 1
     760:	11 f4       	brne	.+4      	; 0x766 <udi_cdc_data_enable+0x62>
     762:	90 93 3c 27 	sts	0x273C, r25
     766:	08 95       	ret

00000768 <udi_cdc_data_received>:
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	94 2f       	mov	r25, r20
     76e:	81 11       	cpse	r24, r1
     770:	29 c0       	rjmp	.+82     	; 0x7c4 <udi_cdc_data_received+0x5c>
     772:	80 91 b7 26 	lds	r24, 0x26B7
     776:	e1 e0       	ldi	r30, 0x01	; 1
     778:	81 11       	cpse	r24, r1
     77a:	e0 e0       	ldi	r30, 0x00	; 0
     77c:	61 15       	cp	r22, r1
     77e:	71 05       	cpc	r23, r1
     780:	b1 f4       	brne	.+44     	; 0x7ae <udi_cdc_data_received+0x46>
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	00 24       	eor	r0, r0
     786:	f6 95       	lsr	r31
     788:	e7 95       	ror	r30
     78a:	07 94       	ror	r0
     78c:	f6 95       	lsr	r31
     78e:	e7 95       	ror	r30
     790:	07 94       	ror	r0
     792:	fe 2f       	mov	r31, r30
     794:	e0 2d       	mov	r30, r0
     796:	af 01       	movw	r20, r30
     798:	44 54       	subi	r20, 0x44	; 68
     79a:	59 4d       	sbci	r21, 0xD9	; 217
     79c:	04 eb       	ldi	r16, 0xB4	; 180
     79e:	13 e0       	ldi	r17, 0x03	; 3
     7a0:	20 e4       	ldi	r18, 0x40	; 64
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	89 2f       	mov	r24, r25
     7a8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <udd_ep_run>
     7ac:	0b c0       	rjmp	.+22     	; 0x7c4 <udi_cdc_data_received+0x5c>
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	ee 0f       	add	r30, r30
     7b2:	ff 1f       	adc	r31, r31
     7b4:	e8 54       	subi	r30, 0x48	; 72
     7b6:	f9 4d       	sbci	r31, 0xD9	; 217
     7b8:	60 83       	st	Z, r22
     7ba:	71 83       	std	Z+1, r23	; 0x01
     7bc:	10 92 b4 26 	sts	0x26B4, r1
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	59 df       	rcall	.-334    	; 0x676 <udi_cdc_rx_start>
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	08 95       	ret

000007ca <udi_cdc_is_rx_ready>:
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	4d cf       	rjmp	.-358    	; 0x668 <udi_cdc_multi_is_rx_ready>
     7ce:	08 95       	ret

000007d0 <udi_cdc_multi_getc>:
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	11 e0       	ldi	r17, 0x01	; 1
     7d8:	80 91 52 27 	lds	r24, 0x2752
     7dc:	89 30       	cpi	r24, 0x09	; 9
     7de:	09 f0       	breq	.+2      	; 0x7e2 <udi_cdc_multi_getc+0x12>
     7e0:	10 e0       	ldi	r17, 0x00	; 0
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	3f b7       	in	r19, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	80 91 b5 26 	lds	r24, 0x26B5
     7ee:	90 91 b6 26 	lds	r25, 0x26B6
     7f2:	20 91 b7 26 	lds	r18, 0x26B7
     7f6:	3f bf       	out	0x3f, r19	; 63
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	f9 01       	movw	r30, r18
     7fc:	ee 0f       	add	r30, r30
     7fe:	ff 1f       	adc	r31, r31
     800:	e8 54       	subi	r30, 0x48	; 72
     802:	f9 4d       	sbci	r31, 0xD9	; 217
     804:	40 81       	ld	r20, Z
     806:	51 81       	ldd	r21, Z+1	; 0x01
     808:	84 17       	cp	r24, r20
     80a:	95 07       	cpc	r25, r21
     80c:	30 f0       	brcs	.+12     	; 0x81a <udi_cdc_multi_getc+0x4a>
     80e:	80 91 3c 27 	lds	r24, 0x273C
     812:	81 11       	cpse	r24, r1
     814:	e8 cf       	rjmp	.-48     	; 0x7e6 <udi_cdc_multi_getc+0x16>
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	20 c0       	rjmp	.+64     	; 0x85a <udi_cdc_multi_getc+0x8a>
     81a:	f9 01       	movw	r30, r18
     81c:	00 24       	eor	r0, r0
     81e:	f6 95       	lsr	r31
     820:	e7 95       	ror	r30
     822:	07 94       	ror	r0
     824:	f6 95       	lsr	r31
     826:	e7 95       	ror	r30
     828:	07 94       	ror	r0
     82a:	fe 2f       	mov	r31, r30
     82c:	e0 2d       	mov	r30, r0
     82e:	e8 0f       	add	r30, r24
     830:	f9 1f       	adc	r31, r25
     832:	e4 54       	subi	r30, 0x44	; 68
     834:	f9 4d       	sbci	r31, 0xD9	; 217
     836:	20 81       	ld	r18, Z
     838:	eb 01       	movw	r28, r22
     83a:	c2 2b       	or	r28, r18
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	80 93 b5 26 	sts	0x26B5, r24
     842:	90 93 b6 26 	sts	0x26B6, r25
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	16 df       	rcall	.-468    	; 0x676 <udi_cdc_rx_start>
     84a:	11 23       	and	r17, r17
     84c:	21 f0       	breq	.+8      	; 0x856 <udi_cdc_multi_getc+0x86>
     84e:	7c 2f       	mov	r23, r28
     850:	66 27       	eor	r22, r22
     852:	10 e0       	ldi	r17, 0x00	; 0
     854:	c8 cf       	rjmp	.-112    	; 0x7e6 <udi_cdc_multi_getc+0x16>
     856:	8c 2f       	mov	r24, r28
     858:	9d 2f       	mov	r25, r29
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	08 95       	ret

00000862 <udi_cdc_getc>:
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	b5 cf       	rjmp	.-150    	; 0x7d0 <udi_cdc_multi_getc>
     866:	08 95       	ret

00000868 <udi_cdc_multi_get_free_tx_buffer>:
     868:	9f b7       	in	r25, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	80 91 2e 26 	lds	r24, 0x262E
     870:	e8 2f       	mov	r30, r24
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	ee 0f       	add	r30, r30
     876:	ff 1f       	adc	r31, r31
     878:	e1 5d       	subi	r30, 0xD1	; 209
     87a:	f9 4d       	sbci	r31, 0xD9	; 217
     87c:	20 81       	ld	r18, Z
     87e:	31 81       	ldd	r19, Z+1	; 0x01
     880:	20 34       	cpi	r18, 0x40	; 64
     882:	31 05       	cpc	r19, r1
     884:	89 f4       	brne	.+34     	; 0x8a8 <udi_cdc_multi_get_free_tx_buffer+0x40>
     886:	40 91 2b 26 	lds	r20, 0x262B
     88a:	41 11       	cpse	r20, r1
     88c:	0d c0       	rjmp	.+26     	; 0x8a8 <udi_cdc_multi_get_free_tx_buffer+0x40>
     88e:	40 91 2a 26 	lds	r20, 0x262A
     892:	41 11       	cpse	r20, r1
     894:	09 c0       	rjmp	.+18     	; 0x8a8 <udi_cdc_multi_get_free_tx_buffer+0x40>
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	20 93 2a 26 	sts	0x262A, r18
     89c:	81 11       	cpse	r24, r1
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	20 93 2e 26 	sts	0x262E, r18
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	9f bf       	out	0x3f, r25	; 63
     8aa:	80 e4       	ldi	r24, 0x40	; 64
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	82 1b       	sub	r24, r18
     8b0:	93 0b       	sbc	r25, r19
     8b2:	08 95       	ret

000008b4 <udi_cdc_multi_is_tx_ready>:
     8b4:	d9 df       	rcall	.-78     	; 0x868 <udi_cdc_multi_get_free_tx_buffer>
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	89 2b       	or	r24, r25
     8ba:	09 f4       	brne	.+2      	; 0x8be <udi_cdc_multi_is_tx_ready+0xa>
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	82 2f       	mov	r24, r18
     8c0:	08 95       	ret

000008c2 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	16 2f       	mov	r17, r22
     8ca:	c7 2f       	mov	r28, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     8cc:	d1 e0       	ldi	r29, 0x01	; 1
     8ce:	80 91 52 27 	lds	r24, 0x2752
     8d2:	89 30       	cpi	r24, 0x09	; 9
     8d4:	09 f0       	breq	.+2      	; 0x8d8 <udi_cdc_multi_putc+0x16>
     8d6:	d0 e0       	ldi	r29, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	ec df       	rcall	.-40     	; 0x8b4 <udi_cdc_multi_is_tx_ready>
     8dc:	81 11       	cpse	r24, r1
     8de:	07 c0       	rjmp	.+14     	; 0x8ee <udi_cdc_multi_putc+0x2c>
		if (!udi_cdc_data_running) {
     8e0:	80 91 3c 27 	lds	r24, 0x273C
     8e4:	81 11       	cpse	r24, r1
     8e6:	f8 cf       	rjmp	.-16     	; 0x8d8 <udi_cdc_multi_putc+0x16>
			return false;
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	2b c0       	rjmp	.+86     	; 0x944 <udi_cdc_multi_putc+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8ee:	6f b7       	in	r22, 0x3f	; 63
	cpu_irq_disable();
     8f0:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     8f2:	20 91 2e 26 	lds	r18, 0x262E
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	e1 5d       	subi	r30, 0xD1	; 209
     900:	f9 4d       	sbci	r31, 0xD9	; 217
     902:	80 81       	ld	r24, Z
     904:	91 81       	ldd	r25, Z+1	; 0x01
     906:	ac 01       	movw	r20, r24
     908:	4f 5f       	subi	r20, 0xFF	; 255
     90a:	5f 4f       	sbci	r21, 0xFF	; 255
     90c:	40 83       	st	Z, r20
     90e:	51 83       	std	Z+1, r21	; 0x01
     910:	f9 01       	movw	r30, r18
     912:	00 24       	eor	r0, r0
     914:	f6 95       	lsr	r31
     916:	e7 95       	ror	r30
     918:	07 94       	ror	r0
     91a:	f6 95       	lsr	r31
     91c:	e7 95       	ror	r30
     91e:	07 94       	ror	r0
     920:	fe 2f       	mov	r31, r30
     922:	e0 2d       	mov	r30, r0
     924:	8e 0f       	add	r24, r30
     926:	9f 1f       	adc	r25, r31
     928:	fc 01       	movw	r30, r24
     92a:	ec 5c       	subi	r30, 0xCC	; 204
     92c:	f9 4d       	sbci	r31, 0xD9	; 217
     92e:	10 83       	st	Z, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     930:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     932:	dd 23       	and	r29, r29
     934:	29 f0       	breq	.+10     	; 0x940 <udi_cdc_multi_putc+0x7e>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     936:	1c 2f       	mov	r17, r28
     938:	cc 0f       	add	r28, r28
     93a:	cc 0b       	sbc	r28, r28
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     93c:	d0 e0       	ldi	r29, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     93e:	cc cf       	rjmp	.-104    	; 0x8d8 <udi_cdc_multi_putc+0x16>
	}
	return true;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     94c:	bc 01       	movw	r22, r24
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	b8 cf       	rjmp	.-144    	; 0x8c2 <udi_cdc_multi_putc>
}
     952:	08 95       	ret

00000954 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     954:	e0 91 58 27 	lds	r30, 0x2758
     958:	f0 91 59 27 	lds	r31, 0x2759
     95c:	01 90       	ld	r0, Z+
     95e:	f0 81       	ld	r31, Z
     960:	e0 2d       	mov	r30, r0
     962:	22 81       	ldd	r18, Z+2	; 0x02
     964:	33 81       	ldd	r19, Z+3	; 0x03
     966:	2e 0f       	add	r18, r30
     968:	3f 1f       	adc	r19, r31
     96a:	fc 01       	movw	r30, r24
     96c:	40 81       	ld	r20, Z
     96e:	e4 0f       	add	r30, r20
     970:	f1 1d       	adc	r31, r1
     972:	e2 17       	cp	r30, r18
     974:	f3 07       	cpc	r31, r19
     976:	a0 f4       	brcc	.+40     	; 0x9a0 <udc_next_desc_in_iface+0x4c>
     978:	81 81       	ldd	r24, Z+1	; 0x01
     97a:	84 30       	cpi	r24, 0x04	; 4
     97c:	a1 f0       	breq	.+40     	; 0x9a6 <udc_next_desc_in_iface+0x52>
     97e:	86 13       	cpse	r24, r22
     980:	06 c0       	rjmp	.+12     	; 0x98e <udc_next_desc_in_iface+0x3a>
     982:	14 c0       	rjmp	.+40     	; 0x9ac <udc_next_desc_in_iface+0x58>
     984:	81 81       	ldd	r24, Z+1	; 0x01
     986:	84 30       	cpi	r24, 0x04	; 4
     988:	a1 f0       	breq	.+40     	; 0x9b2 <udc_next_desc_in_iface+0x5e>
     98a:	86 17       	cp	r24, r22
     98c:	a9 f0       	breq	.+42     	; 0x9b8 <udc_next_desc_in_iface+0x64>
     98e:	80 81       	ld	r24, Z
     990:	e8 0f       	add	r30, r24
     992:	f1 1d       	adc	r31, r1
     994:	e2 17       	cp	r30, r18
     996:	f3 07       	cpc	r31, r19
     998:	a8 f3       	brcs	.-22     	; 0x984 <udc_next_desc_in_iface+0x30>
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	08 95       	ret
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	08 95       	ret
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	08 95       	ret
     9ac:	8e 2f       	mov	r24, r30
     9ae:	9f 2f       	mov	r25, r31
     9b0:	08 95       	ret
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	08 95       	ret
     9b8:	8e 2f       	mov	r24, r30
     9ba:	9f 2f       	mov	r25, r31
     9bc:	08 95       	ret

000009be <udc_valid_address>:
     9be:	80 91 42 29 	lds	r24, 0x2942
     9c2:	8f 77       	andi	r24, 0x7F	; 127
     9c4:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <udd_set_address>
     9c8:	08 95       	ret

000009ca <udc_update_iface_desc>:
     9ca:	90 91 5a 27 	lds	r25, 0x275A
     9ce:	99 23       	and	r25, r25
     9d0:	81 f1       	breq	.+96     	; 0xa32 <udc_update_iface_desc+0x68>
     9d2:	e0 91 58 27 	lds	r30, 0x2758
     9d6:	f0 91 59 27 	lds	r31, 0x2759
     9da:	01 90       	ld	r0, Z+
     9dc:	f0 81       	ld	r31, Z
     9de:	e0 2d       	mov	r30, r0
     9e0:	94 81       	ldd	r25, Z+4	; 0x04
     9e2:	89 17       	cp	r24, r25
     9e4:	40 f5       	brcc	.+80     	; 0xa36 <udc_update_iface_desc+0x6c>
     9e6:	e0 93 56 27 	sts	0x2756, r30
     9ea:	f0 93 57 27 	sts	0x2757, r31
     9ee:	22 81       	ldd	r18, Z+2	; 0x02
     9f0:	33 81       	ldd	r19, Z+3	; 0x03
     9f2:	2e 0f       	add	r18, r30
     9f4:	3f 1f       	adc	r19, r31
     9f6:	e2 17       	cp	r30, r18
     9f8:	f3 07       	cpc	r31, r19
     9fa:	f8 f4       	brcc	.+62     	; 0xa3a <udc_update_iface_desc+0x70>
     9fc:	91 81       	ldd	r25, Z+1	; 0x01
     9fe:	94 30       	cpi	r25, 0x04	; 4
     a00:	61 f4       	brne	.+24     	; 0xa1a <udc_update_iface_desc+0x50>
     a02:	92 81       	ldd	r25, Z+2	; 0x02
     a04:	98 13       	cpse	r25, r24
     a06:	09 c0       	rjmp	.+18     	; 0xa1a <udc_update_iface_desc+0x50>
     a08:	93 81       	ldd	r25, Z+3	; 0x03
     a0a:	96 13       	cpse	r25, r22
     a0c:	06 c0       	rjmp	.+12     	; 0xa1a <udc_update_iface_desc+0x50>
     a0e:	e0 93 56 27 	sts	0x2756, r30
     a12:	f0 93 57 27 	sts	0x2757, r31
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	08 95       	ret
     a1a:	90 81       	ld	r25, Z
     a1c:	e9 0f       	add	r30, r25
     a1e:	f1 1d       	adc	r31, r1
     a20:	e2 17       	cp	r30, r18
     a22:	f3 07       	cpc	r31, r19
     a24:	58 f3       	brcs	.-42     	; 0x9fc <udc_update_iface_desc+0x32>
     a26:	e0 93 56 27 	sts	0x2756, r30
     a2a:	f0 93 57 27 	sts	0x2757, r31
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	08 95       	ret
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	08 95       	ret
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	08 95       	ret
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	08 95       	ret

00000a3e <udc_iface_disable>:
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	c8 2f       	mov	r28, r24
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	be df       	rcall	.-132    	; 0x9ca <udc_update_iface_desc>
     a4e:	f8 2e       	mov	r15, r24
     a50:	88 23       	and	r24, r24
     a52:	81 f1       	breq	.+96     	; 0xab4 <udc_iface_disable+0x76>
     a54:	a0 91 58 27 	lds	r26, 0x2758
     a58:	b0 91 59 27 	lds	r27, 0x2759
     a5c:	ec 2f       	mov	r30, r28
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	12 96       	adiw	r26, 0x02	; 2
     a66:	2d 91       	ld	r18, X+
     a68:	3c 91       	ld	r19, X
     a6a:	13 97       	sbiw	r26, 0x03	; 3
     a6c:	e2 0f       	add	r30, r18
     a6e:	f3 1f       	adc	r31, r19
     a70:	00 81       	ld	r16, Z
     a72:	11 81       	ldd	r17, Z+1	; 0x01
     a74:	d8 01       	movw	r26, r16
     a76:	16 96       	adiw	r26, 0x06	; 6
     a78:	ed 91       	ld	r30, X+
     a7a:	fc 91       	ld	r31, X
     a7c:	17 97       	sbiw	r26, 0x07	; 7
     a7e:	09 95       	icall
     a80:	68 2f       	mov	r22, r24
     a82:	8c 2f       	mov	r24, r28
     a84:	a2 df       	rcall	.-188    	; 0x9ca <udc_update_iface_desc>
     a86:	f8 2e       	mov	r15, r24
     a88:	88 23       	and	r24, r24
     a8a:	a1 f0       	breq	.+40     	; 0xab4 <udc_iface_disable+0x76>
     a8c:	c0 91 56 27 	lds	r28, 0x2756
     a90:	d0 91 57 27 	lds	r29, 0x2757
     a94:	65 e0       	ldi	r22, 0x05	; 5
     a96:	ce 01       	movw	r24, r28
     a98:	5d df       	rcall	.-326    	; 0x954 <udc_next_desc_in_iface>
     a9a:	ec 01       	movw	r28, r24
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <udc_iface_disable+0x6a>
     aa0:	8a 81       	ldd	r24, Y+2	; 0x02
     aa2:	0e 94 82 10 	call	0x2104	; 0x2104 <udd_ep_free>
     aa6:	f6 cf       	rjmp	.-20     	; 0xa94 <udc_iface_disable+0x56>
     aa8:	d8 01       	movw	r26, r16
     aaa:	12 96       	adiw	r26, 0x02	; 2
     aac:	ed 91       	ld	r30, X+
     aae:	fc 91       	ld	r31, X
     ab0:	13 97       	sbiw	r26, 0x03	; 3
     ab2:	09 95       	icall
     ab4:	8f 2d       	mov	r24, r15
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	08 95       	ret

00000ac2 <udc_iface_enable>:
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	18 2f       	mov	r17, r24
     aca:	7f df       	rcall	.-258    	; 0x9ca <udc_update_iface_desc>
     acc:	88 23       	and	r24, r24
     ace:	41 f1       	breq	.+80     	; 0xb20 <udc_iface_enable+0x5e>
     ad0:	c0 91 56 27 	lds	r28, 0x2756
     ad4:	d0 91 57 27 	lds	r29, 0x2757
     ad8:	65 e0       	ldi	r22, 0x05	; 5
     ada:	ce 01       	movw	r24, r28
     adc:	3b df       	rcall	.-394    	; 0x954 <udc_next_desc_in_iface>
     ade:	ec 01       	movw	r28, r24
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	49 f0       	breq	.+18     	; 0xaf6 <udc_iface_enable+0x34>
     ae4:	4c 81       	ldd	r20, Y+4	; 0x04
     ae6:	5d 81       	ldd	r21, Y+5	; 0x05
     ae8:	6b 81       	ldd	r22, Y+3	; 0x03
     aea:	8a 81       	ldd	r24, Y+2	; 0x02
     aec:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <udd_ep_alloc>
     af0:	81 11       	cpse	r24, r1
     af2:	f2 cf       	rjmp	.-28     	; 0xad8 <udc_iface_enable+0x16>
     af4:	15 c0       	rjmp	.+42     	; 0xb20 <udc_iface_enable+0x5e>
     af6:	a0 91 58 27 	lds	r26, 0x2758
     afa:	b0 91 59 27 	lds	r27, 0x2759
     afe:	81 2f       	mov	r24, r17
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	12 96       	adiw	r26, 0x02	; 2
     b08:	ed 91       	ld	r30, X+
     b0a:	fc 91       	ld	r31, X
     b0c:	13 97       	sbiw	r26, 0x03	; 3
     b0e:	e8 0f       	add	r30, r24
     b10:	f9 1f       	adc	r31, r25
     b12:	01 90       	ld	r0, Z+
     b14:	f0 81       	ld	r31, Z
     b16:	e0 2d       	mov	r30, r0
     b18:	01 90       	ld	r0, Z+
     b1a:	f0 81       	ld	r31, Z
     b1c:	e0 2d       	mov	r30, r0
     b1e:	09 95       	icall
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	08 95       	ret

00000b28 <udc_start>:
     b28:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <udd_enable>
     b2c:	08 95       	ret

00000b2e <udc_reset>:
     b2e:	cf 93       	push	r28
     b30:	80 91 5a 27 	lds	r24, 0x275A
     b34:	88 23       	and	r24, r24
     b36:	c1 f0       	breq	.+48     	; 0xb68 <udc_reset+0x3a>
     b38:	e0 91 58 27 	lds	r30, 0x2758
     b3c:	f0 91 59 27 	lds	r31, 0x2759
     b40:	01 90       	ld	r0, Z+
     b42:	f0 81       	ld	r31, Z
     b44:	e0 2d       	mov	r30, r0
     b46:	84 81       	ldd	r24, Z+4	; 0x04
     b48:	88 23       	and	r24, r24
     b4a:	71 f0       	breq	.+28     	; 0xb68 <udc_reset+0x3a>
     b4c:	c0 e0       	ldi	r28, 0x00	; 0
     b4e:	8c 2f       	mov	r24, r28
     b50:	76 df       	rcall	.-276    	; 0xa3e <udc_iface_disable>
     b52:	cf 5f       	subi	r28, 0xFF	; 255
     b54:	e0 91 58 27 	lds	r30, 0x2758
     b58:	f0 91 59 27 	lds	r31, 0x2759
     b5c:	01 90       	ld	r0, Z+
     b5e:	f0 81       	ld	r31, Z
     b60:	e0 2d       	mov	r30, r0
     b62:	84 81       	ldd	r24, Z+4	; 0x04
     b64:	c8 17       	cp	r28, r24
     b66:	98 f3       	brcs	.-26     	; 0xb4e <udc_reset+0x20>
     b68:	10 92 5a 27 	sts	0x275A, r1
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	80 93 5e 27 	sts	0x275E, r24
     b74:	90 93 5f 27 	sts	0x275F, r25
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     b7c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     b7e:	80 91 5a 27 	lds	r24, 0x275A
     b82:	88 23       	and	r24, r24
     b84:	41 f1       	breq	.+80     	; 0xbd6 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b86:	e0 91 58 27 	lds	r30, 0x2758
     b8a:	f0 91 59 27 	lds	r31, 0x2759
     b8e:	a0 81       	ld	r26, Z
     b90:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b92:	14 96       	adiw	r26, 0x04	; 4
     b94:	8c 91       	ld	r24, X
     b96:	88 23       	and	r24, r24
     b98:	f1 f0       	breq	.+60     	; 0xbd6 <udc_sof_notify+0x5a>
     b9a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     b9c:	8c 2f       	mov	r24, r28
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	02 80       	ldd	r0, Z+2	; 0x02
     ba6:	f3 81       	ldd	r31, Z+3	; 0x03
     ba8:	e0 2d       	mov	r30, r0
     baa:	e8 0f       	add	r30, r24
     bac:	f9 1f       	adc	r31, r25
     bae:	01 90       	ld	r0, Z+
     bb0:	f0 81       	ld	r31, Z
     bb2:	e0 2d       	mov	r30, r0
     bb4:	00 84       	ldd	r0, Z+8	; 0x08
     bb6:	f1 85       	ldd	r31, Z+9	; 0x09
     bb8:	e0 2d       	mov	r30, r0
     bba:	30 97       	sbiw	r30, 0x00	; 0
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     bbe:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     bc0:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bc2:	e0 91 58 27 	lds	r30, 0x2758
     bc6:	f0 91 59 27 	lds	r31, 0x2759
     bca:	a0 81       	ld	r26, Z
     bcc:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	8c 91       	ld	r24, X
     bd2:	c8 17       	cp	r28, r24
     bd4:	18 f3       	brcs	.-58     	; 0xb9c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     be6:	10 92 4a 29 	sts	0x294A, r1
     bea:	10 92 4b 29 	sts	0x294B, r1
	udd_g_ctrlreq.callback = NULL;
     bee:	10 92 4c 29 	sts	0x294C, r1
     bf2:	10 92 4d 29 	sts	0x294D, r1
	udd_g_ctrlreq.over_under_run = NULL;
     bf6:	10 92 4e 29 	sts	0x294E, r1
     bfa:	10 92 4f 29 	sts	0x294F, r1

	if (Udd_setup_is_in()) {
     bfe:	20 91 40 29 	lds	r18, 0x2940
     c02:	22 23       	and	r18, r18
     c04:	0c f0       	brlt	.+2      	; 0xc08 <udc_process_setup+0x2e>
     c06:	97 c2       	rjmp	.+1326   	; 0x1136 <udc_process_setup+0x55c>
		if (udd_g_ctrlreq.req.wLength == 0) {
     c08:	80 91 46 29 	lds	r24, 0x2946
     c0c:	90 91 47 29 	lds	r25, 0x2947
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	09 f0       	breq	.+2      	; 0xc16 <udc_process_setup+0x3c>
     c14:	95 c2       	rjmp	.+1322   	; 0x1140 <udc_process_setup+0x566>
     c16:	8b c2       	rjmp	.+1302   	; 0x112e <udc_process_setup+0x554>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     c18:	2f 71       	andi	r18, 0x1F	; 31
     c1a:	09 f0       	breq	.+2      	; 0xc1e <udc_process_setup+0x44>
     c1c:	b9 c0       	rjmp	.+370    	; 0xd90 <udc_process_setup+0x1b6>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     c1e:	30 91 41 29 	lds	r19, 0x2941
     c22:	36 30       	cpi	r19, 0x06	; 6
     c24:	89 f0       	breq	.+34     	; 0xc48 <udc_process_setup+0x6e>
     c26:	38 30       	cpi	r19, 0x08	; 8
     c28:	09 f4       	brne	.+2      	; 0xc2c <udc_process_setup+0x52>
     c2a:	a6 c0       	rjmp	.+332    	; 0xd78 <udc_process_setup+0x19e>
     c2c:	31 11       	cpse	r19, r1
     c2e:	b0 c0       	rjmp	.+352    	; 0xd90 <udc_process_setup+0x1b6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     c30:	02 97       	sbiw	r24, 0x02	; 2
     c32:	41 f4       	brne	.+16     	; 0xc44 <udc_process_setup+0x6a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     c34:	62 e0       	ldi	r22, 0x02	; 2
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	8e e5       	ldi	r24, 0x5E	; 94
     c3a:	97 e2       	ldi	r25, 0x27	; 39
     c3c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     c40:	01 e0       	ldi	r16, 0x01	; 1
     c42:	f8 c1       	rjmp	.+1008   	; 0x1034 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     c44:	00 e0       	ldi	r16, 0x00	; 0
     c46:	f6 c1       	rjmp	.+1004   	; 0x1034 <udc_process_setup+0x45a>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     c48:	20 91 42 29 	lds	r18, 0x2942
     c4c:	30 91 43 29 	lds	r19, 0x2943

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     c50:	83 2f       	mov	r24, r19
     c52:	99 27       	eor	r25, r25
     c54:	82 30       	cpi	r24, 0x02	; 2
     c56:	91 05       	cpc	r25, r1
     c58:	a1 f0       	breq	.+40     	; 0xc82 <udc_process_setup+0xa8>
     c5a:	1c f4       	brge	.+6      	; 0xc62 <udc_process_setup+0x88>
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	39 f0       	breq	.+14     	; 0xc6e <udc_process_setup+0x94>
     c60:	81 c0       	rjmp	.+258    	; 0xd64 <udc_process_setup+0x18a>
     c62:	83 30       	cpi	r24, 0x03	; 3
     c64:	91 05       	cpc	r25, r1
     c66:	f1 f1       	breq	.+124    	; 0xce4 <udc_process_setup+0x10a>
     c68:	0f 97       	sbiw	r24, 0x0f	; 15
     c6a:	69 f1       	breq	.+90     	; 0xcc6 <udc_process_setup+0xec>
     c6c:	7b c0       	rjmp	.+246    	; 0xd64 <udc_process_setup+0x18a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     c6e:	80 91 34 20 	lds	r24, 0x2034
     c72:	90 91 35 20 	lds	r25, 0x2035
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     c76:	dc 01       	movw	r26, r24
     c78:	6c 91       	ld	r22, X
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_set_setup_payload>
     c80:	60 c0       	rjmp	.+192    	; 0xd42 <udc_process_setup+0x168>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     c82:	e0 91 34 20 	lds	r30, 0x2034
     c86:	f0 91 35 20 	lds	r31, 0x2035
     c8a:	81 89       	ldd	r24, Z+17	; 0x11
     c8c:	28 17       	cp	r18, r24
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <udc_process_setup+0xb8>
     c90:	6b c0       	rjmp	.+214    	; 0xd68 <udc_process_setup+0x18e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     c92:	c9 01       	movw	r24, r18
     c94:	99 27       	eor	r25, r25
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	e0 91 36 20 	lds	r30, 0x2036
     ca2:	f0 91 37 20 	lds	r31, 0x2037
     ca6:	e8 0f       	add	r30, r24
     ca8:	f9 1f       	adc	r31, r25
     caa:	80 81       	ld	r24, Z
     cac:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     cae:	fc 01       	movw	r30, r24
     cb0:	62 81       	ldd	r22, Z+2	; 0x02
     cb2:	73 81       	ldd	r23, Z+3	; 0x03
     cb4:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     cb8:	e0 91 48 29 	lds	r30, 0x2948
     cbc:	f0 91 49 29 	lds	r31, 0x2949
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	81 83       	std	Z+1, r24	; 0x01
     cc4:	3e c0       	rjmp	.+124    	; 0xd42 <udc_process_setup+0x168>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     cc6:	80 91 38 20 	lds	r24, 0x2038
     cca:	90 91 39 20 	lds	r25, 0x2039
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <udc_process_setup+0xfa>
     cd2:	4c c0       	rjmp	.+152    	; 0xd6c <udc_process_setup+0x192>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     cd4:	dc 01       	movw	r26, r24
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	6d 91       	ld	r22, X+
     cda:	7c 91       	ld	r23, X
     cdc:	13 97       	sbiw	r26, 0x03	; 3
     cde:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_set_setup_payload>
     ce2:	2f c0       	rjmp	.+94     	; 0xd42 <udc_process_setup+0x168>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     ce4:	33 27       	eor	r19, r19
     ce6:	21 30       	cpi	r18, 0x01	; 1
     ce8:	31 05       	cpc	r19, r1
     cea:	89 f0       	breq	.+34     	; 0xd0e <udc_process_setup+0x134>
     cec:	48 f0       	brcs	.+18     	; 0xd00 <udc_process_setup+0x126>
     cee:	22 30       	cpi	r18, 0x02	; 2
     cf0:	31 05       	cpc	r19, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <udc_process_setup+0x11c>
     cf4:	2a c2       	rjmp	.+1108   	; 0x114a <udc_process_setup+0x570>
     cf6:	23 30       	cpi	r18, 0x03	; 3
     cf8:	31 05       	cpc	r19, r1
     cfa:	09 f4       	brne	.+2      	; 0xcfe <udc_process_setup+0x124>
     cfc:	2a c2       	rjmp	.+1108   	; 0x1152 <udc_process_setup+0x578>
     cfe:	38 c0       	rjmp	.+112    	; 0xd70 <udc_process_setup+0x196>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     d00:	64 e0       	ldi	r22, 0x04	; 4
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	80 e3       	ldi	r24, 0x30	; 48
     d06:	90 e2       	ldi	r25, 0x20	; 32
     d08:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_set_setup_payload>
     d0c:	1a c0       	rjmp	.+52     	; 0xd42 <udc_process_setup+0x168>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     d0e:	89 e2       	ldi	r24, 0x29	; 41
     d10:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     d12:	25 e0       	ldi	r18, 0x05	; 5
     d14:	38 2f       	mov	r19, r24
     d16:	a6 e1       	ldi	r26, 0x16	; 22
     d18:	b0 e2       	ldi	r27, 0x20	; 32
     d1a:	e8 2f       	mov	r30, r24
     d1c:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     d1e:	81 91       	ld	r24, Z+
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	8d 93       	st	X+, r24
     d24:	9d 93       	st	X+, r25
     d26:	8e 2f       	mov	r24, r30
     d28:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     d2a:	82 17       	cp	r24, r18
     d2c:	c0 f3       	brcs	.-16     	; 0xd1e <udc_process_setup+0x144>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     d2e:	22 0f       	add	r18, r18
     d30:	62 e0       	ldi	r22, 0x02	; 2
     d32:	62 0f       	add	r22, r18
     d34:	60 93 14 20 	sts	0x2014, r22
		udd_set_setup_payload(
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	84 e1       	ldi	r24, 0x14	; 20
     d3c:	90 e2       	ldi	r25, 0x20	; 32
     d3e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     d42:	80 91 46 29 	lds	r24, 0x2946
     d46:	90 91 47 29 	lds	r25, 0x2947
     d4a:	20 91 4a 29 	lds	r18, 0x294A
     d4e:	30 91 4b 29 	lds	r19, 0x294B
     d52:	82 17       	cp	r24, r18
     d54:	93 07       	cpc	r25, r19
     d56:	70 f4       	brcc	.+28     	; 0xd74 <udc_process_setup+0x19a>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     d58:	80 93 4a 29 	sts	0x294A, r24
     d5c:	90 93 4b 29 	sts	0x294B, r25
	}
	return true;
     d60:	01 e0       	ldi	r16, 0x01	; 1
     d62:	68 c1       	rjmp	.+720    	; 0x1034 <udc_process_setup+0x45a>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     d64:	00 e0       	ldi	r16, 0x00	; 0
     d66:	66 c1       	rjmp	.+716    	; 0x1034 <udc_process_setup+0x45a>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     d68:	00 e0       	ldi	r16, 0x00	; 0
     d6a:	64 c1       	rjmp	.+712    	; 0x1034 <udc_process_setup+0x45a>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     d6c:	00 e0       	ldi	r16, 0x00	; 0
     d6e:	62 c1       	rjmp	.+708    	; 0x1034 <udc_process_setup+0x45a>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     d70:	00 e0       	ldi	r16, 0x00	; 0
     d72:	60 c1       	rjmp	.+704    	; 0x1034 <udc_process_setup+0x45a>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     d74:	01 e0       	ldi	r16, 0x01	; 1
     d76:	5e c1       	rjmp	.+700    	; 0x1034 <udc_process_setup+0x45a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	41 f4       	brne	.+16     	; 0xd8c <udc_process_setup+0x1b2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	8a e5       	ldi	r24, 0x5A	; 90
     d82:	97 e2       	ldi	r25, 0x27	; 39
     d84:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_set_setup_payload>
	return true;
     d88:	01 e0       	ldi	r16, 0x01	; 1
     d8a:	54 c1       	rjmp	.+680    	; 0x1034 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     d8c:	00 e0       	ldi	r16, 0x00	; 0
     d8e:	52 c1       	rjmp	.+676    	; 0x1034 <udc_process_setup+0x45a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     d90:	21 30       	cpi	r18, 0x01	; 1
     d92:	09 f0       	breq	.+2      	; 0xd96 <udc_process_setup+0x1bc>
     d94:	40 c0       	rjmp	.+128    	; 0xe16 <udc_process_setup+0x23c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     d96:	30 91 41 29 	lds	r19, 0x2941
     d9a:	3a 30       	cpi	r19, 0x0A	; 10
     d9c:	e1 f5       	brne	.+120    	; 0xe16 <udc_process_setup+0x23c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	a1 f5       	brne	.+104    	; 0xe0a <udc_process_setup+0x230>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     da2:	80 91 5a 27 	lds	r24, 0x275A
     da6:	88 23       	and	r24, r24
     da8:	91 f1       	breq	.+100    	; 0xe0e <udc_process_setup+0x234>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     daa:	c0 91 44 29 	lds	r28, 0x2944
     dae:	d0 91 45 29 	lds	r29, 0x2945
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     db2:	e0 90 58 27 	lds	r14, 0x2758
     db6:	f0 90 59 27 	lds	r15, 0x2759
     dba:	d7 01       	movw	r26, r14
     dbc:	ed 91       	ld	r30, X+
     dbe:	fc 91       	ld	r31, X
     dc0:	84 81       	ldd	r24, Z+4	; 0x04
     dc2:	c8 17       	cp	r28, r24
     dc4:	30 f5       	brcc	.+76     	; 0xe12 <udc_process_setup+0x238>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	8c 2f       	mov	r24, r28
     dca:	ff dd       	rcall	.-1026   	; 0x9ca <udc_update_iface_desc>
     dcc:	08 2f       	mov	r16, r24
     dce:	88 23       	and	r24, r24
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <udc_process_setup+0x1fa>
     dd2:	30 c1       	rjmp	.+608    	; 0x1034 <udc_process_setup+0x45a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     dd4:	ce 01       	movw	r24, r28
     dd6:	99 27       	eor	r25, r25
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	d7 01       	movw	r26, r14
     dde:	12 96       	adiw	r26, 0x02	; 2
     de0:	ed 91       	ld	r30, X+
     de2:	fc 91       	ld	r31, X
     de4:	13 97       	sbiw	r26, 0x03	; 3
     de6:	e8 0f       	add	r30, r24
     de8:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     dea:	01 90       	ld	r0, Z+
     dec:	f0 81       	ld	r31, Z
     dee:	e0 2d       	mov	r30, r0
     df0:	06 80       	ldd	r0, Z+6	; 0x06
     df2:	f7 81       	ldd	r31, Z+7	; 0x07
     df4:	e0 2d       	mov	r30, r0
     df6:	09 95       	icall
     df8:	80 93 5c 27 	sts	0x275C, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	8c e5       	ldi	r24, 0x5C	; 92
     e02:	97 e2       	ldi	r25, 0x27	; 39
     e04:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <udd_set_setup_payload>
     e08:	15 c1       	rjmp	.+554    	; 0x1034 <udc_process_setup+0x45a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     e0a:	00 e0       	ldi	r16, 0x00	; 0
     e0c:	13 c1       	rjmp	.+550    	; 0x1034 <udc_process_setup+0x45a>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     e0e:	00 e0       	ldi	r16, 0x00	; 0
     e10:	11 c1       	rjmp	.+546    	; 0x1034 <udc_process_setup+0x45a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     e12:	00 e0       	ldi	r16, 0x00	; 0
     e14:	0f c1       	rjmp	.+542    	; 0x1034 <udc_process_setup+0x45a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     e16:	22 30       	cpi	r18, 0x02	; 2
     e18:	09 f0       	breq	.+2      	; 0xe1c <udc_process_setup+0x242>
     e1a:	0e c1       	rjmp	.+540    	; 0x1038 <udc_process_setup+0x45e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     e1c:	20 91 41 29 	lds	r18, 0x2941
     e20:	21 11       	cpse	r18, r1
     e22:	03 c1       	rjmp	.+518    	; 0x102a <udc_process_setup+0x450>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     e24:	02 97       	sbiw	r24, 0x02	; 2
     e26:	81 f4       	brne	.+32     	; 0xe48 <udc_process_setup+0x26e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     e28:	80 91 44 29 	lds	r24, 0x2944
     e2c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <udd_ep_is_halted>
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	80 93 54 27 	sts	0x2754, r24
     e36:	90 93 55 27 	sts	0x2755, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     e3a:	62 e0       	ldi	r22, 0x02	; 2
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	84 e5       	ldi	r24, 0x54	; 84
     e40:	97 e2       	ldi	r25, 0x27	; 39
     e42:	f0 d7       	rcall	.+4064   	; 0x1e24 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     e44:	01 e0       	ldi	r16, 0x01	; 1
     e46:	f6 c0       	rjmp	.+492    	; 0x1034 <udc_process_setup+0x45a>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     e48:	00 e0       	ldi	r16, 0x00	; 0
     e4a:	f4 c0       	rjmp	.+488    	; 0x1034 <udc_process_setup+0x45a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     e4c:	2f 71       	andi	r18, 0x1F	; 31
     e4e:	09 f0       	breq	.+2      	; 0xe52 <udc_process_setup+0x278>
     e50:	90 c0       	rjmp	.+288    	; 0xf72 <udc_process_setup+0x398>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     e52:	80 91 41 29 	lds	r24, 0x2941
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	09 f4       	brne	.+2      	; 0xe5c <udc_process_setup+0x282>
     e5a:	e9 c0       	rjmp	.+466    	; 0x102e <udc_process_setup+0x454>
     e5c:	18 f4       	brcc	.+6      	; 0xe64 <udc_process_setup+0x28a>
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	b1 f0       	breq	.+44     	; 0xe8e <udc_process_setup+0x2b4>
     e62:	87 c0       	rjmp	.+270    	; 0xf72 <udc_process_setup+0x398>
     e64:	85 30       	cpi	r24, 0x05	; 5
     e66:	19 f0       	breq	.+6      	; 0xe6e <udc_process_setup+0x294>
     e68:	89 30       	cpi	r24, 0x09	; 9
     e6a:	61 f1       	breq	.+88     	; 0xec4 <udc_process_setup+0x2ea>
     e6c:	82 c0       	rjmp	.+260    	; 0xf72 <udc_process_setup+0x398>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e6e:	80 91 46 29 	lds	r24, 0x2946
     e72:	90 91 47 29 	lds	r25, 0x2947
     e76:	89 2b       	or	r24, r25
     e78:	41 f4       	brne	.+16     	; 0xe8a <udc_process_setup+0x2b0>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     e7a:	8f ed       	ldi	r24, 0xDF	; 223
     e7c:	94 e0       	ldi	r25, 0x04	; 4
     e7e:	80 93 4c 29 	sts	0x294C, r24
     e82:	90 93 4d 29 	sts	0x294D, r25
	return true;
     e86:	01 e0       	ldi	r16, 0x01	; 1
     e88:	d5 c0       	rjmp	.+426    	; 0x1034 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e8a:	00 e0       	ldi	r16, 0x00	; 0
     e8c:	d3 c0       	rjmp	.+422    	; 0x1034 <udc_process_setup+0x45a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e8e:	80 91 46 29 	lds	r24, 0x2946
     e92:	90 91 47 29 	lds	r25, 0x2947
     e96:	89 2b       	or	r24, r25
     e98:	89 f4       	brne	.+34     	; 0xebc <udc_process_setup+0x2e2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     e9a:	80 91 42 29 	lds	r24, 0x2942
     e9e:	90 91 43 29 	lds	r25, 0x2943
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	69 f4       	brne	.+26     	; 0xec0 <udc_process_setup+0x2e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     ea6:	80 91 5e 27 	lds	r24, 0x275E
     eaa:	90 91 5f 27 	lds	r25, 0x275F
     eae:	8d 7f       	andi	r24, 0xFD	; 253
     eb0:	80 93 5e 27 	sts	0x275E, r24
     eb4:	90 93 5f 27 	sts	0x275F, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     eb8:	01 e0       	ldi	r16, 0x01	; 1
     eba:	bc c0       	rjmp	.+376    	; 0x1034 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ebc:	00 e0       	ldi	r16, 0x00	; 0
     ebe:	ba c0       	rjmp	.+372    	; 0x1034 <udc_process_setup+0x45a>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     ec0:	00 e0       	ldi	r16, 0x00	; 0
     ec2:	b8 c0       	rjmp	.+368    	; 0x1034 <udc_process_setup+0x45a>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     ec4:	80 91 46 29 	lds	r24, 0x2946
     ec8:	90 91 47 29 	lds	r25, 0x2947
     ecc:	89 2b       	or	r24, r25
     ece:	09 f0       	breq	.+2      	; 0xed2 <udc_process_setup+0x2f8>
     ed0:	46 c0       	rjmp	.+140    	; 0xf5e <udc_process_setup+0x384>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     ed2:	9d d7       	rcall	.+3898   	; 0x1e0e <udd_getaddress>
     ed4:	88 23       	and	r24, r24
     ed6:	09 f4       	brne	.+2      	; 0xeda <udc_process_setup+0x300>
     ed8:	44 c0       	rjmp	.+136    	; 0xf62 <udc_process_setup+0x388>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     eda:	20 91 42 29 	lds	r18, 0x2942
     ede:	30 91 43 29 	lds	r19, 0x2943
     ee2:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     ee4:	e0 91 34 20 	lds	r30, 0x2034
     ee8:	f0 91 35 20 	lds	r31, 0x2035
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     eec:	81 89       	ldd	r24, Z+17	; 0x11
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	82 17       	cp	r24, r18
     ef2:	93 07       	cpc	r25, r19
     ef4:	c0 f1       	brcs	.+112    	; 0xf66 <udc_process_setup+0x38c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     ef6:	1b de       	rcall	.-970    	; 0xb2e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     ef8:	80 91 42 29 	lds	r24, 0x2942
     efc:	90 91 43 29 	lds	r25, 0x2943
     f00:	80 93 5a 27 	sts	0x275A, r24
	if (udc_num_configuration == 0) {
     f04:	88 23       	and	r24, r24
     f06:	89 f1       	breq	.+98     	; 0xf6a <udc_process_setup+0x390>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     f08:	99 27       	eor	r25, r25
     f0a:	81 50       	subi	r24, 0x01	; 1
     f0c:	90 4c       	sbci	r25, 0xC0	; 192
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	e0 91 36 20 	lds	r30, 0x2036
     f1a:	f0 91 37 20 	lds	r31, 0x2037
     f1e:	e8 0f       	add	r30, r24
     f20:	f9 1f       	adc	r31, r25
     f22:	e0 93 58 27 	sts	0x2758, r30
     f26:	f0 93 59 27 	sts	0x2759, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f2a:	01 90       	ld	r0, Z+
     f2c:	f0 81       	ld	r31, Z
     f2e:	e0 2d       	mov	r30, r0
     f30:	84 81       	ldd	r24, Z+4	; 0x04
     f32:	88 23       	and	r24, r24
     f34:	e1 f0       	breq	.+56     	; 0xf6e <udc_process_setup+0x394>
     f36:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	8c 2f       	mov	r24, r28
     f3c:	c2 dd       	rcall	.-1148   	; 0xac2 <udc_iface_enable>
     f3e:	08 2f       	mov	r16, r24
     f40:	88 23       	and	r24, r24
     f42:	09 f4       	brne	.+2      	; 0xf46 <udc_process_setup+0x36c>
     f44:	77 c0       	rjmp	.+238    	; 0x1034 <udc_process_setup+0x45a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     f46:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f48:	e0 91 58 27 	lds	r30, 0x2758
     f4c:	f0 91 59 27 	lds	r31, 0x2759
     f50:	01 90       	ld	r0, Z+
     f52:	f0 81       	ld	r31, Z
     f54:	e0 2d       	mov	r30, r0
     f56:	84 81       	ldd	r24, Z+4	; 0x04
     f58:	c8 17       	cp	r28, r24
     f5a:	70 f3       	brcs	.-36     	; 0xf38 <udc_process_setup+0x35e>
     f5c:	6b c0       	rjmp	.+214    	; 0x1034 <udc_process_setup+0x45a>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     f5e:	00 e0       	ldi	r16, 0x00	; 0
     f60:	69 c0       	rjmp	.+210    	; 0x1034 <udc_process_setup+0x45a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     f62:	00 e0       	ldi	r16, 0x00	; 0
     f64:	67 c0       	rjmp	.+206    	; 0x1034 <udc_process_setup+0x45a>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     f66:	00 e0       	ldi	r16, 0x00	; 0
     f68:	65 c0       	rjmp	.+202    	; 0x1034 <udc_process_setup+0x45a>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     f6a:	01 e0       	ldi	r16, 0x01	; 1
     f6c:	63 c0       	rjmp	.+198    	; 0x1034 <udc_process_setup+0x45a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     f6e:	01 e0       	ldi	r16, 0x01	; 1
     f70:	61 c0       	rjmp	.+194    	; 0x1034 <udc_process_setup+0x45a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     f72:	21 30       	cpi	r18, 0x01	; 1
     f74:	09 f5       	brne	.+66     	; 0xfb8 <udc_process_setup+0x3de>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     f76:	80 91 41 29 	lds	r24, 0x2941
     f7a:	8b 30       	cpi	r24, 0x0B	; 11
     f7c:	e9 f4       	brne	.+58     	; 0xfb8 <udc_process_setup+0x3de>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     f7e:	80 91 46 29 	lds	r24, 0x2946
     f82:	90 91 47 29 	lds	r25, 0x2947
     f86:	89 2b       	or	r24, r25
     f88:	99 f4       	brne	.+38     	; 0xfb0 <udc_process_setup+0x3d6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     f8a:	80 91 5a 27 	lds	r24, 0x275A
     f8e:	88 23       	and	r24, r24
     f90:	89 f0       	breq	.+34     	; 0xfb4 <udc_process_setup+0x3da>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f92:	c0 91 44 29 	lds	r28, 0x2944
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     f96:	d0 91 42 29 	lds	r29, 0x2942

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     f9a:	8c 2f       	mov	r24, r28
     f9c:	50 dd       	rcall	.-1376   	; 0xa3e <udc_iface_disable>
     f9e:	08 2f       	mov	r16, r24
     fa0:	88 23       	and	r24, r24
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <udc_process_setup+0x3cc>
     fa4:	47 c0       	rjmp	.+142    	; 0x1034 <udc_process_setup+0x45a>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     fa6:	6d 2f       	mov	r22, r29
     fa8:	8c 2f       	mov	r24, r28
     faa:	8b dd       	rcall	.-1258   	; 0xac2 <udc_iface_enable>
     fac:	08 2f       	mov	r16, r24
     fae:	42 c0       	rjmp	.+132    	; 0x1034 <udc_process_setup+0x45a>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     fb0:	00 e0       	ldi	r16, 0x00	; 0
     fb2:	40 c0       	rjmp	.+128    	; 0x1034 <udc_process_setup+0x45a>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     fb4:	00 e0       	ldi	r16, 0x00	; 0
     fb6:	3e c0       	rjmp	.+124    	; 0x1034 <udc_process_setup+0x45a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     fb8:	22 30       	cpi	r18, 0x02	; 2
     fba:	09 f0       	breq	.+2      	; 0xfbe <udc_process_setup+0x3e4>
     fbc:	3d c0       	rjmp	.+122    	; 0x1038 <udc_process_setup+0x45e>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     fbe:	80 91 41 29 	lds	r24, 0x2941
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	19 f0       	breq	.+6      	; 0xfcc <udc_process_setup+0x3f2>
     fc6:	83 30       	cpi	r24, 0x03	; 3
     fc8:	b1 f0       	breq	.+44     	; 0xff6 <udc_process_setup+0x41c>
     fca:	33 c0       	rjmp	.+102    	; 0x1032 <udc_process_setup+0x458>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     fcc:	80 91 46 29 	lds	r24, 0x2946
     fd0:	90 91 47 29 	lds	r25, 0x2947
     fd4:	89 2b       	or	r24, r25
     fd6:	59 f4       	brne	.+22     	; 0xfee <udc_process_setup+0x414>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     fd8:	80 91 42 29 	lds	r24, 0x2942
     fdc:	90 91 43 29 	lds	r25, 0x2943
     fe0:	89 2b       	or	r24, r25
     fe2:	39 f4       	brne	.+14     	; 0xff2 <udc_process_setup+0x418>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     fe4:	80 91 44 29 	lds	r24, 0x2944
     fe8:	a2 d7       	rcall	.+3908   	; 0x1f2e <udd_ep_clear_halt>
     fea:	08 2f       	mov	r16, r24
     fec:	23 c0       	rjmp	.+70     	; 0x1034 <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     fee:	00 e0       	ldi	r16, 0x00	; 0
     ff0:	21 c0       	rjmp	.+66     	; 0x1034 <udc_process_setup+0x45a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     ff2:	00 e0       	ldi	r16, 0x00	; 0
     ff4:	1f c0       	rjmp	.+62     	; 0x1034 <udc_process_setup+0x45a>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     ff6:	80 91 46 29 	lds	r24, 0x2946
     ffa:	90 91 47 29 	lds	r25, 0x2947
     ffe:	89 2b       	or	r24, r25
    1000:	81 f4       	brne	.+32     	; 0x1022 <udc_process_setup+0x448>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1002:	80 91 42 29 	lds	r24, 0x2942
    1006:	90 91 43 29 	lds	r25, 0x2943
    100a:	89 2b       	or	r24, r25
    100c:	61 f4       	brne	.+24     	; 0x1026 <udc_process_setup+0x44c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    100e:	c4 e4       	ldi	r28, 0x44	; 68
    1010:	d9 e2       	ldi	r29, 0x29	; 41
    1012:	88 81       	ld	r24, Y
    1014:	0e 94 49 10 	call	0x2092	; 0x2092 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1018:	88 81       	ld	r24, Y
    101a:	0e 94 9f 10 	call	0x213e	; 0x213e <udd_ep_set_halt>
    101e:	08 2f       	mov	r16, r24
    1020:	09 c0       	rjmp	.+18     	; 0x1034 <udc_process_setup+0x45a>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1022:	00 e0       	ldi	r16, 0x00	; 0
    1024:	07 c0       	rjmp	.+14     	; 0x1034 <udc_process_setup+0x45a>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    1026:	00 e0       	ldi	r16, 0x00	; 0
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <udc_process_setup+0x45a>
				break;
			}
		}
#endif
	}
	return false;
    102a:	00 e0       	ldi	r16, 0x00	; 0
    102c:	03 c0       	rjmp	.+6      	; 0x1034 <udc_process_setup+0x45a>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    102e:	00 e0       	ldi	r16, 0x00	; 0
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <udc_process_setup+0x45a>
				break;
			}
		}
#endif
	}
	return false;
    1032:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1034:	01 11       	cpse	r16, r1
    1036:	91 c0       	rjmp	.+290    	; 0x115a <udc_process_setup+0x580>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1038:	80 91 40 29 	lds	r24, 0x2940
    103c:	8f 71       	andi	r24, 0x1F	; 31
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	c1 f5       	brne	.+112    	; 0x10b2 <udc_process_setup+0x4d8>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1042:	80 91 5a 27 	lds	r24, 0x275A
    1046:	88 23       	and	r24, r24
    1048:	a1 f1       	breq	.+104    	; 0x10b2 <udc_process_setup+0x4d8>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    104a:	c0 91 44 29 	lds	r28, 0x2944
    104e:	d0 91 45 29 	lds	r29, 0x2945
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1052:	00 91 58 27 	lds	r16, 0x2758
    1056:	10 91 59 27 	lds	r17, 0x2759
    105a:	d8 01       	movw	r26, r16
    105c:	ed 91       	ld	r30, X+
    105e:	fc 91       	ld	r31, X
    1060:	84 81       	ldd	r24, Z+4	; 0x04
    1062:	c8 17       	cp	r28, r24
    1064:	30 f5       	brcc	.+76     	; 0x10b2 <udc_process_setup+0x4d8>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	8c 2f       	mov	r24, r28
    106a:	af dc       	rcall	.-1698   	; 0x9ca <udc_update_iface_desc>
    106c:	88 23       	and	r24, r24
    106e:	09 f1       	breq	.+66     	; 0x10b2 <udc_process_setup+0x4d8>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1070:	ce 01       	movw	r24, r28
    1072:	99 27       	eor	r25, r25
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	d8 01       	movw	r26, r16
    107a:	12 96       	adiw	r26, 0x02	; 2
    107c:	ed 91       	ld	r30, X+
    107e:	fc 91       	ld	r31, X
    1080:	13 97       	sbiw	r26, 0x03	; 3
    1082:	e8 0f       	add	r30, r24
    1084:	f9 1f       	adc	r31, r25
    1086:	00 81       	ld	r16, Z
    1088:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    108a:	d8 01       	movw	r26, r16
    108c:	16 96       	adiw	r26, 0x06	; 6
    108e:	ed 91       	ld	r30, X+
    1090:	fc 91       	ld	r31, X
    1092:	17 97       	sbiw	r26, 0x07	; 7
    1094:	09 95       	icall
    1096:	68 2f       	mov	r22, r24
    1098:	8c 2f       	mov	r24, r28
    109a:	97 dc       	rcall	.-1746   	; 0x9ca <udc_update_iface_desc>
    109c:	88 23       	and	r24, r24
    109e:	49 f0       	breq	.+18     	; 0x10b2 <udc_process_setup+0x4d8>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    10a0:	d8 01       	movw	r26, r16
    10a2:	14 96       	adiw	r26, 0x04	; 4
    10a4:	ed 91       	ld	r30, X+
    10a6:	fc 91       	ld	r31, X
    10a8:	15 97       	sbiw	r26, 0x05	; 5
    10aa:	09 95       	icall
    10ac:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    10ae:	81 11       	cpse	r24, r1
    10b0:	54 c0       	rjmp	.+168    	; 0x115a <udc_process_setup+0x580>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    10b2:	80 91 40 29 	lds	r24, 0x2940
    10b6:	8f 71       	andi	r24, 0x1F	; 31
    10b8:	82 30       	cpi	r24, 0x02	; 2
    10ba:	d9 f5       	brne	.+118    	; 0x1132 <udc_process_setup+0x558>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    10bc:	80 91 5a 27 	lds	r24, 0x275A
    10c0:	88 23       	and	r24, r24
    10c2:	89 f1       	breq	.+98     	; 0x1126 <udc_process_setup+0x54c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    10c4:	e0 91 58 27 	lds	r30, 0x2758
    10c8:	f0 91 59 27 	lds	r31, 0x2759
    10cc:	a0 81       	ld	r26, Z
    10ce:	b1 81       	ldd	r27, Z+1	; 0x01
    10d0:	14 96       	adiw	r26, 0x04	; 4
    10d2:	8c 91       	ld	r24, X
    10d4:	88 23       	and	r24, r24
    10d6:	49 f1       	breq	.+82     	; 0x112a <udc_process_setup+0x550>
    10d8:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    10da:	21 2f       	mov	r18, r17
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	22 0f       	add	r18, r18
    10e0:	33 1f       	adc	r19, r19
    10e2:	02 80       	ldd	r0, Z+2	; 0x02
    10e4:	f3 81       	ldd	r31, Z+3	; 0x03
    10e6:	e0 2d       	mov	r30, r0
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	c0 81       	ld	r28, Z
    10ee:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    10f0:	ee 81       	ldd	r30, Y+6	; 0x06
    10f2:	ff 81       	ldd	r31, Y+7	; 0x07
    10f4:	09 95       	icall
    10f6:	68 2f       	mov	r22, r24
    10f8:	81 2f       	mov	r24, r17
    10fa:	67 dc       	rcall	.-1842   	; 0x9ca <udc_update_iface_desc>
    10fc:	08 2f       	mov	r16, r24
    10fe:	88 23       	and	r24, r24
    1100:	61 f1       	breq	.+88     	; 0x115a <udc_process_setup+0x580>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1102:	ec 81       	ldd	r30, Y+4	; 0x04
    1104:	fd 81       	ldd	r31, Y+5	; 0x05
    1106:	09 95       	icall
    1108:	08 2f       	mov	r16, r24
    110a:	81 11       	cpse	r24, r1
    110c:	26 c0       	rjmp	.+76     	; 0x115a <udc_process_setup+0x580>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    110e:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1110:	e0 91 58 27 	lds	r30, 0x2758
    1114:	f0 91 59 27 	lds	r31, 0x2759
    1118:	a0 81       	ld	r26, Z
    111a:	b1 81       	ldd	r27, Z+1	; 0x01
    111c:	14 96       	adiw	r26, 0x04	; 4
    111e:	8c 91       	ld	r24, X
    1120:	18 17       	cp	r17, r24
    1122:	d8 f2       	brcs	.-74     	; 0x10da <udc_process_setup+0x500>
    1124:	1a c0       	rjmp	.+52     	; 0x115a <udc_process_setup+0x580>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1126:	00 e0       	ldi	r16, 0x00	; 0
    1128:	18 c0       	rjmp	.+48     	; 0x115a <udc_process_setup+0x580>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    112a:	00 e0       	ldi	r16, 0x00	; 0
    112c:	16 c0       	rjmp	.+44     	; 0x115a <udc_process_setup+0x580>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    112e:	00 e0       	ldi	r16, 0x00	; 0
    1130:	14 c0       	rjmp	.+40     	; 0x115a <udc_process_setup+0x580>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1132:	00 e0       	ldi	r16, 0x00	; 0
    1134:	12 c0       	rjmp	.+36     	; 0x115a <udc_process_setup+0x580>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1136:	82 2f       	mov	r24, r18
    1138:	80 76       	andi	r24, 0x60	; 96
    113a:	09 f0       	breq	.+2      	; 0x113e <udc_process_setup+0x564>
    113c:	7d cf       	rjmp	.-262    	; 0x1038 <udc_process_setup+0x45e>
    113e:	86 ce       	rjmp	.-756    	; 0xe4c <udc_process_setup+0x272>
    1140:	32 2f       	mov	r19, r18
    1142:	30 76       	andi	r19, 0x60	; 96
    1144:	09 f0       	breq	.+2      	; 0x1148 <udc_process_setup+0x56e>
    1146:	78 cf       	rjmp	.-272    	; 0x1038 <udc_process_setup+0x45e>
    1148:	67 cd       	rjmp	.-1330   	; 0xc18 <udc_process_setup+0x3e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    114a:	26 e0       	ldi	r18, 0x06	; 6
		str = udc_string_product_name;
    114c:	82 e2       	ldi	r24, 0x22	; 34
    114e:	90 e2       	ldi	r25, 0x20	; 32
    1150:	e1 cd       	rjmp	.-1086   	; 0xd14 <udc_process_setup+0x13a>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1152:	24 e0       	ldi	r18, 0x04	; 4
		str = udc_get_string_serial_name();
    1154:	89 ee       	ldi	r24, 0xE9	; 233
    1156:	90 e2       	ldi	r25, 0x20	; 32
    1158:	dd cd       	rjmp	.-1094   	; 0xd14 <udc_process_setup+0x13a>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    115a:	80 2f       	mov	r24, r16
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	08 95       	ret

0000116a <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	ec 01       	movw	r28, r24
    117c:	6a 01       	movw	r12, r20
    117e:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    1180:	db 01       	movw	r26, r22
    1182:	ca 01       	movw	r24, r20
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	a1 09       	sbc	r26, r1
    1188:	b1 09       	sbc	r27, r1
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	60 0f       	add	r22, r16
    1190:	71 1f       	adc	r23, r17
    1192:	82 1f       	adc	r24, r18
    1194:	93 1f       	adc	r25, r19
    1196:	a7 01       	movw	r20, r14
    1198:	96 01       	movw	r18, r12
    119a:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodsi4>

	if (divisor > 128) {
    119e:	21 38       	cpi	r18, 0x81	; 129
    11a0:	31 05       	cpc	r19, r1
    11a2:	41 05       	cpc	r20, r1
    11a4:	51 05       	cpc	r21, r1
    11a6:	f8 f4       	brcc	.+62     	; 0x11e6 <spi_xmega_set_baud_div+0x7c>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    11a8:	21 34       	cpi	r18, 0x41	; 65
    11aa:	60 f4       	brcc	.+24     	; 0x11c4 <spi_xmega_set_baud_div+0x5a>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    11ac:	21 32       	cpi	r18, 0x21	; 33
    11ae:	60 f4       	brcc	.+24     	; 0x11c8 <spi_xmega_set_baud_div+0x5e>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    11b0:	21 31       	cpi	r18, 0x11	; 17
    11b2:	60 f4       	brcc	.+24     	; 0x11cc <spi_xmega_set_baud_div+0x62>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    11b4:	29 30       	cpi	r18, 0x09	; 9
    11b6:	60 f4       	brcc	.+24     	; 0x11d0 <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    11b8:	25 30       	cpi	r18, 0x05	; 5
    11ba:	60 f4       	brcc	.+24     	; 0x11d4 <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    11bc:	23 30       	cpi	r18, 0x03	; 3
    11be:	60 f0       	brcs	.+24     	; 0x11d8 <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_PRESCALER_DIV4_gc;
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0b c0       	rjmp	.+22     	; 0x11da <spi_xmega_set_baud_div+0x70>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    11c4:	93 e0       	ldi	r25, 0x03	; 3
    11c6:	09 c0       	rjmp	.+18     	; 0x11da <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    11c8:	92 e0       	ldi	r25, 0x02	; 2
    11ca:	07 c0       	rjmp	.+14     	; 0x11da <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    11cc:	92 e8       	ldi	r25, 0x82	; 130
    11ce:	05 c0       	rjmp	.+10     	; 0x11da <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    11d4:	91 e8       	ldi	r25, 0x81	; 129
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    11d8:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    11da:	88 81       	ld	r24, Y
    11dc:	8c 77       	andi	r24, 0x7C	; 124
    11de:	89 2b       	or	r24, r25
    11e0:	88 83       	st	Y, r24

	return 1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <spi_xmega_set_baud_div+0x7e>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    11e6:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	08 95       	ret

000011fa <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    11fe:	e0 91 60 27 	lds	r30, 0x2760
    1202:	f0 91 61 27 	lds	r31, 0x2761
    1206:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1208:	83 ff       	sbrs	r24, 3
    120a:	08 c0       	rjmp	.+16     	; 0x121c <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    120c:	88 60       	ori	r24, 0x08	; 8
    120e:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1214:	86 ef       	ldi	r24, 0xF6	; 246
    1216:	80 93 6a 27 	sts	0x276A, r24
    121a:	89 c0       	rjmp	.+274    	; 0x132e <twim_interrupt_handler+0x134>
    121c:	98 2f       	mov	r25, r24
    121e:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1220:	31 f0       	breq	.+12     	; 0x122e <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1222:	83 e0       	ldi	r24, 0x03	; 3
    1224:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	80 93 6a 27 	sts	0x276A, r24
    122c:	80 c0       	rjmp	.+256    	; 0x132e <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    122e:	86 ff       	sbrs	r24, 6
    1230:	45 c0       	rjmp	.+138    	; 0x12bc <twim_interrupt_handler+0xc2>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1232:	a0 91 62 27 	lds	r26, 0x2762
    1236:	b0 91 63 27 	lds	r27, 0x2763

	if (transfer.addr_count < pkg->addr_length) {
    123a:	80 91 64 27 	lds	r24, 0x2764
    123e:	90 91 65 27 	lds	r25, 0x2765
    1242:	14 96       	adiw	r26, 0x04	; 4
    1244:	2d 91       	ld	r18, X+
    1246:	3c 91       	ld	r19, X
    1248:	15 97       	sbiw	r26, 0x05	; 5
    124a:	82 17       	cp	r24, r18
    124c:	93 07       	cpc	r25, r19
    124e:	6c f4       	brge	.+26     	; 0x126a <twim_interrupt_handler+0x70>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1250:	9c 01       	movw	r18, r24
    1252:	2f 5f       	subi	r18, 0xFF	; 255
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	20 93 64 27 	sts	0x2764, r18
    125a:	30 93 65 27 	sts	0x2765, r19
    125e:	a8 0f       	add	r26, r24
    1260:	b9 1f       	adc	r27, r25
    1262:	11 96       	adiw	r26, 0x01	; 1
    1264:	8c 91       	ld	r24, X
    1266:	87 83       	std	Z+7, r24	; 0x07
    1268:	62 c0       	rjmp	.+196    	; 0x132e <twim_interrupt_handler+0x134>

	} else if (transfer.data_count < pkg->length) {
    126a:	80 91 66 27 	lds	r24, 0x2766
    126e:	90 91 67 27 	lds	r25, 0x2767
    1272:	18 96       	adiw	r26, 0x08	; 8
    1274:	2d 91       	ld	r18, X+
    1276:	3c 91       	ld	r19, X
    1278:	19 97       	sbiw	r26, 0x09	; 9
    127a:	82 17       	cp	r24, r18
    127c:	93 07       	cpc	r25, r19
    127e:	c8 f4       	brcc	.+50     	; 0x12b2 <twim_interrupt_handler+0xb8>

		if (transfer.read) {
    1280:	20 91 68 27 	lds	r18, 0x2768
    1284:	22 23       	and	r18, r18
    1286:	21 f0       	breq	.+8      	; 0x1290 <twim_interrupt_handler+0x96>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1288:	86 81       	ldd	r24, Z+6	; 0x06
    128a:	81 60       	ori	r24, 0x01	; 1
    128c:	86 83       	std	Z+6, r24	; 0x06
    128e:	4f c0       	rjmp	.+158    	; 0x132e <twim_interrupt_handler+0x134>

		} else {
			const uint8_t * const data = pkg->buffer;
    1290:	16 96       	adiw	r26, 0x06	; 6
    1292:	2d 91       	ld	r18, X+
    1294:	3c 91       	ld	r19, X
    1296:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1298:	ac 01       	movw	r20, r24
    129a:	4f 5f       	subi	r20, 0xFF	; 255
    129c:	5f 4f       	sbci	r21, 0xFF	; 255
    129e:	40 93 66 27 	sts	0x2766, r20
    12a2:	50 93 67 27 	sts	0x2767, r21
    12a6:	d9 01       	movw	r26, r18
    12a8:	a8 0f       	add	r26, r24
    12aa:	b9 1f       	adc	r27, r25
    12ac:	8c 91       	ld	r24, X
    12ae:	87 83       	std	Z+7, r24	; 0x07
    12b0:	3e c0       	rjmp	.+124    	; 0x132e <twim_interrupt_handler+0x134>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    12b2:	83 e0       	ldi	r24, 0x03	; 3
    12b4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    12b6:	10 92 6a 27 	sts	0x276A, r1
    12ba:	39 c0       	rjmp	.+114    	; 0x132e <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    12bc:	88 23       	and	r24, r24
    12be:	a4 f5       	brge	.+104    	; 0x1328 <twim_interrupt_handler+0x12e>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    12c0:	a0 91 62 27 	lds	r26, 0x2762
    12c4:	b0 91 63 27 	lds	r27, 0x2763

	if (transfer.data_count < pkg->length) {
    12c8:	80 91 66 27 	lds	r24, 0x2766
    12cc:	90 91 67 27 	lds	r25, 0x2767
    12d0:	18 96       	adiw	r26, 0x08	; 8
    12d2:	2d 91       	ld	r18, X+
    12d4:	3c 91       	ld	r19, X
    12d6:	19 97       	sbiw	r26, 0x09	; 9
    12d8:	82 17       	cp	r24, r18
    12da:	93 07       	cpc	r25, r19
    12dc:	f8 f4       	brcc	.+62     	; 0x131c <twim_interrupt_handler+0x122>

		uint8_t * const data = pkg->buffer;
    12de:	16 96       	adiw	r26, 0x06	; 6
    12e0:	4d 91       	ld	r20, X+
    12e2:	5c 91       	ld	r21, X
    12e4:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    12e6:	9c 01       	movw	r18, r24
    12e8:	2f 5f       	subi	r18, 0xFF	; 255
    12ea:	3f 4f       	sbci	r19, 0xFF	; 255
    12ec:	20 93 66 27 	sts	0x2766, r18
    12f0:	30 93 67 27 	sts	0x2767, r19
    12f4:	67 81       	ldd	r22, Z+7	; 0x07
    12f6:	ea 01       	movw	r28, r20
    12f8:	c8 0f       	add	r28, r24
    12fa:	d9 1f       	adc	r29, r25
    12fc:	68 83       	st	Y, r22

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    12fe:	18 96       	adiw	r26, 0x08	; 8
    1300:	8d 91       	ld	r24, X+
    1302:	9c 91       	ld	r25, X
    1304:	19 97       	sbiw	r26, 0x09	; 9
    1306:	28 17       	cp	r18, r24
    1308:	39 07       	cpc	r19, r25
    130a:	18 f4       	brcc	.+6      	; 0x1312 <twim_interrupt_handler+0x118>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	83 83       	std	Z+3, r24	; 0x03
    1310:	0e c0       	rjmp	.+28     	; 0x132e <twim_interrupt_handler+0x134>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1312:	87 e0       	ldi	r24, 0x07	; 7
    1314:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1316:	10 92 6a 27 	sts	0x276A, r1
    131a:	09 c0       	rjmp	.+18     	; 0x132e <twim_interrupt_handler+0x134>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    131c:	83 e0       	ldi	r24, 0x03	; 3
    131e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1320:	89 ef       	ldi	r24, 0xF9	; 249
    1322:	80 93 6a 27 	sts	0x276A, r24
    1326:	03 c0       	rjmp	.+6      	; 0x132e <twim_interrupt_handler+0x134>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1328:	8b ef       	ldi	r24, 0xFB	; 251
    132a:	80 93 6a 27 	sts	0x276A, r24
	}
}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	08 95       	ret

00001334 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1334:	1f 92       	push	r1
    1336:	0f 92       	push	r0
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	0f 92       	push	r0
    133c:	11 24       	eor	r1, r1
    133e:	2f 93       	push	r18
    1340:	3f 93       	push	r19
    1342:	4f 93       	push	r20
    1344:	5f 93       	push	r21
    1346:	6f 93       	push	r22
    1348:	7f 93       	push	r23
    134a:	8f 93       	push	r24
    134c:	9f 93       	push	r25
    134e:	af 93       	push	r26
    1350:	bf 93       	push	r27
    1352:	ef 93       	push	r30
    1354:	ff 93       	push	r31
    1356:	51 df       	rcall	.-350    	; 0x11fa <twim_interrupt_handler>
    1358:	ff 91       	pop	r31
    135a:	ef 91       	pop	r30
    135c:	bf 91       	pop	r27
    135e:	af 91       	pop	r26
    1360:	9f 91       	pop	r25
    1362:	8f 91       	pop	r24
    1364:	7f 91       	pop	r23
    1366:	6f 91       	pop	r22
    1368:	5f 91       	pop	r21
    136a:	4f 91       	pop	r20
    136c:	3f 91       	pop	r19
    136e:	2f 91       	pop	r18
    1370:	0f 90       	pop	r0
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	0f 90       	pop	r0
    1376:	1f 90       	pop	r1
    1378:	18 95       	reti

0000137a <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    137a:	1f 92       	push	r1
    137c:	0f 92       	push	r0
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	0f 92       	push	r0
    1382:	11 24       	eor	r1, r1
    1384:	2f 93       	push	r18
    1386:	3f 93       	push	r19
    1388:	4f 93       	push	r20
    138a:	5f 93       	push	r21
    138c:	6f 93       	push	r22
    138e:	7f 93       	push	r23
    1390:	8f 93       	push	r24
    1392:	9f 93       	push	r25
    1394:	af 93       	push	r26
    1396:	bf 93       	push	r27
    1398:	ef 93       	push	r30
    139a:	ff 93       	push	r31
    139c:	2e df       	rcall	.-420    	; 0x11fa <twim_interrupt_handler>
    139e:	ff 91       	pop	r31
    13a0:	ef 91       	pop	r30
    13a2:	bf 91       	pop	r27
    13a4:	af 91       	pop	r26
    13a6:	9f 91       	pop	r25
    13a8:	8f 91       	pop	r24
    13aa:	7f 91       	pop	r23
    13ac:	6f 91       	pop	r22
    13ae:	5f 91       	pop	r21
    13b0:	4f 91       	pop	r20
    13b2:	3f 91       	pop	r19
    13b4:	2f 91       	pop	r18
    13b6:	0f 90       	pop	r0
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	0f 90       	pop	r0
    13bc:	1f 90       	pop	r1
    13be:	18 95       	reti

000013c0 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    13c0:	4f 92       	push	r4
    13c2:	5f 92       	push	r5
    13c4:	6f 92       	push	r6
    13c6:	7f 92       	push	r7
    13c8:	8f 92       	push	r8
    13ca:	9f 92       	push	r9
    13cc:	af 92       	push	r10
    13ce:	bf 92       	push	r11
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	ec 01       	movw	r28, r24
    13e2:	4a 01       	movw	r8, r20
    13e4:	5b 01       	movw	r10, r22
    13e6:	28 01       	movw	r4, r16
    13e8:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    13ea:	d9 01       	movw	r26, r18
    13ec:	c8 01       	movw	r24, r16
    13ee:	68 94       	set
    13f0:	12 f8       	bld	r1, 2
    13f2:	b6 95       	lsr	r27
    13f4:	a7 95       	ror	r26
    13f6:	97 95       	ror	r25
    13f8:	87 95       	ror	r24
    13fa:	16 94       	lsr	r1
    13fc:	d1 f7       	brne	.-12     	; 0x13f2 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    13fe:	b9 01       	movw	r22, r18
    1400:	a8 01       	movw	r20, r16
    1402:	03 2e       	mov	r0, r19
    1404:	36 e1       	ldi	r19, 0x16	; 22
    1406:	76 95       	lsr	r23
    1408:	67 95       	ror	r22
    140a:	57 95       	ror	r21
    140c:	47 95       	ror	r20
    140e:	3a 95       	dec	r19
    1410:	d1 f7       	brne	.-12     	; 0x1406 <usart_set_baudrate+0x46>
    1412:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1414:	2c 81       	ldd	r18, Y+4	; 0x04
    1416:	22 fd       	sbrc	r18, 2
    1418:	08 c0       	rjmp	.+16     	; 0x142a <usart_set_baudrate+0x6a>
		max_rate /= 2;
    141a:	b6 95       	lsr	r27
    141c:	a7 95       	ror	r26
    141e:	97 95       	ror	r25
    1420:	87 95       	ror	r24
		min_rate /= 2;
    1422:	76 95       	lsr	r23
    1424:	67 95       	ror	r22
    1426:	57 95       	ror	r21
    1428:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    142a:	88 15       	cp	r24, r8
    142c:	99 05       	cpc	r25, r9
    142e:	aa 05       	cpc	r26, r10
    1430:	bb 05       	cpc	r27, r11
    1432:	08 f4       	brcc	.+2      	; 0x1436 <usart_set_baudrate+0x76>
    1434:	a6 c0       	rjmp	.+332    	; 0x1582 <usart_set_baudrate+0x1c2>
    1436:	84 16       	cp	r8, r20
    1438:	95 06       	cpc	r9, r21
    143a:	a6 06       	cpc	r10, r22
    143c:	b7 06       	cpc	r11, r23
    143e:	08 f4       	brcc	.+2      	; 0x1442 <usart_set_baudrate+0x82>
    1440:	a2 c0       	rjmp	.+324    	; 0x1586 <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	82 fd       	sbrc	r24, 2
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <usart_set_baudrate+0x90>
		baud *= 2;
    1448:	88 0c       	add	r8, r8
    144a:	99 1c       	adc	r9, r9
    144c:	aa 1c       	adc	r10, r10
    144e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1450:	c3 01       	movw	r24, r6
    1452:	b2 01       	movw	r22, r4
    1454:	a5 01       	movw	r20, r10
    1456:	94 01       	movw	r18, r8
    1458:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    145c:	2f 3f       	cpi	r18, 0xFF	; 255
    145e:	31 05       	cpc	r19, r1
    1460:	41 05       	cpc	r20, r1
    1462:	51 05       	cpc	r21, r1
    1464:	08 f4       	brcc	.+2      	; 0x1468 <usart_set_baudrate+0xa8>
    1466:	91 c0       	rjmp	.+290    	; 0x158a <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    1468:	c1 2c       	mov	r12, r1
    146a:	d1 2c       	mov	r13, r1
    146c:	76 01       	movw	r14, r12
    146e:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1470:	19 ef       	ldi	r17, 0xF9	; 249
    1472:	05 c0       	rjmp	.+10     	; 0x147e <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    1474:	2c 15       	cp	r18, r12
    1476:	3d 05       	cpc	r19, r13
    1478:	4e 05       	cpc	r20, r14
    147a:	5f 05       	cpc	r21, r15
    147c:	68 f0       	brcs	.+26     	; 0x1498 <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    147e:	cc 0c       	add	r12, r12
    1480:	dd 1c       	adc	r13, r13
    1482:	ee 1c       	adc	r14, r14
    1484:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    1486:	1d 3f       	cpi	r17, 0xFD	; 253
    1488:	14 f4       	brge	.+4      	; 0x148e <usart_set_baudrate+0xce>
			limit |= 1;
    148a:	68 94       	set
    148c:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    148e:	1f 5f       	subi	r17, 0xFF	; 255
    1490:	17 30       	cpi	r17, 0x07	; 7
    1492:	81 f7       	brne	.-32     	; 0x1474 <usart_set_baudrate+0xb4>
    1494:	21 2f       	mov	r18, r17
    1496:	50 c0       	rjmp	.+160    	; 0x1538 <usart_set_baudrate+0x178>
    1498:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    149a:	11 23       	and	r17, r17
    149c:	0c f0       	brlt	.+2      	; 0x14a0 <usart_set_baudrate+0xe0>
    149e:	4c c0       	rjmp	.+152    	; 0x1538 <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    14a0:	d5 01       	movw	r26, r10
    14a2:	c4 01       	movw	r24, r8
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	aa 1f       	adc	r26, r26
    14aa:	bb 1f       	adc	r27, r27
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	aa 1f       	adc	r26, r26
    14b2:	bb 1f       	adc	r27, r27
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	aa 1f       	adc	r26, r26
    14ba:	bb 1f       	adc	r27, r27
    14bc:	48 1a       	sub	r4, r24
    14be:	59 0a       	sbc	r5, r25
    14c0:	6a 0a       	sbc	r6, r26
    14c2:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    14c4:	1e 3f       	cpi	r17, 0xFE	; 254
    14c6:	f4 f4       	brge	.+60     	; 0x1504 <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    14c8:	6d ef       	ldi	r22, 0xFD	; 253
    14ca:	7f ef       	ldi	r23, 0xFF	; 255
    14cc:	61 1b       	sub	r22, r17
    14ce:	71 09       	sbc	r23, r1
    14d0:	17 fd       	sbrc	r17, 7
    14d2:	73 95       	inc	r23
    14d4:	04 c0       	rjmp	.+8      	; 0x14de <usart_set_baudrate+0x11e>
    14d6:	44 0c       	add	r4, r4
    14d8:	55 1c       	adc	r5, r5
    14da:	66 1c       	adc	r6, r6
    14dc:	77 1c       	adc	r7, r7
    14de:	6a 95       	dec	r22
    14e0:	d2 f7       	brpl	.-12     	; 0x14d6 <usart_set_baudrate+0x116>
    14e2:	d5 01       	movw	r26, r10
    14e4:	c4 01       	movw	r24, r8
    14e6:	b6 95       	lsr	r27
    14e8:	a7 95       	ror	r26
    14ea:	97 95       	ror	r25
    14ec:	87 95       	ror	r24
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	64 0d       	add	r22, r4
    14f4:	75 1d       	adc	r23, r5
    14f6:	86 1d       	adc	r24, r6
    14f8:	97 1d       	adc	r25, r7
    14fa:	a5 01       	movw	r20, r10
    14fc:	94 01       	movw	r18, r8
    14fe:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodsi4>
    1502:	36 c0       	rjmp	.+108    	; 0x1570 <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
    1504:	23 e0       	ldi	r18, 0x03	; 3
    1506:	21 0f       	add	r18, r17
    1508:	d5 01       	movw	r26, r10
    150a:	c4 01       	movw	r24, r8
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <usart_set_baudrate+0x156>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	aa 1f       	adc	r26, r26
    1514:	bb 1f       	adc	r27, r27
    1516:	2a 95       	dec	r18
    1518:	d2 f7       	brpl	.-12     	; 0x150e <usart_set_baudrate+0x14e>
    151a:	9c 01       	movw	r18, r24
    151c:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    151e:	b6 95       	lsr	r27
    1520:	a7 95       	ror	r26
    1522:	97 95       	ror	r25
    1524:	87 95       	ror	r24
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	64 0d       	add	r22, r4
    152c:	75 1d       	adc	r23, r5
    152e:	86 1d       	adc	r24, r6
    1530:	97 1d       	adc	r25, r7
    1532:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodsi4>
    1536:	1c c0       	rjmp	.+56     	; 0x1570 <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1538:	2d 5f       	subi	r18, 0xFD	; 253
    153a:	d5 01       	movw	r26, r10
    153c:	c4 01       	movw	r24, r8
    153e:	04 c0       	rjmp	.+8      	; 0x1548 <usart_set_baudrate+0x188>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	aa 1f       	adc	r26, r26
    1546:	bb 1f       	adc	r27, r27
    1548:	2a 95       	dec	r18
    154a:	d2 f7       	brpl	.-12     	; 0x1540 <usart_set_baudrate+0x180>
    154c:	9c 01       	movw	r18, r24
    154e:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1550:	b6 95       	lsr	r27
    1552:	a7 95       	ror	r26
    1554:	97 95       	ror	r25
    1556:	87 95       	ror	r24
    1558:	bc 01       	movw	r22, r24
    155a:	cd 01       	movw	r24, r26
    155c:	64 0d       	add	r22, r4
    155e:	75 1d       	adc	r23, r5
    1560:	86 1d       	adc	r24, r6
    1562:	97 1d       	adc	r25, r7
    1564:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodsi4>
    1568:	21 50       	subi	r18, 0x01	; 1
    156a:	31 09       	sbc	r19, r1
    156c:	41 09       	sbc	r20, r1
    156e:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1570:	83 2f       	mov	r24, r19
    1572:	8f 70       	andi	r24, 0x0F	; 15
    1574:	12 95       	swap	r17
    1576:	10 7f       	andi	r17, 0xF0	; 240
    1578:	18 2b       	or	r17, r24
    157a:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    157c:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	18 c0       	rjmp	.+48     	; 0x15b2 <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	16 c0       	rjmp	.+44     	; 0x15b2 <usart_set_baudrate+0x1f2>
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    158a:	d5 01       	movw	r26, r10
    158c:	c4 01       	movw	r24, r8
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	aa 1f       	adc	r26, r26
    1594:	bb 1f       	adc	r27, r27
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	aa 1f       	adc	r26, r26
    159c:	bb 1f       	adc	r27, r27
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	aa 1f       	adc	r26, r26
    15a4:	bb 1f       	adc	r27, r27
    15a6:	48 1a       	sub	r4, r24
    15a8:	59 0a       	sbc	r5, r25
    15aa:	6a 0a       	sbc	r6, r26
    15ac:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    15ae:	19 ef       	ldi	r17, 0xF9	; 249
    15b0:	8b cf       	rjmp	.-234    	; 0x14c8 <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	df 90       	pop	r13
    15c0:	cf 90       	pop	r12
    15c2:	bf 90       	pop	r11
    15c4:	af 90       	pop	r10
    15c6:	9f 90       	pop	r9
    15c8:	8f 90       	pop	r8
    15ca:	7f 90       	pop	r7
    15cc:	6f 90       	pop	r6
    15ce:	5f 90       	pop	r5
    15d0:	4f 90       	pop	r4
    15d2:	08 95       	ret

000015d4 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	ec 01       	movw	r28, r24
    15de:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <usart_init_rs232+0x12>
    15e4:	be c0       	rjmp	.+380    	; 0x1762 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    15e6:	80 3c       	cpi	r24, 0xC0	; 192
    15e8:	91 05       	cpc	r25, r1
    15ea:	21 f4       	brne	.+8      	; 0x15f4 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    15ec:	60 e1       	ldi	r22, 0x10	; 16
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	b4 d7       	rcall	.+3944   	; 0x255a <sysclk_enable_module>
    15f2:	b7 c0       	rjmp	.+366    	; 0x1762 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    15f4:	c1 15       	cp	r28, r1
    15f6:	84 e0       	ldi	r24, 0x04	; 4
    15f8:	d8 07       	cpc	r29, r24
    15fa:	21 f4       	brne	.+8      	; 0x1604 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    15fc:	64 e0       	ldi	r22, 0x04	; 4
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	ac d7       	rcall	.+3928   	; 0x255a <sysclk_enable_module>
    1602:	af c0       	rjmp	.+350    	; 0x1762 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1604:	c0 38       	cpi	r28, 0x80	; 128
    1606:	e1 e0       	ldi	r30, 0x01	; 1
    1608:	de 07       	cpc	r29, r30
    160a:	21 f4       	brne	.+8      	; 0x1614 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    160c:	62 e0       	ldi	r22, 0x02	; 2
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	a4 d7       	rcall	.+3912   	; 0x255a <sysclk_enable_module>
    1612:	a7 c0       	rjmp	.+334    	; 0x1762 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1614:	c1 15       	cp	r28, r1
    1616:	f1 e0       	ldi	r31, 0x01	; 1
    1618:	df 07       	cpc	r29, r31
    161a:	21 f4       	brne	.+8      	; 0x1624 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	9c d7       	rcall	.+3896   	; 0x255a <sysclk_enable_module>
    1622:	9f c0       	rjmp	.+318    	; 0x1762 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1624:	c0 38       	cpi	r28, 0x80	; 128
    1626:	83 e0       	ldi	r24, 0x03	; 3
    1628:	d8 07       	cpc	r29, r24
    162a:	21 f4       	brne	.+8      	; 0x1634 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	94 d7       	rcall	.+3880   	; 0x255a <sysclk_enable_module>
    1632:	97 c0       	rjmp	.+302    	; 0x1762 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1634:	c1 15       	cp	r28, r1
    1636:	e2 e0       	ldi	r30, 0x02	; 2
    1638:	de 07       	cpc	r29, r30
    163a:	21 f4       	brne	.+8      	; 0x1644 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    163c:	62 e0       	ldi	r22, 0x02	; 2
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	8c d7       	rcall	.+3864   	; 0x255a <sysclk_enable_module>
    1642:	8f c0       	rjmp	.+286    	; 0x1762 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1644:	c0 32       	cpi	r28, 0x20	; 32
    1646:	f3 e0       	ldi	r31, 0x03	; 3
    1648:	df 07       	cpc	r29, r31
    164a:	21 f4       	brne	.+8      	; 0x1654 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    164c:	64 e0       	ldi	r22, 0x04	; 4
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	84 d7       	rcall	.+3848   	; 0x255a <sysclk_enable_module>
    1652:	87 c0       	rjmp	.+270    	; 0x1762 <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1654:	c1 15       	cp	r28, r1
    1656:	88 e0       	ldi	r24, 0x08	; 8
    1658:	d8 07       	cpc	r29, r24
    165a:	21 f4       	brne	.+8      	; 0x1664 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    165c:	61 e0       	ldi	r22, 0x01	; 1
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	7c d7       	rcall	.+3832   	; 0x255a <sysclk_enable_module>
    1662:	7f c0       	rjmp	.+254    	; 0x1762 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1664:	c1 15       	cp	r28, r1
    1666:	e9 e0       	ldi	r30, 0x09	; 9
    1668:	de 07       	cpc	r29, r30
    166a:	21 f4       	brne	.+8      	; 0x1674 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	84 e0       	ldi	r24, 0x04	; 4
    1670:	74 d7       	rcall	.+3816   	; 0x255a <sysclk_enable_module>
    1672:	77 c0       	rjmp	.+238    	; 0x1762 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1674:	c1 15       	cp	r28, r1
    1676:	fa e0       	ldi	r31, 0x0A	; 10
    1678:	df 07       	cpc	r29, r31
    167a:	21 f4       	brne	.+8      	; 0x1684 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	85 e0       	ldi	r24, 0x05	; 5
    1680:	6c d7       	rcall	.+3800   	; 0x255a <sysclk_enable_module>
    1682:	6f c0       	rjmp	.+222    	; 0x1762 <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1684:	c0 34       	cpi	r28, 0x40	; 64
    1686:	88 e0       	ldi	r24, 0x08	; 8
    1688:	d8 07       	cpc	r29, r24
    168a:	21 f4       	brne	.+8      	; 0x1694 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    168c:	62 e0       	ldi	r22, 0x02	; 2
    168e:	83 e0       	ldi	r24, 0x03	; 3
    1690:	64 d7       	rcall	.+3784   	; 0x255a <sysclk_enable_module>
    1692:	67 c0       	rjmp	.+206    	; 0x1762 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1694:	c0 34       	cpi	r28, 0x40	; 64
    1696:	e9 e0       	ldi	r30, 0x09	; 9
    1698:	de 07       	cpc	r29, r30
    169a:	21 f4       	brne	.+8      	; 0x16a4 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    169c:	62 e0       	ldi	r22, 0x02	; 2
    169e:	84 e0       	ldi	r24, 0x04	; 4
    16a0:	5c d7       	rcall	.+3768   	; 0x255a <sysclk_enable_module>
    16a2:	5f c0       	rjmp	.+190    	; 0x1762 <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    16a4:	c0 39       	cpi	r28, 0x90	; 144
    16a6:	f8 e0       	ldi	r31, 0x08	; 8
    16a8:	df 07       	cpc	r29, r31
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    16ac:	64 e0       	ldi	r22, 0x04	; 4
    16ae:	83 e0       	ldi	r24, 0x03	; 3
    16b0:	54 d7       	rcall	.+3752   	; 0x255a <sysclk_enable_module>
    16b2:	57 c0       	rjmp	.+174    	; 0x1762 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    16b4:	c0 39       	cpi	r28, 0x90	; 144
    16b6:	89 e0       	ldi	r24, 0x09	; 9
    16b8:	d8 07       	cpc	r29, r24
    16ba:	21 f4       	brne	.+8      	; 0x16c4 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    16bc:	64 e0       	ldi	r22, 0x04	; 4
    16be:	84 e0       	ldi	r24, 0x04	; 4
    16c0:	4c d7       	rcall	.+3736   	; 0x255a <sysclk_enable_module>
    16c2:	4f c0       	rjmp	.+158    	; 0x1762 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    16c4:	c0 39       	cpi	r28, 0x90	; 144
    16c6:	ea e0       	ldi	r30, 0x0A	; 10
    16c8:	de 07       	cpc	r29, r30
    16ca:	21 f4       	brne	.+8      	; 0x16d4 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    16cc:	64 e0       	ldi	r22, 0x04	; 4
    16ce:	85 e0       	ldi	r24, 0x05	; 5
    16d0:	44 d7       	rcall	.+3720   	; 0x255a <sysclk_enable_module>
    16d2:	47 c0       	rjmp	.+142    	; 0x1762 <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    16d4:	c0 3c       	cpi	r28, 0xC0	; 192
    16d6:	f8 e0       	ldi	r31, 0x08	; 8
    16d8:	df 07       	cpc	r29, r31
    16da:	21 f4       	brne	.+8      	; 0x16e4 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    16dc:	68 e0       	ldi	r22, 0x08	; 8
    16de:	83 e0       	ldi	r24, 0x03	; 3
    16e0:	3c d7       	rcall	.+3704   	; 0x255a <sysclk_enable_module>
    16e2:	3f c0       	rjmp	.+126    	; 0x1762 <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    16e4:	c0 3c       	cpi	r28, 0xC0	; 192
    16e6:	89 e0       	ldi	r24, 0x09	; 9
    16e8:	d8 07       	cpc	r29, r24
    16ea:	21 f4       	brne	.+8      	; 0x16f4 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    16ec:	68 e0       	ldi	r22, 0x08	; 8
    16ee:	84 e0       	ldi	r24, 0x04	; 4
    16f0:	34 d7       	rcall	.+3688   	; 0x255a <sysclk_enable_module>
    16f2:	37 c0       	rjmp	.+110    	; 0x1762 <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    16f4:	c0 3a       	cpi	r28, 0xA0	; 160
    16f6:	e8 e0       	ldi	r30, 0x08	; 8
    16f8:	de 07       	cpc	r29, r30
    16fa:	21 f4       	brne	.+8      	; 0x1704 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    16fc:	60 e1       	ldi	r22, 0x10	; 16
    16fe:	83 e0       	ldi	r24, 0x03	; 3
    1700:	2c d7       	rcall	.+3672   	; 0x255a <sysclk_enable_module>
    1702:	2f c0       	rjmp	.+94     	; 0x1762 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1704:	c0 3a       	cpi	r28, 0xA0	; 160
    1706:	f9 e0       	ldi	r31, 0x09	; 9
    1708:	df 07       	cpc	r29, r31
    170a:	21 f4       	brne	.+8      	; 0x1714 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    170c:	60 e1       	ldi	r22, 0x10	; 16
    170e:	84 e0       	ldi	r24, 0x04	; 4
    1710:	24 d7       	rcall	.+3656   	; 0x255a <sysclk_enable_module>
    1712:	27 c0       	rjmp	.+78     	; 0x1762 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1714:	c0 3a       	cpi	r28, 0xA0	; 160
    1716:	8a e0       	ldi	r24, 0x0A	; 10
    1718:	d8 07       	cpc	r29, r24
    171a:	21 f4       	brne	.+8      	; 0x1724 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    171c:	60 e1       	ldi	r22, 0x10	; 16
    171e:	85 e0       	ldi	r24, 0x05	; 5
    1720:	1c d7       	rcall	.+3640   	; 0x255a <sysclk_enable_module>
    1722:	1f c0       	rjmp	.+62     	; 0x1762 <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1724:	c0 3b       	cpi	r28, 0xB0	; 176
    1726:	e8 e0       	ldi	r30, 0x08	; 8
    1728:	de 07       	cpc	r29, r30
    172a:	21 f4       	brne	.+8      	; 0x1734 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    172c:	60 e2       	ldi	r22, 0x20	; 32
    172e:	83 e0       	ldi	r24, 0x03	; 3
    1730:	14 d7       	rcall	.+3624   	; 0x255a <sysclk_enable_module>
    1732:	17 c0       	rjmp	.+46     	; 0x1762 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1734:	c0 3b       	cpi	r28, 0xB0	; 176
    1736:	f9 e0       	ldi	r31, 0x09	; 9
    1738:	df 07       	cpc	r29, r31
    173a:	21 f4       	brne	.+8      	; 0x1744 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    173c:	60 e2       	ldi	r22, 0x20	; 32
    173e:	84 e0       	ldi	r24, 0x04	; 4
    1740:	0c d7       	rcall	.+3608   	; 0x255a <sysclk_enable_module>
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1744:	c0 38       	cpi	r28, 0x80	; 128
    1746:	84 e0       	ldi	r24, 0x04	; 4
    1748:	d8 07       	cpc	r29, r24
    174a:	21 f4       	brne	.+8      	; 0x1754 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    174c:	60 e4       	ldi	r22, 0x40	; 64
    174e:	83 e0       	ldi	r24, 0x03	; 3
    1750:	04 d7       	rcall	.+3592   	; 0x255a <sysclk_enable_module>
    1752:	07 c0       	rjmp	.+14     	; 0x1762 <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1754:	c0 3a       	cpi	r28, 0xA0	; 160
    1756:	e4 e0       	ldi	r30, 0x04	; 4
    1758:	de 07       	cpc	r29, r30
    175a:	19 f4       	brne	.+6      	; 0x1762 <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    175c:	60 e4       	ldi	r22, 0x40	; 64
    175e:	85 e0       	ldi	r24, 0x05	; 5
    1760:	fc d6       	rcall	.+3576   	; 0x255a <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	8f 73       	andi	r24, 0x3F	; 63
    1766:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1768:	f8 01       	movw	r30, r16
    176a:	94 81       	ldd	r25, Z+4	; 0x04
    176c:	85 81       	ldd	r24, Z+5	; 0x05
    176e:	89 2b       	or	r24, r25
    1770:	96 81       	ldd	r25, Z+6	; 0x06
    1772:	99 23       	and	r25, r25
    1774:	11 f0       	breq	.+4      	; 0x177a <usart_init_rs232+0x1a6>
    1776:	98 e0       	ldi	r25, 0x08	; 8
    1778:	01 c0       	rjmp	.+2      	; 0x177c <usart_init_rs232+0x1a8>
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	89 2b       	or	r24, r25
    177e:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1780:	f8 01       	movw	r30, r16
    1782:	40 81       	ld	r20, Z
    1784:	51 81       	ldd	r21, Z+1	; 0x01
    1786:	62 81       	ldd	r22, Z+2	; 0x02
    1788:	73 81       	ldd	r23, Z+3	; 0x03
    178a:	00 e0       	ldi	r16, 0x00	; 0
    178c:	1c e6       	ldi	r17, 0x6C	; 108
    178e:	2c ed       	ldi	r18, 0xDC	; 220
    1790:	32 e0       	ldi	r19, 0x02	; 2
    1792:	ce 01       	movw	r24, r28
    1794:	15 de       	rcall	.-982    	; 0x13c0 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	98 60       	ori	r25, 0x08	; 8
    179a:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	90 61       	ori	r25, 0x10	; 16
    17a0:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	08 95       	ret

000017ac <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    17ac:	81 11       	cpse	r24, r1
    17ae:	18 c0       	rjmp	.+48     	; 0x17e0 <udd_sleep_mode+0x34>
    17b0:	90 91 98 28 	lds	r25, 0x2898
    17b4:	99 23       	and	r25, r25
    17b6:	89 f0       	breq	.+34     	; 0x17da <udd_sleep_mode+0x2e>
    17b8:	9f b7       	in	r25, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	e1 e5       	ldi	r30, 0x51	; 81
    17be:	f9 e2       	ldi	r31, 0x29	; 41
    17c0:	20 81       	ld	r18, Z
    17c2:	21 50       	subi	r18, 0x01	; 1
    17c4:	20 83       	st	Z, r18
    17c6:	9f bf       	out	0x3f, r25	; 63
    17c8:	08 c0       	rjmp	.+16     	; 0x17da <udd_sleep_mode+0x2e>
    17ca:	9f b7       	in	r25, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	e1 e5       	ldi	r30, 0x51	; 81
    17d0:	f9 e2       	ldi	r31, 0x29	; 41
    17d2:	20 81       	ld	r18, Z
    17d4:	2f 5f       	subi	r18, 0xFF	; 255
    17d6:	20 83       	st	Z, r18
    17d8:	9f bf       	out	0x3f, r25	; 63
    17da:	80 93 98 28 	sts	0x2898, r24
    17de:	08 95       	ret
    17e0:	90 91 98 28 	lds	r25, 0x2898
    17e4:	99 23       	and	r25, r25
    17e6:	89 f3       	breq	.-30     	; 0x17ca <udd_sleep_mode+0x1e>
    17e8:	f8 cf       	rjmp	.-16     	; 0x17da <udd_sleep_mode+0x2e>

000017ea <udd_ctrl_init>:
    17ea:	0f 93       	push	r16
    17ec:	e8 ec       	ldi	r30, 0xC8	; 200
    17ee:	f4 e0       	ldi	r31, 0x04	; 4
    17f0:	80 81       	ld	r24, Z
    17f2:	8f 7d       	andi	r24, 0xDF	; 223
    17f4:	80 83       	st	Z, r24
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 7d       	andi	r24, 0xDF	; 223
    17fa:	80 83       	st	Z, r24
    17fc:	ec e6       	ldi	r30, 0x6C	; 108
    17fe:	f8 e2       	ldi	r31, 0x28	; 40
    1800:	02 e0       	ldi	r16, 0x02	; 2
    1802:	05 93       	las	Z, r16
    1804:	10 92 6e 28 	sts	0x286E, r1
    1808:	10 92 6f 28 	sts	0x286F, r1
    180c:	00 e2       	ldi	r16, 0x20	; 32
    180e:	06 93       	lac	Z, r16
    1810:	00 e4       	ldi	r16, 0x40	; 64
    1812:	06 93       	lac	Z, r16
    1814:	e4 e6       	ldi	r30, 0x64	; 100
    1816:	f8 e2       	ldi	r31, 0x28	; 40
    1818:	00 e2       	ldi	r16, 0x20	; 32
    181a:	06 93       	lac	Z, r16
    181c:	00 e4       	ldi	r16, 0x40	; 64
    181e:	06 93       	lac	Z, r16
    1820:	10 92 4c 29 	sts	0x294C, r1
    1824:	10 92 4d 29 	sts	0x294D, r1
    1828:	10 92 4e 29 	sts	0x294E, r1
    182c:	10 92 4f 29 	sts	0x294F, r1
    1830:	10 92 4a 29 	sts	0x294A, r1
    1834:	10 92 4b 29 	sts	0x294B, r1
    1838:	10 92 54 28 	sts	0x2854, r1
    183c:	0f 91       	pop	r16
    183e:	08 95       	ret

00001840 <udd_ctrl_stall_data>:
    1840:	0f 93       	push	r16
    1842:	85 e0       	ldi	r24, 0x05	; 5
    1844:	80 93 54 28 	sts	0x2854, r24
    1848:	ed e6       	ldi	r30, 0x6D	; 109
    184a:	f8 e2       	ldi	r31, 0x28	; 40
    184c:	04 e0       	ldi	r16, 0x04	; 4
    184e:	05 93       	las	Z, r16
    1850:	e5 e6       	ldi	r30, 0x65	; 101
    1852:	f8 e2       	ldi	r31, 0x28	; 40
    1854:	04 e0       	ldi	r16, 0x04	; 4
    1856:	05 93       	las	Z, r16
    1858:	0f 91       	pop	r16
    185a:	08 95       	ret

0000185c <udd_ctrl_send_zlp_in>:
    185c:	0f 93       	push	r16
    185e:	83 e0       	ldi	r24, 0x03	; 3
    1860:	80 93 54 28 	sts	0x2854, r24
    1864:	10 92 6e 28 	sts	0x286E, r1
    1868:	10 92 6f 28 	sts	0x286F, r1
    186c:	ec e6       	ldi	r30, 0x6C	; 108
    186e:	f8 e2       	ldi	r31, 0x28	; 40
    1870:	02 e0       	ldi	r16, 0x02	; 2
    1872:	06 93       	lac	Z, r16
    1874:	0f 91       	pop	r16
    1876:	08 95       	ret

00001878 <udd_ctrl_endofrequest>:
    1878:	e0 91 4c 29 	lds	r30, 0x294C
    187c:	f0 91 4d 29 	lds	r31, 0x294D
    1880:	30 97       	sbiw	r30, 0x00	; 0
    1882:	09 f0       	breq	.+2      	; 0x1886 <udd_ctrl_endofrequest+0xe>
    1884:	09 95       	icall
    1886:	08 95       	ret

00001888 <udd_ctrl_in_sent>:
    1888:	0f 93       	push	r16
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	80 91 54 28 	lds	r24, 0x2854
    1892:	83 30       	cpi	r24, 0x03	; 3
    1894:	19 f4       	brne	.+6      	; 0x189c <udd_ctrl_in_sent+0x14>
    1896:	f0 df       	rcall	.-32     	; 0x1878 <udd_ctrl_endofrequest>
    1898:	a8 df       	rcall	.-176    	; 0x17ea <udd_ctrl_init>
    189a:	60 c0       	rjmp	.+192    	; 0x195c <udd_ctrl_in_sent+0xd4>
    189c:	80 91 50 28 	lds	r24, 0x2850
    18a0:	90 91 51 28 	lds	r25, 0x2851
    18a4:	c0 91 4a 29 	lds	r28, 0x294A
    18a8:	d0 91 4b 29 	lds	r29, 0x294B
    18ac:	c8 1b       	sub	r28, r24
    18ae:	d9 0b       	sbc	r29, r25
    18b0:	71 f5       	brne	.+92     	; 0x190e <udd_ctrl_in_sent+0x86>
    18b2:	20 91 52 28 	lds	r18, 0x2852
    18b6:	30 91 53 28 	lds	r19, 0x2853
    18ba:	82 0f       	add	r24, r18
    18bc:	93 1f       	adc	r25, r19
    18be:	80 93 52 28 	sts	0x2852, r24
    18c2:	90 93 53 28 	sts	0x2853, r25
    18c6:	20 91 46 29 	lds	r18, 0x2946
    18ca:	30 91 47 29 	lds	r19, 0x2947
    18ce:	82 17       	cp	r24, r18
    18d0:	93 07       	cpc	r25, r19
    18d2:	21 f0       	breq	.+8      	; 0x18dc <udd_ctrl_in_sent+0x54>
    18d4:	80 91 6b 27 	lds	r24, 0x276B
    18d8:	88 23       	and	r24, r24
    18da:	41 f0       	breq	.+16     	; 0x18ec <udd_ctrl_in_sent+0x64>
    18dc:	84 e0       	ldi	r24, 0x04	; 4
    18de:	80 93 54 28 	sts	0x2854, r24
    18e2:	e4 e6       	ldi	r30, 0x64	; 100
    18e4:	f8 e2       	ldi	r31, 0x28	; 40
    18e6:	02 e0       	ldi	r16, 0x02	; 2
    18e8:	06 93       	lac	Z, r16
    18ea:	38 c0       	rjmp	.+112    	; 0x195c <udd_ctrl_in_sent+0xd4>
    18ec:	e0 91 4e 29 	lds	r30, 0x294E
    18f0:	f0 91 4f 29 	lds	r31, 0x294F
    18f4:	30 97       	sbiw	r30, 0x00	; 0
    18f6:	99 f0       	breq	.+38     	; 0x191e <udd_ctrl_in_sent+0x96>
    18f8:	09 95       	icall
    18fa:	88 23       	and	r24, r24
    18fc:	81 f0       	breq	.+32     	; 0x191e <udd_ctrl_in_sent+0x96>
    18fe:	10 92 50 28 	sts	0x2850, r1
    1902:	10 92 51 28 	sts	0x2851, r1
    1906:	c0 91 4a 29 	lds	r28, 0x294A
    190a:	d0 91 4b 29 	lds	r29, 0x294B
    190e:	c0 34       	cpi	r28, 0x40	; 64
    1910:	d1 05       	cpc	r29, r1
    1912:	28 f0       	brcs	.+10     	; 0x191e <udd_ctrl_in_sent+0x96>
    1914:	10 92 6b 27 	sts	0x276B, r1
    1918:	c0 e4       	ldi	r28, 0x40	; 64
    191a:	d0 e0       	ldi	r29, 0x00	; 0
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <udd_ctrl_in_sent+0x9c>
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	80 93 6b 27 	sts	0x276B, r24
    1924:	c0 93 6e 28 	sts	0x286E, r28
    1928:	d0 93 6f 28 	sts	0x286F, r29
    192c:	80 91 50 28 	lds	r24, 0x2850
    1930:	90 91 51 28 	lds	r25, 0x2851
    1934:	20 91 48 29 	lds	r18, 0x2948
    1938:	30 91 49 29 	lds	r19, 0x2949
    193c:	28 0f       	add	r18, r24
    193e:	39 1f       	adc	r19, r25
    1940:	20 93 70 28 	sts	0x2870, r18
    1944:	30 93 71 28 	sts	0x2871, r19
    1948:	c8 0f       	add	r28, r24
    194a:	d9 1f       	adc	r29, r25
    194c:	c0 93 50 28 	sts	0x2850, r28
    1950:	d0 93 51 28 	sts	0x2851, r29
    1954:	ec e6       	ldi	r30, 0x6C	; 108
    1956:	f8 e2       	ldi	r31, 0x28	; 40
    1958:	02 e0       	ldi	r16, 0x02	; 2
    195a:	06 93       	lac	Z, r16
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	0f 91       	pop	r16
    1962:	08 95       	ret

00001964 <udd_ep_get_size>:
    1964:	fc 01       	movw	r30, r24
    1966:	81 81       	ldd	r24, Z+1	; 0x01
    1968:	87 70       	andi	r24, 0x07	; 7
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	fc 01       	movw	r30, r24
    196e:	31 97       	sbiw	r30, 0x01	; 1
    1970:	e7 30       	cpi	r30, 0x07	; 7
    1972:	f1 05       	cpc	r31, r1
    1974:	20 f4       	brcc	.+8      	; 0x197e <udd_ep_get_size+0x1a>
    1976:	e2 50       	subi	r30, 0x02	; 2
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	0c 94 78 25 	jmp	0x4af0	; 0x4af0 <__tablejump2__>
    197e:	88 e0       	ldi	r24, 0x08	; 8
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	08 95       	ret
    1984:	80 e2       	ldi	r24, 0x20	; 32
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	08 95       	ret
    198a:	80 e4       	ldi	r24, 0x40	; 64
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	08 95       	ret
    1990:	80 e8       	ldi	r24, 0x80	; 128
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	08 95       	ret
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	08 95       	ret
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	92 e0       	ldi	r25, 0x02	; 2
    19a0:	08 95       	ret
    19a2:	8f ef       	ldi	r24, 0xFF	; 255
    19a4:	93 e0       	ldi	r25, 0x03	; 3
    19a6:	08 95       	ret
    19a8:	80 e1       	ldi	r24, 0x10	; 16
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	08 95       	ret

000019ae <udd_ep_get_job>:
    19ae:	28 2f       	mov	r18, r24
    19b0:	2f 70       	andi	r18, 0x0F	; 15
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	22 0f       	add	r18, r18
    19b6:	33 1f       	adc	r19, r19
    19b8:	99 27       	eor	r25, r25
    19ba:	87 fd       	sbrc	r24, 7
    19bc:	90 95       	com	r25
    19be:	88 27       	eor	r24, r24
    19c0:	99 0f       	add	r25, r25
    19c2:	88 1f       	adc	r24, r24
    19c4:	99 27       	eor	r25, r25
    19c6:	82 0f       	add	r24, r18
    19c8:	93 1f       	adc	r25, r19
    19ca:	02 97       	sbiw	r24, 0x02	; 2
    19cc:	9c 01       	movw	r18, r24
    19ce:	22 0f       	add	r18, r18
    19d0:	33 1f       	adc	r19, r19
    19d2:	22 0f       	add	r18, r18
    19d4:	33 1f       	adc	r19, r19
    19d6:	22 0f       	add	r18, r18
    19d8:	33 1f       	adc	r19, r19
    19da:	82 0f       	add	r24, r18
    19dc:	93 1f       	adc	r25, r19
    19de:	84 51       	subi	r24, 0x14	; 20
    19e0:	98 4d       	sbci	r25, 0xD8	; 216
    19e2:	08 95       	ret

000019e4 <udd_ctrl_interrupt_tc_setup>:
    19e4:	0f 93       	push	r16
    19e6:	cf 93       	push	r28
    19e8:	80 91 cc 04 	lds	r24, 0x04CC
    19ec:	80 ff       	sbrs	r24, 0
    19ee:	62 c0       	rjmp	.+196    	; 0x1ab4 <udd_ctrl_interrupt_tc_setup+0xd0>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	80 93 cc 04 	sts	0x04CC, r24
    19f6:	e4 e6       	ldi	r30, 0x64	; 100
    19f8:	f8 e2       	ldi	r31, 0x28	; 40
    19fa:	00 e8       	ldi	r16, 0x80	; 128
    19fc:	06 93       	lac	Z, r16
    19fe:	ec e6       	ldi	r30, 0x6C	; 108
    1a00:	f8 e2       	ldi	r31, 0x28	; 40
    1a02:	00 e8       	ldi	r16, 0x80	; 128
    1a04:	06 93       	lac	Z, r16
    1a06:	80 93 ca 04 	sts	0x04CA, r24
    1a0a:	e4 e6       	ldi	r30, 0x64	; 100
    1a0c:	f8 e2       	ldi	r31, 0x28	; 40
    1a0e:	00 e1       	ldi	r16, 0x10	; 16
    1a10:	06 93       	lac	Z, r16
    1a12:	80 91 54 28 	lds	r24, 0x2854
    1a16:	88 23       	and	r24, r24
    1a18:	29 f0       	breq	.+10     	; 0x1a24 <udd_ctrl_interrupt_tc_setup+0x40>
    1a1a:	83 50       	subi	r24, 0x03	; 3
    1a1c:	82 30       	cpi	r24, 0x02	; 2
    1a1e:	08 f4       	brcc	.+2      	; 0x1a22 <udd_ctrl_interrupt_tc_setup+0x3e>
    1a20:	2b df       	rcall	.-426    	; 0x1878 <udd_ctrl_endofrequest>
    1a22:	e3 de       	rcall	.-570    	; 0x17ea <udd_ctrl_init>
    1a24:	80 91 66 28 	lds	r24, 0x2866
    1a28:	90 91 67 28 	lds	r25, 0x2867
    1a2c:	08 97       	sbiw	r24, 0x08	; 8
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <udd_ctrl_interrupt_tc_setup+0x4e>
    1a30:	43 c0       	rjmp	.+134    	; 0x1ab8 <udd_ctrl_interrupt_tc_setup+0xd4>
    1a32:	88 e0       	ldi	r24, 0x08	; 8
    1a34:	e0 e1       	ldi	r30, 0x10	; 16
    1a36:	f8 e2       	ldi	r31, 0x28	; 40
    1a38:	a0 e4       	ldi	r26, 0x40	; 64
    1a3a:	b9 e2       	ldi	r27, 0x29	; 41
    1a3c:	01 90       	ld	r0, Z+
    1a3e:	0d 92       	st	X+, r0
    1a40:	8a 95       	dec	r24
    1a42:	e1 f7       	brne	.-8      	; 0x1a3c <udd_ctrl_interrupt_tc_setup+0x58>
    1a44:	e8 ec       	ldi	r30, 0xC8	; 200
    1a46:	f4 e0       	ldi	r31, 0x04	; 4
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 62       	ori	r24, 0x20	; 32
    1a4c:	80 83       	st	Z, r24
    1a4e:	80 81       	ld	r24, Z
    1a50:	80 62       	ori	r24, 0x20	; 32
    1a52:	80 83       	st	Z, r24
    1a54:	c2 d8       	rcall	.-3708   	; 0xbda <udc_process_setup>
    1a56:	c8 2f       	mov	r28, r24
    1a58:	81 11       	cpse	r24, r1
    1a5a:	03 c0       	rjmp	.+6      	; 0x1a62 <udd_ctrl_interrupt_tc_setup+0x7e>
    1a5c:	f1 de       	rcall	.-542    	; 0x1840 <udd_ctrl_stall_data>
    1a5e:	c1 e0       	ldi	r28, 0x01	; 1
    1a60:	2c c0       	rjmp	.+88     	; 0x1aba <udd_ctrl_interrupt_tc_setup+0xd6>
    1a62:	80 91 40 29 	lds	r24, 0x2940
    1a66:	88 23       	and	r24, r24
    1a68:	6c f4       	brge	.+26     	; 0x1a84 <udd_ctrl_interrupt_tc_setup+0xa0>
    1a6a:	10 92 52 28 	sts	0x2852, r1
    1a6e:	10 92 53 28 	sts	0x2853, r1
    1a72:	10 92 50 28 	sts	0x2850, r1
    1a76:	10 92 51 28 	sts	0x2851, r1
    1a7a:	82 e0       	ldi	r24, 0x02	; 2
    1a7c:	80 93 54 28 	sts	0x2854, r24
    1a80:	03 df       	rcall	.-506    	; 0x1888 <udd_ctrl_in_sent>
    1a82:	1b c0       	rjmp	.+54     	; 0x1aba <udd_ctrl_interrupt_tc_setup+0xd6>
    1a84:	20 91 46 29 	lds	r18, 0x2946
    1a88:	30 91 47 29 	lds	r19, 0x2947
    1a8c:	23 2b       	or	r18, r19
    1a8e:	11 f4       	brne	.+4      	; 0x1a94 <udd_ctrl_interrupt_tc_setup+0xb0>
    1a90:	e5 de       	rcall	.-566    	; 0x185c <udd_ctrl_send_zlp_in>
    1a92:	13 c0       	rjmp	.+38     	; 0x1aba <udd_ctrl_interrupt_tc_setup+0xd6>
    1a94:	10 92 52 28 	sts	0x2852, r1
    1a98:	10 92 53 28 	sts	0x2853, r1
    1a9c:	10 92 50 28 	sts	0x2850, r1
    1aa0:	10 92 51 28 	sts	0x2851, r1
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	80 93 54 28 	sts	0x2854, r24
    1aaa:	e4 e6       	ldi	r30, 0x64	; 100
    1aac:	f8 e2       	ldi	r31, 0x28	; 40
    1aae:	02 e0       	ldi	r16, 0x02	; 2
    1ab0:	06 93       	lac	Z, r16
    1ab2:	03 c0       	rjmp	.+6      	; 0x1aba <udd_ctrl_interrupt_tc_setup+0xd6>
    1ab4:	c0 e0       	ldi	r28, 0x00	; 0
    1ab6:	01 c0       	rjmp	.+2      	; 0x1aba <udd_ctrl_interrupt_tc_setup+0xd6>
    1ab8:	c1 e0       	ldi	r28, 0x01	; 1
    1aba:	8c 2f       	mov	r24, r28
    1abc:	cf 91       	pop	r28
    1abe:	0f 91       	pop	r16
    1ac0:	08 95       	ret

00001ac2 <udd_ep_trans_complet>:
    1ac2:	bf 92       	push	r11
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	b8 2e       	mov	r11, r24
    1ad6:	6b df       	rcall	.-298    	; 0x19ae <udd_ep_get_job>
    1ad8:	ec 01       	movw	r28, r24
    1ada:	1b 2d       	mov	r17, r11
    1adc:	11 1f       	adc	r17, r17
    1ade:	11 27       	eor	r17, r17
    1ae0:	11 1f       	adc	r17, r17
    1ae2:	8b 2d       	mov	r24, r11
    1ae4:	8f 70       	andi	r24, 0x0F	; 15
    1ae6:	e8 2e       	mov	r14, r24
    1ae8:	f1 2c       	mov	r15, r1
    1aea:	ee 0c       	add	r14, r14
    1aec:	ff 1c       	adc	r15, r15
    1aee:	e1 0e       	add	r14, r17
    1af0:	f1 1c       	adc	r15, r1
    1af2:	c7 01       	movw	r24, r14
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	9c 01       	movw	r18, r24
    1b02:	2c 59       	subi	r18, 0x9C	; 156
    1b04:	37 4d       	sbci	r19, 0xD7	; 215
    1b06:	79 01       	movw	r14, r18
    1b08:	c9 01       	movw	r24, r18
    1b0a:	2c df       	rcall	.-424    	; 0x1964 <udd_ep_get_size>
    1b0c:	6c 01       	movw	r12, r24
    1b0e:	11 23       	and	r17, r17
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <udd_ep_trans_complet+0x52>
    1b12:	5b c0       	rjmp	.+182    	; 0x1bca <udd_ep_trans_complet+0x108>
    1b14:	d7 01       	movw	r26, r14
    1b16:	16 96       	adiw	r26, 0x06	; 6
    1b18:	2d 91       	ld	r18, X+
    1b1a:	3c 91       	ld	r19, X
    1b1c:	17 97       	sbiw	r26, 0x07	; 7
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	28 0f       	add	r18, r24
    1b24:	39 1f       	adc	r19, r25
    1b26:	2d 83       	std	Y+5, r18	; 0x05
    1b28:	3e 83       	std	Y+6, r19	; 0x06
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	28 17       	cp	r18, r24
    1b30:	39 07       	cpc	r19, r25
    1b32:	c9 f1       	breq	.+114    	; 0x1ba6 <udd_ep_trans_complet+0xe4>
    1b34:	fc 01       	movw	r30, r24
    1b36:	e2 1b       	sub	r30, r18
    1b38:	f3 0b       	sbc	r31, r19
    1b3a:	9f 01       	movw	r18, r30
    1b3c:	21 15       	cp	r18, r1
    1b3e:	f4 e0       	ldi	r31, 0x04	; 4
    1b40:	3f 07       	cpc	r19, r31
    1b42:	40 f0       	brcs	.+16     	; 0x1b54 <udd_ep_trans_complet+0x92>
    1b44:	2f ef       	ldi	r18, 0xFF	; 255
    1b46:	33 e0       	ldi	r19, 0x03	; 3
    1b48:	c9 01       	movw	r24, r18
    1b4a:	b6 01       	movw	r22, r12
    1b4c:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__udivmodhi4>
    1b50:	28 1b       	sub	r18, r24
    1b52:	39 0b       	sbc	r19, r25
    1b54:	88 81       	ld	r24, Y
    1b56:	81 ff       	sbrs	r24, 1
    1b58:	0a c0       	rjmp	.+20     	; 0x1b6e <udd_ep_trans_complet+0xac>
    1b5a:	c9 01       	movw	r24, r18
    1b5c:	b6 01       	movw	r22, r12
    1b5e:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__udivmodhi4>
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	89 2b       	or	r24, r25
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <udd_ep_trans_complet+0xa8>
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	94 2f       	mov	r25, r20
    1b6c:	01 c0       	rjmp	.+2      	; 0x1b70 <udd_ep_trans_complet+0xae>
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	88 81       	ld	r24, Y
    1b72:	90 fb       	bst	r25, 0
    1b74:	81 f9       	bld	r24, 1
    1b76:	88 83       	st	Y, r24
    1b78:	d7 01       	movw	r26, r14
    1b7a:	16 96       	adiw	r26, 0x06	; 6
    1b7c:	1d 92       	st	X+, r1
    1b7e:	1c 92       	st	X, r1
    1b80:	17 97       	sbiw	r26, 0x07	; 7
    1b82:	12 96       	adiw	r26, 0x02	; 2
    1b84:	2d 93       	st	X+, r18
    1b86:	3c 93       	st	X, r19
    1b88:	13 97       	sbiw	r26, 0x03	; 3
    1b8a:	29 81       	ldd	r18, Y+1	; 0x01
    1b8c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	82 0f       	add	r24, r18
    1b94:	93 1f       	adc	r25, r19
    1b96:	14 96       	adiw	r26, 0x04	; 4
    1b98:	8d 93       	st	X+, r24
    1b9a:	9c 93       	st	X, r25
    1b9c:	15 97       	sbiw	r26, 0x05	; 5
    1b9e:	f7 01       	movw	r30, r14
    1ba0:	02 e0       	ldi	r16, 0x02	; 2
    1ba2:	06 93       	lac	Z, r16
    1ba4:	98 c0       	rjmp	.+304    	; 0x1cd6 <udd_ep_trans_complet+0x214>
    1ba6:	88 81       	ld	r24, Y
    1ba8:	81 ff       	sbrs	r24, 1
    1baa:	87 c0       	rjmp	.+270    	; 0x1cba <udd_ep_trans_complet+0x1f8>
    1bac:	8d 7f       	andi	r24, 0xFD	; 253
    1bae:	88 83       	st	Y, r24
    1bb0:	d7 01       	movw	r26, r14
    1bb2:	16 96       	adiw	r26, 0x06	; 6
    1bb4:	1d 92       	st	X+, r1
    1bb6:	1c 92       	st	X, r1
    1bb8:	17 97       	sbiw	r26, 0x07	; 7
    1bba:	12 96       	adiw	r26, 0x02	; 2
    1bbc:	1d 92       	st	X+, r1
    1bbe:	1c 92       	st	X, r1
    1bc0:	13 97       	sbiw	r26, 0x03	; 3
    1bc2:	f7 01       	movw	r30, r14
    1bc4:	02 e0       	ldi	r16, 0x02	; 2
    1bc6:	06 93       	lac	Z, r16
    1bc8:	86 c0       	rjmp	.+268    	; 0x1cd6 <udd_ep_trans_complet+0x214>
    1bca:	d7 01       	movw	r26, r14
    1bcc:	12 96       	adiw	r26, 0x02	; 2
    1bce:	0d 91       	ld	r16, X+
    1bd0:	1c 91       	ld	r17, X
    1bd2:	13 97       	sbiw	r26, 0x03	; 3
    1bd4:	88 81       	ld	r24, Y
    1bd6:	82 ff       	sbrs	r24, 2
    1bd8:	15 c0       	rjmp	.+42     	; 0x1c04 <udd_ep_trans_complet+0x142>
    1bda:	e9 81       	ldd	r30, Y+1	; 0x01
    1bdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bde:	2d 81       	ldd	r18, Y+5	; 0x05
    1be0:	3e 81       	ldd	r19, Y+6	; 0x06
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	9c 81       	ldd	r25, Y+4	; 0x04
    1be6:	b6 01       	movw	r22, r12
    1be8:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__udivmodhi4>
    1bec:	b0 e4       	ldi	r27, 0x40	; 64
    1bee:	bb 9e       	mul	r11, r27
    1bf0:	b0 01       	movw	r22, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	64 5d       	subi	r22, 0xD4	; 212
    1bf6:	78 4d       	sbci	r23, 0xD8	; 216
    1bf8:	ac 01       	movw	r20, r24
    1bfa:	cf 01       	movw	r24, r30
    1bfc:	82 0f       	add	r24, r18
    1bfe:	93 1f       	adc	r25, r19
    1c00:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <memcpy>
    1c04:	2d 81       	ldd	r18, Y+5	; 0x05
    1c06:	3e 81       	ldd	r19, Y+6	; 0x06
    1c08:	20 0f       	add	r18, r16
    1c0a:	31 1f       	adc	r19, r17
    1c0c:	2d 83       	std	Y+5, r18	; 0x05
    1c0e:	3e 83       	std	Y+6, r19	; 0x06
    1c10:	eb 81       	ldd	r30, Y+3	; 0x03
    1c12:	fc 81       	ldd	r31, Y+4	; 0x04
    1c14:	e2 17       	cp	r30, r18
    1c16:	f3 07       	cpc	r31, r19
    1c18:	10 f4       	brcc	.+4      	; 0x1c1e <udd_ep_trans_complet+0x15c>
    1c1a:	ed 83       	std	Y+5, r30	; 0x05
    1c1c:	fe 83       	std	Y+6, r31	; 0x06
    1c1e:	d7 01       	movw	r26, r14
    1c20:	16 96       	adiw	r26, 0x06	; 6
    1c22:	8d 91       	ld	r24, X+
    1c24:	9c 91       	ld	r25, X
    1c26:	17 97       	sbiw	r26, 0x07	; 7
    1c28:	80 17       	cp	r24, r16
    1c2a:	91 07       	cpc	r25, r17
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <udd_ep_trans_complet+0x16e>
    1c2e:	45 c0       	rjmp	.+138    	; 0x1cba <udd_ep_trans_complet+0x1f8>
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	e8 17       	cp	r30, r24
    1c36:	f9 07       	cpc	r31, r25
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <udd_ep_trans_complet+0x17a>
    1c3a:	3f c0       	rjmp	.+126    	; 0x1cba <udd_ep_trans_complet+0x1f8>
    1c3c:	e8 1b       	sub	r30, r24
    1c3e:	f9 0b       	sbc	r31, r25
    1c40:	e1 15       	cp	r30, r1
    1c42:	b4 e0       	ldi	r27, 0x04	; 4
    1c44:	fb 07       	cpc	r31, r27
    1c46:	48 f0       	brcs	.+18     	; 0x1c5a <udd_ep_trans_complet+0x198>
    1c48:	ef ef       	ldi	r30, 0xFF	; 255
    1c4a:	f3 e0       	ldi	r31, 0x03	; 3
    1c4c:	cf 01       	movw	r24, r30
    1c4e:	b6 01       	movw	r22, r12
    1c50:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__udivmodhi4>
    1c54:	e8 1b       	sub	r30, r24
    1c56:	f9 0b       	sbc	r31, r25
    1c58:	06 c0       	rjmp	.+12     	; 0x1c66 <udd_ep_trans_complet+0x1a4>
    1c5a:	cf 01       	movw	r24, r30
    1c5c:	b6 01       	movw	r22, r12
    1c5e:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__udivmodhi4>
    1c62:	e8 1b       	sub	r30, r24
    1c64:	f9 0b       	sbc	r31, r25
    1c66:	d7 01       	movw	r26, r14
    1c68:	12 96       	adiw	r26, 0x02	; 2
    1c6a:	1d 92       	st	X+, r1
    1c6c:	1c 92       	st	X, r1
    1c6e:	13 97       	sbiw	r26, 0x03	; 3
    1c70:	ec 15       	cp	r30, r12
    1c72:	fd 05       	cpc	r31, r13
    1c74:	78 f4       	brcc	.+30     	; 0x1c94 <udd_ep_trans_complet+0x1d2>
    1c76:	88 81       	ld	r24, Y
    1c78:	84 60       	ori	r24, 0x04	; 4
    1c7a:	88 83       	st	Y, r24
    1c7c:	b0 e4       	ldi	r27, 0x40	; 64
    1c7e:	bb 9e       	mul	r11, r27
    1c80:	c0 01       	movw	r24, r0
    1c82:	11 24       	eor	r1, r1
    1c84:	84 5d       	subi	r24, 0xD4	; 212
    1c86:	98 4d       	sbci	r25, 0xD8	; 216
    1c88:	f7 01       	movw	r30, r14
    1c8a:	84 83       	std	Z+4, r24	; 0x04
    1c8c:	95 83       	std	Z+5, r25	; 0x05
    1c8e:	c6 82       	std	Z+6, r12	; 0x06
    1c90:	d7 82       	std	Z+7, r13	; 0x07
    1c92:	0f c0       	rjmp	.+30     	; 0x1cb2 <udd_ep_trans_complet+0x1f0>
    1c94:	29 81       	ldd	r18, Y+1	; 0x01
    1c96:	3a 81       	ldd	r19, Y+2	; 0x02
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	82 0f       	add	r24, r18
    1c9e:	93 1f       	adc	r25, r19
    1ca0:	d7 01       	movw	r26, r14
    1ca2:	14 96       	adiw	r26, 0x04	; 4
    1ca4:	8d 93       	st	X+, r24
    1ca6:	9c 93       	st	X, r25
    1ca8:	15 97       	sbiw	r26, 0x05	; 5
    1caa:	16 96       	adiw	r26, 0x06	; 6
    1cac:	ed 93       	st	X+, r30
    1cae:	fc 93       	st	X, r31
    1cb0:	17 97       	sbiw	r26, 0x07	; 7
    1cb2:	f7 01       	movw	r30, r14
    1cb4:	02 e0       	ldi	r16, 0x02	; 2
    1cb6:	06 93       	lac	Z, r16
    1cb8:	0e c0       	rjmp	.+28     	; 0x1cd6 <udd_ep_trans_complet+0x214>
    1cba:	88 81       	ld	r24, Y
    1cbc:	80 ff       	sbrs	r24, 0
    1cbe:	0b c0       	rjmp	.+22     	; 0x1cd6 <udd_ep_trans_complet+0x214>
    1cc0:	8e 7f       	andi	r24, 0xFE	; 254
    1cc2:	88 83       	st	Y, r24
    1cc4:	ef 81       	ldd	r30, Y+7	; 0x07
    1cc6:	f8 85       	ldd	r31, Y+8	; 0x08
    1cc8:	30 97       	sbiw	r30, 0x00	; 0
    1cca:	29 f0       	breq	.+10     	; 0x1cd6 <udd_ep_trans_complet+0x214>
    1ccc:	6d 81       	ldd	r22, Y+5	; 0x05
    1cce:	7e 81       	ldd	r23, Y+6	; 0x06
    1cd0:	4b 2d       	mov	r20, r11
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	09 95       	icall
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	1f 91       	pop	r17
    1cdc:	0f 91       	pop	r16
    1cde:	ff 90       	pop	r15
    1ce0:	ef 90       	pop	r14
    1ce2:	df 90       	pop	r13
    1ce4:	cf 90       	pop	r12
    1ce6:	bf 90       	pop	r11
    1ce8:	08 95       	ret

00001cea <udd_attach>:
    1cea:	cf 93       	push	r28
    1cec:	cf b7       	in	r28, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	5c dd       	rcall	.-1352   	; 0x17ac <udd_sleep_mode>
    1cf4:	ea ec       	ldi	r30, 0xCA	; 202
    1cf6:	f4 e0       	ldi	r31, 0x04	; 4
    1cf8:	80 e4       	ldi	r24, 0x40	; 64
    1cfa:	80 83       	st	Z, r24
    1cfc:	80 e2       	ldi	r24, 0x20	; 32
    1cfe:	80 83       	st	Z, r24
    1d00:	e1 ec       	ldi	r30, 0xC1	; 193
    1d02:	f4 e0       	ldi	r31, 0x04	; 4
    1d04:	80 81       	ld	r24, Z
    1d06:	81 60       	ori	r24, 0x01	; 1
    1d08:	80 83       	st	Z, r24
    1d0a:	a9 ec       	ldi	r26, 0xC9	; 201
    1d0c:	b4 e0       	ldi	r27, 0x04	; 4
    1d0e:	8c 91       	ld	r24, X
    1d10:	82 60       	ori	r24, 0x02	; 2
    1d12:	8c 93       	st	X, r24
    1d14:	e8 ec       	ldi	r30, 0xC8	; 200
    1d16:	f4 e0       	ldi	r31, 0x04	; 4
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 64       	ori	r24, 0x40	; 64
    1d1c:	80 83       	st	Z, r24
    1d1e:	8c 91       	ld	r24, X
    1d20:	81 60       	ori	r24, 0x01	; 1
    1d22:	8c 93       	st	X, r24
    1d24:	80 81       	ld	r24, Z
    1d26:	80 68       	ori	r24, 0x80	; 128
    1d28:	80 83       	st	Z, r24
    1d2a:	cf bf       	out	0x3f, r28	; 63
    1d2c:	cf 91       	pop	r28
    1d2e:	08 95       	ret

00001d30 <udd_enable>:
    1d30:	cf 93       	push	r28
    1d32:	80 e3       	ldi	r24, 0x30	; 48
    1d34:	1e d4       	rcall	.+2108   	; 0x2572 <sysclk_enable_usb>
    1d36:	e0 ec       	ldi	r30, 0xC0	; 192
    1d38:	f4 e0       	ldi	r31, 0x04	; 4
    1d3a:	80 81       	ld	r24, Z
    1d3c:	80 64       	ori	r24, 0x40	; 64
    1d3e:	80 83       	st	Z, r24
    1d40:	cf b7       	in	r28, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	10 92 65 28 	sts	0x2865, r1
    1d48:	10 92 6d 28 	sts	0x286D, r1
    1d4c:	10 92 75 28 	sts	0x2875, r1
    1d50:	10 92 7d 28 	sts	0x287D, r1
    1d54:	10 92 85 28 	sts	0x2885, r1
    1d58:	10 92 8d 28 	sts	0x288D, r1
    1d5c:	ec ee       	ldi	r30, 0xEC	; 236
    1d5e:	f7 e2       	ldi	r31, 0x27	; 39
    1d60:	80 81       	ld	r24, Z
    1d62:	8e 7f       	andi	r24, 0xFE	; 254
    1d64:	80 83       	st	Z, r24
    1d66:	e5 ef       	ldi	r30, 0xF5	; 245
    1d68:	f7 e2       	ldi	r31, 0x27	; 39
    1d6a:	80 81       	ld	r24, Z
    1d6c:	8e 7f       	andi	r24, 0xFE	; 254
    1d6e:	80 83       	st	Z, r24
    1d70:	ee ef       	ldi	r30, 0xFE	; 254
    1d72:	f7 e2       	ldi	r31, 0x27	; 39
    1d74:	80 81       	ld	r24, Z
    1d76:	8e 7f       	andi	r24, 0xFE	; 254
    1d78:	80 83       	st	Z, r24
    1d7a:	e7 e0       	ldi	r30, 0x07	; 7
    1d7c:	f8 e2       	ldi	r31, 0x28	; 40
    1d7e:	80 81       	ld	r24, Z
    1d80:	8e 7f       	andi	r24, 0xFE	; 254
    1d82:	80 83       	st	Z, r24
    1d84:	6a e1       	ldi	r22, 0x1A	; 26
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	82 e0       	ldi	r24, 0x02	; 2
    1d8a:	ec d4       	rcall	.+2520   	; 0x2764 <nvm_read_byte>
    1d8c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d8e:	19 f0       	breq	.+6      	; 0x1d96 <udd_enable+0x66>
    1d90:	80 93 fa 04 	sts	0x04FA, r24
    1d94:	03 c0       	rjmp	.+6      	; 0x1d9c <udd_enable+0x6c>
    1d96:	8f e1       	ldi	r24, 0x1F	; 31
    1d98:	80 93 fa 04 	sts	0x04FA, r24
    1d9c:	6b e1       	ldi	r22, 0x1B	; 27
    1d9e:	70 e0       	ldi	r23, 0x00	; 0
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	e0 d4       	rcall	.+2496   	; 0x2764 <nvm_read_byte>
    1da4:	8f 3f       	cpi	r24, 0xFF	; 255
    1da6:	19 f0       	breq	.+6      	; 0x1dae <udd_enable+0x7e>
    1da8:	80 93 fb 04 	sts	0x04FB, r24
    1dac:	03 c0       	rjmp	.+6      	; 0x1db4 <udd_enable+0x84>
    1dae:	8f e1       	ldi	r24, 0x1F	; 31
    1db0:	80 93 fb 04 	sts	0x04FB, r24
    1db4:	e0 ec       	ldi	r30, 0xC0	; 192
    1db6:	f4 e0       	ldi	r31, 0x04	; 4
    1db8:	80 81       	ld	r24, Z
    1dba:	82 60       	ori	r24, 0x02	; 2
    1dbc:	80 83       	st	Z, r24
    1dbe:	80 81       	ld	r24, Z
    1dc0:	80 68       	ori	r24, 0x80	; 128
    1dc2:	80 83       	st	Z, r24
    1dc4:	80 81       	ld	r24, Z
    1dc6:	80 61       	ori	r24, 0x10	; 16
    1dc8:	80 83       	st	Z, r24
    1dca:	84 e6       	ldi	r24, 0x64	; 100
    1dcc:	98 e2       	ldi	r25, 0x28	; 40
    1dce:	86 83       	std	Z+6, r24	; 0x06
    1dd0:	97 83       	std	Z+7, r25	; 0x07
    1dd2:	80 81       	ld	r24, Z
    1dd4:	80 62       	ori	r24, 0x20	; 32
    1dd6:	80 83       	st	Z, r24
    1dd8:	8f ef       	ldi	r24, 0xFF	; 255
    1dda:	80 93 c5 04 	sts	0x04C5, r24
    1dde:	e8 ec       	ldi	r30, 0xC8	; 200
    1de0:	f4 e0       	ldi	r31, 0x04	; 4
    1de2:	80 81       	ld	r24, Z
    1de4:	81 60       	ori	r24, 0x01	; 1
    1de6:	80 83       	st	Z, r24
    1de8:	10 92 98 28 	sts	0x2898, r1
    1dec:	8f b7       	in	r24, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	e5 e5       	ldi	r30, 0x55	; 85
    1df2:	f9 e2       	ldi	r31, 0x29	; 41
    1df4:	90 81       	ld	r25, Z
    1df6:	9f 5f       	subi	r25, 0xFF	; 255
    1df8:	90 83       	st	Z, r25
    1dfa:	8f bf       	out	0x3f, r24	; 63
    1dfc:	76 df       	rcall	.-276    	; 0x1cea <udd_attach>
    1dfe:	cf bf       	out	0x3f, r28	; 63
    1e00:	cf 91       	pop	r28
    1e02:	08 95       	ret

00001e04 <udd_is_high_speed>:
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	08 95       	ret

00001e08 <udd_set_address>:
    1e08:	80 93 c3 04 	sts	0x04C3, r24
    1e0c:	08 95       	ret

00001e0e <udd_getaddress>:
    1e0e:	80 91 c3 04 	lds	r24, 0x04C3
    1e12:	08 95       	ret

00001e14 <udd_get_frame_number>:
    1e14:	80 91 94 28 	lds	r24, 0x2894
    1e18:	90 91 95 28 	lds	r25, 0x2895
    1e1c:	08 95       	ret

00001e1e <udd_get_micro_frame_number>:
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	08 95       	ret

00001e24 <udd_set_setup_payload>:
    1e24:	80 93 48 29 	sts	0x2948, r24
    1e28:	90 93 49 29 	sts	0x2949, r25
    1e2c:	60 93 4a 29 	sts	0x294A, r22
    1e30:	70 93 4b 29 	sts	0x294B, r23
    1e34:	08 95       	ret

00001e36 <udd_ep_alloc>:
    1e36:	e8 2f       	mov	r30, r24
    1e38:	ef 70       	andi	r30, 0x0F	; 15
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	ee 0f       	add	r30, r30
    1e3e:	ff 1f       	adc	r31, r31
    1e40:	99 27       	eor	r25, r25
    1e42:	87 fd       	sbrc	r24, 7
    1e44:	90 95       	com	r25
    1e46:	88 27       	eor	r24, r24
    1e48:	99 0f       	add	r25, r25
    1e4a:	88 1f       	adc	r24, r24
    1e4c:	99 27       	eor	r25, r25
    1e4e:	e8 0f       	add	r30, r24
    1e50:	f9 1f       	adc	r31, r25
    1e52:	ee 0f       	add	r30, r30
    1e54:	ff 1f       	adc	r31, r31
    1e56:	ee 0f       	add	r30, r30
    1e58:	ff 1f       	adc	r31, r31
    1e5a:	ee 0f       	add	r30, r30
    1e5c:	ff 1f       	adc	r31, r31
    1e5e:	ec 59       	subi	r30, 0x9C	; 156
    1e60:	f7 4d       	sbci	r31, 0xD7	; 215
    1e62:	81 81       	ldd	r24, Z+1	; 0x01
    1e64:	80 7c       	andi	r24, 0xC0	; 192
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <udd_ep_alloc+0x34>
    1e68:	43 c0       	rjmp	.+134    	; 0x1ef0 <udd_ep_alloc+0xba>
    1e6a:	63 70       	andi	r22, 0x03	; 3
    1e6c:	61 30       	cpi	r22, 0x01	; 1
    1e6e:	29 f0       	breq	.+10     	; 0x1e7a <udd_ep_alloc+0x44>
    1e70:	10 f4       	brcc	.+4      	; 0x1e76 <udd_ep_alloc+0x40>
    1e72:	80 e4       	ldi	r24, 0x40	; 64
    1e74:	03 c0       	rjmp	.+6      	; 0x1e7c <udd_ep_alloc+0x46>
    1e76:	80 e8       	ldi	r24, 0x80	; 128
    1e78:	01 c0       	rjmp	.+2      	; 0x1e7c <udd_ep_alloc+0x46>
    1e7a:	80 ec       	ldi	r24, 0xC0	; 192
    1e7c:	40 38       	cpi	r20, 0x80	; 128
    1e7e:	51 05       	cpc	r21, r1
    1e80:	e1 f0       	breq	.+56     	; 0x1eba <udd_ep_alloc+0x84>
    1e82:	50 f4       	brcc	.+20     	; 0x1e98 <udd_ep_alloc+0x62>
    1e84:	40 32       	cpi	r20, 0x20	; 32
    1e86:	51 05       	cpc	r21, r1
    1e88:	a1 f0       	breq	.+40     	; 0x1eb2 <udd_ep_alloc+0x7c>
    1e8a:	40 34       	cpi	r20, 0x40	; 64
    1e8c:	51 05       	cpc	r21, r1
    1e8e:	99 f0       	breq	.+38     	; 0x1eb6 <udd_ep_alloc+0x80>
    1e90:	40 31       	cpi	r20, 0x10	; 16
    1e92:	51 05       	cpc	r21, r1
    1e94:	61 f4       	brne	.+24     	; 0x1eae <udd_ep_alloc+0x78>
    1e96:	19 c0       	rjmp	.+50     	; 0x1eca <udd_ep_alloc+0x94>
    1e98:	41 15       	cp	r20, r1
    1e9a:	92 e0       	ldi	r25, 0x02	; 2
    1e9c:	59 07       	cpc	r21, r25
    1e9e:	89 f0       	breq	.+34     	; 0x1ec2 <udd_ep_alloc+0x8c>
    1ea0:	4f 3f       	cpi	r20, 0xFF	; 255
    1ea2:	93 e0       	ldi	r25, 0x03	; 3
    1ea4:	59 07       	cpc	r21, r25
    1ea6:	79 f0       	breq	.+30     	; 0x1ec6 <udd_ep_alloc+0x90>
    1ea8:	41 15       	cp	r20, r1
    1eaa:	51 40       	sbci	r21, 0x01	; 1
    1eac:	41 f0       	breq	.+16     	; 0x1ebe <udd_ep_alloc+0x88>
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	0d c0       	rjmp	.+26     	; 0x1ecc <udd_ep_alloc+0x96>
    1eb2:	22 e0       	ldi	r18, 0x02	; 2
    1eb4:	0b c0       	rjmp	.+22     	; 0x1ecc <udd_ep_alloc+0x96>
    1eb6:	23 e0       	ldi	r18, 0x03	; 3
    1eb8:	09 c0       	rjmp	.+18     	; 0x1ecc <udd_ep_alloc+0x96>
    1eba:	24 e0       	ldi	r18, 0x04	; 4
    1ebc:	07 c0       	rjmp	.+14     	; 0x1ecc <udd_ep_alloc+0x96>
    1ebe:	25 e0       	ldi	r18, 0x05	; 5
    1ec0:	05 c0       	rjmp	.+10     	; 0x1ecc <udd_ep_alloc+0x96>
    1ec2:	26 e0       	ldi	r18, 0x06	; 6
    1ec4:	03 c0       	rjmp	.+6      	; 0x1ecc <udd_ep_alloc+0x96>
    1ec6:	27 e0       	ldi	r18, 0x07	; 7
    1ec8:	01 c0       	rjmp	.+2      	; 0x1ecc <udd_ep_alloc+0x96>
    1eca:	21 e0       	ldi	r18, 0x01	; 1
    1ecc:	11 82       	std	Z+1, r1	; 0x01
    1ece:	96 e0       	ldi	r25, 0x06	; 6
    1ed0:	90 83       	st	Z, r25
    1ed2:	82 2b       	or	r24, r18
    1ed4:	81 83       	std	Z+1, r24	; 0x01
    1ed6:	81 81       	ldd	r24, Z+1	; 0x01
    1ed8:	80 7c       	andi	r24, 0xC0	; 192
    1eda:	80 3c       	cpi	r24, 0xC0	; 192
    1edc:	21 f4       	brne	.+8      	; 0x1ee6 <udd_ep_alloc+0xb0>
    1ede:	81 81       	ldd	r24, Z+1	; 0x01
    1ee0:	87 70       	andi	r24, 0x07	; 7
    1ee2:	87 30       	cpi	r24, 0x07	; 7
    1ee4:	39 f0       	breq	.+14     	; 0x1ef4 <udd_ep_alloc+0xbe>
    1ee6:	81 81       	ldd	r24, Z+1	; 0x01
    1ee8:	80 62       	ori	r24, 0x20	; 32
    1eea:	81 83       	std	Z+1, r24	; 0x01
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	08 95       	ret
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	08 95       	ret
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	08 95       	ret

00001ef8 <udd_ep_is_halted>:
    1ef8:	e8 2f       	mov	r30, r24
    1efa:	ef 70       	andi	r30, 0x0F	; 15
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	ee 0f       	add	r30, r30
    1f00:	ff 1f       	adc	r31, r31
    1f02:	99 27       	eor	r25, r25
    1f04:	87 fd       	sbrc	r24, 7
    1f06:	90 95       	com	r25
    1f08:	88 27       	eor	r24, r24
    1f0a:	99 0f       	add	r25, r25
    1f0c:	88 1f       	adc	r24, r24
    1f0e:	99 27       	eor	r25, r25
    1f10:	e8 0f       	add	r30, r24
    1f12:	f9 1f       	adc	r31, r25
    1f14:	ee 0f       	add	r30, r30
    1f16:	ff 1f       	adc	r31, r31
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	ff 1f       	adc	r31, r31
    1f20:	ec 59       	subi	r30, 0x9C	; 156
    1f22:	f7 4d       	sbci	r31, 0xD7	; 215
    1f24:	81 81       	ldd	r24, Z+1	; 0x01
    1f26:	82 fb       	bst	r24, 2
    1f28:	88 27       	eor	r24, r24
    1f2a:	80 f9       	bld	r24, 0
    1f2c:	08 95       	ret

00001f2e <udd_ep_clear_halt>:
    1f2e:	e8 2f       	mov	r30, r24
    1f30:	ef 70       	andi	r30, 0x0F	; 15
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	ee 0f       	add	r30, r30
    1f36:	ff 1f       	adc	r31, r31
    1f38:	28 2f       	mov	r18, r24
    1f3a:	33 27       	eor	r19, r19
    1f3c:	27 fd       	sbrc	r18, 7
    1f3e:	30 95       	com	r19
    1f40:	22 27       	eor	r18, r18
    1f42:	33 0f       	add	r19, r19
    1f44:	22 1f       	adc	r18, r18
    1f46:	33 27       	eor	r19, r19
    1f48:	e2 0f       	add	r30, r18
    1f4a:	f3 1f       	adc	r31, r19
    1f4c:	ee 0f       	add	r30, r30
    1f4e:	ff 1f       	adc	r31, r31
    1f50:	ee 0f       	add	r30, r30
    1f52:	ff 1f       	adc	r31, r31
    1f54:	ee 0f       	add	r30, r30
    1f56:	ff 1f       	adc	r31, r31
    1f58:	ec 59       	subi	r30, 0x9C	; 156
    1f5a:	f7 4d       	sbci	r31, 0xD7	; 215
    1f5c:	91 81       	ldd	r25, Z+1	; 0x01
    1f5e:	92 ff       	sbrs	r25, 2
    1f60:	0e c0       	rjmp	.+28     	; 0x1f7e <udd_ep_clear_halt+0x50>
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	9b 7f       	andi	r25, 0xFB	; 251
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	22 dd       	rcall	.-1468   	; 0x19ae <udd_ep_get_job>
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	80 81       	ld	r24, Z
    1f6e:	80 ff       	sbrs	r24, 0
    1f70:	06 c0       	rjmp	.+12     	; 0x1f7e <udd_ep_clear_halt+0x50>
    1f72:	8e 7f       	andi	r24, 0xFE	; 254
    1f74:	80 83       	st	Z, r24
    1f76:	07 80       	ldd	r0, Z+7	; 0x07
    1f78:	f0 85       	ldd	r31, Z+8	; 0x08
    1f7a:	e0 2d       	mov	r30, r0
    1f7c:	09 95       	icall
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	08 95       	ret

00001f82 <udd_ep_run>:
    1f82:	7f 92       	push	r7
    1f84:	8f 92       	push	r8
    1f86:	9f 92       	push	r9
    1f88:	af 92       	push	r10
    1f8a:	bf 92       	push	r11
    1f8c:	cf 92       	push	r12
    1f8e:	df 92       	push	r13
    1f90:	ef 92       	push	r14
    1f92:	ff 92       	push	r15
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	98 2e       	mov	r9, r24
    1f9e:	86 2e       	mov	r8, r22
    1fa0:	5a 01       	movw	r10, r20
    1fa2:	69 01       	movw	r12, r18
    1fa4:	04 dd       	rcall	.-1528   	; 0x19ae <udd_ep_get_job>
    1fa6:	7c 01       	movw	r14, r24
    1fa8:	79 2c       	mov	r7, r9
    1faa:	77 1c       	adc	r7, r7
    1fac:	77 24       	eor	r7, r7
    1fae:	77 1c       	adc	r7, r7
    1fb0:	c9 2d       	mov	r28, r9
    1fb2:	cf 70       	andi	r28, 0x0F	; 15
    1fb4:	d0 e0       	ldi	r29, 0x00	; 0
    1fb6:	cc 0f       	add	r28, r28
    1fb8:	dd 1f       	adc	r29, r29
    1fba:	c7 0d       	add	r28, r7
    1fbc:	d1 1d       	adc	r29, r1
    1fbe:	cc 0f       	add	r28, r28
    1fc0:	dd 1f       	adc	r29, r29
    1fc2:	cc 0f       	add	r28, r28
    1fc4:	dd 1f       	adc	r29, r29
    1fc6:	cc 0f       	add	r28, r28
    1fc8:	dd 1f       	adc	r29, r29
    1fca:	cc 59       	subi	r28, 0x9C	; 156
    1fcc:	d7 4d       	sbci	r29, 0xD7	; 215
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	80 7c       	andi	r24, 0xC0	; 192
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <udd_ep_run+0x54>
    1fd4:	4c c0       	rjmp	.+152    	; 0x206e <udd_ep_run+0xec>
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	80 7c       	andi	r24, 0xC0	; 192
    1fda:	80 3c       	cpi	r24, 0xC0	; 192
    1fdc:	19 f0       	breq	.+6      	; 0x1fe4 <udd_ep_run+0x62>
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	82 fd       	sbrc	r24, 2
    1fe2:	47 c0       	rjmp	.+142    	; 0x2072 <udd_ep_run+0xf0>
    1fe4:	8f b7       	in	r24, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	f7 01       	movw	r30, r14
    1fea:	90 81       	ld	r25, Z
    1fec:	90 ff       	sbrs	r25, 0
    1fee:	03 c0       	rjmp	.+6      	; 0x1ff6 <udd_ep_run+0x74>
    1ff0:	8f bf       	out	0x3f, r24	; 63
    1ff2:	71 2c       	mov	r7, r1
    1ff4:	3f c0       	rjmp	.+126    	; 0x2074 <udd_ep_run+0xf2>
    1ff6:	f7 01       	movw	r30, r14
    1ff8:	90 81       	ld	r25, Z
    1ffa:	91 60       	ori	r25, 0x01	; 1
    1ffc:	90 83       	st	Z, r25
    1ffe:	8f bf       	out	0x3f, r24	; 63
    2000:	f7 01       	movw	r30, r14
    2002:	a1 82       	std	Z+1, r10	; 0x01
    2004:	b2 82       	std	Z+2, r11	; 0x02
    2006:	c3 82       	std	Z+3, r12	; 0x03
    2008:	d4 82       	std	Z+4, r13	; 0x04
    200a:	15 82       	std	Z+5, r1	; 0x05
    200c:	16 82       	std	Z+6, r1	; 0x06
    200e:	07 83       	std	Z+7, r16	; 0x07
    2010:	10 87       	std	Z+8, r17	; 0x08
    2012:	81 10       	cpse	r8, r1
    2014:	06 c0       	rjmp	.+12     	; 0x2022 <udd_ep_run+0xa0>
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	c1 14       	cp	r12, r1
    201a:	d1 04       	cpc	r13, r1
    201c:	19 f0       	breq	.+6      	; 0x2024 <udd_ep_run+0xa2>
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	01 c0       	rjmp	.+2      	; 0x2024 <udd_ep_run+0xa2>
    2022:	91 e0       	ldi	r25, 0x01	; 1
    2024:	f7 01       	movw	r30, r14
    2026:	80 81       	ld	r24, Z
    2028:	90 fb       	bst	r25, 0
    202a:	81 f9       	bld	r24, 1
    202c:	8b 7f       	andi	r24, 0xFB	; 251
    202e:	80 83       	st	Z, r24
    2030:	77 20       	and	r7, r7
    2032:	19 f0       	breq	.+6      	; 0x203a <udd_ep_run+0xb8>
    2034:	1e 82       	std	Y+6, r1	; 0x06
    2036:	1f 82       	std	Y+7, r1	; 0x07
    2038:	15 c0       	rjmp	.+42     	; 0x2064 <udd_ep_run+0xe2>
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	80 7c       	andi	r24, 0xC0	; 192
    203e:	80 3c       	cpi	r24, 0xC0	; 192
    2040:	69 f4       	brne	.+26     	; 0x205c <udd_ep_run+0xda>
    2042:	ce 01       	movw	r24, r28
    2044:	8f dc       	rcall	.-1762   	; 0x1964 <udd_ep_get_size>
    2046:	bc 01       	movw	r22, r24
    2048:	c6 01       	movw	r24, r12
    204a:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__udivmodhi4>
    204e:	89 2b       	or	r24, r25
    2050:	29 f0       	breq	.+10     	; 0x205c <udd_ep_run+0xda>
    2052:	f7 01       	movw	r30, r14
    2054:	80 81       	ld	r24, Z
    2056:	8e 7f       	andi	r24, 0xFE	; 254
    2058:	80 83       	st	Z, r24
    205a:	0c c0       	rjmp	.+24     	; 0x2074 <udd_ep_run+0xf2>
    205c:	1a 82       	std	Y+2, r1	; 0x02
    205e:	1b 82       	std	Y+3, r1	; 0x03
    2060:	1e 82       	std	Y+6, r1	; 0x06
    2062:	1f 82       	std	Y+7, r1	; 0x07
    2064:	89 2d       	mov	r24, r9
    2066:	2d dd       	rcall	.-1446   	; 0x1ac2 <udd_ep_trans_complet>
    2068:	77 24       	eor	r7, r7
    206a:	73 94       	inc	r7
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <udd_ep_run+0xf2>
    206e:	71 2c       	mov	r7, r1
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <udd_ep_run+0xf2>
    2072:	71 2c       	mov	r7, r1
    2074:	87 2d       	mov	r24, r7
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	1f 91       	pop	r17
    207c:	0f 91       	pop	r16
    207e:	ff 90       	pop	r15
    2080:	ef 90       	pop	r14
    2082:	df 90       	pop	r13
    2084:	cf 90       	pop	r12
    2086:	bf 90       	pop	r11
    2088:	af 90       	pop	r10
    208a:	9f 90       	pop	r9
    208c:	8f 90       	pop	r8
    208e:	7f 90       	pop	r7
    2090:	08 95       	ret

00002092 <udd_ep_abort>:
    2092:	ff 92       	push	r15
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	18 2f       	mov	r17, r24
    209e:	f8 2e       	mov	r15, r24
    20a0:	ff 1c       	adc	r15, r15
    20a2:	ff 24       	eor	r15, r15
    20a4:	ff 1c       	adc	r15, r15
    20a6:	c8 2f       	mov	r28, r24
    20a8:	cf 70       	andi	r28, 0x0F	; 15
    20aa:	d0 e0       	ldi	r29, 0x00	; 0
    20ac:	cc 0f       	add	r28, r28
    20ae:	dd 1f       	adc	r29, r29
    20b0:	cf 0d       	add	r28, r15
    20b2:	d1 1d       	adc	r29, r1
    20b4:	cc 0f       	add	r28, r28
    20b6:	dd 1f       	adc	r29, r29
    20b8:	cc 0f       	add	r28, r28
    20ba:	dd 1f       	adc	r29, r29
    20bc:	cc 0f       	add	r28, r28
    20be:	dd 1f       	adc	r29, r29
    20c0:	cc 59       	subi	r28, 0x9C	; 156
    20c2:	d7 4d       	sbci	r29, 0xD7	; 215
    20c4:	74 dc       	rcall	.-1816   	; 0x19ae <udd_ep_get_job>
    20c6:	dc 01       	movw	r26, r24
    20c8:	fe 01       	movw	r30, r28
    20ca:	02 e0       	ldi	r16, 0x02	; 2
    20cc:	05 93       	las	Z, r16
    20ce:	8c 91       	ld	r24, X
    20d0:	80 ff       	sbrs	r24, 0
    20d2:	12 c0       	rjmp	.+36     	; 0x20f8 <udd_ep_abort+0x66>
    20d4:	8e 7f       	andi	r24, 0xFE	; 254
    20d6:	8c 93       	st	X, r24
    20d8:	17 96       	adiw	r26, 0x07	; 7
    20da:	ed 91       	ld	r30, X+
    20dc:	fc 91       	ld	r31, X
    20de:	18 97       	sbiw	r26, 0x08	; 8
    20e0:	30 97       	sbiw	r30, 0x00	; 0
    20e2:	51 f0       	breq	.+20     	; 0x20f8 <udd_ep_abort+0x66>
    20e4:	ff 20       	and	r15, r15
    20e6:	19 f0       	breq	.+6      	; 0x20ee <udd_ep_abort+0x5c>
    20e8:	6e 81       	ldd	r22, Y+6	; 0x06
    20ea:	7f 81       	ldd	r23, Y+7	; 0x07
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <udd_ep_abort+0x60>
    20ee:	6a 81       	ldd	r22, Y+2	; 0x02
    20f0:	7b 81       	ldd	r23, Y+3	; 0x03
    20f2:	41 2f       	mov	r20, r17
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	09 95       	icall
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	ff 90       	pop	r15
    2102:	08 95       	ret

00002104 <udd_ep_free>:
    2104:	cf 93       	push	r28
    2106:	c8 2f       	mov	r28, r24
    2108:	c4 df       	rcall	.-120    	; 0x2092 <udd_ep_abort>
    210a:	ec 2f       	mov	r30, r28
    210c:	ef 70       	andi	r30, 0x0F	; 15
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	8c 2f       	mov	r24, r28
    2116:	99 27       	eor	r25, r25
    2118:	87 fd       	sbrc	r24, 7
    211a:	90 95       	com	r25
    211c:	88 27       	eor	r24, r24
    211e:	99 0f       	add	r25, r25
    2120:	88 1f       	adc	r24, r24
    2122:	99 27       	eor	r25, r25
    2124:	e8 0f       	add	r30, r24
    2126:	f9 1f       	adc	r31, r25
    2128:	ee 0f       	add	r30, r30
    212a:	ff 1f       	adc	r31, r31
    212c:	ee 0f       	add	r30, r30
    212e:	ff 1f       	adc	r31, r31
    2130:	ee 0f       	add	r30, r30
    2132:	ff 1f       	adc	r31, r31
    2134:	ec 59       	subi	r30, 0x9C	; 156
    2136:	f7 4d       	sbci	r31, 0xD7	; 215
    2138:	11 82       	std	Z+1, r1	; 0x01
    213a:	cf 91       	pop	r28
    213c:	08 95       	ret

0000213e <udd_ep_set_halt>:
    213e:	0f 93       	push	r16
    2140:	e8 2f       	mov	r30, r24
    2142:	ef 70       	andi	r30, 0x0F	; 15
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	ee 0f       	add	r30, r30
    2148:	ff 1f       	adc	r31, r31
    214a:	28 2f       	mov	r18, r24
    214c:	33 27       	eor	r19, r19
    214e:	27 fd       	sbrc	r18, 7
    2150:	30 95       	com	r19
    2152:	22 27       	eor	r18, r18
    2154:	33 0f       	add	r19, r19
    2156:	22 1f       	adc	r18, r18
    2158:	33 27       	eor	r19, r19
    215a:	e2 0f       	add	r30, r18
    215c:	f3 1f       	adc	r31, r19
    215e:	ee 0f       	add	r30, r30
    2160:	ff 1f       	adc	r31, r31
    2162:	ee 0f       	add	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	ee 0f       	add	r30, r30
    2168:	ff 1f       	adc	r31, r31
    216a:	ec 59       	subi	r30, 0x9C	; 156
    216c:	f7 4d       	sbci	r31, 0xD7	; 215
    216e:	91 81       	ldd	r25, Z+1	; 0x01
    2170:	94 60       	ori	r25, 0x04	; 4
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	01 e0       	ldi	r16, 0x01	; 1
    2176:	06 93       	lac	Z, r16
    2178:	8c df       	rcall	.-232    	; 0x2092 <udd_ep_abort>
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	0f 91       	pop	r16
    217e:	08 95       	ret

00002180 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2180:	1f 92       	push	r1
    2182:	0f 92       	push	r0
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	0f 92       	push	r0
    2188:	11 24       	eor	r1, r1
    218a:	0f 93       	push	r16
    218c:	2f 93       	push	r18
    218e:	3f 93       	push	r19
    2190:	4f 93       	push	r20
    2192:	5f 93       	push	r21
    2194:	6f 93       	push	r22
    2196:	7f 93       	push	r23
    2198:	8f 93       	push	r24
    219a:	9f 93       	push	r25
    219c:	af 93       	push	r26
    219e:	bf 93       	push	r27
    21a0:	ef 93       	push	r30
    21a2:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    21a4:	80 91 cb 04 	lds	r24, 0x04CB
    21a8:	88 23       	and	r24, r24
    21aa:	34 f4       	brge	.+12     	; 0x21b8 <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    21ac:	80 e8       	ldi	r24, 0x80	; 128
    21ae:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    21b2:	0e 94 be 05 	call	0xb7c	; 0xb7c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    21b6:	88 c0       	rjmp	.+272    	; 0x22c8 <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    21b8:	80 91 cb 04 	lds	r24, 0x04CB
    21bc:	82 ff       	sbrs	r24, 2
    21be:	20 c0       	rjmp	.+64     	; 0x2200 <__vector_125+0x80>
		udd_ack_underflow_event();
    21c0:	84 e0       	ldi	r24, 0x04	; 4
    21c2:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    21c6:	80 91 6c 28 	lds	r24, 0x286C
    21ca:	86 ff       	sbrs	r24, 6
    21cc:	7d c0       	rjmp	.+250    	; 0x22c8 <__vector_125+0x148>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    21ce:	80 91 cc 04 	lds	r24, 0x04CC
    21d2:	81 fd       	sbrc	r24, 1
    21d4:	79 c0       	rjmp	.+242    	; 0x22c8 <__vector_125+0x148>
    21d6:	06 dc       	rcall	.-2036   	; 0x19e4 <udd_ctrl_interrupt_tc_setup>
    21d8:	81 11       	cpse	r24, r1
    21da:	76 c0       	rjmp	.+236    	; 0x22c8 <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    21dc:	80 91 54 28 	lds	r24, 0x2854
    21e0:	81 30       	cpi	r24, 0x01	; 1
    21e2:	11 f4       	brne	.+4      	; 0x21e8 <__vector_125+0x68>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    21e4:	3b db       	rcall	.-2442   	; 0x185c <udd_ctrl_send_zlp_in>
    21e6:	70 c0       	rjmp	.+224    	; 0x22c8 <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    21e8:	84 30       	cpi	r24, 0x04	; 4
    21ea:	09 f0       	breq	.+2      	; 0x21ee <__vector_125+0x6e>
    21ec:	6d c0       	rjmp	.+218    	; 0x22c8 <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    21ee:	ed e6       	ldi	r30, 0x6D	; 109
    21f0:	f8 e2       	ldi	r31, 0x28	; 40
    21f2:	04 e0       	ldi	r16, 0x04	; 4
    21f4:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    21f6:	e5 e6       	ldi	r30, 0x65	; 101
    21f8:	f8 e2       	ldi	r31, 0x28	; 40
    21fa:	04 e0       	ldi	r16, 0x04	; 4
    21fc:	05 93       	las	Z, r16
    21fe:	64 c0       	rjmp	.+200    	; 0x22c8 <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2200:	80 91 cb 04 	lds	r24, 0x04CB
    2204:	81 ff       	sbrs	r24, 1
    2206:	5b c0       	rjmp	.+182    	; 0x22be <__vector_125+0x13e>
		udd_ack_overflow_event();
    2208:	82 e0       	ldi	r24, 0x02	; 2
    220a:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    220e:	80 91 64 28 	lds	r24, 0x2864
    2212:	86 ff       	sbrs	r24, 6
    2214:	59 c0       	rjmp	.+178    	; 0x22c8 <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2216:	80 91 cc 04 	lds	r24, 0x04CC
    221a:	81 fd       	sbrc	r24, 1
    221c:	55 c0       	rjmp	.+170    	; 0x22c8 <__vector_125+0x148>
    221e:	e2 db       	rcall	.-2108   	; 0x19e4 <udd_ctrl_interrupt_tc_setup>
    2220:	81 11       	cpse	r24, r1
    2222:	52 c0       	rjmp	.+164    	; 0x22c8 <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2224:	80 91 54 28 	lds	r24, 0x2854
    2228:	82 30       	cpi	r24, 0x02	; 2
    222a:	41 f4       	brne	.+16     	; 0x223c <__vector_125+0xbc>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    222c:	84 e0       	ldi	r24, 0x04	; 4
    222e:	80 93 54 28 	sts	0x2854, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2232:	e4 e6       	ldi	r30, 0x64	; 100
    2234:	f8 e2       	ldi	r31, 0x28	; 40
    2236:	02 e0       	ldi	r16, 0x02	; 2
    2238:	06 93       	lac	Z, r16
    223a:	46 c0       	rjmp	.+140    	; 0x22c8 <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    223c:	83 30       	cpi	r24, 0x03	; 3
    223e:	09 f0       	breq	.+2      	; 0x2242 <__vector_125+0xc2>
    2240:	43 c0       	rjmp	.+134    	; 0x22c8 <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2242:	ed e6       	ldi	r30, 0x6D	; 109
    2244:	f8 e2       	ldi	r31, 0x28	; 40
    2246:	04 e0       	ldi	r16, 0x04	; 4
    2248:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    224a:	e5 e6       	ldi	r30, 0x65	; 101
    224c:	f8 e2       	ldi	r31, 0x28	; 40
    224e:	04 e0       	ldi	r16, 0x04	; 4
    2250:	05 93       	las	Z, r16
    2252:	3a c0       	rjmp	.+116    	; 0x22c8 <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2254:	80 e1       	ldi	r24, 0x10	; 16
    2256:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	1a df       	rcall	.-460    	; 0x2092 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    225e:	81 e8       	ldi	r24, 0x81	; 129
    2260:	18 df       	rcall	.-464    	; 0x2092 <udd_ep_abort>
		}
#endif
		udc_reset();
    2262:	0e 94 97 05 	call	0xb2e	; 0xb2e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2266:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    226a:	e5 e6       	ldi	r30, 0x65	; 101
    226c:	f8 e2       	ldi	r31, 0x28	; 40
    226e:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    2270:	96 e0       	ldi	r25, 0x06	; 6
    2272:	90 93 64 28 	sts	0x2864, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2276:	83 e4       	ldi	r24, 0x43	; 67
    2278:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    227a:	ed e6       	ldi	r30, 0x6D	; 109
    227c:	f8 e2       	ldi	r31, 0x28	; 40
    227e:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    2280:	90 93 6c 28 	sts	0x286C, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2284:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2286:	80 e1       	ldi	r24, 0x10	; 16
    2288:	98 e2       	ldi	r25, 0x28	; 40
    228a:	80 93 68 28 	sts	0x2868, r24
    228e:	90 93 69 28 	sts	0x2869, r25
		// Reset endpoint control management
		udd_ctrl_init();
    2292:	ab da       	rcall	.-2730   	; 0x17ea <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2294:	19 c0       	rjmp	.+50     	; 0x22c8 <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
    2296:	80 91 cb 04 	lds	r24, 0x04CB
    229a:	86 ff       	sbrs	r24, 6
    229c:	06 c0       	rjmp	.+12     	; 0x22aa <__vector_125+0x12a>
		udd_ack_suspend_event();
    229e:	80 e4       	ldi	r24, 0x40	; 64
    22a0:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	82 da       	rcall	.-2812   	; 0x17ac <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    22a8:	0f c0       	rjmp	.+30     	; 0x22c8 <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
    22aa:	80 91 cb 04 	lds	r24, 0x04CB
    22ae:	85 ff       	sbrs	r24, 5
    22b0:	0b c0       	rjmp	.+22     	; 0x22c8 <__vector_125+0x148>
		udd_ack_resume_event();
    22b2:	80 e2       	ldi	r24, 0x20	; 32
    22b4:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	78 da       	rcall	.-2832   	; 0x17ac <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    22be:	80 91 cb 04 	lds	r24, 0x04CB
    22c2:	84 ff       	sbrs	r24, 4
    22c4:	e8 cf       	rjmp	.-48     	; 0x2296 <__vector_125+0x116>
    22c6:	c6 cf       	rjmp	.-116    	; 0x2254 <__vector_125+0xd4>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    22c8:	ff 91       	pop	r31
    22ca:	ef 91       	pop	r30
    22cc:	bf 91       	pop	r27
    22ce:	af 91       	pop	r26
    22d0:	9f 91       	pop	r25
    22d2:	8f 91       	pop	r24
    22d4:	7f 91       	pop	r23
    22d6:	6f 91       	pop	r22
    22d8:	5f 91       	pop	r21
    22da:	4f 91       	pop	r20
    22dc:	3f 91       	pop	r19
    22de:	2f 91       	pop	r18
    22e0:	0f 91       	pop	r16
    22e2:	0f 90       	pop	r0
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	0f 90       	pop	r0
    22e8:	1f 90       	pop	r1
    22ea:	18 95       	reti

000022ec <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    22ec:	1f 92       	push	r1
    22ee:	0f 92       	push	r0
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	0f 92       	push	r0
    22f4:	11 24       	eor	r1, r1
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	2f 93       	push	r18
    22fc:	3f 93       	push	r19
    22fe:	4f 93       	push	r20
    2300:	5f 93       	push	r21
    2302:	6f 93       	push	r22
    2304:	7f 93       	push	r23
    2306:	8f 93       	push	r24
    2308:	9f 93       	push	r25
    230a:	af 93       	push	r26
    230c:	bf 93       	push	r27
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	ef 93       	push	r30
    2314:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2316:	80 91 cc 04 	lds	r24, 0x04CC
    231a:	81 fd       	sbrc	r24, 1
    231c:	03 c0       	rjmp	.+6      	; 0x2324 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    231e:	62 db       	rcall	.-2364   	; 0x19e4 <udd_ctrl_interrupt_tc_setup>
    2320:	81 11       	cpse	r24, r1
    2322:	b9 c0       	rjmp	.+370    	; 0x2496 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2324:	82 e0       	ldi	r24, 0x02	; 2
    2326:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    232a:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    232e:	81 95       	neg	r24
    2330:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2332:	e4 e6       	ldi	r30, 0x64	; 100
    2334:	f8 e2       	ldi	r31, 0x28	; 40
    2336:	e8 1b       	sub	r30, r24
    2338:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    233a:	20 81       	ld	r18, Z
    233c:	31 81       	ldd	r19, Z+1	; 0x01
    233e:	24 56       	subi	r18, 0x64	; 100
    2340:	38 42       	sbci	r19, 0x28	; 40
    2342:	36 95       	lsr	r19
    2344:	27 95       	ror	r18
    2346:	36 95       	lsr	r19
    2348:	27 95       	ror	r18
    234a:	36 95       	lsr	r19
    234c:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    234e:	82 2f       	mov	r24, r18
    2350:	86 95       	lsr	r24
    2352:	20 ff       	sbrs	r18, 0
    2354:	02 c0       	rjmp	.+4      	; 0x235a <__vector_126+0x6e>
    2356:	90 e8       	ldi	r25, 0x80	; 128
    2358:	01 c0       	rjmp	.+2      	; 0x235c <__vector_126+0x70>
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    235e:	e8 2f       	mov	r30, r24
    2360:	ef 70       	andi	r30, 0x0F	; 15
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	ee 0f       	add	r30, r30
    2366:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2368:	28 2f       	mov	r18, r24
    236a:	33 27       	eor	r19, r19
    236c:	27 fd       	sbrc	r18, 7
    236e:	30 95       	com	r19
    2370:	22 27       	eor	r18, r18
    2372:	33 0f       	add	r19, r19
    2374:	22 1f       	adc	r18, r18
    2376:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2378:	e2 0f       	add	r30, r18
    237a:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    237c:	ee 0f       	add	r30, r30
    237e:	ff 1f       	adc	r31, r31
    2380:	ee 0f       	add	r30, r30
    2382:	ff 1f       	adc	r31, r31
    2384:	ee 0f       	add	r30, r30
    2386:	ff 1f       	adc	r31, r31
    2388:	ec 59       	subi	r30, 0x9C	; 156
    238a:	f7 4d       	sbci	r31, 0xD7	; 215
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    238c:	90 81       	ld	r25, Z
    238e:	95 ff       	sbrs	r25, 5
    2390:	82 c0       	rjmp	.+260    	; 0x2496 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2392:	00 e2       	ldi	r16, 0x20	; 32
    2394:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2396:	81 11       	cpse	r24, r1
    2398:	79 c0       	rjmp	.+242    	; 0x248c <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    239a:	80 91 54 28 	lds	r24, 0x2854
    239e:	84 30       	cpi	r24, 0x04	; 4
    23a0:	19 f4       	brne	.+6      	; 0x23a8 <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    23a2:	6a da       	rcall	.-2860   	; 0x1878 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    23a4:	22 da       	rcall	.-3004   	; 0x17ea <udd_ctrl_init>
    23a6:	77 c0       	rjmp	.+238    	; 0x2496 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    23a8:	c0 91 66 28 	lds	r28, 0x2866
    23ac:	d0 91 67 28 	lds	r29, 0x2867

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    23b0:	80 91 4a 29 	lds	r24, 0x294A
    23b4:	90 91 4b 29 	lds	r25, 0x294B
    23b8:	00 91 50 28 	lds	r16, 0x2850
    23bc:	10 91 51 28 	lds	r17, 0x2851
    23c0:	98 01       	movw	r18, r16
    23c2:	2c 0f       	add	r18, r28
    23c4:	3d 1f       	adc	r19, r29
    23c6:	82 17       	cp	r24, r18
    23c8:	93 07       	cpc	r25, r19
    23ca:	18 f4       	brcc	.+6      	; 0x23d2 <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    23cc:	ec 01       	movw	r28, r24
    23ce:	c0 1b       	sub	r28, r16
    23d0:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    23d2:	80 91 48 29 	lds	r24, 0x2948
    23d6:	90 91 49 29 	lds	r25, 0x2949
    23da:	ae 01       	movw	r20, r28
    23dc:	60 e1       	ldi	r22, 0x10	; 16
    23de:	78 e2       	ldi	r23, 0x28	; 40
    23e0:	80 0f       	add	r24, r16
    23e2:	91 1f       	adc	r25, r17
    23e4:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    23e8:	0c 0f       	add	r16, r28
    23ea:	1d 1f       	adc	r17, r29
    23ec:	00 93 50 28 	sts	0x2850, r16
    23f0:	10 93 51 28 	sts	0x2851, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    23f4:	c0 34       	cpi	r28, 0x40	; 64
    23f6:	d1 05       	cpc	r29, r1
    23f8:	69 f4       	brne	.+26     	; 0x2414 <__vector_126+0x128>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    23fa:	80 91 52 28 	lds	r24, 0x2852
    23fe:	90 91 53 28 	lds	r25, 0x2853
    2402:	80 0f       	add	r24, r16
    2404:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2406:	20 91 46 29 	lds	r18, 0x2946
    240a:	30 91 47 29 	lds	r19, 0x2947
    240e:	82 17       	cp	r24, r18
    2410:	93 07       	cpc	r25, r19
    2412:	88 f0       	brcs	.+34     	; 0x2436 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2414:	00 93 4a 29 	sts	0x294A, r16
    2418:	10 93 4b 29 	sts	0x294B, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    241c:	e0 91 4e 29 	lds	r30, 0x294E
    2420:	f0 91 4f 29 	lds	r31, 0x294F
    2424:	30 97       	sbiw	r30, 0x00	; 0
    2426:	29 f0       	breq	.+10     	; 0x2432 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2428:	09 95       	icall
    242a:	81 11       	cpse	r24, r1
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    242e:	08 da       	rcall	.-3056   	; 0x1840 <udd_ctrl_stall_data>
    2430:	32 c0       	rjmp	.+100    	; 0x2496 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2432:	14 da       	rcall	.-3032   	; 0x185c <udd_ctrl_send_zlp_in>
    2434:	30 c0       	rjmp	.+96     	; 0x2496 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2436:	80 91 4a 29 	lds	r24, 0x294A
    243a:	90 91 4b 29 	lds	r25, 0x294B
    243e:	08 17       	cp	r16, r24
    2440:	19 07       	cpc	r17, r25
    2442:	f9 f4       	brne	.+62     	; 0x2482 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2444:	e0 91 4e 29 	lds	r30, 0x294E
    2448:	f0 91 4f 29 	lds	r31, 0x294F
    244c:	30 97       	sbiw	r30, 0x00	; 0
    244e:	11 f4       	brne	.+4      	; 0x2454 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2450:	f7 d9       	rcall	.-3090   	; 0x1840 <udd_ctrl_stall_data>
    2452:	21 c0       	rjmp	.+66     	; 0x2496 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2454:	09 95       	icall
    2456:	81 11       	cpse	r24, r1
    2458:	02 c0       	rjmp	.+4      	; 0x245e <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    245a:	f2 d9       	rcall	.-3100   	; 0x1840 <udd_ctrl_stall_data>
    245c:	1c c0       	rjmp	.+56     	; 0x2496 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    245e:	20 91 52 28 	lds	r18, 0x2852
    2462:	30 91 53 28 	lds	r19, 0x2853
    2466:	80 91 50 28 	lds	r24, 0x2850
    246a:	90 91 51 28 	lds	r25, 0x2851
    246e:	82 0f       	add	r24, r18
    2470:	93 1f       	adc	r25, r19
    2472:	80 93 52 28 	sts	0x2852, r24
    2476:	90 93 53 28 	sts	0x2853, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    247a:	10 92 50 28 	sts	0x2850, r1
    247e:	10 92 51 28 	sts	0x2851, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2482:	e4 e6       	ldi	r30, 0x64	; 100
    2484:	f8 e2       	ldi	r31, 0x28	; 40
    2486:	02 e0       	ldi	r16, 0x02	; 2
    2488:	06 93       	lac	Z, r16
    248a:	05 c0       	rjmp	.+10     	; 0x2496 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    248c:	80 38       	cpi	r24, 0x80	; 128
    248e:	11 f4       	brne	.+4      	; 0x2494 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2490:	fb d9       	rcall	.-3082   	; 0x1888 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2492:	01 c0       	rjmp	.+2      	; 0x2496 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2494:	16 db       	rcall	.-2516   	; 0x1ac2 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2496:	ff 91       	pop	r31
    2498:	ef 91       	pop	r30
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	bf 91       	pop	r27
    24a0:	af 91       	pop	r26
    24a2:	9f 91       	pop	r25
    24a4:	8f 91       	pop	r24
    24a6:	7f 91       	pop	r23
    24a8:	6f 91       	pop	r22
    24aa:	5f 91       	pop	r21
    24ac:	4f 91       	pop	r20
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	0f 90       	pop	r0
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	0f 90       	pop	r0
    24bc:	1f 90       	pop	r1
    24be:	18 95       	reti

000024c0 <sysclk_init>:
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <sysclk_init+0x6>
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <sysclk_init+0x8>
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	8f ef       	ldi	r24, 0xFF	; 255
    24ce:	80 93 70 00 	sts	0x0070, r24
    24d2:	80 93 71 00 	sts	0x0071, r24
    24d6:	80 93 72 00 	sts	0x0072, r24
    24da:	80 93 73 00 	sts	0x0073, r24
    24de:	80 93 74 00 	sts	0x0074, r24
    24e2:	80 93 75 00 	sts	0x0075, r24
    24e6:	80 93 76 00 	sts	0x0076, r24
    24ea:	6c e1       	ldi	r22, 0x1C	; 28
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	39 d1       	rcall	.+626    	; 0x2764 <nvm_read_byte>
    24f2:	8a 83       	std	Y+2, r24	; 0x02
    24f4:	6d e1       	ldi	r22, 0x1D	; 29
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	82 e0       	ldi	r24, 0x02	; 2
    24fa:	34 d1       	rcall	.+616    	; 0x2764 <nvm_read_byte>
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	9a 81       	ldd	r25, Y+2	; 0x02
    2502:	01 96       	adiw	r24, 0x01	; 1
    2504:	21 f4       	brne	.+8      	; 0x250e <sysclk_init+0x4e>
    2506:	80 e4       	ldi	r24, 0x40	; 64
    2508:	93 e2       	ldi	r25, 0x23	; 35
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	8b 83       	std	Y+3, r24	; 0x03
    2514:	9c 83       	std	Y+4, r25	; 0x04
    2516:	e0 e6       	ldi	r30, 0x60	; 96
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	82 83       	std	Z+2, r24	; 0x02
    251c:	8c 81       	ldd	r24, Y+4	; 0x04
    251e:	83 83       	std	Z+3, r24	; 0x03
    2520:	8f b7       	in	r24, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	e0 e5       	ldi	r30, 0x50	; 80
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	90 81       	ld	r25, Z
    252a:	92 60       	ori	r25, 0x02	; 2
    252c:	90 83       	st	Z, r25
    252e:	8f bf       	out	0x3f, r24	; 63
    2530:	81 81       	ldd	r24, Z+1	; 0x01
    2532:	81 ff       	sbrs	r24, 1
    2534:	fd cf       	rjmp	.-6      	; 0x2530 <sysclk_init+0x70>
    2536:	61 e0       	ldi	r22, 0x01	; 1
    2538:	80 e4       	ldi	r24, 0x40	; 64
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	1d d1       	rcall	.+570    	; 0x2778 <ccp_write_io>
    253e:	8f b7       	in	r24, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	e0 e5       	ldi	r30, 0x50	; 80
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	90 81       	ld	r25, Z
    2548:	9e 7f       	andi	r25, 0xFE	; 254
    254a:	90 83       	st	Z, r25
    254c:	8f bf       	out	0x3f, r24	; 63
    254e:	24 96       	adiw	r28, 0x04	; 4
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	08 95       	ret

0000255a <sysclk_enable_module>:
    255a:	9f b7       	in	r25, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	e8 2f       	mov	r30, r24
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	e0 59       	subi	r30, 0x90	; 144
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	60 95       	com	r22
    2568:	80 81       	ld	r24, Z
    256a:	68 23       	and	r22, r24
    256c:	60 83       	st	Z, r22
    256e:	9f bf       	out	0x3f, r25	; 63
    2570:	08 95       	ret

00002572 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    2572:	86 30       	cpi	r24, 0x06	; 6
    2574:	11 f4       	brne	.+4      	; 0x257a <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    2576:	68 e1       	ldi	r22, 0x18	; 24
    2578:	01 c0       	rjmp	.+2      	; 0x257c <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    257a:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    257c:	e0 e5       	ldi	r30, 0x50	; 80
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    2582:	81 fd       	sbrc	r24, 1
    2584:	09 c0       	rjmp	.+18     	; 0x2598 <sysclk_enable_usb+0x26>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2586:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2588:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    258a:	90 81       	ld	r25, Z
    258c:	92 60       	ori	r25, 0x02	; 2
    258e:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2590:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2592:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2594:	81 ff       	sbrs	r24, 1
    2596:	fd cf       	rjmp	.-6      	; 0x2592 <sysclk_enable_usb+0x20>
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    2598:	63 60       	ori	r22, 0x03	; 3
    259a:	84 e4       	ldi	r24, 0x44	; 68
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	ec d0       	rcall	.+472    	; 0x2778 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    25a0:	60 e4       	ldi	r22, 0x40	; 64
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	da cf       	rjmp	.-76     	; 0x255a <sysclk_enable_module>
    25a6:	08 95       	ret

000025a8 <nvm_eeprom_read_buffer>:
 * \param address   the address to where to read
 * \param buf       pointer to the data
 * \param len       the number of bytes to read
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	9b 01       	movw	r18, r22
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    25ae:	e0 ec       	ldi	r30, 0xC0	; 192
    25b0:	f1 e0       	ldi	r31, 0x01	; 1
    25b2:	67 85       	ldd	r22, Z+15	; 0x0f
    25b4:	66 23       	and	r22, r22
    25b6:	ec f3       	brlt	.-6      	; 0x25b2 <nvm_eeprom_read_buffer+0xa>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    25b8:	cc ec       	ldi	r28, 0xCC	; 204
    25ba:	d1 e0       	ldi	r29, 0x01	; 1
    25bc:	68 81       	ld	r22, Y
    25be:	68 60       	ori	r22, 0x08	; 8
    25c0:	68 83       	st	Y, r22
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    25c2:	bc 01       	movw	r22, r24
    25c4:	70 5f       	subi	r23, 0xF0	; 240
    25c6:	c9 01       	movw	r24, r18
    25c8:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <memcpy>
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    25cc:	88 81       	ld	r24, Y
    25ce:	87 7f       	andi	r24, 0xF7	; 247
    25d0:	88 83       	st	Y, r24
	eeprom_disable_mapping();
}
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	08 95       	ret

000025d8 <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    25d8:	e0 ec       	ldi	r30, 0xC0	; 192
    25da:	f1 e0       	ldi	r31, 0x01	; 1
    25dc:	87 85       	ldd	r24, Z+15	; 0x0f
    25de:	88 23       	and	r24, r24
    25e0:	ec f3       	brlt	.-6      	; 0x25dc <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    25e2:	e0 ec       	ldi	r30, 0xC0	; 192
    25e4:	f1 e0       	ldi	r31, 0x01	; 1
    25e6:	87 85       	ldd	r24, Z+15	; 0x0f
    25e8:	81 ff       	sbrs	r24, 1
    25ea:	06 c0       	rjmp	.+12     	; 0x25f8 <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    25ec:	86 e3       	ldi	r24, 0x36	; 54
    25ee:	82 87       	std	Z+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	8b ec       	ldi	r24, 0xCB	; 203
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	c0 c0       	rjmp	.+384    	; 0x2778 <ccp_write_io>
    25f8:	08 95       	ret

000025fa <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    25fa:	e0 ec       	ldi	r30, 0xC0	; 192
    25fc:	f1 e0       	ldi	r31, 0x01	; 1
    25fe:	97 85       	ldd	r25, Z+15	; 0x0f
    2600:	99 23       	and	r25, r25
    2602:	ec f3       	brlt	.-6      	; 0x25fe <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    2604:	ec ec       	ldi	r30, 0xCC	; 204
    2606:	f1 e0       	ldi	r31, 0x01	; 1
    2608:	90 81       	ld	r25, Z
    260a:	98 60       	ori	r25, 0x08	; 8
    260c:	90 83       	st	Z, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    260e:	a8 2f       	mov	r26, r24
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	b0 5f       	subi	r27, 0xF0	; 240
    2614:	6c 93       	st	X, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    2616:	80 81       	ld	r24, Z
    2618:	87 7f       	andi	r24, 0xF7	; 247
    261a:	80 83       	st	Z, r24
    261c:	08 95       	ret

0000261e <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    261e:	ff 92       	push	r15
    2620:	0f 93       	push	r16
    2622:	1f 93       	push	r17
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	18 2f       	mov	r17, r24
    262a:	f9 2e       	mov	r15, r25
    262c:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    262e:	e0 ec       	ldi	r30, 0xC0	; 192
    2630:	f1 e0       	ldi	r31, 0x01	; 1
    2632:	02 85       	ldd	r16, Z+10	; 0x0a
	nvm_eeprom_flush_buffer();
    2634:	d1 df       	rcall	.-94     	; 0x25d8 <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2636:	e0 ec       	ldi	r30, 0xC0	; 192
    2638:	f1 e0       	ldi	r31, 0x01	; 1
    263a:	27 85       	ldd	r18, Z+15	; 0x0f
    263c:	22 23       	and	r18, r18
    263e:	ec f3       	brlt	.-6      	; 0x263a <nvm_eeprom_write_byte+0x1c>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    2640:	6c 2f       	mov	r22, r28
    2642:	81 2f       	mov	r24, r17
    2644:	da df       	rcall	.-76     	; 0x25fa <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    2646:	c0 ec       	ldi	r28, 0xC0	; 192
    2648:	d1 e0       	ldi	r29, 0x01	; 1
    264a:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    264c:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    264e:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    2650:	85 e3       	ldi	r24, 0x35	; 53
    2652:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2654:	61 e0       	ldi	r22, 0x01	; 1
    2656:	8b ec       	ldi	r24, 0xCB	; 203
    2658:	91 e0       	ldi	r25, 0x01	; 1
    265a:	8e d0       	rcall	.+284    	; 0x2778 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    265c:	0a 87       	std	Y+10, r16	; 0x0a
}
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	ff 90       	pop	r15
    2668:	08 95       	ret

0000266a <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    266a:	ef 92       	push	r14
    266c:	ff 92       	push	r15
    266e:	0f 93       	push	r16
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2678:	e0 ec       	ldi	r30, 0xC0	; 192
    267a:	f1 e0       	ldi	r31, 0x01	; 1
    267c:	87 85       	ldd	r24, Z+15	; 0x0f
    267e:	88 23       	and	r24, r24
    2680:	ec f3       	brlt	.-6      	; 0x267c <nvm_eeprom_load_page_to_buffer+0x12>
    2682:	78 01       	movw	r14, r16
    2684:	80 e2       	ldi	r24, 0x20	; 32
    2686:	e8 0e       	add	r14, r24
    2688:	f1 1c       	adc	r15, r1
    268a:	e8 01       	movw	r28, r16
    268c:	8c 2f       	mov	r24, r28
    268e:	80 1b       	sub	r24, r16
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
    2690:	69 91       	ld	r22, Y+
    2692:	b3 df       	rcall	.-154    	; 0x25fa <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    2694:	ce 15       	cp	r28, r14
    2696:	df 05       	cpc	r29, r15
    2698:	c9 f7       	brne	.-14     	; 0x268c <nvm_eeprom_load_page_to_buffer+0x22>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	ff 90       	pop	r15
    26a4:	ef 90       	pop	r14
    26a6:	08 95       	ret

000026a8 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    26a8:	1f 93       	push	r17
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	e0 ec       	ldi	r30, 0xC0	; 192
    26b0:	f1 e0       	ldi	r31, 0x01	; 1
    26b2:	97 85       	ldd	r25, Z+15	; 0x0f
    26b4:	99 23       	and	r25, r25
    26b6:	ec f3       	brlt	.-6      	; 0x26b2 <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    26b8:	20 e2       	ldi	r18, 0x20	; 32
    26ba:	82 9f       	mul	r24, r18
    26bc:	c0 01       	movw	r24, r0
    26be:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    26c0:	c0 ec       	ldi	r28, 0xC0	; 192
    26c2:	d1 e0       	ldi	r29, 0x01	; 1
    26c4:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    26c6:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    26c8:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    26ca:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    26cc:	85 e3       	ldi	r24, 0x35	; 53
    26ce:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    26d0:	61 e0       	ldi	r22, 0x01	; 1
    26d2:	8b ec       	ldi	r24, 0xCB	; 203
    26d4:	91 e0       	ldi	r25, 0x01	; 1
    26d6:	50 d0       	rcall	.+160    	; 0x2778 <ccp_write_io>
	NVM.CMD = old_cmd;
    26d8:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	1f 91       	pop	r17
    26e0:	08 95       	ret

000026e2 <nvm_eeprom_erase_and_write_buffer>:
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	ec 01       	movw	r28, r24
    26f4:	7b 01       	movw	r14, r22
    26f6:	8a 01       	movw	r16, r20
	while (len) {
    26f8:	41 15       	cp	r20, r1
    26fa:	51 05       	cpc	r21, r1
    26fc:	51 f1       	breq	.+84     	; 0x2752 <nvm_eeprom_erase_and_write_buffer+0x70>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
    26fe:	ce 01       	movw	r24, r28
    2700:	8f 71       	andi	r24, 0x1F	; 31
    2702:	99 27       	eor	r25, r25
    2704:	89 2b       	or	r24, r25
    2706:	b1 f4       	brne	.+44     	; 0x2734 <nvm_eeprom_erase_and_write_buffer+0x52>
    2708:	00 32       	cpi	r16, 0x20	; 32
    270a:	11 05       	cpc	r17, r1
    270c:	98 f0       	brcs	.+38     	; 0x2734 <nvm_eeprom_erase_and_write_buffer+0x52>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
    270e:	c7 01       	movw	r24, r14
    2710:	ac df       	rcall	.-168    	; 0x266a <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
    2712:	ce 01       	movw	r24, r28
    2714:	96 95       	lsr	r25
    2716:	87 95       	ror	r24
    2718:	92 95       	swap	r25
    271a:	82 95       	swap	r24
    271c:	8f 70       	andi	r24, 0x0F	; 15
    271e:	89 27       	eor	r24, r25
    2720:	9f 70       	andi	r25, 0x0F	; 15
    2722:	89 27       	eor	r24, r25
    2724:	c1 df       	rcall	.-126    	; 0x26a8 <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
    2726:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
    2728:	80 e2       	ldi	r24, 0x20	; 32
    272a:	e8 0e       	add	r14, r24
    272c:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
    272e:	00 52       	subi	r16, 0x20	; 32
    2730:	11 09       	sbc	r17, r1
    2732:	0c c0       	rjmp	.+24     	; 0x274c <nvm_eeprom_erase_and_write_buffer+0x6a>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    2734:	6e 01       	movw	r12, r28
    2736:	ef ef       	ldi	r30, 0xFF	; 255
    2738:	ce 1a       	sub	r12, r30
    273a:	de 0a       	sbc	r13, r30
    273c:	f7 01       	movw	r30, r14
    273e:	61 91       	ld	r22, Z+
    2740:	7f 01       	movw	r14, r30
    2742:	ce 01       	movw	r24, r28
    2744:	6c df       	rcall	.-296    	; 0x261e <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
    2746:	01 50       	subi	r16, 0x01	; 1
    2748:	11 09       	sbc	r17, r1
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    274a:	e6 01       	movw	r28, r12
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
	while (len) {
    274c:	01 15       	cp	r16, r1
    274e:	11 05       	cpc	r17, r1
    2750:	b1 f6       	brne	.-84     	; 0x26fe <nvm_eeprom_erase_and_write_buffer+0x1c>
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
    2752:	df 91       	pop	r29
    2754:	cf 91       	pop	r28
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	ff 90       	pop	r15
    275c:	ef 90       	pop	r14
    275e:	df 90       	pop	r13
    2760:	cf 90       	pop	r12
    2762:	08 95       	ret

00002764 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2764:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    2768:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    276a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    276c:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    2770:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2772:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2776:	08 95       	ret

00002778 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2778:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    277a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    277c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    277e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2780:	60 83       	st	Z, r22
	ret                             // Return to caller
    2782:	08 95       	ret

00002784 <dwt_getpartid>:

    temp = dwt_read32bitoffsetreg(DIG_DIAG_ID, EVC_HPW_OFFSET); // Read half period warning events
    counters->HPW = temp & 0xFFF;
    counters->TXW = (temp >> 16) & 0xFFF;                       // Power-up warning events

}
    2784:	e0 91 98 20 	lds	r30, 0x2098
    2788:	f0 91 99 20 	lds	r31, 0x2099
    278c:	60 81       	ld	r22, Z
    278e:	71 81       	ldd	r23, Z+1	; 0x01
    2790:	82 81       	ldd	r24, Z+2	; 0x02
    2792:	93 81       	ldd	r25, Z+3	; 0x03
    2794:	08 95       	ret

00002796 <dwt_writetodevice>:
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <dwt_writetodevice+0xa>
    27a0:	1f 92       	push	r1
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	61 15       	cp	r22, r1
    27a8:	71 05       	cpc	r23, r1
    27aa:	29 f4       	brne	.+10     	; 0x27b6 <dwt_writetodevice+0x20>
    27ac:	80 68       	ori	r24, 0x80	; 128
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	14 c0       	rjmp	.+40     	; 0x27de <dwt_writetodevice+0x48>
    27b6:	80 6c       	ori	r24, 0xC0	; 192
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	60 38       	cpi	r22, 0x80	; 128
    27bc:	71 05       	cpc	r23, r1
    27be:	20 f4       	brcc	.+8      	; 0x27c8 <dwt_writetodevice+0x32>
    27c0:	6a 83       	std	Y+2, r22	; 0x02
    27c2:	82 e0       	ldi	r24, 0x02	; 2
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0b c0       	rjmp	.+22     	; 0x27de <dwt_writetodevice+0x48>
    27c8:	86 2f       	mov	r24, r22
    27ca:	80 68       	ori	r24, 0x80	; 128
    27cc:	8a 83       	std	Y+2, r24	; 0x02
    27ce:	66 0f       	add	r22, r22
    27d0:	67 2f       	mov	r22, r23
    27d2:	66 1f       	adc	r22, r22
    27d4:	77 0b       	sbc	r23, r23
    27d6:	71 95       	neg	r23
    27d8:	6b 83       	std	Y+3, r22	; 0x03
    27da:	83 e0       	ldi	r24, 0x03	; 3
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	be 01       	movw	r22, r28
    27e0:	6f 5f       	subi	r22, 0xFF	; 255
    27e2:	7f 4f       	sbci	r23, 0xFF	; 255
    27e4:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <writetospi>
    27e8:	23 96       	adiw	r28, 0x03	; 3
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	1f 91       	pop	r17
    27f4:	0f 91       	pop	r16
    27f6:	08 95       	ret

000027f8 <dwt_writetxdata>:
    27f8:	0f 93       	push	r16
    27fa:	1f 93       	push	r17
    27fc:	fa 01       	movw	r30, r20
    27fe:	9a 01       	movw	r18, r20
    2800:	28 0f       	add	r18, r24
    2802:	39 1f       	adc	r19, r25
    2804:	21 30       	cpi	r18, 0x01	; 1
    2806:	34 40       	sbci	r19, 0x04	; 4
    2808:	68 f4       	brcc	.+26     	; 0x2824 <dwt_writetxdata+0x2c>
    280a:	9c 01       	movw	r18, r24
    280c:	22 50       	subi	r18, 0x02	; 2
    280e:	31 09       	sbc	r19, r1
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	50 e0       	ldi	r21, 0x00	; 0
    2814:	8b 01       	movw	r16, r22
    2816:	bf 01       	movw	r22, r30
    2818:	89 e0       	ldi	r24, 0x09	; 9
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	bc df       	rcall	.-136    	; 0x2796 <dwt_writetodevice>
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <dwt_writetxdata+0x30>
    2824:	8f ef       	ldi	r24, 0xFF	; 255
    2826:	9f ef       	ldi	r25, 0xFF	; 255
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	08 95       	ret

0000282e <dwt_readfromdevice>:
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	cf 93       	push	r28
    2834:	df 93       	push	r29
    2836:	00 d0       	rcall	.+0      	; 0x2838 <dwt_readfromdevice+0xa>
    2838:	1f 92       	push	r1
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	61 15       	cp	r22, r1
    2840:	71 05       	cpc	r23, r1
    2842:	21 f4       	brne	.+8      	; 0x284c <dwt_readfromdevice+0x1e>
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	14 c0       	rjmp	.+40     	; 0x2874 <dwt_readfromdevice+0x46>
    284c:	80 64       	ori	r24, 0x40	; 64
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	60 38       	cpi	r22, 0x80	; 128
    2852:	71 05       	cpc	r23, r1
    2854:	20 f4       	brcc	.+8      	; 0x285e <dwt_readfromdevice+0x30>
    2856:	6a 83       	std	Y+2, r22	; 0x02
    2858:	82 e0       	ldi	r24, 0x02	; 2
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0b c0       	rjmp	.+22     	; 0x2874 <dwt_readfromdevice+0x46>
    285e:	86 2f       	mov	r24, r22
    2860:	80 68       	ori	r24, 0x80	; 128
    2862:	8a 83       	std	Y+2, r24	; 0x02
    2864:	66 0f       	add	r22, r22
    2866:	67 2f       	mov	r22, r23
    2868:	66 1f       	adc	r22, r22
    286a:	77 0b       	sbc	r23, r23
    286c:	71 95       	neg	r23
    286e:	6b 83       	std	Y+3, r22	; 0x03
    2870:	83 e0       	ldi	r24, 0x03	; 3
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	be 01       	movw	r22, r28
    2876:	6f 5f       	subi	r22, 0xFF	; 255
    2878:	7f 4f       	sbci	r23, 0xFF	; 255
    287a:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <readfromspi>
    287e:	23 96       	adiw	r28, 0x03	; 3
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	1f 91       	pop	r17
    288a:	0f 91       	pop	r16
    288c:	08 95       	ret

0000288e <dwt_readrxdata>:
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	9b 01       	movw	r18, r22
    2894:	ba 01       	movw	r22, r20
    2896:	40 e0       	ldi	r20, 0x00	; 0
    2898:	50 e0       	ldi	r21, 0x00	; 0
    289a:	8c 01       	movw	r16, r24
    289c:	81 e1       	ldi	r24, 0x11	; 17
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	c6 df       	rcall	.-116    	; 0x282e <dwt_readfromdevice>
    28a2:	1f 91       	pop	r17
    28a4:	0f 91       	pop	r16
    28a6:	08 95       	ret

000028a8 <dwt_read32bitoffsetreg>:
    28a8:	ef 92       	push	r14
    28aa:	ff 92       	push	r15
    28ac:	0f 93       	push	r16
    28ae:	1f 93       	push	r17
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	00 d0       	rcall	.+0      	; 0x28b6 <dwt_read32bitoffsetreg+0xe>
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <dwt_read32bitoffsetreg+0x10>
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	9e 01       	movw	r18, r28
    28be:	2f 5f       	subi	r18, 0xFF	; 255
    28c0:	3f 4f       	sbci	r19, 0xFF	; 255
    28c2:	89 01       	movw	r16, r18
    28c4:	24 e0       	ldi	r18, 0x04	; 4
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	50 e0       	ldi	r21, 0x00	; 0
    28cc:	b0 df       	rcall	.-160    	; 0x282e <dwt_readfromdevice>
    28ce:	fe 01       	movw	r30, r28
    28d0:	35 96       	adiw	r30, 0x05	; 5
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	cb 01       	movw	r24, r22
    28d8:	b8 2f       	mov	r27, r24
    28da:	a7 2f       	mov	r26, r23
    28dc:	96 2f       	mov	r25, r22
    28de:	88 27       	eor	r24, r24
    28e0:	22 91       	ld	r18, -Z
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	62 0f       	add	r22, r18
    28e8:	71 1d       	adc	r23, r1
    28ea:	81 1d       	adc	r24, r1
    28ec:	91 1d       	adc	r25, r1
    28ee:	e0 17       	cp	r30, r16
    28f0:	f1 07       	cpc	r31, r17
    28f2:	91 f7       	brne	.-28     	; 0x28d8 <dwt_read32bitoffsetreg+0x30>
    28f4:	24 96       	adiw	r28, 0x04	; 4
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	df 91       	pop	r29
    28fc:	cf 91       	pop	r28
    28fe:	1f 91       	pop	r17
    2900:	0f 91       	pop	r16
    2902:	ff 90       	pop	r15
    2904:	ef 90       	pop	r14
    2906:	08 95       	ret

00002908 <dwt_readdevid>:
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	70 e0       	ldi	r23, 0x00	; 0
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	cb cf       	rjmp	.-106    	; 0x28a8 <dwt_read32bitoffsetreg>
    2912:	08 95       	ret

00002914 <dwt_read16bitoffsetreg>:
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	00 d0       	rcall	.+0      	; 0x291e <dwt_read16bitoffsetreg+0xa>
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
    2922:	8e 01       	movw	r16, r28
    2924:	0f 5f       	subi	r16, 0xFF	; 255
    2926:	1f 4f       	sbci	r17, 0xFF	; 255
    2928:	22 e0       	ldi	r18, 0x02	; 2
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	7e df       	rcall	.-260    	; 0x282e <dwt_readfromdevice>
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	98 2f       	mov	r25, r24
    2938:	88 27       	eor	r24, r24
    293a:	29 81       	ldd	r18, Y+1	; 0x01
    293c:	82 0f       	add	r24, r18
    293e:	91 1d       	adc	r25, r1
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	df 91       	pop	r29
    2946:	cf 91       	pop	r28
    2948:	1f 91       	pop	r17
    294a:	0f 91       	pop	r16
    294c:	08 95       	ret

0000294e <dwt_read8bitoffsetreg>:
    294e:	0f 93       	push	r16
    2950:	1f 93       	push	r17
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	1f 92       	push	r1
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	8e 01       	movw	r16, r28
    295e:	0f 5f       	subi	r16, 0xFF	; 255
    2960:	1f 4f       	sbci	r17, 0xFF	; 255
    2962:	21 e0       	ldi	r18, 0x01	; 1
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	61 df       	rcall	.-318    	; 0x282e <dwt_readfromdevice>
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	0f 90       	pop	r0
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	08 95       	ret

0000297a <dwt_write8bitoffsetreg>:
    297a:	0f 93       	push	r16
    297c:	1f 93       	push	r17
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    2982:	1f 92       	push	r1
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	49 83       	std	Y+1, r20	; 0x01
    298a:	8e 01       	movw	r16, r28
    298c:	0f 5f       	subi	r16, 0xFF	; 255
    298e:	1f 4f       	sbci	r17, 0xFF	; 255
    2990:	21 e0       	ldi	r18, 0x01	; 1
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	fe de       	rcall	.-516    	; 0x2796 <dwt_writetodevice>
    299a:	0f 90       	pop	r0
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	1f 91       	pop	r17
    29a2:	0f 91       	pop	r16
    29a4:	08 95       	ret

000029a6 <dwt_write16bitoffsetreg>:
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <dwt_write16bitoffsetreg+0xa>
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	49 83       	std	Y+1, r20	; 0x01
    29b6:	5a 83       	std	Y+2, r21	; 0x02
    29b8:	8e 01       	movw	r16, r28
    29ba:	0f 5f       	subi	r16, 0xFF	; 255
    29bc:	1f 4f       	sbci	r17, 0xFF	; 255
    29be:	22 e0       	ldi	r18, 0x02	; 2
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	50 e0       	ldi	r21, 0x00	; 0
    29c6:	e7 de       	rcall	.-562    	; 0x2796 <dwt_writetodevice>
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	1f 91       	pop	r17
    29d2:	0f 91       	pop	r16
    29d4:	08 95       	ret

000029d6 <dwt_write32bitoffsetreg>:
    29d6:	0f 93       	push	r16
    29d8:	1f 93       	push	r17
    29da:	cf 93       	push	r28
    29dc:	df 93       	push	r29
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <dwt_write32bitoffsetreg+0xa>
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <dwt_write32bitoffsetreg+0xc>
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	29 83       	std	Y+1, r18	; 0x01
    29e8:	3a 83       	std	Y+2, r19	; 0x02
    29ea:	4b 83       	std	Y+3, r20	; 0x03
    29ec:	5c 83       	std	Y+4, r21	; 0x04
    29ee:	8e 01       	movw	r16, r28
    29f0:	0f 5f       	subi	r16, 0xFF	; 255
    29f2:	1f 4f       	sbci	r17, 0xFF	; 255
    29f4:	24 e0       	ldi	r18, 0x04	; 4
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	cc de       	rcall	.-616    	; 0x2796 <dwt_writetodevice>
    29fe:	24 96       	adiw	r28, 0x04	; 4
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	08 95       	ret

00002a0e <dwt_writetxfctrl>:
    2a0e:	cf 92       	push	r12
    2a10:	df 92       	push	r13
    2a12:	ef 92       	push	r14
    2a14:	ff 92       	push	r15
    2a16:	0f 93       	push	r16
    2a18:	1f 93       	push	r17
    2a1a:	8c 01       	movw	r16, r24
    2a1c:	ca 01       	movw	r24, r20
    2a1e:	aa 27       	eor	r26, r26
    2a20:	97 fd       	sbrc	r25, 7
    2a22:	a0 95       	com	r26
    2a24:	ba 2f       	mov	r27, r26
    2a26:	07 2e       	mov	r0, r23
    2a28:	7f e0       	ldi	r23, 0x0F	; 15
    2a2a:	88 0f       	add	r24, r24
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	aa 1f       	adc	r26, r26
    2a30:	bb 1f       	adc	r27, r27
    2a32:	7a 95       	dec	r23
    2a34:	d1 f7       	brne	.-12     	; 0x2a2a <dwt_writetxfctrl+0x1c>
    2a36:	70 2d       	mov	r23, r0
    2a38:	e0 91 98 20 	lds	r30, 0x2098
    2a3c:	f0 91 99 20 	lds	r31, 0x2099
    2a40:	c2 84       	ldd	r12, Z+10	; 0x0a
    2a42:	d3 84       	ldd	r13, Z+11	; 0x0b
    2a44:	e4 84       	ldd	r14, Z+12	; 0x0c
    2a46:	f5 84       	ldd	r15, Z+13	; 0x0d
    2a48:	8c 29       	or	r24, r12
    2a4a:	9d 29       	or	r25, r13
    2a4c:	ae 29       	or	r26, r14
    2a4e:	bf 29       	or	r27, r15
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	80 2b       	or	r24, r16
    2a56:	91 2b       	or	r25, r17
    2a58:	a2 2b       	or	r26, r18
    2a5a:	b3 2b       	or	r27, r19
    2a5c:	ab 01       	movw	r20, r22
    2a5e:	60 e0       	ldi	r22, 0x00	; 0
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	03 2e       	mov	r0, r19
    2a64:	36 e1       	ldi	r19, 0x16	; 22
    2a66:	44 0f       	add	r20, r20
    2a68:	55 1f       	adc	r21, r21
    2a6a:	66 1f       	adc	r22, r22
    2a6c:	77 1f       	adc	r23, r23
    2a6e:	3a 95       	dec	r19
    2a70:	d1 f7       	brne	.-12     	; 0x2a66 <dwt_writetxfctrl+0x58>
    2a72:	30 2d       	mov	r19, r0
    2a74:	9a 01       	movw	r18, r20
    2a76:	ab 01       	movw	r20, r22
    2a78:	28 2b       	or	r18, r24
    2a7a:	39 2b       	or	r19, r25
    2a7c:	4a 2b       	or	r20, r26
    2a7e:	5b 2b       	or	r21, r27
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	88 e0       	ldi	r24, 0x08	; 8
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	a6 df       	rcall	.-180    	; 0x29d6 <dwt_write32bitoffsetreg>
    2a8a:	1f 91       	pop	r17
    2a8c:	0f 91       	pop	r16
    2a8e:	ff 90       	pop	r15
    2a90:	ef 90       	pop	r14
    2a92:	df 90       	pop	r13
    2a94:	cf 90       	pop	r12
    2a96:	08 95       	ret

00002a98 <dwt_geteui>:
    2a98:	0f 93       	push	r16
    2a9a:	1f 93       	push	r17
    2a9c:	8c 01       	movw	r16, r24
    2a9e:	28 e0       	ldi	r18, 0x08	; 8
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e0       	ldi	r20, 0x00	; 0
    2aa4:	50 e0       	ldi	r21, 0x00	; 0
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	70 e0       	ldi	r23, 0x00	; 0
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	bf de       	rcall	.-642    	; 0x282e <dwt_readfromdevice>
    2ab0:	1f 91       	pop	r17
    2ab2:	0f 91       	pop	r16
    2ab4:	08 95       	ret

00002ab6 <_dwt_otpread>:
    2ab6:	ab 01       	movw	r20, r22
    2ab8:	64 e0       	ldi	r22, 0x04	; 4
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	8d e2       	ldi	r24, 0x2D	; 45
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	72 df       	rcall	.-284    	; 0x29a6 <dwt_write16bitoffsetreg>
    2ac2:	43 e0       	ldi	r20, 0x03	; 3
    2ac4:	66 e0       	ldi	r22, 0x06	; 6
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	8d e2       	ldi	r24, 0x2D	; 45
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	56 df       	rcall	.-340    	; 0x297a <dwt_write8bitoffsetreg>
    2ace:	40 e0       	ldi	r20, 0x00	; 0
    2ad0:	66 e0       	ldi	r22, 0x06	; 6
    2ad2:	70 e0       	ldi	r23, 0x00	; 0
    2ad4:	8d e2       	ldi	r24, 0x2D	; 45
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	50 df       	rcall	.-352    	; 0x297a <dwt_write8bitoffsetreg>
    2ada:	6a e0       	ldi	r22, 0x0A	; 10
    2adc:	70 e0       	ldi	r23, 0x00	; 0
    2ade:	8d e2       	ldi	r24, 0x2D	; 45
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	e2 ce       	rjmp	.-572    	; 0x28a8 <dwt_read32bitoffsetreg>
    2ae4:	08 95       	ret

00002ae6 <_dwt_aonarrayupload>:
    2ae6:	40 e0       	ldi	r20, 0x00	; 0
    2ae8:	62 e0       	ldi	r22, 0x02	; 2
    2aea:	70 e0       	ldi	r23, 0x00	; 0
    2aec:	8c e2       	ldi	r24, 0x2C	; 44
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	44 df       	rcall	.-376    	; 0x297a <dwt_write8bitoffsetreg>
    2af2:	42 e0       	ldi	r20, 0x02	; 2
    2af4:	62 e0       	ldi	r22, 0x02	; 2
    2af6:	70 e0       	ldi	r23, 0x00	; 0
    2af8:	8c e2       	ldi	r24, 0x2C	; 44
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	3e cf       	rjmp	.-388    	; 0x297a <dwt_write8bitoffsetreg>
    2afe:	08 95       	ret

00002b00 <_dwt_configlde>:
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	ec 01       	movw	r28, r24
    2b06:	4d e6       	ldi	r20, 0x6D	; 109
    2b08:	66 e0       	ldi	r22, 0x06	; 6
    2b0a:	78 e0       	ldi	r23, 0x08	; 8
    2b0c:	8e e2       	ldi	r24, 0x2E	; 46
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	34 df       	rcall	.-408    	; 0x297a <dwt_write8bitoffsetreg>
    2b12:	cd 2b       	or	r28, r29
    2b14:	41 f0       	breq	.+16     	; 0x2b26 <_dwt_configlde+0x26>
    2b16:	47 e0       	ldi	r20, 0x07	; 7
    2b18:	56 e0       	ldi	r21, 0x06	; 6
    2b1a:	66 e0       	ldi	r22, 0x06	; 6
    2b1c:	78 e1       	ldi	r23, 0x18	; 24
    2b1e:	8e e2       	ldi	r24, 0x2E	; 46
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	41 df       	rcall	.-382    	; 0x29a6 <dwt_write16bitoffsetreg>
    2b24:	07 c0       	rjmp	.+14     	; 0x2b34 <_dwt_configlde+0x34>
    2b26:	47 e0       	ldi	r20, 0x07	; 7
    2b28:	56 e1       	ldi	r21, 0x16	; 22
    2b2a:	66 e0       	ldi	r22, 0x06	; 6
    2b2c:	78 e1       	ldi	r23, 0x18	; 24
    2b2e:	8e e2       	ldi	r24, 0x2E	; 46
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	39 df       	rcall	.-398    	; 0x29a6 <dwt_write16bitoffsetreg>
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	08 95       	ret

00002b3a <dwt_configure>:
    2b3a:	4f 92       	push	r4
    2b3c:	5f 92       	push	r5
    2b3e:	6f 92       	push	r6
    2b40:	7f 92       	push	r7
    2b42:	af 92       	push	r10
    2b44:	bf 92       	push	r11
    2b46:	cf 92       	push	r12
    2b48:	df 92       	push	r13
    2b4a:	ef 92       	push	r14
    2b4c:	ff 92       	push	r15
    2b4e:	0f 93       	push	r16
    2b50:	1f 93       	push	r17
    2b52:	cf 93       	push	r28
    2b54:	df 93       	push	r29
    2b56:	ec 01       	movw	r28, r24
    2b58:	48 80       	ld	r4, Y
    2b5a:	59 80       	ldd	r5, Y+1	; 0x01
    2b5c:	6a 80       	ldd	r6, Y+2	; 0x02
    2b5e:	7b 80       	ldd	r7, Y+3	; 0x03
    2b60:	84 2d       	mov	r24, r4
    2b62:	ec 89       	ldd	r30, Y+20	; 0x14
    2b64:	fd 89       	ldd	r31, Y+21	; 0x15
    2b66:	ee 0f       	add	r30, r30
    2b68:	ff 1f       	adc	r31, r31
    2b6a:	e9 54       	subi	r30, 0x49	; 73
    2b6c:	fd 4d       	sbci	r31, 0xDD	; 221
    2b6e:	c0 80       	ld	r12, Z
    2b70:	d1 80       	ldd	r13, Z+1	; 0x01
    2b72:	0c 81       	ldd	r16, Y+4	; 0x04
    2b74:	01 50       	subi	r16, 0x01	; 1
    2b76:	84 30       	cpi	r24, 0x04	; 4
    2b78:	41 f0       	breq	.+16     	; 0x2b8a <dwt_configure+0x50>
    2b7a:	21 e0       	ldi	r18, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	87 30       	cpi	r24, 0x07	; 7
    2b80:	09 f0       	breq	.+2      	; 0x2b84 <dwt_configure+0x4a>
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	e2 2e       	mov	r14, r18
    2b86:	f9 2e       	mov	r15, r25
    2b88:	03 c0       	rjmp	.+6      	; 0x2b90 <dwt_configure+0x56>
    2b8a:	ee 24       	eor	r14, r14
    2b8c:	e3 94       	inc	r14
    2b8e:	f1 2c       	mov	r15, r1
    2b90:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b92:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b94:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2b96:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2b98:	89 2b       	or	r24, r25
    2b9a:	8a 2b       	or	r24, r26
    2b9c:	8b 2b       	or	r24, r27
    2b9e:	a1 f4       	brne	.+40     	; 0x2bc8 <dwt_configure+0x8e>
    2ba0:	e0 91 98 20 	lds	r30, 0x2098
    2ba4:	f0 91 99 20 	lds	r31, 0x2099
    2ba8:	80 89       	ldd	r24, Z+16	; 0x10
    2baa:	91 89       	ldd	r25, Z+17	; 0x11
    2bac:	a2 89       	ldd	r26, Z+18	; 0x12
    2bae:	b3 89       	ldd	r27, Z+19	; 0x13
    2bb0:	a0 64       	ori	r26, 0x40	; 64
    2bb2:	80 8b       	std	Z+16, r24	; 0x10
    2bb4:	91 8b       	std	Z+17, r25	; 0x11
    2bb6:	a2 8b       	std	Z+18, r26	; 0x12
    2bb8:	b3 8b       	std	Z+19, r27	; 0x13
    2bba:	d6 94       	lsr	r13
    2bbc:	c7 94       	ror	r12
    2bbe:	d6 94       	lsr	r13
    2bc0:	c7 94       	ror	r12
    2bc2:	d6 94       	lsr	r13
    2bc4:	c7 94       	ror	r12
    2bc6:	0d c0       	rjmp	.+26     	; 0x2be2 <dwt_configure+0xa8>
    2bc8:	e0 91 98 20 	lds	r30, 0x2098
    2bcc:	f0 91 99 20 	lds	r31, 0x2099
    2bd0:	80 89       	ldd	r24, Z+16	; 0x10
    2bd2:	91 89       	ldd	r25, Z+17	; 0x11
    2bd4:	a2 89       	ldd	r26, Z+18	; 0x12
    2bd6:	b3 89       	ldd	r27, Z+19	; 0x13
    2bd8:	af 7b       	andi	r26, 0xBF	; 191
    2bda:	80 8b       	std	Z+16, r24	; 0x10
    2bdc:	91 8b       	std	Z+17, r25	; 0x11
    2bde:	a2 8b       	std	Z+18, r26	; 0x12
    2be0:	b3 8b       	std	Z+19, r27	; 0x13
    2be2:	e0 91 98 20 	lds	r30, 0x2098
    2be6:	f0 91 99 20 	lds	r31, 0x2099
    2bea:	88 a1       	ldd	r24, Y+32	; 0x20
    2bec:	80 87       	std	Z+8, r24	; 0x08
    2bee:	80 89       	ldd	r24, Z+16	; 0x10
    2bf0:	91 89       	ldd	r25, Z+17	; 0x11
    2bf2:	a2 89       	ldd	r26, Z+18	; 0x12
    2bf4:	b3 89       	ldd	r27, Z+19	; 0x13
    2bf6:	ac 7f       	andi	r26, 0xFC	; 252
    2bf8:	80 8b       	std	Z+16, r24	; 0x10
    2bfa:	91 8b       	std	Z+17, r25	; 0x11
    2bfc:	a2 8b       	std	Z+18, r26	; 0x12
    2bfe:	b3 8b       	std	Z+19, r27	; 0x13
    2c00:	48 a1       	ldd	r20, Y+32	; 0x20
    2c02:	59 a1       	ldd	r21, Y+33	; 0x21
    2c04:	6a a1       	ldd	r22, Y+34	; 0x22
    2c06:	7b a1       	ldd	r23, Y+35	; 0x23
    2c08:	ba 01       	movw	r22, r20
    2c0a:	55 27       	eor	r21, r21
    2c0c:	44 27       	eor	r20, r20
    2c0e:	44 27       	eor	r20, r20
    2c10:	55 27       	eor	r21, r21
    2c12:	63 70       	andi	r22, 0x03	; 3
    2c14:	77 27       	eor	r23, r23
    2c16:	9a 01       	movw	r18, r20
    2c18:	ab 01       	movw	r20, r22
    2c1a:	28 2b       	or	r18, r24
    2c1c:	39 2b       	or	r19, r25
    2c1e:	4a 2b       	or	r20, r26
    2c20:	5b 2b       	or	r21, r27
    2c22:	20 8b       	std	Z+16, r18	; 0x10
    2c24:	31 8b       	std	Z+17, r19	; 0x11
    2c26:	42 8b       	std	Z+18, r20	; 0x12
    2c28:	53 8b       	std	Z+19, r21	; 0x13
    2c2a:	60 e0       	ldi	r22, 0x00	; 0
    2c2c:	70 e0       	ldi	r23, 0x00	; 0
    2c2e:	84 e0       	ldi	r24, 0x04	; 4
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	d1 de       	rcall	.-606    	; 0x29d6 <dwt_write32bitoffsetreg>
    2c34:	a6 01       	movw	r20, r12
    2c36:	64 e0       	ldi	r22, 0x04	; 4
    2c38:	78 e2       	ldi	r23, 0x28	; 40
    2c3a:	8e e2       	ldi	r24, 0x2E	; 46
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	b3 de       	rcall	.-666    	; 0x29a6 <dwt_write16bitoffsetreg>
    2c40:	10 e0       	ldi	r17, 0x00	; 0
    2c42:	c8 01       	movw	r24, r16
    2c44:	5d df       	rcall	.-326    	; 0x2b00 <_dwt_configlde>
    2c46:	e4 2d       	mov	r30, r4
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	e4 5a       	subi	r30, 0xA4	; 164
    2c4c:	fc 4d       	sbci	r31, 0xDC	; 220
    2c4e:	a0 80       	ld	r10, Z
    2c50:	b1 2c       	mov	r11, r1
    2c52:	65 01       	movw	r12, r10
    2c54:	cc 0c       	add	r12, r12
    2c56:	dd 1c       	adc	r13, r13
    2c58:	cc 0c       	add	r12, r12
    2c5a:	dd 1c       	adc	r13, r13
    2c5c:	f6 01       	movw	r30, r12
    2c5e:	e4 5d       	subi	r30, 0xD4	; 212
    2c60:	fc 4d       	sbci	r31, 0xDC	; 220
    2c62:	20 81       	ld	r18, Z
    2c64:	31 81       	ldd	r19, Z+1	; 0x01
    2c66:	42 81       	ldd	r20, Z+2	; 0x02
    2c68:	53 81       	ldd	r21, Z+3	; 0x03
    2c6a:	67 e0       	ldi	r22, 0x07	; 7
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	8b e2       	ldi	r24, 0x2B	; 43
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	b1 de       	rcall	.-670    	; 0x29d6 <dwt_write32bitoffsetreg>
    2c74:	f5 01       	movw	r30, r10
    2c76:	ea 5d       	subi	r30, 0xDA	; 218
    2c78:	fc 4d       	sbci	r31, 0xDC	; 220
    2c7a:	40 81       	ld	r20, Z
    2c7c:	6b e0       	ldi	r22, 0x0B	; 11
    2c7e:	70 e0       	ldi	r23, 0x00	; 0
    2c80:	8b e2       	ldi	r24, 0x2B	; 43
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	7a de       	rcall	.-780    	; 0x297a <dwt_write8bitoffsetreg>
    2c86:	f7 01       	movw	r30, r14
    2c88:	ff 27       	eor	r31, r31
    2c8a:	ec 5d       	subi	r30, 0xDC	; 220
    2c8c:	fc 4d       	sbci	r31, 0xDC	; 220
    2c8e:	40 81       	ld	r20, Z
    2c90:	6b e0       	ldi	r22, 0x0B	; 11
    2c92:	70 e0       	ldi	r23, 0x00	; 0
    2c94:	88 e2       	ldi	r24, 0x28	; 40
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	70 de       	rcall	.-800    	; 0x297a <dwt_write8bitoffsetreg>
    2c9a:	f6 01       	movw	r30, r12
    2c9c:	ec 5b       	subi	r30, 0xBC	; 188
    2c9e:	fc 4d       	sbci	r31, 0xDC	; 220
    2ca0:	20 81       	ld	r18, Z
    2ca2:	31 81       	ldd	r19, Z+1	; 0x01
    2ca4:	42 81       	ldd	r20, Z+2	; 0x02
    2ca6:	53 81       	ldd	r21, Z+3	; 0x03
    2ca8:	6c e0       	ldi	r22, 0x0C	; 12
    2caa:	70 e0       	ldi	r23, 0x00	; 0
    2cac:	88 e2       	ldi	r24, 0x28	; 40
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	92 de       	rcall	.-732    	; 0x29d6 <dwt_write32bitoffsetreg>
    2cb2:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2cb4:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2cb6:	ee 0f       	add	r30, r30
    2cb8:	ff 1f       	adc	r31, r31
    2cba:	88 8d       	ldd	r24, Y+24	; 0x18
    2cbc:	99 8d       	ldd	r25, Y+25	; 0x19
    2cbe:	e8 0f       	add	r30, r24
    2cc0:	f9 1f       	adc	r31, r25
    2cc2:	ee 0f       	add	r30, r30
    2cc4:	ff 1f       	adc	r31, r31
    2cc6:	e3 5f       	subi	r30, 0xF3	; 243
    2cc8:	fc 4d       	sbci	r31, 0xDC	; 220
    2cca:	40 81       	ld	r20, Z
    2ccc:	51 81       	ldd	r21, Z+1	; 0x01
    2cce:	62 e0       	ldi	r22, 0x02	; 2
    2cd0:	70 e0       	ldi	r23, 0x00	; 0
    2cd2:	87 e2       	ldi	r24, 0x27	; 39
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	67 de       	rcall	.-818    	; 0x29a6 <dwt_write16bitoffsetreg>
    2cd8:	f8 01       	movw	r30, r16
    2cda:	ee 0f       	add	r30, r30
    2cdc:	ff 1f       	adc	r31, r31
    2cde:	e7 5f       	subi	r30, 0xF7	; 247
    2ce0:	fc 4d       	sbci	r31, 0xDC	; 220
    2ce2:	40 81       	ld	r20, Z
    2ce4:	51 81       	ldd	r21, Z+1	; 0x01
    2ce6:	64 e0       	ldi	r22, 0x04	; 4
    2ce8:	70 e0       	ldi	r23, 0x00	; 0
    2cea:	87 e2       	ldi	r24, 0x27	; 39
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	5b de       	rcall	.-842    	; 0x29a6 <dwt_write16bitoffsetreg>
    2cf0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2cf2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2cf4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2cf6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2cf8:	89 2b       	or	r24, r25
    2cfa:	8a 2b       	or	r24, r26
    2cfc:	8b 2b       	or	r24, r27
    2cfe:	41 f4       	brne	.+16     	; 0x2d10 <dwt_configure+0x1d6>
    2d00:	44 e6       	ldi	r20, 0x64	; 100
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	66 e0       	ldi	r22, 0x06	; 6
    2d06:	70 e0       	ldi	r23, 0x00	; 0
    2d08:	87 e2       	ldi	r24, 0x27	; 39
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	4c de       	rcall	.-872    	; 0x29a6 <dwt_write16bitoffsetreg>
    2d0e:	23 c0       	rjmp	.+70     	; 0x2d56 <dwt_configure+0x21c>
    2d10:	88 85       	ldd	r24, Y+8	; 0x08
    2d12:	99 85       	ldd	r25, Y+9	; 0x09
    2d14:	aa 85       	ldd	r26, Y+10	; 0x0a
    2d16:	bb 85       	ldd	r27, Y+11	; 0x0b
    2d18:	04 97       	sbiw	r24, 0x04	; 4
    2d1a:	a1 05       	cpc	r26, r1
    2d1c:	b1 05       	cpc	r27, r1
    2d1e:	71 f4       	brne	.+28     	; 0x2d3c <dwt_configure+0x202>
    2d20:	40 e1       	ldi	r20, 0x10	; 16
    2d22:	50 e0       	ldi	r21, 0x00	; 0
    2d24:	66 e0       	ldi	r22, 0x06	; 6
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	87 e2       	ldi	r24, 0x27	; 39
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	3c de       	rcall	.-904    	; 0x29a6 <dwt_write16bitoffsetreg>
    2d2e:	40 e1       	ldi	r20, 0x10	; 16
    2d30:	66 e2       	ldi	r22, 0x26	; 38
    2d32:	70 e0       	ldi	r23, 0x00	; 0
    2d34:	87 e2       	ldi	r24, 0x27	; 39
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	20 de       	rcall	.-960    	; 0x297a <dwt_write8bitoffsetreg>
    2d3a:	0d c0       	rjmp	.+26     	; 0x2d56 <dwt_configure+0x21c>
    2d3c:	40 e2       	ldi	r20, 0x20	; 32
    2d3e:	50 e0       	ldi	r21, 0x00	; 0
    2d40:	66 e0       	ldi	r22, 0x06	; 6
    2d42:	70 e0       	ldi	r23, 0x00	; 0
    2d44:	87 e2       	ldi	r24, 0x27	; 39
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	2e de       	rcall	.-932    	; 0x29a6 <dwt_write16bitoffsetreg>
    2d4a:	48 e2       	ldi	r20, 0x28	; 40
    2d4c:	66 e2       	ldi	r22, 0x26	; 38
    2d4e:	70 e0       	ldi	r23, 0x00	; 0
    2d50:	87 e2       	ldi	r24, 0x27	; 39
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	12 de       	rcall	.-988    	; 0x297a <dwt_write8bitoffsetreg>
    2d56:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d58:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d5a:	f8 01       	movw	r30, r16
    2d5c:	ee 0f       	add	r30, r30
    2d5e:	ff 1f       	adc	r31, r31
    2d60:	ee 0f       	add	r30, r30
    2d62:	ff 1f       	adc	r31, r31
    2d64:	e8 0f       	add	r30, r24
    2d66:	f9 1f       	adc	r31, r25
    2d68:	ee 0f       	add	r30, r30
    2d6a:	ff 1f       	adc	r31, r31
    2d6c:	ee 0f       	add	r30, r30
    2d6e:	ff 1f       	adc	r31, r31
    2d70:	e7 51       	subi	r30, 0x17	; 23
    2d72:	fd 4d       	sbci	r31, 0xDD	; 221
    2d74:	20 81       	ld	r18, Z
    2d76:	31 81       	ldd	r19, Z+1	; 0x01
    2d78:	42 81       	ldd	r20, Z+2	; 0x02
    2d7a:	53 81       	ldd	r21, Z+3	; 0x03
    2d7c:	68 e0       	ldi	r22, 0x08	; 8
    2d7e:	70 e0       	ldi	r23, 0x00	; 0
    2d80:	87 e2       	ldi	r24, 0x27	; 39
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	28 de       	rcall	.-944    	; 0x29d6 <dwt_write32bitoffsetreg>
    2d86:	8c a1       	ldd	r24, Y+36	; 0x24
    2d88:	9d a1       	ldd	r25, Y+37	; 0x25
    2d8a:	ae a1       	ldd	r26, Y+38	; 0x26
    2d8c:	bf a1       	ldd	r27, Y+39	; 0x27
    2d8e:	89 2b       	or	r24, r25
    2d90:	8a 2b       	or	r24, r26
    2d92:	8b 2b       	or	r24, r27
    2d94:	41 f4       	brne	.+16     	; 0x2da6 <dwt_configure+0x26c>
    2d96:	81 e4       	ldi	r24, 0x41	; 65
    2d98:	90 e1       	ldi	r25, 0x10	; 16
    2d9a:	a0 e0       	ldi	r26, 0x00	; 0
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	8c a3       	std	Y+36, r24	; 0x24
    2da0:	9d a3       	std	Y+37, r25	; 0x25
    2da2:	ae a3       	std	Y+38, r26	; 0x26
    2da4:	bf a3       	std	Y+39, r27	; 0x27
    2da6:	4c a1       	ldd	r20, Y+36	; 0x24
    2da8:	5d a1       	ldd	r21, Y+37	; 0x25
    2daa:	60 e2       	ldi	r22, 0x20	; 32
    2dac:	70 e0       	ldi	r23, 0x00	; 0
    2dae:	87 e2       	ldi	r24, 0x27	; 39
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	f9 dd       	rcall	.-1038   	; 0x29a6 <dwt_write16bitoffsetreg>
    2db4:	20 91 1c 23 	lds	r18, 0x231C
    2db8:	30 91 1d 23 	lds	r19, 0x231D
    2dbc:	40 91 1e 23 	lds	r20, 0x231E
    2dc0:	50 91 1f 23 	lds	r21, 0x231F
    2dc4:	6c e0       	ldi	r22, 0x0C	; 12
    2dc6:	70 e0       	ldi	r23, 0x00	; 0
    2dc8:	83 e2       	ldi	r24, 0x23	; 35
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	04 de       	rcall	.-1016   	; 0x29d6 <dwt_write32bitoffsetreg>
    2dce:	f8 01       	movw	r30, r16
    2dd0:	ee 0f       	add	r30, r30
    2dd2:	ff 1f       	adc	r31, r31
    2dd4:	e0 5e       	subi	r30, 0xE0	; 224
    2dd6:	fc 4d       	sbci	r31, 0xDC	; 220
    2dd8:	40 81       	ld	r20, Z
    2dda:	51 81       	ldd	r21, Z+1	; 0x01
    2ddc:	64 e0       	ldi	r22, 0x04	; 4
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	83 e2       	ldi	r24, 0x23	; 35
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	e0 dd       	rcall	.-1088   	; 0x29a6 <dwt_write16bitoffsetreg>
    2de6:	88 8d       	ldd	r24, Y+24	; 0x18
    2de8:	99 8d       	ldd	r25, Y+25	; 0x19
    2dea:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2dec:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2dee:	89 2b       	or	r24, r25
    2df0:	8a 2b       	or	r24, r26
    2df2:	8b 2b       	or	r24, r27
    2df4:	69 f0       	breq	.+26     	; 0x2e10 <dwt_configure+0x2d6>
    2df6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2df8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2dfa:	e7 5e       	subi	r30, 0xE7	; 231
    2dfc:	fc 4d       	sbci	r31, 0xDC	; 220
    2dfe:	40 81       	ld	r20, Z
    2e00:	60 e0       	ldi	r22, 0x00	; 0
    2e02:	70 e0       	ldi	r23, 0x00	; 0
    2e04:	81 e2       	ldi	r24, 0x21	; 33
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	b8 dd       	rcall	.-1168   	; 0x297a <dwt_write8bitoffsetreg>
    2e0a:	e1 e0       	ldi	r30, 0x01	; 1
    2e0c:	83 e0       	ldi	r24, 0x03	; 3
    2e0e:	02 c0       	rjmp	.+4      	; 0x2e14 <dwt_configure+0x2da>
    2e10:	e0 e0       	ldi	r30, 0x00	; 0
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	0c 89       	ldd	r16, Y+20	; 0x14
    2e16:	1d 89       	ldd	r17, Y+21	; 0x15
    2e18:	2e 89       	ldd	r18, Y+22	; 0x16
    2e1a:	3f 89       	ldd	r19, Y+23	; 0x17
    2e1c:	0f 2e       	mov	r0, r31
    2e1e:	fb e1       	ldi	r31, 0x1B	; 27
    2e20:	00 0f       	add	r16, r16
    2e22:	11 1f       	adc	r17, r17
    2e24:	22 1f       	adc	r18, r18
    2e26:	33 1f       	adc	r19, r19
    2e28:	fa 95       	dec	r31
    2e2a:	d1 f7       	brne	.-12     	; 0x2e20 <dwt_configure+0x2e6>
    2e2c:	f0 2d       	mov	r31, r0
    2e2e:	b3 01       	movw	r22, r6
    2e30:	a2 01       	movw	r20, r4
    2e32:	4f 70       	andi	r20, 0x0F	; 15
    2e34:	55 27       	eor	r21, r21
    2e36:	66 27       	eor	r22, r22
    2e38:	77 27       	eor	r23, r23
    2e3a:	04 2b       	or	r16, r20
    2e3c:	15 2b       	or	r17, r21
    2e3e:	26 2b       	or	r18, r22
    2e40:	37 2b       	or	r19, r23
    2e42:	4c 81       	ldd	r20, Y+4	; 0x04
    2e44:	5d 81       	ldd	r21, Y+5	; 0x05
    2e46:	6e 81       	ldd	r22, Y+6	; 0x06
    2e48:	7f 81       	ldd	r23, Y+7	; 0x07
    2e4a:	03 2e       	mov	r0, r19
    2e4c:	32 e1       	ldi	r19, 0x12	; 18
    2e4e:	44 0f       	add	r20, r20
    2e50:	55 1f       	adc	r21, r21
    2e52:	66 1f       	adc	r22, r22
    2e54:	77 1f       	adc	r23, r23
    2e56:	3a 95       	dec	r19
    2e58:	d1 f7       	brne	.-12     	; 0x2e4e <dwt_configure+0x314>
    2e5a:	30 2d       	mov	r19, r0
    2e5c:	44 27       	eor	r20, r20
    2e5e:	55 27       	eor	r21, r21
    2e60:	6c 70       	andi	r22, 0x0C	; 12
    2e62:	77 27       	eor	r23, r23
    2e64:	04 2b       	or	r16, r20
    2e66:	15 2b       	or	r17, r21
    2e68:	26 2b       	or	r18, r22
    2e6a:	37 2b       	or	r19, r23
    2e6c:	48 89       	ldd	r20, Y+16	; 0x10
    2e6e:	59 89       	ldd	r21, Y+17	; 0x11
    2e70:	6a 89       	ldd	r22, Y+18	; 0x12
    2e72:	7b 89       	ldd	r23, Y+19	; 0x13
    2e74:	03 2e       	mov	r0, r19
    2e76:	36 e1       	ldi	r19, 0x16	; 22
    2e78:	44 0f       	add	r20, r20
    2e7a:	55 1f       	adc	r21, r21
    2e7c:	66 1f       	adc	r22, r22
    2e7e:	77 1f       	adc	r23, r23
    2e80:	3a 95       	dec	r19
    2e82:	d1 f7       	brne	.-12     	; 0x2e78 <dwt_configure+0x33e>
    2e84:	30 2d       	mov	r19, r0
    2e86:	44 27       	eor	r20, r20
    2e88:	55 27       	eor	r21, r21
    2e8a:	60 7c       	andi	r22, 0xC0	; 192
    2e8c:	77 70       	andi	r23, 0x07	; 7
    2e8e:	04 2b       	or	r16, r20
    2e90:	15 2b       	or	r17, r21
    2e92:	26 2b       	or	r18, r22
    2e94:	37 2b       	or	r19, r23
    2e96:	55 24       	eor	r5, r5
    2e98:	66 24       	eor	r6, r6
    2e9a:	77 24       	eor	r7, r7
    2e9c:	b3 01       	movw	r22, r6
    2e9e:	a2 01       	movw	r20, r4
    2ea0:	44 0f       	add	r20, r20
    2ea2:	55 1f       	adc	r21, r21
    2ea4:	66 1f       	adc	r22, r22
    2ea6:	77 1f       	adc	r23, r23
    2ea8:	44 0f       	add	r20, r20
    2eaa:	55 1f       	adc	r21, r21
    2eac:	66 1f       	adc	r22, r22
    2eae:	77 1f       	adc	r23, r23
    2eb0:	44 0f       	add	r20, r20
    2eb2:	55 1f       	adc	r21, r21
    2eb4:	66 1f       	adc	r22, r22
    2eb6:	77 1f       	adc	r23, r23
    2eb8:	44 0f       	add	r20, r20
    2eba:	55 1f       	adc	r21, r21
    2ebc:	66 1f       	adc	r22, r22
    2ebe:	77 1f       	adc	r23, r23
    2ec0:	55 27       	eor	r21, r21
    2ec2:	66 27       	eor	r22, r22
    2ec4:	77 27       	eor	r23, r23
    2ec6:	40 2b       	or	r20, r16
    2ec8:	51 2b       	or	r21, r17
    2eca:	62 2b       	or	r22, r18
    2ecc:	73 2b       	or	r23, r19
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	a0 e0       	ldi	r26, 0x00	; 0
    2ed2:	b0 e0       	ldi	r27, 0x00	; 0
    2ed4:	07 2e       	mov	r0, r23
    2ed6:	74 e1       	ldi	r23, 0x14	; 20
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	aa 1f       	adc	r26, r26
    2ede:	bb 1f       	adc	r27, r27
    2ee0:	7a 95       	dec	r23
    2ee2:	d1 f7       	brne	.-12     	; 0x2ed8 <dwt_configure+0x39e>
    2ee4:	70 2d       	mov	r23, r0
    2ee6:	84 2b       	or	r24, r20
    2ee8:	95 2b       	or	r25, r21
    2eea:	a6 2b       	or	r26, r22
    2eec:	b7 2b       	or	r27, r23
    2eee:	4e 2e       	mov	r4, r30
    2ef0:	51 2c       	mov	r5, r1
    2ef2:	61 2c       	mov	r6, r1
    2ef4:	71 2c       	mov	r7, r1
    2ef6:	03 2e       	mov	r0, r19
    2ef8:	31 e1       	ldi	r19, 0x11	; 17
    2efa:	44 0c       	add	r4, r4
    2efc:	55 1c       	adc	r5, r5
    2efe:	66 1c       	adc	r6, r6
    2f00:	77 1c       	adc	r7, r7
    2f02:	3a 95       	dec	r19
    2f04:	d1 f7       	brne	.-12     	; 0x2efa <dwt_configure+0x3c0>
    2f06:	30 2d       	mov	r19, r0
    2f08:	a3 01       	movw	r20, r6
    2f0a:	92 01       	movw	r18, r4
    2f0c:	28 2b       	or	r18, r24
    2f0e:	39 2b       	or	r19, r25
    2f10:	4a 2b       	or	r20, r26
    2f12:	5b 2b       	or	r21, r27
    2f14:	60 e0       	ldi	r22, 0x00	; 0
    2f16:	70 e0       	ldi	r23, 0x00	; 0
    2f18:	8f e1       	ldi	r24, 0x1F	; 31
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	5c dd       	rcall	.-1352   	; 0x29d6 <dwt_write32bitoffsetreg>
    2f1e:	4c 81       	ldd	r20, Y+4	; 0x04
    2f20:	5d 81       	ldd	r21, Y+5	; 0x05
    2f22:	6e 81       	ldd	r22, Y+6	; 0x06
    2f24:	7f 81       	ldd	r23, Y+7	; 0x07
    2f26:	88 85       	ldd	r24, Y+8	; 0x08
    2f28:	99 85       	ldd	r25, Y+9	; 0x09
    2f2a:	aa 85       	ldd	r26, Y+10	; 0x0a
    2f2c:	bb 85       	ldd	r27, Y+11	; 0x0b
    2f2e:	84 2b       	or	r24, r20
    2f30:	95 2b       	or	r25, r21
    2f32:	a6 2b       	or	r26, r22
    2f34:	b7 2b       	or	r27, r23
    2f36:	bc 01       	movw	r22, r24
    2f38:	55 27       	eor	r21, r21
    2f3a:	44 27       	eor	r20, r20
    2f3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f3e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f40:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2f42:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2f44:	07 2e       	mov	r0, r23
    2f46:	7d e0       	ldi	r23, 0x0D	; 13
    2f48:	88 0f       	add	r24, r24
    2f4a:	99 1f       	adc	r25, r25
    2f4c:	aa 1f       	adc	r26, r26
    2f4e:	bb 1f       	adc	r27, r27
    2f50:	7a 95       	dec	r23
    2f52:	d1 f7       	brne	.-12     	; 0x2f48 <dwt_configure+0x40e>
    2f54:	70 2d       	mov	r23, r0
    2f56:	9a 01       	movw	r18, r20
    2f58:	ab 01       	movw	r20, r22
    2f5a:	28 2b       	or	r18, r24
    2f5c:	39 2b       	or	r19, r25
    2f5e:	4a 2b       	or	r20, r26
    2f60:	5b 2b       	or	r21, r27
    2f62:	e0 91 98 20 	lds	r30, 0x2098
    2f66:	f0 91 99 20 	lds	r31, 0x2099
    2f6a:	22 87       	std	Z+10, r18	; 0x0a
    2f6c:	33 87       	std	Z+11, r19	; 0x0b
    2f6e:	44 87       	std	Z+12, r20	; 0x0c
    2f70:	55 87       	std	Z+13, r21	; 0x0d
    2f72:	60 e0       	ldi	r22, 0x00	; 0
    2f74:	70 e0       	ldi	r23, 0x00	; 0
    2f76:	88 e0       	ldi	r24, 0x08	; 8
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	2d dd       	rcall	.-1446   	; 0x29d6 <dwt_write32bitoffsetreg>
    2f7c:	42 e4       	ldi	r20, 0x42	; 66
    2f7e:	60 e0       	ldi	r22, 0x00	; 0
    2f80:	70 e0       	ldi	r23, 0x00	; 0
    2f82:	8d e0       	ldi	r24, 0x0D	; 13
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	f9 dc       	rcall	.-1550   	; 0x297a <dwt_write8bitoffsetreg>
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	1f 91       	pop	r17
    2f8e:	0f 91       	pop	r16
    2f90:	ff 90       	pop	r15
    2f92:	ef 90       	pop	r14
    2f94:	df 90       	pop	r13
    2f96:	cf 90       	pop	r12
    2f98:	bf 90       	pop	r11
    2f9a:	af 90       	pop	r10
    2f9c:	7f 90       	pop	r7
    2f9e:	6f 90       	pop	r6
    2fa0:	5f 90       	pop	r5
    2fa2:	4f 90       	pop	r4
    2fa4:	08 95       	ret

00002fa6 <dwt_setrxaftertxdelay>:
    2fa6:	cf 92       	push	r12
    2fa8:	df 92       	push	r13
    2faa:	ef 92       	push	r14
    2fac:	ff 92       	push	r15
    2fae:	6b 01       	movw	r12, r22
    2fb0:	7c 01       	movw	r14, r24
    2fb2:	60 e0       	ldi	r22, 0x00	; 0
    2fb4:	70 e0       	ldi	r23, 0x00	; 0
    2fb6:	8a e1       	ldi	r24, 0x1A	; 26
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	76 dc       	rcall	.-1812   	; 0x28a8 <dwt_read32bitoffsetreg>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	88 27       	eor	r24, r24
    2fc2:	99 27       	eor	r25, r25
    2fc4:	a0 7f       	andi	r26, 0xF0	; 240
    2fc6:	2f e0       	ldi	r18, 0x0F	; 15
    2fc8:	e2 22       	and	r14, r18
    2fca:	ff 24       	eor	r15, r15
    2fcc:	9c 01       	movw	r18, r24
    2fce:	ad 01       	movw	r20, r26
    2fd0:	2c 29       	or	r18, r12
    2fd2:	3d 29       	or	r19, r13
    2fd4:	4e 29       	or	r20, r14
    2fd6:	5f 29       	or	r21, r15
    2fd8:	60 e0       	ldi	r22, 0x00	; 0
    2fda:	70 e0       	ldi	r23, 0x00	; 0
    2fdc:	8a e1       	ldi	r24, 0x1A	; 26
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	fa dc       	rcall	.-1548   	; 0x29d6 <dwt_write32bitoffsetreg>
    2fe2:	ff 90       	pop	r15
    2fe4:	ef 90       	pop	r14
    2fe6:	df 90       	pop	r13
    2fe8:	cf 90       	pop	r12
    2fea:	08 95       	ret

00002fec <dwt_setcallbacks>:
    2fec:	e0 91 98 20 	lds	r30, 0x2098
    2ff0:	f0 91 99 20 	lds	r31, 0x2099
    2ff4:	80 a3       	std	Z+32, r24	; 0x20
    2ff6:	91 a3       	std	Z+33, r25	; 0x21
    2ff8:	62 a3       	std	Z+34, r22	; 0x22
    2ffa:	73 a3       	std	Z+35, r23	; 0x23
    2ffc:	44 a3       	std	Z+36, r20	; 0x24
    2ffe:	55 a3       	std	Z+37, r21	; 0x25
    3000:	26 a3       	std	Z+38, r18	; 0x26
    3002:	37 a3       	std	Z+39, r19	; 0x27
    3004:	08 95       	ret

00003006 <dwt_setleds>:
    3006:	cf 93       	push	r28
    3008:	c8 2f       	mov	r28, r24
    300a:	80 ff       	sbrs	r24, 0
    300c:	20 c0       	rjmp	.+64     	; 0x304e <dwt_setleds+0x48>
    300e:	60 e0       	ldi	r22, 0x00	; 0
    3010:	70 e0       	ldi	r23, 0x00	; 0
    3012:	86 e2       	ldi	r24, 0x26	; 38
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	48 dc       	rcall	.-1904   	; 0x28a8 <dwt_read32bitoffsetreg>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	93 7c       	andi	r25, 0xC3	; 195
    301e:	9c 01       	movw	r18, r24
    3020:	ad 01       	movw	r20, r26
    3022:	34 61       	ori	r19, 0x14	; 20
    3024:	60 e0       	ldi	r22, 0x00	; 0
    3026:	70 e0       	ldi	r23, 0x00	; 0
    3028:	86 e2       	ldi	r24, 0x26	; 38
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	d4 dc       	rcall	.-1624   	; 0x29d6 <dwt_write32bitoffsetreg>
    302e:	60 e0       	ldi	r22, 0x00	; 0
    3030:	70 e0       	ldi	r23, 0x00	; 0
    3032:	86 e3       	ldi	r24, 0x36	; 54
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	38 dc       	rcall	.-1936   	; 0x28a8 <dwt_read32bitoffsetreg>
    3038:	9b 01       	movw	r18, r22
    303a:	ac 01       	movw	r20, r24
    303c:	44 68       	ori	r20, 0x84	; 132
    303e:	60 e0       	ldi	r22, 0x00	; 0
    3040:	70 e0       	ldi	r23, 0x00	; 0
    3042:	86 e3       	ldi	r24, 0x36	; 54
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	c7 dc       	rcall	.-1650   	; 0x29d6 <dwt_write32bitoffsetreg>
    3048:	c1 fd       	sbrc	r28, 1
    304a:	19 c0       	rjmp	.+50     	; 0x307e <dwt_setleds+0x78>
    304c:	0e c0       	rjmp	.+28     	; 0x306a <dwt_setleds+0x64>
    304e:	60 e0       	ldi	r22, 0x00	; 0
    3050:	70 e0       	ldi	r23, 0x00	; 0
    3052:	86 e2       	ldi	r24, 0x26	; 38
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	28 dc       	rcall	.-1968   	; 0x28a8 <dwt_read32bitoffsetreg>
    3058:	9b 01       	movw	r18, r22
    305a:	ac 01       	movw	r20, r24
    305c:	33 7c       	andi	r19, 0xC3	; 195
    305e:	60 e0       	ldi	r22, 0x00	; 0
    3060:	70 e0       	ldi	r23, 0x00	; 0
    3062:	86 e2       	ldi	r24, 0x26	; 38
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	b7 dc       	rcall	.-1682   	; 0x29d6 <dwt_write32bitoffsetreg>
    3068:	1c c0       	rjmp	.+56     	; 0x30a2 <dwt_setleds+0x9c>
    306a:	20 e1       	ldi	r18, 0x10	; 16
    306c:	31 e0       	ldi	r19, 0x01	; 1
    306e:	40 e0       	ldi	r20, 0x00	; 0
    3070:	50 e0       	ldi	r21, 0x00	; 0
    3072:	68 e2       	ldi	r22, 0x28	; 40
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	86 e3       	ldi	r24, 0x36	; 54
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	ad dc       	rcall	.-1702   	; 0x29d6 <dwt_write32bitoffsetreg>
    307c:	12 c0       	rjmp	.+36     	; 0x30a2 <dwt_setleds+0x9c>
    307e:	20 e1       	ldi	r18, 0x10	; 16
    3080:	31 e0       	ldi	r19, 0x01	; 1
    3082:	4f e0       	ldi	r20, 0x0F	; 15
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	68 e2       	ldi	r22, 0x28	; 40
    3088:	70 e0       	ldi	r23, 0x00	; 0
    308a:	86 e3       	ldi	r24, 0x36	; 54
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	a3 dc       	rcall	.-1722   	; 0x29d6 <dwt_write32bitoffsetreg>
    3090:	20 e1       	ldi	r18, 0x10	; 16
    3092:	31 e0       	ldi	r19, 0x01	; 1
    3094:	40 e0       	ldi	r20, 0x00	; 0
    3096:	50 e0       	ldi	r21, 0x00	; 0
    3098:	68 e2       	ldi	r22, 0x28	; 40
    309a:	70 e0       	ldi	r23, 0x00	; 0
    309c:	86 e3       	ldi	r24, 0x36	; 54
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	9a dc       	rcall	.-1740   	; 0x29d6 <dwt_write32bitoffsetreg>
    30a2:	cf 91       	pop	r28
    30a4:	08 95       	ret

000030a6 <_dwt_enableclocks>:
    30a6:	ef 92       	push	r14
    30a8:	ff 92       	push	r15
    30aa:	0f 93       	push	r16
    30ac:	1f 93       	push	r17
    30ae:	cf 93       	push	r28
    30b0:	df 93       	push	r29
    30b2:	00 d0       	rcall	.+0      	; 0x30b4 <_dwt_enableclocks+0xe>
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	7c 01       	movw	r14, r24
    30ba:	8e 01       	movw	r16, r28
    30bc:	0f 5f       	subi	r16, 0xFF	; 255
    30be:	1f 4f       	sbci	r17, 0xFF	; 255
    30c0:	22 e0       	ldi	r18, 0x02	; 2
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e0       	ldi	r20, 0x00	; 0
    30c6:	50 e0       	ldi	r21, 0x00	; 0
    30c8:	60 e0       	ldi	r22, 0x00	; 0
    30ca:	70 e0       	ldi	r23, 0x00	; 0
    30cc:	86 e3       	ldi	r24, 0x36	; 54
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	ae db       	rcall	.-2212   	; 0x282e <dwt_readfromdevice>
    30d2:	8f e0       	ldi	r24, 0x0F	; 15
    30d4:	e8 16       	cp	r14, r24
    30d6:	f1 04       	cpc	r15, r1
    30d8:	a0 f5       	brcc	.+104    	; 0x3142 <_dwt_enableclocks+0x9c>
    30da:	f7 01       	movw	r30, r14
    30dc:	eb 5f       	subi	r30, 0xFB	; 251
    30de:	fe 4f       	sbci	r31, 0xFE	; 254
    30e0:	0c 94 78 25 	jmp	0x4af0	; 0x4af0 <__tablejump2__>
    30e4:	19 82       	std	Y+1, r1	; 0x01
    30e6:	8a 81       	ldd	r24, Y+2	; 0x02
    30e8:	8e 7f       	andi	r24, 0xFE	; 254
    30ea:	8a 83       	std	Y+2, r24	; 0x02
    30ec:	2a c0       	rjmp	.+84     	; 0x3142 <_dwt_enableclocks+0x9c>
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	8c 7f       	andi	r24, 0xFC	; 252
    30f2:	81 60       	ori	r24, 0x01	; 1
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	25 c0       	rjmp	.+74     	; 0x3142 <_dwt_enableclocks+0x9c>
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
    30fa:	8c 7f       	andi	r24, 0xFC	; 252
    30fc:	82 60       	ori	r24, 0x02	; 2
    30fe:	89 83       	std	Y+1, r24	; 0x01
    3100:	20 c0       	rjmp	.+64     	; 0x3142 <_dwt_enableclocks+0x9c>
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	83 7b       	andi	r24, 0xB3	; 179
    3106:	88 64       	ori	r24, 0x48	; 72
    3108:	89 83       	std	Y+1, r24	; 0x01
    310a:	8a 81       	ldd	r24, Y+2	; 0x02
    310c:	80 68       	ori	r24, 0x80	; 128
    310e:	8a 83       	std	Y+2, r24	; 0x02
    3110:	18 c0       	rjmp	.+48     	; 0x3142 <_dwt_enableclocks+0x9c>
    3112:	89 81       	ldd	r24, Y+1	; 0x01
    3114:	83 7b       	andi	r24, 0xB3	; 179
    3116:	89 83       	std	Y+1, r24	; 0x01
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	8f 77       	andi	r24, 0x7F	; 127
    311c:	8a 83       	std	Y+2, r24	; 0x02
    311e:	11 c0       	rjmp	.+34     	; 0x3142 <_dwt_enableclocks+0x9c>
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	82 60       	ori	r24, 0x02	; 2
    3124:	8a 83       	std	Y+2, r24	; 0x02
    3126:	0d c0       	rjmp	.+26     	; 0x3142 <_dwt_enableclocks+0x9c>
    3128:	8a 81       	ldd	r24, Y+2	; 0x02
    312a:	8d 7f       	andi	r24, 0xFD	; 253
    312c:	8a 83       	std	Y+2, r24	; 0x02
    312e:	09 c0       	rjmp	.+18     	; 0x3142 <_dwt_enableclocks+0x9c>
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	8f 7c       	andi	r24, 0xCF	; 207
    3134:	80 62       	ori	r24, 0x20	; 32
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	04 c0       	rjmp	.+8      	; 0x3142 <_dwt_enableclocks+0x9c>
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	89 83       	std	Y+1, r24	; 0x01
    313e:	83 e0       	ldi	r24, 0x03	; 3
    3140:	8a 83       	std	Y+2, r24	; 0x02
    3142:	8e 01       	movw	r16, r28
    3144:	0f 5f       	subi	r16, 0xFF	; 255
    3146:	1f 4f       	sbci	r17, 0xFF	; 255
    3148:	21 e0       	ldi	r18, 0x01	; 1
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e0       	ldi	r20, 0x00	; 0
    314e:	50 e0       	ldi	r21, 0x00	; 0
    3150:	60 e0       	ldi	r22, 0x00	; 0
    3152:	70 e0       	ldi	r23, 0x00	; 0
    3154:	86 e3       	ldi	r24, 0x36	; 54
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	1e db       	rcall	.-2500   	; 0x2796 <dwt_writetodevice>
    315a:	0f 5f       	subi	r16, 0xFF	; 255
    315c:	1f 4f       	sbci	r17, 0xFF	; 255
    315e:	21 e0       	ldi	r18, 0x01	; 1
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	50 e0       	ldi	r21, 0x00	; 0
    3166:	61 e0       	ldi	r22, 0x01	; 1
    3168:	70 e0       	ldi	r23, 0x00	; 0
    316a:	86 e3       	ldi	r24, 0x36	; 54
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	13 db       	rcall	.-2522   	; 0x2796 <dwt_writetodevice>
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	df 91       	pop	r29
    3176:	cf 91       	pop	r28
    3178:	1f 91       	pop	r17
    317a:	0f 91       	pop	r16
    317c:	ff 90       	pop	r15
    317e:	ef 90       	pop	r14
    3180:	08 95       	ret

00003182 <_dwt_loaducodefromrom>:
    3182:	8e e0       	ldi	r24, 0x0E	; 14
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	8f df       	rcall	.-226    	; 0x30a6 <_dwt_enableclocks>
    3188:	40 e0       	ldi	r20, 0x00	; 0
    318a:	50 e8       	ldi	r21, 0x80	; 128
    318c:	66 e0       	ldi	r22, 0x06	; 6
    318e:	70 e0       	ldi	r23, 0x00	; 0
    3190:	8d e2       	ldi	r24, 0x2D	; 45
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	08 dc       	rcall	.-2032   	; 0x29a6 <dwt_write16bitoffsetreg>
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	85 d5       	rcall	.+2826   	; 0x3ca6 <deca_sleep>
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	82 cf       	rjmp	.-252    	; 0x30a6 <_dwt_enableclocks>
    31a2:	08 95       	ret

000031a4 <_dwt_disablesequencing>:
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	7e df       	rcall	.-260    	; 0x30a6 <_dwt_enableclocks>
    31aa:	40 e0       	ldi	r20, 0x00	; 0
    31ac:	50 e0       	ldi	r21, 0x00	; 0
    31ae:	64 e0       	ldi	r22, 0x04	; 4
    31b0:	70 e0       	ldi	r23, 0x00	; 0
    31b2:	86 e3       	ldi	r24, 0x36	; 54
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	f7 cb       	rjmp	.-2066   	; 0x29a6 <dwt_write16bitoffsetreg>
    31b8:	08 95       	ret

000031ba <dwt_starttx>:
    31ba:	cf 93       	push	r28
    31bc:	c8 2f       	mov	r28, r24
    31be:	81 ff       	sbrs	r24, 1
    31c0:	0e c0       	rjmp	.+28     	; 0x31de <dwt_starttx+0x24>
    31c2:	40 e8       	ldi	r20, 0x80	; 128
    31c4:	60 e0       	ldi	r22, 0x00	; 0
    31c6:	70 e0       	ldi	r23, 0x00	; 0
    31c8:	8d e0       	ldi	r24, 0x0D	; 13
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	d6 db       	rcall	.-2132   	; 0x297a <dwt_write8bitoffsetreg>
    31ce:	e0 91 98 20 	lds	r30, 0x2098
    31d2:	f0 91 99 20 	lds	r31, 0x2099
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	86 8b       	std	Z+22, r24	; 0x16
    31da:	40 e8       	ldi	r20, 0x80	; 128
    31dc:	01 c0       	rjmp	.+2      	; 0x31e0 <dwt_starttx+0x26>
    31de:	40 e0       	ldi	r20, 0x00	; 0
    31e0:	c0 ff       	sbrs	r28, 0
    31e2:	1d c0       	rjmp	.+58     	; 0x321e <dwt_starttx+0x64>
    31e4:	46 60       	ori	r20, 0x06	; 6
    31e6:	60 e0       	ldi	r22, 0x00	; 0
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	8d e0       	ldi	r24, 0x0D	; 13
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	c5 db       	rcall	.-2166   	; 0x297a <dwt_write8bitoffsetreg>
    31f0:	63 e0       	ldi	r22, 0x03	; 3
    31f2:	70 e0       	ldi	r23, 0x00	; 0
    31f4:	8f e0       	ldi	r24, 0x0F	; 15
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	8d db       	rcall	.-2278   	; 0x2914 <dwt_read16bitoffsetreg>
    31fa:	88 70       	andi	r24, 0x08	; 8
    31fc:	94 70       	andi	r25, 0x04	; 4
    31fe:	89 2b       	or	r24, r25
    3200:	b9 f0       	breq	.+46     	; 0x3230 <dwt_starttx+0x76>
    3202:	40 e4       	ldi	r20, 0x40	; 64
    3204:	60 e0       	ldi	r22, 0x00	; 0
    3206:	70 e0       	ldi	r23, 0x00	; 0
    3208:	8d e0       	ldi	r24, 0x0D	; 13
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	b6 db       	rcall	.-2196   	; 0x297a <dwt_write8bitoffsetreg>
    320e:	e0 91 98 20 	lds	r30, 0x2098
    3212:	f0 91 99 20 	lds	r31, 0x2099
    3216:	16 8a       	std	Z+22, r1	; 0x16
    3218:	8f ef       	ldi	r24, 0xFF	; 255
    321a:	9f ef       	ldi	r25, 0xFF	; 255
    321c:	0b c0       	rjmp	.+22     	; 0x3234 <dwt_starttx+0x7a>
    321e:	42 60       	ori	r20, 0x02	; 2
    3220:	60 e0       	ldi	r22, 0x00	; 0
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	8d e0       	ldi	r24, 0x0D	; 13
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	a8 db       	rcall	.-2224   	; 0x297a <dwt_write8bitoffsetreg>
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	02 c0       	rjmp	.+4      	; 0x3234 <dwt_starttx+0x7a>
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	cf 91       	pop	r28
    3236:	08 95       	ret

00003238 <dwt_syncrxbufptrs>:
    3238:	63 e0       	ldi	r22, 0x03	; 3
    323a:	70 e0       	ldi	r23, 0x00	; 0
    323c:	8f e0       	ldi	r24, 0x0F	; 15
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	86 db       	rcall	.-2292   	; 0x294e <dwt_read8bitoffsetreg>
    3242:	48 2f       	mov	r20, r24
    3244:	40 78       	andi	r20, 0x80	; 128
    3246:	50 e0       	ldi	r21, 0x00	; 0
    3248:	60 e0       	ldi	r22, 0x00	; 0
    324a:	70 e0       	ldi	r23, 0x00	; 0
    324c:	80 74       	andi	r24, 0x40	; 64
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	a0 e0       	ldi	r26, 0x00	; 0
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	88 0f       	add	r24, r24
    3256:	99 1f       	adc	r25, r25
    3258:	aa 1f       	adc	r26, r26
    325a:	bb 1f       	adc	r27, r27
    325c:	48 17       	cp	r20, r24
    325e:	59 07       	cpc	r21, r25
    3260:	6a 07       	cpc	r22, r26
    3262:	7b 07       	cpc	r23, r27
    3264:	31 f0       	breq	.+12     	; 0x3272 <dwt_syncrxbufptrs+0x3a>
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	63 e0       	ldi	r22, 0x03	; 3
    326a:	70 e0       	ldi	r23, 0x00	; 0
    326c:	8d e0       	ldi	r24, 0x0D	; 13
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	84 cb       	rjmp	.-2296   	; 0x297a <dwt_write8bitoffsetreg>
    3272:	08 95       	ret

00003274 <dwt_forcetrxoff>:
    3274:	cf 92       	push	r12
    3276:	df 92       	push	r13
    3278:	ef 92       	push	r14
    327a:	ff 92       	push	r15
    327c:	cf 93       	push	r28
    327e:	df 93       	push	r29
    3280:	60 e0       	ldi	r22, 0x00	; 0
    3282:	70 e0       	ldi	r23, 0x00	; 0
    3284:	8e e0       	ldi	r24, 0x0E	; 14
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	0f db       	rcall	.-2530   	; 0x28a8 <dwt_read32bitoffsetreg>
    328a:	6b 01       	movw	r12, r22
    328c:	7c 01       	movw	r14, r24
    328e:	84 d2       	rcall	.+1288   	; 0x3798 <decamutexon>
    3290:	ec 01       	movw	r28, r24
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	a9 01       	movw	r20, r18
    3298:	60 e0       	ldi	r22, 0x00	; 0
    329a:	70 e0       	ldi	r23, 0x00	; 0
    329c:	8e e0       	ldi	r24, 0x0E	; 14
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	9a db       	rcall	.-2252   	; 0x29d6 <dwt_write32bitoffsetreg>
    32a2:	40 e4       	ldi	r20, 0x40	; 64
    32a4:	60 e0       	ldi	r22, 0x00	; 0
    32a6:	70 e0       	ldi	r23, 0x00	; 0
    32a8:	8d e0       	ldi	r24, 0x0D	; 13
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	66 db       	rcall	.-2356   	; 0x297a <dwt_write8bitoffsetreg>
    32ae:	28 ef       	ldi	r18, 0xF8	; 248
    32b0:	3f ef       	ldi	r19, 0xFF	; 255
    32b2:	47 e2       	ldi	r20, 0x27	; 39
    32b4:	54 e2       	ldi	r21, 0x24	; 36
    32b6:	60 e0       	ldi	r22, 0x00	; 0
    32b8:	70 e0       	ldi	r23, 0x00	; 0
    32ba:	8f e0       	ldi	r24, 0x0F	; 15
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	8b db       	rcall	.-2282   	; 0x29d6 <dwt_write32bitoffsetreg>
    32c0:	bb df       	rcall	.-138    	; 0x3238 <dwt_syncrxbufptrs>
    32c2:	a7 01       	movw	r20, r14
    32c4:	96 01       	movw	r18, r12
    32c6:	60 e0       	ldi	r22, 0x00	; 0
    32c8:	70 e0       	ldi	r23, 0x00	; 0
    32ca:	8e e0       	ldi	r24, 0x0E	; 14
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	83 db       	rcall	.-2298   	; 0x29d6 <dwt_write32bitoffsetreg>
    32d0:	ce 01       	movw	r24, r28
    32d2:	66 d2       	rcall	.+1228   	; 0x37a0 <decamutexoff>
    32d4:	e0 91 98 20 	lds	r30, 0x2098
    32d8:	f0 91 99 20 	lds	r31, 0x2099
    32dc:	16 8a       	std	Z+22, r1	; 0x16
    32de:	df 91       	pop	r29
    32e0:	cf 91       	pop	r28
    32e2:	ff 90       	pop	r15
    32e4:	ef 90       	pop	r14
    32e6:	df 90       	pop	r13
    32e8:	cf 90       	pop	r12
    32ea:	08 95       	ret

000032ec <dwt_setrxtimeout>:
    32ec:	0f 93       	push	r16
    32ee:	1f 93       	push	r17
    32f0:	cf 93       	push	r28
    32f2:	8c 01       	movw	r16, r24
    32f4:	63 e0       	ldi	r22, 0x03	; 3
    32f6:	70 e0       	ldi	r23, 0x00	; 0
    32f8:	84 e0       	ldi	r24, 0x04	; 4
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	28 db       	rcall	.-2480   	; 0x294e <dwt_read8bitoffsetreg>
    32fe:	c8 2f       	mov	r28, r24
    3300:	01 15       	cp	r16, r1
    3302:	11 05       	cpc	r17, r1
    3304:	d9 f0       	breq	.+54     	; 0x333c <dwt_setrxtimeout+0x50>
    3306:	a8 01       	movw	r20, r16
    3308:	60 e0       	ldi	r22, 0x00	; 0
    330a:	70 e0       	ldi	r23, 0x00	; 0
    330c:	8c e0       	ldi	r24, 0x0C	; 12
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	4a db       	rcall	.-2412   	; 0x29a6 <dwt_write16bitoffsetreg>
    3312:	e0 91 98 20 	lds	r30, 0x2098
    3316:	f0 91 99 20 	lds	r31, 0x2099
    331a:	00 89       	ldd	r16, Z+16	; 0x10
    331c:	11 89       	ldd	r17, Z+17	; 0x11
    331e:	22 89       	ldd	r18, Z+18	; 0x12
    3320:	33 89       	ldd	r19, Z+19	; 0x13
    3322:	30 61       	ori	r19, 0x10	; 16
    3324:	00 8b       	std	Z+16, r16	; 0x10
    3326:	11 8b       	std	Z+17, r17	; 0x11
    3328:	22 8b       	std	Z+18, r18	; 0x12
    332a:	33 8b       	std	Z+19, r19	; 0x13
    332c:	4c 2f       	mov	r20, r28
    332e:	40 61       	ori	r20, 0x10	; 16
    3330:	63 e0       	ldi	r22, 0x03	; 3
    3332:	70 e0       	ldi	r23, 0x00	; 0
    3334:	84 e0       	ldi	r24, 0x04	; 4
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	20 db       	rcall	.-2496   	; 0x297a <dwt_write8bitoffsetreg>
    333a:	14 c0       	rjmp	.+40     	; 0x3364 <dwt_setrxtimeout+0x78>
    333c:	e0 91 98 20 	lds	r30, 0x2098
    3340:	f0 91 99 20 	lds	r31, 0x2099
    3344:	00 89       	ldd	r16, Z+16	; 0x10
    3346:	11 89       	ldd	r17, Z+17	; 0x11
    3348:	22 89       	ldd	r18, Z+18	; 0x12
    334a:	33 89       	ldd	r19, Z+19	; 0x13
    334c:	3f 7e       	andi	r19, 0xEF	; 239
    334e:	00 8b       	std	Z+16, r16	; 0x10
    3350:	11 8b       	std	Z+17, r17	; 0x11
    3352:	22 8b       	std	Z+18, r18	; 0x12
    3354:	33 8b       	std	Z+19, r19	; 0x13
    3356:	48 2f       	mov	r20, r24
    3358:	4f 7e       	andi	r20, 0xEF	; 239
    335a:	63 e0       	ldi	r22, 0x03	; 3
    335c:	70 e0       	ldi	r23, 0x00	; 0
    335e:	84 e0       	ldi	r24, 0x04	; 4
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	0b db       	rcall	.-2538   	; 0x297a <dwt_write8bitoffsetreg>
    3364:	cf 91       	pop	r28
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	08 95       	ret

0000336c <dwt_setinterrupt>:
    336c:	cf 92       	push	r12
    336e:	df 92       	push	r13
    3370:	ef 92       	push	r14
    3372:	ff 92       	push	r15
    3374:	1f 93       	push	r17
    3376:	cf 93       	push	r28
    3378:	df 93       	push	r29
    337a:	6b 01       	movw	r12, r22
    337c:	7c 01       	movw	r14, r24
    337e:	14 2f       	mov	r17, r20
    3380:	0b d2       	rcall	.+1046   	; 0x3798 <decamutexon>
    3382:	ec 01       	movw	r28, r24
    3384:	60 e0       	ldi	r22, 0x00	; 0
    3386:	70 e0       	ldi	r23, 0x00	; 0
    3388:	8e e0       	ldi	r24, 0x0E	; 14
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	8d da       	rcall	.-2790   	; 0x28a8 <dwt_read32bitoffsetreg>
    338e:	11 23       	and	r17, r17
    3390:	39 f0       	breq	.+14     	; 0x33a0 <dwt_setinterrupt+0x34>
    3392:	9b 01       	movw	r18, r22
    3394:	ac 01       	movw	r20, r24
    3396:	2c 29       	or	r18, r12
    3398:	3d 29       	or	r19, r13
    339a:	4e 29       	or	r20, r14
    339c:	5f 29       	or	r21, r15
    339e:	0a c0       	rjmp	.+20     	; 0x33b4 <dwt_setinterrupt+0x48>
    33a0:	c0 94       	com	r12
    33a2:	d0 94       	com	r13
    33a4:	e0 94       	com	r14
    33a6:	f0 94       	com	r15
    33a8:	9b 01       	movw	r18, r22
    33aa:	ac 01       	movw	r20, r24
    33ac:	2c 21       	and	r18, r12
    33ae:	3d 21       	and	r19, r13
    33b0:	4e 21       	and	r20, r14
    33b2:	5f 21       	and	r21, r15
    33b4:	60 e0       	ldi	r22, 0x00	; 0
    33b6:	70 e0       	ldi	r23, 0x00	; 0
    33b8:	8e e0       	ldi	r24, 0x0E	; 14
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	0c db       	rcall	.-2536   	; 0x29d6 <dwt_write32bitoffsetreg>
    33be:	ce 01       	movw	r24, r28
    33c0:	ef d1       	rcall	.+990    	; 0x37a0 <decamutexoff>
    33c2:	df 91       	pop	r29
    33c4:	cf 91       	pop	r28
    33c6:	1f 91       	pop	r17
    33c8:	ff 90       	pop	r15
    33ca:	ef 90       	pop	r14
    33cc:	df 90       	pop	r13
    33ce:	cf 90       	pop	r12
    33d0:	08 95       	ret

000033d2 <dwt_rxreset>:
 * no return value
 */
void dwt_rxreset(void)
{
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
    33d2:	40 ee       	ldi	r20, 0xE0	; 224
    33d4:	63 e0       	ldi	r22, 0x03	; 3
    33d6:	70 e0       	ldi	r23, 0x00	; 0
    33d8:	86 e3       	ldi	r24, 0x36	; 54
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	ce da       	rcall	.-2660   	; 0x297a <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
    33de:	40 ef       	ldi	r20, 0xF0	; 240
    33e0:	63 e0       	ldi	r22, 0x03	; 3
    33e2:	70 e0       	ldi	r23, 0x00	; 0
    33e4:	86 e3       	ldi	r24, 0x36	; 54
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	c8 ca       	rjmp	.-2672   	; 0x297a <dwt_write8bitoffsetreg>
    33ea:	08 95       	ret

000033ec <dwt_isr>:
 * output parameters
 *
 * no return value
 */
void dwt_isr(void)
{
    33ec:	cf 92       	push	r12
    33ee:	df 92       	push	r13
    33f0:	ef 92       	push	r14
    33f2:	ff 92       	push	r15
    33f4:	0f 93       	push	r16
    33f6:	1f 93       	push	r17
    33f8:	cf 93       	push	r28
    33fa:	df 93       	push	r29
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
    33fc:	c0 91 98 20 	lds	r28, 0x2098
    3400:	d0 91 99 20 	lds	r29, 0x2099
    3404:	60 e0       	ldi	r22, 0x00	; 0
    3406:	70 e0       	ldi	r23, 0x00	; 0
    3408:	8f e0       	ldi	r24, 0x0F	; 15
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	4d da       	rcall	.-2918   	; 0x28a8 <dwt_read32bitoffsetreg>
    340e:	6b 01       	movw	r12, r22
    3410:	7c 01       	movw	r14, r24
    3412:	6f 8b       	std	Y+23, r22	; 0x17
    3414:	78 8f       	std	Y+24, r23	; 0x18
    3416:	89 8f       	std	Y+25, r24	; 0x19
    3418:	9a 8f       	std	Y+26, r25	; 0x1a

    // Handle RX good frame event
    if(status & SYS_STATUS_RXFCG)
    341a:	76 ff       	sbrs	r23, 6
    341c:	6d c0       	rjmp	.+218    	; 0x34f8 <dwt_isr+0x10c>
    {
        uint16 finfo16;
        uint16 len;

        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	3f e6       	ldi	r19, 0x6F	; 111
    3422:	40 e0       	ldi	r20, 0x00	; 0
    3424:	50 e0       	ldi	r21, 0x00	; 0
    3426:	60 e0       	ldi	r22, 0x00	; 0
    3428:	70 e0       	ldi	r23, 0x00	; 0
    342a:	8f e0       	ldi	r24, 0x0F	; 15
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	d3 da       	rcall	.-2650   	; 0x29d6 <dwt_write32bitoffsetreg>

        pdw1000local->cbData.rx_flags = 0;
    3430:	e0 91 98 20 	lds	r30, 0x2098
    3434:	f0 91 99 20 	lds	r31, 0x2099
    3438:	17 8e       	std	Z+31, r1	; 0x1f

        // Read frame info - Only the first two bytes of the register are used here.
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
    343a:	60 e0       	ldi	r22, 0x00	; 0
    343c:	70 e0       	ldi	r23, 0x00	; 0
    343e:	80 e1       	ldi	r24, 0x10	; 16
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	68 da       	rcall	.-2864   	; 0x2914 <dwt_read16bitoffsetreg>

        // Report frame length - Standard frame length up to 127, extended frame length up to 1023 bytes
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
        if(pdw1000local->longFrames == 0)
    3444:	e0 91 98 20 	lds	r30, 0x2098
    3448:	f0 91 99 20 	lds	r31, 0x2099
    344c:	20 85       	ldd	r18, Z+8	; 0x08
    344e:	22 23       	and	r18, r18
    3450:	19 f0       	breq	.+6      	; 0x3458 <dwt_isr+0x6c>

        // Read frame info - Only the first two bytes of the register are used here.
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);

        // Report frame length - Standard frame length up to 127, extended frame length up to 1023 bytes
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
    3452:	9c 01       	movw	r18, r24
    3454:	33 70       	andi	r19, 0x03	; 3
    3456:	03 c0       	rjmp	.+6      	; 0x345e <dwt_isr+0x72>
        if(pdw1000local->longFrames == 0)
        {
            len &= RX_FINFO_RXFLEN_MASK;
    3458:	9c 01       	movw	r18, r24
    345a:	2f 77       	andi	r18, 0x7F	; 127
    345c:	33 27       	eor	r19, r19
        }
        pdw1000local->cbData.datalength = len;
    345e:	23 8f       	std	Z+27, r18	; 0x1b
    3460:	34 8f       	std	Z+28, r19	; 0x1c

        // Report ranging bit
        if(finfo16 & RX_FINFO_RNG)
    3462:	99 23       	and	r25, r25
    3464:	1c f4       	brge	.+6      	; 0x346c <dwt_isr+0x80>
        {
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
    3466:	87 8d       	ldd	r24, Z+31	; 0x1f
    3468:	81 60       	ori	r24, 0x01	; 1
    346a:	87 8f       	std	Z+31, r24	; 0x1f
        }

        // Report frame control - First bytes of the received frame.
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, pdw1000local->cbData.fctrl);
    346c:	8f 01       	movw	r16, r30
    346e:	03 5e       	subi	r16, 0xE3	; 227
    3470:	1f 4f       	sbci	r17, 0xFF	; 255
    3472:	22 e0       	ldi	r18, 0x02	; 2
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e0       	ldi	r20, 0x00	; 0
    3478:	50 e0       	ldi	r21, 0x00	; 0
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	70 e0       	ldi	r23, 0x00	; 0
    347e:	81 e1       	ldi	r24, 0x11	; 17
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	d5 d9       	rcall	.-3158   	; 0x282e <dwt_readfromdevice>

        // Because of a previous frame not being received properly, AAT bit can be set upon the proper reception of a frame not requesting for
        // acknowledgement (ACK frame is not actually sent though). If the AAT bit is set, check ACK request bit in frame control to confirm (this
        // implementation works only for IEEE802.15.4-2011 compliant frames).
        // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
    3484:	c3 fe       	sbrs	r12, 3
    3486:	1e c0       	rjmp	.+60     	; 0x34c4 <dwt_isr+0xd8>
    3488:	e0 91 98 20 	lds	r30, 0x2098
    348c:	f0 91 99 20 	lds	r31, 0x2099
    3490:	85 8d       	ldd	r24, Z+29	; 0x1d
    3492:	85 fd       	sbrc	r24, 5
    3494:	17 c0       	rjmp	.+46     	; 0x34c4 <dwt_isr+0xd8>
        {
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
    3496:	28 e0       	ldi	r18, 0x08	; 8
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e0       	ldi	r20, 0x00	; 0
    349c:	50 e0       	ldi	r21, 0x00	; 0
    349e:	60 e0       	ldi	r22, 0x00	; 0
    34a0:	70 e0       	ldi	r23, 0x00	; 0
    34a2:	8f e0       	ldi	r24, 0x0F	; 15
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	97 da       	rcall	.-2770   	; 0x29d6 <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
    34a8:	e0 91 98 20 	lds	r30, 0x2098
    34ac:	f0 91 99 20 	lds	r31, 0x2099
    34b0:	87 89       	ldd	r24, Z+23	; 0x17
    34b2:	90 8d       	ldd	r25, Z+24	; 0x18
    34b4:	a1 8d       	ldd	r26, Z+25	; 0x19
    34b6:	b2 8d       	ldd	r27, Z+26	; 0x1a
    34b8:	87 7f       	andi	r24, 0xF7	; 247
    34ba:	87 8b       	std	Z+23, r24	; 0x17
    34bc:	90 8f       	std	Z+24, r25	; 0x18
    34be:	a1 8f       	std	Z+25, r26	; 0x19
    34c0:	b2 8f       	std	Z+26, r27	; 0x1a
            pdw1000local->wait4resp = 0;
    34c2:	16 8a       	std	Z+22, r1	; 0x16
        }

        // Call the corresponding callback if present
        if(pdw1000local->cbRxOk != NULL)
    34c4:	a0 91 98 20 	lds	r26, 0x2098
    34c8:	b0 91 99 20 	lds	r27, 0x2099
    34cc:	92 96       	adiw	r26, 0x22	; 34
    34ce:	ed 91       	ld	r30, X+
    34d0:	fc 91       	ld	r31, X
    34d2:	93 97       	sbiw	r26, 0x23	; 35
    34d4:	30 97       	sbiw	r30, 0x00	; 0
    34d6:	19 f0       	breq	.+6      	; 0x34de <dwt_isr+0xf2>
        {
            pdw1000local->cbRxOk(&pdw1000local->cbData);
    34d8:	cd 01       	movw	r24, r26
    34da:	47 96       	adiw	r24, 0x17	; 23
    34dc:	09 95       	icall
        }

        if (pdw1000local->dblbuffon)
    34de:	e0 91 98 20 	lds	r30, 0x2098
    34e2:	f0 91 99 20 	lds	r31, 0x2099
    34e6:	87 85       	ldd	r24, Z+15	; 0x0f
    34e8:	88 23       	and	r24, r24
    34ea:	31 f0       	breq	.+12     	; 0x34f8 <dwt_isr+0x10c>
        {
            // Toggle the Host side Receive Buffer Pointer
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1);
    34ec:	41 e0       	ldi	r20, 0x01	; 1
    34ee:	63 e0       	ldi	r22, 0x03	; 3
    34f0:	70 e0       	ldi	r23, 0x00	; 0
    34f2:	8d e0       	ldi	r24, 0x0D	; 13
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	41 da       	rcall	.-2942   	; 0x297a <dwt_write8bitoffsetreg>
        }
    }

    // Handle TX confirmation event
    if(status & SYS_STATUS_TXFRS)
    34f8:	c7 fe       	sbrs	r12, 7
    34fa:	21 c0       	rjmp	.+66     	; 0x353e <dwt_isr+0x152>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
    34fc:	28 ef       	ldi	r18, 0xF8	; 248
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 e0       	ldi	r20, 0x00	; 0
    3502:	50 e0       	ldi	r21, 0x00	; 0
    3504:	60 e0       	ldi	r22, 0x00	; 0
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	8f e0       	ldi	r24, 0x0F	; 15
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	64 da       	rcall	.-2872   	; 0x29d6 <dwt_write32bitoffsetreg>
        // In the case where this TXFRS interrupt is due to the automatic transmission of an ACK solicited by a response (with ACK request bit set)
        // that we receive through using wait4resp to a previous TX (and assuming that the IRQ processing of that TX has already been handled), then
        // we need to handle the IC issue which turns on the RX again in this situation (i.e. because it is wrongly applying the wait4resp after the
        // ACK TX).
        // See section "Transmit and automatically wait for response" in DW1000 User Manual
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)
    350e:	c3 fe       	sbrs	r12, 3
    3510:	09 c0       	rjmp	.+18     	; 0x3524 <dwt_isr+0x138>
    3512:	e0 91 98 20 	lds	r30, 0x2098
    3516:	f0 91 99 20 	lds	r31, 0x2099
    351a:	86 89       	ldd	r24, Z+22	; 0x16
    351c:	88 23       	and	r24, r24
    351e:	11 f0       	breq	.+4      	; 0x3524 <dwt_isr+0x138>
        {
            dwt_forcetrxoff(); // Turn the RX off
    3520:	a9 de       	rcall	.-686    	; 0x3274 <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
    3522:	57 df       	rcall	.-338    	; 0x33d2 <dwt_rxreset>
        }

        // Call the corresponding callback if present
        if(pdw1000local->cbTxDone != NULL)
    3524:	a0 91 98 20 	lds	r26, 0x2098
    3528:	b0 91 99 20 	lds	r27, 0x2099
    352c:	90 96       	adiw	r26, 0x20	; 32
    352e:	ed 91       	ld	r30, X+
    3530:	fc 91       	ld	r31, X
    3532:	91 97       	sbiw	r26, 0x21	; 33
    3534:	30 97       	sbiw	r30, 0x00	; 0
    3536:	19 f0       	breq	.+6      	; 0x353e <dwt_isr+0x152>
        {
            pdw1000local->cbTxDone(&pdw1000local->cbData);
    3538:	cd 01       	movw	r24, r26
    353a:	47 96       	adiw	r24, 0x17	; 23
    353c:	09 95       	icall
        }
    }

    // Handle frame reception/preamble detect timeout events
    if(status & SYS_STATUS_ALL_RX_TO)
    353e:	d7 01       	movw	r26, r14
    3540:	c6 01       	movw	r24, r12
    3542:	88 27       	eor	r24, r24
    3544:	99 27       	eor	r25, r25
    3546:	a2 72       	andi	r26, 0x22	; 34
    3548:	bb 27       	eor	r27, r27
    354a:	89 2b       	or	r24, r25
    354c:	8a 2b       	or	r24, r26
    354e:	8b 2b       	or	r24, r27
    3550:	e9 f0       	breq	.+58     	; 0x358c <dwt_isr+0x1a0>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	42 e0       	ldi	r20, 0x02	; 2
    3558:	50 e0       	ldi	r21, 0x00	; 0
    355a:	60 e0       	ldi	r22, 0x00	; 0
    355c:	70 e0       	ldi	r23, 0x00	; 0
    355e:	8f e0       	ldi	r24, 0x0F	; 15
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	39 da       	rcall	.-2958   	; 0x29d6 <dwt_write32bitoffsetreg>

        pdw1000local->wait4resp = 0;
    3564:	e0 91 98 20 	lds	r30, 0x2098
    3568:	f0 91 99 20 	lds	r31, 0x2099
    356c:	16 8a       	std	Z+22, r1	; 0x16

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        dwt_forcetrxoff();
    356e:	82 de       	rcall	.-764    	; 0x3274 <dwt_forcetrxoff>
        dwt_rxreset();
    3570:	30 df       	rcall	.-416    	; 0x33d2 <dwt_rxreset>

        // Call the corresponding callback if present
        if(pdw1000local->cbRxTo != NULL)
    3572:	a0 91 98 20 	lds	r26, 0x2098
    3576:	b0 91 99 20 	lds	r27, 0x2099
    357a:	94 96       	adiw	r26, 0x24	; 36
    357c:	ed 91       	ld	r30, X+
    357e:	fc 91       	ld	r31, X
    3580:	95 97       	sbiw	r26, 0x25	; 37
    3582:	30 97       	sbiw	r30, 0x00	; 0
    3584:	19 f0       	breq	.+6      	; 0x358c <dwt_isr+0x1a0>
        {
            pdw1000local->cbRxTo(&pdw1000local->cbData);
    3586:	cd 01       	movw	r24, r26
    3588:	47 96       	adiw	r24, 0x17	; 23
    358a:	09 95       	icall
        }
    }

    // Handle RX errors events
    if(status & SYS_STATUS_ALL_RX_ERR)
    358c:	cc 24       	eor	r12, r12
    358e:	80 e9       	ldi	r24, 0x90	; 144
    3590:	d8 22       	and	r13, r24
    3592:	85 e0       	ldi	r24, 0x05	; 5
    3594:	e8 22       	and	r14, r24
    3596:	84 e2       	ldi	r24, 0x24	; 36
    3598:	f8 22       	and	r15, r24
    359a:	cd 28       	or	r12, r13
    359c:	ce 28       	or	r12, r14
    359e:	cf 28       	or	r12, r15
    35a0:	e9 f0       	breq	.+58     	; 0x35dc <dwt_isr+0x1f0>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e9       	ldi	r19, 0x90	; 144
    35a6:	45 e0       	ldi	r20, 0x05	; 5
    35a8:	54 e2       	ldi	r21, 0x24	; 36
    35aa:	60 e0       	ldi	r22, 0x00	; 0
    35ac:	70 e0       	ldi	r23, 0x00	; 0
    35ae:	8f e0       	ldi	r24, 0x0F	; 15
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	11 da       	rcall	.-3038   	; 0x29d6 <dwt_write32bitoffsetreg>

        pdw1000local->wait4resp = 0;
    35b4:	e0 91 98 20 	lds	r30, 0x2098
    35b8:	f0 91 99 20 	lds	r31, 0x2099
    35bc:	16 8a       	std	Z+22, r1	; 0x16

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        dwt_forcetrxoff();
    35be:	5a de       	rcall	.-844    	; 0x3274 <dwt_forcetrxoff>
        dwt_rxreset();
    35c0:	08 df       	rcall	.-496    	; 0x33d2 <dwt_rxreset>

        // Call the corresponding callback if present
        if(pdw1000local->cbRxErr != NULL)
    35c2:	a0 91 98 20 	lds	r26, 0x2098
    35c6:	b0 91 99 20 	lds	r27, 0x2099
    35ca:	96 96       	adiw	r26, 0x26	; 38
    35cc:	ed 91       	ld	r30, X+
    35ce:	fc 91       	ld	r31, X
    35d0:	97 97       	sbiw	r26, 0x27	; 39
    35d2:	30 97       	sbiw	r30, 0x00	; 0
    35d4:	19 f0       	breq	.+6      	; 0x35dc <dwt_isr+0x1f0>
        {
            pdw1000local->cbRxErr(&pdw1000local->cbData);
    35d6:	cd 01       	movw	r24, r26
    35d8:	47 96       	adiw	r24, 0x17	; 23
    35da:	09 95       	icall
        }
    }
}
    35dc:	df 91       	pop	r29
    35de:	cf 91       	pop	r28
    35e0:	1f 91       	pop	r17
    35e2:	0f 91       	pop	r16
    35e4:	ff 90       	pop	r15
    35e6:	ef 90       	pop	r14
    35e8:	df 90       	pop	r13
    35ea:	cf 90       	pop	r12
    35ec:	08 95       	ret

000035ee <dwt_softreset>:
 *
 * no return value
 */
void dwt_softreset(void)
{
    _dwt_disablesequencing();
    35ee:	da dd       	rcall	.-1100   	; 0x31a4 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
    35f0:	40 e0       	ldi	r20, 0x00	; 0
    35f2:	50 e0       	ldi	r21, 0x00	; 0
    35f4:	60 e0       	ldi	r22, 0x00	; 0
    35f6:	70 e0       	ldi	r23, 0x00	; 0
    35f8:	8c e2       	ldi	r24, 0x2C	; 44
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	d4 d9       	rcall	.-3160   	; 0x29a6 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
    35fe:	40 e0       	ldi	r20, 0x00	; 0
    3600:	66 e0       	ldi	r22, 0x06	; 6
    3602:	70 e0       	ldi	r23, 0x00	; 0
    3604:	8c e2       	ldi	r24, 0x2C	; 44
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	b8 d9       	rcall	.-3216   	; 0x297a <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
    360a:	6d da       	rcall	.-2854   	; 0x2ae6 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
    360c:	40 e0       	ldi	r20, 0x00	; 0
    360e:	63 e0       	ldi	r22, 0x03	; 3
    3610:	70 e0       	ldi	r23, 0x00	; 0
    3612:	86 e3       	ldi	r24, 0x36	; 54
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	b1 d9       	rcall	.-3230   	; 0x297a <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	44 d3       	rcall	.+1672   	; 0x3ca6 <deca_sleep>

    // Clear reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
    361e:	40 ef       	ldi	r20, 0xF0	; 240
    3620:	63 e0       	ldi	r22, 0x03	; 3
    3622:	70 e0       	ldi	r23, 0x00	; 0
    3624:	86 e3       	ldi	r24, 0x36	; 54
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	a8 d9       	rcall	.-3248   	; 0x297a <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
    362a:	e0 91 98 20 	lds	r30, 0x2098
    362e:	f0 91 99 20 	lds	r31, 0x2099
    3632:	16 8a       	std	Z+22, r1	; 0x16
    3634:	08 95       	ret

00003636 <dwt_setxtaltrim>:
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
    3636:	8f 71       	andi	r24, 0x1F	; 31
    3638:	48 2f       	mov	r20, r24
    363a:	40 66       	ori	r20, 0x60	; 96
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
    363c:	6e e0       	ldi	r22, 0x0E	; 14
    363e:	70 e0       	ldi	r23, 0x00	; 0
    3640:	8b e2       	ldi	r24, 0x2B	; 43
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	9a c9       	rjmp	.-3276   	; 0x297a <dwt_write8bitoffsetreg>
    3646:	08 95       	ret

00003648 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(uint16 config)
{
    3648:	0f 93       	push	r16
    364a:	1f 93       	push	r17
    364c:	cf 93       	push	r28
    364e:	df 93       	push	r29
    3650:	c8 2f       	mov	r28, r24
    uint16 otp_addr = 0;
    uint32 ldo_tune = 0;

    pdw1000local->dblbuffon = 0; // Double buffer mode off by default
    3652:	e0 91 98 20 	lds	r30, 0x2098
    3656:	f0 91 99 20 	lds	r31, 0x2099
    365a:	17 86       	std	Z+15, r1	; 0x0f
    pdw1000local->wait4resp = 0;
    365c:	16 8a       	std	Z+22, r1	; 0x16
    pdw1000local->sleep_mode = 0;
    365e:	14 8a       	std	Z+20, r1	; 0x14
    3660:	15 8a       	std	Z+21, r1	; 0x15

    pdw1000local->cbTxDone = NULL;
    3662:	10 a2       	std	Z+32, r1	; 0x20
    3664:	11 a2       	std	Z+33, r1	; 0x21
    pdw1000local->cbRxOk = NULL;
    3666:	12 a2       	std	Z+34, r1	; 0x22
    3668:	13 a2       	std	Z+35, r1	; 0x23
    pdw1000local->cbRxTo = NULL;
    366a:	14 a2       	std	Z+36, r1	; 0x24
    366c:	15 a2       	std	Z+37, r1	; 0x25
    pdw1000local->cbRxErr = NULL;
    366e:	16 a2       	std	Z+38, r1	; 0x26
    3670:	17 a2       	std	Z+39, r1	; 0x27

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
    3672:	4a d9       	rcall	.-3436   	; 0x2908 <dwt_readdevid>
    3674:	60 33       	cpi	r22, 0x30	; 48
    3676:	71 40       	sbci	r23, 0x01	; 1
    3678:	8a 4c       	sbci	r24, 0xCA	; 202
    367a:	9e 4d       	sbci	r25, 0xDE	; 222
    367c:	09 f0       	breq	.+2      	; 0x3680 <dwt_initialise+0x38>
    367e:	85 c0       	rjmp	.+266    	; 0x378a <dwt_initialise+0x142>
    {
        return DWT_ERROR ;
    }

    // Make sure the device is completely reset before starting initialisation
    dwt_softreset();
    3680:	b6 df       	rcall	.-148    	; 0x35ee <dwt_softreset>

    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	0f dd       	rcall	.-1506   	; 0x30a6 <_dwt_enableclocks>

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
    3688:	44 e0       	ldi	r20, 0x04	; 4
    368a:	60 e0       	ldi	r22, 0x00	; 0
    368c:	70 e0       	ldi	r23, 0x00	; 0
    368e:	84 e2       	ldi	r24, 0x24	; 36
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	73 d9       	rcall	.-3354   	; 0x297a <dwt_write8bitoffsetreg>

    // Read OTP revision number
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
    3694:	6e e1       	ldi	r22, 0x1E	; 30
    3696:	70 e0       	ldi	r23, 0x00	; 0
    3698:	80 e0       	ldi	r24, 0x00	; 0
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	0c da       	rcall	.-3048   	; 0x2ab6 <_dwt_otpread>
    369e:	d6 2f       	mov	r29, r22
    pdw1000local->otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
    36a0:	e0 91 98 20 	lds	r30, 0x2098
    36a4:	f0 91 99 20 	lds	r31, 0x2099
    36a8:	71 87       	std	Z+9, r23	; 0x09

    // Load LDO tune from OTP and kick it if there is a value actually programmed.
    ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
    36aa:	64 e0       	ldi	r22, 0x04	; 4
    36ac:	70 e0       	ldi	r23, 0x00	; 0
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	01 da       	rcall	.-3070   	; 0x2ab6 <_dwt_otpread>
    if((ldo_tune & 0xFF) != 0)
    36b4:	66 23       	and	r22, r22
    36b6:	79 f0       	breq	.+30     	; 0x36d6 <dwt_initialise+0x8e>
    {
        // Kick LDO tune
        dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDE kick bit
    36b8:	42 e0       	ldi	r20, 0x02	; 2
    36ba:	62 e1       	ldi	r22, 0x12	; 18
    36bc:	70 e0       	ldi	r23, 0x00	; 0
    36be:	8d e2       	ldi	r24, 0x2D	; 45
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	5b d9       	rcall	.-3402   	; 0x297a <dwt_write8bitoffsetreg>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
    36c4:	e0 91 98 20 	lds	r30, 0x2098
    36c8:	f0 91 99 20 	lds	r31, 0x2099
    36cc:	84 89       	ldd	r24, Z+20	; 0x14
    36ce:	95 89       	ldd	r25, Z+21	; 0x15
    36d0:	90 61       	ori	r25, 0x10	; 16
    36d2:	84 8b       	std	Z+20, r24	; 0x14
    36d4:	95 8b       	std	Z+21, r25	; 0x15
    }

    // Load Part and Lot ID from OTP
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
    36d6:	00 91 98 20 	lds	r16, 0x2098
    36da:	10 91 99 20 	lds	r17, 0x2099
    36de:	66 e0       	ldi	r22, 0x06	; 6
    36e0:	70 e0       	ldi	r23, 0x00	; 0
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	e7 d9       	rcall	.-3122   	; 0x2ab6 <_dwt_otpread>
    36e8:	f8 01       	movw	r30, r16
    36ea:	60 83       	st	Z, r22
    36ec:	71 83       	std	Z+1, r23	; 0x01
    36ee:	82 83       	std	Z+2, r24	; 0x02
    36f0:	93 83       	std	Z+3, r25	; 0x03
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
    36f2:	00 91 98 20 	lds	r16, 0x2098
    36f6:	10 91 99 20 	lds	r17, 0x2099
    36fa:	67 e0       	ldi	r22, 0x07	; 7
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	d9 d9       	rcall	.-3150   	; 0x2ab6 <_dwt_otpread>
    3704:	f8 01       	movw	r30, r16
    3706:	64 83       	std	Z+4, r22	; 0x04
    3708:	75 83       	std	Z+5, r23	; 0x05
    370a:	86 83       	std	Z+6, r24	; 0x06
    370c:	97 83       	std	Z+7, r25	; 0x07

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    pdw1000local->init_xtrim = otp_addr & 0x1F;
    370e:	e0 91 98 20 	lds	r30, 0x2098
    3712:	f0 91 99 20 	lds	r31, 0x2099
    3716:	df 71       	andi	r29, 0x1F	; 31
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
    3718:	11 f0       	breq	.+4      	; 0x371e <dwt_initialise+0xd6>
    // Load Part and Lot ID from OTP
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    pdw1000local->init_xtrim = otp_addr & 0x1F;
    371a:	d6 87       	std	Z+14, r29	; 0x0e
    371c:	02 c0       	rjmp	.+4      	; 0x3722 <dwt_initialise+0xda>
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
    {
        pdw1000local->init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
    371e:	80 e1       	ldi	r24, 0x10	; 16
    3720:	86 87       	std	Z+14, r24	; 0x0e
    }
    // Configure XTAL trim
    dwt_setxtaltrim(pdw1000local->init_xtrim);
    3722:	86 85       	ldd	r24, Z+14	; 0x0e
    3724:	88 df       	rcall	.-240    	; 0x3636 <dwt_setxtaltrim>

    // Load leading edge detect code
    if(config & DWT_LOADUCODE)
    3726:	c0 ff       	sbrs	r28, 0
    3728:	0b c0       	rjmp	.+22     	; 0x3740 <dwt_initialise+0xf8>
    {
        _dwt_loaducodefromrom();
    372a:	2b dd       	rcall	.-1450   	; 0x3182 <_dwt_loaducodefromrom>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up
    372c:	e0 91 98 20 	lds	r30, 0x2098
    3730:	f0 91 99 20 	lds	r31, 0x2099
    3734:	84 89       	ldd	r24, Z+20	; 0x14
    3736:	95 89       	ldd	r25, Z+21	; 0x15
    3738:	98 60       	ori	r25, 0x08	; 8
    373a:	84 8b       	std	Z+20, r24	; 0x14
    373c:	95 8b       	std	Z+21, r25	; 0x15
    373e:	0c c0       	rjmp	.+24     	; 0x3758 <dwt_initialise+0x110>
    }
    else // Should disable the LDERUN enable bit in 0x36, 0x4
    {
        uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
    3740:	65 e0       	ldi	r22, 0x05	; 5
    3742:	70 e0       	ldi	r23, 0x00	; 0
    3744:	86 e3       	ldi	r24, 0x36	; 54
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	e5 d8       	rcall	.-3638   	; 0x2914 <dwt_read16bitoffsetreg>
        rega &= 0xFDFF ; // Clear LDERUN bit
    374a:	ac 01       	movw	r20, r24
    374c:	5d 7f       	andi	r21, 0xFD	; 253
        dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
    374e:	65 e0       	ldi	r22, 0x05	; 5
    3750:	70 e0       	ldi	r23, 0x00	; 0
    3752:	86 e3       	ldi	r24, 0x36	; 54
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	27 d9       	rcall	.-3506   	; 0x29a6 <dwt_write16bitoffsetreg>
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	a4 dc       	rcall	.-1720   	; 0x30a6 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
    375e:	40 e0       	ldi	r20, 0x00	; 0
    3760:	6a e0       	ldi	r22, 0x0A	; 10
    3762:	70 e0       	ldi	r23, 0x00	; 0
    3764:	8c e2       	ldi	r24, 0x2C	; 44
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	08 d9       	rcall	.-3568   	; 0x297a <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
    376a:	c0 91 98 20 	lds	r28, 0x2098
    376e:	d0 91 99 20 	lds	r29, 0x2099
    3772:	60 e0       	ldi	r22, 0x00	; 0
    3774:	70 e0       	ldi	r23, 0x00	; 0
    3776:	84 e0       	ldi	r24, 0x04	; 4
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	96 d8       	rcall	.-3796   	; 0x28a8 <dwt_read32bitoffsetreg>
    377c:	68 8b       	std	Y+16, r22	; 0x10
    377e:	79 8b       	std	Y+17, r23	; 0x11
    3780:	8a 8b       	std	Y+18, r24	; 0x12
    3782:	9b 8b       	std	Y+19, r25	; 0x13

    return DWT_SUCCESS ;
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	02 c0       	rjmp	.+4      	; 0x378e <dwt_initialise+0x146>
    pdw1000local->cbRxErr = NULL;

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
    {
        return DWT_ERROR ;
    378a:	8f ef       	ldi	r24, 0xFF	; 255
    378c:	9f ef       	ldi	r25, 0xFF	; 255
    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register

    return DWT_SUCCESS ;

} // end dwt_initialise()
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	08 95       	ret

00003798 <decamutexon>:
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
	decaIrqStatus_t s = 1;
	cli();
    3798:	f8 94       	cli
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	08 95       	ret

000037a0 <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	sei();
    37a0:	78 94       	sei
    37a2:	08 95       	ret

000037a4 <rx_to_cb>:
	{
		str++;
		counter++;
	}
	return counter + 2; //Plus 2 CRC bytes 
}
    37a4:	88 eb       	ldi	r24, 0xB8	; 184
    37a6:	9b e0       	ldi	r25, 0x0B	; 11
    37a8:	a0 e0       	ldi	r26, 0x00	; 0
    37aa:	b0 e0       	ldi	r27, 0x00	; 0
    37ac:	80 93 9a 20 	sts	0x209A, r24
    37b0:	90 93 9b 20 	sts	0x209B, r25
    37b4:	a0 93 9c 20 	sts	0x209C, r26
    37b8:	b0 93 9d 20 	sts	0x209D, r27
    37bc:	80 e8       	ldi	r24, 0x80	; 128
    37be:	e0 e0       	ldi	r30, 0x00	; 0
    37c0:	f6 e0       	ldi	r31, 0x06	; 6
    37c2:	87 83       	std	Z+7, r24	; 0x07
    37c4:	08 95       	ret

000037c6 <rx_err_cb>:
    37c6:	10 92 9a 20 	sts	0x209A, r1
    37ca:	10 92 9b 20 	sts	0x209B, r1
    37ce:	10 92 9c 20 	sts	0x209C, r1
    37d2:	10 92 9d 20 	sts	0x209D, r1
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	e0 e2       	ldi	r30, 0x20	; 32
    37da:	f6 e0       	ldi	r31, 0x06	; 6
    37dc:	87 83       	std	Z+7, r24	; 0x07
    37de:	08 95       	ret

000037e0 <tx_conf_cb>:
    37e0:	82 e0       	ldi	r24, 0x02	; 2
    37e2:	e0 e2       	ldi	r30, 0x20	; 32
    37e4:	f6 e0       	ldi	r31, 0x06	; 6
    37e6:	87 83       	std	Z+7, r24	; 0x07
    37e8:	08 95       	ret

000037ea <rx_ok_cb>:
    37ea:	e1 ec       	ldi	r30, 0xC1	; 193
    37ec:	f8 e2       	ldi	r31, 0x28	; 40
    37ee:	20 e4       	ldi	r18, 0x40	; 64
    37f0:	39 e2       	ldi	r19, 0x29	; 41
    37f2:	11 92       	st	Z+, r1
    37f4:	e2 17       	cp	r30, r18
    37f6:	f3 07       	cpc	r31, r19
    37f8:	e1 f7       	brne	.-8      	; 0x37f2 <rx_ok_cb+0x8>
    37fa:	fc 01       	movw	r30, r24
    37fc:	64 81       	ldd	r22, Z+4	; 0x04
    37fe:	75 81       	ldd	r23, Z+5	; 0x05
    3800:	60 38       	cpi	r22, 0x80	; 128
    3802:	71 05       	cpc	r23, r1
    3804:	28 f4       	brcc	.+10     	; 0x3810 <rx_ok_cb+0x26>
    3806:	40 e0       	ldi	r20, 0x00	; 0
    3808:	50 e0       	ldi	r21, 0x00	; 0
    380a:	81 ec       	ldi	r24, 0xC1	; 193
    380c:	98 e2       	ldi	r25, 0x28	; 40
    380e:	3f d8       	rcall	.-3970   	; 0x288e <dwt_readrxdata>
    3810:	88 ee       	ldi	r24, 0xE8	; 232
    3812:	93 e0       	ldi	r25, 0x03	; 3
    3814:	a0 e0       	ldi	r26, 0x00	; 0
    3816:	b0 e0       	ldi	r27, 0x00	; 0
    3818:	80 93 9a 20 	sts	0x209A, r24
    381c:	90 93 9b 20 	sts	0x209B, r25
    3820:	a0 93 9c 20 	sts	0x209C, r26
    3824:	b0 93 9d 20 	sts	0x209D, r27
    3828:	80 e4       	ldi	r24, 0x40	; 64
    382a:	e0 e0       	ldi	r30, 0x00	; 0
    382c:	f6 e0       	ldi	r31, 0x06	; 6
    382e:	87 83       	std	Z+7, r24	; 0x07
    3830:	08 95       	ret

00003832 <dwt_show_sys_info>:

void dwt_show_sys_info(void)
{
    3832:	4f 92       	push	r4
    3834:	5f 92       	push	r5
    3836:	6f 92       	push	r6
    3838:	7f 92       	push	r7
    383a:	8f 92       	push	r8
    383c:	9f 92       	push	r9
    383e:	af 92       	push	r10
    3840:	bf 92       	push	r11
    3842:	cf 92       	push	r12
    3844:	df 92       	push	r13
    3846:	ef 92       	push	r14
    3848:	ff 92       	push	r15
    384a:	0f 93       	push	r16
    384c:	1f 93       	push	r17
    384e:	cf 93       	push	r28
    3850:	df 93       	push	r29
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	aa 97       	sbiw	r28, 0x2a	; 42
    3858:	cd bf       	out	0x3d, r28	; 61
    385a:	de bf       	out	0x3e, r29	; 62
	uint8_t sys_status[SYS_STATUS_LEN];
	uint32_t rx_finfo;
	uint8_t rx_fqual[RX_FQUAL_LEN];
	uint32_t chan_ctrl;
	
	dev_id =dwt_readdevid();
    385c:	55 d8       	rcall	.-3926   	; 0x2908 <dwt_readdevid>
    385e:	4b 01       	movw	r8, r22
    3860:	5c 01       	movw	r10, r24
	dev_part_id = dwt_getpartid();
    3862:	0e 94 c2 13 	call	0x2784	; 0x2784 <dwt_getpartid>
    3866:	6b 01       	movw	r12, r22
    3868:	7c 01       	movw	r14, r24
	dwt_geteui(dev_eui);
    386a:	ce 01       	movw	r24, r28
    386c:	01 96       	adiw	r24, 0x01	; 1
    386e:	14 d9       	rcall	.-3544   	; 0x2a98 <dwt_geteui>
	dwt_readfromdevice(PANADR_ID, 0, PANADR_LEN, dev_eui);
    3870:	8e 01       	movw	r16, r28
    3872:	0f 5f       	subi	r16, 0xFF	; 255
    3874:	1f 4f       	sbci	r17, 0xFF	; 255
    3876:	24 e0       	ldi	r18, 0x04	; 4
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e0       	ldi	r20, 0x00	; 0
    387c:	50 e0       	ldi	r21, 0x00	; 0
    387e:	60 e0       	ldi	r22, 0x00	; 0
    3880:	70 e0       	ldi	r23, 0x00	; 0
    3882:	83 e0       	ldi	r24, 0x03	; 3
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	0e 94 17 14 	call	0x282e	; 0x282e <dwt_readfromdevice>
	sysconf = dwt_read32bitreg(SYS_CFG_ID);
    388a:	60 e0       	ldi	r22, 0x00	; 0
    388c:	70 e0       	ldi	r23, 0x00	; 0
    388e:	84 e0       	ldi	r24, 0x04	; 4
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	0a d8       	rcall	.-4076   	; 0x28a8 <dwt_read32bitoffsetreg>
    3894:	6b 8f       	std	Y+27, r22	; 0x1b
    3896:	7c 8f       	std	Y+28, r23	; 0x1c
    3898:	8d 8f       	std	Y+29, r24	; 0x1d
    389a:	9e 8f       	std	Y+30, r25	; 0x1e
	dwt_readfromdevice(TX_FCTRL_ID,0,TX_FCTRL_LEN,tx_fctrl);
    389c:	08 5f       	subi	r16, 0xF8	; 248
    389e:	1f 4f       	sbci	r17, 0xFF	; 255
    38a0:	25 e0       	ldi	r18, 0x05	; 5
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	40 e0       	ldi	r20, 0x00	; 0
    38a6:	50 e0       	ldi	r21, 0x00	; 0
    38a8:	60 e0       	ldi	r22, 0x00	; 0
    38aa:	70 e0       	ldi	r23, 0x00	; 0
    38ac:	88 e0       	ldi	r24, 0x08	; 8
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	0e 94 17 14 	call	0x282e	; 0x282e <dwt_readfromdevice>
	sys_ctrl = dwt_read32bitreg(SYS_CTRL_ID);
    38b4:	60 e0       	ldi	r22, 0x00	; 0
    38b6:	70 e0       	ldi	r23, 0x00	; 0
    38b8:	8d e0       	ldi	r24, 0x0D	; 13
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	0e 94 54 14 	call	0x28a8	; 0x28a8 <dwt_read32bitoffsetreg>
    38c0:	6f 8f       	std	Y+31, r22	; 0x1f
    38c2:	78 a3       	std	Y+32, r23	; 0x20
    38c4:	89 a3       	std	Y+33, r24	; 0x21
    38c6:	9a a3       	std	Y+34, r25	; 0x22
	sys_mask = dwt_read32bitreg(SYS_MASK_ID);
    38c8:	60 e0       	ldi	r22, 0x00	; 0
    38ca:	70 e0       	ldi	r23, 0x00	; 0
    38cc:	8e e0       	ldi	r24, 0x0E	; 14
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	0e 94 54 14 	call	0x28a8	; 0x28a8 <dwt_read32bitoffsetreg>
    38d4:	6b a3       	std	Y+35, r22	; 0x23
    38d6:	7c a3       	std	Y+36, r23	; 0x24
    38d8:	8d a3       	std	Y+37, r24	; 0x25
    38da:	9e a3       	std	Y+38, r25	; 0x26
	dwt_readfromdevice(SYS_STATUS_ID,0,SYS_STATUS_LEN,sys_status);
    38dc:	0b 5f       	subi	r16, 0xFB	; 251
    38de:	1f 4f       	sbci	r17, 0xFF	; 255
    38e0:	25 e0       	ldi	r18, 0x05	; 5
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	40 e0       	ldi	r20, 0x00	; 0
    38e6:	50 e0       	ldi	r21, 0x00	; 0
    38e8:	60 e0       	ldi	r22, 0x00	; 0
    38ea:	70 e0       	ldi	r23, 0x00	; 0
    38ec:	8f e0       	ldi	r24, 0x0F	; 15
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	0e 94 17 14 	call	0x282e	; 0x282e <dwt_readfromdevice>
	rx_finfo = dwt_read32bitreg(RX_FINFO_ID);
    38f4:	60 e0       	ldi	r22, 0x00	; 0
    38f6:	70 e0       	ldi	r23, 0x00	; 0
    38f8:	80 e1       	ldi	r24, 0x10	; 16
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	0e 94 54 14 	call	0x28a8	; 0x28a8 <dwt_read32bitoffsetreg>
    3900:	6f a3       	std	Y+39, r22	; 0x27
    3902:	78 a7       	std	Y+40, r23	; 0x28
    3904:	89 a7       	std	Y+41, r24	; 0x29
    3906:	9a a7       	std	Y+42, r25	; 0x2a
	dwt_readfromdevice(RX_FQUAL_ID,0,RX_FQUAL_LEN,rx_fqual);
    3908:	0b 5f       	subi	r16, 0xFB	; 251
    390a:	1f 4f       	sbci	r17, 0xFF	; 255
    390c:	28 e0       	ldi	r18, 0x08	; 8
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	40 e0       	ldi	r20, 0x00	; 0
    3912:	50 e0       	ldi	r21, 0x00	; 0
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	70 e0       	ldi	r23, 0x00	; 0
    3918:	82 e1       	ldi	r24, 0x12	; 18
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	0e 94 17 14 	call	0x282e	; 0x282e <dwt_readfromdevice>
	chan_ctrl = dwt_read32bitreg(CHAN_CTRL_ID);
    3920:	60 e0       	ldi	r22, 0x00	; 0
    3922:	70 e0       	ldi	r23, 0x00	; 0
    3924:	8f e1       	ldi	r24, 0x1F	; 31
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	0e 94 54 14 	call	0x28a8	; 0x28a8 <dwt_read32bitoffsetreg>
    392c:	2b 01       	movw	r4, r22
    392e:	3c 01       	movw	r6, r24
	
	printf("\n------------------------------------------\n");
    3930:	8e ee       	ldi	r24, 0xEE	; 238
    3932:	90 e2       	ldi	r25, 0x20	; 32
    3934:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <puts>
	printf("DWM1000 INFO\n");
    3938:	8a e1       	ldi	r24, 0x1A	; 26
    393a:	91 e2       	ldi	r25, 0x21	; 33
    393c:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <puts>
	printf("Device ID  : %04X %04X\n", (uint16_t)(dev_id>>16),(uint16_t)dev_id);
    3940:	9f 92       	push	r9
    3942:	8f 92       	push	r8
    3944:	45 01       	movw	r8, r10
    3946:	aa 24       	eor	r10, r10
    3948:	bb 24       	eor	r11, r11
    394a:	9f 92       	push	r9
    394c:	8f 92       	push	r8
    394e:	87 e2       	ldi	r24, 0x27	; 39
    3950:	91 e2       	ldi	r25, 0x21	; 33
    3952:	9f 93       	push	r25
    3954:	8f 93       	push	r24
    3956:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
	printf("Part ID    : %04X %04X\n", (uint16_t)(dev_part_id>>16),(uint16_t)dev_part_id);
    395a:	df 92       	push	r13
    395c:	cf 92       	push	r12
    395e:	67 01       	movw	r12, r14
    3960:	ee 24       	eor	r14, r14
    3962:	ff 24       	eor	r15, r15
    3964:	df 92       	push	r13
    3966:	cf 92       	push	r12
    3968:	8f e3       	ldi	r24, 0x3F	; 63
    396a:	91 e2       	ldi	r25, 0x21	; 33
    396c:	9f 93       	push	r25
    396e:	8f 93       	push	r24
    3970:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
	printf("EUI        : %02X %02X %02X %02X %02X %02X %02X %02X\n", dev_eui[7], dev_eui[6],dev_eui[5],dev_eui[4],dev_eui[3],dev_eui[2],dev_eui[1],dev_eui[0]);
    3974:	89 81       	ldd	r24, Y+1	; 0x01
    3976:	1f 92       	push	r1
    3978:	8f 93       	push	r24
    397a:	8a 81       	ldd	r24, Y+2	; 0x02
    397c:	1f 92       	push	r1
    397e:	8f 93       	push	r24
    3980:	8b 81       	ldd	r24, Y+3	; 0x03
    3982:	1f 92       	push	r1
    3984:	8f 93       	push	r24
    3986:	8c 81       	ldd	r24, Y+4	; 0x04
    3988:	1f 92       	push	r1
    398a:	8f 93       	push	r24
    398c:	8d 81       	ldd	r24, Y+5	; 0x05
    398e:	1f 92       	push	r1
    3990:	8f 93       	push	r24
    3992:	8e 81       	ldd	r24, Y+6	; 0x06
    3994:	1f 92       	push	r1
    3996:	8f 93       	push	r24
    3998:	8f 81       	ldd	r24, Y+7	; 0x07
    399a:	1f 92       	push	r1
    399c:	8f 93       	push	r24
    399e:	88 85       	ldd	r24, Y+8	; 0x08
    39a0:	1f 92       	push	r1
    39a2:	8f 93       	push	r24
    39a4:	87 e5       	ldi	r24, 0x57	; 87
    39a6:	91 e2       	ldi	r25, 0x21	; 33
    39a8:	9f 93       	push	r25
    39aa:	8f 93       	push	r24
    39ac:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
	printf("PAN Address: %02X %02X %02X %02X\n",dev_panid[3], dev_panid[2], dev_panid[1], dev_panid[0]);
    39b0:	1f 92       	push	r1
    39b2:	1f 92       	push	r1
    39b4:	1f 92       	push	r1
    39b6:	1f 92       	push	r1
    39b8:	1f 92       	push	r1
    39ba:	1f 92       	push	r1
    39bc:	1f 92       	push	r1
    39be:	1f 92       	push	r1
    39c0:	8d e8       	ldi	r24, 0x8D	; 141
    39c2:	91 e2       	ldi	r25, 0x21	; 33
    39c4:	9f 93       	push	r25
    39c6:	8f 93       	push	r24
    39c8:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
	printf("SYS_CFG    : %04X %04X\n", (uint16_t)(sysconf>>16),(uint16_t)sysconf);
    39cc:	cd bf       	out	0x3d, r28	; 61
    39ce:	de bf       	out	0x3e, r29	; 62
    39d0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    39d2:	3f 93       	push	r19
    39d4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    39d6:	4f 93       	push	r20
    39d8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    39da:	3c 8d       	ldd	r19, Y+28	; 0x1c
    39dc:	4d 8d       	ldd	r20, Y+29	; 0x1d
    39de:	5e 8d       	ldd	r21, Y+30	; 0x1e
    39e0:	ca 01       	movw	r24, r20
    39e2:	aa 27       	eor	r26, r26
    39e4:	bb 27       	eor	r27, r27
    39e6:	9f 93       	push	r25
    39e8:	8f 93       	push	r24
    39ea:	8f ea       	ldi	r24, 0xAF	; 175
    39ec:	91 e2       	ldi	r25, 0x21	; 33
    39ee:	9f 93       	push	r25
    39f0:	8f 93       	push	r24
    39f2:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
	printf("TX_FCTRL   : %02X %02X %02X %02X %02X\n", tx_fctrl[4], tx_fctrl[3], tx_fctrl[2], tx_fctrl[1], tx_fctrl[0]);
    39f6:	89 85       	ldd	r24, Y+9	; 0x09
    39f8:	1f 92       	push	r1
    39fa:	8f 93       	push	r24
    39fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    39fe:	1f 92       	push	r1
    3a00:	8f 93       	push	r24
    3a02:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a04:	1f 92       	push	r1
    3a06:	8f 93       	push	r24
    3a08:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a0a:	1f 92       	push	r1
    3a0c:	8f 93       	push	r24
    3a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a10:	1f 92       	push	r1
    3a12:	8f 93       	push	r24
    3a14:	87 ec       	ldi	r24, 0xC7	; 199
    3a16:	91 e2       	ldi	r25, 0x21	; 33
    3a18:	9f 93       	push	r25
    3a1a:	8f 93       	push	r24
    3a1c:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
	printf("SYS_CTRL   : %04X %04X\n", (uint16_t)(sys_ctrl>>16),(uint16_t)sys_ctrl);
    3a20:	38 a1       	ldd	r19, Y+32	; 0x20
    3a22:	3f 93       	push	r19
    3a24:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3a26:	4f 93       	push	r20
    3a28:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3a2a:	38 a1       	ldd	r19, Y+32	; 0x20
    3a2c:	49 a1       	ldd	r20, Y+33	; 0x21
    3a2e:	5a a1       	ldd	r21, Y+34	; 0x22
    3a30:	ca 01       	movw	r24, r20
    3a32:	aa 27       	eor	r26, r26
    3a34:	bb 27       	eor	r27, r27
    3a36:	9f 93       	push	r25
    3a38:	8f 93       	push	r24
    3a3a:	8e ee       	ldi	r24, 0xEE	; 238
    3a3c:	91 e2       	ldi	r25, 0x21	; 33
    3a3e:	9f 93       	push	r25
    3a40:	8f 93       	push	r24
    3a42:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
	printf("SYS_MASK   : %04X %04X\n", (uint16_t)(sys_mask>>16),(uint16_t)sys_mask);
    3a46:	3c a1       	ldd	r19, Y+36	; 0x24
    3a48:	3f 93       	push	r19
    3a4a:	4b a1       	ldd	r20, Y+35	; 0x23
    3a4c:	4f 93       	push	r20
    3a4e:	2b a1       	ldd	r18, Y+35	; 0x23
    3a50:	3c a1       	ldd	r19, Y+36	; 0x24
    3a52:	4d a1       	ldd	r20, Y+37	; 0x25
    3a54:	5e a1       	ldd	r21, Y+38	; 0x26
    3a56:	ca 01       	movw	r24, r20
    3a58:	aa 27       	eor	r26, r26
    3a5a:	bb 27       	eor	r27, r27
    3a5c:	9f 93       	push	r25
    3a5e:	8f 93       	push	r24
    3a60:	86 e0       	ldi	r24, 0x06	; 6
    3a62:	92 e2       	ldi	r25, 0x22	; 34
    3a64:	9f 93       	push	r25
    3a66:	8f 93       	push	r24
    3a68:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
	printf("SYS_STATUS : %02X %02X %02X %02X %02X\n", sys_status[4], sys_status[3], sys_status[2], sys_status[1], sys_status[0]);
    3a6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a6e:	1f 92       	push	r1
    3a70:	8f 93       	push	r24
    3a72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a74:	1f 92       	push	r1
    3a76:	8f 93       	push	r24
    3a78:	88 89       	ldd	r24, Y+16	; 0x10
    3a7a:	1f 92       	push	r1
    3a7c:	8f 93       	push	r24
    3a7e:	89 89       	ldd	r24, Y+17	; 0x11
    3a80:	1f 92       	push	r1
    3a82:	8f 93       	push	r24
    3a84:	8a 89       	ldd	r24, Y+18	; 0x12
    3a86:	1f 92       	push	r1
    3a88:	8f 93       	push	r24
    3a8a:	8e e1       	ldi	r24, 0x1E	; 30
    3a8c:	92 e2       	ldi	r25, 0x22	; 34
    3a8e:	9f 93       	push	r25
    3a90:	8f 93       	push	r24
    3a92:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
	printf("RX_FINFO   : %04X %04X\n", (uint16_t)(rx_finfo>>16),(uint16_t)rx_finfo);
    3a96:	cd bf       	out	0x3d, r28	; 61
    3a98:	de bf       	out	0x3e, r29	; 62
    3a9a:	58 a5       	ldd	r21, Y+40	; 0x28
    3a9c:	5f 93       	push	r21
    3a9e:	8f a1       	ldd	r24, Y+39	; 0x27
    3aa0:	8f 93       	push	r24
    3aa2:	2f a1       	ldd	r18, Y+39	; 0x27
    3aa4:	38 a5       	ldd	r19, Y+40	; 0x28
    3aa6:	49 a5       	ldd	r20, Y+41	; 0x29
    3aa8:	5a a5       	ldd	r21, Y+42	; 0x2a
    3aaa:	ca 01       	movw	r24, r20
    3aac:	aa 27       	eor	r26, r26
    3aae:	bb 27       	eor	r27, r27
    3ab0:	9f 93       	push	r25
    3ab2:	8f 93       	push	r24
    3ab4:	85 e4       	ldi	r24, 0x45	; 69
    3ab6:	92 e2       	ldi	r25, 0x22	; 34
    3ab8:	9f 93       	push	r25
    3aba:	8f 93       	push	r24
    3abc:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
	printf("RX_FQUAL   : %02X %02X %02X %02X %02X %02X %02X %02X\n", rx_fqual[7], rx_fqual[6],rx_fqual[5],rx_fqual[4],rx_fqual[3],rx_fqual[2],rx_fqual[1],rx_fqual[0]);
    3ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac2:	1f 92       	push	r1
    3ac4:	8f 93       	push	r24
    3ac6:	8c 89       	ldd	r24, Y+20	; 0x14
    3ac8:	1f 92       	push	r1
    3aca:	8f 93       	push	r24
    3acc:	8d 89       	ldd	r24, Y+21	; 0x15
    3ace:	1f 92       	push	r1
    3ad0:	8f 93       	push	r24
    3ad2:	8e 89       	ldd	r24, Y+22	; 0x16
    3ad4:	1f 92       	push	r1
    3ad6:	8f 93       	push	r24
    3ad8:	8f 89       	ldd	r24, Y+23	; 0x17
    3ada:	1f 92       	push	r1
    3adc:	8f 93       	push	r24
    3ade:	88 8d       	ldd	r24, Y+24	; 0x18
    3ae0:	1f 92       	push	r1
    3ae2:	8f 93       	push	r24
    3ae4:	89 8d       	ldd	r24, Y+25	; 0x19
    3ae6:	1f 92       	push	r1
    3ae8:	8f 93       	push	r24
    3aea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3aec:	1f 92       	push	r1
    3aee:	8f 93       	push	r24
    3af0:	8d e5       	ldi	r24, 0x5D	; 93
    3af2:	92 e2       	ldi	r25, 0x22	; 34
    3af4:	9f 93       	push	r25
    3af6:	8f 93       	push	r24
    3af8:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
	printf("CHAN_CTRL  : %04X %04X\n", (uint16_t)(chan_ctrl>>16),(uint16_t)chan_ctrl);
    3afc:	5f 92       	push	r5
    3afe:	4f 92       	push	r4
    3b00:	23 01       	movw	r4, r6
    3b02:	66 24       	eor	r6, r6
    3b04:	77 24       	eor	r7, r7
    3b06:	5f 92       	push	r5
    3b08:	4f 92       	push	r4
    3b0a:	83 e9       	ldi	r24, 0x93	; 147
    3b0c:	92 e2       	ldi	r25, 0x22	; 34
    3b0e:	9f 93       	push	r25
    3b10:	8f 93       	push	r24
    3b12:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
	printf("\n------------------------------------------\n");
    3b16:	8e ee       	ldi	r24, 0xEE	; 238
    3b18:	90 e2       	ldi	r25, 0x20	; 32
    3b1a:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <puts>
    3b1e:	cd bf       	out	0x3d, r28	; 61
    3b20:	de bf       	out	0x3e, r29	; 62
	
}
    3b22:	aa 96       	adiw	r28, 0x2a	; 42
    3b24:	cd bf       	out	0x3d, r28	; 61
    3b26:	de bf       	out	0x3e, r29	; 62
    3b28:	df 91       	pop	r29
    3b2a:	cf 91       	pop	r28
    3b2c:	1f 91       	pop	r17
    3b2e:	0f 91       	pop	r16
    3b30:	ff 90       	pop	r15
    3b32:	ef 90       	pop	r14
    3b34:	df 90       	pop	r13
    3b36:	cf 90       	pop	r12
    3b38:	bf 90       	pop	r11
    3b3a:	af 90       	pop	r10
    3b3c:	9f 90       	pop	r9
    3b3e:	8f 90       	pop	r8
    3b40:	7f 90       	pop	r7
    3b42:	6f 90       	pop	r6
    3b44:	5f 90       	pop	r5
    3b46:	4f 90       	pop	r4
    3b48:	08 95       	ret

00003b4a <dwt_tx_wait_resp_interrupts>:
static void rx_err_cb(const dwt_cb_data_t *cb_data);
static void tx_conf_cb(const dwt_cb_data_t *cb_data);

void dwt_tx_wait_resp_interrupts(void)
{
	if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	7c dd       	rcall	.-1288   	; 0x3648 <dwt_initialise>
    3b50:	01 96       	adiw	r24, 0x01	; 1
    3b52:	49 f4       	brne	.+18     	; 0x3b66 <dwt_tx_wait_resp_interrupts+0x1c>
	{
		printf("INIT FAILED");
    3b54:	8b ea       	ldi	r24, 0xAB	; 171
    3b56:	92 e2       	ldi	r25, 0x22	; 34
    3b58:	9f 93       	push	r25
    3b5a:	8f 93       	push	r24
    3b5c:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	ff cf       	rjmp	.-2      	; 0x3b64 <dwt_tx_wait_resp_interrupts+0x1a>
		while (1)
		{ };
	}
	fast_spi();
    3b66:	12 d1       	rcall	.+548    	; 0x3d8c <fast_spi>
	
	/* Configure DW1000. See NOTE 6 below. */
	dwt_configure(&config);
    3b68:	8c ea       	ldi	r24, 0xAC	; 172
    3b6a:	90 e2       	ldi	r25, 0x20	; 32
    3b6c:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <dwt_configure>

	dwt_setleds(DWT_LEDS_ENABLE|DWT_LEDS_INIT_BLINK);
    3b70:	83 e0       	ldi	r24, 0x03	; 3
    3b72:	49 da       	rcall	.-2926   	; 0x3006 <dwt_setleds>

	/* Register RX call-back. */
	dwt_setcallbacks(&tx_conf_cb, &rx_ok_cb, &rx_to_cb, &rx_err_cb);
    3b74:	23 ee       	ldi	r18, 0xE3	; 227
    3b76:	3b e1       	ldi	r19, 0x1B	; 27
    3b78:	42 ed       	ldi	r20, 0xD2	; 210
    3b7a:	5b e1       	ldi	r21, 0x1B	; 27
    3b7c:	65 ef       	ldi	r22, 0xF5	; 245
    3b7e:	7b e1       	ldi	r23, 0x1B	; 27
    3b80:	80 ef       	ldi	r24, 0xF0	; 240
    3b82:	9b e1       	ldi	r25, 0x1B	; 27
    3b84:	33 da       	rcall	.-2970   	; 0x2fec <dwt_setcallbacks>

	/* Enable wanted interrupts (TX confirmation, RX good frames, RX timeouts and RX errors). */
	dwt_setinterrupt(DWT_INT_TFRS | DWT_INT_RFCG | DWT_INT_RFTO | DWT_INT_RXPTO | DWT_INT_RPHE | DWT_INT_RFCE | DWT_INT_RFSL | DWT_INT_SFDT, 1);
    3b86:	41 e0       	ldi	r20, 0x01	; 1
    3b88:	60 e8       	ldi	r22, 0x80	; 128
    3b8a:	70 ed       	ldi	r23, 0xD0	; 208
    3b8c:	83 e2       	ldi	r24, 0x23	; 35
    3b8e:	94 e0       	ldi	r25, 0x04	; 4
    3b90:	ed db       	rcall	.-2086   	; 0x336c <dwt_setinterrupt>

	/* Set delay to turn reception on after transmission of the frame. See NOTE 2 below. */
	dwt_setrxaftertxdelay(TX_TO_RX_DELAY_UUS);
    3b92:	6c e3       	ldi	r22, 0x3C	; 60
    3b94:	70 e0       	ldi	r23, 0x00	; 0
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	05 da       	rcall	.-3062   	; 0x2fa6 <dwt_setrxaftertxdelay>

	/* Set response frame timeout. */
	dwt_setrxtimeout(RX_RESP_TO_UUS);
    3b9c:	88 e8       	ldi	r24, 0x88	; 136
    3b9e:	93 e1       	ldi	r25, 0x13	; 19
    3ba0:	a5 db       	rcall	.-2230   	; 0x32ec <dwt_setrxtimeout>
		{
			delay_ms(tx_delay_ms);
		}

		/* Increment the blink frame sequence number (modulo 256). */
		tx_msg[BLINK_FRAME_SN_IDX]++;
    3ba2:	cf e9       	ldi	r28, 0x9F	; 159
    3ba4:	d0 e2       	ldi	r29, 0x20	; 32

	/* Loop forever sending and receiving frames periodically. */
	while (1)
	{
		/* Write frame data to DW1000 and prepare transmission. See NOTE 7 below. */
		dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
    3ba6:	40 e0       	ldi	r20, 0x00	; 0
    3ba8:	50 e0       	ldi	r21, 0x00	; 0
    3baa:	6e e9       	ldi	r22, 0x9E	; 158
    3bac:	70 e2       	ldi	r23, 0x20	; 32
    3bae:	8e e0       	ldi	r24, 0x0E	; 14
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <dwt_writetxdata>
		dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
    3bb6:	40 e0       	ldi	r20, 0x00	; 0
    3bb8:	50 e0       	ldi	r21, 0x00	; 0
    3bba:	60 e0       	ldi	r22, 0x00	; 0
    3bbc:	70 e0       	ldi	r23, 0x00	; 0
    3bbe:	8e e0       	ldi	r24, 0x0E	; 14
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <dwt_writetxfctrl>

		/* Start transmission, indicating that a response is expected so that reception is enabled immediately after the frame is sent. */
		dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
    3bc6:	82 e0       	ldi	r24, 0x02	; 2
    3bc8:	f8 da       	rcall	.-2576   	; 0x31ba <dwt_starttx>

		/* Wait for any RX event. */
		while (tx_delay_ms == -1)
    3bca:	80 91 9a 20 	lds	r24, 0x209A
    3bce:	90 91 9b 20 	lds	r25, 0x209B
    3bd2:	a0 91 9c 20 	lds	r26, 0x209C
    3bd6:	b0 91 9d 20 	lds	r27, 0x209D
    3bda:	8f 3f       	cpi	r24, 0xFF	; 255
    3bdc:	2f ef       	ldi	r18, 0xFF	; 255
    3bde:	92 07       	cpc	r25, r18
    3be0:	a2 07       	cpc	r26, r18
    3be2:	b2 07       	cpc	r27, r18
    3be4:	79 f4       	brne	.+30     	; 0x3c04 <dwt_tx_wait_resp_interrupts+0xba>
		{
			dwt_isr();	
    3be6:	02 dc       	rcall	.-2044   	; 0x33ec <dwt_isr>

		/* Start transmission, indicating that a response is expected so that reception is enabled immediately after the frame is sent. */
		dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);

		/* Wait for any RX event. */
		while (tx_delay_ms == -1)
    3be8:	80 91 9a 20 	lds	r24, 0x209A
    3bec:	90 91 9b 20 	lds	r25, 0x209B
    3bf0:	a0 91 9c 20 	lds	r26, 0x209C
    3bf4:	b0 91 9d 20 	lds	r27, 0x209D
    3bf8:	8f 3f       	cpi	r24, 0xFF	; 255
    3bfa:	2f ef       	ldi	r18, 0xFF	; 255
    3bfc:	92 07       	cpc	r25, r18
    3bfe:	a2 07       	cpc	r26, r18
    3c00:	b2 07       	cpc	r27, r18
    3c02:	89 f3       	breq	.-30     	; 0x3be6 <dwt_tx_wait_resp_interrupts+0x9c>
		{
			dwt_isr();	
		}

		/* Execute the defined delay before next transmission. */
		if (tx_delay_ms > 0)
    3c04:	18 16       	cp	r1, r24
    3c06:	19 06       	cpc	r1, r25
    3c08:	1a 06       	cpc	r1, r26
    3c0a:	1b 06       	cpc	r1, r27
    3c0c:	0c f0       	brlt	.+2      	; 0x3c10 <dwt_tx_wait_resp_interrupts+0xc6>
    3c0e:	3b c0       	rjmp	.+118    	; 0x3c86 <dwt_tx_wait_resp_interrupts+0x13c>
		{
			delay_ms(tx_delay_ms);
    3c10:	2c 01       	movw	r4, r24
    3c12:	3d 01       	movw	r6, r26
    3c14:	77 0c       	add	r7, r7
    3c16:	44 08       	sbc	r4, r4
    3c18:	54 2c       	mov	r5, r4
    3c1a:	32 01       	movw	r6, r4
    3c1c:	a1 2c       	mov	r10, r1
    3c1e:	0f 2e       	mov	r0, r31
    3c20:	fc e6       	ldi	r31, 0x6C	; 108
    3c22:	bf 2e       	mov	r11, r31
    3c24:	f0 2d       	mov	r31, r0
    3c26:	0f 2e       	mov	r0, r31
    3c28:	fc ed       	ldi	r31, 0xDC	; 220
    3c2a:	cf 2e       	mov	r12, r31
    3c2c:	f0 2d       	mov	r31, r0
    3c2e:	68 94       	set
    3c30:	dd 24       	eor	r13, r13
    3c32:	d1 f8       	bld	r13, 1
    3c34:	e1 2c       	mov	r14, r1
    3c36:	f1 2c       	mov	r15, r1
    3c38:	00 e0       	ldi	r16, 0x00	; 0
    3c3a:	10 e0       	ldi	r17, 0x00	; 0
    3c3c:	28 2f       	mov	r18, r24
    3c3e:	39 2f       	mov	r19, r25
    3c40:	4a 2f       	mov	r20, r26
    3c42:	5b 2f       	mov	r21, r27
    3c44:	64 2d       	mov	r22, r4
    3c46:	74 2d       	mov	r23, r4
    3c48:	84 2d       	mov	r24, r4
    3c4a:	94 2d       	mov	r25, r4
    3c4c:	57 d7       	rcall	.+3758   	; 0x4afc <__muldi3>
    3c4e:	29 51       	subi	r18, 0x19	; 25
    3c50:	3c 4f       	sbci	r19, 0xFC	; 252
    3c52:	4f 4f       	sbci	r20, 0xFF	; 255
    3c54:	5f 4f       	sbci	r21, 0xFF	; 255
    3c56:	6f 4f       	sbci	r22, 0xFF	; 255
    3c58:	7f 4f       	sbci	r23, 0xFF	; 255
    3c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c5e:	73 d6       	rcall	.+3302   	; 0x4946 <__floatundisf>
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e8       	ldi	r19, 0x80	; 128
    3c64:	4b eb       	ldi	r20, 0xBB	; 187
    3c66:	55 e4       	ldi	r21, 0x45	; 69
    3c68:	cc d5       	rcall	.+2968   	; 0x4802 <__divsf3>
    3c6a:	38 d6       	rcall	.+3184   	; 0x48dc <__fixunssfdi>
    3c6c:	f2 2f       	mov	r31, r18
    3c6e:	e3 2f       	mov	r30, r19
    3c70:	8f 2f       	mov	r24, r31
    3c72:	9e 2f       	mov	r25, r30
    3c74:	a4 2f       	mov	r26, r20
    3c76:	b5 2f       	mov	r27, r21
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	a1 09       	sbc	r26, r1
    3c7c:	b1 09       	sbc	r27, r1
    3c7e:	00 97       	sbiw	r24, 0x00	; 0
    3c80:	a1 05       	cpc	r26, r1
    3c82:	b1 05       	cpc	r27, r1
    3c84:	c9 f7       	brne	.-14     	; 0x3c78 <dwt_tx_wait_resp_interrupts+0x12e>
		}

		/* Increment the blink frame sequence number (modulo 256). */
		tx_msg[BLINK_FRAME_SN_IDX]++;
    3c86:	88 81       	ld	r24, Y
    3c88:	8f 5f       	subi	r24, 0xFF	; 255
    3c8a:	88 83       	st	Y, r24

		/* Reset the TX delay and event signalling mechanism ready to await the next event. */
		tx_delay_ms = -1;
    3c8c:	8f ef       	ldi	r24, 0xFF	; 255
    3c8e:	9f ef       	ldi	r25, 0xFF	; 255
    3c90:	dc 01       	movw	r26, r24
    3c92:	80 93 9a 20 	sts	0x209A, r24
    3c96:	90 93 9b 20 	sts	0x209B, r25
    3c9a:	a0 93 9c 20 	sts	0x209C, r26
    3c9e:	b0 93 9d 20 	sts	0x209D, r27
	}
    3ca2:	81 cf       	rjmp	.-254    	; 0x3ba6 <dwt_tx_wait_resp_interrupts+0x5c>

00003ca4 <dwt_run_examples>:
	#ifdef DWT_DS_TWR_RESP
	dwt_ds_twr_resp();
	#endif
	
	#ifdef DWT_TX_WAIT_RESP_INTERRUPTS
	dwt_tx_wait_resp_interrupts();
    3ca4:	52 df       	rcall	.-348    	; 0x3b4a <dwt_tx_wait_resp_interrupts>

00003ca6 <deca_sleep>:

#include "../include/deca_device_api.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
    3ca6:	af 92       	push	r10
    3ca8:	bf 92       	push	r11
    3caa:	cf 92       	push	r12
    3cac:	df 92       	push	r13
    3cae:	ef 92       	push	r14
    3cb0:	ff 92       	push	r15
    3cb2:	0f 93       	push	r16
    3cb4:	1f 93       	push	r17
    3cb6:	cf 93       	push	r28
    3cb8:	df 93       	push	r29
    delay_ms(time_ms);
    3cba:	a1 2c       	mov	r10, r1
    3cbc:	0f 2e       	mov	r0, r31
    3cbe:	fc e6       	ldi	r31, 0x6C	; 108
    3cc0:	bf 2e       	mov	r11, r31
    3cc2:	f0 2d       	mov	r31, r0
    3cc4:	0f 2e       	mov	r0, r31
    3cc6:	fc ed       	ldi	r31, 0xDC	; 220
    3cc8:	cf 2e       	mov	r12, r31
    3cca:	f0 2d       	mov	r31, r0
    3ccc:	68 94       	set
    3cce:	dd 24       	eor	r13, r13
    3cd0:	d1 f8       	bld	r13, 1
    3cd2:	e1 2c       	mov	r14, r1
    3cd4:	f1 2c       	mov	r15, r1
    3cd6:	00 e0       	ldi	r16, 0x00	; 0
    3cd8:	10 e0       	ldi	r17, 0x00	; 0
    3cda:	28 2f       	mov	r18, r24
    3cdc:	39 2f       	mov	r19, r25
    3cde:	40 e0       	ldi	r20, 0x00	; 0
    3ce0:	50 e0       	ldi	r21, 0x00	; 0
    3ce2:	60 e0       	ldi	r22, 0x00	; 0
    3ce4:	70 e0       	ldi	r23, 0x00	; 0
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	08 d7       	rcall	.+3600   	; 0x4afc <__muldi3>
    3cec:	29 51       	subi	r18, 0x19	; 25
    3cee:	3c 4f       	sbci	r19, 0xFC	; 252
    3cf0:	4f 4f       	sbci	r20, 0xFF	; 255
    3cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cf4:	6f 4f       	sbci	r22, 0xFF	; 255
    3cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf8:	8f 4f       	sbci	r24, 0xFF	; 255
    3cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    3cfc:	24 d6       	rcall	.+3144   	; 0x4946 <__floatundisf>
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e8       	ldi	r19, 0x80	; 128
    3d02:	4b eb       	ldi	r20, 0xBB	; 187
    3d04:	55 e4       	ldi	r21, 0x45	; 69
    3d06:	7d d5       	rcall	.+2810   	; 0x4802 <__divsf3>
    3d08:	e9 d5       	rcall	.+3026   	; 0x48dc <__fixunssfdi>
    3d0a:	f2 2f       	mov	r31, r18
    3d0c:	e3 2f       	mov	r30, r19
    3d0e:	8f 2f       	mov	r24, r31
    3d10:	9e 2f       	mov	r25, r30
    3d12:	a4 2f       	mov	r26, r20
    3d14:	b5 2f       	mov	r27, r21
    3d16:	01 97       	sbiw	r24, 0x01	; 1
    3d18:	a1 09       	sbc	r26, r1
    3d1a:	b1 09       	sbc	r27, r1
    3d1c:	00 97       	sbiw	r24, 0x00	; 0
    3d1e:	a1 05       	cpc	r26, r1
    3d20:	b1 05       	cpc	r27, r1
    3d22:	c9 f7       	brne	.-14     	; 0x3d16 <deca_sleep+0x70>
}
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	1f 91       	pop	r17
    3d2a:	0f 91       	pop	r16
    3d2c:	ff 90       	pop	r15
    3d2e:	ef 90       	pop	r14
    3d30:	df 90       	pop	r13
    3d32:	cf 90       	pop	r12
    3d34:	bf 90       	pop	r11
    3d36:	af 90       	pop	r10
    3d38:	08 95       	ret

00003d3a <openspi>:
	spi_disable(&SPIC);


	return 0;

} // end closespi()
    3d3a:	cf 92       	push	r12
    3d3c:	df 92       	push	r13
    3d3e:	ef 92       	push	r14
    3d40:	ff 92       	push	r15
    3d42:	0f 93       	push	r16
    3d44:	1f 93       	push	r17
    3d46:	84 e1       	ldi	r24, 0x14	; 20
    3d48:	80 93 7a 29 	sts	0x297A, r24
    3d4c:	80 ec       	ldi	r24, 0xC0	; 192
    3d4e:	98 e0       	ldi	r25, 0x08	; 8
    3d50:	0e 94 38 01 	call	0x270	; 0x270 <spi_master_init>
    3d54:	c1 2c       	mov	r12, r1
    3d56:	d1 2c       	mov	r13, r1
    3d58:	76 01       	movw	r14, r12
    3d5a:	00 e2       	ldi	r16, 0x20	; 32
    3d5c:	11 ea       	ldi	r17, 0xA1	; 161
    3d5e:	27 e0       	ldi	r18, 0x07	; 7
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e0       	ldi	r20, 0x00	; 0
    3d64:	6a e7       	ldi	r22, 0x7A	; 122
    3d66:	79 e2       	ldi	r23, 0x29	; 41
    3d68:	80 ec       	ldi	r24, 0xC0	; 192
    3d6a:	98 e0       	ldi	r25, 0x08	; 8
    3d6c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <spi_master_setup_device>
    3d70:	e0 ec       	ldi	r30, 0xC0	; 192
    3d72:	f8 e0       	ldi	r31, 0x08	; 8
    3d74:	80 81       	ld	r24, Z
    3d76:	80 64       	ori	r24, 0x40	; 64
    3d78:	80 83       	st	Z, r24
    3d7a:	80 e0       	ldi	r24, 0x00	; 0
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	1f 91       	pop	r17
    3d80:	0f 91       	pop	r16
    3d82:	ff 90       	pop	r15
    3d84:	ef 90       	pop	r14
    3d86:	df 90       	pop	r13
    3d88:	cf 90       	pop	r12
    3d8a:	08 95       	ret

00003d8c <fast_spi>:
    3d8c:	cf 92       	push	r12
    3d8e:	df 92       	push	r13
    3d90:	ef 92       	push	r14
    3d92:	ff 92       	push	r15
    3d94:	0f 93       	push	r16
    3d96:	1f 93       	push	r17
    3d98:	c1 2c       	mov	r12, r1
    3d9a:	d1 2c       	mov	r13, r1
    3d9c:	76 01       	movw	r14, r12
    3d9e:	00 ec       	ldi	r16, 0xC0	; 192
    3da0:	11 ee       	ldi	r17, 0xE1	; 225
    3da2:	24 ee       	ldi	r18, 0xE4	; 228
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	40 e0       	ldi	r20, 0x00	; 0
    3da8:	6a e7       	ldi	r22, 0x7A	; 122
    3daa:	79 e2       	ldi	r23, 0x29	; 41
    3dac:	80 ec       	ldi	r24, 0xC0	; 192
    3dae:	98 e0       	ldi	r25, 0x08	; 8
    3db0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <spi_master_setup_device>
    3db4:	1f 91       	pop	r17
    3db6:	0f 91       	pop	r16
    3db8:	ff 90       	pop	r15
    3dba:	ef 90       	pop	r14
    3dbc:	df 90       	pop	r13
    3dbe:	cf 90       	pop	r12
    3dc0:	08 95       	ret

00003dc2 <writetospi>:
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
#pragma GCC optimize ("O3")
int writetospi(uint16 headerLength, const uint8 *headerBuffer, uint32 bodylength, const uint8 *bodyBuffer)
{
    3dc2:	8f 92       	push	r8
    3dc4:	9f 92       	push	r9
    3dc6:	af 92       	push	r10
    3dc8:	bf 92       	push	r11
    3dca:	cf 92       	push	r12
    3dcc:	df 92       	push	r13
    3dce:	ef 92       	push	r14
    3dd0:	ff 92       	push	r15
    3dd2:	0f 93       	push	r16
    3dd4:	1f 93       	push	r17
    3dd6:	cf 93       	push	r28
    3dd8:	df 93       	push	r29
    3dda:	7c 01       	movw	r14, r24
    3ddc:	eb 01       	movw	r28, r22
    3dde:	49 01       	movw	r8, r18
    3de0:	5a 01       	movw	r10, r20

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
    3de2:	da dc       	rcall	.-1612   	; 0x3798 <decamutexon>
    3de4:	6c 01       	movw	r12, r24

    spi_select_device(&SPIC, &spi_device_conf);
    3de6:	6a e7       	ldi	r22, 0x7A	; 122
    3de8:	79 e2       	ldi	r23, 0x29	; 41
    3dea:	80 ec       	ldi	r24, 0xC0	; 192
    3dec:	98 e0       	ldi	r25, 0x08	; 8
    3dee:	0e 94 92 01 	call	0x324	; 0x324 <spi_select_device>
    spi_write_packet(&SPIC, headerBuffer, headerLength);
    3df2:	a7 01       	movw	r20, r14
    3df4:	be 01       	movw	r22, r28
    3df6:	80 ec       	ldi	r24, 0xC0	; 192
    3df8:	98 e0       	ldi	r25, 0x08	; 8
    3dfa:	0e 94 70 01 	call	0x2e0	; 0x2e0 <spi_write_packet>
    spi_write_packet(&SPIC, bodyBuffer, bodylength);
    3dfe:	a4 01       	movw	r20, r8
    3e00:	b8 01       	movw	r22, r16
    3e02:	80 ec       	ldi	r24, 0xC0	; 192
    3e04:	98 e0       	ldi	r25, 0x08	; 8
    3e06:	0e 94 70 01 	call	0x2e0	; 0x2e0 <spi_write_packet>
    spi_deselect_device(&SPIC, &spi_device_conf);
    3e0a:	6a e7       	ldi	r22, 0x7A	; 122
    3e0c:	79 e2       	ldi	r23, 0x29	; 41
    3e0e:	80 ec       	ldi	r24, 0xC0	; 192
    3e10:	98 e0       	ldi	r25, 0x08	; 8
    3e12:	0e 94 a8 01 	call	0x350	; 0x350 <spi_deselect_device>

    decamutexoff(stat) ;
    3e16:	c6 01       	movw	r24, r12
    3e18:	c3 dc       	rcall	.-1658   	; 0x37a0 <decamutexoff>

    return 0;
} // end writetospi()
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	df 91       	pop	r29
    3e20:	cf 91       	pop	r28
    3e22:	1f 91       	pop	r17
    3e24:	0f 91       	pop	r16
    3e26:	ff 90       	pop	r15
    3e28:	ef 90       	pop	r14
    3e2a:	df 90       	pop	r13
    3e2c:	cf 90       	pop	r12
    3e2e:	bf 90       	pop	r11
    3e30:	af 90       	pop	r10
    3e32:	9f 90       	pop	r9
    3e34:	8f 90       	pop	r8
    3e36:	08 95       	ret

00003e38 <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
#pragma GCC optimize ("O3")
int readfromspi(uint16 headerLength, const uint8 *headerBuffer, uint32 readlength, uint8 *readBuffer)
{
    3e38:	8f 92       	push	r8
    3e3a:	9f 92       	push	r9
    3e3c:	af 92       	push	r10
    3e3e:	bf 92       	push	r11
    3e40:	cf 92       	push	r12
    3e42:	df 92       	push	r13
    3e44:	ef 92       	push	r14
    3e46:	ff 92       	push	r15
    3e48:	0f 93       	push	r16
    3e4a:	1f 93       	push	r17
    3e4c:	cf 93       	push	r28
    3e4e:	df 93       	push	r29
    3e50:	7c 01       	movw	r14, r24
    3e52:	eb 01       	movw	r28, r22
    3e54:	49 01       	movw	r8, r18
    3e56:	5a 01       	movw	r10, r20

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
    3e58:	9f dc       	rcall	.-1730   	; 0x3798 <decamutexon>
    3e5a:	6c 01       	movw	r12, r24

    spi_select_device(&SPIC, &spi_device_conf);
    3e5c:	6a e7       	ldi	r22, 0x7A	; 122
    3e5e:	79 e2       	ldi	r23, 0x29	; 41
    3e60:	80 ec       	ldi	r24, 0xC0	; 192
    3e62:	98 e0       	ldi	r25, 0x08	; 8
    3e64:	0e 94 92 01 	call	0x324	; 0x324 <spi_select_device>
    spi_write_packet(&SPIC, headerBuffer, headerLength);
    3e68:	a7 01       	movw	r20, r14
    3e6a:	be 01       	movw	r22, r28
    3e6c:	80 ec       	ldi	r24, 0xC0	; 192
    3e6e:	98 e0       	ldi	r25, 0x08	; 8
    3e70:	0e 94 70 01 	call	0x2e0	; 0x2e0 <spi_write_packet>
    spi_read_packet(&SPIC, readBuffer, readlength);
    3e74:	a4 01       	movw	r20, r8
    3e76:	b8 01       	movw	r22, r16
    3e78:	80 ec       	ldi	r24, 0xC0	; 192
    3e7a:	98 e0       	ldi	r25, 0x08	; 8
    3e7c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_read_packet>
    spi_deselect_device(&SPIC, &spi_device_conf);
    3e80:	6a e7       	ldi	r22, 0x7A	; 122
    3e82:	79 e2       	ldi	r23, 0x29	; 41
    3e84:	80 ec       	ldi	r24, 0xC0	; 192
    3e86:	98 e0       	ldi	r25, 0x08	; 8
    3e88:	0e 94 a8 01 	call	0x350	; 0x350 <spi_deselect_device>

    decamutexoff(stat) ;
    3e8c:	c6 01       	movw	r24, r12
    3e8e:	88 dc       	rcall	.-1776   	; 0x37a0 <decamutexoff>

    return 0;
} // end readfromspi()
    3e90:	80 e0       	ldi	r24, 0x00	; 0
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	1f 91       	pop	r17
    3e9a:	0f 91       	pop	r16
    3e9c:	ff 90       	pop	r15
    3e9e:	ef 90       	pop	r14
    3ea0:	df 90       	pop	r13
    3ea2:	cf 90       	pop	r12
    3ea4:	bf 90       	pop	r11
    3ea6:	af 90       	pop	r10
    3ea8:	9f 90       	pop	r9
    3eaa:	8f 90       	pop	r8
    3eac:	08 95       	ret

00003eae <init_onepos>:

#include "../onepos.h"

void init_onepos(void)
{
	sysclk_init();
    3eae:	0e 94 60 12 	call	0x24c0	; 0x24c0 <sysclk_init>
	
	#ifdef ENABLE_RTC
	// 	rtc_init();
	#endif
	#ifdef ENABLE_USB
		usb_init();
    3eb2:	35 d4       	rcall	.+2154   	; 0x471e <usb_init>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3eb4:	e0 e4       	ldi	r30, 0x40	; 64
    3eb6:	f6 e0       	ldi	r31, 0x06	; 6
    3eb8:	88 e0       	ldi	r24, 0x08	; 8
    3eba:	82 83       	std	Z+2, r24	; 0x02
    3ebc:	94 e0       	ldi	r25, 0x04	; 4
    3ebe:	92 83       	std	Z+2, r25	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3ec0:	a0 e0       	ldi	r26, 0x00	; 0
    3ec2:	b6 e0       	ldi	r27, 0x06	; 6
    3ec4:	20 e4       	ldi	r18, 0x40	; 64
    3ec6:	11 96       	adiw	r26, 0x01	; 1
    3ec8:	2c 93       	st	X, r18
    3eca:	11 97       	sbiw	r26, 0x01	; 1
    3ecc:	30 e8       	ldi	r19, 0x80	; 128
    3ece:	11 96       	adiw	r26, 0x01	; 1
    3ed0:	3c 93       	st	X, r19
    3ed2:	a0 e2       	ldi	r26, 0x20	; 32
    3ed4:	b6 e0       	ldi	r27, 0x06	; 6
    3ed6:	41 e0       	ldi	r20, 0x01	; 1
    3ed8:	11 96       	adiw	r26, 0x01	; 1
    3eda:	4c 93       	st	X, r20
    3edc:	11 97       	sbiw	r26, 0x01	; 1
    3ede:	42 e0       	ldi	r20, 0x02	; 2
    3ee0:	11 96       	adiw	r26, 0x01	; 1
    3ee2:	4c 93       	st	X, r20
    3ee4:	a0 e8       	ldi	r26, 0x80	; 128
    3ee6:	b6 e0       	ldi	r27, 0x06	; 6
    3ee8:	11 96       	adiw	r26, 0x01	; 1
    3eea:	4c 93       	st	X, r20
    3eec:	11 97       	sbiw	r26, 0x01	; 1
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3eee:	12 96       	adiw	r26, 0x02	; 2
    3ef0:	9c 93       	st	X, r25
    3ef2:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3ef4:	11 96       	adiw	r26, 0x01	; 1
    3ef6:	8c 93       	st	X, r24
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3ef8:	a0 e6       	ldi	r26, 0x60	; 96
    3efa:	b6 e0       	ldi	r27, 0x06	; 6
    3efc:	12 96       	adiw	r26, 0x02	; 2
    3efe:	9c 93       	st	X, r25
    3f00:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3f02:	11 96       	adiw	r26, 0x01	; 1
    3f04:	8c 93       	st	X, r24
    3f06:	80 e1       	ldi	r24, 0x10	; 16
    3f08:	81 83       	std	Z+1, r24	; 0x01
    3f0a:	80 e2       	ldi	r24, 0x20	; 32
    3f0c:	81 83       	std	Z+1, r24	; 0x01
    3f0e:	31 83       	std	Z+1, r19	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3f10:	22 83       	std	Z+2, r18	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3f12:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    3f14:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3f16:	e6 e5       	ldi	r30, 0x56	; 86
    3f18:	f6 e0       	ldi	r31, 0x06	; 6
    3f1a:	90 81       	ld	r25, Z
    3f1c:	97 70       	andi	r25, 0x07	; 7
    3f1e:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    3f20:	90 81       	ld	r25, Z
    3f22:	90 61       	ori	r25, 0x10	; 16
    3f24:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3f26:	8f bf       	out	0x3f, r24	; 63
    3f28:	08 95       	ret

00003f2a <init_animation>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3f2a:	80 e4       	ldi	r24, 0x40	; 64
    3f2c:	e0 e0       	ldi	r30, 0x00	; 0
    3f2e:	f6 e0       	ldi	r31, 0x06	; 6
    3f30:	85 83       	std	Z+5, r24	; 0x05
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	92 ee       	ldi	r25, 0xE2	; 226
    3f36:	a4 e0       	ldi	r26, 0x04	; 4
    3f38:	b0 e0       	ldi	r27, 0x00	; 0
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	a1 09       	sbc	r26, r1
    3f3e:	b1 09       	sbc	r27, r1
    3f40:	00 97       	sbiw	r24, 0x00	; 0
    3f42:	a1 05       	cpc	r26, r1
    3f44:	b1 05       	cpc	r27, r1
    3f46:	c9 f7       	brne	.-14     	; 0x3f3a <init_animation+0x10>
    3f48:	80 e8       	ldi	r24, 0x80	; 128
    3f4a:	e0 e0       	ldi	r30, 0x00	; 0
    3f4c:	f6 e0       	ldi	r31, 0x06	; 6
    3f4e:	85 83       	std	Z+5, r24	; 0x05
    3f50:	80 e0       	ldi	r24, 0x00	; 0
    3f52:	92 ee       	ldi	r25, 0xE2	; 226
    3f54:	a4 e0       	ldi	r26, 0x04	; 4
    3f56:	b0 e0       	ldi	r27, 0x00	; 0
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	a1 09       	sbc	r26, r1
    3f5c:	b1 09       	sbc	r27, r1
    3f5e:	00 97       	sbiw	r24, 0x00	; 0
    3f60:	a1 05       	cpc	r26, r1
    3f62:	b1 05       	cpc	r27, r1
    3f64:	c9 f7       	brne	.-14     	; 0x3f58 <init_animation+0x2e>
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	e0 e2       	ldi	r30, 0x20	; 32
    3f6a:	f6 e0       	ldi	r31, 0x06	; 6
    3f6c:	85 83       	std	Z+5, r24	; 0x05
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	92 ee       	ldi	r25, 0xE2	; 226
    3f72:	a4 e0       	ldi	r26, 0x04	; 4
    3f74:	b0 e0       	ldi	r27, 0x00	; 0
    3f76:	01 97       	sbiw	r24, 0x01	; 1
    3f78:	a1 09       	sbc	r26, r1
    3f7a:	b1 09       	sbc	r27, r1
    3f7c:	00 97       	sbiw	r24, 0x00	; 0
    3f7e:	a1 05       	cpc	r26, r1
    3f80:	b1 05       	cpc	r27, r1
    3f82:	c9 f7       	brne	.-14     	; 0x3f76 <init_animation+0x4c>
    3f84:	82 e0       	ldi	r24, 0x02	; 2
    3f86:	e0 e2       	ldi	r30, 0x20	; 32
    3f88:	f6 e0       	ldi	r31, 0x06	; 6
    3f8a:	85 83       	std	Z+5, r24	; 0x05
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	92 ee       	ldi	r25, 0xE2	; 226
    3f90:	a4 e0       	ldi	r26, 0x04	; 4
    3f92:	b0 e0       	ldi	r27, 0x00	; 0
    3f94:	01 97       	sbiw	r24, 0x01	; 1
    3f96:	a1 09       	sbc	r26, r1
    3f98:	b1 09       	sbc	r27, r1
    3f9a:	00 97       	sbiw	r24, 0x00	; 0
    3f9c:	a1 05       	cpc	r26, r1
    3f9e:	b1 05       	cpc	r27, r1
    3fa0:	c9 f7       	brne	.-14     	; 0x3f94 <init_animation+0x6a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3fa2:	80 e4       	ldi	r24, 0x40	; 64
    3fa4:	e0 e0       	ldi	r30, 0x00	; 0
    3fa6:	f6 e0       	ldi	r31, 0x06	; 6
    3fa8:	86 83       	std	Z+6, r24	; 0x06
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	92 ee       	ldi	r25, 0xE2	; 226
    3fae:	a4 e0       	ldi	r26, 0x04	; 4
    3fb0:	b0 e0       	ldi	r27, 0x00	; 0
    3fb2:	01 97       	sbiw	r24, 0x01	; 1
    3fb4:	a1 09       	sbc	r26, r1
    3fb6:	b1 09       	sbc	r27, r1
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	a1 05       	cpc	r26, r1
    3fbc:	b1 05       	cpc	r27, r1
    3fbe:	c9 f7       	brne	.-14     	; 0x3fb2 <init_animation+0x88>
    3fc0:	80 e8       	ldi	r24, 0x80	; 128
    3fc2:	e0 e0       	ldi	r30, 0x00	; 0
    3fc4:	f6 e0       	ldi	r31, 0x06	; 6
    3fc6:	86 83       	std	Z+6, r24	; 0x06
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	92 ee       	ldi	r25, 0xE2	; 226
    3fcc:	a4 e0       	ldi	r26, 0x04	; 4
    3fce:	b0 e0       	ldi	r27, 0x00	; 0
    3fd0:	01 97       	sbiw	r24, 0x01	; 1
    3fd2:	a1 09       	sbc	r26, r1
    3fd4:	b1 09       	sbc	r27, r1
    3fd6:	00 97       	sbiw	r24, 0x00	; 0
    3fd8:	a1 05       	cpc	r26, r1
    3fda:	b1 05       	cpc	r27, r1
    3fdc:	c9 f7       	brne	.-14     	; 0x3fd0 <init_animation+0xa6>
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	e0 e2       	ldi	r30, 0x20	; 32
    3fe2:	f6 e0       	ldi	r31, 0x06	; 6
    3fe4:	86 83       	std	Z+6, r24	; 0x06
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	92 ee       	ldi	r25, 0xE2	; 226
    3fea:	a4 e0       	ldi	r26, 0x04	; 4
    3fec:	b0 e0       	ldi	r27, 0x00	; 0
    3fee:	01 97       	sbiw	r24, 0x01	; 1
    3ff0:	a1 09       	sbc	r26, r1
    3ff2:	b1 09       	sbc	r27, r1
    3ff4:	00 97       	sbiw	r24, 0x00	; 0
    3ff6:	a1 05       	cpc	r26, r1
    3ff8:	b1 05       	cpc	r27, r1
    3ffa:	c9 f7       	brne	.-14     	; 0x3fee <init_animation+0xc4>
    3ffc:	82 e0       	ldi	r24, 0x02	; 2
    3ffe:	e0 e2       	ldi	r30, 0x20	; 32
    4000:	f6 e0       	ldi	r31, 0x06	; 6
    4002:	86 83       	std	Z+6, r24	; 0x06
    4004:	80 e0       	ldi	r24, 0x00	; 0
    4006:	92 ee       	ldi	r25, 0xE2	; 226
    4008:	a4 e0       	ldi	r26, 0x04	; 4
    400a:	b0 e0       	ldi	r27, 0x00	; 0
    400c:	01 97       	sbiw	r24, 0x01	; 1
    400e:	a1 09       	sbc	r26, r1
    4010:	b1 09       	sbc	r27, r1
    4012:	00 97       	sbiw	r24, 0x00	; 0
    4014:	a1 05       	cpc	r26, r1
    4016:	b1 05       	cpc	r27, r1
    4018:	c9 f7       	brne	.-14     	; 0x400c <init_animation+0xe2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    401a:	80 e4       	ldi	r24, 0x40	; 64
    401c:	e0 e0       	ldi	r30, 0x00	; 0
    401e:	f6 e0       	ldi	r31, 0x06	; 6
    4020:	85 83       	std	Z+5, r24	; 0x05
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	94 ec       	ldi	r25, 0xC4	; 196
    4026:	a9 e0       	ldi	r26, 0x09	; 9
    4028:	b0 e0       	ldi	r27, 0x00	; 0
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	a1 09       	sbc	r26, r1
    402e:	b1 09       	sbc	r27, r1
    4030:	00 97       	sbiw	r24, 0x00	; 0
    4032:	a1 05       	cpc	r26, r1
    4034:	b1 05       	cpc	r27, r1
    4036:	c9 f7       	brne	.-14     	; 0x402a <init_animation+0x100>
    4038:	80 e8       	ldi	r24, 0x80	; 128
    403a:	e0 e0       	ldi	r30, 0x00	; 0
    403c:	f6 e0       	ldi	r31, 0x06	; 6
    403e:	85 83       	std	Z+5, r24	; 0x05
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	94 ec       	ldi	r25, 0xC4	; 196
    4044:	a9 e0       	ldi	r26, 0x09	; 9
    4046:	b0 e0       	ldi	r27, 0x00	; 0
    4048:	01 97       	sbiw	r24, 0x01	; 1
    404a:	a1 09       	sbc	r26, r1
    404c:	b1 09       	sbc	r27, r1
    404e:	00 97       	sbiw	r24, 0x00	; 0
    4050:	a1 05       	cpc	r26, r1
    4052:	b1 05       	cpc	r27, r1
    4054:	c9 f7       	brne	.-14     	; 0x4048 <init_animation+0x11e>
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	e0 e2       	ldi	r30, 0x20	; 32
    405a:	f6 e0       	ldi	r31, 0x06	; 6
    405c:	85 83       	std	Z+5, r24	; 0x05
    405e:	80 e0       	ldi	r24, 0x00	; 0
    4060:	94 ec       	ldi	r25, 0xC4	; 196
    4062:	a9 e0       	ldi	r26, 0x09	; 9
    4064:	b0 e0       	ldi	r27, 0x00	; 0
    4066:	01 97       	sbiw	r24, 0x01	; 1
    4068:	a1 09       	sbc	r26, r1
    406a:	b1 09       	sbc	r27, r1
    406c:	00 97       	sbiw	r24, 0x00	; 0
    406e:	a1 05       	cpc	r26, r1
    4070:	b1 05       	cpc	r27, r1
    4072:	c9 f7       	brne	.-14     	; 0x4066 <init_animation+0x13c>
    4074:	82 e0       	ldi	r24, 0x02	; 2
    4076:	e0 e2       	ldi	r30, 0x20	; 32
    4078:	f6 e0       	ldi	r31, 0x06	; 6
    407a:	85 83       	std	Z+5, r24	; 0x05
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	94 ec       	ldi	r25, 0xC4	; 196
    4080:	a9 e0       	ldi	r26, 0x09	; 9
    4082:	b0 e0       	ldi	r27, 0x00	; 0
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	a1 09       	sbc	r26, r1
    4088:	b1 09       	sbc	r27, r1
    408a:	00 97       	sbiw	r24, 0x00	; 0
    408c:	a1 05       	cpc	r26, r1
    408e:	b1 05       	cpc	r27, r1
    4090:	c9 f7       	brne	.-14     	; 0x4084 <init_animation+0x15a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    4092:	80 e4       	ldi	r24, 0x40	; 64
    4094:	e0 e0       	ldi	r30, 0x00	; 0
    4096:	f6 e0       	ldi	r31, 0x06	; 6
    4098:	86 83       	std	Z+6, r24	; 0x06
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	94 ec       	ldi	r25, 0xC4	; 196
    409e:	a9 e0       	ldi	r26, 0x09	; 9
    40a0:	b0 e0       	ldi	r27, 0x00	; 0
    40a2:	01 97       	sbiw	r24, 0x01	; 1
    40a4:	a1 09       	sbc	r26, r1
    40a6:	b1 09       	sbc	r27, r1
    40a8:	00 97       	sbiw	r24, 0x00	; 0
    40aa:	a1 05       	cpc	r26, r1
    40ac:	b1 05       	cpc	r27, r1
    40ae:	c9 f7       	brne	.-14     	; 0x40a2 <init_animation+0x178>
    40b0:	80 e8       	ldi	r24, 0x80	; 128
    40b2:	e0 e0       	ldi	r30, 0x00	; 0
    40b4:	f6 e0       	ldi	r31, 0x06	; 6
    40b6:	86 83       	std	Z+6, r24	; 0x06
    40b8:	80 e0       	ldi	r24, 0x00	; 0
    40ba:	94 ec       	ldi	r25, 0xC4	; 196
    40bc:	a9 e0       	ldi	r26, 0x09	; 9
    40be:	b0 e0       	ldi	r27, 0x00	; 0
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	a1 09       	sbc	r26, r1
    40c4:	b1 09       	sbc	r27, r1
    40c6:	00 97       	sbiw	r24, 0x00	; 0
    40c8:	a1 05       	cpc	r26, r1
    40ca:	b1 05       	cpc	r27, r1
    40cc:	c9 f7       	brne	.-14     	; 0x40c0 <init_animation+0x196>
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	e0 e2       	ldi	r30, 0x20	; 32
    40d2:	f6 e0       	ldi	r31, 0x06	; 6
    40d4:	86 83       	std	Z+6, r24	; 0x06
    40d6:	80 e0       	ldi	r24, 0x00	; 0
    40d8:	94 ec       	ldi	r25, 0xC4	; 196
    40da:	a9 e0       	ldi	r26, 0x09	; 9
    40dc:	b0 e0       	ldi	r27, 0x00	; 0
    40de:	01 97       	sbiw	r24, 0x01	; 1
    40e0:	a1 09       	sbc	r26, r1
    40e2:	b1 09       	sbc	r27, r1
    40e4:	00 97       	sbiw	r24, 0x00	; 0
    40e6:	a1 05       	cpc	r26, r1
    40e8:	b1 05       	cpc	r27, r1
    40ea:	c9 f7       	brne	.-14     	; 0x40de <init_animation+0x1b4>
    40ec:	82 e0       	ldi	r24, 0x02	; 2
    40ee:	e0 e2       	ldi	r30, 0x20	; 32
    40f0:	f6 e0       	ldi	r31, 0x06	; 6
    40f2:	86 83       	std	Z+6, r24	; 0x06
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	94 ec       	ldi	r25, 0xC4	; 196
    40f8:	a9 e0       	ldi	r26, 0x09	; 9
    40fa:	b0 e0       	ldi	r27, 0x00	; 0
    40fc:	01 97       	sbiw	r24, 0x01	; 1
    40fe:	a1 09       	sbc	r26, r1
    4100:	b1 09       	sbc	r27, r1
    4102:	00 97       	sbiw	r24, 0x00	; 0
    4104:	a1 05       	cpc	r26, r1
    4106:	b1 05       	cpc	r27, r1
    4108:	c9 f7       	brne	.-14     	; 0x40fc <init_animation+0x1d2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    410a:	80 e4       	ldi	r24, 0x40	; 64
    410c:	e0 e0       	ldi	r30, 0x00	; 0
    410e:	f6 e0       	ldi	r31, 0x06	; 6
    4110:	85 83       	std	Z+5, r24	; 0x05
    4112:	80 e0       	ldi	r24, 0x00	; 0
    4114:	96 ea       	ldi	r25, 0xA6	; 166
    4116:	ae e0       	ldi	r26, 0x0E	; 14
    4118:	b0 e0       	ldi	r27, 0x00	; 0
    411a:	01 97       	sbiw	r24, 0x01	; 1
    411c:	a1 09       	sbc	r26, r1
    411e:	b1 09       	sbc	r27, r1
    4120:	00 97       	sbiw	r24, 0x00	; 0
    4122:	a1 05       	cpc	r26, r1
    4124:	b1 05       	cpc	r27, r1
    4126:	c9 f7       	brne	.-14     	; 0x411a <init_animation+0x1f0>
    4128:	80 e8       	ldi	r24, 0x80	; 128
    412a:	e0 e0       	ldi	r30, 0x00	; 0
    412c:	f6 e0       	ldi	r31, 0x06	; 6
    412e:	85 83       	std	Z+5, r24	; 0x05
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	96 ea       	ldi	r25, 0xA6	; 166
    4134:	ae e0       	ldi	r26, 0x0E	; 14
    4136:	b0 e0       	ldi	r27, 0x00	; 0
    4138:	01 97       	sbiw	r24, 0x01	; 1
    413a:	a1 09       	sbc	r26, r1
    413c:	b1 09       	sbc	r27, r1
    413e:	00 97       	sbiw	r24, 0x00	; 0
    4140:	a1 05       	cpc	r26, r1
    4142:	b1 05       	cpc	r27, r1
    4144:	c9 f7       	brne	.-14     	; 0x4138 <init_animation+0x20e>
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	e0 e2       	ldi	r30, 0x20	; 32
    414a:	f6 e0       	ldi	r31, 0x06	; 6
    414c:	85 83       	std	Z+5, r24	; 0x05
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	96 ea       	ldi	r25, 0xA6	; 166
    4152:	ae e0       	ldi	r26, 0x0E	; 14
    4154:	b0 e0       	ldi	r27, 0x00	; 0
    4156:	01 97       	sbiw	r24, 0x01	; 1
    4158:	a1 09       	sbc	r26, r1
    415a:	b1 09       	sbc	r27, r1
    415c:	00 97       	sbiw	r24, 0x00	; 0
    415e:	a1 05       	cpc	r26, r1
    4160:	b1 05       	cpc	r27, r1
    4162:	c9 f7       	brne	.-14     	; 0x4156 <init_animation+0x22c>
    4164:	82 e0       	ldi	r24, 0x02	; 2
    4166:	e0 e2       	ldi	r30, 0x20	; 32
    4168:	f6 e0       	ldi	r31, 0x06	; 6
    416a:	85 83       	std	Z+5, r24	; 0x05
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	96 ea       	ldi	r25, 0xA6	; 166
    4170:	ae e0       	ldi	r26, 0x0E	; 14
    4172:	b0 e0       	ldi	r27, 0x00	; 0
    4174:	01 97       	sbiw	r24, 0x01	; 1
    4176:	a1 09       	sbc	r26, r1
    4178:	b1 09       	sbc	r27, r1
    417a:	00 97       	sbiw	r24, 0x00	; 0
    417c:	a1 05       	cpc	r26, r1
    417e:	b1 05       	cpc	r27, r1
    4180:	c9 f7       	brne	.-14     	; 0x4174 <init_animation+0x24a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    4182:	80 e4       	ldi	r24, 0x40	; 64
    4184:	e0 e0       	ldi	r30, 0x00	; 0
    4186:	f6 e0       	ldi	r31, 0x06	; 6
    4188:	86 83       	std	Z+6, r24	; 0x06
    418a:	80 e0       	ldi	r24, 0x00	; 0
    418c:	96 ea       	ldi	r25, 0xA6	; 166
    418e:	ae e0       	ldi	r26, 0x0E	; 14
    4190:	b0 e0       	ldi	r27, 0x00	; 0
    4192:	01 97       	sbiw	r24, 0x01	; 1
    4194:	a1 09       	sbc	r26, r1
    4196:	b1 09       	sbc	r27, r1
    4198:	00 97       	sbiw	r24, 0x00	; 0
    419a:	a1 05       	cpc	r26, r1
    419c:	b1 05       	cpc	r27, r1
    419e:	c9 f7       	brne	.-14     	; 0x4192 <init_animation+0x268>
    41a0:	80 e8       	ldi	r24, 0x80	; 128
    41a2:	e0 e0       	ldi	r30, 0x00	; 0
    41a4:	f6 e0       	ldi	r31, 0x06	; 6
    41a6:	86 83       	std	Z+6, r24	; 0x06
    41a8:	80 e0       	ldi	r24, 0x00	; 0
    41aa:	96 ea       	ldi	r25, 0xA6	; 166
    41ac:	ae e0       	ldi	r26, 0x0E	; 14
    41ae:	b0 e0       	ldi	r27, 0x00	; 0
    41b0:	01 97       	sbiw	r24, 0x01	; 1
    41b2:	a1 09       	sbc	r26, r1
    41b4:	b1 09       	sbc	r27, r1
    41b6:	00 97       	sbiw	r24, 0x00	; 0
    41b8:	a1 05       	cpc	r26, r1
    41ba:	b1 05       	cpc	r27, r1
    41bc:	c9 f7       	brne	.-14     	; 0x41b0 <init_animation+0x286>
    41be:	81 e0       	ldi	r24, 0x01	; 1
    41c0:	e0 e2       	ldi	r30, 0x20	; 32
    41c2:	f6 e0       	ldi	r31, 0x06	; 6
    41c4:	86 83       	std	Z+6, r24	; 0x06
    41c6:	80 e0       	ldi	r24, 0x00	; 0
    41c8:	96 ea       	ldi	r25, 0xA6	; 166
    41ca:	ae e0       	ldi	r26, 0x0E	; 14
    41cc:	b0 e0       	ldi	r27, 0x00	; 0
    41ce:	01 97       	sbiw	r24, 0x01	; 1
    41d0:	a1 09       	sbc	r26, r1
    41d2:	b1 09       	sbc	r27, r1
    41d4:	00 97       	sbiw	r24, 0x00	; 0
    41d6:	a1 05       	cpc	r26, r1
    41d8:	b1 05       	cpc	r27, r1
    41da:	c9 f7       	brne	.-14     	; 0x41ce <init_animation+0x2a4>
    41dc:	82 e0       	ldi	r24, 0x02	; 2
    41de:	e0 e2       	ldi	r30, 0x20	; 32
    41e0:	f6 e0       	ldi	r31, 0x06	; 6
    41e2:	86 83       	std	Z+6, r24	; 0x06
    41e4:	80 e0       	ldi	r24, 0x00	; 0
    41e6:	96 ea       	ldi	r25, 0xA6	; 166
    41e8:	ae e0       	ldi	r26, 0x0E	; 14
    41ea:	b0 e0       	ldi	r27, 0x00	; 0
    41ec:	01 97       	sbiw	r24, 0x01	; 1
    41ee:	a1 09       	sbc	r26, r1
    41f0:	b1 09       	sbc	r27, r1
    41f2:	00 97       	sbiw	r24, 0x00	; 0
    41f4:	a1 05       	cpc	r26, r1
    41f6:	b1 05       	cpc	r27, r1
    41f8:	c9 f7       	brne	.-14     	; 0x41ec <init_animation+0x2c2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    41fa:	80 e4       	ldi	r24, 0x40	; 64
    41fc:	e0 e0       	ldi	r30, 0x00	; 0
    41fe:	f6 e0       	ldi	r31, 0x06	; 6
    4200:	85 83       	std	Z+5, r24	; 0x05
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	98 e8       	ldi	r25, 0x88	; 136
    4206:	a3 e1       	ldi	r26, 0x13	; 19
    4208:	b0 e0       	ldi	r27, 0x00	; 0
    420a:	01 97       	sbiw	r24, 0x01	; 1
    420c:	a1 09       	sbc	r26, r1
    420e:	b1 09       	sbc	r27, r1
    4210:	00 97       	sbiw	r24, 0x00	; 0
    4212:	a1 05       	cpc	r26, r1
    4214:	b1 05       	cpc	r27, r1
    4216:	c9 f7       	brne	.-14     	; 0x420a <init_animation+0x2e0>
    4218:	80 e8       	ldi	r24, 0x80	; 128
    421a:	e0 e0       	ldi	r30, 0x00	; 0
    421c:	f6 e0       	ldi	r31, 0x06	; 6
    421e:	85 83       	std	Z+5, r24	; 0x05
    4220:	80 e0       	ldi	r24, 0x00	; 0
    4222:	98 e8       	ldi	r25, 0x88	; 136
    4224:	a3 e1       	ldi	r26, 0x13	; 19
    4226:	b0 e0       	ldi	r27, 0x00	; 0
    4228:	01 97       	sbiw	r24, 0x01	; 1
    422a:	a1 09       	sbc	r26, r1
    422c:	b1 09       	sbc	r27, r1
    422e:	00 97       	sbiw	r24, 0x00	; 0
    4230:	a1 05       	cpc	r26, r1
    4232:	b1 05       	cpc	r27, r1
    4234:	c9 f7       	brne	.-14     	; 0x4228 <init_animation+0x2fe>
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	e0 e2       	ldi	r30, 0x20	; 32
    423a:	f6 e0       	ldi	r31, 0x06	; 6
    423c:	85 83       	std	Z+5, r24	; 0x05
    423e:	80 e0       	ldi	r24, 0x00	; 0
    4240:	98 e8       	ldi	r25, 0x88	; 136
    4242:	a3 e1       	ldi	r26, 0x13	; 19
    4244:	b0 e0       	ldi	r27, 0x00	; 0
    4246:	01 97       	sbiw	r24, 0x01	; 1
    4248:	a1 09       	sbc	r26, r1
    424a:	b1 09       	sbc	r27, r1
    424c:	00 97       	sbiw	r24, 0x00	; 0
    424e:	a1 05       	cpc	r26, r1
    4250:	b1 05       	cpc	r27, r1
    4252:	c9 f7       	brne	.-14     	; 0x4246 <init_animation+0x31c>
    4254:	82 e0       	ldi	r24, 0x02	; 2
    4256:	e0 e2       	ldi	r30, 0x20	; 32
    4258:	f6 e0       	ldi	r31, 0x06	; 6
    425a:	85 83       	std	Z+5, r24	; 0x05
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	98 e8       	ldi	r25, 0x88	; 136
    4260:	a3 e1       	ldi	r26, 0x13	; 19
    4262:	b0 e0       	ldi	r27, 0x00	; 0
    4264:	01 97       	sbiw	r24, 0x01	; 1
    4266:	a1 09       	sbc	r26, r1
    4268:	b1 09       	sbc	r27, r1
    426a:	00 97       	sbiw	r24, 0x00	; 0
    426c:	a1 05       	cpc	r26, r1
    426e:	b1 05       	cpc	r27, r1
    4270:	c9 f7       	brne	.-14     	; 0x4264 <init_animation+0x33a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    4272:	80 e4       	ldi	r24, 0x40	; 64
    4274:	e0 e0       	ldi	r30, 0x00	; 0
    4276:	f6 e0       	ldi	r31, 0x06	; 6
    4278:	86 83       	std	Z+6, r24	; 0x06
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	98 e8       	ldi	r25, 0x88	; 136
    427e:	a3 e1       	ldi	r26, 0x13	; 19
    4280:	b0 e0       	ldi	r27, 0x00	; 0
    4282:	01 97       	sbiw	r24, 0x01	; 1
    4284:	a1 09       	sbc	r26, r1
    4286:	b1 09       	sbc	r27, r1
    4288:	00 97       	sbiw	r24, 0x00	; 0
    428a:	a1 05       	cpc	r26, r1
    428c:	b1 05       	cpc	r27, r1
    428e:	c9 f7       	brne	.-14     	; 0x4282 <init_animation+0x358>
    4290:	80 e8       	ldi	r24, 0x80	; 128
    4292:	e0 e0       	ldi	r30, 0x00	; 0
    4294:	f6 e0       	ldi	r31, 0x06	; 6
    4296:	86 83       	std	Z+6, r24	; 0x06
    4298:	80 e0       	ldi	r24, 0x00	; 0
    429a:	98 e8       	ldi	r25, 0x88	; 136
    429c:	a3 e1       	ldi	r26, 0x13	; 19
    429e:	b0 e0       	ldi	r27, 0x00	; 0
    42a0:	01 97       	sbiw	r24, 0x01	; 1
    42a2:	a1 09       	sbc	r26, r1
    42a4:	b1 09       	sbc	r27, r1
    42a6:	00 97       	sbiw	r24, 0x00	; 0
    42a8:	a1 05       	cpc	r26, r1
    42aa:	b1 05       	cpc	r27, r1
    42ac:	c9 f7       	brne	.-14     	; 0x42a0 <init_animation+0x376>
    42ae:	81 e0       	ldi	r24, 0x01	; 1
    42b0:	e0 e2       	ldi	r30, 0x20	; 32
    42b2:	f6 e0       	ldi	r31, 0x06	; 6
    42b4:	86 83       	std	Z+6, r24	; 0x06
    42b6:	80 e0       	ldi	r24, 0x00	; 0
    42b8:	98 e8       	ldi	r25, 0x88	; 136
    42ba:	a3 e1       	ldi	r26, 0x13	; 19
    42bc:	b0 e0       	ldi	r27, 0x00	; 0
    42be:	01 97       	sbiw	r24, 0x01	; 1
    42c0:	a1 09       	sbc	r26, r1
    42c2:	b1 09       	sbc	r27, r1
    42c4:	00 97       	sbiw	r24, 0x00	; 0
    42c6:	a1 05       	cpc	r26, r1
    42c8:	b1 05       	cpc	r27, r1
    42ca:	c9 f7       	brne	.-14     	; 0x42be <init_animation+0x394>
    42cc:	82 e0       	ldi	r24, 0x02	; 2
    42ce:	e0 e2       	ldi	r30, 0x20	; 32
    42d0:	f6 e0       	ldi	r31, 0x06	; 6
    42d2:	86 83       	std	Z+6, r24	; 0x06
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	98 e8       	ldi	r25, 0x88	; 136
    42d8:	a3 e1       	ldi	r26, 0x13	; 19
    42da:	b0 e0       	ldi	r27, 0x00	; 0
    42dc:	01 97       	sbiw	r24, 0x01	; 1
    42de:	a1 09       	sbc	r26, r1
    42e0:	b1 09       	sbc	r27, r1
    42e2:	00 97       	sbiw	r24, 0x00	; 0
    42e4:	a1 05       	cpc	r26, r1
    42e6:	b1 05       	cpc	r27, r1
    42e8:	c9 f7       	brne	.-14     	; 0x42dc <init_animation+0x3b2>
	delay_ms(160);
	led3(OFF);
	delay_ms(160);
	led4(OFF);
	delay_ms(160);
    42ea:	08 95       	ret

000042ec <onepos_save_cfg>:
	onepos_config.node_id = node_id;
}

void onepos_set_node_mode(uint8_t node_mode)
{
	onepos_config.node_mode = node_mode;
    42ec:	44 e2       	ldi	r20, 0x24	; 36
    42ee:	50 e0       	ldi	r21, 0x00	; 0
    42f0:	66 e5       	ldi	r22, 0x56	; 86
    42f2:	79 e2       	ldi	r23, 0x29	; 41
    42f4:	80 e0       	ldi	r24, 0x00	; 0
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <nvm_eeprom_erase_and_write_buffer>
    42fc:	08 95       	ret

000042fe <onepos_write_default_cfg>:
    42fe:	88 ec       	ldi	r24, 0xC8	; 200
    4300:	90 e1       	ldi	r25, 0x10	; 16
    4302:	80 93 56 29 	sts	0x2956, r24
    4306:	90 93 57 29 	sts	0x2957, r25
    430a:	86 e6       	ldi	r24, 0x66	; 102
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	80 93 58 29 	sts	0x2958, r24
    4312:	90 93 59 29 	sts	0x2959, r25
    4316:	81 e0       	ldi	r24, 0x01	; 1
    4318:	80 93 5a 29 	sts	0x295A, r24
    431c:	85 e1       	ldi	r24, 0x15	; 21
    431e:	e4 e6       	ldi	r30, 0x64	; 100
    4320:	f3 e2       	ldi	r31, 0x23	; 35
    4322:	ab e5       	ldi	r26, 0x5B	; 91
    4324:	b9 e2       	ldi	r27, 0x29	; 41
    4326:	01 90       	ld	r0, Z+
    4328:	0d 92       	st	X+, r0
    432a:	8a 95       	dec	r24
    432c:	e1 f7       	brne	.-8      	; 0x4326 <onepos_write_default_cfg+0x28>
    432e:	85 e0       	ldi	r24, 0x05	; 5
    4330:	e9 e7       	ldi	r30, 0x79	; 121
    4332:	f3 e2       	ldi	r31, 0x23	; 35
    4334:	a0 e7       	ldi	r26, 0x70	; 112
    4336:	b9 e2       	ldi	r27, 0x29	; 41
    4338:	01 90       	ld	r0, Z+
    433a:	0d 92       	st	X+, r0
    433c:	8a 95       	dec	r24
    433e:	e1 f7       	brne	.-8      	; 0x4338 <onepos_write_default_cfg+0x3a>
    4340:	85 e0       	ldi	r24, 0x05	; 5
    4342:	ee e7       	ldi	r30, 0x7E	; 126
    4344:	f3 e2       	ldi	r31, 0x23	; 35
    4346:	a5 e7       	ldi	r26, 0x75	; 117
    4348:	b9 e2       	ldi	r27, 0x29	; 41
    434a:	01 90       	ld	r0, Z+
    434c:	0d 92       	st	X+, r0
    434e:	8a 95       	dec	r24
    4350:	e1 f7       	brne	.-8      	; 0x434a <onepos_write_default_cfg+0x4c>
    4352:	cc cf       	rjmp	.-104    	; 0x42ec <onepos_save_cfg>
    4354:	08 95       	ret

00004356 <onepos_read_cfg>:
    4356:	44 e2       	ldi	r20, 0x24	; 36
    4358:	50 e0       	ldi	r21, 0x00	; 0
    435a:	66 e5       	ldi	r22, 0x56	; 86
    435c:	79 e2       	ldi	r23, 0x29	; 41
    435e:	80 e0       	ldi	r24, 0x00	; 0
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <nvm_eeprom_read_buffer>
    4366:	80 91 56 29 	lds	r24, 0x2956
    436a:	90 91 57 29 	lds	r25, 0x2957
    436e:	88 3c       	cpi	r24, 0xC8	; 200
    4370:	90 41       	sbci	r25, 0x10	; 16
    4372:	19 f0       	breq	.+6      	; 0x437a <onepos_read_cfg+0x24>
    4374:	c4 df       	rcall	.-120    	; 0x42fe <onepos_write_default_cfg>
    4376:	81 e0       	ldi	r24, 0x01	; 1
    4378:	08 95       	ret
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	08 95       	ret

0000437e <onepos_get_mem_check>:
    437e:	80 91 56 29 	lds	r24, 0x2956
    4382:	90 91 57 29 	lds	r25, 0x2957
    4386:	08 95       	ret

00004388 <onepos_get_namespaceID>:
    4388:	6b e5       	ldi	r22, 0x5B	; 91
    438a:	79 e2       	ldi	r23, 0x29	; 41
    438c:	20 c4       	rjmp	.+2112   	; 0x4bce <strcpy>
    438e:	08 95       	ret

00004390 <onepos_get_ble_scan_interval>:
    4390:	60 e7       	ldi	r22, 0x70	; 112
    4392:	79 e2       	ldi	r23, 0x29	; 41
    4394:	1c c4       	rjmp	.+2104   	; 0x4bce <strcpy>
    4396:	08 95       	ret

00004398 <onepos_get_ble_scan_window>:
    4398:	65 e7       	ldi	r22, 0x75	; 117
    439a:	79 e2       	ldi	r23, 0x29	; 41
    439c:	18 c4       	rjmp	.+2096   	; 0x4bce <strcpy>
    439e:	08 95       	ret

000043a0 <onepos_set_namespaceID>:
}

void onepos_set_namespaceID(char * str)
{
	strcpy(onepos_config.namespaceID,str);
    43a0:	bc 01       	movw	r22, r24
    43a2:	8b e5       	ldi	r24, 0x5B	; 91
    43a4:	99 e2       	ldi	r25, 0x29	; 41
    43a6:	13 c4       	rjmp	.+2086   	; 0x4bce <strcpy>
    43a8:	08 95       	ret

000043aa <onepos_set_ble_scan_interval>:
}

void onepos_set_ble_scan_interval(char * str)
{
	strcpy(onepos_config.ble_scan_interval,str);
    43aa:	bc 01       	movw	r22, r24
    43ac:	80 e7       	ldi	r24, 0x70	; 112
    43ae:	99 e2       	ldi	r25, 0x29	; 41
    43b0:	0e c4       	rjmp	.+2076   	; 0x4bce <strcpy>
    43b2:	08 95       	ret

000043b4 <onepos_set_ble_scan_window>:
}

void onepos_set_ble_scan_window(char * str)
{
	strcpy(onepos_config.ble_scan_window,str);
    43b4:	bc 01       	movw	r22, r24
    43b6:	85 e7       	ldi	r24, 0x75	; 117
    43b8:	99 e2       	ldi	r25, 0x29	; 41
    43ba:	09 c4       	rjmp	.+2066   	; 0x4bce <strcpy>
    43bc:	08 95       	ret

000043be <onepos_configure_interface>:
	printf("6. SAVE AND EXIT\n");
	printf("Select a number to change the current configuration: ");
}

uint8_t onepos_configure_interface(void)
{
    43be:	2f 92       	push	r2
    43c0:	3f 92       	push	r3
    43c2:	4f 92       	push	r4
    43c4:	5f 92       	push	r5
    43c6:	6f 92       	push	r6
    43c8:	7f 92       	push	r7
    43ca:	8f 92       	push	r8
    43cc:	9f 92       	push	r9
    43ce:	af 92       	push	r10
    43d0:	bf 92       	push	r11
    43d2:	cf 92       	push	r12
    43d4:	df 92       	push	r13
    43d6:	ef 92       	push	r14
    43d8:	ff 92       	push	r15
    43da:	0f 93       	push	r16
    43dc:	1f 93       	push	r17
    43de:	cf 93       	push	r28
    43e0:	df 93       	push	r29
    43e2:	cd b7       	in	r28, 0x3d	; 61
    43e4:	de b7       	in	r29, 0x3e	; 62
    43e6:	cb 54       	subi	r28, 0x4B	; 75
    43e8:	d1 09       	sbc	r29, r1
    43ea:	cd bf       	out	0x3d, r28	; 61
    43ec:	de bf       	out	0x3e, r29	; 62
	char new_namespaceID[21];
	char new_ble_scan_interval[5]; 
	char new_ble_scan_window[5]; 
	uint8_t new_node_id=0;
    43ee:	18 a2       	std	Y+32, r1	; 0x20
	uint8_t new_node_mode=0;
    43f0:	19 a2       	std	Y+33, r1	; 0x21
{
	char namespaceID[21];
	char ble_scan_interval[5];
	char ble_scan_window[5];
	
	onepos_get_namespaceID(namespaceID);
    43f2:	6e 01       	movw	r12, r28
    43f4:	23 e2       	ldi	r18, 0x23	; 35
    43f6:	c2 0e       	add	r12, r18
    43f8:	d1 1c       	adc	r13, r1
	onepos_get_ble_scan_interval(ble_scan_interval);
    43fa:	7e 01       	movw	r14, r28
    43fc:	3d e3       	ldi	r19, 0x3D	; 61
    43fe:	e3 0e       	add	r14, r19
    4400:	f1 1c       	adc	r15, r1
	onepos_get_ble_scan_window(ble_scan_window);
    4402:	8e 01       	movw	r16, r28
    4404:	08 5c       	subi	r16, 0xC8	; 200
    4406:	1f 4f       	sbci	r17, 0xFF	; 255
}


uint16_t onepos_get_mem_check(void)
{
	return onepos_config.mem_check;
    4408:	0f 2e       	mov	r0, r31
    440a:	f6 e5       	ldi	r31, 0x56	; 86
    440c:	2f 2e       	mov	r2, r31
    440e:	f9 e2       	ldi	r31, 0x29	; 41
    4410:	3f 2e       	mov	r3, r31
    4412:	f0 2d       	mov	r31, r0
	onepos_get_ble_scan_interval(ble_scan_interval);
	onepos_get_ble_scan_window(ble_scan_window);
	
	printf("\n-----------------------\n");
	printf("Current Configuration: \n");
	printf("   MEM CHECK         : %#x\n",onepos_get_mem_check());
    4414:	0f 2e       	mov	r0, r31
    4416:	f4 ed       	ldi	r31, 0xD4	; 212
    4418:	8f 2e       	mov	r8, r31
    441a:	f3 e2       	ldi	r31, 0x23	; 35
    441c:	9f 2e       	mov	r9, r31
    441e:	f0 2d       	mov	r31, r0
	return onepos_config.mem_check;
}

uint16_t onepos_get_node_id(void)
{
	return onepos_config.node_id;
    4420:	0f 2e       	mov	r0, r31
    4422:	f8 e5       	ldi	r31, 0x58	; 88
    4424:	4f 2e       	mov	r4, r31
    4426:	f9 e2       	ldi	r31, 0x29	; 41
    4428:	5f 2e       	mov	r5, r31
    442a:	f0 2d       	mov	r31, r0
	onepos_get_ble_scan_window(ble_scan_window);
	
	printf("\n-----------------------\n");
	printf("Current Configuration: \n");
	printf("   MEM CHECK         : %#x\n",onepos_get_mem_check());
	printf("1. NODE ID           : %d\n",onepos_get_node_id());
    442c:	0f 2e       	mov	r0, r31
    442e:	f0 ef       	ldi	r31, 0xF0	; 240
    4430:	af 2e       	mov	r10, r31
    4432:	f3 e2       	ldi	r31, 0x23	; 35
    4434:	bf 2e       	mov	r11, r31
    4436:	f0 2d       	mov	r31, r0
	uint8_t selection;
	
	while(!end_config)
	{
		print_menu1();
		scanf("%d", &selection);
    4438:	3e 01       	movw	r6, r28
    443a:	82 e2       	ldi	r24, 0x22	; 34
    443c:	68 0e       	add	r6, r24
    443e:	71 1c       	adc	r7, r1
				}
				onepos_set_node_mode(new_node_mode);
			break;
			case 3:
				printf("\nWrite the new namespace ID: ");
				scanf("%20s",new_namespaceID);
    4440:	fe 01       	movw	r30, r28
    4442:	31 96       	adiw	r30, 0x01	; 1
    4444:	24 96       	adiw	r28, 0x04	; 4
    4446:	ee af       	std	Y+62, r30	; 0x3e
    4448:	ff af       	std	Y+63, r31	; 0x3f
    444a:	24 97       	sbiw	r28, 0x04	; 4
				scanf("%4s",new_ble_scan_interval);
				onepos_set_ble_scan_interval(new_ble_scan_interval);
			break;
			case 5:
				printf("\nWrite the new ble scan window( 16 hex): ");
				scanf("%4s",new_ble_scan_window);
    444c:	9e 01       	movw	r18, r28
    444e:	25 5e       	subi	r18, 0xE5	; 229
    4450:	3f 4f       	sbci	r19, 0xFF	; 255
    4452:	26 96       	adiw	r28, 0x06	; 6
    4454:	2e af       	std	Y+62, r18	; 0x3e
    4456:	3f af       	std	Y+63, r19	; 0x3f
    4458:	26 97       	sbiw	r28, 0x06	; 6
				scanf("%20s",new_namespaceID);
				onepos_set_namespaceID(new_namespaceID);
			break;
			case 4:
				printf("\nWrite the new ble scan interval(16 hex): ");
				scanf("%4s",new_ble_scan_interval);
    445a:	ce 01       	movw	r24, r28
    445c:	46 96       	adiw	r24, 0x16	; 22
    445e:	28 96       	adiw	r28, 0x08	; 8
    4460:	8e af       	std	Y+62, r24	; 0x3e
    4462:	9f af       	std	Y+63, r25	; 0x3f
    4464:	28 97       	sbiw	r28, 0x08	; 8
		
		switch(selection)
		{
			case 1:
				printf("\nWrite new node ID: ");
				scanf("%d",&new_node_id);
    4466:	7f 96       	adiw	r30, 0x1f	; 31
    4468:	2a 96       	adiw	r28, 0x0a	; 10
    446a:	ee af       	std	Y+62, r30	; 0x3e
    446c:	ff af       	std	Y+63, r31	; 0x3f
    446e:	2a 97       	sbiw	r28, 0x0a	; 10
				onepos_set_node_id(new_node_id);
			break;
			case 2:
				printf("\nWrite 0 to start as Beacon and 1 to start as OnePos: ");
				scanf("%d",&new_node_mode);
    4470:	2a 5f       	subi	r18, 0xFA	; 250
    4472:	3f 4f       	sbci	r19, 0xFF	; 255
    4474:	2c 96       	adiw	r28, 0x0c	; 12
    4476:	2e af       	std	Y+62, r18	; 0x3e
    4478:	3f af       	std	Y+63, r19	; 0x3f
    447a:	2c 97       	sbiw	r28, 0x0c	; 12
{
	char namespaceID[21];
	char ble_scan_interval[5];
	char ble_scan_window[5];
	
	onepos_get_namespaceID(namespaceID);
    447c:	c6 01       	movw	r24, r12
    447e:	84 df       	rcall	.-248    	; 0x4388 <onepos_get_namespaceID>
	onepos_get_ble_scan_interval(ble_scan_interval);
    4480:	c7 01       	movw	r24, r14
    4482:	86 df       	rcall	.-244    	; 0x4390 <onepos_get_ble_scan_interval>
	onepos_get_ble_scan_window(ble_scan_window);
    4484:	c8 01       	movw	r24, r16
    4486:	88 df       	rcall	.-240    	; 0x4398 <onepos_get_ble_scan_window>
	
	printf("\n-----------------------\n");
    4488:	83 ea       	ldi	r24, 0xA3	; 163
    448a:	93 e2       	ldi	r25, 0x23	; 35
    448c:	b8 d3       	rcall	.+1904   	; 0x4bfe <puts>
	printf("Current Configuration: \n");
    448e:	8c eb       	ldi	r24, 0xBC	; 188
    4490:	93 e2       	ldi	r25, 0x23	; 35
    4492:	b5 d3       	rcall	.+1898   	; 0x4bfe <puts>
}


uint16_t onepos_get_mem_check(void)
{
	return onepos_config.mem_check;
    4494:	f1 01       	movw	r30, r2
    4496:	80 81       	ld	r24, Z
    4498:	91 81       	ldd	r25, Z+1	; 0x01
	onepos_get_ble_scan_interval(ble_scan_interval);
	onepos_get_ble_scan_window(ble_scan_window);
	
	printf("\n-----------------------\n");
	printf("Current Configuration: \n");
	printf("   MEM CHECK         : %#x\n",onepos_get_mem_check());
    449a:	9f 93       	push	r25
    449c:	8f 93       	push	r24
    449e:	9f 92       	push	r9
    44a0:	8f 92       	push	r8
    44a2:	9c d3       	rcall	.+1848   	; 0x4bdc <printf>
	return onepos_config.mem_check;
}

uint16_t onepos_get_node_id(void)
{
	return onepos_config.node_id;
    44a4:	f2 01       	movw	r30, r4
    44a6:	80 81       	ld	r24, Z
    44a8:	91 81       	ldd	r25, Z+1	; 0x01
	onepos_get_ble_scan_window(ble_scan_window);
	
	printf("\n-----------------------\n");
	printf("Current Configuration: \n");
	printf("   MEM CHECK         : %#x\n",onepos_get_mem_check());
	printf("1. NODE ID           : %d\n",onepos_get_node_id());
    44aa:	9f 93       	push	r25
    44ac:	8f 93       	push	r24
    44ae:	bf 92       	push	r11
    44b0:	af 92       	push	r10
    44b2:	94 d3       	rcall	.+1832   	; 0x4bdc <printf>
	return onepos_config.node_id;
}

uint8_t onepos_get_node_mode(void)
{
	return onepos_config.node_mode;
    44b4:	80 91 5a 29 	lds	r24, 0x295A
	
	printf("\n-----------------------\n");
	printf("Current Configuration: \n");
	printf("   MEM CHECK         : %#x\n",onepos_get_mem_check());
	printf("1. NODE ID           : %d\n",onepos_get_node_id());
	printf("2. NODE MODE         : %s\n",onepos_get_node_mode() ? "Start as OnePos" : "Start as Beacon" );
    44b8:	cd bf       	out	0x3d, r28	; 61
    44ba:	de bf       	out	0x3e, r29	; 62
    44bc:	88 23       	and	r24, r24
    44be:	19 f0       	breq	.+6      	; 0x44c6 <onepos_configure_interface+0x108>
    44c0:	83 e8       	ldi	r24, 0x83	; 131
    44c2:	93 e2       	ldi	r25, 0x23	; 35
    44c4:	02 c0       	rjmp	.+4      	; 0x44ca <onepos_configure_interface+0x10c>
    44c6:	83 e9       	ldi	r24, 0x93	; 147
    44c8:	93 e2       	ldi	r25, 0x23	; 35
    44ca:	9f 93       	push	r25
    44cc:	8f 93       	push	r24
    44ce:	8b e0       	ldi	r24, 0x0B	; 11
    44d0:	94 e2       	ldi	r25, 0x24	; 36
    44d2:	9f 93       	push	r25
    44d4:	8f 93       	push	r24
    44d6:	82 d3       	rcall	.+1796   	; 0x4bdc <printf>
	printf("3. NAMESPACE ID      : %s\n",namespaceID);
    44d8:	df 92       	push	r13
    44da:	cf 92       	push	r12
    44dc:	86 e2       	ldi	r24, 0x26	; 38
    44de:	94 e2       	ldi	r25, 0x24	; 36
    44e0:	9f 93       	push	r25
    44e2:	8f 93       	push	r24
    44e4:	7b d3       	rcall	.+1782   	; 0x4bdc <printf>
	printf("4. BLE SCAN INTERVAL : %s\n",ble_scan_interval);
    44e6:	ff 92       	push	r15
    44e8:	ef 92       	push	r14
    44ea:	81 e4       	ldi	r24, 0x41	; 65
    44ec:	94 e2       	ldi	r25, 0x24	; 36
    44ee:	9f 93       	push	r25
    44f0:	8f 93       	push	r24
    44f2:	74 d3       	rcall	.+1768   	; 0x4bdc <printf>
	printf("5. BLE SCAN WINDOW   : %s\n",ble_scan_window);
    44f4:	1f 93       	push	r17
    44f6:	0f 93       	push	r16
    44f8:	8c e5       	ldi	r24, 0x5C	; 92
    44fa:	94 e2       	ldi	r25, 0x24	; 36
    44fc:	9f 93       	push	r25
    44fe:	8f 93       	push	r24
    4500:	6d d3       	rcall	.+1754   	; 0x4bdc <printf>
	printf("6. SAVE AND EXIT\n");
    4502:	87 e7       	ldi	r24, 0x77	; 119
    4504:	94 e2       	ldi	r25, 0x24	; 36
    4506:	7b d3       	rcall	.+1782   	; 0x4bfe <puts>
	printf("Select a number to change the current configuration: ");
    4508:	88 e8       	ldi	r24, 0x88	; 136
    450a:	94 e2       	ldi	r25, 0x24	; 36
    450c:	9f 93       	push	r25
    450e:	8f 93       	push	r24
    4510:	65 d3       	rcall	.+1738   	; 0x4bdc <printf>
	uint8_t selection;
	
	while(!end_config)
	{
		print_menu1();
		scanf("%d", &selection);
    4512:	7f 92       	push	r7
    4514:	6f 92       	push	r6
    4516:	8e eb       	ldi	r24, 0xBE	; 190
    4518:	94 e2       	ldi	r25, 0x24	; 36
    451a:	9f 93       	push	r25
    451c:	8f 93       	push	r24
    451e:	9c d3       	rcall	.+1848   	; 0x4c58 <scanf>
		
		switch(selection)
    4520:	cd bf       	out	0x3d, r28	; 61
    4522:	de bf       	out	0x3e, r29	; 62
    4524:	8a a1       	ldd	r24, Y+34	; 0x22
    4526:	83 30       	cpi	r24, 0x03	; 3
    4528:	09 f4       	brne	.+2      	; 0x452c <onepos_configure_interface+0x16e>
    452a:	59 c0       	rjmp	.+178    	; 0x45de <onepos_configure_interface+0x220>
    452c:	28 f4       	brcc	.+10     	; 0x4538 <onepos_configure_interface+0x17a>
    452e:	81 30       	cpi	r24, 0x01	; 1
    4530:	61 f0       	breq	.+24     	; 0x454a <onepos_configure_interface+0x18c>
    4532:	82 30       	cpi	r24, 0x02	; 2
    4534:	41 f1       	breq	.+80     	; 0x4586 <onepos_configure_interface+0x1c8>
    4536:	b1 c0       	rjmp	.+354    	; 0x469a <onepos_configure_interface+0x2dc>
    4538:	85 30       	cpi	r24, 0x05	; 5
    453a:	09 f4       	brne	.+2      	; 0x453e <onepos_configure_interface+0x180>
    453c:	88 c0       	rjmp	.+272    	; 0x464e <onepos_configure_interface+0x290>
    453e:	08 f4       	brcc	.+2      	; 0x4542 <onepos_configure_interface+0x184>
    4540:	6a c0       	rjmp	.+212    	; 0x4616 <onepos_configure_interface+0x258>
    4542:	86 30       	cpi	r24, 0x06	; 6
    4544:	09 f4       	brne	.+2      	; 0x4548 <onepos_configure_interface+0x18a>
    4546:	9f c0       	rjmp	.+318    	; 0x4686 <onepos_configure_interface+0x2c8>
    4548:	a8 c0       	rjmp	.+336    	; 0x469a <onepos_configure_interface+0x2dc>
		{
			case 1:
				printf("\nWrite new node ID: ");
    454a:	81 ec       	ldi	r24, 0xC1	; 193
    454c:	94 e2       	ldi	r25, 0x24	; 36
    454e:	9f 93       	push	r25
    4550:	8f 93       	push	r24
    4552:	44 d3       	rcall	.+1672   	; 0x4bdc <printf>
				scanf("%d",&new_node_id);
    4554:	2a 96       	adiw	r28, 0x0a	; 10
    4556:	9f ad       	ldd	r25, Y+63	; 0x3f
    4558:	2a 97       	sbiw	r28, 0x0a	; 10
    455a:	9f 93       	push	r25
    455c:	29 96       	adiw	r28, 0x09	; 9
    455e:	ef ad       	ldd	r30, Y+63	; 0x3f
    4560:	29 97       	sbiw	r28, 0x09	; 9
    4562:	ef 93       	push	r30
    4564:	8e eb       	ldi	r24, 0xBE	; 190
    4566:	94 e2       	ldi	r25, 0x24	; 36
    4568:	9f 93       	push	r25
    456a:	8f 93       	push	r24
    456c:	75 d3       	rcall	.+1770   	; 0x4c58 <scanf>
				onepos_set_node_id(new_node_id);
    456e:	88 a1       	ldd	r24, Y+32	; 0x20
    4570:	90 e0       	ldi	r25, 0x00	; 0



void onepos_set_node_id(uint16_t node_id)
{
	onepos_config.node_id = node_id;
    4572:	f2 01       	movw	r30, r4
    4574:	80 83       	st	Z, r24
    4576:	91 83       	std	Z+1, r25	; 0x01
    4578:	0f 90       	pop	r0
    457a:	0f 90       	pop	r0
    457c:	0f 90       	pop	r0
    457e:	0f 90       	pop	r0
    4580:	0f 90       	pop	r0
    4582:	0f 90       	pop	r0
    4584:	85 c0       	rjmp	.+266    	; 0x4690 <onepos_configure_interface+0x2d2>
				printf("\nWrite new node ID: ");
				scanf("%d",&new_node_id);
				onepos_set_node_id(new_node_id);
			break;
			case 2:
				printf("\nWrite 0 to start as Beacon and 1 to start as OnePos: ");
    4586:	86 ed       	ldi	r24, 0xD6	; 214
    4588:	94 e2       	ldi	r25, 0x24	; 36
    458a:	9f 93       	push	r25
    458c:	8f 93       	push	r24
    458e:	26 d3       	rcall	.+1612   	; 0x4bdc <printf>
				scanf("%d",&new_node_mode);
    4590:	2c 96       	adiw	r28, 0x0c	; 12
    4592:	ff ad       	ldd	r31, Y+63	; 0x3f
    4594:	2c 97       	sbiw	r28, 0x0c	; 12
    4596:	ff 93       	push	r31
    4598:	2b 96       	adiw	r28, 0x0b	; 11
    459a:	2f ad       	ldd	r18, Y+63	; 0x3f
    459c:	2b 97       	sbiw	r28, 0x0b	; 11
    459e:	2f 93       	push	r18
    45a0:	8e eb       	ldi	r24, 0xBE	; 190
    45a2:	94 e2       	ldi	r25, 0x24	; 36
    45a4:	9f 93       	push	r25
    45a6:	8f 93       	push	r24
    45a8:	57 d3       	rcall	.+1710   	; 0x4c58 <scanf>
				if ( !(new_node_mode == 0 | new_node_id == 1) )
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	0f 90       	pop	r0
    45ae:	0f 90       	pop	r0
    45b0:	0f 90       	pop	r0
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	0f 90       	pop	r0
    45b8:	98 a1       	ldd	r25, Y+32	; 0x20
    45ba:	91 30       	cpi	r25, 0x01	; 1
    45bc:	09 f4       	brne	.+2      	; 0x45c0 <onepos_configure_interface+0x202>
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	88 23       	and	r24, r24
    45c2:	49 f0       	breq	.+18     	; 0x45d6 <onepos_configure_interface+0x218>
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	99 a1       	ldd	r25, Y+33	; 0x21
    45c8:	91 11       	cpse	r25, r1
    45ca:	01 c0       	rjmp	.+2      	; 0x45ce <onepos_configure_interface+0x210>
    45cc:	80 e0       	ldi	r24, 0x00	; 0
    45ce:	88 23       	and	r24, r24
    45d0:	11 f0       	breq	.+4      	; 0x45d6 <onepos_configure_interface+0x218>
				{
					new_node_mode = 1;
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	89 a3       	std	Y+33, r24	; 0x21
				}
				onepos_set_node_mode(new_node_mode);
    45d6:	89 a1       	ldd	r24, Y+33	; 0x21
	onepos_config.node_id = node_id;
}

void onepos_set_node_mode(uint8_t node_mode)
{
	onepos_config.node_mode = node_mode;
    45d8:	80 93 5a 29 	sts	0x295A, r24
    45dc:	59 c0       	rjmp	.+178    	; 0x4690 <onepos_configure_interface+0x2d2>
					new_node_mode = 1;
				}
				onepos_set_node_mode(new_node_mode);
			break;
			case 3:
				printf("\nWrite the new namespace ID: ");
    45de:	8d e0       	ldi	r24, 0x0D	; 13
    45e0:	95 e2       	ldi	r25, 0x25	; 37
    45e2:	9f 93       	push	r25
    45e4:	8f 93       	push	r24
    45e6:	fa d2       	rcall	.+1524   	; 0x4bdc <printf>
				scanf("%20s",new_namespaceID);
    45e8:	24 96       	adiw	r28, 0x04	; 4
    45ea:	3f ad       	ldd	r19, Y+63	; 0x3f
    45ec:	24 97       	sbiw	r28, 0x04	; 4
    45ee:	3f 93       	push	r19
    45f0:	23 96       	adiw	r28, 0x03	; 3
    45f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    45f4:	23 97       	sbiw	r28, 0x03	; 3
    45f6:	8f 93       	push	r24
    45f8:	8b e2       	ldi	r24, 0x2B	; 43
    45fa:	95 e2       	ldi	r25, 0x25	; 37
    45fc:	9f 93       	push	r25
    45fe:	8f 93       	push	r24
    4600:	2b d3       	rcall	.+1622   	; 0x4c58 <scanf>
				onepos_set_namespaceID(new_namespaceID);
    4602:	ce 01       	movw	r24, r28
    4604:	01 96       	adiw	r24, 0x01	; 1
    4606:	cc de       	rcall	.-616    	; 0x43a0 <onepos_set_namespaceID>
			break;
    4608:	0f 90       	pop	r0
    460a:	0f 90       	pop	r0
    460c:	0f 90       	pop	r0
    460e:	0f 90       	pop	r0
    4610:	0f 90       	pop	r0
    4612:	0f 90       	pop	r0
    4614:	3d c0       	rjmp	.+122    	; 0x4690 <onepos_configure_interface+0x2d2>
			case 4:
				printf("\nWrite the new ble scan interval(16 hex): ");
    4616:	80 e3       	ldi	r24, 0x30	; 48
    4618:	95 e2       	ldi	r25, 0x25	; 37
    461a:	9f 93       	push	r25
    461c:	8f 93       	push	r24
    461e:	de d2       	rcall	.+1468   	; 0x4bdc <printf>
				scanf("%4s",new_ble_scan_interval);
    4620:	28 96       	adiw	r28, 0x08	; 8
    4622:	9f ad       	ldd	r25, Y+63	; 0x3f
    4624:	28 97       	sbiw	r28, 0x08	; 8
    4626:	9f 93       	push	r25
    4628:	27 96       	adiw	r28, 0x07	; 7
    462a:	ef ad       	ldd	r30, Y+63	; 0x3f
    462c:	27 97       	sbiw	r28, 0x07	; 7
    462e:	ef 93       	push	r30
    4630:	8b e5       	ldi	r24, 0x5B	; 91
    4632:	95 e2       	ldi	r25, 0x25	; 37
    4634:	9f 93       	push	r25
    4636:	8f 93       	push	r24
    4638:	0f d3       	rcall	.+1566   	; 0x4c58 <scanf>
				onepos_set_ble_scan_interval(new_ble_scan_interval);
    463a:	ce 01       	movw	r24, r28
    463c:	46 96       	adiw	r24, 0x16	; 22
    463e:	b5 de       	rcall	.-662    	; 0x43aa <onepos_set_ble_scan_interval>
			break;
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	0f 90       	pop	r0
    4646:	0f 90       	pop	r0
    4648:	0f 90       	pop	r0
    464a:	0f 90       	pop	r0
    464c:	21 c0       	rjmp	.+66     	; 0x4690 <onepos_configure_interface+0x2d2>
			case 5:
				printf("\nWrite the new ble scan window( 16 hex): ");
    464e:	8f e5       	ldi	r24, 0x5F	; 95
    4650:	95 e2       	ldi	r25, 0x25	; 37
    4652:	9f 93       	push	r25
    4654:	8f 93       	push	r24
    4656:	c2 d2       	rcall	.+1412   	; 0x4bdc <printf>
				scanf("%4s",new_ble_scan_window);
    4658:	26 96       	adiw	r28, 0x06	; 6
    465a:	ff ad       	ldd	r31, Y+63	; 0x3f
    465c:	26 97       	sbiw	r28, 0x06	; 6
    465e:	ff 93       	push	r31
    4660:	25 96       	adiw	r28, 0x05	; 5
    4662:	2f ad       	ldd	r18, Y+63	; 0x3f
    4664:	25 97       	sbiw	r28, 0x05	; 5
    4666:	2f 93       	push	r18
    4668:	8b e5       	ldi	r24, 0x5B	; 91
    466a:	95 e2       	ldi	r25, 0x25	; 37
    466c:	9f 93       	push	r25
    466e:	8f 93       	push	r24
    4670:	f3 d2       	rcall	.+1510   	; 0x4c58 <scanf>
				onepos_set_ble_scan_window(new_ble_scan_window);
    4672:	ce 01       	movw	r24, r28
    4674:	4b 96       	adiw	r24, 0x1b	; 27
    4676:	9e de       	rcall	.-708    	; 0x43b4 <onepos_set_ble_scan_window>
			break;
    4678:	0f 90       	pop	r0
    467a:	0f 90       	pop	r0
    467c:	0f 90       	pop	r0
    467e:	0f 90       	pop	r0
    4680:	0f 90       	pop	r0
    4682:	0f 90       	pop	r0
    4684:	05 c0       	rjmp	.+10     	; 0x4690 <onepos_configure_interface+0x2d2>
			case 6:
				onepos_save_cfg();
    4686:	32 de       	rcall	.-924    	; 0x42ec <onepos_save_cfg>
				printf("\nConfiguration saved. Please restart the system\n");
    4688:	89 e8       	ldi	r24, 0x89	; 137
    468a:	95 e2       	ldi	r25, 0x25	; 37
    468c:	b8 d2       	rcall	.+1392   	; 0x4bfe <puts>
    468e:	09 c0       	rjmp	.+18     	; 0x46a2 <onepos_configure_interface+0x2e4>
	uint8_t new_node_id=0;
	uint8_t new_node_mode=0;
	uint8_t end_config = 0;
	uint8_t selection;
	
	while(!end_config)
    4690:	30 e0       	ldi	r19, 0x00	; 0
    4692:	33 23       	and	r19, r19
    4694:	09 f4       	brne	.+2      	; 0x4698 <onepos_configure_interface+0x2da>
    4696:	f2 ce       	rjmp	.-540    	; 0x447c <onepos_configure_interface+0xbe>
    4698:	04 c0       	rjmp	.+8      	; 0x46a2 <onepos_configure_interface+0x2e4>
    469a:	80 e0       	ldi	r24, 0x00	; 0
    469c:	88 23       	and	r24, r24
    469e:	09 f4       	brne	.+2      	; 0x46a2 <onepos_configure_interface+0x2e4>
    46a0:	ed ce       	rjmp	.-550    	; 0x447c <onepos_configure_interface+0xbe>
			break;
		}
	}
	
	
}
    46a2:	c5 5b       	subi	r28, 0xB5	; 181
    46a4:	df 4f       	sbci	r29, 0xFF	; 255
    46a6:	cd bf       	out	0x3d, r28	; 61
    46a8:	de bf       	out	0x3e, r29	; 62
    46aa:	df 91       	pop	r29
    46ac:	cf 91       	pop	r28
    46ae:	1f 91       	pop	r17
    46b0:	0f 91       	pop	r16
    46b2:	ff 90       	pop	r15
    46b4:	ef 90       	pop	r14
    46b6:	df 90       	pop	r13
    46b8:	cf 90       	pop	r12
    46ba:	bf 90       	pop	r11
    46bc:	af 90       	pop	r10
    46be:	9f 90       	pop	r9
    46c0:	8f 90       	pop	r8
    46c2:	7f 90       	pop	r7
    46c4:	6f 90       	pop	r6
    46c6:	5f 90       	pop	r5
    46c8:	4f 90       	pop	r4
    46ca:	3f 90       	pop	r3
    46cc:	2f 90       	pop	r2
    46ce:	08 95       	ret

000046d0 <usb_putchar_printf>:
	usb_putchar(*string++);
}


#ifdef PRINTF_USB
int usb_putchar_printf(char var, FILE *stream) {
    46d0:	cf 93       	push	r28
    46d2:	c8 2f       	mov	r28, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
    46d4:	8a 30       	cpi	r24, 0x0A	; 10
    46d6:	21 f4       	brne	.+8      	; 0x46e0 <usb_putchar_printf+0x10>
	
}

void usb_putchar(char a)
{
	udi_cdc_putc(a);
    46d8:	8d e0       	ldi	r24, 0x0D	; 13
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	0e 94 a6 04 	call	0x94c	; 0x94c <udi_cdc_putc>
    46e0:	8c 2f       	mov	r24, r28
    46e2:	99 27       	eor	r25, r25
    46e4:	87 fd       	sbrc	r24, 7
    46e6:	90 95       	com	r25
    46e8:	0e 94 a6 04 	call	0x94c	; 0x94c <udi_cdc_putc>
int usb_putchar_printf(char var, FILE *stream) {
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
	usb_putchar(var);
	return 0;
}
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	cf 91       	pop	r28
    46f2:	08 95       	ret

000046f4 <usb_getchar_scanf>:

int usb_getchar_scanf(FILE *stream)
{
    46f4:	0f 93       	push	r16
    46f6:	1f 93       	push	r17
    46f8:	cf 93       	push	r28
    46fa:	df 93       	push	r29
    46fc:	8c 01       	movw	r16, r24
	return udi_cdc_getc();
}

int usb_is_rx_ready(void)
{
	return udi_cdc_is_rx_ready();
    46fe:	0e 94 e5 03 	call	0x7ca	; 0x7ca <udi_cdc_is_rx_ready>

int usb_getchar_scanf(FILE *stream)
{
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
    4702:	88 23       	and	r24, r24
    4704:	e1 f3       	breq	.-8      	; 0x46fe <usb_getchar_scanf+0xa>
	udi_cdc_putc(a);
}

char usb_getchar(void)
{
	return udi_cdc_getc();
    4706:	0e 94 31 04 	call	0x862	; 0x862 <udi_cdc_getc>
    470a:	ec 01       	movw	r28, r24
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
	u8Data=usb_getchar();
	//echo input data
	usb_putchar_printf(u8Data,stream);
    470c:	b8 01       	movw	r22, r16
    470e:	e0 df       	rcall	.-64     	; 0x46d0 <usb_putchar_printf>
	// Return received data
	return u8Data;
}
    4710:	ce 01       	movw	r24, r28
    4712:	99 27       	eor	r25, r25
    4714:	df 91       	pop	r29
    4716:	cf 91       	pop	r28
    4718:	1f 91       	pop	r17
    471a:	0f 91       	pop	r16
    471c:	08 95       	ret

0000471e <usb_init>:

#include "./../include/usb_serial.h"

void usb_init(void)
{
	irq_initialize_vectors();
    471e:	87 e0       	ldi	r24, 0x07	; 7
    4720:	e0 ea       	ldi	r30, 0xA0	; 160
    4722:	f0 e0       	ldi	r31, 0x00	; 0
    4724:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    4726:	78 94       	sei
	udc_start();
    4728:	0e 94 94 05 	call	0xb28	; 0xb28 <udc_start>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    472c:	0e 94 75 0e 	call	0x1cea	; 0x1cea <udd_attach>
	udc_attach();
	
	#ifdef PRINTF_USB
	// setup our stdio stream
	stdout = &mystdout;
    4730:	84 ed       	ldi	r24, 0xD4	; 212
    4732:	90 e2       	ldi	r25, 0x20	; 32
    4734:	80 93 7d 29 	sts	0x297D, r24
    4738:	90 93 7e 29 	sts	0x297E, r25
	stdin = &mystdout;
    473c:	80 93 7b 29 	sts	0x297B, r24
    4740:	90 93 7c 29 	sts	0x297C, r25
    4744:	08 95       	ret

00004746 <main>:
	}
}


int main (void)
{
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	cd b7       	in	r28, 0x3d	; 61
    474c:	de b7       	in	r29, 0x3e	; 62
    474e:	27 97       	sbiw	r28, 0x07	; 7
    4750:	cd bf       	out	0x3d, r28	; 61
    4752:	de bf       	out	0x3e, r29	; 62
	init_onepos();
    4754:	ac db       	rcall	.-2216   	; 0x3eae <init_onepos>
	openspi();
    4756:	f1 da       	rcall	.-2590   	; 0x3d3a <openspi>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    4758:	80 91 e6 20 	lds	r24, 0x20E6
    475c:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    475e:	80 91 e7 20 	lds	r24, 0x20E7
    4762:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    4764:	80 91 e8 20 	lds	r24, 0x20E8
    4768:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    476a:	80 91 e2 20 	lds	r24, 0x20E2
    476e:	90 91 e3 20 	lds	r25, 0x20E3
    4772:	a0 91 e4 20 	lds	r26, 0x20E4
    4776:	b0 91 e5 20 	lds	r27, 0x20E5
    477a:	89 83       	std	Y+1, r24	; 0x01
    477c:	9a 83       	std	Y+2, r25	; 0x02
    477e:	ab 83       	std	Y+3, r26	; 0x03
    4780:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    4782:	60 e1       	ldi	r22, 0x10	; 16
    4784:	85 e0       	ldi	r24, 0x05	; 5
    4786:	0e 94 ad 12 	call	0x255a	; 0x255a <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    478a:	be 01       	movw	r22, r28
    478c:	6f 5f       	subi	r22, 0xFF	; 255
    478e:	7f 4f       	sbci	r23, 0xFF	; 255
    4790:	80 ea       	ldi	r24, 0xA0	; 160
    4792:	9a e0       	ldi	r25, 0x0A	; 10
    4794:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <usart_init_rs232>
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	usart_serial_init(USART_RS485, &RS485_SERIAL_OPTIONS);
	
	init_animation();
    4798:	c8 db       	rcall	.-2160   	; 0x3f2a <init_animation>
	
	dwt_show_sys_info();
    479a:	4b d8       	rcall	.-3946   	; 0x3832 <dwt_show_sys_info>
    479c:	80 e0       	ldi	r24, 0x00	; 0
    479e:	9a e6       	ldi	r25, 0x6A	; 106
    47a0:	a8 e1       	ldi	r26, 0x18	; 24
    47a2:	b0 e0       	ldi	r27, 0x00	; 0
    47a4:	01 97       	sbiw	r24, 0x01	; 1
    47a6:	a1 09       	sbc	r26, r1
    47a8:	b1 09       	sbc	r27, r1
    47aa:	00 97       	sbiw	r24, 0x00	; 0
    47ac:	a1 05       	cpc	r26, r1
    47ae:	b1 05       	cpc	r27, r1
    47b0:	c9 f7       	brne	.-14     	; 0x47a4 <main+0x5e>
	

	delay_ms(200);
	
	dwt_run_examples();
    47b2:	78 da       	rcall	.-2832   	; 0x3ca4 <dwt_run_examples>
	
	uint8_t ret;
	
	
	
	ret = onepos_read_cfg();
    47b4:	d0 dd       	rcall	.-1120   	; 0x4356 <onepos_read_cfg>
    47b6:	18 2f       	mov	r17, r24
	printf("READ_CFG: %d. MEMCHECK = %x\n",ret,onepos_get_mem_check());
    47b8:	e2 dd       	rcall	.-1084   	; 0x437e <onepos_get_mem_check>
    47ba:	9f 93       	push	r25
    47bc:	8f 93       	push	r24
    47be:	1f 92       	push	r1
    47c0:	1f 93       	push	r17
    47c2:	8a e0       	ldi	r24, 0x0A	; 10
    47c4:	96 e2       	ldi	r25, 0x26	; 38
    47c6:	9f 93       	push	r25
    47c8:	8f 93       	push	r24
    47ca:	08 d2       	rcall	.+1040   	; 0x4bdc <printf>
	onepos_configure_interface();
    47cc:	f8 dd       	rcall	.-1040   	; 0x43be <onepos_configure_interface>
    47ce:	0f 90       	pop	r0
    47d0:	0f 90       	pop	r0
    47d2:	0f 90       	pop	r0
    47d4:	0f 90       	pop	r0
    47d6:	0f 90       	pop	r0
    47d8:	0f 90       	pop	r0

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    47da:	e0 e0       	ldi	r30, 0x00	; 0
    47dc:	f6 e0       	ldi	r31, 0x06	; 6
    47de:	60 e4       	ldi	r22, 0x40	; 64
    47e0:	50 e0       	ldi	r21, 0x00	; 0
    47e2:	49 e0       	ldi	r20, 0x09	; 9
    47e4:	3d e3       	ldi	r19, 0x3D	; 61
    47e6:	20 e0       	ldi	r18, 0x00	; 0
    47e8:	67 83       	std	Z+7, r22	; 0x07
    47ea:	85 2f       	mov	r24, r21
    47ec:	94 2f       	mov	r25, r20
    47ee:	a3 2f       	mov	r26, r19
    47f0:	b2 2f       	mov	r27, r18
    47f2:	01 97       	sbiw	r24, 0x01	; 1
    47f4:	a1 09       	sbc	r26, r1
    47f6:	b1 09       	sbc	r27, r1
    47f8:	00 97       	sbiw	r24, 0x00	; 0
    47fa:	a1 05       	cpc	r26, r1
    47fc:	b1 05       	cpc	r27, r1
    47fe:	c9 f7       	brne	.-14     	; 0x47f2 <main+0xac>
    4800:	f3 cf       	rjmp	.-26     	; 0x47e8 <main+0xa2>

00004802 <__divsf3>:
    4802:	0c d0       	rcall	.+24     	; 0x481c <__divsf3x>
    4804:	05 c1       	rjmp	.+522    	; 0x4a10 <__fp_round>
    4806:	fd d0       	rcall	.+506    	; 0x4a02 <__fp_pscB>
    4808:	40 f0       	brcs	.+16     	; 0x481a <__divsf3+0x18>
    480a:	f4 d0       	rcall	.+488    	; 0x49f4 <__fp_pscA>
    480c:	30 f0       	brcs	.+12     	; 0x481a <__divsf3+0x18>
    480e:	21 f4       	brne	.+8      	; 0x4818 <__divsf3+0x16>
    4810:	5f 3f       	cpi	r21, 0xFF	; 255
    4812:	19 f0       	breq	.+6      	; 0x481a <__divsf3+0x18>
    4814:	d6 c0       	rjmp	.+428    	; 0x49c2 <__fp_inf>
    4816:	51 11       	cpse	r21, r1
    4818:	2f c1       	rjmp	.+606    	; 0x4a78 <__fp_szero>
    481a:	d9 c0       	rjmp	.+434    	; 0x49ce <__fp_nan>

0000481c <__divsf3x>:
    481c:	0a d1       	rcall	.+532    	; 0x4a32 <__fp_split3>
    481e:	98 f3       	brcs	.-26     	; 0x4806 <__divsf3+0x4>

00004820 <__divsf3_pse>:
    4820:	99 23       	and	r25, r25
    4822:	c9 f3       	breq	.-14     	; 0x4816 <__divsf3+0x14>
    4824:	55 23       	and	r21, r21
    4826:	b1 f3       	breq	.-20     	; 0x4814 <__divsf3+0x12>
    4828:	95 1b       	sub	r25, r21
    482a:	55 0b       	sbc	r21, r21
    482c:	bb 27       	eor	r27, r27
    482e:	aa 27       	eor	r26, r26
    4830:	62 17       	cp	r22, r18
    4832:	73 07       	cpc	r23, r19
    4834:	84 07       	cpc	r24, r20
    4836:	38 f0       	brcs	.+14     	; 0x4846 <__divsf3_pse+0x26>
    4838:	9f 5f       	subi	r25, 0xFF	; 255
    483a:	5f 4f       	sbci	r21, 0xFF	; 255
    483c:	22 0f       	add	r18, r18
    483e:	33 1f       	adc	r19, r19
    4840:	44 1f       	adc	r20, r20
    4842:	aa 1f       	adc	r26, r26
    4844:	a9 f3       	breq	.-22     	; 0x4830 <__divsf3_pse+0x10>
    4846:	33 d0       	rcall	.+102    	; 0x48ae <__divsf3_pse+0x8e>
    4848:	0e 2e       	mov	r0, r30
    484a:	3a f0       	brmi	.+14     	; 0x485a <__divsf3_pse+0x3a>
    484c:	e0 e8       	ldi	r30, 0x80	; 128
    484e:	30 d0       	rcall	.+96     	; 0x48b0 <__divsf3_pse+0x90>
    4850:	91 50       	subi	r25, 0x01	; 1
    4852:	50 40       	sbci	r21, 0x00	; 0
    4854:	e6 95       	lsr	r30
    4856:	00 1c       	adc	r0, r0
    4858:	ca f7       	brpl	.-14     	; 0x484c <__divsf3_pse+0x2c>
    485a:	29 d0       	rcall	.+82     	; 0x48ae <__divsf3_pse+0x8e>
    485c:	fe 2f       	mov	r31, r30
    485e:	27 d0       	rcall	.+78     	; 0x48ae <__divsf3_pse+0x8e>
    4860:	66 0f       	add	r22, r22
    4862:	77 1f       	adc	r23, r23
    4864:	88 1f       	adc	r24, r24
    4866:	bb 1f       	adc	r27, r27
    4868:	26 17       	cp	r18, r22
    486a:	37 07       	cpc	r19, r23
    486c:	48 07       	cpc	r20, r24
    486e:	ab 07       	cpc	r26, r27
    4870:	b0 e8       	ldi	r27, 0x80	; 128
    4872:	09 f0       	breq	.+2      	; 0x4876 <__divsf3_pse+0x56>
    4874:	bb 0b       	sbc	r27, r27
    4876:	80 2d       	mov	r24, r0
    4878:	bf 01       	movw	r22, r30
    487a:	ff 27       	eor	r31, r31
    487c:	93 58       	subi	r25, 0x83	; 131
    487e:	5f 4f       	sbci	r21, 0xFF	; 255
    4880:	2a f0       	brmi	.+10     	; 0x488c <__divsf3_pse+0x6c>
    4882:	9e 3f       	cpi	r25, 0xFE	; 254
    4884:	51 05       	cpc	r21, r1
    4886:	68 f0       	brcs	.+26     	; 0x48a2 <__divsf3_pse+0x82>
    4888:	9c c0       	rjmp	.+312    	; 0x49c2 <__fp_inf>
    488a:	f6 c0       	rjmp	.+492    	; 0x4a78 <__fp_szero>
    488c:	5f 3f       	cpi	r21, 0xFF	; 255
    488e:	ec f3       	brlt	.-6      	; 0x488a <__divsf3_pse+0x6a>
    4890:	98 3e       	cpi	r25, 0xE8	; 232
    4892:	dc f3       	brlt	.-10     	; 0x488a <__divsf3_pse+0x6a>
    4894:	86 95       	lsr	r24
    4896:	77 95       	ror	r23
    4898:	67 95       	ror	r22
    489a:	b7 95       	ror	r27
    489c:	f7 95       	ror	r31
    489e:	9f 5f       	subi	r25, 0xFF	; 255
    48a0:	c9 f7       	brne	.-14     	; 0x4894 <__divsf3_pse+0x74>
    48a2:	88 0f       	add	r24, r24
    48a4:	91 1d       	adc	r25, r1
    48a6:	96 95       	lsr	r25
    48a8:	87 95       	ror	r24
    48aa:	97 f9       	bld	r25, 7
    48ac:	08 95       	ret
    48ae:	e1 e0       	ldi	r30, 0x01	; 1
    48b0:	66 0f       	add	r22, r22
    48b2:	77 1f       	adc	r23, r23
    48b4:	88 1f       	adc	r24, r24
    48b6:	bb 1f       	adc	r27, r27
    48b8:	62 17       	cp	r22, r18
    48ba:	73 07       	cpc	r23, r19
    48bc:	84 07       	cpc	r24, r20
    48be:	ba 07       	cpc	r27, r26
    48c0:	20 f0       	brcs	.+8      	; 0x48ca <__divsf3_pse+0xaa>
    48c2:	62 1b       	sub	r22, r18
    48c4:	73 0b       	sbc	r23, r19
    48c6:	84 0b       	sbc	r24, r20
    48c8:	ba 0b       	sbc	r27, r26
    48ca:	ee 1f       	adc	r30, r30
    48cc:	88 f7       	brcc	.-30     	; 0x48b0 <__divsf3_pse+0x90>
    48ce:	e0 95       	com	r30
    48d0:	08 95       	ret

000048d2 <__fixsfdi>:
    48d2:	be e3       	ldi	r27, 0x3E	; 62
    48d4:	04 d0       	rcall	.+8      	; 0x48de <__fixunssfdi+0x2>
    48d6:	08 f4       	brcc	.+2      	; 0x48da <__fixsfdi+0x8>
    48d8:	90 e8       	ldi	r25, 0x80	; 128
    48da:	08 95       	ret

000048dc <__fixunssfdi>:
    48dc:	bf e3       	ldi	r27, 0x3F	; 63
    48de:	22 27       	eor	r18, r18
    48e0:	33 27       	eor	r19, r19
    48e2:	a9 01       	movw	r20, r18
    48e4:	ae d0       	rcall	.+348    	; 0x4a42 <__fp_splitA>
    48e6:	58 f1       	brcs	.+86     	; 0x493e <__fixunssfdi+0x62>
    48e8:	9f 57       	subi	r25, 0x7F	; 127
    48ea:	40 f1       	brcs	.+80     	; 0x493c <__fixunssfdi+0x60>
    48ec:	b9 17       	cp	r27, r25
    48ee:	38 f1       	brcs	.+78     	; 0x493e <__fixunssfdi+0x62>
    48f0:	bf e3       	ldi	r27, 0x3F	; 63
    48f2:	b9 1b       	sub	r27, r25
    48f4:	99 27       	eor	r25, r25
    48f6:	b8 50       	subi	r27, 0x08	; 8
    48f8:	3a f4       	brpl	.+14     	; 0x4908 <__fixunssfdi+0x2c>
    48fa:	66 0f       	add	r22, r22
    48fc:	77 1f       	adc	r23, r23
    48fe:	88 1f       	adc	r24, r24
    4900:	99 1f       	adc	r25, r25
    4902:	b3 95       	inc	r27
    4904:	d2 f3       	brmi	.-12     	; 0x48fa <__fixunssfdi+0x1e>
    4906:	16 c0       	rjmp	.+44     	; 0x4934 <__fixunssfdi+0x58>
    4908:	b8 50       	subi	r27, 0x08	; 8
    490a:	4a f0       	brmi	.+18     	; 0x491e <__fixunssfdi+0x42>
    490c:	23 2f       	mov	r18, r19
    490e:	34 2f       	mov	r19, r20
    4910:	45 2f       	mov	r20, r21
    4912:	56 2f       	mov	r21, r22
    4914:	67 2f       	mov	r22, r23
    4916:	78 2f       	mov	r23, r24
    4918:	88 27       	eor	r24, r24
    491a:	b8 50       	subi	r27, 0x08	; 8
    491c:	ba f7       	brpl	.-18     	; 0x490c <__fixunssfdi+0x30>
    491e:	b8 5f       	subi	r27, 0xF8	; 248
    4920:	49 f0       	breq	.+18     	; 0x4934 <__fixunssfdi+0x58>
    4922:	86 95       	lsr	r24
    4924:	77 95       	ror	r23
    4926:	67 95       	ror	r22
    4928:	57 95       	ror	r21
    492a:	47 95       	ror	r20
    492c:	37 95       	ror	r19
    492e:	27 95       	ror	r18
    4930:	ba 95       	dec	r27
    4932:	b9 f7       	brne	.-18     	; 0x4922 <__fixunssfdi+0x46>
    4934:	0e f4       	brtc	.+2      	; 0x4938 <__fixunssfdi+0x5c>
    4936:	4e d0       	rcall	.+156    	; 0x49d4 <__fp_negdi>
    4938:	88 94       	clc
    493a:	08 95       	ret
    493c:	88 94       	clc
    493e:	60 e0       	ldi	r22, 0x00	; 0
    4940:	70 e0       	ldi	r23, 0x00	; 0
    4942:	cb 01       	movw	r24, r22
    4944:	08 95       	ret

00004946 <__floatundisf>:
    4946:	e8 94       	clt

00004948 <__fp_di2sf>:
    4948:	f9 2f       	mov	r31, r25
    494a:	96 eb       	ldi	r25, 0xB6	; 182
    494c:	ff 23       	and	r31, r31
    494e:	81 f0       	breq	.+32     	; 0x4970 <__fp_di2sf+0x28>
    4950:	12 16       	cp	r1, r18
    4952:	13 06       	cpc	r1, r19
    4954:	14 06       	cpc	r1, r20
    4956:	44 0b       	sbc	r20, r20
    4958:	93 95       	inc	r25
    495a:	f6 95       	lsr	r31
    495c:	87 95       	ror	r24
    495e:	77 95       	ror	r23
    4960:	67 95       	ror	r22
    4962:	57 95       	ror	r21
    4964:	40 40       	sbci	r20, 0x00	; 0
    4966:	ff 23       	and	r31, r31
    4968:	b9 f7       	brne	.-18     	; 0x4958 <__fp_di2sf+0x10>
    496a:	1b c0       	rjmp	.+54     	; 0x49a2 <__fp_di2sf+0x5a>
    496c:	99 27       	eor	r25, r25
    496e:	08 95       	ret
    4970:	88 23       	and	r24, r24
    4972:	51 f4       	brne	.+20     	; 0x4988 <__fp_di2sf+0x40>
    4974:	98 50       	subi	r25, 0x08	; 8
    4976:	d2 f7       	brpl	.-12     	; 0x496c <__fp_di2sf+0x24>
    4978:	87 2b       	or	r24, r23
    497a:	76 2f       	mov	r23, r22
    497c:	65 2f       	mov	r22, r21
    497e:	54 2f       	mov	r21, r20
    4980:	43 2f       	mov	r20, r19
    4982:	32 2f       	mov	r19, r18
    4984:	20 e0       	ldi	r18, 0x00	; 0
    4986:	b1 f3       	breq	.-20     	; 0x4974 <__fp_di2sf+0x2c>
    4988:	12 16       	cp	r1, r18
    498a:	13 06       	cpc	r1, r19
    498c:	14 06       	cpc	r1, r20
    498e:	44 0b       	sbc	r20, r20
    4990:	88 23       	and	r24, r24
    4992:	3a f0       	brmi	.+14     	; 0x49a2 <__fp_di2sf+0x5a>
    4994:	9a 95       	dec	r25
    4996:	44 0f       	add	r20, r20
    4998:	55 1f       	adc	r21, r21
    499a:	66 1f       	adc	r22, r22
    499c:	77 1f       	adc	r23, r23
    499e:	88 1f       	adc	r24, r24
    49a0:	ca f7       	brpl	.-14     	; 0x4994 <__fp_di2sf+0x4c>
    49a2:	55 23       	and	r21, r21
    49a4:	4a f4       	brpl	.+18     	; 0x49b8 <__fp_di2sf+0x70>
    49a6:	44 0f       	add	r20, r20
    49a8:	55 1f       	adc	r21, r21
    49aa:	11 f4       	brne	.+4      	; 0x49b0 <__fp_di2sf+0x68>
    49ac:	60 ff       	sbrs	r22, 0
    49ae:	04 c0       	rjmp	.+8      	; 0x49b8 <__fp_di2sf+0x70>
    49b0:	6f 5f       	subi	r22, 0xFF	; 255
    49b2:	7f 4f       	sbci	r23, 0xFF	; 255
    49b4:	8f 4f       	sbci	r24, 0xFF	; 255
    49b6:	9f 4f       	sbci	r25, 0xFF	; 255
    49b8:	88 0f       	add	r24, r24
    49ba:	96 95       	lsr	r25
    49bc:	87 95       	ror	r24
    49be:	97 f9       	bld	r25, 7
    49c0:	08 95       	ret

000049c2 <__fp_inf>:
    49c2:	97 f9       	bld	r25, 7
    49c4:	9f 67       	ori	r25, 0x7F	; 127
    49c6:	80 e8       	ldi	r24, 0x80	; 128
    49c8:	70 e0       	ldi	r23, 0x00	; 0
    49ca:	60 e0       	ldi	r22, 0x00	; 0
    49cc:	08 95       	ret

000049ce <__fp_nan>:
    49ce:	9f ef       	ldi	r25, 0xFF	; 255
    49d0:	80 ec       	ldi	r24, 0xC0	; 192
    49d2:	08 95       	ret

000049d4 <__fp_negdi>:
    49d4:	90 95       	com	r25
    49d6:	80 95       	com	r24
    49d8:	70 95       	com	r23
    49da:	60 95       	com	r22
    49dc:	50 95       	com	r21
    49de:	40 95       	com	r20
    49e0:	30 95       	com	r19
    49e2:	21 95       	neg	r18
    49e4:	3f 4f       	sbci	r19, 0xFF	; 255
    49e6:	4f 4f       	sbci	r20, 0xFF	; 255
    49e8:	5f 4f       	sbci	r21, 0xFF	; 255
    49ea:	6f 4f       	sbci	r22, 0xFF	; 255
    49ec:	7f 4f       	sbci	r23, 0xFF	; 255
    49ee:	8f 4f       	sbci	r24, 0xFF	; 255
    49f0:	9f 4f       	sbci	r25, 0xFF	; 255
    49f2:	08 95       	ret

000049f4 <__fp_pscA>:
    49f4:	00 24       	eor	r0, r0
    49f6:	0a 94       	dec	r0
    49f8:	16 16       	cp	r1, r22
    49fa:	17 06       	cpc	r1, r23
    49fc:	18 06       	cpc	r1, r24
    49fe:	09 06       	cpc	r0, r25
    4a00:	08 95       	ret

00004a02 <__fp_pscB>:
    4a02:	00 24       	eor	r0, r0
    4a04:	0a 94       	dec	r0
    4a06:	12 16       	cp	r1, r18
    4a08:	13 06       	cpc	r1, r19
    4a0a:	14 06       	cpc	r1, r20
    4a0c:	05 06       	cpc	r0, r21
    4a0e:	08 95       	ret

00004a10 <__fp_round>:
    4a10:	09 2e       	mov	r0, r25
    4a12:	03 94       	inc	r0
    4a14:	00 0c       	add	r0, r0
    4a16:	11 f4       	brne	.+4      	; 0x4a1c <__fp_round+0xc>
    4a18:	88 23       	and	r24, r24
    4a1a:	52 f0       	brmi	.+20     	; 0x4a30 <__fp_round+0x20>
    4a1c:	bb 0f       	add	r27, r27
    4a1e:	40 f4       	brcc	.+16     	; 0x4a30 <__fp_round+0x20>
    4a20:	bf 2b       	or	r27, r31
    4a22:	11 f4       	brne	.+4      	; 0x4a28 <__fp_round+0x18>
    4a24:	60 ff       	sbrs	r22, 0
    4a26:	04 c0       	rjmp	.+8      	; 0x4a30 <__fp_round+0x20>
    4a28:	6f 5f       	subi	r22, 0xFF	; 255
    4a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a30:	08 95       	ret

00004a32 <__fp_split3>:
    4a32:	57 fd       	sbrc	r21, 7
    4a34:	90 58       	subi	r25, 0x80	; 128
    4a36:	44 0f       	add	r20, r20
    4a38:	55 1f       	adc	r21, r21
    4a3a:	59 f0       	breq	.+22     	; 0x4a52 <__fp_splitA+0x10>
    4a3c:	5f 3f       	cpi	r21, 0xFF	; 255
    4a3e:	71 f0       	breq	.+28     	; 0x4a5c <__fp_splitA+0x1a>
    4a40:	47 95       	ror	r20

00004a42 <__fp_splitA>:
    4a42:	88 0f       	add	r24, r24
    4a44:	97 fb       	bst	r25, 7
    4a46:	99 1f       	adc	r25, r25
    4a48:	61 f0       	breq	.+24     	; 0x4a62 <__fp_splitA+0x20>
    4a4a:	9f 3f       	cpi	r25, 0xFF	; 255
    4a4c:	79 f0       	breq	.+30     	; 0x4a6c <__fp_splitA+0x2a>
    4a4e:	87 95       	ror	r24
    4a50:	08 95       	ret
    4a52:	12 16       	cp	r1, r18
    4a54:	13 06       	cpc	r1, r19
    4a56:	14 06       	cpc	r1, r20
    4a58:	55 1f       	adc	r21, r21
    4a5a:	f2 cf       	rjmp	.-28     	; 0x4a40 <__fp_split3+0xe>
    4a5c:	46 95       	lsr	r20
    4a5e:	f1 df       	rcall	.-30     	; 0x4a42 <__fp_splitA>
    4a60:	08 c0       	rjmp	.+16     	; 0x4a72 <__fp_splitA+0x30>
    4a62:	16 16       	cp	r1, r22
    4a64:	17 06       	cpc	r1, r23
    4a66:	18 06       	cpc	r1, r24
    4a68:	99 1f       	adc	r25, r25
    4a6a:	f1 cf       	rjmp	.-30     	; 0x4a4e <__fp_splitA+0xc>
    4a6c:	86 95       	lsr	r24
    4a6e:	71 05       	cpc	r23, r1
    4a70:	61 05       	cpc	r22, r1
    4a72:	08 94       	sec
    4a74:	08 95       	ret

00004a76 <__fp_zero>:
    4a76:	e8 94       	clt

00004a78 <__fp_szero>:
    4a78:	bb 27       	eor	r27, r27
    4a7a:	66 27       	eor	r22, r22
    4a7c:	77 27       	eor	r23, r23
    4a7e:	cb 01       	movw	r24, r22
    4a80:	97 f9       	bld	r25, 7
    4a82:	08 95       	ret

00004a84 <__udivmodhi4>:
    4a84:	aa 1b       	sub	r26, r26
    4a86:	bb 1b       	sub	r27, r27
    4a88:	51 e1       	ldi	r21, 0x11	; 17
    4a8a:	07 c0       	rjmp	.+14     	; 0x4a9a <__udivmodhi4_ep>

00004a8c <__udivmodhi4_loop>:
    4a8c:	aa 1f       	adc	r26, r26
    4a8e:	bb 1f       	adc	r27, r27
    4a90:	a6 17       	cp	r26, r22
    4a92:	b7 07       	cpc	r27, r23
    4a94:	10 f0       	brcs	.+4      	; 0x4a9a <__udivmodhi4_ep>
    4a96:	a6 1b       	sub	r26, r22
    4a98:	b7 0b       	sbc	r27, r23

00004a9a <__udivmodhi4_ep>:
    4a9a:	88 1f       	adc	r24, r24
    4a9c:	99 1f       	adc	r25, r25
    4a9e:	5a 95       	dec	r21
    4aa0:	a9 f7       	brne	.-22     	; 0x4a8c <__udivmodhi4_loop>
    4aa2:	80 95       	com	r24
    4aa4:	90 95       	com	r25
    4aa6:	bc 01       	movw	r22, r24
    4aa8:	cd 01       	movw	r24, r26
    4aaa:	08 95       	ret

00004aac <__udivmodsi4>:
    4aac:	a1 e2       	ldi	r26, 0x21	; 33
    4aae:	1a 2e       	mov	r1, r26
    4ab0:	aa 1b       	sub	r26, r26
    4ab2:	bb 1b       	sub	r27, r27
    4ab4:	fd 01       	movw	r30, r26
    4ab6:	0d c0       	rjmp	.+26     	; 0x4ad2 <__udivmodsi4_ep>

00004ab8 <__udivmodsi4_loop>:
    4ab8:	aa 1f       	adc	r26, r26
    4aba:	bb 1f       	adc	r27, r27
    4abc:	ee 1f       	adc	r30, r30
    4abe:	ff 1f       	adc	r31, r31
    4ac0:	a2 17       	cp	r26, r18
    4ac2:	b3 07       	cpc	r27, r19
    4ac4:	e4 07       	cpc	r30, r20
    4ac6:	f5 07       	cpc	r31, r21
    4ac8:	20 f0       	brcs	.+8      	; 0x4ad2 <__udivmodsi4_ep>
    4aca:	a2 1b       	sub	r26, r18
    4acc:	b3 0b       	sbc	r27, r19
    4ace:	e4 0b       	sbc	r30, r20
    4ad0:	f5 0b       	sbc	r31, r21

00004ad2 <__udivmodsi4_ep>:
    4ad2:	66 1f       	adc	r22, r22
    4ad4:	77 1f       	adc	r23, r23
    4ad6:	88 1f       	adc	r24, r24
    4ad8:	99 1f       	adc	r25, r25
    4ada:	1a 94       	dec	r1
    4adc:	69 f7       	brne	.-38     	; 0x4ab8 <__udivmodsi4_loop>
    4ade:	60 95       	com	r22
    4ae0:	70 95       	com	r23
    4ae2:	80 95       	com	r24
    4ae4:	90 95       	com	r25
    4ae6:	9b 01       	movw	r18, r22
    4ae8:	ac 01       	movw	r20, r24
    4aea:	bd 01       	movw	r22, r26
    4aec:	cf 01       	movw	r24, r30
    4aee:	08 95       	ret

00004af0 <__tablejump2__>:
    4af0:	ee 0f       	add	r30, r30
    4af2:	ff 1f       	adc	r31, r31

00004af4 <__tablejump__>:
    4af4:	05 90       	lpm	r0, Z+
    4af6:	f4 91       	lpm	r31, Z
    4af8:	e0 2d       	mov	r30, r0
    4afa:	09 94       	ijmp

00004afc <__muldi3>:
    4afc:	df 93       	push	r29
    4afe:	cf 93       	push	r28
    4b00:	1f 93       	push	r17
    4b02:	0f 93       	push	r16
    4b04:	9a 9d       	mul	r25, r10
    4b06:	f0 2d       	mov	r31, r0
    4b08:	21 9f       	mul	r18, r17
    4b0a:	f0 0d       	add	r31, r0
    4b0c:	8b 9d       	mul	r24, r11
    4b0e:	f0 0d       	add	r31, r0
    4b10:	8a 9d       	mul	r24, r10
    4b12:	e0 2d       	mov	r30, r0
    4b14:	f1 0d       	add	r31, r1
    4b16:	03 9f       	mul	r16, r19
    4b18:	f0 0d       	add	r31, r0
    4b1a:	02 9f       	mul	r16, r18
    4b1c:	e0 0d       	add	r30, r0
    4b1e:	f1 1d       	adc	r31, r1
    4b20:	4e 9d       	mul	r20, r14
    4b22:	e0 0d       	add	r30, r0
    4b24:	f1 1d       	adc	r31, r1
    4b26:	5e 9d       	mul	r21, r14
    4b28:	f0 0d       	add	r31, r0
    4b2a:	4f 9d       	mul	r20, r15
    4b2c:	f0 0d       	add	r31, r0
    4b2e:	7f 93       	push	r23
    4b30:	6f 93       	push	r22
    4b32:	bf 92       	push	r11
    4b34:	af 92       	push	r10
    4b36:	5f 93       	push	r21
    4b38:	4f 93       	push	r20
    4b3a:	d5 01       	movw	r26, r10
    4b3c:	30 d0       	rcall	.+96     	; 0x4b9e <__umulhisi3>
    4b3e:	8b 01       	movw	r16, r22
    4b40:	ac 01       	movw	r20, r24
    4b42:	d7 01       	movw	r26, r14
    4b44:	2c d0       	rcall	.+88     	; 0x4b9e <__umulhisi3>
    4b46:	eb 01       	movw	r28, r22
    4b48:	e8 0f       	add	r30, r24
    4b4a:	f9 1f       	adc	r31, r25
    4b4c:	d6 01       	movw	r26, r12
    4b4e:	1f d0       	rcall	.+62     	; 0x4b8e <__muldi3_6>
    4b50:	2f 91       	pop	r18
    4b52:	3f 91       	pop	r19
    4b54:	d6 01       	movw	r26, r12
    4b56:	23 d0       	rcall	.+70     	; 0x4b9e <__umulhisi3>
    4b58:	c6 0f       	add	r28, r22
    4b5a:	d7 1f       	adc	r29, r23
    4b5c:	e8 1f       	adc	r30, r24
    4b5e:	f9 1f       	adc	r31, r25
    4b60:	af 91       	pop	r26
    4b62:	bf 91       	pop	r27
    4b64:	14 d0       	rcall	.+40     	; 0x4b8e <__muldi3_6>
    4b66:	2f 91       	pop	r18
    4b68:	3f 91       	pop	r19
    4b6a:	19 d0       	rcall	.+50     	; 0x4b9e <__umulhisi3>
    4b6c:	c6 0f       	add	r28, r22
    4b6e:	d7 1f       	adc	r29, r23
    4b70:	e8 1f       	adc	r30, r24
    4b72:	f9 1f       	adc	r31, r25
    4b74:	d6 01       	movw	r26, r12
    4b76:	13 d0       	rcall	.+38     	; 0x4b9e <__umulhisi3>
    4b78:	e6 0f       	add	r30, r22
    4b7a:	f7 1f       	adc	r31, r23
    4b7c:	98 01       	movw	r18, r16
    4b7e:	be 01       	movw	r22, r28
    4b80:	cf 01       	movw	r24, r30
    4b82:	11 24       	eor	r1, r1
    4b84:	0f 91       	pop	r16
    4b86:	1f 91       	pop	r17
    4b88:	cf 91       	pop	r28
    4b8a:	df 91       	pop	r29
    4b8c:	08 95       	ret

00004b8e <__muldi3_6>:
    4b8e:	07 d0       	rcall	.+14     	; 0x4b9e <__umulhisi3>
    4b90:	46 0f       	add	r20, r22
    4b92:	57 1f       	adc	r21, r23
    4b94:	c8 1f       	adc	r28, r24
    4b96:	d9 1f       	adc	r29, r25
    4b98:	08 f4       	brcc	.+2      	; 0x4b9c <__muldi3_6+0xe>
    4b9a:	31 96       	adiw	r30, 0x01	; 1
    4b9c:	08 95       	ret

00004b9e <__umulhisi3>:
    4b9e:	a2 9f       	mul	r26, r18
    4ba0:	b0 01       	movw	r22, r0
    4ba2:	b3 9f       	mul	r27, r19
    4ba4:	c0 01       	movw	r24, r0
    4ba6:	a3 9f       	mul	r26, r19
    4ba8:	70 0d       	add	r23, r0
    4baa:	81 1d       	adc	r24, r1
    4bac:	11 24       	eor	r1, r1
    4bae:	91 1d       	adc	r25, r1
    4bb0:	b2 9f       	mul	r27, r18
    4bb2:	70 0d       	add	r23, r0
    4bb4:	81 1d       	adc	r24, r1
    4bb6:	11 24       	eor	r1, r1
    4bb8:	91 1d       	adc	r25, r1
    4bba:	08 95       	ret

00004bbc <memcpy>:
    4bbc:	fb 01       	movw	r30, r22
    4bbe:	dc 01       	movw	r26, r24
    4bc0:	02 c0       	rjmp	.+4      	; 0x4bc6 <memcpy+0xa>
    4bc2:	01 90       	ld	r0, Z+
    4bc4:	0d 92       	st	X+, r0
    4bc6:	41 50       	subi	r20, 0x01	; 1
    4bc8:	50 40       	sbci	r21, 0x00	; 0
    4bca:	d8 f7       	brcc	.-10     	; 0x4bc2 <memcpy+0x6>
    4bcc:	08 95       	ret

00004bce <strcpy>:
    4bce:	fb 01       	movw	r30, r22
    4bd0:	dc 01       	movw	r26, r24
    4bd2:	01 90       	ld	r0, Z+
    4bd4:	0d 92       	st	X+, r0
    4bd6:	00 20       	and	r0, r0
    4bd8:	e1 f7       	brne	.-8      	; 0x4bd2 <strcpy+0x4>
    4bda:	08 95       	ret

00004bdc <printf>:
    4bdc:	a0 e0       	ldi	r26, 0x00	; 0
    4bde:	b0 e0       	ldi	r27, 0x00	; 0
    4be0:	e3 ef       	ldi	r30, 0xF3	; 243
    4be2:	f5 e2       	ldi	r31, 0x25	; 37
    4be4:	c8 c5       	rjmp	.+2960   	; 0x5776 <__prologue_saves__+0x20>
    4be6:	fe 01       	movw	r30, r28
    4be8:	35 96       	adiw	r30, 0x05	; 5
    4bea:	61 91       	ld	r22, Z+
    4bec:	71 91       	ld	r23, Z+
    4bee:	af 01       	movw	r20, r30
    4bf0:	80 91 7d 29 	lds	r24, 0x297D
    4bf4:	90 91 7e 29 	lds	r25, 0x297E
    4bf8:	40 d0       	rcall	.+128    	; 0x4c7a <vfprintf>
    4bfa:	e2 e0       	ldi	r30, 0x02	; 2
    4bfc:	d5 c5       	rjmp	.+2986   	; 0x57a8 <__epilogue_restores__+0x20>

00004bfe <puts>:
    4bfe:	0f 93       	push	r16
    4c00:	1f 93       	push	r17
    4c02:	cf 93       	push	r28
    4c04:	df 93       	push	r29
    4c06:	e0 91 7d 29 	lds	r30, 0x297D
    4c0a:	f0 91 7e 29 	lds	r31, 0x297E
    4c0e:	23 81       	ldd	r18, Z+3	; 0x03
    4c10:	21 ff       	sbrs	r18, 1
    4c12:	1b c0       	rjmp	.+54     	; 0x4c4a <puts+0x4c>
    4c14:	ec 01       	movw	r28, r24
    4c16:	00 e0       	ldi	r16, 0x00	; 0
    4c18:	10 e0       	ldi	r17, 0x00	; 0
    4c1a:	89 91       	ld	r24, Y+
    4c1c:	60 91 7d 29 	lds	r22, 0x297D
    4c20:	70 91 7e 29 	lds	r23, 0x297E
    4c24:	db 01       	movw	r26, r22
    4c26:	18 96       	adiw	r26, 0x08	; 8
    4c28:	ed 91       	ld	r30, X+
    4c2a:	fc 91       	ld	r31, X
    4c2c:	19 97       	sbiw	r26, 0x09	; 9
    4c2e:	88 23       	and	r24, r24
    4c30:	31 f0       	breq	.+12     	; 0x4c3e <puts+0x40>
    4c32:	09 95       	icall
    4c34:	89 2b       	or	r24, r25
    4c36:	89 f3       	breq	.-30     	; 0x4c1a <puts+0x1c>
    4c38:	0f ef       	ldi	r16, 0xFF	; 255
    4c3a:	1f ef       	ldi	r17, 0xFF	; 255
    4c3c:	ee cf       	rjmp	.-36     	; 0x4c1a <puts+0x1c>
    4c3e:	8a e0       	ldi	r24, 0x0A	; 10
    4c40:	09 95       	icall
    4c42:	89 2b       	or	r24, r25
    4c44:	11 f4       	brne	.+4      	; 0x4c4a <puts+0x4c>
    4c46:	c8 01       	movw	r24, r16
    4c48:	02 c0       	rjmp	.+4      	; 0x4c4e <puts+0x50>
    4c4a:	8f ef       	ldi	r24, 0xFF	; 255
    4c4c:	9f ef       	ldi	r25, 0xFF	; 255
    4c4e:	df 91       	pop	r29
    4c50:	cf 91       	pop	r28
    4c52:	1f 91       	pop	r17
    4c54:	0f 91       	pop	r16
    4c56:	08 95       	ret

00004c58 <scanf>:
    4c58:	a0 e0       	ldi	r26, 0x00	; 0
    4c5a:	b0 e0       	ldi	r27, 0x00	; 0
    4c5c:	e1 e3       	ldi	r30, 0x31	; 49
    4c5e:	f6 e2       	ldi	r31, 0x26	; 38
    4c60:	8a c5       	rjmp	.+2836   	; 0x5776 <__prologue_saves__+0x20>
    4c62:	fe 01       	movw	r30, r28
    4c64:	35 96       	adiw	r30, 0x05	; 5
    4c66:	61 91       	ld	r22, Z+
    4c68:	71 91       	ld	r23, Z+
    4c6a:	af 01       	movw	r20, r30
    4c6c:	80 91 7b 29 	lds	r24, 0x297B
    4c70:	90 91 7c 29 	lds	r25, 0x297C
    4c74:	34 d3       	rcall	.+1640   	; 0x52de <vfscanf>
    4c76:	e2 e0       	ldi	r30, 0x02	; 2
    4c78:	97 c5       	rjmp	.+2862   	; 0x57a8 <__epilogue_restores__+0x20>

00004c7a <vfprintf>:
    4c7a:	ac e0       	ldi	r26, 0x0C	; 12
    4c7c:	b0 e0       	ldi	r27, 0x00	; 0
    4c7e:	e2 e4       	ldi	r30, 0x42	; 66
    4c80:	f6 e2       	ldi	r31, 0x26	; 38
    4c82:	69 c5       	rjmp	.+2770   	; 0x5756 <__prologue_saves__>
    4c84:	7c 01       	movw	r14, r24
    4c86:	6b 01       	movw	r12, r22
    4c88:	8a 01       	movw	r16, r20
    4c8a:	fc 01       	movw	r30, r24
    4c8c:	16 82       	std	Z+6, r1	; 0x06
    4c8e:	17 82       	std	Z+7, r1	; 0x07
    4c90:	83 81       	ldd	r24, Z+3	; 0x03
    4c92:	81 ff       	sbrs	r24, 1
    4c94:	b0 c1       	rjmp	.+864    	; 0x4ff6 <vfprintf+0x37c>
    4c96:	ce 01       	movw	r24, r28
    4c98:	01 96       	adiw	r24, 0x01	; 1
    4c9a:	4c 01       	movw	r8, r24
    4c9c:	f7 01       	movw	r30, r14
    4c9e:	93 81       	ldd	r25, Z+3	; 0x03
    4ca0:	f6 01       	movw	r30, r12
    4ca2:	93 fd       	sbrc	r25, 3
    4ca4:	85 91       	lpm	r24, Z+
    4ca6:	93 ff       	sbrs	r25, 3
    4ca8:	81 91       	ld	r24, Z+
    4caa:	6f 01       	movw	r12, r30
    4cac:	88 23       	and	r24, r24
    4cae:	09 f4       	brne	.+2      	; 0x4cb2 <vfprintf+0x38>
    4cb0:	9e c1       	rjmp	.+828    	; 0x4fee <vfprintf+0x374>
    4cb2:	85 32       	cpi	r24, 0x25	; 37
    4cb4:	39 f4       	brne	.+14     	; 0x4cc4 <vfprintf+0x4a>
    4cb6:	93 fd       	sbrc	r25, 3
    4cb8:	85 91       	lpm	r24, Z+
    4cba:	93 ff       	sbrs	r25, 3
    4cbc:	81 91       	ld	r24, Z+
    4cbe:	6f 01       	movw	r12, r30
    4cc0:	85 32       	cpi	r24, 0x25	; 37
    4cc2:	21 f4       	brne	.+8      	; 0x4ccc <vfprintf+0x52>
    4cc4:	b7 01       	movw	r22, r14
    4cc6:	90 e0       	ldi	r25, 0x00	; 0
    4cc8:	9a d4       	rcall	.+2356   	; 0x55fe <fputc>
    4cca:	e8 cf       	rjmp	.-48     	; 0x4c9c <vfprintf+0x22>
    4ccc:	51 2c       	mov	r5, r1
    4cce:	31 2c       	mov	r3, r1
    4cd0:	20 e0       	ldi	r18, 0x00	; 0
    4cd2:	20 32       	cpi	r18, 0x20	; 32
    4cd4:	a0 f4       	brcc	.+40     	; 0x4cfe <vfprintf+0x84>
    4cd6:	8b 32       	cpi	r24, 0x2B	; 43
    4cd8:	69 f0       	breq	.+26     	; 0x4cf4 <vfprintf+0x7a>
    4cda:	30 f4       	brcc	.+12     	; 0x4ce8 <vfprintf+0x6e>
    4cdc:	80 32       	cpi	r24, 0x20	; 32
    4cde:	59 f0       	breq	.+22     	; 0x4cf6 <vfprintf+0x7c>
    4ce0:	83 32       	cpi	r24, 0x23	; 35
    4ce2:	69 f4       	brne	.+26     	; 0x4cfe <vfprintf+0x84>
    4ce4:	20 61       	ori	r18, 0x10	; 16
    4ce6:	2c c0       	rjmp	.+88     	; 0x4d40 <vfprintf+0xc6>
    4ce8:	8d 32       	cpi	r24, 0x2D	; 45
    4cea:	39 f0       	breq	.+14     	; 0x4cfa <vfprintf+0x80>
    4cec:	80 33       	cpi	r24, 0x30	; 48
    4cee:	39 f4       	brne	.+14     	; 0x4cfe <vfprintf+0x84>
    4cf0:	21 60       	ori	r18, 0x01	; 1
    4cf2:	26 c0       	rjmp	.+76     	; 0x4d40 <vfprintf+0xc6>
    4cf4:	22 60       	ori	r18, 0x02	; 2
    4cf6:	24 60       	ori	r18, 0x04	; 4
    4cf8:	23 c0       	rjmp	.+70     	; 0x4d40 <vfprintf+0xc6>
    4cfa:	28 60       	ori	r18, 0x08	; 8
    4cfc:	21 c0       	rjmp	.+66     	; 0x4d40 <vfprintf+0xc6>
    4cfe:	27 fd       	sbrc	r18, 7
    4d00:	27 c0       	rjmp	.+78     	; 0x4d50 <vfprintf+0xd6>
    4d02:	30 ed       	ldi	r19, 0xD0	; 208
    4d04:	38 0f       	add	r19, r24
    4d06:	3a 30       	cpi	r19, 0x0A	; 10
    4d08:	78 f4       	brcc	.+30     	; 0x4d28 <vfprintf+0xae>
    4d0a:	26 ff       	sbrs	r18, 6
    4d0c:	06 c0       	rjmp	.+12     	; 0x4d1a <vfprintf+0xa0>
    4d0e:	fa e0       	ldi	r31, 0x0A	; 10
    4d10:	5f 9e       	mul	r5, r31
    4d12:	30 0d       	add	r19, r0
    4d14:	11 24       	eor	r1, r1
    4d16:	53 2e       	mov	r5, r19
    4d18:	13 c0       	rjmp	.+38     	; 0x4d40 <vfprintf+0xc6>
    4d1a:	8a e0       	ldi	r24, 0x0A	; 10
    4d1c:	38 9e       	mul	r3, r24
    4d1e:	30 0d       	add	r19, r0
    4d20:	11 24       	eor	r1, r1
    4d22:	33 2e       	mov	r3, r19
    4d24:	20 62       	ori	r18, 0x20	; 32
    4d26:	0c c0       	rjmp	.+24     	; 0x4d40 <vfprintf+0xc6>
    4d28:	8e 32       	cpi	r24, 0x2E	; 46
    4d2a:	21 f4       	brne	.+8      	; 0x4d34 <vfprintf+0xba>
    4d2c:	26 fd       	sbrc	r18, 6
    4d2e:	5f c1       	rjmp	.+702    	; 0x4fee <vfprintf+0x374>
    4d30:	20 64       	ori	r18, 0x40	; 64
    4d32:	06 c0       	rjmp	.+12     	; 0x4d40 <vfprintf+0xc6>
    4d34:	8c 36       	cpi	r24, 0x6C	; 108
    4d36:	11 f4       	brne	.+4      	; 0x4d3c <vfprintf+0xc2>
    4d38:	20 68       	ori	r18, 0x80	; 128
    4d3a:	02 c0       	rjmp	.+4      	; 0x4d40 <vfprintf+0xc6>
    4d3c:	88 36       	cpi	r24, 0x68	; 104
    4d3e:	41 f4       	brne	.+16     	; 0x4d50 <vfprintf+0xd6>
    4d40:	f6 01       	movw	r30, r12
    4d42:	93 fd       	sbrc	r25, 3
    4d44:	85 91       	lpm	r24, Z+
    4d46:	93 ff       	sbrs	r25, 3
    4d48:	81 91       	ld	r24, Z+
    4d4a:	6f 01       	movw	r12, r30
    4d4c:	81 11       	cpse	r24, r1
    4d4e:	c1 cf       	rjmp	.-126    	; 0x4cd2 <vfprintf+0x58>
    4d50:	98 2f       	mov	r25, r24
    4d52:	9f 7d       	andi	r25, 0xDF	; 223
    4d54:	95 54       	subi	r25, 0x45	; 69
    4d56:	93 30       	cpi	r25, 0x03	; 3
    4d58:	28 f4       	brcc	.+10     	; 0x4d64 <vfprintf+0xea>
    4d5a:	0c 5f       	subi	r16, 0xFC	; 252
    4d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d5e:	ff e3       	ldi	r31, 0x3F	; 63
    4d60:	f9 83       	std	Y+1, r31	; 0x01
    4d62:	0d c0       	rjmp	.+26     	; 0x4d7e <vfprintf+0x104>
    4d64:	83 36       	cpi	r24, 0x63	; 99
    4d66:	31 f0       	breq	.+12     	; 0x4d74 <vfprintf+0xfa>
    4d68:	83 37       	cpi	r24, 0x73	; 115
    4d6a:	71 f0       	breq	.+28     	; 0x4d88 <vfprintf+0x10e>
    4d6c:	83 35       	cpi	r24, 0x53	; 83
    4d6e:	09 f0       	breq	.+2      	; 0x4d72 <vfprintf+0xf8>
    4d70:	57 c0       	rjmp	.+174    	; 0x4e20 <vfprintf+0x1a6>
    4d72:	21 c0       	rjmp	.+66     	; 0x4db6 <vfprintf+0x13c>
    4d74:	f8 01       	movw	r30, r16
    4d76:	80 81       	ld	r24, Z
    4d78:	89 83       	std	Y+1, r24	; 0x01
    4d7a:	0e 5f       	subi	r16, 0xFE	; 254
    4d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d7e:	44 24       	eor	r4, r4
    4d80:	43 94       	inc	r4
    4d82:	51 2c       	mov	r5, r1
    4d84:	54 01       	movw	r10, r8
    4d86:	14 c0       	rjmp	.+40     	; 0x4db0 <vfprintf+0x136>
    4d88:	38 01       	movw	r6, r16
    4d8a:	f2 e0       	ldi	r31, 0x02	; 2
    4d8c:	6f 0e       	add	r6, r31
    4d8e:	71 1c       	adc	r7, r1
    4d90:	f8 01       	movw	r30, r16
    4d92:	a0 80       	ld	r10, Z
    4d94:	b1 80       	ldd	r11, Z+1	; 0x01
    4d96:	26 ff       	sbrs	r18, 6
    4d98:	03 c0       	rjmp	.+6      	; 0x4da0 <vfprintf+0x126>
    4d9a:	65 2d       	mov	r22, r5
    4d9c:	70 e0       	ldi	r23, 0x00	; 0
    4d9e:	02 c0       	rjmp	.+4      	; 0x4da4 <vfprintf+0x12a>
    4da0:	6f ef       	ldi	r22, 0xFF	; 255
    4da2:	7f ef       	ldi	r23, 0xFF	; 255
    4da4:	c5 01       	movw	r24, r10
    4da6:	2c 87       	std	Y+12, r18	; 0x0c
    4da8:	e1 d3       	rcall	.+1986   	; 0x556c <strnlen>
    4daa:	2c 01       	movw	r4, r24
    4dac:	83 01       	movw	r16, r6
    4dae:	2c 85       	ldd	r18, Y+12	; 0x0c
    4db0:	2f 77       	andi	r18, 0x7F	; 127
    4db2:	22 2e       	mov	r2, r18
    4db4:	16 c0       	rjmp	.+44     	; 0x4de2 <vfprintf+0x168>
    4db6:	38 01       	movw	r6, r16
    4db8:	f2 e0       	ldi	r31, 0x02	; 2
    4dba:	6f 0e       	add	r6, r31
    4dbc:	71 1c       	adc	r7, r1
    4dbe:	f8 01       	movw	r30, r16
    4dc0:	a0 80       	ld	r10, Z
    4dc2:	b1 80       	ldd	r11, Z+1	; 0x01
    4dc4:	26 ff       	sbrs	r18, 6
    4dc6:	03 c0       	rjmp	.+6      	; 0x4dce <vfprintf+0x154>
    4dc8:	65 2d       	mov	r22, r5
    4dca:	70 e0       	ldi	r23, 0x00	; 0
    4dcc:	02 c0       	rjmp	.+4      	; 0x4dd2 <vfprintf+0x158>
    4dce:	6f ef       	ldi	r22, 0xFF	; 255
    4dd0:	7f ef       	ldi	r23, 0xFF	; 255
    4dd2:	c5 01       	movw	r24, r10
    4dd4:	2c 87       	std	Y+12, r18	; 0x0c
    4dd6:	bf d3       	rcall	.+1918   	; 0x5556 <strnlen_P>
    4dd8:	2c 01       	movw	r4, r24
    4dda:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ddc:	20 68       	ori	r18, 0x80	; 128
    4dde:	22 2e       	mov	r2, r18
    4de0:	83 01       	movw	r16, r6
    4de2:	23 fc       	sbrc	r2, 3
    4de4:	19 c0       	rjmp	.+50     	; 0x4e18 <vfprintf+0x19e>
    4de6:	83 2d       	mov	r24, r3
    4de8:	90 e0       	ldi	r25, 0x00	; 0
    4dea:	48 16       	cp	r4, r24
    4dec:	59 06       	cpc	r5, r25
    4dee:	a0 f4       	brcc	.+40     	; 0x4e18 <vfprintf+0x19e>
    4df0:	b7 01       	movw	r22, r14
    4df2:	80 e2       	ldi	r24, 0x20	; 32
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	03 d4       	rcall	.+2054   	; 0x55fe <fputc>
    4df8:	3a 94       	dec	r3
    4dfa:	f5 cf       	rjmp	.-22     	; 0x4de6 <vfprintf+0x16c>
    4dfc:	f5 01       	movw	r30, r10
    4dfe:	27 fc       	sbrc	r2, 7
    4e00:	85 91       	lpm	r24, Z+
    4e02:	27 fe       	sbrs	r2, 7
    4e04:	81 91       	ld	r24, Z+
    4e06:	5f 01       	movw	r10, r30
    4e08:	b7 01       	movw	r22, r14
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	f8 d3       	rcall	.+2032   	; 0x55fe <fputc>
    4e0e:	31 10       	cpse	r3, r1
    4e10:	3a 94       	dec	r3
    4e12:	f1 e0       	ldi	r31, 0x01	; 1
    4e14:	4f 1a       	sub	r4, r31
    4e16:	51 08       	sbc	r5, r1
    4e18:	41 14       	cp	r4, r1
    4e1a:	51 04       	cpc	r5, r1
    4e1c:	79 f7       	brne	.-34     	; 0x4dfc <vfprintf+0x182>
    4e1e:	de c0       	rjmp	.+444    	; 0x4fdc <vfprintf+0x362>
    4e20:	84 36       	cpi	r24, 0x64	; 100
    4e22:	11 f0       	breq	.+4      	; 0x4e28 <vfprintf+0x1ae>
    4e24:	89 36       	cpi	r24, 0x69	; 105
    4e26:	31 f5       	brne	.+76     	; 0x4e74 <vfprintf+0x1fa>
    4e28:	f8 01       	movw	r30, r16
    4e2a:	27 ff       	sbrs	r18, 7
    4e2c:	07 c0       	rjmp	.+14     	; 0x4e3c <vfprintf+0x1c2>
    4e2e:	60 81       	ld	r22, Z
    4e30:	71 81       	ldd	r23, Z+1	; 0x01
    4e32:	82 81       	ldd	r24, Z+2	; 0x02
    4e34:	93 81       	ldd	r25, Z+3	; 0x03
    4e36:	0c 5f       	subi	r16, 0xFC	; 252
    4e38:	1f 4f       	sbci	r17, 0xFF	; 255
    4e3a:	08 c0       	rjmp	.+16     	; 0x4e4c <vfprintf+0x1d2>
    4e3c:	60 81       	ld	r22, Z
    4e3e:	71 81       	ldd	r23, Z+1	; 0x01
    4e40:	88 27       	eor	r24, r24
    4e42:	77 fd       	sbrc	r23, 7
    4e44:	80 95       	com	r24
    4e46:	98 2f       	mov	r25, r24
    4e48:	0e 5f       	subi	r16, 0xFE	; 254
    4e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e4c:	2f 76       	andi	r18, 0x6F	; 111
    4e4e:	b2 2e       	mov	r11, r18
    4e50:	97 ff       	sbrs	r25, 7
    4e52:	09 c0       	rjmp	.+18     	; 0x4e66 <vfprintf+0x1ec>
    4e54:	90 95       	com	r25
    4e56:	80 95       	com	r24
    4e58:	70 95       	com	r23
    4e5a:	61 95       	neg	r22
    4e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    4e60:	9f 4f       	sbci	r25, 0xFF	; 255
    4e62:	20 68       	ori	r18, 0x80	; 128
    4e64:	b2 2e       	mov	r11, r18
    4e66:	2a e0       	ldi	r18, 0x0A	; 10
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	a4 01       	movw	r20, r8
    4e6c:	13 d4       	rcall	.+2086   	; 0x5694 <__ultoa_invert>
    4e6e:	a8 2e       	mov	r10, r24
    4e70:	a8 18       	sub	r10, r8
    4e72:	43 c0       	rjmp	.+134    	; 0x4efa <vfprintf+0x280>
    4e74:	85 37       	cpi	r24, 0x75	; 117
    4e76:	29 f4       	brne	.+10     	; 0x4e82 <vfprintf+0x208>
    4e78:	2f 7e       	andi	r18, 0xEF	; 239
    4e7a:	b2 2e       	mov	r11, r18
    4e7c:	2a e0       	ldi	r18, 0x0A	; 10
    4e7e:	30 e0       	ldi	r19, 0x00	; 0
    4e80:	25 c0       	rjmp	.+74     	; 0x4ecc <vfprintf+0x252>
    4e82:	f2 2f       	mov	r31, r18
    4e84:	f9 7f       	andi	r31, 0xF9	; 249
    4e86:	bf 2e       	mov	r11, r31
    4e88:	8f 36       	cpi	r24, 0x6F	; 111
    4e8a:	c1 f0       	breq	.+48     	; 0x4ebc <vfprintf+0x242>
    4e8c:	18 f4       	brcc	.+6      	; 0x4e94 <vfprintf+0x21a>
    4e8e:	88 35       	cpi	r24, 0x58	; 88
    4e90:	79 f0       	breq	.+30     	; 0x4eb0 <vfprintf+0x236>
    4e92:	ad c0       	rjmp	.+346    	; 0x4fee <vfprintf+0x374>
    4e94:	80 37       	cpi	r24, 0x70	; 112
    4e96:	19 f0       	breq	.+6      	; 0x4e9e <vfprintf+0x224>
    4e98:	88 37       	cpi	r24, 0x78	; 120
    4e9a:	21 f0       	breq	.+8      	; 0x4ea4 <vfprintf+0x22a>
    4e9c:	a8 c0       	rjmp	.+336    	; 0x4fee <vfprintf+0x374>
    4e9e:	2f 2f       	mov	r18, r31
    4ea0:	20 61       	ori	r18, 0x10	; 16
    4ea2:	b2 2e       	mov	r11, r18
    4ea4:	b4 fe       	sbrs	r11, 4
    4ea6:	0d c0       	rjmp	.+26     	; 0x4ec2 <vfprintf+0x248>
    4ea8:	8b 2d       	mov	r24, r11
    4eaa:	84 60       	ori	r24, 0x04	; 4
    4eac:	b8 2e       	mov	r11, r24
    4eae:	09 c0       	rjmp	.+18     	; 0x4ec2 <vfprintf+0x248>
    4eb0:	24 ff       	sbrs	r18, 4
    4eb2:	0a c0       	rjmp	.+20     	; 0x4ec8 <vfprintf+0x24e>
    4eb4:	9f 2f       	mov	r25, r31
    4eb6:	96 60       	ori	r25, 0x06	; 6
    4eb8:	b9 2e       	mov	r11, r25
    4eba:	06 c0       	rjmp	.+12     	; 0x4ec8 <vfprintf+0x24e>
    4ebc:	28 e0       	ldi	r18, 0x08	; 8
    4ebe:	30 e0       	ldi	r19, 0x00	; 0
    4ec0:	05 c0       	rjmp	.+10     	; 0x4ecc <vfprintf+0x252>
    4ec2:	20 e1       	ldi	r18, 0x10	; 16
    4ec4:	30 e0       	ldi	r19, 0x00	; 0
    4ec6:	02 c0       	rjmp	.+4      	; 0x4ecc <vfprintf+0x252>
    4ec8:	20 e1       	ldi	r18, 0x10	; 16
    4eca:	32 e0       	ldi	r19, 0x02	; 2
    4ecc:	f8 01       	movw	r30, r16
    4ece:	b7 fe       	sbrs	r11, 7
    4ed0:	07 c0       	rjmp	.+14     	; 0x4ee0 <vfprintf+0x266>
    4ed2:	60 81       	ld	r22, Z
    4ed4:	71 81       	ldd	r23, Z+1	; 0x01
    4ed6:	82 81       	ldd	r24, Z+2	; 0x02
    4ed8:	93 81       	ldd	r25, Z+3	; 0x03
    4eda:	0c 5f       	subi	r16, 0xFC	; 252
    4edc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ede:	06 c0       	rjmp	.+12     	; 0x4eec <vfprintf+0x272>
    4ee0:	60 81       	ld	r22, Z
    4ee2:	71 81       	ldd	r23, Z+1	; 0x01
    4ee4:	80 e0       	ldi	r24, 0x00	; 0
    4ee6:	90 e0       	ldi	r25, 0x00	; 0
    4ee8:	0e 5f       	subi	r16, 0xFE	; 254
    4eea:	1f 4f       	sbci	r17, 0xFF	; 255
    4eec:	a4 01       	movw	r20, r8
    4eee:	d2 d3       	rcall	.+1956   	; 0x5694 <__ultoa_invert>
    4ef0:	a8 2e       	mov	r10, r24
    4ef2:	a8 18       	sub	r10, r8
    4ef4:	fb 2d       	mov	r31, r11
    4ef6:	ff 77       	andi	r31, 0x7F	; 127
    4ef8:	bf 2e       	mov	r11, r31
    4efa:	b6 fe       	sbrs	r11, 6
    4efc:	0b c0       	rjmp	.+22     	; 0x4f14 <vfprintf+0x29a>
    4efe:	2b 2d       	mov	r18, r11
    4f00:	2e 7f       	andi	r18, 0xFE	; 254
    4f02:	a5 14       	cp	r10, r5
    4f04:	50 f4       	brcc	.+20     	; 0x4f1a <vfprintf+0x2a0>
    4f06:	b4 fe       	sbrs	r11, 4
    4f08:	0a c0       	rjmp	.+20     	; 0x4f1e <vfprintf+0x2a4>
    4f0a:	b2 fc       	sbrc	r11, 2
    4f0c:	08 c0       	rjmp	.+16     	; 0x4f1e <vfprintf+0x2a4>
    4f0e:	2b 2d       	mov	r18, r11
    4f10:	2e 7e       	andi	r18, 0xEE	; 238
    4f12:	05 c0       	rjmp	.+10     	; 0x4f1e <vfprintf+0x2a4>
    4f14:	7a 2c       	mov	r7, r10
    4f16:	2b 2d       	mov	r18, r11
    4f18:	03 c0       	rjmp	.+6      	; 0x4f20 <vfprintf+0x2a6>
    4f1a:	7a 2c       	mov	r7, r10
    4f1c:	01 c0       	rjmp	.+2      	; 0x4f20 <vfprintf+0x2a6>
    4f1e:	75 2c       	mov	r7, r5
    4f20:	24 ff       	sbrs	r18, 4
    4f22:	0d c0       	rjmp	.+26     	; 0x4f3e <vfprintf+0x2c4>
    4f24:	fe 01       	movw	r30, r28
    4f26:	ea 0d       	add	r30, r10
    4f28:	f1 1d       	adc	r31, r1
    4f2a:	80 81       	ld	r24, Z
    4f2c:	80 33       	cpi	r24, 0x30	; 48
    4f2e:	11 f4       	brne	.+4      	; 0x4f34 <vfprintf+0x2ba>
    4f30:	29 7e       	andi	r18, 0xE9	; 233
    4f32:	09 c0       	rjmp	.+18     	; 0x4f46 <vfprintf+0x2cc>
    4f34:	22 ff       	sbrs	r18, 2
    4f36:	06 c0       	rjmp	.+12     	; 0x4f44 <vfprintf+0x2ca>
    4f38:	73 94       	inc	r7
    4f3a:	73 94       	inc	r7
    4f3c:	04 c0       	rjmp	.+8      	; 0x4f46 <vfprintf+0x2cc>
    4f3e:	82 2f       	mov	r24, r18
    4f40:	86 78       	andi	r24, 0x86	; 134
    4f42:	09 f0       	breq	.+2      	; 0x4f46 <vfprintf+0x2cc>
    4f44:	73 94       	inc	r7
    4f46:	23 fd       	sbrc	r18, 3
    4f48:	12 c0       	rjmp	.+36     	; 0x4f6e <vfprintf+0x2f4>
    4f4a:	20 ff       	sbrs	r18, 0
    4f4c:	06 c0       	rjmp	.+12     	; 0x4f5a <vfprintf+0x2e0>
    4f4e:	5a 2c       	mov	r5, r10
    4f50:	73 14       	cp	r7, r3
    4f52:	18 f4       	brcc	.+6      	; 0x4f5a <vfprintf+0x2e0>
    4f54:	53 0c       	add	r5, r3
    4f56:	57 18       	sub	r5, r7
    4f58:	73 2c       	mov	r7, r3
    4f5a:	73 14       	cp	r7, r3
    4f5c:	60 f4       	brcc	.+24     	; 0x4f76 <vfprintf+0x2fc>
    4f5e:	b7 01       	movw	r22, r14
    4f60:	80 e2       	ldi	r24, 0x20	; 32
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	2c 87       	std	Y+12, r18	; 0x0c
    4f66:	4b d3       	rcall	.+1686   	; 0x55fe <fputc>
    4f68:	73 94       	inc	r7
    4f6a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f6c:	f6 cf       	rjmp	.-20     	; 0x4f5a <vfprintf+0x2e0>
    4f6e:	73 14       	cp	r7, r3
    4f70:	10 f4       	brcc	.+4      	; 0x4f76 <vfprintf+0x2fc>
    4f72:	37 18       	sub	r3, r7
    4f74:	01 c0       	rjmp	.+2      	; 0x4f78 <vfprintf+0x2fe>
    4f76:	31 2c       	mov	r3, r1
    4f78:	24 ff       	sbrs	r18, 4
    4f7a:	11 c0       	rjmp	.+34     	; 0x4f9e <vfprintf+0x324>
    4f7c:	b7 01       	movw	r22, r14
    4f7e:	80 e3       	ldi	r24, 0x30	; 48
    4f80:	90 e0       	ldi	r25, 0x00	; 0
    4f82:	2c 87       	std	Y+12, r18	; 0x0c
    4f84:	3c d3       	rcall	.+1656   	; 0x55fe <fputc>
    4f86:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f88:	22 ff       	sbrs	r18, 2
    4f8a:	16 c0       	rjmp	.+44     	; 0x4fb8 <vfprintf+0x33e>
    4f8c:	21 ff       	sbrs	r18, 1
    4f8e:	03 c0       	rjmp	.+6      	; 0x4f96 <vfprintf+0x31c>
    4f90:	88 e5       	ldi	r24, 0x58	; 88
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	02 c0       	rjmp	.+4      	; 0x4f9a <vfprintf+0x320>
    4f96:	88 e7       	ldi	r24, 0x78	; 120
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	b7 01       	movw	r22, r14
    4f9c:	0c c0       	rjmp	.+24     	; 0x4fb6 <vfprintf+0x33c>
    4f9e:	82 2f       	mov	r24, r18
    4fa0:	86 78       	andi	r24, 0x86	; 134
    4fa2:	51 f0       	breq	.+20     	; 0x4fb8 <vfprintf+0x33e>
    4fa4:	21 fd       	sbrc	r18, 1
    4fa6:	02 c0       	rjmp	.+4      	; 0x4fac <vfprintf+0x332>
    4fa8:	80 e2       	ldi	r24, 0x20	; 32
    4faa:	01 c0       	rjmp	.+2      	; 0x4fae <vfprintf+0x334>
    4fac:	8b e2       	ldi	r24, 0x2B	; 43
    4fae:	27 fd       	sbrc	r18, 7
    4fb0:	8d e2       	ldi	r24, 0x2D	; 45
    4fb2:	b7 01       	movw	r22, r14
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	23 d3       	rcall	.+1606   	; 0x55fe <fputc>
    4fb8:	a5 14       	cp	r10, r5
    4fba:	30 f4       	brcc	.+12     	; 0x4fc8 <vfprintf+0x34e>
    4fbc:	b7 01       	movw	r22, r14
    4fbe:	80 e3       	ldi	r24, 0x30	; 48
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	1d d3       	rcall	.+1594   	; 0x55fe <fputc>
    4fc4:	5a 94       	dec	r5
    4fc6:	f8 cf       	rjmp	.-16     	; 0x4fb8 <vfprintf+0x33e>
    4fc8:	aa 94       	dec	r10
    4fca:	f4 01       	movw	r30, r8
    4fcc:	ea 0d       	add	r30, r10
    4fce:	f1 1d       	adc	r31, r1
    4fd0:	80 81       	ld	r24, Z
    4fd2:	b7 01       	movw	r22, r14
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
    4fd6:	13 d3       	rcall	.+1574   	; 0x55fe <fputc>
    4fd8:	a1 10       	cpse	r10, r1
    4fda:	f6 cf       	rjmp	.-20     	; 0x4fc8 <vfprintf+0x34e>
    4fdc:	33 20       	and	r3, r3
    4fde:	09 f4       	brne	.+2      	; 0x4fe2 <vfprintf+0x368>
    4fe0:	5d ce       	rjmp	.-838    	; 0x4c9c <vfprintf+0x22>
    4fe2:	b7 01       	movw	r22, r14
    4fe4:	80 e2       	ldi	r24, 0x20	; 32
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	0a d3       	rcall	.+1556   	; 0x55fe <fputc>
    4fea:	3a 94       	dec	r3
    4fec:	f7 cf       	rjmp	.-18     	; 0x4fdc <vfprintf+0x362>
    4fee:	f7 01       	movw	r30, r14
    4ff0:	86 81       	ldd	r24, Z+6	; 0x06
    4ff2:	97 81       	ldd	r25, Z+7	; 0x07
    4ff4:	02 c0       	rjmp	.+4      	; 0x4ffa <vfprintf+0x380>
    4ff6:	8f ef       	ldi	r24, 0xFF	; 255
    4ff8:	9f ef       	ldi	r25, 0xFF	; 255
    4ffa:	2c 96       	adiw	r28, 0x0c	; 12
    4ffc:	e2 e1       	ldi	r30, 0x12	; 18
    4ffe:	c4 c3       	rjmp	.+1928   	; 0x5788 <__epilogue_restores__>

00005000 <putval>:
    5000:	20 fd       	sbrc	r18, 0
    5002:	09 c0       	rjmp	.+18     	; 0x5016 <putval+0x16>
    5004:	fc 01       	movw	r30, r24
    5006:	23 fd       	sbrc	r18, 3
    5008:	05 c0       	rjmp	.+10     	; 0x5014 <putval+0x14>
    500a:	22 ff       	sbrs	r18, 2
    500c:	02 c0       	rjmp	.+4      	; 0x5012 <putval+0x12>
    500e:	73 83       	std	Z+3, r23	; 0x03
    5010:	62 83       	std	Z+2, r22	; 0x02
    5012:	51 83       	std	Z+1, r21	; 0x01
    5014:	40 83       	st	Z, r20
    5016:	08 95       	ret

00005018 <mulacc>:
    5018:	44 fd       	sbrc	r20, 4
    501a:	10 c0       	rjmp	.+32     	; 0x503c <mulacc+0x24>
    501c:	46 fd       	sbrc	r20, 6
    501e:	10 c0       	rjmp	.+32     	; 0x5040 <mulacc+0x28>
    5020:	db 01       	movw	r26, r22
    5022:	fc 01       	movw	r30, r24
    5024:	aa 0f       	add	r26, r26
    5026:	bb 1f       	adc	r27, r27
    5028:	ee 1f       	adc	r30, r30
    502a:	ff 1f       	adc	r31, r31
    502c:	10 94       	com	r1
    502e:	d1 f7       	brne	.-12     	; 0x5024 <mulacc+0xc>
    5030:	6a 0f       	add	r22, r26
    5032:	7b 1f       	adc	r23, r27
    5034:	8e 1f       	adc	r24, r30
    5036:	9f 1f       	adc	r25, r31
    5038:	31 e0       	ldi	r19, 0x01	; 1
    503a:	03 c0       	rjmp	.+6      	; 0x5042 <mulacc+0x2a>
    503c:	33 e0       	ldi	r19, 0x03	; 3
    503e:	01 c0       	rjmp	.+2      	; 0x5042 <mulacc+0x2a>
    5040:	34 e0       	ldi	r19, 0x04	; 4
    5042:	66 0f       	add	r22, r22
    5044:	77 1f       	adc	r23, r23
    5046:	88 1f       	adc	r24, r24
    5048:	99 1f       	adc	r25, r25
    504a:	31 50       	subi	r19, 0x01	; 1
    504c:	d1 f7       	brne	.-12     	; 0x5042 <mulacc+0x2a>
    504e:	62 0f       	add	r22, r18
    5050:	71 1d       	adc	r23, r1
    5052:	81 1d       	adc	r24, r1
    5054:	91 1d       	adc	r25, r1
    5056:	08 95       	ret

00005058 <skip_spaces>:
    5058:	0f 93       	push	r16
    505a:	1f 93       	push	r17
    505c:	cf 93       	push	r28
    505e:	df 93       	push	r29
    5060:	8c 01       	movw	r16, r24
    5062:	c8 01       	movw	r24, r16
    5064:	8e d2       	rcall	.+1308   	; 0x5582 <fgetc>
    5066:	ec 01       	movw	r28, r24
    5068:	97 fd       	sbrc	r25, 7
    506a:	06 c0       	rjmp	.+12     	; 0x5078 <skip_spaces+0x20>
    506c:	61 d2       	rcall	.+1218   	; 0x5530 <isspace>
    506e:	89 2b       	or	r24, r25
    5070:	c1 f7       	brne	.-16     	; 0x5062 <skip_spaces+0xa>
    5072:	b8 01       	movw	r22, r16
    5074:	ce 01       	movw	r24, r28
    5076:	f5 d2       	rcall	.+1514   	; 0x5662 <ungetc>
    5078:	ce 01       	movw	r24, r28
    507a:	df 91       	pop	r29
    507c:	cf 91       	pop	r28
    507e:	1f 91       	pop	r17
    5080:	0f 91       	pop	r16
    5082:	08 95       	ret

00005084 <conv_int>:
    5084:	8f 92       	push	r8
    5086:	9f 92       	push	r9
    5088:	af 92       	push	r10
    508a:	cf 92       	push	r12
    508c:	df 92       	push	r13
    508e:	ef 92       	push	r14
    5090:	ff 92       	push	r15
    5092:	0f 93       	push	r16
    5094:	1f 93       	push	r17
    5096:	cf 93       	push	r28
    5098:	df 93       	push	r29
    509a:	ec 01       	movw	r28, r24
    509c:	a6 2e       	mov	r10, r22
    509e:	4a 01       	movw	r8, r20
    50a0:	02 2f       	mov	r16, r18
    50a2:	6f d2       	rcall	.+1246   	; 0x5582 <fgetc>
    50a4:	ac 01       	movw	r20, r24
    50a6:	55 27       	eor	r21, r21
    50a8:	4b 32       	cpi	r20, 0x2B	; 43
    50aa:	51 05       	cpc	r21, r1
    50ac:	21 f0       	breq	.+8      	; 0x50b6 <conv_int+0x32>
    50ae:	4d 32       	cpi	r20, 0x2D	; 45
    50b0:	51 05       	cpc	r21, r1
    50b2:	49 f4       	brne	.+18     	; 0x50c6 <conv_int+0x42>
    50b4:	00 68       	ori	r16, 0x80	; 128
    50b6:	aa 94       	dec	r10
    50b8:	11 f4       	brne	.+4      	; 0x50be <conv_int+0x3a>
    50ba:	80 e0       	ldi	r24, 0x00	; 0
    50bc:	60 c0       	rjmp	.+192    	; 0x517e <conv_int+0xfa>
    50be:	ce 01       	movw	r24, r28
    50c0:	60 d2       	rcall	.+1216   	; 0x5582 <fgetc>
    50c2:	97 fd       	sbrc	r25, 7
    50c4:	fa cf       	rjmp	.-12     	; 0x50ba <conv_int+0x36>
    50c6:	10 2f       	mov	r17, r16
    50c8:	1d 7f       	andi	r17, 0xFD	; 253
    50ca:	30 2f       	mov	r19, r16
    50cc:	30 73       	andi	r19, 0x30	; 48
    50ce:	f1 f4       	brne	.+60     	; 0x510c <conv_int+0x88>
    50d0:	80 33       	cpi	r24, 0x30	; 48
    50d2:	e1 f4       	brne	.+56     	; 0x510c <conv_int+0x88>
    50d4:	ff 24       	eor	r15, r15
    50d6:	fa 94       	dec	r15
    50d8:	fa 0c       	add	r15, r10
    50da:	09 f4       	brne	.+2      	; 0x50de <conv_int+0x5a>
    50dc:	3d c0       	rjmp	.+122    	; 0x5158 <conv_int+0xd4>
    50de:	ce 01       	movw	r24, r28
    50e0:	50 d2       	rcall	.+1184   	; 0x5582 <fgetc>
    50e2:	97 fd       	sbrc	r25, 7
    50e4:	39 c0       	rjmp	.+114    	; 0x5158 <conv_int+0xd4>
    50e6:	38 2f       	mov	r19, r24
    50e8:	3f 7d       	andi	r19, 0xDF	; 223
    50ea:	38 35       	cpi	r19, 0x58	; 88
    50ec:	49 f4       	brne	.+18     	; 0x5100 <conv_int+0x7c>
    50ee:	12 64       	ori	r17, 0x42	; 66
    50f0:	aa 94       	dec	r10
    50f2:	aa 94       	dec	r10
    50f4:	89 f1       	breq	.+98     	; 0x5158 <conv_int+0xd4>
    50f6:	ce 01       	movw	r24, r28
    50f8:	44 d2       	rcall	.+1160   	; 0x5582 <fgetc>
    50fa:	97 ff       	sbrs	r25, 7
    50fc:	07 c0       	rjmp	.+14     	; 0x510c <conv_int+0x88>
    50fe:	2c c0       	rjmp	.+88     	; 0x5158 <conv_int+0xd4>
    5100:	06 ff       	sbrs	r16, 6
    5102:	02 c0       	rjmp	.+4      	; 0x5108 <conv_int+0x84>
    5104:	12 60       	ori	r17, 0x02	; 2
    5106:	01 c0       	rjmp	.+2      	; 0x510a <conv_int+0x86>
    5108:	12 61       	ori	r17, 0x12	; 18
    510a:	af 2c       	mov	r10, r15
    510c:	c1 2c       	mov	r12, r1
    510e:	d1 2c       	mov	r13, r1
    5110:	76 01       	movw	r14, r12
    5112:	20 ed       	ldi	r18, 0xD0	; 208
    5114:	28 0f       	add	r18, r24
    5116:	28 30       	cpi	r18, 0x08	; 8
    5118:	78 f0       	brcs	.+30     	; 0x5138 <conv_int+0xb4>
    511a:	14 ff       	sbrs	r17, 4
    511c:	03 c0       	rjmp	.+6      	; 0x5124 <conv_int+0xa0>
    511e:	be 01       	movw	r22, r28
    5120:	a0 d2       	rcall	.+1344   	; 0x5662 <ungetc>
    5122:	17 c0       	rjmp	.+46     	; 0x5152 <conv_int+0xce>
    5124:	2a 30       	cpi	r18, 0x0A	; 10
    5126:	40 f0       	brcs	.+16     	; 0x5138 <conv_int+0xb4>
    5128:	16 ff       	sbrs	r17, 6
    512a:	f9 cf       	rjmp	.-14     	; 0x511e <conv_int+0x9a>
    512c:	2f 7d       	andi	r18, 0xDF	; 223
    512e:	3f ee       	ldi	r19, 0xEF	; 239
    5130:	32 0f       	add	r19, r18
    5132:	36 30       	cpi	r19, 0x06	; 6
    5134:	a0 f7       	brcc	.-24     	; 0x511e <conv_int+0x9a>
    5136:	27 50       	subi	r18, 0x07	; 7
    5138:	41 2f       	mov	r20, r17
    513a:	c7 01       	movw	r24, r14
    513c:	b6 01       	movw	r22, r12
    513e:	6c df       	rcall	.-296    	; 0x5018 <mulacc>
    5140:	6b 01       	movw	r12, r22
    5142:	7c 01       	movw	r14, r24
    5144:	12 60       	ori	r17, 0x02	; 2
    5146:	aa 94       	dec	r10
    5148:	51 f0       	breq	.+20     	; 0x515e <conv_int+0xda>
    514a:	ce 01       	movw	r24, r28
    514c:	1a d2       	rcall	.+1076   	; 0x5582 <fgetc>
    514e:	97 ff       	sbrs	r25, 7
    5150:	e0 cf       	rjmp	.-64     	; 0x5112 <conv_int+0x8e>
    5152:	11 fd       	sbrc	r17, 1
    5154:	04 c0       	rjmp	.+8      	; 0x515e <conv_int+0xda>
    5156:	b1 cf       	rjmp	.-158    	; 0x50ba <conv_int+0x36>
    5158:	c1 2c       	mov	r12, r1
    515a:	d1 2c       	mov	r13, r1
    515c:	76 01       	movw	r14, r12
    515e:	17 ff       	sbrs	r17, 7
    5160:	08 c0       	rjmp	.+16     	; 0x5172 <conv_int+0xee>
    5162:	f0 94       	com	r15
    5164:	e0 94       	com	r14
    5166:	d0 94       	com	r13
    5168:	c0 94       	com	r12
    516a:	c1 1c       	adc	r12, r1
    516c:	d1 1c       	adc	r13, r1
    516e:	e1 1c       	adc	r14, r1
    5170:	f1 1c       	adc	r15, r1
    5172:	21 2f       	mov	r18, r17
    5174:	b7 01       	movw	r22, r14
    5176:	a6 01       	movw	r20, r12
    5178:	c4 01       	movw	r24, r8
    517a:	42 df       	rcall	.-380    	; 0x5000 <putval>
    517c:	81 e0       	ldi	r24, 0x01	; 1
    517e:	df 91       	pop	r29
    5180:	cf 91       	pop	r28
    5182:	1f 91       	pop	r17
    5184:	0f 91       	pop	r16
    5186:	ff 90       	pop	r15
    5188:	ef 90       	pop	r14
    518a:	df 90       	pop	r13
    518c:	cf 90       	pop	r12
    518e:	af 90       	pop	r10
    5190:	9f 90       	pop	r9
    5192:	8f 90       	pop	r8
    5194:	08 95       	ret

00005196 <conv_brk>:
    5196:	a1 e2       	ldi	r26, 0x21	; 33
    5198:	b0 e0       	ldi	r27, 0x00	; 0
    519a:	e0 ed       	ldi	r30, 0xD0	; 208
    519c:	f8 e2       	ldi	r31, 0x28	; 40
    519e:	e0 c2       	rjmp	.+1472   	; 0x5760 <__prologue_saves__+0xa>
    51a0:	5c 01       	movw	r10, r24
    51a2:	7a 01       	movw	r14, r20
    51a4:	8e 01       	movw	r16, r28
    51a6:	0f 5f       	subi	r16, 0xFF	; 255
    51a8:	1f 4f       	sbci	r17, 0xFF	; 255
    51aa:	68 01       	movw	r12, r16
    51ac:	80 e2       	ldi	r24, 0x20	; 32
    51ae:	d8 01       	movw	r26, r16
    51b0:	1d 92       	st	X+, r1
    51b2:	8a 95       	dec	r24
    51b4:	e9 f7       	brne	.-6      	; 0x51b0 <conv_brk+0x1a>
    51b6:	f5 01       	movw	r30, r10
    51b8:	73 80       	ldd	r7, Z+3	; 0x03
    51ba:	40 e0       	ldi	r20, 0x00	; 0
    51bc:	50 e0       	ldi	r21, 0x00	; 0
    51be:	81 2c       	mov	r8, r1
    51c0:	b0 e0       	ldi	r27, 0x00	; 0
    51c2:	91 2c       	mov	r9, r1
    51c4:	81 e0       	ldi	r24, 0x01	; 1
    51c6:	90 e0       	ldi	r25, 0x00	; 0
    51c8:	f9 01       	movw	r30, r18
    51ca:	73 fc       	sbrc	r7, 3
    51cc:	a5 91       	lpm	r26, Z+
    51ce:	73 fe       	sbrs	r7, 3
    51d0:	a1 91       	ld	r26, Z+
    51d2:	8f 01       	movw	r16, r30
    51d4:	7a 2f       	mov	r23, r26
    51d6:	9f 01       	movw	r18, r30
    51d8:	a1 11       	cpse	r26, r1
    51da:	03 c0       	rjmp	.+6      	; 0x51e2 <conv_brk+0x4c>
    51dc:	80 e0       	ldi	r24, 0x00	; 0
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	7b c0       	rjmp	.+246    	; 0x52d8 <conv_brk+0x142>
    51e2:	ae 35       	cpi	r26, 0x5E	; 94
    51e4:	19 f4       	brne	.+6      	; 0x51ec <conv_brk+0x56>
    51e6:	41 15       	cp	r20, r1
    51e8:	51 05       	cpc	r21, r1
    51ea:	59 f1       	breq	.+86     	; 0x5242 <conv_brk+0xac>
    51ec:	e9 2d       	mov	r30, r9
    51ee:	f0 e0       	ldi	r31, 0x00	; 0
    51f0:	e4 17       	cp	r30, r20
    51f2:	f5 07       	cpc	r31, r21
    51f4:	3c f4       	brge	.+14     	; 0x5204 <conv_brk+0x6e>
    51f6:	ad 35       	cpi	r26, 0x5D	; 93
    51f8:	69 f1       	breq	.+90     	; 0x5254 <conv_brk+0xbe>
    51fa:	ad 32       	cpi	r26, 0x2D	; 45
    51fc:	19 f4       	brne	.+6      	; 0x5204 <conv_brk+0x6e>
    51fe:	bb 23       	and	r27, r27
    5200:	19 f1       	breq	.+70     	; 0x5248 <conv_brk+0xb2>
    5202:	03 c0       	rjmp	.+6      	; 0x520a <conv_brk+0x74>
    5204:	b1 11       	cpse	r27, r1
    5206:	01 c0       	rjmp	.+2      	; 0x520a <conv_brk+0x74>
    5208:	8a 2e       	mov	r8, r26
    520a:	e7 2f       	mov	r30, r23
    520c:	e6 95       	lsr	r30
    520e:	e6 95       	lsr	r30
    5210:	e6 95       	lsr	r30
    5212:	86 01       	movw	r16, r12
    5214:	0e 0f       	add	r16, r30
    5216:	11 1d       	adc	r17, r1
    5218:	f8 01       	movw	r30, r16
    521a:	a7 2f       	mov	r26, r23
    521c:	a7 70       	andi	r26, 0x07	; 7
    521e:	8c 01       	movw	r16, r24
    5220:	02 c0       	rjmp	.+4      	; 0x5226 <conv_brk+0x90>
    5222:	00 0f       	add	r16, r16
    5224:	11 1f       	adc	r17, r17
    5226:	aa 95       	dec	r26
    5228:	e2 f7       	brpl	.-8      	; 0x5222 <conv_brk+0x8c>
    522a:	d8 01       	movw	r26, r16
    522c:	b0 81       	ld	r27, Z
    522e:	ba 2b       	or	r27, r26
    5230:	b0 83       	st	Z, r27
    5232:	78 15       	cp	r23, r8
    5234:	59 f0       	breq	.+22     	; 0x524c <conv_brk+0xb6>
    5236:	78 15       	cp	r23, r8
    5238:	10 f4       	brcc	.+4      	; 0x523e <conv_brk+0xa8>
    523a:	7f 5f       	subi	r23, 0xFF	; 255
    523c:	e6 cf       	rjmp	.-52     	; 0x520a <conv_brk+0x74>
    523e:	71 50       	subi	r23, 0x01	; 1
    5240:	e4 cf       	rjmp	.-56     	; 0x520a <conv_brk+0x74>
    5242:	99 24       	eor	r9, r9
    5244:	93 94       	inc	r9
    5246:	03 c0       	rjmp	.+6      	; 0x524e <conv_brk+0xb8>
    5248:	b1 e0       	ldi	r27, 0x01	; 1
    524a:	01 c0       	rjmp	.+2      	; 0x524e <conv_brk+0xb8>
    524c:	b0 e0       	ldi	r27, 0x00	; 0
    524e:	4f 5f       	subi	r20, 0xFF	; 255
    5250:	5f 4f       	sbci	r21, 0xFF	; 255
    5252:	ba cf       	rjmp	.-140    	; 0x51c8 <conv_brk+0x32>
    5254:	bb 23       	and	r27, r27
    5256:	19 f0       	breq	.+6      	; 0x525e <conv_brk+0xc8>
    5258:	8e 81       	ldd	r24, Y+6	; 0x06
    525a:	80 62       	ori	r24, 0x20	; 32
    525c:	8e 83       	std	Y+6, r24	; 0x06
    525e:	91 10       	cpse	r9, r1
    5260:	03 c0       	rjmp	.+6      	; 0x5268 <conv_brk+0xd2>
    5262:	99 24       	eor	r9, r9
    5264:	93 94       	inc	r9
    5266:	15 c0       	rjmp	.+42     	; 0x5292 <conv_brk+0xfc>
    5268:	f6 01       	movw	r30, r12
    526a:	ce 01       	movw	r24, r28
    526c:	81 96       	adiw	r24, 0x21	; 33
    526e:	20 81       	ld	r18, Z
    5270:	20 95       	com	r18
    5272:	21 93       	st	Z+, r18
    5274:	e8 17       	cp	r30, r24
    5276:	f9 07       	cpc	r31, r25
    5278:	d1 f7       	brne	.-12     	; 0x526e <conv_brk+0xd8>
    527a:	f3 cf       	rjmp	.-26     	; 0x5262 <conv_brk+0xcc>
    527c:	e1 14       	cp	r14, r1
    527e:	f1 04       	cpc	r15, r1
    5280:	29 f0       	breq	.+10     	; 0x528c <conv_brk+0xf6>
    5282:	d7 01       	movw	r26, r14
    5284:	8c 93       	st	X, r24
    5286:	f7 01       	movw	r30, r14
    5288:	31 96       	adiw	r30, 0x01	; 1
    528a:	7f 01       	movw	r14, r30
    528c:	61 50       	subi	r22, 0x01	; 1
    528e:	f1 f0       	breq	.+60     	; 0x52cc <conv_brk+0x136>
    5290:	91 2c       	mov	r9, r1
    5292:	c5 01       	movw	r24, r10
    5294:	69 a3       	std	Y+33, r22	; 0x21
    5296:	75 d1       	rcall	.+746    	; 0x5582 <fgetc>
    5298:	69 a1       	ldd	r22, Y+33	; 0x21
    529a:	97 fd       	sbrc	r25, 7
    529c:	15 c0       	rjmp	.+42     	; 0x52c8 <conv_brk+0x132>
    529e:	28 2f       	mov	r18, r24
    52a0:	26 95       	lsr	r18
    52a2:	26 95       	lsr	r18
    52a4:	26 95       	lsr	r18
    52a6:	f6 01       	movw	r30, r12
    52a8:	e2 0f       	add	r30, r18
    52aa:	f1 1d       	adc	r31, r1
    52ac:	20 81       	ld	r18, Z
    52ae:	30 e0       	ldi	r19, 0x00	; 0
    52b0:	ac 01       	movw	r20, r24
    52b2:	47 70       	andi	r20, 0x07	; 7
    52b4:	55 27       	eor	r21, r21
    52b6:	02 c0       	rjmp	.+4      	; 0x52bc <conv_brk+0x126>
    52b8:	35 95       	asr	r19
    52ba:	27 95       	ror	r18
    52bc:	4a 95       	dec	r20
    52be:	e2 f7       	brpl	.-8      	; 0x52b8 <conv_brk+0x122>
    52c0:	20 fd       	sbrc	r18, 0
    52c2:	dc cf       	rjmp	.-72     	; 0x527c <conv_brk+0xe6>
    52c4:	b5 01       	movw	r22, r10
    52c6:	cd d1       	rcall	.+922    	; 0x5662 <ungetc>
    52c8:	91 10       	cpse	r9, r1
    52ca:	88 cf       	rjmp	.-240    	; 0x51dc <conv_brk+0x46>
    52cc:	e1 14       	cp	r14, r1
    52ce:	f1 04       	cpc	r15, r1
    52d0:	11 f0       	breq	.+4      	; 0x52d6 <conv_brk+0x140>
    52d2:	d7 01       	movw	r26, r14
    52d4:	1c 92       	st	X, r1
    52d6:	c8 01       	movw	r24, r16
    52d8:	a1 96       	adiw	r28, 0x21	; 33
    52da:	ed e0       	ldi	r30, 0x0D	; 13
    52dc:	5a c2       	rjmp	.+1204   	; 0x5792 <__epilogue_restores__+0xa>

000052de <vfscanf>:
    52de:	4f 92       	push	r4
    52e0:	5f 92       	push	r5
    52e2:	7f 92       	push	r7
    52e4:	8f 92       	push	r8
    52e6:	9f 92       	push	r9
    52e8:	af 92       	push	r10
    52ea:	bf 92       	push	r11
    52ec:	cf 92       	push	r12
    52ee:	df 92       	push	r13
    52f0:	ef 92       	push	r14
    52f2:	ff 92       	push	r15
    52f4:	0f 93       	push	r16
    52f6:	1f 93       	push	r17
    52f8:	cf 93       	push	r28
    52fa:	df 93       	push	r29
    52fc:	1f 92       	push	r1
    52fe:	cd b7       	in	r28, 0x3d	; 61
    5300:	de b7       	in	r29, 0x3e	; 62
    5302:	8c 01       	movw	r16, r24
    5304:	2b 01       	movw	r4, r22
    5306:	7a 01       	movw	r14, r20
    5308:	fc 01       	movw	r30, r24
    530a:	16 82       	std	Z+6, r1	; 0x06
    530c:	17 82       	std	Z+7, r1	; 0x07
    530e:	a1 2c       	mov	r10, r1
    5310:	f8 01       	movw	r30, r16
    5312:	d3 80       	ldd	r13, Z+3	; 0x03
    5314:	f2 01       	movw	r30, r4
    5316:	d3 fc       	sbrc	r13, 3
    5318:	85 91       	lpm	r24, Z+
    531a:	d3 fe       	sbrs	r13, 3
    531c:	81 91       	ld	r24, Z+
    531e:	38 2f       	mov	r19, r24
    5320:	2f 01       	movw	r4, r30
    5322:	88 23       	and	r24, r24
    5324:	09 f4       	brne	.+2      	; 0x5328 <vfscanf+0x4a>
    5326:	ee c0       	rjmp	.+476    	; 0x5504 <vfscanf+0x226>
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	39 83       	std	Y+1, r19	; 0x01
    532c:	01 d1       	rcall	.+514    	; 0x5530 <isspace>
    532e:	39 81       	ldd	r19, Y+1	; 0x01
    5330:	89 2b       	or	r24, r25
    5332:	19 f0       	breq	.+6      	; 0x533a <vfscanf+0x5c>
    5334:	c8 01       	movw	r24, r16
    5336:	90 de       	rcall	.-736    	; 0x5058 <skip_spaces>
    5338:	eb cf       	rjmp	.-42     	; 0x5310 <vfscanf+0x32>
    533a:	35 32       	cpi	r19, 0x25	; 37
    533c:	41 f4       	brne	.+16     	; 0x534e <vfscanf+0x70>
    533e:	f2 01       	movw	r30, r4
    5340:	d3 fc       	sbrc	r13, 3
    5342:	35 91       	lpm	r19, Z+
    5344:	d3 fe       	sbrs	r13, 3
    5346:	31 91       	ld	r19, Z+
    5348:	2f 01       	movw	r4, r30
    534a:	35 32       	cpi	r19, 0x25	; 37
    534c:	59 f4       	brne	.+22     	; 0x5364 <vfscanf+0x86>
    534e:	c8 01       	movw	r24, r16
    5350:	39 83       	std	Y+1, r19	; 0x01
    5352:	17 d1       	rcall	.+558    	; 0x5582 <fgetc>
    5354:	39 81       	ldd	r19, Y+1	; 0x01
    5356:	97 fd       	sbrc	r25, 7
    5358:	d3 c0       	rjmp	.+422    	; 0x5500 <vfscanf+0x222>
    535a:	38 17       	cp	r19, r24
    535c:	c9 f2       	breq	.-78     	; 0x5310 <vfscanf+0x32>
    535e:	b8 01       	movw	r22, r16
    5360:	80 d1       	rcall	.+768    	; 0x5662 <ungetc>
    5362:	d0 c0       	rjmp	.+416    	; 0x5504 <vfscanf+0x226>
    5364:	3a 32       	cpi	r19, 0x2A	; 42
    5366:	41 f4       	brne	.+16     	; 0x5378 <vfscanf+0x9a>
    5368:	d3 fc       	sbrc	r13, 3
    536a:	35 91       	lpm	r19, Z+
    536c:	d3 fe       	sbrs	r13, 3
    536e:	31 91       	ld	r19, Z+
    5370:	2f 01       	movw	r4, r30
    5372:	bb 24       	eor	r11, r11
    5374:	b3 94       	inc	r11
    5376:	01 c0       	rjmp	.+2      	; 0x537a <vfscanf+0x9c>
    5378:	b1 2c       	mov	r11, r1
    537a:	71 2c       	mov	r7, r1
    537c:	20 ed       	ldi	r18, 0xD0	; 208
    537e:	23 0f       	add	r18, r19
    5380:	2a 30       	cpi	r18, 0x0A	; 10
    5382:	88 f4       	brcc	.+34     	; 0x53a6 <vfscanf+0xc8>
    5384:	fb 2d       	mov	r31, r11
    5386:	f2 60       	ori	r31, 0x02	; 2
    5388:	bf 2e       	mov	r11, r31
    538a:	67 2d       	mov	r22, r7
    538c:	70 e0       	ldi	r23, 0x00	; 0
    538e:	80 e0       	ldi	r24, 0x00	; 0
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	40 e2       	ldi	r20, 0x20	; 32
    5394:	41 de       	rcall	.-894    	; 0x5018 <mulacc>
    5396:	76 2e       	mov	r7, r22
    5398:	f2 01       	movw	r30, r4
    539a:	d3 fc       	sbrc	r13, 3
    539c:	35 91       	lpm	r19, Z+
    539e:	d3 fe       	sbrs	r13, 3
    53a0:	31 91       	ld	r19, Z+
    53a2:	2f 01       	movw	r4, r30
    53a4:	eb cf       	rjmp	.-42     	; 0x537c <vfscanf+0x9e>
    53a6:	b1 fe       	sbrs	r11, 1
    53a8:	03 c0       	rjmp	.+6      	; 0x53b0 <vfscanf+0xd2>
    53aa:	71 10       	cpse	r7, r1
    53ac:	03 c0       	rjmp	.+6      	; 0x53b4 <vfscanf+0xd6>
    53ae:	aa c0       	rjmp	.+340    	; 0x5504 <vfscanf+0x226>
    53b0:	77 24       	eor	r7, r7
    53b2:	7a 94       	dec	r7
    53b4:	38 36       	cpi	r19, 0x68	; 104
    53b6:	19 f0       	breq	.+6      	; 0x53be <vfscanf+0xe0>
    53b8:	3c 36       	cpi	r19, 0x6C	; 108
    53ba:	61 f0       	breq	.+24     	; 0x53d4 <vfscanf+0xf6>
    53bc:	14 c0       	rjmp	.+40     	; 0x53e6 <vfscanf+0x108>
    53be:	f2 01       	movw	r30, r4
    53c0:	d3 fc       	sbrc	r13, 3
    53c2:	35 91       	lpm	r19, Z+
    53c4:	d3 fe       	sbrs	r13, 3
    53c6:	31 91       	ld	r19, Z+
    53c8:	2f 01       	movw	r4, r30
    53ca:	38 36       	cpi	r19, 0x68	; 104
    53cc:	61 f4       	brne	.+24     	; 0x53e6 <vfscanf+0x108>
    53ce:	fb 2d       	mov	r31, r11
    53d0:	f8 60       	ori	r31, 0x08	; 8
    53d2:	bf 2e       	mov	r11, r31
    53d4:	8b 2d       	mov	r24, r11
    53d6:	84 60       	ori	r24, 0x04	; 4
    53d8:	b8 2e       	mov	r11, r24
    53da:	f2 01       	movw	r30, r4
    53dc:	d3 fc       	sbrc	r13, 3
    53de:	35 91       	lpm	r19, Z+
    53e0:	d3 fe       	sbrs	r13, 3
    53e2:	31 91       	ld	r19, Z+
    53e4:	2f 01       	movw	r4, r30
    53e6:	33 23       	and	r19, r19
    53e8:	09 f4       	brne	.+2      	; 0x53ec <vfscanf+0x10e>
    53ea:	8c c0       	rjmp	.+280    	; 0x5504 <vfscanf+0x226>
    53ec:	63 2f       	mov	r22, r19
    53ee:	70 e0       	ldi	r23, 0x00	; 0
    53f0:	88 e2       	ldi	r24, 0x28	; 40
    53f2:	92 e0       	ldi	r25, 0x02	; 2
    53f4:	39 83       	std	Y+1, r19	; 0x01
    53f6:	a4 d0       	rcall	.+328    	; 0x5540 <strchr_P>
    53f8:	39 81       	ldd	r19, Y+1	; 0x01
    53fa:	89 2b       	or	r24, r25
    53fc:	09 f4       	brne	.+2      	; 0x5400 <vfscanf+0x122>
    53fe:	82 c0       	rjmp	.+260    	; 0x5504 <vfscanf+0x226>
    5400:	b0 fc       	sbrc	r11, 0
    5402:	07 c0       	rjmp	.+14     	; 0x5412 <vfscanf+0x134>
    5404:	f7 01       	movw	r30, r14
    5406:	c0 80       	ld	r12, Z
    5408:	d1 80       	ldd	r13, Z+1	; 0x01
    540a:	c7 01       	movw	r24, r14
    540c:	02 96       	adiw	r24, 0x02	; 2
    540e:	7c 01       	movw	r14, r24
    5410:	02 c0       	rjmp	.+4      	; 0x5416 <vfscanf+0x138>
    5412:	c1 2c       	mov	r12, r1
    5414:	d1 2c       	mov	r13, r1
    5416:	3e 36       	cpi	r19, 0x6E	; 110
    5418:	49 f4       	brne	.+18     	; 0x542c <vfscanf+0x14e>
    541a:	f8 01       	movw	r30, r16
    541c:	46 81       	ldd	r20, Z+6	; 0x06
    541e:	57 81       	ldd	r21, Z+7	; 0x07
    5420:	60 e0       	ldi	r22, 0x00	; 0
    5422:	70 e0       	ldi	r23, 0x00	; 0
    5424:	2b 2d       	mov	r18, r11
    5426:	c6 01       	movw	r24, r12
    5428:	eb dd       	rcall	.-1066   	; 0x5000 <putval>
    542a:	72 cf       	rjmp	.-284    	; 0x5310 <vfscanf+0x32>
    542c:	33 36       	cpi	r19, 0x63	; 99
    542e:	99 f4       	brne	.+38     	; 0x5456 <vfscanf+0x178>
    5430:	b1 fc       	sbrc	r11, 1
    5432:	02 c0       	rjmp	.+4      	; 0x5438 <vfscanf+0x15a>
    5434:	77 24       	eor	r7, r7
    5436:	73 94       	inc	r7
    5438:	c8 01       	movw	r24, r16
    543a:	a3 d0       	rcall	.+326    	; 0x5582 <fgetc>
    543c:	97 fd       	sbrc	r25, 7
    543e:	60 c0       	rjmp	.+192    	; 0x5500 <vfscanf+0x222>
    5440:	c1 14       	cp	r12, r1
    5442:	d1 04       	cpc	r13, r1
    5444:	29 f0       	breq	.+10     	; 0x5450 <vfscanf+0x172>
    5446:	f6 01       	movw	r30, r12
    5448:	80 83       	st	Z, r24
    544a:	c6 01       	movw	r24, r12
    544c:	01 96       	adiw	r24, 0x01	; 1
    544e:	6c 01       	movw	r12, r24
    5450:	7a 94       	dec	r7
    5452:	91 f7       	brne	.-28     	; 0x5438 <vfscanf+0x15a>
    5454:	51 c0       	rjmp	.+162    	; 0x54f8 <vfscanf+0x21a>
    5456:	3b 35       	cpi	r19, 0x5B	; 91
    5458:	51 f4       	brne	.+20     	; 0x546e <vfscanf+0x190>
    545a:	92 01       	movw	r18, r4
    545c:	a6 01       	movw	r20, r12
    545e:	67 2d       	mov	r22, r7
    5460:	c8 01       	movw	r24, r16
    5462:	99 de       	rcall	.-718    	; 0x5196 <conv_brk>
    5464:	2c 01       	movw	r4, r24
    5466:	00 97       	sbiw	r24, 0x00	; 0
    5468:	09 f0       	breq	.+2      	; 0x546c <vfscanf+0x18e>
    546a:	46 c0       	rjmp	.+140    	; 0x54f8 <vfscanf+0x21a>
    546c:	40 c0       	rjmp	.+128    	; 0x54ee <vfscanf+0x210>
    546e:	c8 01       	movw	r24, r16
    5470:	39 83       	std	Y+1, r19	; 0x01
    5472:	f2 dd       	rcall	.-1052   	; 0x5058 <skip_spaces>
    5474:	39 81       	ldd	r19, Y+1	; 0x01
    5476:	97 fd       	sbrc	r25, 7
    5478:	43 c0       	rjmp	.+134    	; 0x5500 <vfscanf+0x222>
    547a:	3f 36       	cpi	r19, 0x6F	; 111
    547c:	51 f1       	breq	.+84     	; 0x54d2 <vfscanf+0x1f4>
    547e:	28 f4       	brcc	.+10     	; 0x548a <vfscanf+0x1ac>
    5480:	34 36       	cpi	r19, 0x64	; 100
    5482:	19 f1       	breq	.+70     	; 0x54ca <vfscanf+0x1ec>
    5484:	39 36       	cpi	r19, 0x69	; 105
    5486:	61 f1       	breq	.+88     	; 0x54e0 <vfscanf+0x202>
    5488:	28 c0       	rjmp	.+80     	; 0x54da <vfscanf+0x1fc>
    548a:	33 37       	cpi	r19, 0x73	; 115
    548c:	69 f0       	breq	.+26     	; 0x54a8 <vfscanf+0x1ca>
    548e:	35 37       	cpi	r19, 0x75	; 117
    5490:	e1 f0       	breq	.+56     	; 0x54ca <vfscanf+0x1ec>
    5492:	23 c0       	rjmp	.+70     	; 0x54da <vfscanf+0x1fc>
    5494:	c1 14       	cp	r12, r1
    5496:	d1 04       	cpc	r13, r1
    5498:	29 f0       	breq	.+10     	; 0x54a4 <vfscanf+0x1c6>
    549a:	f6 01       	movw	r30, r12
    549c:	80 82       	st	Z, r8
    549e:	c6 01       	movw	r24, r12
    54a0:	01 96       	adiw	r24, 0x01	; 1
    54a2:	6c 01       	movw	r12, r24
    54a4:	7a 94       	dec	r7
    54a6:	59 f0       	breq	.+22     	; 0x54be <vfscanf+0x1e0>
    54a8:	c8 01       	movw	r24, r16
    54aa:	6b d0       	rcall	.+214    	; 0x5582 <fgetc>
    54ac:	4c 01       	movw	r8, r24
    54ae:	97 fd       	sbrc	r25, 7
    54b0:	06 c0       	rjmp	.+12     	; 0x54be <vfscanf+0x1e0>
    54b2:	3e d0       	rcall	.+124    	; 0x5530 <isspace>
    54b4:	89 2b       	or	r24, r25
    54b6:	71 f3       	breq	.-36     	; 0x5494 <vfscanf+0x1b6>
    54b8:	b8 01       	movw	r22, r16
    54ba:	c4 01       	movw	r24, r8
    54bc:	d2 d0       	rcall	.+420    	; 0x5662 <ungetc>
    54be:	c1 14       	cp	r12, r1
    54c0:	d1 04       	cpc	r13, r1
    54c2:	d1 f0       	breq	.+52     	; 0x54f8 <vfscanf+0x21a>
    54c4:	f6 01       	movw	r30, r12
    54c6:	10 82       	st	Z, r1
    54c8:	17 c0       	rjmp	.+46     	; 0x54f8 <vfscanf+0x21a>
    54ca:	fb 2d       	mov	r31, r11
    54cc:	f0 62       	ori	r31, 0x20	; 32
    54ce:	bf 2e       	mov	r11, r31
    54d0:	07 c0       	rjmp	.+14     	; 0x54e0 <vfscanf+0x202>
    54d2:	8b 2d       	mov	r24, r11
    54d4:	80 61       	ori	r24, 0x10	; 16
    54d6:	b8 2e       	mov	r11, r24
    54d8:	03 c0       	rjmp	.+6      	; 0x54e0 <vfscanf+0x202>
    54da:	9b 2d       	mov	r25, r11
    54dc:	90 64       	ori	r25, 0x40	; 64
    54de:	b9 2e       	mov	r11, r25
    54e0:	2b 2d       	mov	r18, r11
    54e2:	a6 01       	movw	r20, r12
    54e4:	67 2d       	mov	r22, r7
    54e6:	c8 01       	movw	r24, r16
    54e8:	cd dd       	rcall	.-1126   	; 0x5084 <conv_int>
    54ea:	81 11       	cpse	r24, r1
    54ec:	05 c0       	rjmp	.+10     	; 0x54f8 <vfscanf+0x21a>
    54ee:	f8 01       	movw	r30, r16
    54f0:	83 81       	ldd	r24, Z+3	; 0x03
    54f2:	80 73       	andi	r24, 0x30	; 48
    54f4:	29 f4       	brne	.+10     	; 0x5500 <vfscanf+0x222>
    54f6:	06 c0       	rjmp	.+12     	; 0x5504 <vfscanf+0x226>
    54f8:	b0 fc       	sbrc	r11, 0
    54fa:	0a cf       	rjmp	.-492    	; 0x5310 <vfscanf+0x32>
    54fc:	a3 94       	inc	r10
    54fe:	08 cf       	rjmp	.-496    	; 0x5310 <vfscanf+0x32>
    5500:	aa 20       	and	r10, r10
    5502:	19 f0       	breq	.+6      	; 0x550a <vfscanf+0x22c>
    5504:	8a 2d       	mov	r24, r10
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	02 c0       	rjmp	.+4      	; 0x550e <vfscanf+0x230>
    550a:	8f ef       	ldi	r24, 0xFF	; 255
    550c:	9f ef       	ldi	r25, 0xFF	; 255
    550e:	0f 90       	pop	r0
    5510:	df 91       	pop	r29
    5512:	cf 91       	pop	r28
    5514:	1f 91       	pop	r17
    5516:	0f 91       	pop	r16
    5518:	ff 90       	pop	r15
    551a:	ef 90       	pop	r14
    551c:	df 90       	pop	r13
    551e:	cf 90       	pop	r12
    5520:	bf 90       	pop	r11
    5522:	af 90       	pop	r10
    5524:	9f 90       	pop	r9
    5526:	8f 90       	pop	r8
    5528:	7f 90       	pop	r7
    552a:	5f 90       	pop	r5
    552c:	4f 90       	pop	r4
    552e:	08 95       	ret

00005530 <isspace>:
    5530:	91 11       	cpse	r25, r1
    5532:	0e c1       	rjmp	.+540    	; 0x5750 <__ctype_isfalse>
    5534:	80 32       	cpi	r24, 0x20	; 32
    5536:	19 f0       	breq	.+6      	; 0x553e <isspace+0xe>
    5538:	89 50       	subi	r24, 0x09	; 9
    553a:	85 50       	subi	r24, 0x05	; 5
    553c:	d0 f7       	brcc	.-12     	; 0x5532 <isspace+0x2>
    553e:	08 95       	ret

00005540 <strchr_P>:
    5540:	fc 01       	movw	r30, r24
    5542:	05 90       	lpm	r0, Z+
    5544:	06 16       	cp	r0, r22
    5546:	21 f0       	breq	.+8      	; 0x5550 <strchr_P+0x10>
    5548:	00 20       	and	r0, r0
    554a:	d9 f7       	brne	.-10     	; 0x5542 <strchr_P+0x2>
    554c:	c0 01       	movw	r24, r0
    554e:	08 95       	ret
    5550:	31 97       	sbiw	r30, 0x01	; 1
    5552:	cf 01       	movw	r24, r30
    5554:	08 95       	ret

00005556 <strnlen_P>:
    5556:	fc 01       	movw	r30, r24
    5558:	05 90       	lpm	r0, Z+
    555a:	61 50       	subi	r22, 0x01	; 1
    555c:	70 40       	sbci	r23, 0x00	; 0
    555e:	01 10       	cpse	r0, r1
    5560:	d8 f7       	brcc	.-10     	; 0x5558 <strnlen_P+0x2>
    5562:	80 95       	com	r24
    5564:	90 95       	com	r25
    5566:	8e 0f       	add	r24, r30
    5568:	9f 1f       	adc	r25, r31
    556a:	08 95       	ret

0000556c <strnlen>:
    556c:	fc 01       	movw	r30, r24
    556e:	61 50       	subi	r22, 0x01	; 1
    5570:	70 40       	sbci	r23, 0x00	; 0
    5572:	01 90       	ld	r0, Z+
    5574:	01 10       	cpse	r0, r1
    5576:	d8 f7       	brcc	.-10     	; 0x556e <strnlen+0x2>
    5578:	80 95       	com	r24
    557a:	90 95       	com	r25
    557c:	8e 0f       	add	r24, r30
    557e:	9f 1f       	adc	r25, r31
    5580:	08 95       	ret

00005582 <fgetc>:
    5582:	cf 93       	push	r28
    5584:	df 93       	push	r29
    5586:	ec 01       	movw	r28, r24
    5588:	2b 81       	ldd	r18, Y+3	; 0x03
    558a:	20 ff       	sbrs	r18, 0
    558c:	33 c0       	rjmp	.+102    	; 0x55f4 <fgetc+0x72>
    558e:	26 ff       	sbrs	r18, 6
    5590:	0a c0       	rjmp	.+20     	; 0x55a6 <fgetc+0x24>
    5592:	2f 7b       	andi	r18, 0xBF	; 191
    5594:	2b 83       	std	Y+3, r18	; 0x03
    5596:	8e 81       	ldd	r24, Y+6	; 0x06
    5598:	9f 81       	ldd	r25, Y+7	; 0x07
    559a:	01 96       	adiw	r24, 0x01	; 1
    559c:	8e 83       	std	Y+6, r24	; 0x06
    559e:	9f 83       	std	Y+7, r25	; 0x07
    55a0:	8a 81       	ldd	r24, Y+2	; 0x02
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	29 c0       	rjmp	.+82     	; 0x55f8 <fgetc+0x76>
    55a6:	22 ff       	sbrs	r18, 2
    55a8:	0f c0       	rjmp	.+30     	; 0x55c8 <fgetc+0x46>
    55aa:	e8 81       	ld	r30, Y
    55ac:	f9 81       	ldd	r31, Y+1	; 0x01
    55ae:	80 81       	ld	r24, Z
    55b0:	99 27       	eor	r25, r25
    55b2:	87 fd       	sbrc	r24, 7
    55b4:	90 95       	com	r25
    55b6:	00 97       	sbiw	r24, 0x00	; 0
    55b8:	19 f4       	brne	.+6      	; 0x55c0 <fgetc+0x3e>
    55ba:	20 62       	ori	r18, 0x20	; 32
    55bc:	2b 83       	std	Y+3, r18	; 0x03
    55be:	1a c0       	rjmp	.+52     	; 0x55f4 <fgetc+0x72>
    55c0:	31 96       	adiw	r30, 0x01	; 1
    55c2:	e8 83       	st	Y, r30
    55c4:	f9 83       	std	Y+1, r31	; 0x01
    55c6:	0e c0       	rjmp	.+28     	; 0x55e4 <fgetc+0x62>
    55c8:	ea 85       	ldd	r30, Y+10	; 0x0a
    55ca:	fb 85       	ldd	r31, Y+11	; 0x0b
    55cc:	09 95       	icall
    55ce:	97 ff       	sbrs	r25, 7
    55d0:	09 c0       	rjmp	.+18     	; 0x55e4 <fgetc+0x62>
    55d2:	2b 81       	ldd	r18, Y+3	; 0x03
    55d4:	01 96       	adiw	r24, 0x01	; 1
    55d6:	11 f4       	brne	.+4      	; 0x55dc <fgetc+0x5a>
    55d8:	80 e1       	ldi	r24, 0x10	; 16
    55da:	01 c0       	rjmp	.+2      	; 0x55de <fgetc+0x5c>
    55dc:	80 e2       	ldi	r24, 0x20	; 32
    55de:	82 2b       	or	r24, r18
    55e0:	8b 83       	std	Y+3, r24	; 0x03
    55e2:	08 c0       	rjmp	.+16     	; 0x55f4 <fgetc+0x72>
    55e4:	2e 81       	ldd	r18, Y+6	; 0x06
    55e6:	3f 81       	ldd	r19, Y+7	; 0x07
    55e8:	2f 5f       	subi	r18, 0xFF	; 255
    55ea:	3f 4f       	sbci	r19, 0xFF	; 255
    55ec:	2e 83       	std	Y+6, r18	; 0x06
    55ee:	3f 83       	std	Y+7, r19	; 0x07
    55f0:	99 27       	eor	r25, r25
    55f2:	02 c0       	rjmp	.+4      	; 0x55f8 <fgetc+0x76>
    55f4:	8f ef       	ldi	r24, 0xFF	; 255
    55f6:	9f ef       	ldi	r25, 0xFF	; 255
    55f8:	df 91       	pop	r29
    55fa:	cf 91       	pop	r28
    55fc:	08 95       	ret

000055fe <fputc>:
    55fe:	0f 93       	push	r16
    5600:	1f 93       	push	r17
    5602:	cf 93       	push	r28
    5604:	df 93       	push	r29
    5606:	18 2f       	mov	r17, r24
    5608:	09 2f       	mov	r16, r25
    560a:	eb 01       	movw	r28, r22
    560c:	8b 81       	ldd	r24, Y+3	; 0x03
    560e:	81 fd       	sbrc	r24, 1
    5610:	03 c0       	rjmp	.+6      	; 0x5618 <fputc+0x1a>
    5612:	8f ef       	ldi	r24, 0xFF	; 255
    5614:	9f ef       	ldi	r25, 0xFF	; 255
    5616:	20 c0       	rjmp	.+64     	; 0x5658 <fputc+0x5a>
    5618:	82 ff       	sbrs	r24, 2
    561a:	10 c0       	rjmp	.+32     	; 0x563c <fputc+0x3e>
    561c:	4e 81       	ldd	r20, Y+6	; 0x06
    561e:	5f 81       	ldd	r21, Y+7	; 0x07
    5620:	2c 81       	ldd	r18, Y+4	; 0x04
    5622:	3d 81       	ldd	r19, Y+5	; 0x05
    5624:	42 17       	cp	r20, r18
    5626:	53 07       	cpc	r21, r19
    5628:	7c f4       	brge	.+30     	; 0x5648 <fputc+0x4a>
    562a:	e8 81       	ld	r30, Y
    562c:	f9 81       	ldd	r31, Y+1	; 0x01
    562e:	9f 01       	movw	r18, r30
    5630:	2f 5f       	subi	r18, 0xFF	; 255
    5632:	3f 4f       	sbci	r19, 0xFF	; 255
    5634:	28 83       	st	Y, r18
    5636:	39 83       	std	Y+1, r19	; 0x01
    5638:	10 83       	st	Z, r17
    563a:	06 c0       	rjmp	.+12     	; 0x5648 <fputc+0x4a>
    563c:	e8 85       	ldd	r30, Y+8	; 0x08
    563e:	f9 85       	ldd	r31, Y+9	; 0x09
    5640:	81 2f       	mov	r24, r17
    5642:	09 95       	icall
    5644:	89 2b       	or	r24, r25
    5646:	29 f7       	brne	.-54     	; 0x5612 <fputc+0x14>
    5648:	2e 81       	ldd	r18, Y+6	; 0x06
    564a:	3f 81       	ldd	r19, Y+7	; 0x07
    564c:	2f 5f       	subi	r18, 0xFF	; 255
    564e:	3f 4f       	sbci	r19, 0xFF	; 255
    5650:	2e 83       	std	Y+6, r18	; 0x06
    5652:	3f 83       	std	Y+7, r19	; 0x07
    5654:	81 2f       	mov	r24, r17
    5656:	90 2f       	mov	r25, r16
    5658:	df 91       	pop	r29
    565a:	cf 91       	pop	r28
    565c:	1f 91       	pop	r17
    565e:	0f 91       	pop	r16
    5660:	08 95       	ret

00005662 <ungetc>:
    5662:	fb 01       	movw	r30, r22
    5664:	23 81       	ldd	r18, Z+3	; 0x03
    5666:	20 ff       	sbrs	r18, 0
    5668:	12 c0       	rjmp	.+36     	; 0x568e <ungetc+0x2c>
    566a:	26 fd       	sbrc	r18, 6
    566c:	10 c0       	rjmp	.+32     	; 0x568e <ungetc+0x2c>
    566e:	8f 3f       	cpi	r24, 0xFF	; 255
    5670:	3f ef       	ldi	r19, 0xFF	; 255
    5672:	93 07       	cpc	r25, r19
    5674:	61 f0       	breq	.+24     	; 0x568e <ungetc+0x2c>
    5676:	82 83       	std	Z+2, r24	; 0x02
    5678:	2f 7d       	andi	r18, 0xDF	; 223
    567a:	20 64       	ori	r18, 0x40	; 64
    567c:	23 83       	std	Z+3, r18	; 0x03
    567e:	26 81       	ldd	r18, Z+6	; 0x06
    5680:	37 81       	ldd	r19, Z+7	; 0x07
    5682:	21 50       	subi	r18, 0x01	; 1
    5684:	31 09       	sbc	r19, r1
    5686:	26 83       	std	Z+6, r18	; 0x06
    5688:	37 83       	std	Z+7, r19	; 0x07
    568a:	99 27       	eor	r25, r25
    568c:	08 95       	ret
    568e:	8f ef       	ldi	r24, 0xFF	; 255
    5690:	9f ef       	ldi	r25, 0xFF	; 255
    5692:	08 95       	ret

00005694 <__ultoa_invert>:
    5694:	fa 01       	movw	r30, r20
    5696:	aa 27       	eor	r26, r26
    5698:	28 30       	cpi	r18, 0x08	; 8
    569a:	51 f1       	breq	.+84     	; 0x56f0 <__ultoa_invert+0x5c>
    569c:	20 31       	cpi	r18, 0x10	; 16
    569e:	81 f1       	breq	.+96     	; 0x5700 <__ultoa_invert+0x6c>
    56a0:	e8 94       	clt
    56a2:	6f 93       	push	r22
    56a4:	6e 7f       	andi	r22, 0xFE	; 254
    56a6:	6e 5f       	subi	r22, 0xFE	; 254
    56a8:	7f 4f       	sbci	r23, 0xFF	; 255
    56aa:	8f 4f       	sbci	r24, 0xFF	; 255
    56ac:	9f 4f       	sbci	r25, 0xFF	; 255
    56ae:	af 4f       	sbci	r26, 0xFF	; 255
    56b0:	b1 e0       	ldi	r27, 0x01	; 1
    56b2:	3e d0       	rcall	.+124    	; 0x5730 <__ultoa_invert+0x9c>
    56b4:	b4 e0       	ldi	r27, 0x04	; 4
    56b6:	3c d0       	rcall	.+120    	; 0x5730 <__ultoa_invert+0x9c>
    56b8:	67 0f       	add	r22, r23
    56ba:	78 1f       	adc	r23, r24
    56bc:	89 1f       	adc	r24, r25
    56be:	9a 1f       	adc	r25, r26
    56c0:	a1 1d       	adc	r26, r1
    56c2:	68 0f       	add	r22, r24
    56c4:	79 1f       	adc	r23, r25
    56c6:	8a 1f       	adc	r24, r26
    56c8:	91 1d       	adc	r25, r1
    56ca:	a1 1d       	adc	r26, r1
    56cc:	6a 0f       	add	r22, r26
    56ce:	71 1d       	adc	r23, r1
    56d0:	81 1d       	adc	r24, r1
    56d2:	91 1d       	adc	r25, r1
    56d4:	a1 1d       	adc	r26, r1
    56d6:	20 d0       	rcall	.+64     	; 0x5718 <__ultoa_invert+0x84>
    56d8:	09 f4       	brne	.+2      	; 0x56dc <__ultoa_invert+0x48>
    56da:	68 94       	set
    56dc:	3f 91       	pop	r19
    56de:	2a e0       	ldi	r18, 0x0A	; 10
    56e0:	26 9f       	mul	r18, r22
    56e2:	11 24       	eor	r1, r1
    56e4:	30 19       	sub	r19, r0
    56e6:	30 5d       	subi	r19, 0xD0	; 208
    56e8:	31 93       	st	Z+, r19
    56ea:	de f6       	brtc	.-74     	; 0x56a2 <__ultoa_invert+0xe>
    56ec:	cf 01       	movw	r24, r30
    56ee:	08 95       	ret
    56f0:	46 2f       	mov	r20, r22
    56f2:	47 70       	andi	r20, 0x07	; 7
    56f4:	40 5d       	subi	r20, 0xD0	; 208
    56f6:	41 93       	st	Z+, r20
    56f8:	b3 e0       	ldi	r27, 0x03	; 3
    56fa:	0f d0       	rcall	.+30     	; 0x571a <__ultoa_invert+0x86>
    56fc:	c9 f7       	brne	.-14     	; 0x56f0 <__ultoa_invert+0x5c>
    56fe:	f6 cf       	rjmp	.-20     	; 0x56ec <__ultoa_invert+0x58>
    5700:	46 2f       	mov	r20, r22
    5702:	4f 70       	andi	r20, 0x0F	; 15
    5704:	40 5d       	subi	r20, 0xD0	; 208
    5706:	4a 33       	cpi	r20, 0x3A	; 58
    5708:	18 f0       	brcs	.+6      	; 0x5710 <__ultoa_invert+0x7c>
    570a:	49 5d       	subi	r20, 0xD9	; 217
    570c:	31 fd       	sbrc	r19, 1
    570e:	40 52       	subi	r20, 0x20	; 32
    5710:	41 93       	st	Z+, r20
    5712:	02 d0       	rcall	.+4      	; 0x5718 <__ultoa_invert+0x84>
    5714:	a9 f7       	brne	.-22     	; 0x5700 <__ultoa_invert+0x6c>
    5716:	ea cf       	rjmp	.-44     	; 0x56ec <__ultoa_invert+0x58>
    5718:	b4 e0       	ldi	r27, 0x04	; 4
    571a:	a6 95       	lsr	r26
    571c:	97 95       	ror	r25
    571e:	87 95       	ror	r24
    5720:	77 95       	ror	r23
    5722:	67 95       	ror	r22
    5724:	ba 95       	dec	r27
    5726:	c9 f7       	brne	.-14     	; 0x571a <__ultoa_invert+0x86>
    5728:	00 97       	sbiw	r24, 0x00	; 0
    572a:	61 05       	cpc	r22, r1
    572c:	71 05       	cpc	r23, r1
    572e:	08 95       	ret
    5730:	9b 01       	movw	r18, r22
    5732:	ac 01       	movw	r20, r24
    5734:	0a 2e       	mov	r0, r26
    5736:	06 94       	lsr	r0
    5738:	57 95       	ror	r21
    573a:	47 95       	ror	r20
    573c:	37 95       	ror	r19
    573e:	27 95       	ror	r18
    5740:	ba 95       	dec	r27
    5742:	c9 f7       	brne	.-14     	; 0x5736 <__ultoa_invert+0xa2>
    5744:	62 0f       	add	r22, r18
    5746:	73 1f       	adc	r23, r19
    5748:	84 1f       	adc	r24, r20
    574a:	95 1f       	adc	r25, r21
    574c:	a0 1d       	adc	r26, r0
    574e:	08 95       	ret

00005750 <__ctype_isfalse>:
    5750:	99 27       	eor	r25, r25
    5752:	88 27       	eor	r24, r24

00005754 <__ctype_istrue>:
    5754:	08 95       	ret

00005756 <__prologue_saves__>:
    5756:	2f 92       	push	r2
    5758:	3f 92       	push	r3
    575a:	4f 92       	push	r4
    575c:	5f 92       	push	r5
    575e:	6f 92       	push	r6
    5760:	7f 92       	push	r7
    5762:	8f 92       	push	r8
    5764:	9f 92       	push	r9
    5766:	af 92       	push	r10
    5768:	bf 92       	push	r11
    576a:	cf 92       	push	r12
    576c:	df 92       	push	r13
    576e:	ef 92       	push	r14
    5770:	ff 92       	push	r15
    5772:	0f 93       	push	r16
    5774:	1f 93       	push	r17
    5776:	cf 93       	push	r28
    5778:	df 93       	push	r29
    577a:	cd b7       	in	r28, 0x3d	; 61
    577c:	de b7       	in	r29, 0x3e	; 62
    577e:	ca 1b       	sub	r28, r26
    5780:	db 0b       	sbc	r29, r27
    5782:	cd bf       	out	0x3d, r28	; 61
    5784:	de bf       	out	0x3e, r29	; 62
    5786:	09 94       	ijmp

00005788 <__epilogue_restores__>:
    5788:	2a 88       	ldd	r2, Y+18	; 0x12
    578a:	39 88       	ldd	r3, Y+17	; 0x11
    578c:	48 88       	ldd	r4, Y+16	; 0x10
    578e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5790:	6e 84       	ldd	r6, Y+14	; 0x0e
    5792:	7d 84       	ldd	r7, Y+13	; 0x0d
    5794:	8c 84       	ldd	r8, Y+12	; 0x0c
    5796:	9b 84       	ldd	r9, Y+11	; 0x0b
    5798:	aa 84       	ldd	r10, Y+10	; 0x0a
    579a:	b9 84       	ldd	r11, Y+9	; 0x09
    579c:	c8 84       	ldd	r12, Y+8	; 0x08
    579e:	df 80       	ldd	r13, Y+7	; 0x07
    57a0:	ee 80       	ldd	r14, Y+6	; 0x06
    57a2:	fd 80       	ldd	r15, Y+5	; 0x05
    57a4:	0c 81       	ldd	r16, Y+4	; 0x04
    57a6:	1b 81       	ldd	r17, Y+3	; 0x03
    57a8:	aa 81       	ldd	r26, Y+2	; 0x02
    57aa:	b9 81       	ldd	r27, Y+1	; 0x01
    57ac:	ce 0f       	add	r28, r30
    57ae:	d1 1d       	adc	r29, r1
    57b0:	cd bf       	out	0x3d, r28	; 61
    57b2:	de bf       	out	0x3e, r29	; 62
    57b4:	ed 01       	movw	r28, r26
    57b6:	08 95       	ret

000057b8 <_exit>:
    57b8:	f8 94       	cli

000057ba <__stop_program>:
    57ba:	ff cf       	rjmp	.-2      	; 0x57ba <__stop_program>
