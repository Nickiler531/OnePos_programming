
OnePos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003fc  00802000  00003c32  00003cc6  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b6  008023fc  008023fc  000040c4  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000040c2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006c0  00000000  00000000  00004120  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ec93  00000000  00000000  000047e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002b3d  00000000  00000000  00013473  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00009f6e  00000000  00000000  00015fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000130c  00000000  00000000  0001ff20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00036fb3  00000000  00000000  0002122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000617d  00000000  00000000  000581df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006b8  00000000  00000000  0005e360  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00005b9c  00000000  00000000  0005ea18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c1       	rjmp	.+548    	; 0x226 <__ctors_end>
       2:	00 00       	nop
       4:	2d c1       	rjmp	.+602    	; 0x260 <__bad_interrupt>
       6:	00 00       	nop
       8:	2b c1       	rjmp	.+598    	; 0x260 <__bad_interrupt>
       a:	00 00       	nop
       c:	29 c1       	rjmp	.+594    	; 0x260 <__bad_interrupt>
       e:	00 00       	nop
      10:	27 c1       	rjmp	.+590    	; 0x260 <__bad_interrupt>
      12:	00 00       	nop
      14:	25 c1       	rjmp	.+586    	; 0x260 <__bad_interrupt>
      16:	00 00       	nop
      18:	23 c1       	rjmp	.+582    	; 0x260 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	21 c1       	rjmp	.+578    	; 0x260 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1f c1       	rjmp	.+574    	; 0x260 <__bad_interrupt>
      22:	00 00       	nop
      24:	1d c1       	rjmp	.+570    	; 0x260 <__bad_interrupt>
      26:	00 00       	nop
      28:	1b c1       	rjmp	.+566    	; 0x260 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	19 c1       	rjmp	.+562    	; 0x260 <__bad_interrupt>
      2e:	00 00       	nop
      30:	17 c1       	rjmp	.+558    	; 0x260 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_13>
      38:	13 c1       	rjmp	.+550    	; 0x260 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	11 c1       	rjmp	.+546    	; 0x260 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0f c1       	rjmp	.+542    	; 0x260 <__bad_interrupt>
      42:	00 00       	nop
      44:	0d c1       	rjmp	.+538    	; 0x260 <__bad_interrupt>
      46:	00 00       	nop
      48:	0b c1       	rjmp	.+534    	; 0x260 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	09 c1       	rjmp	.+530    	; 0x260 <__bad_interrupt>
      4e:	00 00       	nop
      50:	07 c1       	rjmp	.+526    	; 0x260 <__bad_interrupt>
      52:	00 00       	nop
      54:	05 c1       	rjmp	.+522    	; 0x260 <__bad_interrupt>
      56:	00 00       	nop
      58:	03 c1       	rjmp	.+518    	; 0x260 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	01 c1       	rjmp	.+514    	; 0x260 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ff c0       	rjmp	.+510    	; 0x260 <__bad_interrupt>
      62:	00 00       	nop
      64:	fd c0       	rjmp	.+506    	; 0x260 <__bad_interrupt>
      66:	00 00       	nop
      68:	fb c0       	rjmp	.+502    	; 0x260 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f9 c0       	rjmp	.+498    	; 0x260 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f7 c0       	rjmp	.+494    	; 0x260 <__bad_interrupt>
      72:	00 00       	nop
      74:	f5 c0       	rjmp	.+490    	; 0x260 <__bad_interrupt>
      76:	00 00       	nop
      78:	f3 c0       	rjmp	.+486    	; 0x260 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f1 c0       	rjmp	.+482    	; 0x260 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ef c0       	rjmp	.+478    	; 0x260 <__bad_interrupt>
      82:	00 00       	nop
      84:	ed c0       	rjmp	.+474    	; 0x260 <__bad_interrupt>
      86:	00 00       	nop
      88:	eb c0       	rjmp	.+470    	; 0x260 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e9 c0       	rjmp	.+466    	; 0x260 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e7 c0       	rjmp	.+462    	; 0x260 <__bad_interrupt>
      92:	00 00       	nop
      94:	e5 c0       	rjmp	.+458    	; 0x260 <__bad_interrupt>
      96:	00 00       	nop
      98:	e3 c0       	rjmp	.+454    	; 0x260 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e1 c0       	rjmp	.+450    	; 0x260 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	df c0       	rjmp	.+446    	; 0x260 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dd c0       	rjmp	.+442    	; 0x260 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	db c0       	rjmp	.+438    	; 0x260 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d9 c0       	rjmp	.+434    	; 0x260 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d7 c0       	rjmp	.+430    	; 0x260 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d5 c0       	rjmp	.+426    	; 0x260 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_46>
      bc:	d1 c0       	rjmp	.+418    	; 0x260 <__bad_interrupt>
      be:	00 00       	nop
      c0:	cf c0       	rjmp	.+414    	; 0x260 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cd c0       	rjmp	.+410    	; 0x260 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	cb c0       	rjmp	.+406    	; 0x260 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c9 c0       	rjmp	.+402    	; 0x260 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c7 c0       	rjmp	.+398    	; 0x260 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c5 c0       	rjmp	.+394    	; 0x260 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c3 c0       	rjmp	.+390    	; 0x260 <__bad_interrupt>
      da:	00 00       	nop
      dc:	c1 c0       	rjmp	.+386    	; 0x260 <__bad_interrupt>
      de:	00 00       	nop
      e0:	bf c0       	rjmp	.+382    	; 0x260 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bd c0       	rjmp	.+378    	; 0x260 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	bb c0       	rjmp	.+374    	; 0x260 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b9 c0       	rjmp	.+370    	; 0x260 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b7 c0       	rjmp	.+366    	; 0x260 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b5 c0       	rjmp	.+362    	; 0x260 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b3 c0       	rjmp	.+358    	; 0x260 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b1 c0       	rjmp	.+354    	; 0x260 <__bad_interrupt>
      fe:	00 00       	nop
     100:	af c0       	rjmp	.+350    	; 0x260 <__bad_interrupt>
     102:	00 00       	nop
     104:	ad c0       	rjmp	.+346    	; 0x260 <__bad_interrupt>
     106:	00 00       	nop
     108:	ab c0       	rjmp	.+342    	; 0x260 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a9 c0       	rjmp	.+338    	; 0x260 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a7 c0       	rjmp	.+334    	; 0x260 <__bad_interrupt>
     112:	00 00       	nop
     114:	a5 c0       	rjmp	.+330    	; 0x260 <__bad_interrupt>
     116:	00 00       	nop
     118:	a3 c0       	rjmp	.+326    	; 0x260 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a1 c0       	rjmp	.+322    	; 0x260 <__bad_interrupt>
     11e:	00 00       	nop
     120:	9f c0       	rjmp	.+318    	; 0x260 <__bad_interrupt>
     122:	00 00       	nop
     124:	9d c0       	rjmp	.+314    	; 0x260 <__bad_interrupt>
     126:	00 00       	nop
     128:	9b c0       	rjmp	.+310    	; 0x260 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	99 c0       	rjmp	.+306    	; 0x260 <__bad_interrupt>
     12e:	00 00       	nop
     130:	97 c0       	rjmp	.+302    	; 0x260 <__bad_interrupt>
     132:	00 00       	nop
     134:	95 c0       	rjmp	.+298    	; 0x260 <__bad_interrupt>
     136:	00 00       	nop
     138:	93 c0       	rjmp	.+294    	; 0x260 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	91 c0       	rjmp	.+290    	; 0x260 <__bad_interrupt>
     13e:	00 00       	nop
     140:	8f c0       	rjmp	.+286    	; 0x260 <__bad_interrupt>
     142:	00 00       	nop
     144:	8d c0       	rjmp	.+282    	; 0x260 <__bad_interrupt>
     146:	00 00       	nop
     148:	8b c0       	rjmp	.+278    	; 0x260 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	89 c0       	rjmp	.+274    	; 0x260 <__bad_interrupt>
     14e:	00 00       	nop
     150:	87 c0       	rjmp	.+270    	; 0x260 <__bad_interrupt>
     152:	00 00       	nop
     154:	85 c0       	rjmp	.+266    	; 0x260 <__bad_interrupt>
     156:	00 00       	nop
     158:	83 c0       	rjmp	.+262    	; 0x260 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	81 c0       	rjmp	.+258    	; 0x260 <__bad_interrupt>
     15e:	00 00       	nop
     160:	7f c0       	rjmp	.+254    	; 0x260 <__bad_interrupt>
     162:	00 00       	nop
     164:	7d c0       	rjmp	.+250    	; 0x260 <__bad_interrupt>
     166:	00 00       	nop
     168:	7b c0       	rjmp	.+246    	; 0x260 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	79 c0       	rjmp	.+242    	; 0x260 <__bad_interrupt>
     16e:	00 00       	nop
     170:	77 c0       	rjmp	.+238    	; 0x260 <__bad_interrupt>
     172:	00 00       	nop
     174:	75 c0       	rjmp	.+234    	; 0x260 <__bad_interrupt>
     176:	00 00       	nop
     178:	73 c0       	rjmp	.+230    	; 0x260 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	71 c0       	rjmp	.+226    	; 0x260 <__bad_interrupt>
     17e:	00 00       	nop
     180:	6f c0       	rjmp	.+222    	; 0x260 <__bad_interrupt>
     182:	00 00       	nop
     184:	6d c0       	rjmp	.+218    	; 0x260 <__bad_interrupt>
     186:	00 00       	nop
     188:	6b c0       	rjmp	.+214    	; 0x260 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	69 c0       	rjmp	.+210    	; 0x260 <__bad_interrupt>
     18e:	00 00       	nop
     190:	67 c0       	rjmp	.+206    	; 0x260 <__bad_interrupt>
     192:	00 00       	nop
     194:	65 c0       	rjmp	.+202    	; 0x260 <__bad_interrupt>
     196:	00 00       	nop
     198:	63 c0       	rjmp	.+198    	; 0x260 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	61 c0       	rjmp	.+194    	; 0x260 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5f c0       	rjmp	.+190    	; 0x260 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5d c0       	rjmp	.+186    	; 0x260 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5b c0       	rjmp	.+182    	; 0x260 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	59 c0       	rjmp	.+178    	; 0x260 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	57 c0       	rjmp	.+174    	; 0x260 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	55 c0       	rjmp	.+170    	; 0x260 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	53 c0       	rjmp	.+166    	; 0x260 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	51 c0       	rjmp	.+162    	; 0x260 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4f c0       	rjmp	.+158    	; 0x260 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4d c0       	rjmp	.+154    	; 0x260 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4b c0       	rjmp	.+150    	; 0x260 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	49 c0       	rjmp	.+146    	; 0x260 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	47 c0       	rjmp	.+142    	; 0x260 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	45 c0       	rjmp	.+138    	; 0x260 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	43 c0       	rjmp	.+134    	; 0x260 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	41 c0       	rjmp	.+130    	; 0x260 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3f c0       	rjmp	.+126    	; 0x260 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3d c0       	rjmp	.+122    	; 0x260 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3b c0       	rjmp	.+118    	; 0x260 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	39 c0       	rjmp	.+114    	; 0x260 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	37 c0       	rjmp	.+110    	; 0x260 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__vector_125>
     1f8:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__vector_126>
     1fc:	fd 0b       	sbc	r31, r29
     1fe:	eb 0b       	sbc	r30, r27
     200:	ee 0b       	sbc	r30, r30
     202:	f1 0b       	sbc	r31, r17
     204:	f4 0b       	sbc	r31, r20
     206:	f7 0b       	sbc	r31, r23
     208:	fa 0b       	sbc	r31, r26
     20a:	26 17       	cp	r18, r22
     20c:	50 16       	cp	r5, r16
     20e:	6f 16       	cp	r6, r31
     210:	9b 16       	cp	r9, r27
     212:	b7 16       	cp	r11, r23
     214:	cc 16       	cp	r12, r28
     216:	e8 16       	cp	r14, r24
     218:	07 17       	cp	r16, r23

0000021a <__trampolines_end>:
     21a:	63 64       	ori	r22, 0x43	; 67
     21c:	69 6e       	ori	r22, 0xE9	; 233
     21e:	6f 70       	andi	r22, 0x0F	; 15
     220:	73 75       	andi	r23, 0x53	; 83
     222:	78 58       	subi	r23, 0x88	; 136
     224:	5b 00       	.word	0x005b	; ????

00000226 <__ctors_end>:
     226:	11 24       	eor	r1, r1
     228:	1f be       	out	0x3f, r1	; 63
     22a:	cf ef       	ldi	r28, 0xFF	; 255
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	df e2       	ldi	r29, 0x2F	; 47
     230:	de bf       	out	0x3e, r29	; 62

00000232 <__do_copy_data>:
     232:	13 e2       	ldi	r17, 0x23	; 35
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b0 e2       	ldi	r27, 0x20	; 32
     238:	e2 e3       	ldi	r30, 0x32	; 50
     23a:	fc e3       	ldi	r31, 0x3C	; 60
     23c:	02 c0       	rjmp	.+4      	; 0x242 <__do_copy_data+0x10>
     23e:	05 90       	lpm	r0, Z+
     240:	0d 92       	st	X+, r0
     242:	ac 3f       	cpi	r26, 0xFC	; 252
     244:	b1 07       	cpc	r27, r17
     246:	d9 f7       	brne	.-10     	; 0x23e <__do_copy_data+0xc>

00000248 <__do_clear_bss>:
     248:	26 e2       	ldi	r18, 0x26	; 38
     24a:	ac ef       	ldi	r26, 0xFC	; 252
     24c:	b3 e2       	ldi	r27, 0x23	; 35
     24e:	01 c0       	rjmp	.+2      	; 0x252 <.do_clear_bss_start>

00000250 <.do_clear_bss_loop>:
     250:	1d 92       	st	X+, r1

00000252 <.do_clear_bss_start>:
     252:	a2 3b       	cpi	r26, 0xB2	; 178
     254:	b2 07       	cpc	r27, r18
     256:	e1 f7       	brne	.-8      	; 0x250 <.do_clear_bss_loop>
     258:	0e 94 83 17 	call	0x2f06	; 0x2f06 <main>
     25c:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <_exit>

00000260 <__bad_interrupt>:
     260:	cf ce       	rjmp	.-610    	; 0x0 <__vectors>

00000262 <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     262:	10 92 12 25 	sts	0x2512, r1
     266:	10 92 1e 25 	sts	0x251E, r1
     26a:	10 92 1f 25 	sts	0x251F, r1
     26e:	81 ea       	ldi	r24, 0xA1	; 161
     270:	80 93 14 25 	sts	0x2514, r24
     274:	80 e2       	ldi	r24, 0x20	; 32
     276:	80 93 15 25 	sts	0x2515, r24
     27a:	10 92 16 25 	sts	0x2516, r1
     27e:	10 92 17 25 	sts	0x2517, r1
     282:	10 92 18 25 	sts	0x2518, r1
     286:	10 92 19 25 	sts	0x2519, r1
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	80 93 1a 25 	sts	0x251A, r24
     292:	90 93 1b 25 	sts	0x251B, r25
     296:	10 92 1c 25 	sts	0x251C, r1
     29a:	10 92 1d 25 	sts	0x251D, r1
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	92 ec       	ldi	r25, 0xC2	; 194
     2a2:	a1 e0       	ldi	r26, 0x01	; 1
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	80 93 20 25 	sts	0x2520, r24
     2aa:	90 93 21 25 	sts	0x2521, r25
     2ae:	a0 93 22 25 	sts	0x2522, r26
     2b2:	b0 93 23 25 	sts	0x2523, r27
     2b6:	10 92 24 25 	sts	0x2524, r1
     2ba:	10 92 25 25 	sts	0x2525, r1
     2be:	88 e0       	ldi	r24, 0x08	; 8
     2c0:	80 93 26 25 	sts	0x2526, r24
     2c4:	80 91 12 25 	lds	r24, 0x2512
     2c8:	8f 5f       	subi	r24, 0xFF	; 255
     2ca:	80 93 12 25 	sts	0x2512, r24
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	08 95       	ret

000002d2 <udi_cdc_comm_disable>:
     2d2:	80 91 12 25 	lds	r24, 0x2512
     2d6:	81 50       	subi	r24, 0x01	; 1
     2d8:	80 93 12 25 	sts	0x2512, r24
     2dc:	08 95       	ret

000002de <udi_cdc_data_disable>:
     2de:	80 91 11 25 	lds	r24, 0x2511
     2e2:	81 50       	subi	r24, 0x01	; 1
     2e4:	80 93 11 25 	sts	0x2511, r24
     2e8:	80 91 11 25 	lds	r24, 0x2511
     2ec:	10 92 10 25 	sts	0x2510, r1
     2f0:	08 95       	ret

000002f2 <udi_cdc_data_setup>:
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	08 95       	ret

000002f6 <udi_cdc_getsetting>:
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	08 95       	ret

000002fa <udi_cdc_comm_setup>:
     2fa:	80 91 6d 26 	lds	r24, 0x266D
     2fe:	88 23       	and	r24, r24
     300:	dc f4       	brge	.+54     	; 0x338 <udi_cdc_comm_setup+0x3e>
     302:	80 76       	andi	r24, 0x60	; 96
     304:	80 32       	cpi	r24, 0x20	; 32
     306:	e9 f5       	brne	.+122    	; 0x382 <udi_cdc_comm_setup+0x88>
     308:	80 91 6e 26 	lds	r24, 0x266E
     30c:	81 32       	cpi	r24, 0x21	; 33
     30e:	d9 f5       	brne	.+118    	; 0x386 <udi_cdc_comm_setup+0x8c>
     310:	80 91 73 26 	lds	r24, 0x2673
     314:	90 91 74 26 	lds	r25, 0x2674
     318:	07 97       	sbiw	r24, 0x07	; 7
     31a:	b9 f5       	brne	.+110    	; 0x38a <udi_cdc_comm_setup+0x90>
     31c:	80 e2       	ldi	r24, 0x20	; 32
     31e:	95 e2       	ldi	r25, 0x25	; 37
     320:	80 93 75 26 	sts	0x2675, r24
     324:	90 93 76 26 	sts	0x2676, r25
     328:	87 e0       	ldi	r24, 0x07	; 7
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	80 93 77 26 	sts	0x2677, r24
     330:	90 93 78 26 	sts	0x2678, r25
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	08 95       	ret
     338:	80 76       	andi	r24, 0x60	; 96
     33a:	80 32       	cpi	r24, 0x20	; 32
     33c:	41 f5       	brne	.+80     	; 0x38e <udi_cdc_comm_setup+0x94>
     33e:	80 91 6e 26 	lds	r24, 0x266E
     342:	80 32       	cpi	r24, 0x20	; 32
     344:	21 f0       	breq	.+8      	; 0x34e <udi_cdc_comm_setup+0x54>
     346:	82 32       	cpi	r24, 0x22	; 34
     348:	21 f5       	brne	.+72     	; 0x392 <udi_cdc_comm_setup+0x98>
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	08 95       	ret
     34e:	80 91 73 26 	lds	r24, 0x2673
     352:	90 91 74 26 	lds	r25, 0x2674
     356:	07 97       	sbiw	r24, 0x07	; 7
     358:	f1 f4       	brne	.+60     	; 0x396 <udi_cdc_comm_setup+0x9c>
     35a:	8d ec       	ldi	r24, 0xCD	; 205
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	80 93 79 26 	sts	0x2679, r24
     362:	90 93 7a 26 	sts	0x267A, r25
     366:	80 e2       	ldi	r24, 0x20	; 32
     368:	95 e2       	ldi	r25, 0x25	; 37
     36a:	80 93 75 26 	sts	0x2675, r24
     36e:	90 93 76 26 	sts	0x2676, r25
     372:	87 e0       	ldi	r24, 0x07	; 7
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	80 93 77 26 	sts	0x2677, r24
     37a:	90 93 78 26 	sts	0x2678, r25
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	08 95       	ret
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	08 95       	ret
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	08 95       	ret
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	08 95       	ret
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	08 95       	ret
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	08 95       	ret
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	08 95       	ret

0000039a <udi_cdc_line_coding_received>:
     39a:	08 95       	ret

0000039c <udi_cdc_tx_send>:
     39c:	ff 92       	push	r15
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	80 91 ff 23 	lds	r24, 0x23FF
     3aa:	81 11       	cpse	r24, r1
     3ac:	9c c0       	rjmp	.+312    	; 0x4e6 <udi_cdc_tx_send+0x14a>
     3ae:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <udd_is_high_speed>
     3b2:	88 23       	and	r24, r24
     3b4:	51 f0       	breq	.+20     	; 0x3ca <udi_cdc_tx_send+0x2e>
     3b6:	c0 91 00 24 	lds	r28, 0x2400
     3ba:	d0 91 01 24 	lds	r29, 0x2401
     3be:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <udd_get_micro_frame_number>
     3c2:	c8 17       	cp	r28, r24
     3c4:	d9 07       	cpc	r29, r25
     3c6:	59 f4       	brne	.+22     	; 0x3de <udi_cdc_tx_send+0x42>
     3c8:	8e c0       	rjmp	.+284    	; 0x4e6 <udi_cdc_tx_send+0x14a>
     3ca:	c0 91 00 24 	lds	r28, 0x2400
     3ce:	d0 91 01 24 	lds	r29, 0x2401
     3d2:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <udd_get_frame_number>
     3d6:	c8 17       	cp	r28, r24
     3d8:	d9 07       	cpc	r29, r25
     3da:	09 f4       	brne	.+2      	; 0x3de <udi_cdc_tx_send+0x42>
     3dc:	84 c0       	rjmp	.+264    	; 0x4e6 <udi_cdc_tx_send+0x14a>
     3de:	df b7       	in	r29, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	c0 91 02 24 	lds	r28, 0x2402
     3e6:	ec 2f       	mov	r30, r28
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	ee 0f       	add	r30, r30
     3ec:	ff 1f       	adc	r31, r31
     3ee:	ed 5f       	subi	r30, 0xFD	; 253
     3f0:	fb 4d       	sbci	r31, 0xDB	; 219
     3f2:	80 81       	ld	r24, Z
     3f4:	91 81       	ldd	r25, Z+1	; 0x01
     3f6:	89 2b       	or	r24, r25
     3f8:	09 f5       	brne	.+66     	; 0x43c <udi_cdc_tx_send+0xa0>
     3fa:	80 91 fc 23 	lds	r24, 0x23FC
     3fe:	90 91 fd 23 	lds	r25, 0x23FD
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	80 93 fc 23 	sts	0x23FC, r24
     408:	90 93 fd 23 	sts	0x23FD, r25
     40c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <udd_is_high_speed>
     410:	81 11       	cpse	r24, r1
     412:	07 c0       	rjmp	.+14     	; 0x422 <udi_cdc_tx_send+0x86>
     414:	80 91 fc 23 	lds	r24, 0x23FC
     418:	90 91 fd 23 	lds	r25, 0x23FD
     41c:	84 36       	cpi	r24, 0x64	; 100
     41e:	91 05       	cpc	r25, r1
     420:	58 f0       	brcs	.+22     	; 0x438 <udi_cdc_tx_send+0x9c>
     422:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <udd_is_high_speed>
     426:	88 23       	and	r24, r24
     428:	49 f0       	breq	.+18     	; 0x43c <udi_cdc_tx_send+0xa0>
     42a:	80 91 fc 23 	lds	r24, 0x23FC
     42e:	90 91 fd 23 	lds	r25, 0x23FD
     432:	80 32       	cpi	r24, 0x20	; 32
     434:	93 40       	sbci	r25, 0x03	; 3
     436:	10 f4       	brcc	.+4      	; 0x43c <udi_cdc_tx_send+0xa0>
     438:	df bf       	out	0x3f, r29	; 63
     43a:	55 c0       	rjmp	.+170    	; 0x4e6 <udi_cdc_tx_send+0x14a>
     43c:	10 92 fc 23 	sts	0x23FC, r1
     440:	10 92 fd 23 	sts	0x23FD, r1
     444:	80 91 fe 23 	lds	r24, 0x23FE
     448:	81 11       	cpse	r24, r1
     44a:	06 c0       	rjmp	.+12     	; 0x458 <udi_cdc_tx_send+0xbc>
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	c1 11       	cpse	r28, r1
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	80 93 02 24 	sts	0x2402, r24
     456:	04 c0       	rjmp	.+8      	; 0x460 <udi_cdc_tx_send+0xc4>
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	c1 11       	cpse	r28, r1
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	c8 2f       	mov	r28, r24
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 ff 23 	sts	0x23FF, r24
     466:	df bf       	out	0x3f, r29	; 63
     468:	d0 e0       	ldi	r29, 0x00	; 0
     46a:	fe 01       	movw	r30, r28
     46c:	ee 0f       	add	r30, r30
     46e:	ff 1f       	adc	r31, r31
     470:	ed 5f       	subi	r30, 0xFD	; 253
     472:	fb 4d       	sbci	r31, 0xDB	; 219
     474:	ff 24       	eor	r15, r15
     476:	f3 94       	inc	r15
     478:	80 81       	ld	r24, Z
     47a:	91 81       	ldd	r25, Z+1	; 0x01
     47c:	80 34       	cpi	r24, 0x40	; 64
     47e:	91 05       	cpc	r25, r1
     480:	09 f4       	brne	.+2      	; 0x484 <udi_cdc_tx_send+0xe8>
     482:	f1 2c       	mov	r15, r1
     484:	ff 20       	and	r15, r15
     486:	91 f0       	breq	.+36     	; 0x4ac <udi_cdc_tx_send+0x110>
     488:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <udd_is_high_speed>
     48c:	88 23       	and	r24, r24
     48e:	39 f0       	breq	.+14     	; 0x49e <udi_cdc_tx_send+0x102>
     490:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <udd_get_micro_frame_number>
     494:	80 93 00 24 	sts	0x2400, r24
     498:	90 93 01 24 	sts	0x2401, r25
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <udi_cdc_tx_send+0x118>
     49e:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <udd_get_frame_number>
     4a2:	80 93 00 24 	sts	0x2400, r24
     4a6:	90 93 01 24 	sts	0x2401, r25
     4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <udi_cdc_tx_send+0x118>
     4ac:	10 92 00 24 	sts	0x2400, r1
     4b0:	10 92 01 24 	sts	0x2401, r1
     4b4:	fe 01       	movw	r30, r28
     4b6:	ee 0f       	add	r30, r30
     4b8:	ff 1f       	adc	r31, r31
     4ba:	ed 5f       	subi	r30, 0xFD	; 253
     4bc:	fb 4d       	sbci	r31, 0xDB	; 219
     4be:	20 81       	ld	r18, Z
     4c0:	31 81       	ldd	r19, Z+1	; 0x01
     4c2:	ae 01       	movw	r20, r28
     4c4:	00 24       	eor	r0, r0
     4c6:	56 95       	lsr	r21
     4c8:	47 95       	ror	r20
     4ca:	07 94       	ror	r0
     4cc:	56 95       	lsr	r21
     4ce:	47 95       	ror	r20
     4d0:	07 94       	ror	r0
     4d2:	54 2f       	mov	r21, r20
     4d4:	40 2d       	mov	r20, r0
     4d6:	48 5f       	subi	r20, 0xF8	; 248
     4d8:	5b 4d       	sbci	r21, 0xDB	; 219
     4da:	09 e7       	ldi	r16, 0x79	; 121
     4dc:	12 e0       	ldi	r17, 0x02	; 2
     4de:	6f 2d       	mov	r22, r15
     4e0:	81 e8       	ldi	r24, 0x81	; 129
     4e2:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <udd_ep_run>
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	1f 91       	pop	r17
     4ec:	0f 91       	pop	r16
     4ee:	ff 90       	pop	r15
     4f0:	08 95       	ret

000004f2 <udi_cdc_data_sent>:
     4f2:	81 11       	cpse	r24, r1
     4f4:	15 c0       	rjmp	.+42     	; 0x520 <udi_cdc_data_sent+0x2e>
     4f6:	20 91 02 24 	lds	r18, 0x2402
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	22 23       	and	r18, r18
     500:	11 f0       	breq	.+4      	; 0x506 <udi_cdc_data_sent+0x14>
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	fc 01       	movw	r30, r24
     508:	ee 0f       	add	r30, r30
     50a:	ff 1f       	adc	r31, r31
     50c:	ed 5f       	subi	r30, 0xFD	; 253
     50e:	fb 4d       	sbci	r31, 0xDB	; 219
     510:	10 82       	st	Z, r1
     512:	11 82       	std	Z+1, r1	; 0x01
     514:	10 92 fe 23 	sts	0x23FE, r1
     518:	10 92 ff 23 	sts	0x23FF, r1
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	3e cf       	rjmp	.-388    	; 0x39c <udi_cdc_tx_send>
     520:	08 95       	ret

00000522 <udi_cdc_data_sof_notify>:
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	3b cf       	rjmp	.-394    	; 0x39c <udi_cdc_tx_send>
     526:	08 95       	ret

00000528 <udi_cdc_multi_get_nb_received_data>:
     528:	4f b7       	in	r20, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	20 91 89 24 	lds	r18, 0x2489
     530:	30 91 8a 24 	lds	r19, 0x248A
     534:	e0 91 8b 24 	lds	r30, 0x248B
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	ee 0f       	add	r30, r30
     53c:	ff 1f       	adc	r31, r31
     53e:	e4 57       	subi	r30, 0x74	; 116
     540:	fb 4d       	sbci	r31, 0xDB	; 219
     542:	80 81       	ld	r24, Z
     544:	91 81       	ldd	r25, Z+1	; 0x01
     546:	82 1b       	sub	r24, r18
     548:	93 0b       	sbc	r25, r19
     54a:	4f bf       	out	0x3f, r20	; 63
     54c:	08 95       	ret

0000054e <udi_cdc_multi_is_rx_ready>:
     54e:	ec df       	rcall	.-40     	; 0x528 <udi_cdc_multi_get_nb_received_data>
     550:	21 e0       	ldi	r18, 0x01	; 1
     552:	89 2b       	or	r24, r25
     554:	09 f4       	brne	.+2      	; 0x558 <udi_cdc_multi_is_rx_ready+0xa>
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	82 2f       	mov	r24, r18
     55a:	08 95       	ret

0000055c <udi_cdc_rx_start>:
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	4f b7       	in	r20, 0x3f	; 63
     566:	f8 94       	cli
     568:	50 91 8b 24 	lds	r21, 0x248B
     56c:	80 91 88 24 	lds	r24, 0x2488
     570:	81 11       	cpse	r24, r1
     572:	10 c0       	rjmp	.+32     	; 0x594 <udi_cdc_rx_start+0x38>
     574:	20 91 89 24 	lds	r18, 0x2489
     578:	30 91 8a 24 	lds	r19, 0x248A
     57c:	c5 2f       	mov	r28, r21
     57e:	d0 e0       	ldi	r29, 0x00	; 0
     580:	fe 01       	movw	r30, r28
     582:	ee 0f       	add	r30, r30
     584:	ff 1f       	adc	r31, r31
     586:	e4 57       	subi	r30, 0x74	; 116
     588:	fb 4d       	sbci	r31, 0xDB	; 219
     58a:	80 81       	ld	r24, Z
     58c:	91 81       	ldd	r25, Z+1	; 0x01
     58e:	28 17       	cp	r18, r24
     590:	39 07       	cpc	r19, r25
     592:	18 f4       	brcc	.+6      	; 0x59a <udi_cdc_rx_start+0x3e>
     594:	4f bf       	out	0x3f, r20	; 63
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	23 c0       	rjmp	.+70     	; 0x5e0 <udi_cdc_rx_start+0x84>
     59a:	10 92 89 24 	sts	0x2489, r1
     59e:	10 92 8a 24 	sts	0x248A, r1
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	51 11       	cpse	r21, r1
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	80 93 8b 24 	sts	0x248B, r24
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	80 93 88 24 	sts	0x2488, r24
     5b2:	4f bf       	out	0x3f, r20	; 63
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	cb df       	rcall	.-106    	; 0x54e <udi_cdc_multi_is_rx_ready>
     5b8:	ae 01       	movw	r20, r28
     5ba:	00 24       	eor	r0, r0
     5bc:	56 95       	lsr	r21
     5be:	47 95       	ror	r20
     5c0:	07 94       	ror	r0
     5c2:	56 95       	lsr	r21
     5c4:	47 95       	ror	r20
     5c6:	07 94       	ror	r0
     5c8:	54 2f       	mov	r21, r20
     5ca:	40 2d       	mov	r20, r0
     5cc:	40 57       	subi	r20, 0x70	; 112
     5ce:	5b 4d       	sbci	r21, 0xDB	; 219
     5d0:	07 e2       	ldi	r16, 0x27	; 39
     5d2:	13 e0       	ldi	r17, 0x03	; 3
     5d4:	20 e4       	ldi	r18, 0x40	; 64
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <udd_ep_run>
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	08 95       	ret

000005ea <udi_cdc_data_enable>:
     5ea:	10 92 11 25 	sts	0x2511, r1
     5ee:	10 92 ff 23 	sts	0x23FF, r1
     5f2:	10 92 fe 23 	sts	0x23FE, r1
     5f6:	10 92 02 24 	sts	0x2402, r1
     5fa:	10 92 03 24 	sts	0x2403, r1
     5fe:	10 92 04 24 	sts	0x2404, r1
     602:	10 92 05 24 	sts	0x2405, r1
     606:	10 92 06 24 	sts	0x2406, r1
     60a:	10 92 00 24 	sts	0x2400, r1
     60e:	10 92 01 24 	sts	0x2401, r1
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	c3 de       	rcall	.-634    	; 0x39c <udi_cdc_tx_send>
     616:	10 92 88 24 	sts	0x2488, r1
     61a:	10 92 8b 24 	sts	0x248B, r1
     61e:	10 92 8c 24 	sts	0x248C, r1
     622:	10 92 8d 24 	sts	0x248D, r1
     626:	10 92 89 24 	sts	0x2489, r1
     62a:	10 92 8a 24 	sts	0x248A, r1
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	95 df       	rcall	.-214    	; 0x55c <udi_cdc_rx_start>
     632:	88 23       	and	r24, r24
     634:	59 f0       	breq	.+22     	; 0x64c <udi_cdc_data_enable+0x62>
     636:	90 91 11 25 	lds	r25, 0x2511
     63a:	9f 5f       	subi	r25, 0xFF	; 255
     63c:	90 93 11 25 	sts	0x2511, r25
     640:	90 91 11 25 	lds	r25, 0x2511
     644:	91 30       	cpi	r25, 0x01	; 1
     646:	11 f4       	brne	.+4      	; 0x64c <udi_cdc_data_enable+0x62>
     648:	90 93 10 25 	sts	0x2510, r25
     64c:	08 95       	ret

0000064e <udi_cdc_data_received>:
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	94 2f       	mov	r25, r20
     654:	81 11       	cpse	r24, r1
     656:	29 c0       	rjmp	.+82     	; 0x6aa <udi_cdc_data_received+0x5c>
     658:	80 91 8b 24 	lds	r24, 0x248B
     65c:	e1 e0       	ldi	r30, 0x01	; 1
     65e:	81 11       	cpse	r24, r1
     660:	e0 e0       	ldi	r30, 0x00	; 0
     662:	61 15       	cp	r22, r1
     664:	71 05       	cpc	r23, r1
     666:	b1 f4       	brne	.+44     	; 0x694 <udi_cdc_data_received+0x46>
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	00 24       	eor	r0, r0
     66c:	f6 95       	lsr	r31
     66e:	e7 95       	ror	r30
     670:	07 94       	ror	r0
     672:	f6 95       	lsr	r31
     674:	e7 95       	ror	r30
     676:	07 94       	ror	r0
     678:	fe 2f       	mov	r31, r30
     67a:	e0 2d       	mov	r30, r0
     67c:	af 01       	movw	r20, r30
     67e:	40 57       	subi	r20, 0x70	; 112
     680:	5b 4d       	sbci	r21, 0xDB	; 219
     682:	07 e2       	ldi	r16, 0x27	; 39
     684:	13 e0       	ldi	r17, 0x03	; 3
     686:	20 e4       	ldi	r18, 0x40	; 64
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	89 2f       	mov	r24, r25
     68e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <udd_ep_run>
     692:	0b c0       	rjmp	.+22     	; 0x6aa <udi_cdc_data_received+0x5c>
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	e4 57       	subi	r30, 0x74	; 116
     69c:	fb 4d       	sbci	r31, 0xDB	; 219
     69e:	60 83       	st	Z, r22
     6a0:	71 83       	std	Z+1, r23	; 0x01
     6a2:	10 92 88 24 	sts	0x2488, r1
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	59 df       	rcall	.-334    	; 0x55c <udi_cdc_rx_start>
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	08 95       	ret

000006b0 <udi_cdc_is_rx_ready>:
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	4d cf       	rjmp	.-358    	; 0x54e <udi_cdc_multi_is_rx_ready>
     6b4:	08 95       	ret

000006b6 <udi_cdc_multi_getc>:
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	11 e0       	ldi	r17, 0x01	; 1
     6be:	80 91 26 25 	lds	r24, 0x2526
     6c2:	89 30       	cpi	r24, 0x09	; 9
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <udi_cdc_multi_getc+0x12>
     6c6:	10 e0       	ldi	r17, 0x00	; 0
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	3f b7       	in	r19, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	80 91 89 24 	lds	r24, 0x2489
     6d4:	90 91 8a 24 	lds	r25, 0x248A
     6d8:	20 91 8b 24 	lds	r18, 0x248B
     6dc:	3f bf       	out	0x3f, r19	; 63
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	f9 01       	movw	r30, r18
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	e4 57       	subi	r30, 0x74	; 116
     6e8:	fb 4d       	sbci	r31, 0xDB	; 219
     6ea:	40 81       	ld	r20, Z
     6ec:	51 81       	ldd	r21, Z+1	; 0x01
     6ee:	84 17       	cp	r24, r20
     6f0:	95 07       	cpc	r25, r21
     6f2:	30 f0       	brcs	.+12     	; 0x700 <udi_cdc_multi_getc+0x4a>
     6f4:	80 91 10 25 	lds	r24, 0x2510
     6f8:	81 11       	cpse	r24, r1
     6fa:	e8 cf       	rjmp	.-48     	; 0x6cc <udi_cdc_multi_getc+0x16>
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	20 c0       	rjmp	.+64     	; 0x740 <udi_cdc_multi_getc+0x8a>
     700:	f9 01       	movw	r30, r18
     702:	00 24       	eor	r0, r0
     704:	f6 95       	lsr	r31
     706:	e7 95       	ror	r30
     708:	07 94       	ror	r0
     70a:	f6 95       	lsr	r31
     70c:	e7 95       	ror	r30
     70e:	07 94       	ror	r0
     710:	fe 2f       	mov	r31, r30
     712:	e0 2d       	mov	r30, r0
     714:	e8 0f       	add	r30, r24
     716:	f9 1f       	adc	r31, r25
     718:	e0 57       	subi	r30, 0x70	; 112
     71a:	fb 4d       	sbci	r31, 0xDB	; 219
     71c:	20 81       	ld	r18, Z
     71e:	eb 01       	movw	r28, r22
     720:	c2 2b       	or	r28, r18
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	80 93 89 24 	sts	0x2489, r24
     728:	90 93 8a 24 	sts	0x248A, r25
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	16 df       	rcall	.-468    	; 0x55c <udi_cdc_rx_start>
     730:	11 23       	and	r17, r17
     732:	21 f0       	breq	.+8      	; 0x73c <udi_cdc_multi_getc+0x86>
     734:	7c 2f       	mov	r23, r28
     736:	66 27       	eor	r22, r22
     738:	10 e0       	ldi	r17, 0x00	; 0
     73a:	c8 cf       	rjmp	.-112    	; 0x6cc <udi_cdc_multi_getc+0x16>
     73c:	8c 2f       	mov	r24, r28
     73e:	9d 2f       	mov	r25, r29
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	08 95       	ret

00000748 <udi_cdc_getc>:
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	b5 cf       	rjmp	.-150    	; 0x6b6 <udi_cdc_multi_getc>
     74c:	08 95       	ret

0000074e <udi_cdc_multi_get_free_tx_buffer>:
     74e:	9f b7       	in	r25, 0x3f	; 63
     750:	f8 94       	cli
     752:	80 91 02 24 	lds	r24, 0x2402
     756:	e8 2f       	mov	r30, r24
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	ed 5f       	subi	r30, 0xFD	; 253
     760:	fb 4d       	sbci	r31, 0xDB	; 219
     762:	20 81       	ld	r18, Z
     764:	31 81       	ldd	r19, Z+1	; 0x01
     766:	20 34       	cpi	r18, 0x40	; 64
     768:	31 05       	cpc	r19, r1
     76a:	89 f4       	brne	.+34     	; 0x78e <udi_cdc_multi_get_free_tx_buffer+0x40>
     76c:	40 91 ff 23 	lds	r20, 0x23FF
     770:	41 11       	cpse	r20, r1
     772:	0d c0       	rjmp	.+26     	; 0x78e <udi_cdc_multi_get_free_tx_buffer+0x40>
     774:	40 91 fe 23 	lds	r20, 0x23FE
     778:	41 11       	cpse	r20, r1
     77a:	09 c0       	rjmp	.+18     	; 0x78e <udi_cdc_multi_get_free_tx_buffer+0x40>
     77c:	21 e0       	ldi	r18, 0x01	; 1
     77e:	20 93 fe 23 	sts	0x23FE, r18
     782:	81 11       	cpse	r24, r1
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	20 93 02 24 	sts	0x2402, r18
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	9f bf       	out	0x3f, r25	; 63
     790:	80 e4       	ldi	r24, 0x40	; 64
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	08 95       	ret

0000079a <udi_cdc_multi_is_tx_ready>:
     79a:	d9 df       	rcall	.-78     	; 0x74e <udi_cdc_multi_get_free_tx_buffer>
     79c:	21 e0       	ldi	r18, 0x01	; 1
     79e:	89 2b       	or	r24, r25
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <udi_cdc_multi_is_tx_ready+0xa>
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	82 2f       	mov	r24, r18
     7a6:	08 95       	ret

000007a8 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	16 2f       	mov	r17, r22
     7b0:	c7 2f       	mov	r28, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     7b2:	d1 e0       	ldi	r29, 0x01	; 1
     7b4:	80 91 26 25 	lds	r24, 0x2526
     7b8:	89 30       	cpi	r24, 0x09	; 9
     7ba:	09 f0       	breq	.+2      	; 0x7be <udi_cdc_multi_putc+0x16>
     7bc:	d0 e0       	ldi	r29, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	ec df       	rcall	.-40     	; 0x79a <udi_cdc_multi_is_tx_ready>
     7c2:	81 11       	cpse	r24, r1
     7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <udi_cdc_multi_putc+0x2c>
		if (!udi_cdc_data_running) {
     7c6:	80 91 10 25 	lds	r24, 0x2510
     7ca:	81 11       	cpse	r24, r1
     7cc:	f8 cf       	rjmp	.-16     	; 0x7be <udi_cdc_multi_putc+0x16>
			return false;
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	2b c0       	rjmp	.+86     	; 0x82a <udi_cdc_multi_putc+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7d4:	6f b7       	in	r22, 0x3f	; 63
	cpu_irq_disable();
     7d6:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     7d8:	20 91 02 24 	lds	r18, 0x2402
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	f9 01       	movw	r30, r18
     7e0:	ee 0f       	add	r30, r30
     7e2:	ff 1f       	adc	r31, r31
     7e4:	ed 5f       	subi	r30, 0xFD	; 253
     7e6:	fb 4d       	sbci	r31, 0xDB	; 219
     7e8:	80 81       	ld	r24, Z
     7ea:	91 81       	ldd	r25, Z+1	; 0x01
     7ec:	ac 01       	movw	r20, r24
     7ee:	4f 5f       	subi	r20, 0xFF	; 255
     7f0:	5f 4f       	sbci	r21, 0xFF	; 255
     7f2:	40 83       	st	Z, r20
     7f4:	51 83       	std	Z+1, r21	; 0x01
     7f6:	f9 01       	movw	r30, r18
     7f8:	00 24       	eor	r0, r0
     7fa:	f6 95       	lsr	r31
     7fc:	e7 95       	ror	r30
     7fe:	07 94       	ror	r0
     800:	f6 95       	lsr	r31
     802:	e7 95       	ror	r30
     804:	07 94       	ror	r0
     806:	fe 2f       	mov	r31, r30
     808:	e0 2d       	mov	r30, r0
     80a:	8e 0f       	add	r24, r30
     80c:	9f 1f       	adc	r25, r31
     80e:	fc 01       	movw	r30, r24
     810:	e8 5f       	subi	r30, 0xF8	; 248
     812:	fb 4d       	sbci	r31, 0xDB	; 219
     814:	10 83       	st	Z, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     816:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     818:	dd 23       	and	r29, r29
     81a:	29 f0       	breq	.+10     	; 0x826 <udi_cdc_multi_putc+0x7e>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     81c:	1c 2f       	mov	r17, r28
     81e:	cc 0f       	add	r28, r28
     820:	cc 0b       	sbc	r28, r28
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     822:	d0 e0       	ldi	r29, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     824:	cc cf       	rjmp	.-104    	; 0x7be <udi_cdc_multi_putc+0x16>
	}
	return true;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	08 95       	ret

00000832 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     832:	bc 01       	movw	r22, r24
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	b8 cf       	rjmp	.-144    	; 0x7a8 <udi_cdc_multi_putc>
}
     838:	08 95       	ret

0000083a <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     83a:	e0 91 2c 25 	lds	r30, 0x252C
     83e:	f0 91 2d 25 	lds	r31, 0x252D
     842:	01 90       	ld	r0, Z+
     844:	f0 81       	ld	r31, Z
     846:	e0 2d       	mov	r30, r0
     848:	22 81       	ldd	r18, Z+2	; 0x02
     84a:	33 81       	ldd	r19, Z+3	; 0x03
     84c:	2e 0f       	add	r18, r30
     84e:	3f 1f       	adc	r19, r31
     850:	fc 01       	movw	r30, r24
     852:	40 81       	ld	r20, Z
     854:	e4 0f       	add	r30, r20
     856:	f1 1d       	adc	r31, r1
     858:	e2 17       	cp	r30, r18
     85a:	f3 07       	cpc	r31, r19
     85c:	a0 f4       	brcc	.+40     	; 0x886 <udc_next_desc_in_iface+0x4c>
     85e:	81 81       	ldd	r24, Z+1	; 0x01
     860:	84 30       	cpi	r24, 0x04	; 4
     862:	a1 f0       	breq	.+40     	; 0x88c <udc_next_desc_in_iface+0x52>
     864:	86 13       	cpse	r24, r22
     866:	06 c0       	rjmp	.+12     	; 0x874 <udc_next_desc_in_iface+0x3a>
     868:	14 c0       	rjmp	.+40     	; 0x892 <udc_next_desc_in_iface+0x58>
     86a:	81 81       	ldd	r24, Z+1	; 0x01
     86c:	84 30       	cpi	r24, 0x04	; 4
     86e:	a1 f0       	breq	.+40     	; 0x898 <udc_next_desc_in_iface+0x5e>
     870:	86 17       	cp	r24, r22
     872:	a9 f0       	breq	.+42     	; 0x89e <udc_next_desc_in_iface+0x64>
     874:	80 81       	ld	r24, Z
     876:	e8 0f       	add	r30, r24
     878:	f1 1d       	adc	r31, r1
     87a:	e2 17       	cp	r30, r18
     87c:	f3 07       	cpc	r31, r19
     87e:	a8 f3       	brcs	.-22     	; 0x86a <udc_next_desc_in_iface+0x30>
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	08 95       	ret
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	08 95       	ret
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	08 95       	ret
     892:	8e 2f       	mov	r24, r30
     894:	9f 2f       	mov	r25, r31
     896:	08 95       	ret
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	08 95       	ret
     89e:	8e 2f       	mov	r24, r30
     8a0:	9f 2f       	mov	r25, r31
     8a2:	08 95       	ret

000008a4 <udc_valid_address>:
     8a4:	80 91 6f 26 	lds	r24, 0x266F
     8a8:	8f 77       	andi	r24, 0x7F	; 127
     8aa:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <udd_set_address>
     8ae:	08 95       	ret

000008b0 <udc_update_iface_desc>:
     8b0:	90 91 2e 25 	lds	r25, 0x252E
     8b4:	99 23       	and	r25, r25
     8b6:	81 f1       	breq	.+96     	; 0x918 <udc_update_iface_desc+0x68>
     8b8:	e0 91 2c 25 	lds	r30, 0x252C
     8bc:	f0 91 2d 25 	lds	r31, 0x252D
     8c0:	01 90       	ld	r0, Z+
     8c2:	f0 81       	ld	r31, Z
     8c4:	e0 2d       	mov	r30, r0
     8c6:	94 81       	ldd	r25, Z+4	; 0x04
     8c8:	89 17       	cp	r24, r25
     8ca:	40 f5       	brcc	.+80     	; 0x91c <udc_update_iface_desc+0x6c>
     8cc:	e0 93 2a 25 	sts	0x252A, r30
     8d0:	f0 93 2b 25 	sts	0x252B, r31
     8d4:	22 81       	ldd	r18, Z+2	; 0x02
     8d6:	33 81       	ldd	r19, Z+3	; 0x03
     8d8:	2e 0f       	add	r18, r30
     8da:	3f 1f       	adc	r19, r31
     8dc:	e2 17       	cp	r30, r18
     8de:	f3 07       	cpc	r31, r19
     8e0:	f8 f4       	brcc	.+62     	; 0x920 <udc_update_iface_desc+0x70>
     8e2:	91 81       	ldd	r25, Z+1	; 0x01
     8e4:	94 30       	cpi	r25, 0x04	; 4
     8e6:	61 f4       	brne	.+24     	; 0x900 <udc_update_iface_desc+0x50>
     8e8:	92 81       	ldd	r25, Z+2	; 0x02
     8ea:	98 13       	cpse	r25, r24
     8ec:	09 c0       	rjmp	.+18     	; 0x900 <udc_update_iface_desc+0x50>
     8ee:	93 81       	ldd	r25, Z+3	; 0x03
     8f0:	96 13       	cpse	r25, r22
     8f2:	06 c0       	rjmp	.+12     	; 0x900 <udc_update_iface_desc+0x50>
     8f4:	e0 93 2a 25 	sts	0x252A, r30
     8f8:	f0 93 2b 25 	sts	0x252B, r31
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	08 95       	ret
     900:	90 81       	ld	r25, Z
     902:	e9 0f       	add	r30, r25
     904:	f1 1d       	adc	r31, r1
     906:	e2 17       	cp	r30, r18
     908:	f3 07       	cpc	r31, r19
     90a:	58 f3       	brcs	.-42     	; 0x8e2 <udc_update_iface_desc+0x32>
     90c:	e0 93 2a 25 	sts	0x252A, r30
     910:	f0 93 2b 25 	sts	0x252B, r31
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	08 95       	ret
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	08 95       	ret
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	08 95       	ret
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	08 95       	ret

00000924 <udc_iface_disable>:
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	c8 2f       	mov	r28, r24
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	be df       	rcall	.-132    	; 0x8b0 <udc_update_iface_desc>
     934:	f8 2e       	mov	r15, r24
     936:	88 23       	and	r24, r24
     938:	81 f1       	breq	.+96     	; 0x99a <udc_iface_disable+0x76>
     93a:	a0 91 2c 25 	lds	r26, 0x252C
     93e:	b0 91 2d 25 	lds	r27, 0x252D
     942:	ec 2f       	mov	r30, r28
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	ee 0f       	add	r30, r30
     948:	ff 1f       	adc	r31, r31
     94a:	12 96       	adiw	r26, 0x02	; 2
     94c:	2d 91       	ld	r18, X+
     94e:	3c 91       	ld	r19, X
     950:	13 97       	sbiw	r26, 0x03	; 3
     952:	e2 0f       	add	r30, r18
     954:	f3 1f       	adc	r31, r19
     956:	00 81       	ld	r16, Z
     958:	11 81       	ldd	r17, Z+1	; 0x01
     95a:	d8 01       	movw	r26, r16
     95c:	16 96       	adiw	r26, 0x06	; 6
     95e:	ed 91       	ld	r30, X+
     960:	fc 91       	ld	r31, X
     962:	17 97       	sbiw	r26, 0x07	; 7
     964:	09 95       	icall
     966:	68 2f       	mov	r22, r24
     968:	8c 2f       	mov	r24, r28
     96a:	a2 df       	rcall	.-188    	; 0x8b0 <udc_update_iface_desc>
     96c:	f8 2e       	mov	r15, r24
     96e:	88 23       	and	r24, r24
     970:	a1 f0       	breq	.+40     	; 0x99a <udc_iface_disable+0x76>
     972:	c0 91 2a 25 	lds	r28, 0x252A
     976:	d0 91 2b 25 	lds	r29, 0x252B
     97a:	65 e0       	ldi	r22, 0x05	; 5
     97c:	ce 01       	movw	r24, r28
     97e:	5d df       	rcall	.-326    	; 0x83a <udc_next_desc_in_iface>
     980:	ec 01       	movw	r28, r24
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	21 f0       	breq	.+8      	; 0x98e <udc_iface_disable+0x6a>
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <udd_ep_free>
     98c:	f6 cf       	rjmp	.-20     	; 0x97a <udc_iface_disable+0x56>
     98e:	d8 01       	movw	r26, r16
     990:	12 96       	adiw	r26, 0x02	; 2
     992:	ed 91       	ld	r30, X+
     994:	fc 91       	ld	r31, X
     996:	13 97       	sbiw	r26, 0x03	; 3
     998:	09 95       	icall
     99a:	8f 2d       	mov	r24, r15
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	08 95       	ret

000009a8 <udc_iface_enable>:
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	18 2f       	mov	r17, r24
     9b0:	7f df       	rcall	.-258    	; 0x8b0 <udc_update_iface_desc>
     9b2:	88 23       	and	r24, r24
     9b4:	41 f1       	breq	.+80     	; 0xa06 <udc_iface_enable+0x5e>
     9b6:	c0 91 2a 25 	lds	r28, 0x252A
     9ba:	d0 91 2b 25 	lds	r29, 0x252B
     9be:	65 e0       	ldi	r22, 0x05	; 5
     9c0:	ce 01       	movw	r24, r28
     9c2:	3b df       	rcall	.-394    	; 0x83a <udc_next_desc_in_iface>
     9c4:	ec 01       	movw	r28, r24
     9c6:	00 97       	sbiw	r24, 0x00	; 0
     9c8:	49 f0       	breq	.+18     	; 0x9dc <udc_iface_enable+0x34>
     9ca:	4c 81       	ldd	r20, Y+4	; 0x04
     9cc:	5d 81       	ldd	r21, Y+5	; 0x05
     9ce:	6b 81       	ldd	r22, Y+3	; 0x03
     9d0:	8a 81       	ldd	r24, Y+2	; 0x02
     9d2:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <udd_ep_alloc>
     9d6:	81 11       	cpse	r24, r1
     9d8:	f2 cf       	rjmp	.-28     	; 0x9be <udc_iface_enable+0x16>
     9da:	15 c0       	rjmp	.+42     	; 0xa06 <udc_iface_enable+0x5e>
     9dc:	a0 91 2c 25 	lds	r26, 0x252C
     9e0:	b0 91 2d 25 	lds	r27, 0x252D
     9e4:	81 2f       	mov	r24, r17
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	12 96       	adiw	r26, 0x02	; 2
     9ee:	ed 91       	ld	r30, X+
     9f0:	fc 91       	ld	r31, X
     9f2:	13 97       	sbiw	r26, 0x03	; 3
     9f4:	e8 0f       	add	r30, r24
     9f6:	f9 1f       	adc	r31, r25
     9f8:	01 90       	ld	r0, Z+
     9fa:	f0 81       	ld	r31, Z
     9fc:	e0 2d       	mov	r30, r0
     9fe:	01 90       	ld	r0, Z+
     a00:	f0 81       	ld	r31, Z
     a02:	e0 2d       	mov	r30, r0
     a04:	09 95       	icall
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	08 95       	ret

00000a0e <udc_start>:
     a0e:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <udd_enable>
     a12:	08 95       	ret

00000a14 <udc_reset>:
     a14:	cf 93       	push	r28
     a16:	80 91 2e 25 	lds	r24, 0x252E
     a1a:	88 23       	and	r24, r24
     a1c:	c1 f0       	breq	.+48     	; 0xa4e <udc_reset+0x3a>
     a1e:	e0 91 2c 25 	lds	r30, 0x252C
     a22:	f0 91 2d 25 	lds	r31, 0x252D
     a26:	01 90       	ld	r0, Z+
     a28:	f0 81       	ld	r31, Z
     a2a:	e0 2d       	mov	r30, r0
     a2c:	84 81       	ldd	r24, Z+4	; 0x04
     a2e:	88 23       	and	r24, r24
     a30:	71 f0       	breq	.+28     	; 0xa4e <udc_reset+0x3a>
     a32:	c0 e0       	ldi	r28, 0x00	; 0
     a34:	8c 2f       	mov	r24, r28
     a36:	76 df       	rcall	.-276    	; 0x924 <udc_iface_disable>
     a38:	cf 5f       	subi	r28, 0xFF	; 255
     a3a:	e0 91 2c 25 	lds	r30, 0x252C
     a3e:	f0 91 2d 25 	lds	r31, 0x252D
     a42:	01 90       	ld	r0, Z+
     a44:	f0 81       	ld	r31, Z
     a46:	e0 2d       	mov	r30, r0
     a48:	84 81       	ldd	r24, Z+4	; 0x04
     a4a:	c8 17       	cp	r28, r24
     a4c:	98 f3       	brcs	.-26     	; 0xa34 <udc_reset+0x20>
     a4e:	10 92 2e 25 	sts	0x252E, r1
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	80 93 32 25 	sts	0x2532, r24
     a5a:	90 93 33 25 	sts	0x2533, r25
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     a62:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     a64:	80 91 2e 25 	lds	r24, 0x252E
     a68:	88 23       	and	r24, r24
     a6a:	41 f1       	breq	.+80     	; 0xabc <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a6c:	e0 91 2c 25 	lds	r30, 0x252C
     a70:	f0 91 2d 25 	lds	r31, 0x252D
     a74:	a0 81       	ld	r26, Z
     a76:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     a78:	14 96       	adiw	r26, 0x04	; 4
     a7a:	8c 91       	ld	r24, X
     a7c:	88 23       	and	r24, r24
     a7e:	f1 f0       	breq	.+60     	; 0xabc <udc_sof_notify+0x5a>
     a80:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     a82:	8c 2f       	mov	r24, r28
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	02 80       	ldd	r0, Z+2	; 0x02
     a8c:	f3 81       	ldd	r31, Z+3	; 0x03
     a8e:	e0 2d       	mov	r30, r0
     a90:	e8 0f       	add	r30, r24
     a92:	f9 1f       	adc	r31, r25
     a94:	01 90       	ld	r0, Z+
     a96:	f0 81       	ld	r31, Z
     a98:	e0 2d       	mov	r30, r0
     a9a:	00 84       	ldd	r0, Z+8	; 0x08
     a9c:	f1 85       	ldd	r31, Z+9	; 0x09
     a9e:	e0 2d       	mov	r30, r0
     aa0:	30 97       	sbiw	r30, 0x00	; 0
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     aa4:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     aa6:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     aa8:	e0 91 2c 25 	lds	r30, 0x252C
     aac:	f0 91 2d 25 	lds	r31, 0x252D
     ab0:	a0 81       	ld	r26, Z
     ab2:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     ab4:	14 96       	adiw	r26, 0x04	; 4
     ab6:	8c 91       	ld	r24, X
     ab8:	c8 17       	cp	r28, r24
     aba:	18 f3       	brcs	.-58     	; 0xa82 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     acc:	10 92 77 26 	sts	0x2677, r1
     ad0:	10 92 78 26 	sts	0x2678, r1
	udd_g_ctrlreq.callback = NULL;
     ad4:	10 92 79 26 	sts	0x2679, r1
     ad8:	10 92 7a 26 	sts	0x267A, r1
	udd_g_ctrlreq.over_under_run = NULL;
     adc:	10 92 7b 26 	sts	0x267B, r1
     ae0:	10 92 7c 26 	sts	0x267C, r1

	if (Udd_setup_is_in()) {
     ae4:	20 91 6d 26 	lds	r18, 0x266D
     ae8:	22 23       	and	r18, r18
     aea:	0c f0       	brlt	.+2      	; 0xaee <udc_process_setup+0x2e>
     aec:	95 c2       	rjmp	.+1322   	; 0x1018 <udc_process_setup+0x558>
		if (udd_g_ctrlreq.req.wLength == 0) {
     aee:	80 91 73 26 	lds	r24, 0x2673
     af2:	90 91 74 26 	lds	r25, 0x2674
     af6:	00 97       	sbiw	r24, 0x00	; 0
     af8:	09 f0       	breq	.+2      	; 0xafc <udc_process_setup+0x3c>
     afa:	93 c2       	rjmp	.+1318   	; 0x1022 <udc_process_setup+0x562>
     afc:	89 c2       	rjmp	.+1298   	; 0x1010 <udc_process_setup+0x550>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     afe:	2f 71       	andi	r18, 0x1F	; 31
     b00:	09 f0       	breq	.+2      	; 0xb04 <udc_process_setup+0x44>
     b02:	b9 c0       	rjmp	.+370    	; 0xc76 <udc_process_setup+0x1b6>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     b04:	30 91 6e 26 	lds	r19, 0x266E
     b08:	36 30       	cpi	r19, 0x06	; 6
     b0a:	89 f0       	breq	.+34     	; 0xb2e <udc_process_setup+0x6e>
     b0c:	38 30       	cpi	r19, 0x08	; 8
     b0e:	09 f4       	brne	.+2      	; 0xb12 <udc_process_setup+0x52>
     b10:	a6 c0       	rjmp	.+332    	; 0xc5e <udc_process_setup+0x19e>
     b12:	31 11       	cpse	r19, r1
     b14:	b0 c0       	rjmp	.+352    	; 0xc76 <udc_process_setup+0x1b6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     b16:	02 97       	sbiw	r24, 0x02	; 2
     b18:	41 f4       	brne	.+16     	; 0xb2a <udc_process_setup+0x6a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     b1a:	62 e0       	ldi	r22, 0x02	; 2
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	82 e3       	ldi	r24, 0x32	; 50
     b20:	95 e2       	ldi	r25, 0x25	; 37
     b22:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     b26:	01 e0       	ldi	r16, 0x01	; 1
     b28:	f6 c1       	rjmp	.+1004   	; 0xf16 <udc_process_setup+0x456>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     b2a:	00 e0       	ldi	r16, 0x00	; 0
     b2c:	f4 c1       	rjmp	.+1000   	; 0xf16 <udc_process_setup+0x456>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     b2e:	20 91 6f 26 	lds	r18, 0x266F
     b32:	30 91 70 26 	lds	r19, 0x2670

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     b36:	83 2f       	mov	r24, r19
     b38:	99 27       	eor	r25, r25
     b3a:	82 30       	cpi	r24, 0x02	; 2
     b3c:	91 05       	cpc	r25, r1
     b3e:	a1 f0       	breq	.+40     	; 0xb68 <udc_process_setup+0xa8>
     b40:	1c f4       	brge	.+6      	; 0xb48 <udc_process_setup+0x88>
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	39 f0       	breq	.+14     	; 0xb54 <udc_process_setup+0x94>
     b46:	81 c0       	rjmp	.+258    	; 0xc4a <udc_process_setup+0x18a>
     b48:	83 30       	cpi	r24, 0x03	; 3
     b4a:	91 05       	cpc	r25, r1
     b4c:	f1 f1       	breq	.+124    	; 0xbca <udc_process_setup+0x10a>
     b4e:	0f 97       	sbiw	r24, 0x0f	; 15
     b50:	69 f1       	breq	.+90     	; 0xbac <udc_process_setup+0xec>
     b52:	7b c0       	rjmp	.+246    	; 0xc4a <udc_process_setup+0x18a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     b54:	80 91 34 20 	lds	r24, 0x2034
     b58:	90 91 35 20 	lds	r25, 0x2035
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     b5c:	dc 01       	movw	r26, r24
     b5e:	6c 91       	ld	r22, X
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <udd_set_setup_payload>
     b66:	60 c0       	rjmp	.+192    	; 0xc28 <udc_process_setup+0x168>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     b68:	e0 91 34 20 	lds	r30, 0x2034
     b6c:	f0 91 35 20 	lds	r31, 0x2035
     b70:	81 89       	ldd	r24, Z+17	; 0x11
     b72:	28 17       	cp	r18, r24
     b74:	08 f0       	brcs	.+2      	; 0xb78 <udc_process_setup+0xb8>
     b76:	6b c0       	rjmp	.+214    	; 0xc4e <udc_process_setup+0x18e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     b78:	c9 01       	movw	r24, r18
     b7a:	99 27       	eor	r25, r25
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	e0 91 36 20 	lds	r30, 0x2036
     b88:	f0 91 37 20 	lds	r31, 0x2037
     b8c:	e8 0f       	add	r30, r24
     b8e:	f9 1f       	adc	r31, r25
     b90:	80 81       	ld	r24, Z
     b92:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     b94:	fc 01       	movw	r30, r24
     b96:	62 81       	ldd	r22, Z+2	; 0x02
     b98:	73 81       	ldd	r23, Z+3	; 0x03
     b9a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     b9e:	e0 91 75 26 	lds	r30, 0x2675
     ba2:	f0 91 76 26 	lds	r31, 0x2676
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	81 83       	std	Z+1, r24	; 0x01
     baa:	3e c0       	rjmp	.+124    	; 0xc28 <udc_process_setup+0x168>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     bac:	80 91 38 20 	lds	r24, 0x2038
     bb0:	90 91 39 20 	lds	r25, 0x2039
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	09 f4       	brne	.+2      	; 0xbba <udc_process_setup+0xfa>
     bb8:	4c c0       	rjmp	.+152    	; 0xc52 <udc_process_setup+0x192>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     bba:	dc 01       	movw	r26, r24
     bbc:	12 96       	adiw	r26, 0x02	; 2
     bbe:	6d 91       	ld	r22, X+
     bc0:	7c 91       	ld	r23, X
     bc2:	13 97       	sbiw	r26, 0x03	; 3
     bc4:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <udd_set_setup_payload>
     bc8:	2f c0       	rjmp	.+94     	; 0xc28 <udc_process_setup+0x168>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     bca:	33 27       	eor	r19, r19
     bcc:	21 30       	cpi	r18, 0x01	; 1
     bce:	31 05       	cpc	r19, r1
     bd0:	89 f0       	breq	.+34     	; 0xbf4 <udc_process_setup+0x134>
     bd2:	48 f0       	brcs	.+18     	; 0xbe6 <udc_process_setup+0x126>
     bd4:	22 30       	cpi	r18, 0x02	; 2
     bd6:	31 05       	cpc	r19, r1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <udc_process_setup+0x11c>
     bda:	28 c2       	rjmp	.+1104   	; 0x102c <udc_process_setup+0x56c>
     bdc:	23 30       	cpi	r18, 0x03	; 3
     bde:	31 05       	cpc	r19, r1
     be0:	09 f4       	brne	.+2      	; 0xbe4 <udc_process_setup+0x124>
     be2:	28 c2       	rjmp	.+1104   	; 0x1034 <udc_process_setup+0x574>
     be4:	38 c0       	rjmp	.+112    	; 0xc56 <udc_process_setup+0x196>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     be6:	64 e0       	ldi	r22, 0x04	; 4
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	80 e3       	ldi	r24, 0x30	; 48
     bec:	90 e2       	ldi	r25, 0x20	; 32
     bee:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <udd_set_setup_payload>
     bf2:	1a c0       	rjmp	.+52     	; 0xc28 <udc_process_setup+0x168>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     bf4:	89 e2       	ldi	r24, 0x29	; 41
     bf6:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     bf8:	25 e0       	ldi	r18, 0x05	; 5
     bfa:	38 2f       	mov	r19, r24
     bfc:	a6 e1       	ldi	r26, 0x16	; 22
     bfe:	b0 e2       	ldi	r27, 0x20	; 32
     c00:	e8 2f       	mov	r30, r24
     c02:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     c04:	81 91       	ld	r24, Z+
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	8d 93       	st	X+, r24
     c0a:	9d 93       	st	X+, r25
     c0c:	8e 2f       	mov	r24, r30
     c0e:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     c10:	82 17       	cp	r24, r18
     c12:	c0 f3       	brcs	.-16     	; 0xc04 <udc_process_setup+0x144>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     c14:	22 0f       	add	r18, r18
     c16:	62 e0       	ldi	r22, 0x02	; 2
     c18:	62 0f       	add	r22, r18
     c1a:	60 93 14 20 	sts	0x2014, r22
		udd_set_setup_payload(
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	84 e1       	ldi	r24, 0x14	; 20
     c22:	90 e2       	ldi	r25, 0x20	; 32
     c24:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     c28:	80 91 73 26 	lds	r24, 0x2673
     c2c:	90 91 74 26 	lds	r25, 0x2674
     c30:	20 91 77 26 	lds	r18, 0x2677
     c34:	30 91 78 26 	lds	r19, 0x2678
     c38:	82 17       	cp	r24, r18
     c3a:	93 07       	cpc	r25, r19
     c3c:	70 f4       	brcc	.+28     	; 0xc5a <udc_process_setup+0x19a>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     c3e:	80 93 77 26 	sts	0x2677, r24
     c42:	90 93 78 26 	sts	0x2678, r25
	}
	return true;
     c46:	01 e0       	ldi	r16, 0x01	; 1
     c48:	66 c1       	rjmp	.+716    	; 0xf16 <udc_process_setup+0x456>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     c4a:	00 e0       	ldi	r16, 0x00	; 0
     c4c:	64 c1       	rjmp	.+712    	; 0xf16 <udc_process_setup+0x456>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     c4e:	00 e0       	ldi	r16, 0x00	; 0
     c50:	62 c1       	rjmp	.+708    	; 0xf16 <udc_process_setup+0x456>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     c52:	00 e0       	ldi	r16, 0x00	; 0
     c54:	60 c1       	rjmp	.+704    	; 0xf16 <udc_process_setup+0x456>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     c56:	00 e0       	ldi	r16, 0x00	; 0
     c58:	5e c1       	rjmp	.+700    	; 0xf16 <udc_process_setup+0x456>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     c5a:	01 e0       	ldi	r16, 0x01	; 1
     c5c:	5c c1       	rjmp	.+696    	; 0xf16 <udc_process_setup+0x456>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	41 f4       	brne	.+16     	; 0xc72 <udc_process_setup+0x1b2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	8e e2       	ldi	r24, 0x2E	; 46
     c68:	95 e2       	ldi	r25, 0x25	; 37
     c6a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <udd_set_setup_payload>
	return true;
     c6e:	01 e0       	ldi	r16, 0x01	; 1
     c70:	52 c1       	rjmp	.+676    	; 0xf16 <udc_process_setup+0x456>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     c72:	00 e0       	ldi	r16, 0x00	; 0
     c74:	50 c1       	rjmp	.+672    	; 0xf16 <udc_process_setup+0x456>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     c76:	21 30       	cpi	r18, 0x01	; 1
     c78:	09 f0       	breq	.+2      	; 0xc7c <udc_process_setup+0x1bc>
     c7a:	3f c0       	rjmp	.+126    	; 0xcfa <udc_process_setup+0x23a>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     c7c:	30 91 6e 26 	lds	r19, 0x266E
     c80:	3a 30       	cpi	r19, 0x0A	; 10
     c82:	d9 f5       	brne	.+118    	; 0xcfa <udc_process_setup+0x23a>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	99 f5       	brne	.+102    	; 0xcee <udc_process_setup+0x22e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     c88:	80 91 2e 25 	lds	r24, 0x252E
     c8c:	88 23       	and	r24, r24
     c8e:	89 f1       	breq	.+98     	; 0xcf2 <udc_process_setup+0x232>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     c90:	c0 91 71 26 	lds	r28, 0x2671
     c94:	d0 91 72 26 	lds	r29, 0x2672
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     c98:	e0 90 2c 25 	lds	r14, 0x252C
     c9c:	f0 90 2d 25 	lds	r15, 0x252D
     ca0:	d7 01       	movw	r26, r14
     ca2:	ed 91       	ld	r30, X+
     ca4:	fc 91       	ld	r31, X
     ca6:	84 81       	ldd	r24, Z+4	; 0x04
     ca8:	c8 17       	cp	r28, r24
     caa:	28 f5       	brcc	.+74     	; 0xcf6 <udc_process_setup+0x236>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	8c 2f       	mov	r24, r28
     cb0:	ff dd       	rcall	.-1026   	; 0x8b0 <udc_update_iface_desc>
     cb2:	08 2f       	mov	r16, r24
     cb4:	88 23       	and	r24, r24
     cb6:	09 f4       	brne	.+2      	; 0xcba <udc_process_setup+0x1fa>
     cb8:	2e c1       	rjmp	.+604    	; 0xf16 <udc_process_setup+0x456>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     cba:	ce 01       	movw	r24, r28
     cbc:	99 27       	eor	r25, r25
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	d7 01       	movw	r26, r14
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	ed 91       	ld	r30, X+
     cc8:	fc 91       	ld	r31, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	e8 0f       	add	r30, r24
     cce:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     cd0:	01 90       	ld	r0, Z+
     cd2:	f0 81       	ld	r31, Z
     cd4:	e0 2d       	mov	r30, r0
     cd6:	06 80       	ldd	r0, Z+6	; 0x06
     cd8:	f7 81       	ldd	r31, Z+7	; 0x07
     cda:	e0 2d       	mov	r30, r0
     cdc:	09 95       	icall
     cde:	80 93 30 25 	sts	0x2530, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	80 e3       	ldi	r24, 0x30	; 48
     ce8:	95 e2       	ldi	r25, 0x25	; 37
     cea:	c5 d7       	rcall	.+3978   	; 0x1c76 <udd_set_setup_payload>
     cec:	14 c1       	rjmp	.+552    	; 0xf16 <udc_process_setup+0x456>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     cee:	00 e0       	ldi	r16, 0x00	; 0
     cf0:	12 c1       	rjmp	.+548    	; 0xf16 <udc_process_setup+0x456>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     cf2:	00 e0       	ldi	r16, 0x00	; 0
     cf4:	10 c1       	rjmp	.+544    	; 0xf16 <udc_process_setup+0x456>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     cf6:	00 e0       	ldi	r16, 0x00	; 0
     cf8:	0e c1       	rjmp	.+540    	; 0xf16 <udc_process_setup+0x456>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     cfa:	22 30       	cpi	r18, 0x02	; 2
     cfc:	09 f0       	breq	.+2      	; 0xd00 <udc_process_setup+0x240>
     cfe:	0d c1       	rjmp	.+538    	; 0xf1a <udc_process_setup+0x45a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     d00:	20 91 6e 26 	lds	r18, 0x266E
     d04:	21 11       	cpse	r18, r1
     d06:	02 c1       	rjmp	.+516    	; 0xf0c <udc_process_setup+0x44c>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     d08:	02 97       	sbiw	r24, 0x02	; 2
     d0a:	81 f4       	brne	.+32     	; 0xd2c <udc_process_setup+0x26c>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     d0c:	80 91 71 26 	lds	r24, 0x2671
     d10:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <udd_ep_is_halted>
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	80 93 28 25 	sts	0x2528, r24
     d1a:	90 93 29 25 	sts	0x2529, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     d1e:	62 e0       	ldi	r22, 0x02	; 2
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	88 e2       	ldi	r24, 0x28	; 40
     d24:	95 e2       	ldi	r25, 0x25	; 37
     d26:	a7 d7       	rcall	.+3918   	; 0x1c76 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     d28:	01 e0       	ldi	r16, 0x01	; 1
     d2a:	f5 c0       	rjmp	.+490    	; 0xf16 <udc_process_setup+0x456>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     d2c:	00 e0       	ldi	r16, 0x00	; 0
     d2e:	f3 c0       	rjmp	.+486    	; 0xf16 <udc_process_setup+0x456>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     d30:	2f 71       	andi	r18, 0x1F	; 31
     d32:	09 f0       	breq	.+2      	; 0xd36 <udc_process_setup+0x276>
     d34:	90 c0       	rjmp	.+288    	; 0xe56 <udc_process_setup+0x396>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     d36:	80 91 6e 26 	lds	r24, 0x266E
     d3a:	83 30       	cpi	r24, 0x03	; 3
     d3c:	09 f4       	brne	.+2      	; 0xd40 <udc_process_setup+0x280>
     d3e:	e8 c0       	rjmp	.+464    	; 0xf10 <udc_process_setup+0x450>
     d40:	18 f4       	brcc	.+6      	; 0xd48 <udc_process_setup+0x288>
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	b1 f0       	breq	.+44     	; 0xd72 <udc_process_setup+0x2b2>
     d46:	87 c0       	rjmp	.+270    	; 0xe56 <udc_process_setup+0x396>
     d48:	85 30       	cpi	r24, 0x05	; 5
     d4a:	19 f0       	breq	.+6      	; 0xd52 <udc_process_setup+0x292>
     d4c:	89 30       	cpi	r24, 0x09	; 9
     d4e:	61 f1       	breq	.+88     	; 0xda8 <udc_process_setup+0x2e8>
     d50:	82 c0       	rjmp	.+260    	; 0xe56 <udc_process_setup+0x396>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d52:	80 91 73 26 	lds	r24, 0x2673
     d56:	90 91 74 26 	lds	r25, 0x2674
     d5a:	89 2b       	or	r24, r25
     d5c:	41 f4       	brne	.+16     	; 0xd6e <udc_process_setup+0x2ae>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     d5e:	82 e5       	ldi	r24, 0x52	; 82
     d60:	94 e0       	ldi	r25, 0x04	; 4
     d62:	80 93 79 26 	sts	0x2679, r24
     d66:	90 93 7a 26 	sts	0x267A, r25
	return true;
     d6a:	01 e0       	ldi	r16, 0x01	; 1
     d6c:	d4 c0       	rjmp	.+424    	; 0xf16 <udc_process_setup+0x456>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d6e:	00 e0       	ldi	r16, 0x00	; 0
     d70:	d2 c0       	rjmp	.+420    	; 0xf16 <udc_process_setup+0x456>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d72:	80 91 73 26 	lds	r24, 0x2673
     d76:	90 91 74 26 	lds	r25, 0x2674
     d7a:	89 2b       	or	r24, r25
     d7c:	89 f4       	brne	.+34     	; 0xda0 <udc_process_setup+0x2e0>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     d7e:	80 91 6f 26 	lds	r24, 0x266F
     d82:	90 91 70 26 	lds	r25, 0x2670
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	69 f4       	brne	.+26     	; 0xda4 <udc_process_setup+0x2e4>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     d8a:	80 91 32 25 	lds	r24, 0x2532
     d8e:	90 91 33 25 	lds	r25, 0x2533
     d92:	8d 7f       	andi	r24, 0xFD	; 253
     d94:	80 93 32 25 	sts	0x2532, r24
     d98:	90 93 33 25 	sts	0x2533, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     d9c:	01 e0       	ldi	r16, 0x01	; 1
     d9e:	bb c0       	rjmp	.+374    	; 0xf16 <udc_process_setup+0x456>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     da0:	00 e0       	ldi	r16, 0x00	; 0
     da2:	b9 c0       	rjmp	.+370    	; 0xf16 <udc_process_setup+0x456>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     da4:	00 e0       	ldi	r16, 0x00	; 0
     da6:	b7 c0       	rjmp	.+366    	; 0xf16 <udc_process_setup+0x456>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     da8:	80 91 73 26 	lds	r24, 0x2673
     dac:	90 91 74 26 	lds	r25, 0x2674
     db0:	89 2b       	or	r24, r25
     db2:	09 f0       	breq	.+2      	; 0xdb6 <udc_process_setup+0x2f6>
     db4:	46 c0       	rjmp	.+140    	; 0xe42 <udc_process_setup+0x382>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     db6:	54 d7       	rcall	.+3752   	; 0x1c60 <udd_getaddress>
     db8:	88 23       	and	r24, r24
     dba:	09 f4       	brne	.+2      	; 0xdbe <udc_process_setup+0x2fe>
     dbc:	44 c0       	rjmp	.+136    	; 0xe46 <udc_process_setup+0x386>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     dbe:	20 91 6f 26 	lds	r18, 0x266F
     dc2:	30 91 70 26 	lds	r19, 0x2670
     dc6:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     dc8:	e0 91 34 20 	lds	r30, 0x2034
     dcc:	f0 91 35 20 	lds	r31, 0x2035
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     dd0:	81 89       	ldd	r24, Z+17	; 0x11
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	c0 f1       	brcs	.+112    	; 0xe4a <udc_process_setup+0x38a>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     dda:	1c de       	rcall	.-968    	; 0xa14 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     ddc:	80 91 6f 26 	lds	r24, 0x266F
     de0:	90 91 70 26 	lds	r25, 0x2670
     de4:	80 93 2e 25 	sts	0x252E, r24
	if (udc_num_configuration == 0) {
     de8:	88 23       	and	r24, r24
     dea:	89 f1       	breq	.+98     	; 0xe4e <udc_process_setup+0x38e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     dec:	99 27       	eor	r25, r25
     dee:	81 50       	subi	r24, 0x01	; 1
     df0:	90 4c       	sbci	r25, 0xC0	; 192
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	e0 91 36 20 	lds	r30, 0x2036
     dfe:	f0 91 37 20 	lds	r31, 0x2037
     e02:	e8 0f       	add	r30, r24
     e04:	f9 1f       	adc	r31, r25
     e06:	e0 93 2c 25 	sts	0x252C, r30
     e0a:	f0 93 2d 25 	sts	0x252D, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e0e:	01 90       	ld	r0, Z+
     e10:	f0 81       	ld	r31, Z
     e12:	e0 2d       	mov	r30, r0
     e14:	84 81       	ldd	r24, Z+4	; 0x04
     e16:	88 23       	and	r24, r24
     e18:	e1 f0       	breq	.+56     	; 0xe52 <udc_process_setup+0x392>
     e1a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	8c 2f       	mov	r24, r28
     e20:	c3 dd       	rcall	.-1146   	; 0x9a8 <udc_iface_enable>
     e22:	08 2f       	mov	r16, r24
     e24:	88 23       	and	r24, r24
     e26:	09 f4       	brne	.+2      	; 0xe2a <udc_process_setup+0x36a>
     e28:	76 c0       	rjmp	.+236    	; 0xf16 <udc_process_setup+0x456>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     e2a:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e2c:	e0 91 2c 25 	lds	r30, 0x252C
     e30:	f0 91 2d 25 	lds	r31, 0x252D
     e34:	01 90       	ld	r0, Z+
     e36:	f0 81       	ld	r31, Z
     e38:	e0 2d       	mov	r30, r0
     e3a:	84 81       	ldd	r24, Z+4	; 0x04
     e3c:	c8 17       	cp	r28, r24
     e3e:	70 f3       	brcs	.-36     	; 0xe1c <udc_process_setup+0x35c>
     e40:	6a c0       	rjmp	.+212    	; 0xf16 <udc_process_setup+0x456>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e42:	00 e0       	ldi	r16, 0x00	; 0
     e44:	68 c0       	rjmp	.+208    	; 0xf16 <udc_process_setup+0x456>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     e46:	00 e0       	ldi	r16, 0x00	; 0
     e48:	66 c0       	rjmp	.+204    	; 0xf16 <udc_process_setup+0x456>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     e4a:	00 e0       	ldi	r16, 0x00	; 0
     e4c:	64 c0       	rjmp	.+200    	; 0xf16 <udc_process_setup+0x456>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     e4e:	01 e0       	ldi	r16, 0x01	; 1
     e50:	62 c0       	rjmp	.+196    	; 0xf16 <udc_process_setup+0x456>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     e52:	01 e0       	ldi	r16, 0x01	; 1
     e54:	60 c0       	rjmp	.+192    	; 0xf16 <udc_process_setup+0x456>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     e56:	21 30       	cpi	r18, 0x01	; 1
     e58:	09 f5       	brne	.+66     	; 0xe9c <udc_process_setup+0x3dc>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     e5a:	80 91 6e 26 	lds	r24, 0x266E
     e5e:	8b 30       	cpi	r24, 0x0B	; 11
     e60:	e9 f4       	brne	.+58     	; 0xe9c <udc_process_setup+0x3dc>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     e62:	80 91 73 26 	lds	r24, 0x2673
     e66:	90 91 74 26 	lds	r25, 0x2674
     e6a:	89 2b       	or	r24, r25
     e6c:	99 f4       	brne	.+38     	; 0xe94 <udc_process_setup+0x3d4>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     e6e:	80 91 2e 25 	lds	r24, 0x252E
     e72:	88 23       	and	r24, r24
     e74:	89 f0       	breq	.+34     	; 0xe98 <udc_process_setup+0x3d8>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     e76:	c0 91 71 26 	lds	r28, 0x2671
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     e7a:	d0 91 6f 26 	lds	r29, 0x266F

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     e7e:	8c 2f       	mov	r24, r28
     e80:	51 dd       	rcall	.-1374   	; 0x924 <udc_iface_disable>
     e82:	08 2f       	mov	r16, r24
     e84:	88 23       	and	r24, r24
     e86:	09 f4       	brne	.+2      	; 0xe8a <udc_process_setup+0x3ca>
     e88:	46 c0       	rjmp	.+140    	; 0xf16 <udc_process_setup+0x456>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     e8a:	6d 2f       	mov	r22, r29
     e8c:	8c 2f       	mov	r24, r28
     e8e:	8c dd       	rcall	.-1256   	; 0x9a8 <udc_iface_enable>
     e90:	08 2f       	mov	r16, r24
     e92:	41 c0       	rjmp	.+130    	; 0xf16 <udc_process_setup+0x456>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     e94:	00 e0       	ldi	r16, 0x00	; 0
     e96:	3f c0       	rjmp	.+126    	; 0xf16 <udc_process_setup+0x456>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     e98:	00 e0       	ldi	r16, 0x00	; 0
     e9a:	3d c0       	rjmp	.+122    	; 0xf16 <udc_process_setup+0x456>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	09 f0       	breq	.+2      	; 0xea2 <udc_process_setup+0x3e2>
     ea0:	3c c0       	rjmp	.+120    	; 0xf1a <udc_process_setup+0x45a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     ea2:	80 91 6e 26 	lds	r24, 0x266E
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	19 f0       	breq	.+6      	; 0xeb0 <udc_process_setup+0x3f0>
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	b1 f0       	breq	.+44     	; 0xeda <udc_process_setup+0x41a>
     eae:	32 c0       	rjmp	.+100    	; 0xf14 <udc_process_setup+0x454>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     eb0:	80 91 73 26 	lds	r24, 0x2673
     eb4:	90 91 74 26 	lds	r25, 0x2674
     eb8:	89 2b       	or	r24, r25
     eba:	59 f4       	brne	.+22     	; 0xed2 <udc_process_setup+0x412>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     ebc:	80 91 6f 26 	lds	r24, 0x266F
     ec0:	90 91 70 26 	lds	r25, 0x2670
     ec4:	89 2b       	or	r24, r25
     ec6:	39 f4       	brne	.+14     	; 0xed6 <udc_process_setup+0x416>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     ec8:	80 91 71 26 	lds	r24, 0x2671
     ecc:	59 d7       	rcall	.+3762   	; 0x1d80 <udd_ep_clear_halt>
     ece:	08 2f       	mov	r16, r24
     ed0:	22 c0       	rjmp	.+68     	; 0xf16 <udc_process_setup+0x456>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ed2:	00 e0       	ldi	r16, 0x00	; 0
     ed4:	20 c0       	rjmp	.+64     	; 0xf16 <udc_process_setup+0x456>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     ed6:	00 e0       	ldi	r16, 0x00	; 0
     ed8:	1e c0       	rjmp	.+60     	; 0xf16 <udc_process_setup+0x456>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     eda:	80 91 73 26 	lds	r24, 0x2673
     ede:	90 91 74 26 	lds	r25, 0x2674
     ee2:	89 2b       	or	r24, r25
     ee4:	79 f4       	brne	.+30     	; 0xf04 <udc_process_setup+0x444>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     ee6:	80 91 6f 26 	lds	r24, 0x266F
     eea:	90 91 70 26 	lds	r25, 0x2670
     eee:	89 2b       	or	r24, r25
     ef0:	59 f4       	brne	.+22     	; 0xf08 <udc_process_setup+0x448>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     ef2:	c1 e7       	ldi	r28, 0x71	; 113
     ef4:	d6 e2       	ldi	r29, 0x26	; 38
     ef6:	88 81       	ld	r24, Y
     ef8:	f5 d7       	rcall	.+4074   	; 0x1ee4 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     efa:	88 81       	ld	r24, Y
     efc:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <udd_ep_set_halt>
     f00:	08 2f       	mov	r16, r24
     f02:	09 c0       	rjmp	.+18     	; 0xf16 <udc_process_setup+0x456>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     f04:	00 e0       	ldi	r16, 0x00	; 0
     f06:	07 c0       	rjmp	.+14     	; 0xf16 <udc_process_setup+0x456>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     f08:	00 e0       	ldi	r16, 0x00	; 0
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <udc_process_setup+0x456>
				break;
			}
		}
#endif
	}
	return false;
     f0c:	00 e0       	ldi	r16, 0x00	; 0
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <udc_process_setup+0x456>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     f10:	00 e0       	ldi	r16, 0x00	; 0
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <udc_process_setup+0x456>
				break;
			}
		}
#endif
	}
	return false;
     f14:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     f16:	01 11       	cpse	r16, r1
     f18:	91 c0       	rjmp	.+290    	; 0x103c <udc_process_setup+0x57c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     f1a:	80 91 6d 26 	lds	r24, 0x266D
     f1e:	8f 71       	andi	r24, 0x1F	; 31
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	c1 f5       	brne	.+112    	; 0xf94 <udc_process_setup+0x4d4>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     f24:	80 91 2e 25 	lds	r24, 0x252E
     f28:	88 23       	and	r24, r24
     f2a:	a1 f1       	breq	.+104    	; 0xf94 <udc_process_setup+0x4d4>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f2c:	c0 91 71 26 	lds	r28, 0x2671
     f30:	d0 91 72 26 	lds	r29, 0x2672
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     f34:	00 91 2c 25 	lds	r16, 0x252C
     f38:	10 91 2d 25 	lds	r17, 0x252D
     f3c:	d8 01       	movw	r26, r16
     f3e:	ed 91       	ld	r30, X+
     f40:	fc 91       	ld	r31, X
     f42:	84 81       	ldd	r24, Z+4	; 0x04
     f44:	c8 17       	cp	r28, r24
     f46:	30 f5       	brcc	.+76     	; 0xf94 <udc_process_setup+0x4d4>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	8c 2f       	mov	r24, r28
     f4c:	b1 dc       	rcall	.-1694   	; 0x8b0 <udc_update_iface_desc>
     f4e:	88 23       	and	r24, r24
     f50:	09 f1       	breq	.+66     	; 0xf94 <udc_process_setup+0x4d4>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     f52:	ce 01       	movw	r24, r28
     f54:	99 27       	eor	r25, r25
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	d8 01       	movw	r26, r16
     f5c:	12 96       	adiw	r26, 0x02	; 2
     f5e:	ed 91       	ld	r30, X+
     f60:	fc 91       	ld	r31, X
     f62:	13 97       	sbiw	r26, 0x03	; 3
     f64:	e8 0f       	add	r30, r24
     f66:	f9 1f       	adc	r31, r25
     f68:	00 81       	ld	r16, Z
     f6a:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     f6c:	d8 01       	movw	r26, r16
     f6e:	16 96       	adiw	r26, 0x06	; 6
     f70:	ed 91       	ld	r30, X+
     f72:	fc 91       	ld	r31, X
     f74:	17 97       	sbiw	r26, 0x07	; 7
     f76:	09 95       	icall
     f78:	68 2f       	mov	r22, r24
     f7a:	8c 2f       	mov	r24, r28
     f7c:	99 dc       	rcall	.-1742   	; 0x8b0 <udc_update_iface_desc>
     f7e:	88 23       	and	r24, r24
     f80:	49 f0       	breq	.+18     	; 0xf94 <udc_process_setup+0x4d4>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     f82:	d8 01       	movw	r26, r16
     f84:	14 96       	adiw	r26, 0x04	; 4
     f86:	ed 91       	ld	r30, X+
     f88:	fc 91       	ld	r31, X
     f8a:	15 97       	sbiw	r26, 0x05	; 5
     f8c:	09 95       	icall
     f8e:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     f90:	81 11       	cpse	r24, r1
     f92:	54 c0       	rjmp	.+168    	; 0x103c <udc_process_setup+0x57c>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     f94:	80 91 6d 26 	lds	r24, 0x266D
     f98:	8f 71       	andi	r24, 0x1F	; 31
     f9a:	82 30       	cpi	r24, 0x02	; 2
     f9c:	d9 f5       	brne	.+118    	; 0x1014 <udc_process_setup+0x554>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     f9e:	80 91 2e 25 	lds	r24, 0x252E
     fa2:	88 23       	and	r24, r24
     fa4:	89 f1       	breq	.+98     	; 0x1008 <udc_process_setup+0x548>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     fa6:	e0 91 2c 25 	lds	r30, 0x252C
     faa:	f0 91 2d 25 	lds	r31, 0x252D
     fae:	a0 81       	ld	r26, Z
     fb0:	b1 81       	ldd	r27, Z+1	; 0x01
     fb2:	14 96       	adiw	r26, 0x04	; 4
     fb4:	8c 91       	ld	r24, X
     fb6:	88 23       	and	r24, r24
     fb8:	49 f1       	breq	.+82     	; 0x100c <udc_process_setup+0x54c>
     fba:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     fbc:	21 2f       	mov	r18, r17
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	22 0f       	add	r18, r18
     fc2:	33 1f       	adc	r19, r19
     fc4:	02 80       	ldd	r0, Z+2	; 0x02
     fc6:	f3 81       	ldd	r31, Z+3	; 0x03
     fc8:	e0 2d       	mov	r30, r0
     fca:	e2 0f       	add	r30, r18
     fcc:	f3 1f       	adc	r31, r19
     fce:	c0 81       	ld	r28, Z
     fd0:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     fd2:	ee 81       	ldd	r30, Y+6	; 0x06
     fd4:	ff 81       	ldd	r31, Y+7	; 0x07
     fd6:	09 95       	icall
     fd8:	68 2f       	mov	r22, r24
     fda:	81 2f       	mov	r24, r17
     fdc:	69 dc       	rcall	.-1838   	; 0x8b0 <udc_update_iface_desc>
     fde:	08 2f       	mov	r16, r24
     fe0:	88 23       	and	r24, r24
     fe2:	61 f1       	breq	.+88     	; 0x103c <udc_process_setup+0x57c>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     fe4:	ec 81       	ldd	r30, Y+4	; 0x04
     fe6:	fd 81       	ldd	r31, Y+5	; 0x05
     fe8:	09 95       	icall
     fea:	08 2f       	mov	r16, r24
     fec:	81 11       	cpse	r24, r1
     fee:	26 c0       	rjmp	.+76     	; 0x103c <udc_process_setup+0x57c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     ff0:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ff2:	e0 91 2c 25 	lds	r30, 0x252C
     ff6:	f0 91 2d 25 	lds	r31, 0x252D
     ffa:	a0 81       	ld	r26, Z
     ffc:	b1 81       	ldd	r27, Z+1	; 0x01
     ffe:	14 96       	adiw	r26, 0x04	; 4
    1000:	8c 91       	ld	r24, X
    1002:	18 17       	cp	r17, r24
    1004:	d8 f2       	brcs	.-74     	; 0xfbc <udc_process_setup+0x4fc>
    1006:	1a c0       	rjmp	.+52     	; 0x103c <udc_process_setup+0x57c>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1008:	00 e0       	ldi	r16, 0x00	; 0
    100a:	18 c0       	rjmp	.+48     	; 0x103c <udc_process_setup+0x57c>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    100c:	00 e0       	ldi	r16, 0x00	; 0
    100e:	16 c0       	rjmp	.+44     	; 0x103c <udc_process_setup+0x57c>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1010:	00 e0       	ldi	r16, 0x00	; 0
    1012:	14 c0       	rjmp	.+40     	; 0x103c <udc_process_setup+0x57c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1014:	00 e0       	ldi	r16, 0x00	; 0
    1016:	12 c0       	rjmp	.+36     	; 0x103c <udc_process_setup+0x57c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1018:	82 2f       	mov	r24, r18
    101a:	80 76       	andi	r24, 0x60	; 96
    101c:	09 f0       	breq	.+2      	; 0x1020 <udc_process_setup+0x560>
    101e:	7d cf       	rjmp	.-262    	; 0xf1a <udc_process_setup+0x45a>
    1020:	87 ce       	rjmp	.-754    	; 0xd30 <udc_process_setup+0x270>
    1022:	32 2f       	mov	r19, r18
    1024:	30 76       	andi	r19, 0x60	; 96
    1026:	09 f0       	breq	.+2      	; 0x102a <udc_process_setup+0x56a>
    1028:	78 cf       	rjmp	.-272    	; 0xf1a <udc_process_setup+0x45a>
    102a:	69 cd       	rjmp	.-1326   	; 0xafe <udc_process_setup+0x3e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    102c:	26 e0       	ldi	r18, 0x06	; 6
		str = udc_string_product_name;
    102e:	82 e2       	ldi	r24, 0x22	; 34
    1030:	90 e2       	ldi	r25, 0x20	; 32
    1032:	e3 cd       	rjmp	.-1082   	; 0xbfa <udc_process_setup+0x13a>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1034:	24 e0       	ldi	r18, 0x04	; 4
		str = udc_get_string_serial_name();
    1036:	8d ea       	ldi	r24, 0xAD	; 173
    1038:	90 e2       	ldi	r25, 0x20	; 32
    103a:	df cd       	rjmp	.-1090   	; 0xbfa <udc_process_setup+0x13a>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    103c:	80 2f       	mov	r24, r16
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	08 95       	ret

0000104c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1050:	e0 91 34 25 	lds	r30, 0x2534
    1054:	f0 91 35 25 	lds	r31, 0x2535
    1058:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    105a:	83 ff       	sbrs	r24, 3
    105c:	08 c0       	rjmp	.+16     	; 0x106e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    105e:	88 60       	ori	r24, 0x08	; 8
    1060:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1066:	86 ef       	ldi	r24, 0xF6	; 246
    1068:	80 93 3e 25 	sts	0x253E, r24
    106c:	89 c0       	rjmp	.+274    	; 0x1180 <twim_interrupt_handler+0x134>
    106e:	98 2f       	mov	r25, r24
    1070:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1072:	31 f0       	breq	.+12     	; 0x1080 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1074:	83 e0       	ldi	r24, 0x03	; 3
    1076:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	80 93 3e 25 	sts	0x253E, r24
    107e:	80 c0       	rjmp	.+256    	; 0x1180 <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1080:	86 ff       	sbrs	r24, 6
    1082:	45 c0       	rjmp	.+138    	; 0x110e <twim_interrupt_handler+0xc2>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1084:	a0 91 36 25 	lds	r26, 0x2536
    1088:	b0 91 37 25 	lds	r27, 0x2537

	if (transfer.addr_count < pkg->addr_length) {
    108c:	80 91 38 25 	lds	r24, 0x2538
    1090:	90 91 39 25 	lds	r25, 0x2539
    1094:	14 96       	adiw	r26, 0x04	; 4
    1096:	2d 91       	ld	r18, X+
    1098:	3c 91       	ld	r19, X
    109a:	15 97       	sbiw	r26, 0x05	; 5
    109c:	82 17       	cp	r24, r18
    109e:	93 07       	cpc	r25, r19
    10a0:	6c f4       	brge	.+26     	; 0x10bc <twim_interrupt_handler+0x70>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    10a2:	9c 01       	movw	r18, r24
    10a4:	2f 5f       	subi	r18, 0xFF	; 255
    10a6:	3f 4f       	sbci	r19, 0xFF	; 255
    10a8:	20 93 38 25 	sts	0x2538, r18
    10ac:	30 93 39 25 	sts	0x2539, r19
    10b0:	a8 0f       	add	r26, r24
    10b2:	b9 1f       	adc	r27, r25
    10b4:	11 96       	adiw	r26, 0x01	; 1
    10b6:	8c 91       	ld	r24, X
    10b8:	87 83       	std	Z+7, r24	; 0x07
    10ba:	62 c0       	rjmp	.+196    	; 0x1180 <twim_interrupt_handler+0x134>

	} else if (transfer.data_count < pkg->length) {
    10bc:	80 91 3a 25 	lds	r24, 0x253A
    10c0:	90 91 3b 25 	lds	r25, 0x253B
    10c4:	18 96       	adiw	r26, 0x08	; 8
    10c6:	2d 91       	ld	r18, X+
    10c8:	3c 91       	ld	r19, X
    10ca:	19 97       	sbiw	r26, 0x09	; 9
    10cc:	82 17       	cp	r24, r18
    10ce:	93 07       	cpc	r25, r19
    10d0:	c8 f4       	brcc	.+50     	; 0x1104 <twim_interrupt_handler+0xb8>

		if (transfer.read) {
    10d2:	20 91 3c 25 	lds	r18, 0x253C
    10d6:	22 23       	and	r18, r18
    10d8:	21 f0       	breq	.+8      	; 0x10e2 <twim_interrupt_handler+0x96>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    10da:	86 81       	ldd	r24, Z+6	; 0x06
    10dc:	81 60       	ori	r24, 0x01	; 1
    10de:	86 83       	std	Z+6, r24	; 0x06
    10e0:	4f c0       	rjmp	.+158    	; 0x1180 <twim_interrupt_handler+0x134>

		} else {
			const uint8_t * const data = pkg->buffer;
    10e2:	16 96       	adiw	r26, 0x06	; 6
    10e4:	2d 91       	ld	r18, X+
    10e6:	3c 91       	ld	r19, X
    10e8:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    10ea:	ac 01       	movw	r20, r24
    10ec:	4f 5f       	subi	r20, 0xFF	; 255
    10ee:	5f 4f       	sbci	r21, 0xFF	; 255
    10f0:	40 93 3a 25 	sts	0x253A, r20
    10f4:	50 93 3b 25 	sts	0x253B, r21
    10f8:	d9 01       	movw	r26, r18
    10fa:	a8 0f       	add	r26, r24
    10fc:	b9 1f       	adc	r27, r25
    10fe:	8c 91       	ld	r24, X
    1100:	87 83       	std	Z+7, r24	; 0x07
    1102:	3e c0       	rjmp	.+124    	; 0x1180 <twim_interrupt_handler+0x134>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1104:	83 e0       	ldi	r24, 0x03	; 3
    1106:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1108:	10 92 3e 25 	sts	0x253E, r1
    110c:	39 c0       	rjmp	.+114    	; 0x1180 <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    110e:	88 23       	and	r24, r24
    1110:	a4 f5       	brge	.+104    	; 0x117a <twim_interrupt_handler+0x12e>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1112:	a0 91 36 25 	lds	r26, 0x2536
    1116:	b0 91 37 25 	lds	r27, 0x2537

	if (transfer.data_count < pkg->length) {
    111a:	80 91 3a 25 	lds	r24, 0x253A
    111e:	90 91 3b 25 	lds	r25, 0x253B
    1122:	18 96       	adiw	r26, 0x08	; 8
    1124:	2d 91       	ld	r18, X+
    1126:	3c 91       	ld	r19, X
    1128:	19 97       	sbiw	r26, 0x09	; 9
    112a:	82 17       	cp	r24, r18
    112c:	93 07       	cpc	r25, r19
    112e:	f8 f4       	brcc	.+62     	; 0x116e <twim_interrupt_handler+0x122>

		uint8_t * const data = pkg->buffer;
    1130:	16 96       	adiw	r26, 0x06	; 6
    1132:	4d 91       	ld	r20, X+
    1134:	5c 91       	ld	r21, X
    1136:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    1138:	9c 01       	movw	r18, r24
    113a:	2f 5f       	subi	r18, 0xFF	; 255
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	20 93 3a 25 	sts	0x253A, r18
    1142:	30 93 3b 25 	sts	0x253B, r19
    1146:	67 81       	ldd	r22, Z+7	; 0x07
    1148:	ea 01       	movw	r28, r20
    114a:	c8 0f       	add	r28, r24
    114c:	d9 1f       	adc	r29, r25
    114e:	68 83       	st	Y, r22

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1150:	18 96       	adiw	r26, 0x08	; 8
    1152:	8d 91       	ld	r24, X+
    1154:	9c 91       	ld	r25, X
    1156:	19 97       	sbiw	r26, 0x09	; 9
    1158:	28 17       	cp	r18, r24
    115a:	39 07       	cpc	r19, r25
    115c:	18 f4       	brcc	.+6      	; 0x1164 <twim_interrupt_handler+0x118>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	83 83       	std	Z+3, r24	; 0x03
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <twim_interrupt_handler+0x134>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1164:	87 e0       	ldi	r24, 0x07	; 7
    1166:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1168:	10 92 3e 25 	sts	0x253E, r1
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <twim_interrupt_handler+0x134>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    116e:	83 e0       	ldi	r24, 0x03	; 3
    1170:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1172:	89 ef       	ldi	r24, 0xF9	; 249
    1174:	80 93 3e 25 	sts	0x253E, r24
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <twim_interrupt_handler+0x134>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    117a:	8b ef       	ldi	r24, 0xFB	; 251
    117c:	80 93 3e 25 	sts	0x253E, r24
	}
}
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	08 95       	ret

00001186 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
    11a8:	51 df       	rcall	.-350    	; 0x104c <twim_interrupt_handler>
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	bf 91       	pop	r27
    11b0:	af 91       	pop	r26
    11b2:	9f 91       	pop	r25
    11b4:	8f 91       	pop	r24
    11b6:	7f 91       	pop	r23
    11b8:	6f 91       	pop	r22
    11ba:	5f 91       	pop	r21
    11bc:	4f 91       	pop	r20
    11be:	3f 91       	pop	r19
    11c0:	2f 91       	pop	r18
    11c2:	0f 90       	pop	r0
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	0f 90       	pop	r0
    11c8:	1f 90       	pop	r1
    11ca:	18 95       	reti

000011cc <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    11cc:	1f 92       	push	r1
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	2f 93       	push	r18
    11d8:	3f 93       	push	r19
    11da:	4f 93       	push	r20
    11dc:	5f 93       	push	r21
    11de:	6f 93       	push	r22
    11e0:	7f 93       	push	r23
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	af 93       	push	r26
    11e8:	bf 93       	push	r27
    11ea:	ef 93       	push	r30
    11ec:	ff 93       	push	r31
    11ee:	2e df       	rcall	.-420    	; 0x104c <twim_interrupt_handler>
    11f0:	ff 91       	pop	r31
    11f2:	ef 91       	pop	r30
    11f4:	bf 91       	pop	r27
    11f6:	af 91       	pop	r26
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	7f 91       	pop	r23
    11fe:	6f 91       	pop	r22
    1200:	5f 91       	pop	r21
    1202:	4f 91       	pop	r20
    1204:	3f 91       	pop	r19
    1206:	2f 91       	pop	r18
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1212:	4f 92       	push	r4
    1214:	5f 92       	push	r5
    1216:	6f 92       	push	r6
    1218:	7f 92       	push	r7
    121a:	8f 92       	push	r8
    121c:	9f 92       	push	r9
    121e:	af 92       	push	r10
    1220:	bf 92       	push	r11
    1222:	cf 92       	push	r12
    1224:	df 92       	push	r13
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	ec 01       	movw	r28, r24
    1234:	4a 01       	movw	r8, r20
    1236:	5b 01       	movw	r10, r22
    1238:	28 01       	movw	r4, r16
    123a:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    123c:	d9 01       	movw	r26, r18
    123e:	c8 01       	movw	r24, r16
    1240:	68 94       	set
    1242:	12 f8       	bld	r1, 2
    1244:	b6 95       	lsr	r27
    1246:	a7 95       	ror	r26
    1248:	97 95       	ror	r25
    124a:	87 95       	ror	r24
    124c:	16 94       	lsr	r1
    124e:	d1 f7       	brne	.-12     	; 0x1244 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1250:	b9 01       	movw	r22, r18
    1252:	a8 01       	movw	r20, r16
    1254:	03 2e       	mov	r0, r19
    1256:	36 e1       	ldi	r19, 0x16	; 22
    1258:	76 95       	lsr	r23
    125a:	67 95       	ror	r22
    125c:	57 95       	ror	r21
    125e:	47 95       	ror	r20
    1260:	3a 95       	dec	r19
    1262:	d1 f7       	brne	.-12     	; 0x1258 <usart_set_baudrate+0x46>
    1264:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1266:	2c 81       	ldd	r18, Y+4	; 0x04
    1268:	22 fd       	sbrc	r18, 2
    126a:	08 c0       	rjmp	.+16     	; 0x127c <usart_set_baudrate+0x6a>
		max_rate /= 2;
    126c:	b6 95       	lsr	r27
    126e:	a7 95       	ror	r26
    1270:	97 95       	ror	r25
    1272:	87 95       	ror	r24
		min_rate /= 2;
    1274:	76 95       	lsr	r23
    1276:	67 95       	ror	r22
    1278:	57 95       	ror	r21
    127a:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    127c:	88 15       	cp	r24, r8
    127e:	99 05       	cpc	r25, r9
    1280:	aa 05       	cpc	r26, r10
    1282:	bb 05       	cpc	r27, r11
    1284:	08 f4       	brcc	.+2      	; 0x1288 <usart_set_baudrate+0x76>
    1286:	a6 c0       	rjmp	.+332    	; 0x13d4 <usart_set_baudrate+0x1c2>
    1288:	84 16       	cp	r8, r20
    128a:	95 06       	cpc	r9, r21
    128c:	a6 06       	cpc	r10, r22
    128e:	b7 06       	cpc	r11, r23
    1290:	08 f4       	brcc	.+2      	; 0x1294 <usart_set_baudrate+0x82>
    1292:	a2 c0       	rjmp	.+324    	; 0x13d8 <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	82 fd       	sbrc	r24, 2
    1298:	04 c0       	rjmp	.+8      	; 0x12a2 <usart_set_baudrate+0x90>
		baud *= 2;
    129a:	88 0c       	add	r8, r8
    129c:	99 1c       	adc	r9, r9
    129e:	aa 1c       	adc	r10, r10
    12a0:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    12a2:	c3 01       	movw	r24, r6
    12a4:	b2 01       	movw	r22, r4
    12a6:	a5 01       	movw	r20, r10
    12a8:	94 01       	movw	r18, r8
    12aa:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    12ae:	2f 3f       	cpi	r18, 0xFF	; 255
    12b0:	31 05       	cpc	r19, r1
    12b2:	41 05       	cpc	r20, r1
    12b4:	51 05       	cpc	r21, r1
    12b6:	08 f4       	brcc	.+2      	; 0x12ba <usart_set_baudrate+0xa8>
    12b8:	91 c0       	rjmp	.+290    	; 0x13dc <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    12ba:	c1 2c       	mov	r12, r1
    12bc:	d1 2c       	mov	r13, r1
    12be:	76 01       	movw	r14, r12
    12c0:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    12c2:	19 ef       	ldi	r17, 0xF9	; 249
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    12c6:	2c 15       	cp	r18, r12
    12c8:	3d 05       	cpc	r19, r13
    12ca:	4e 05       	cpc	r20, r14
    12cc:	5f 05       	cpc	r21, r15
    12ce:	68 f0       	brcs	.+26     	; 0x12ea <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    12d0:	cc 0c       	add	r12, r12
    12d2:	dd 1c       	adc	r13, r13
    12d4:	ee 1c       	adc	r14, r14
    12d6:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    12d8:	1d 3f       	cpi	r17, 0xFD	; 253
    12da:	14 f4       	brge	.+4      	; 0x12e0 <usart_set_baudrate+0xce>
			limit |= 1;
    12dc:	68 94       	set
    12de:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    12e0:	1f 5f       	subi	r17, 0xFF	; 255
    12e2:	17 30       	cpi	r17, 0x07	; 7
    12e4:	81 f7       	brne	.-32     	; 0x12c6 <usart_set_baudrate+0xb4>
    12e6:	21 2f       	mov	r18, r17
    12e8:	50 c0       	rjmp	.+160    	; 0x138a <usart_set_baudrate+0x178>
    12ea:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    12ec:	11 23       	and	r17, r17
    12ee:	0c f0       	brlt	.+2      	; 0x12f2 <usart_set_baudrate+0xe0>
    12f0:	4c c0       	rjmp	.+152    	; 0x138a <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    12f2:	d5 01       	movw	r26, r10
    12f4:	c4 01       	movw	r24, r8
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	aa 1f       	adc	r26, r26
    12fc:	bb 1f       	adc	r27, r27
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	aa 1f       	adc	r26, r26
    1304:	bb 1f       	adc	r27, r27
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	aa 1f       	adc	r26, r26
    130c:	bb 1f       	adc	r27, r27
    130e:	48 1a       	sub	r4, r24
    1310:	59 0a       	sbc	r5, r25
    1312:	6a 0a       	sbc	r6, r26
    1314:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1316:	1e 3f       	cpi	r17, 0xFE	; 254
    1318:	f4 f4       	brge	.+60     	; 0x1356 <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    131a:	6d ef       	ldi	r22, 0xFD	; 253
    131c:	7f ef       	ldi	r23, 0xFF	; 255
    131e:	61 1b       	sub	r22, r17
    1320:	71 09       	sbc	r23, r1
    1322:	17 fd       	sbrc	r17, 7
    1324:	73 95       	inc	r23
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <usart_set_baudrate+0x11e>
    1328:	44 0c       	add	r4, r4
    132a:	55 1c       	adc	r5, r5
    132c:	66 1c       	adc	r6, r6
    132e:	77 1c       	adc	r7, r7
    1330:	6a 95       	dec	r22
    1332:	d2 f7       	brpl	.-12     	; 0x1328 <usart_set_baudrate+0x116>
    1334:	d5 01       	movw	r26, r10
    1336:	c4 01       	movw	r24, r8
    1338:	b6 95       	lsr	r27
    133a:	a7 95       	ror	r26
    133c:	97 95       	ror	r25
    133e:	87 95       	ror	r24
    1340:	bc 01       	movw	r22, r24
    1342:	cd 01       	movw	r24, r26
    1344:	64 0d       	add	r22, r4
    1346:	75 1d       	adc	r23, r5
    1348:	86 1d       	adc	r24, r6
    134a:	97 1d       	adc	r25, r7
    134c:	a5 01       	movw	r20, r10
    134e:	94 01       	movw	r18, r8
    1350:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__udivmodsi4>
    1354:	36 c0       	rjmp	.+108    	; 0x13c2 <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
    1356:	23 e0       	ldi	r18, 0x03	; 3
    1358:	21 0f       	add	r18, r17
    135a:	d5 01       	movw	r26, r10
    135c:	c4 01       	movw	r24, r8
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <usart_set_baudrate+0x156>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	aa 1f       	adc	r26, r26
    1366:	bb 1f       	adc	r27, r27
    1368:	2a 95       	dec	r18
    136a:	d2 f7       	brpl	.-12     	; 0x1360 <usart_set_baudrate+0x14e>
    136c:	9c 01       	movw	r18, r24
    136e:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    1370:	b6 95       	lsr	r27
    1372:	a7 95       	ror	r26
    1374:	97 95       	ror	r25
    1376:	87 95       	ror	r24
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	64 0d       	add	r22, r4
    137e:	75 1d       	adc	r23, r5
    1380:	86 1d       	adc	r24, r6
    1382:	97 1d       	adc	r25, r7
    1384:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__udivmodsi4>
    1388:	1c c0       	rjmp	.+56     	; 0x13c2 <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    138a:	2d 5f       	subi	r18, 0xFD	; 253
    138c:	d5 01       	movw	r26, r10
    138e:	c4 01       	movw	r24, r8
    1390:	04 c0       	rjmp	.+8      	; 0x139a <usart_set_baudrate+0x188>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	aa 1f       	adc	r26, r26
    1398:	bb 1f       	adc	r27, r27
    139a:	2a 95       	dec	r18
    139c:	d2 f7       	brpl	.-12     	; 0x1392 <usart_set_baudrate+0x180>
    139e:	9c 01       	movw	r18, r24
    13a0:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    13a2:	b6 95       	lsr	r27
    13a4:	a7 95       	ror	r26
    13a6:	97 95       	ror	r25
    13a8:	87 95       	ror	r24
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	64 0d       	add	r22, r4
    13b0:	75 1d       	adc	r23, r5
    13b2:	86 1d       	adc	r24, r6
    13b4:	97 1d       	adc	r25, r7
    13b6:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__udivmodsi4>
    13ba:	21 50       	subi	r18, 0x01	; 1
    13bc:	31 09       	sbc	r19, r1
    13be:	41 09       	sbc	r20, r1
    13c0:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    13c2:	83 2f       	mov	r24, r19
    13c4:	8f 70       	andi	r24, 0x0F	; 15
    13c6:	12 95       	swap	r17
    13c8:	10 7f       	andi	r17, 0xF0	; 240
    13ca:	18 2b       	or	r17, r24
    13cc:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    13ce:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	18 c0       	rjmp	.+48     	; 0x1404 <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	16 c0       	rjmp	.+44     	; 0x1404 <usart_set_baudrate+0x1f2>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	14 c0       	rjmp	.+40     	; 0x1404 <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    13dc:	d5 01       	movw	r26, r10
    13de:	c4 01       	movw	r24, r8
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	aa 1f       	adc	r26, r26
    13e6:	bb 1f       	adc	r27, r27
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	aa 1f       	adc	r26, r26
    13ee:	bb 1f       	adc	r27, r27
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	aa 1f       	adc	r26, r26
    13f6:	bb 1f       	adc	r27, r27
    13f8:	48 1a       	sub	r4, r24
    13fa:	59 0a       	sbc	r5, r25
    13fc:	6a 0a       	sbc	r6, r26
    13fe:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1400:	19 ef       	ldi	r17, 0xF9	; 249
    1402:	8b cf       	rjmp	.-234    	; 0x131a <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	1f 91       	pop	r17
    140a:	0f 91       	pop	r16
    140c:	ff 90       	pop	r15
    140e:	ef 90       	pop	r14
    1410:	df 90       	pop	r13
    1412:	cf 90       	pop	r12
    1414:	bf 90       	pop	r11
    1416:	af 90       	pop	r10
    1418:	9f 90       	pop	r9
    141a:	8f 90       	pop	r8
    141c:	7f 90       	pop	r7
    141e:	6f 90       	pop	r6
    1420:	5f 90       	pop	r5
    1422:	4f 90       	pop	r4
    1424:	08 95       	ret

00001426 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	ec 01       	movw	r28, r24
    1430:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	09 f4       	brne	.+2      	; 0x1438 <usart_init_rs232+0x12>
    1436:	be c0       	rjmp	.+380    	; 0x15b4 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1438:	80 3c       	cpi	r24, 0xC0	; 192
    143a:	91 05       	cpc	r25, r1
    143c:	21 f4       	brne	.+8      	; 0x1446 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    143e:	60 e1       	ldi	r22, 0x10	; 16
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	b3 d7       	rcall	.+3942   	; 0x23aa <sysclk_enable_module>
    1444:	b7 c0       	rjmp	.+366    	; 0x15b4 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1446:	c1 15       	cp	r28, r1
    1448:	84 e0       	ldi	r24, 0x04	; 4
    144a:	d8 07       	cpc	r29, r24
    144c:	21 f4       	brne	.+8      	; 0x1456 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    144e:	64 e0       	ldi	r22, 0x04	; 4
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	ab d7       	rcall	.+3926   	; 0x23aa <sysclk_enable_module>
    1454:	af c0       	rjmp	.+350    	; 0x15b4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1456:	c0 38       	cpi	r28, 0x80	; 128
    1458:	e1 e0       	ldi	r30, 0x01	; 1
    145a:	de 07       	cpc	r29, r30
    145c:	21 f4       	brne	.+8      	; 0x1466 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    145e:	62 e0       	ldi	r22, 0x02	; 2
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	a3 d7       	rcall	.+3910   	; 0x23aa <sysclk_enable_module>
    1464:	a7 c0       	rjmp	.+334    	; 0x15b4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1466:	c1 15       	cp	r28, r1
    1468:	f1 e0       	ldi	r31, 0x01	; 1
    146a:	df 07       	cpc	r29, r31
    146c:	21 f4       	brne	.+8      	; 0x1476 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    146e:	61 e0       	ldi	r22, 0x01	; 1
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	9b d7       	rcall	.+3894   	; 0x23aa <sysclk_enable_module>
    1474:	9f c0       	rjmp	.+318    	; 0x15b4 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1476:	c0 38       	cpi	r28, 0x80	; 128
    1478:	83 e0       	ldi	r24, 0x03	; 3
    147a:	d8 07       	cpc	r29, r24
    147c:	21 f4       	brne	.+8      	; 0x1486 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    147e:	61 e0       	ldi	r22, 0x01	; 1
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	93 d7       	rcall	.+3878   	; 0x23aa <sysclk_enable_module>
    1484:	97 c0       	rjmp	.+302    	; 0x15b4 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1486:	c1 15       	cp	r28, r1
    1488:	e2 e0       	ldi	r30, 0x02	; 2
    148a:	de 07       	cpc	r29, r30
    148c:	21 f4       	brne	.+8      	; 0x1496 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    148e:	62 e0       	ldi	r22, 0x02	; 2
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	8b d7       	rcall	.+3862   	; 0x23aa <sysclk_enable_module>
    1494:	8f c0       	rjmp	.+286    	; 0x15b4 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1496:	c0 32       	cpi	r28, 0x20	; 32
    1498:	f3 e0       	ldi	r31, 0x03	; 3
    149a:	df 07       	cpc	r29, r31
    149c:	21 f4       	brne	.+8      	; 0x14a6 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    149e:	64 e0       	ldi	r22, 0x04	; 4
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	83 d7       	rcall	.+3846   	; 0x23aa <sysclk_enable_module>
    14a4:	87 c0       	rjmp	.+270    	; 0x15b4 <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    14a6:	c1 15       	cp	r28, r1
    14a8:	88 e0       	ldi	r24, 0x08	; 8
    14aa:	d8 07       	cpc	r29, r24
    14ac:	21 f4       	brne	.+8      	; 0x14b6 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	7b d7       	rcall	.+3830   	; 0x23aa <sysclk_enable_module>
    14b4:	7f c0       	rjmp	.+254    	; 0x15b4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    14b6:	c1 15       	cp	r28, r1
    14b8:	e9 e0       	ldi	r30, 0x09	; 9
    14ba:	de 07       	cpc	r29, r30
    14bc:	21 f4       	brne	.+8      	; 0x14c6 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    14be:	61 e0       	ldi	r22, 0x01	; 1
    14c0:	84 e0       	ldi	r24, 0x04	; 4
    14c2:	73 d7       	rcall	.+3814   	; 0x23aa <sysclk_enable_module>
    14c4:	77 c0       	rjmp	.+238    	; 0x15b4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    14c6:	c1 15       	cp	r28, r1
    14c8:	fa e0       	ldi	r31, 0x0A	; 10
    14ca:	df 07       	cpc	r29, r31
    14cc:	21 f4       	brne	.+8      	; 0x14d6 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    14ce:	61 e0       	ldi	r22, 0x01	; 1
    14d0:	85 e0       	ldi	r24, 0x05	; 5
    14d2:	6b d7       	rcall	.+3798   	; 0x23aa <sysclk_enable_module>
    14d4:	6f c0       	rjmp	.+222    	; 0x15b4 <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    14d6:	c0 34       	cpi	r28, 0x40	; 64
    14d8:	88 e0       	ldi	r24, 0x08	; 8
    14da:	d8 07       	cpc	r29, r24
    14dc:	21 f4       	brne	.+8      	; 0x14e6 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    14de:	62 e0       	ldi	r22, 0x02	; 2
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	63 d7       	rcall	.+3782   	; 0x23aa <sysclk_enable_module>
    14e4:	67 c0       	rjmp	.+206    	; 0x15b4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    14e6:	c0 34       	cpi	r28, 0x40	; 64
    14e8:	e9 e0       	ldi	r30, 0x09	; 9
    14ea:	de 07       	cpc	r29, r30
    14ec:	21 f4       	brne	.+8      	; 0x14f6 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    14ee:	62 e0       	ldi	r22, 0x02	; 2
    14f0:	84 e0       	ldi	r24, 0x04	; 4
    14f2:	5b d7       	rcall	.+3766   	; 0x23aa <sysclk_enable_module>
    14f4:	5f c0       	rjmp	.+190    	; 0x15b4 <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    14f6:	c0 39       	cpi	r28, 0x90	; 144
    14f8:	f8 e0       	ldi	r31, 0x08	; 8
    14fa:	df 07       	cpc	r29, r31
    14fc:	21 f4       	brne	.+8      	; 0x1506 <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    14fe:	64 e0       	ldi	r22, 0x04	; 4
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	53 d7       	rcall	.+3750   	; 0x23aa <sysclk_enable_module>
    1504:	57 c0       	rjmp	.+174    	; 0x15b4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1506:	c0 39       	cpi	r28, 0x90	; 144
    1508:	89 e0       	ldi	r24, 0x09	; 9
    150a:	d8 07       	cpc	r29, r24
    150c:	21 f4       	brne	.+8      	; 0x1516 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    150e:	64 e0       	ldi	r22, 0x04	; 4
    1510:	84 e0       	ldi	r24, 0x04	; 4
    1512:	4b d7       	rcall	.+3734   	; 0x23aa <sysclk_enable_module>
    1514:	4f c0       	rjmp	.+158    	; 0x15b4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1516:	c0 39       	cpi	r28, 0x90	; 144
    1518:	ea e0       	ldi	r30, 0x0A	; 10
    151a:	de 07       	cpc	r29, r30
    151c:	21 f4       	brne	.+8      	; 0x1526 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    151e:	64 e0       	ldi	r22, 0x04	; 4
    1520:	85 e0       	ldi	r24, 0x05	; 5
    1522:	43 d7       	rcall	.+3718   	; 0x23aa <sysclk_enable_module>
    1524:	47 c0       	rjmp	.+142    	; 0x15b4 <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1526:	c0 3c       	cpi	r28, 0xC0	; 192
    1528:	f8 e0       	ldi	r31, 0x08	; 8
    152a:	df 07       	cpc	r29, r31
    152c:	21 f4       	brne	.+8      	; 0x1536 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    152e:	68 e0       	ldi	r22, 0x08	; 8
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	3b d7       	rcall	.+3702   	; 0x23aa <sysclk_enable_module>
    1534:	3f c0       	rjmp	.+126    	; 0x15b4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1536:	c0 3c       	cpi	r28, 0xC0	; 192
    1538:	89 e0       	ldi	r24, 0x09	; 9
    153a:	d8 07       	cpc	r29, r24
    153c:	21 f4       	brne	.+8      	; 0x1546 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    153e:	68 e0       	ldi	r22, 0x08	; 8
    1540:	84 e0       	ldi	r24, 0x04	; 4
    1542:	33 d7       	rcall	.+3686   	; 0x23aa <sysclk_enable_module>
    1544:	37 c0       	rjmp	.+110    	; 0x15b4 <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1546:	c0 3a       	cpi	r28, 0xA0	; 160
    1548:	e8 e0       	ldi	r30, 0x08	; 8
    154a:	de 07       	cpc	r29, r30
    154c:	21 f4       	brne	.+8      	; 0x1556 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    154e:	60 e1       	ldi	r22, 0x10	; 16
    1550:	83 e0       	ldi	r24, 0x03	; 3
    1552:	2b d7       	rcall	.+3670   	; 0x23aa <sysclk_enable_module>
    1554:	2f c0       	rjmp	.+94     	; 0x15b4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1556:	c0 3a       	cpi	r28, 0xA0	; 160
    1558:	f9 e0       	ldi	r31, 0x09	; 9
    155a:	df 07       	cpc	r29, r31
    155c:	21 f4       	brne	.+8      	; 0x1566 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    155e:	60 e1       	ldi	r22, 0x10	; 16
    1560:	84 e0       	ldi	r24, 0x04	; 4
    1562:	23 d7       	rcall	.+3654   	; 0x23aa <sysclk_enable_module>
    1564:	27 c0       	rjmp	.+78     	; 0x15b4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1566:	c0 3a       	cpi	r28, 0xA0	; 160
    1568:	8a e0       	ldi	r24, 0x0A	; 10
    156a:	d8 07       	cpc	r29, r24
    156c:	21 f4       	brne	.+8      	; 0x1576 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    156e:	60 e1       	ldi	r22, 0x10	; 16
    1570:	85 e0       	ldi	r24, 0x05	; 5
    1572:	1b d7       	rcall	.+3638   	; 0x23aa <sysclk_enable_module>
    1574:	1f c0       	rjmp	.+62     	; 0x15b4 <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1576:	c0 3b       	cpi	r28, 0xB0	; 176
    1578:	e8 e0       	ldi	r30, 0x08	; 8
    157a:	de 07       	cpc	r29, r30
    157c:	21 f4       	brne	.+8      	; 0x1586 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    157e:	60 e2       	ldi	r22, 0x20	; 32
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	13 d7       	rcall	.+3622   	; 0x23aa <sysclk_enable_module>
    1584:	17 c0       	rjmp	.+46     	; 0x15b4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1586:	c0 3b       	cpi	r28, 0xB0	; 176
    1588:	f9 e0       	ldi	r31, 0x09	; 9
    158a:	df 07       	cpc	r29, r31
    158c:	21 f4       	brne	.+8      	; 0x1596 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    158e:	60 e2       	ldi	r22, 0x20	; 32
    1590:	84 e0       	ldi	r24, 0x04	; 4
    1592:	0b d7       	rcall	.+3606   	; 0x23aa <sysclk_enable_module>
    1594:	0f c0       	rjmp	.+30     	; 0x15b4 <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1596:	c0 38       	cpi	r28, 0x80	; 128
    1598:	84 e0       	ldi	r24, 0x04	; 4
    159a:	d8 07       	cpc	r29, r24
    159c:	21 f4       	brne	.+8      	; 0x15a6 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    159e:	60 e4       	ldi	r22, 0x40	; 64
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	03 d7       	rcall	.+3590   	; 0x23aa <sysclk_enable_module>
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    15a6:	c0 3a       	cpi	r28, 0xA0	; 160
    15a8:	e4 e0       	ldi	r30, 0x04	; 4
    15aa:	de 07       	cpc	r29, r30
    15ac:	19 f4       	brne	.+6      	; 0x15b4 <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    15ae:	60 e4       	ldi	r22, 0x40	; 64
    15b0:	85 e0       	ldi	r24, 0x05	; 5
    15b2:	fb d6       	rcall	.+3574   	; 0x23aa <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	8f 73       	andi	r24, 0x3F	; 63
    15b8:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    15ba:	f8 01       	movw	r30, r16
    15bc:	94 81       	ldd	r25, Z+4	; 0x04
    15be:	85 81       	ldd	r24, Z+5	; 0x05
    15c0:	89 2b       	or	r24, r25
    15c2:	96 81       	ldd	r25, Z+6	; 0x06
    15c4:	99 23       	and	r25, r25
    15c6:	11 f0       	breq	.+4      	; 0x15cc <usart_init_rs232+0x1a6>
    15c8:	98 e0       	ldi	r25, 0x08	; 8
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <usart_init_rs232+0x1a8>
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	89 2b       	or	r24, r25
    15d0:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    15d2:	f8 01       	movw	r30, r16
    15d4:	40 81       	ld	r20, Z
    15d6:	51 81       	ldd	r21, Z+1	; 0x01
    15d8:	62 81       	ldd	r22, Z+2	; 0x02
    15da:	73 81       	ldd	r23, Z+3	; 0x03
    15dc:	00 e0       	ldi	r16, 0x00	; 0
    15de:	1c e6       	ldi	r17, 0x6C	; 108
    15e0:	2c ed       	ldi	r18, 0xDC	; 220
    15e2:	32 e0       	ldi	r19, 0x02	; 2
    15e4:	ce 01       	movw	r24, r28
    15e6:	15 de       	rcall	.-982    	; 0x1212 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	98 60       	ori	r25, 0x08	; 8
    15ec:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	90 61       	ori	r25, 0x10	; 16
    15f2:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	08 95       	ret

000015fe <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    15fe:	81 11       	cpse	r24, r1
    1600:	18 c0       	rjmp	.+48     	; 0x1632 <udd_sleep_mode+0x34>
    1602:	90 91 6c 26 	lds	r25, 0x266C
    1606:	99 23       	and	r25, r25
    1608:	89 f0       	breq	.+34     	; 0x162c <udd_sleep_mode+0x2e>
    160a:	9f b7       	in	r25, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	ee e7       	ldi	r30, 0x7E	; 126
    1610:	f6 e2       	ldi	r31, 0x26	; 38
    1612:	20 81       	ld	r18, Z
    1614:	21 50       	subi	r18, 0x01	; 1
    1616:	20 83       	st	Z, r18
    1618:	9f bf       	out	0x3f, r25	; 63
    161a:	08 c0       	rjmp	.+16     	; 0x162c <udd_sleep_mode+0x2e>
    161c:	9f b7       	in	r25, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	ee e7       	ldi	r30, 0x7E	; 126
    1622:	f6 e2       	ldi	r31, 0x26	; 38
    1624:	20 81       	ld	r18, Z
    1626:	2f 5f       	subi	r18, 0xFF	; 255
    1628:	20 83       	st	Z, r18
    162a:	9f bf       	out	0x3f, r25	; 63
    162c:	80 93 6c 26 	sts	0x266C, r24
    1630:	08 95       	ret
    1632:	90 91 6c 26 	lds	r25, 0x266C
    1636:	99 23       	and	r25, r25
    1638:	89 f3       	breq	.-30     	; 0x161c <udd_sleep_mode+0x1e>
    163a:	f8 cf       	rjmp	.-16     	; 0x162c <udd_sleep_mode+0x2e>

0000163c <udd_ctrl_init>:
    163c:	0f 93       	push	r16
    163e:	e8 ec       	ldi	r30, 0xC8	; 200
    1640:	f4 e0       	ldi	r31, 0x04	; 4
    1642:	80 81       	ld	r24, Z
    1644:	8f 7d       	andi	r24, 0xDF	; 223
    1646:	80 83       	st	Z, r24
    1648:	80 81       	ld	r24, Z
    164a:	8f 7d       	andi	r24, 0xDF	; 223
    164c:	80 83       	st	Z, r24
    164e:	e0 e4       	ldi	r30, 0x40	; 64
    1650:	f6 e2       	ldi	r31, 0x26	; 38
    1652:	02 e0       	ldi	r16, 0x02	; 2
    1654:	05 93       	las	Z, r16
    1656:	10 92 42 26 	sts	0x2642, r1
    165a:	10 92 43 26 	sts	0x2643, r1
    165e:	00 e2       	ldi	r16, 0x20	; 32
    1660:	06 93       	lac	Z, r16
    1662:	00 e4       	ldi	r16, 0x40	; 64
    1664:	06 93       	lac	Z, r16
    1666:	e8 e3       	ldi	r30, 0x38	; 56
    1668:	f6 e2       	ldi	r31, 0x26	; 38
    166a:	00 e2       	ldi	r16, 0x20	; 32
    166c:	06 93       	lac	Z, r16
    166e:	00 e4       	ldi	r16, 0x40	; 64
    1670:	06 93       	lac	Z, r16
    1672:	10 92 79 26 	sts	0x2679, r1
    1676:	10 92 7a 26 	sts	0x267A, r1
    167a:	10 92 7b 26 	sts	0x267B, r1
    167e:	10 92 7c 26 	sts	0x267C, r1
    1682:	10 92 77 26 	sts	0x2677, r1
    1686:	10 92 78 26 	sts	0x2678, r1
    168a:	10 92 28 26 	sts	0x2628, r1
    168e:	0f 91       	pop	r16
    1690:	08 95       	ret

00001692 <udd_ctrl_stall_data>:
    1692:	0f 93       	push	r16
    1694:	85 e0       	ldi	r24, 0x05	; 5
    1696:	80 93 28 26 	sts	0x2628, r24
    169a:	e1 e4       	ldi	r30, 0x41	; 65
    169c:	f6 e2       	ldi	r31, 0x26	; 38
    169e:	04 e0       	ldi	r16, 0x04	; 4
    16a0:	05 93       	las	Z, r16
    16a2:	e9 e3       	ldi	r30, 0x39	; 57
    16a4:	f6 e2       	ldi	r31, 0x26	; 38
    16a6:	04 e0       	ldi	r16, 0x04	; 4
    16a8:	05 93       	las	Z, r16
    16aa:	0f 91       	pop	r16
    16ac:	08 95       	ret

000016ae <udd_ctrl_send_zlp_in>:
    16ae:	0f 93       	push	r16
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	80 93 28 26 	sts	0x2628, r24
    16b6:	10 92 42 26 	sts	0x2642, r1
    16ba:	10 92 43 26 	sts	0x2643, r1
    16be:	e0 e4       	ldi	r30, 0x40	; 64
    16c0:	f6 e2       	ldi	r31, 0x26	; 38
    16c2:	02 e0       	ldi	r16, 0x02	; 2
    16c4:	06 93       	lac	Z, r16
    16c6:	0f 91       	pop	r16
    16c8:	08 95       	ret

000016ca <udd_ctrl_endofrequest>:
    16ca:	e0 91 79 26 	lds	r30, 0x2679
    16ce:	f0 91 7a 26 	lds	r31, 0x267A
    16d2:	30 97       	sbiw	r30, 0x00	; 0
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <udd_ctrl_endofrequest+0xe>
    16d6:	09 95       	icall
    16d8:	08 95       	ret

000016da <udd_ctrl_in_sent>:
    16da:	0f 93       	push	r16
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	80 91 28 26 	lds	r24, 0x2628
    16e4:	83 30       	cpi	r24, 0x03	; 3
    16e6:	19 f4       	brne	.+6      	; 0x16ee <udd_ctrl_in_sent+0x14>
    16e8:	f0 df       	rcall	.-32     	; 0x16ca <udd_ctrl_endofrequest>
    16ea:	a8 df       	rcall	.-176    	; 0x163c <udd_ctrl_init>
    16ec:	60 c0       	rjmp	.+192    	; 0x17ae <udd_ctrl_in_sent+0xd4>
    16ee:	80 91 24 26 	lds	r24, 0x2624
    16f2:	90 91 25 26 	lds	r25, 0x2625
    16f6:	c0 91 77 26 	lds	r28, 0x2677
    16fa:	d0 91 78 26 	lds	r29, 0x2678
    16fe:	c8 1b       	sub	r28, r24
    1700:	d9 0b       	sbc	r29, r25
    1702:	71 f5       	brne	.+92     	; 0x1760 <udd_ctrl_in_sent+0x86>
    1704:	20 91 26 26 	lds	r18, 0x2626
    1708:	30 91 27 26 	lds	r19, 0x2627
    170c:	82 0f       	add	r24, r18
    170e:	93 1f       	adc	r25, r19
    1710:	80 93 26 26 	sts	0x2626, r24
    1714:	90 93 27 26 	sts	0x2627, r25
    1718:	20 91 73 26 	lds	r18, 0x2673
    171c:	30 91 74 26 	lds	r19, 0x2674
    1720:	82 17       	cp	r24, r18
    1722:	93 07       	cpc	r25, r19
    1724:	21 f0       	breq	.+8      	; 0x172e <udd_ctrl_in_sent+0x54>
    1726:	80 91 3f 25 	lds	r24, 0x253F
    172a:	88 23       	and	r24, r24
    172c:	41 f0       	breq	.+16     	; 0x173e <udd_ctrl_in_sent+0x64>
    172e:	84 e0       	ldi	r24, 0x04	; 4
    1730:	80 93 28 26 	sts	0x2628, r24
    1734:	e8 e3       	ldi	r30, 0x38	; 56
    1736:	f6 e2       	ldi	r31, 0x26	; 38
    1738:	02 e0       	ldi	r16, 0x02	; 2
    173a:	06 93       	lac	Z, r16
    173c:	38 c0       	rjmp	.+112    	; 0x17ae <udd_ctrl_in_sent+0xd4>
    173e:	e0 91 7b 26 	lds	r30, 0x267B
    1742:	f0 91 7c 26 	lds	r31, 0x267C
    1746:	30 97       	sbiw	r30, 0x00	; 0
    1748:	99 f0       	breq	.+38     	; 0x1770 <udd_ctrl_in_sent+0x96>
    174a:	09 95       	icall
    174c:	88 23       	and	r24, r24
    174e:	81 f0       	breq	.+32     	; 0x1770 <udd_ctrl_in_sent+0x96>
    1750:	10 92 24 26 	sts	0x2624, r1
    1754:	10 92 25 26 	sts	0x2625, r1
    1758:	c0 91 77 26 	lds	r28, 0x2677
    175c:	d0 91 78 26 	lds	r29, 0x2678
    1760:	c0 34       	cpi	r28, 0x40	; 64
    1762:	d1 05       	cpc	r29, r1
    1764:	28 f0       	brcs	.+10     	; 0x1770 <udd_ctrl_in_sent+0x96>
    1766:	10 92 3f 25 	sts	0x253F, r1
    176a:	c0 e4       	ldi	r28, 0x40	; 64
    176c:	d0 e0       	ldi	r29, 0x00	; 0
    176e:	03 c0       	rjmp	.+6      	; 0x1776 <udd_ctrl_in_sent+0x9c>
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	80 93 3f 25 	sts	0x253F, r24
    1776:	c0 93 42 26 	sts	0x2642, r28
    177a:	d0 93 43 26 	sts	0x2643, r29
    177e:	80 91 24 26 	lds	r24, 0x2624
    1782:	90 91 25 26 	lds	r25, 0x2625
    1786:	20 91 75 26 	lds	r18, 0x2675
    178a:	30 91 76 26 	lds	r19, 0x2676
    178e:	28 0f       	add	r18, r24
    1790:	39 1f       	adc	r19, r25
    1792:	20 93 44 26 	sts	0x2644, r18
    1796:	30 93 45 26 	sts	0x2645, r19
    179a:	c8 0f       	add	r28, r24
    179c:	d9 1f       	adc	r29, r25
    179e:	c0 93 24 26 	sts	0x2624, r28
    17a2:	d0 93 25 26 	sts	0x2625, r29
    17a6:	e0 e4       	ldi	r30, 0x40	; 64
    17a8:	f6 e2       	ldi	r31, 0x26	; 38
    17aa:	02 e0       	ldi	r16, 0x02	; 2
    17ac:	06 93       	lac	Z, r16
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	0f 91       	pop	r16
    17b4:	08 95       	ret

000017b6 <udd_ep_get_size>:
    17b6:	fc 01       	movw	r30, r24
    17b8:	81 81       	ldd	r24, Z+1	; 0x01
    17ba:	87 70       	andi	r24, 0x07	; 7
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	fc 01       	movw	r30, r24
    17c0:	31 97       	sbiw	r30, 0x01	; 1
    17c2:	e7 30       	cpi	r30, 0x07	; 7
    17c4:	f1 05       	cpc	r31, r1
    17c6:	20 f4       	brcc	.+8      	; 0x17d0 <udd_ep_get_size+0x1a>
    17c8:	e2 50       	subi	r30, 0x02	; 2
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__tablejump2__>
    17d0:	88 e0       	ldi	r24, 0x08	; 8
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	08 95       	ret
    17d6:	80 e2       	ldi	r24, 0x20	; 32
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	08 95       	ret
    17dc:	80 e4       	ldi	r24, 0x40	; 64
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	08 95       	ret
    17e2:	80 e8       	ldi	r24, 0x80	; 128
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	08 95       	ret
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	08 95       	ret
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	92 e0       	ldi	r25, 0x02	; 2
    17f2:	08 95       	ret
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
    17f6:	93 e0       	ldi	r25, 0x03	; 3
    17f8:	08 95       	ret
    17fa:	80 e1       	ldi	r24, 0x10	; 16
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	08 95       	ret

00001800 <udd_ep_get_job>:
    1800:	28 2f       	mov	r18, r24
    1802:	2f 70       	andi	r18, 0x0F	; 15
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	99 27       	eor	r25, r25
    180c:	87 fd       	sbrc	r24, 7
    180e:	90 95       	com	r25
    1810:	88 27       	eor	r24, r24
    1812:	99 0f       	add	r25, r25
    1814:	88 1f       	adc	r24, r24
    1816:	99 27       	eor	r25, r25
    1818:	82 0f       	add	r24, r18
    181a:	93 1f       	adc	r25, r19
    181c:	02 97       	sbiw	r24, 0x02	; 2
    181e:	9c 01       	movw	r18, r24
    1820:	22 0f       	add	r18, r18
    1822:	33 1f       	adc	r19, r19
    1824:	22 0f       	add	r18, r18
    1826:	33 1f       	adc	r19, r19
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	82 0f       	add	r24, r18
    182e:	93 1f       	adc	r25, r19
    1830:	80 54       	subi	r24, 0x40	; 64
    1832:	9a 4d       	sbci	r25, 0xDA	; 218
    1834:	08 95       	ret

00001836 <udd_ctrl_interrupt_tc_setup>:
    1836:	0f 93       	push	r16
    1838:	cf 93       	push	r28
    183a:	80 91 cc 04 	lds	r24, 0x04CC
    183e:	80 ff       	sbrs	r24, 0
    1840:	62 c0       	rjmp	.+196    	; 0x1906 <udd_ctrl_interrupt_tc_setup+0xd0>
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	80 93 cc 04 	sts	0x04CC, r24
    1848:	e8 e3       	ldi	r30, 0x38	; 56
    184a:	f6 e2       	ldi	r31, 0x26	; 38
    184c:	00 e8       	ldi	r16, 0x80	; 128
    184e:	06 93       	lac	Z, r16
    1850:	e0 e4       	ldi	r30, 0x40	; 64
    1852:	f6 e2       	ldi	r31, 0x26	; 38
    1854:	00 e8       	ldi	r16, 0x80	; 128
    1856:	06 93       	lac	Z, r16
    1858:	80 93 ca 04 	sts	0x04CA, r24
    185c:	e8 e3       	ldi	r30, 0x38	; 56
    185e:	f6 e2       	ldi	r31, 0x26	; 38
    1860:	00 e1       	ldi	r16, 0x10	; 16
    1862:	06 93       	lac	Z, r16
    1864:	80 91 28 26 	lds	r24, 0x2628
    1868:	88 23       	and	r24, r24
    186a:	29 f0       	breq	.+10     	; 0x1876 <udd_ctrl_interrupt_tc_setup+0x40>
    186c:	83 50       	subi	r24, 0x03	; 3
    186e:	82 30       	cpi	r24, 0x02	; 2
    1870:	08 f4       	brcc	.+2      	; 0x1874 <udd_ctrl_interrupt_tc_setup+0x3e>
    1872:	2b df       	rcall	.-426    	; 0x16ca <udd_ctrl_endofrequest>
    1874:	e3 de       	rcall	.-570    	; 0x163c <udd_ctrl_init>
    1876:	80 91 3a 26 	lds	r24, 0x263A
    187a:	90 91 3b 26 	lds	r25, 0x263B
    187e:	08 97       	sbiw	r24, 0x08	; 8
    1880:	09 f0       	breq	.+2      	; 0x1884 <udd_ctrl_interrupt_tc_setup+0x4e>
    1882:	43 c0       	rjmp	.+134    	; 0x190a <udd_ctrl_interrupt_tc_setup+0xd4>
    1884:	88 e0       	ldi	r24, 0x08	; 8
    1886:	e4 ee       	ldi	r30, 0xE4	; 228
    1888:	f5 e2       	ldi	r31, 0x25	; 37
    188a:	ad e6       	ldi	r26, 0x6D	; 109
    188c:	b6 e2       	ldi	r27, 0x26	; 38
    188e:	01 90       	ld	r0, Z+
    1890:	0d 92       	st	X+, r0
    1892:	8a 95       	dec	r24
    1894:	e1 f7       	brne	.-8      	; 0x188e <udd_ctrl_interrupt_tc_setup+0x58>
    1896:	e8 ec       	ldi	r30, 0xC8	; 200
    1898:	f4 e0       	ldi	r31, 0x04	; 4
    189a:	80 81       	ld	r24, Z
    189c:	80 62       	ori	r24, 0x20	; 32
    189e:	80 83       	st	Z, r24
    18a0:	80 81       	ld	r24, Z
    18a2:	80 62       	ori	r24, 0x20	; 32
    18a4:	80 83       	st	Z, r24
    18a6:	0c d9       	rcall	.-3560   	; 0xac0 <udc_process_setup>
    18a8:	c8 2f       	mov	r28, r24
    18aa:	81 11       	cpse	r24, r1
    18ac:	03 c0       	rjmp	.+6      	; 0x18b4 <udd_ctrl_interrupt_tc_setup+0x7e>
    18ae:	f1 de       	rcall	.-542    	; 0x1692 <udd_ctrl_stall_data>
    18b0:	c1 e0       	ldi	r28, 0x01	; 1
    18b2:	2c c0       	rjmp	.+88     	; 0x190c <udd_ctrl_interrupt_tc_setup+0xd6>
    18b4:	80 91 6d 26 	lds	r24, 0x266D
    18b8:	88 23       	and	r24, r24
    18ba:	6c f4       	brge	.+26     	; 0x18d6 <udd_ctrl_interrupt_tc_setup+0xa0>
    18bc:	10 92 26 26 	sts	0x2626, r1
    18c0:	10 92 27 26 	sts	0x2627, r1
    18c4:	10 92 24 26 	sts	0x2624, r1
    18c8:	10 92 25 26 	sts	0x2625, r1
    18cc:	82 e0       	ldi	r24, 0x02	; 2
    18ce:	80 93 28 26 	sts	0x2628, r24
    18d2:	03 df       	rcall	.-506    	; 0x16da <udd_ctrl_in_sent>
    18d4:	1b c0       	rjmp	.+54     	; 0x190c <udd_ctrl_interrupt_tc_setup+0xd6>
    18d6:	20 91 73 26 	lds	r18, 0x2673
    18da:	30 91 74 26 	lds	r19, 0x2674
    18de:	23 2b       	or	r18, r19
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <udd_ctrl_interrupt_tc_setup+0xb0>
    18e2:	e5 de       	rcall	.-566    	; 0x16ae <udd_ctrl_send_zlp_in>
    18e4:	13 c0       	rjmp	.+38     	; 0x190c <udd_ctrl_interrupt_tc_setup+0xd6>
    18e6:	10 92 26 26 	sts	0x2626, r1
    18ea:	10 92 27 26 	sts	0x2627, r1
    18ee:	10 92 24 26 	sts	0x2624, r1
    18f2:	10 92 25 26 	sts	0x2625, r1
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	80 93 28 26 	sts	0x2628, r24
    18fc:	e8 e3       	ldi	r30, 0x38	; 56
    18fe:	f6 e2       	ldi	r31, 0x26	; 38
    1900:	02 e0       	ldi	r16, 0x02	; 2
    1902:	06 93       	lac	Z, r16
    1904:	03 c0       	rjmp	.+6      	; 0x190c <udd_ctrl_interrupt_tc_setup+0xd6>
    1906:	c0 e0       	ldi	r28, 0x00	; 0
    1908:	01 c0       	rjmp	.+2      	; 0x190c <udd_ctrl_interrupt_tc_setup+0xd6>
    190a:	c1 e0       	ldi	r28, 0x01	; 1
    190c:	8c 2f       	mov	r24, r28
    190e:	cf 91       	pop	r28
    1910:	0f 91       	pop	r16
    1912:	08 95       	ret

00001914 <udd_ep_trans_complet>:
    1914:	bf 92       	push	r11
    1916:	cf 92       	push	r12
    1918:	df 92       	push	r13
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	b8 2e       	mov	r11, r24
    1928:	6b df       	rcall	.-298    	; 0x1800 <udd_ep_get_job>
    192a:	ec 01       	movw	r28, r24
    192c:	1b 2d       	mov	r17, r11
    192e:	11 1f       	adc	r17, r17
    1930:	11 27       	eor	r17, r17
    1932:	11 1f       	adc	r17, r17
    1934:	8b 2d       	mov	r24, r11
    1936:	8f 70       	andi	r24, 0x0F	; 15
    1938:	e8 2e       	mov	r14, r24
    193a:	f1 2c       	mov	r15, r1
    193c:	ee 0c       	add	r14, r14
    193e:	ff 1c       	adc	r15, r15
    1940:	e1 0e       	add	r14, r17
    1942:	f1 1c       	adc	r15, r1
    1944:	c7 01       	movw	r24, r14
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	9c 01       	movw	r18, r24
    1954:	28 5c       	subi	r18, 0xC8	; 200
    1956:	39 4d       	sbci	r19, 0xD9	; 217
    1958:	79 01       	movw	r14, r18
    195a:	c9 01       	movw	r24, r18
    195c:	2c df       	rcall	.-424    	; 0x17b6 <udd_ep_get_size>
    195e:	6c 01       	movw	r12, r24
    1960:	11 23       	and	r17, r17
    1962:	09 f4       	brne	.+2      	; 0x1966 <udd_ep_trans_complet+0x52>
    1964:	5b c0       	rjmp	.+182    	; 0x1a1c <udd_ep_trans_complet+0x108>
    1966:	d7 01       	movw	r26, r14
    1968:	16 96       	adiw	r26, 0x06	; 6
    196a:	2d 91       	ld	r18, X+
    196c:	3c 91       	ld	r19, X
    196e:	17 97       	sbiw	r26, 0x07	; 7
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	9e 81       	ldd	r25, Y+6	; 0x06
    1974:	28 0f       	add	r18, r24
    1976:	39 1f       	adc	r19, r25
    1978:	2d 83       	std	Y+5, r18	; 0x05
    197a:	3e 83       	std	Y+6, r19	; 0x06
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	28 17       	cp	r18, r24
    1982:	39 07       	cpc	r19, r25
    1984:	c9 f1       	breq	.+114    	; 0x19f8 <udd_ep_trans_complet+0xe4>
    1986:	fc 01       	movw	r30, r24
    1988:	e2 1b       	sub	r30, r18
    198a:	f3 0b       	sbc	r31, r19
    198c:	9f 01       	movw	r18, r30
    198e:	21 15       	cp	r18, r1
    1990:	f4 e0       	ldi	r31, 0x04	; 4
    1992:	3f 07       	cpc	r19, r31
    1994:	40 f0       	brcs	.+16     	; 0x19a6 <udd_ep_trans_complet+0x92>
    1996:	2f ef       	ldi	r18, 0xFF	; 255
    1998:	33 e0       	ldi	r19, 0x03	; 3
    199a:	c9 01       	movw	r24, r18
    199c:	b6 01       	movw	r22, r12
    199e:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodhi4>
    19a2:	28 1b       	sub	r18, r24
    19a4:	39 0b       	sbc	r19, r25
    19a6:	88 81       	ld	r24, Y
    19a8:	81 ff       	sbrs	r24, 1
    19aa:	0a c0       	rjmp	.+20     	; 0x19c0 <udd_ep_trans_complet+0xac>
    19ac:	c9 01       	movw	r24, r18
    19ae:	b6 01       	movw	r22, r12
    19b0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodhi4>
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	89 2b       	or	r24, r25
    19b8:	09 f0       	breq	.+2      	; 0x19bc <udd_ep_trans_complet+0xa8>
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	94 2f       	mov	r25, r20
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <udd_ep_trans_complet+0xae>
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	88 81       	ld	r24, Y
    19c4:	90 fb       	bst	r25, 0
    19c6:	81 f9       	bld	r24, 1
    19c8:	88 83       	st	Y, r24
    19ca:	d7 01       	movw	r26, r14
    19cc:	16 96       	adiw	r26, 0x06	; 6
    19ce:	1d 92       	st	X+, r1
    19d0:	1c 92       	st	X, r1
    19d2:	17 97       	sbiw	r26, 0x07	; 7
    19d4:	12 96       	adiw	r26, 0x02	; 2
    19d6:	2d 93       	st	X+, r18
    19d8:	3c 93       	st	X, r19
    19da:	13 97       	sbiw	r26, 0x03	; 3
    19dc:	29 81       	ldd	r18, Y+1	; 0x01
    19de:	3a 81       	ldd	r19, Y+2	; 0x02
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	82 0f       	add	r24, r18
    19e6:	93 1f       	adc	r25, r19
    19e8:	14 96       	adiw	r26, 0x04	; 4
    19ea:	8d 93       	st	X+, r24
    19ec:	9c 93       	st	X, r25
    19ee:	15 97       	sbiw	r26, 0x05	; 5
    19f0:	f7 01       	movw	r30, r14
    19f2:	02 e0       	ldi	r16, 0x02	; 2
    19f4:	06 93       	lac	Z, r16
    19f6:	98 c0       	rjmp	.+304    	; 0x1b28 <udd_ep_trans_complet+0x214>
    19f8:	88 81       	ld	r24, Y
    19fa:	81 ff       	sbrs	r24, 1
    19fc:	87 c0       	rjmp	.+270    	; 0x1b0c <udd_ep_trans_complet+0x1f8>
    19fe:	8d 7f       	andi	r24, 0xFD	; 253
    1a00:	88 83       	st	Y, r24
    1a02:	d7 01       	movw	r26, r14
    1a04:	16 96       	adiw	r26, 0x06	; 6
    1a06:	1d 92       	st	X+, r1
    1a08:	1c 92       	st	X, r1
    1a0a:	17 97       	sbiw	r26, 0x07	; 7
    1a0c:	12 96       	adiw	r26, 0x02	; 2
    1a0e:	1d 92       	st	X+, r1
    1a10:	1c 92       	st	X, r1
    1a12:	13 97       	sbiw	r26, 0x03	; 3
    1a14:	f7 01       	movw	r30, r14
    1a16:	02 e0       	ldi	r16, 0x02	; 2
    1a18:	06 93       	lac	Z, r16
    1a1a:	86 c0       	rjmp	.+268    	; 0x1b28 <udd_ep_trans_complet+0x214>
    1a1c:	d7 01       	movw	r26, r14
    1a1e:	12 96       	adiw	r26, 0x02	; 2
    1a20:	0d 91       	ld	r16, X+
    1a22:	1c 91       	ld	r17, X
    1a24:	13 97       	sbiw	r26, 0x03	; 3
    1a26:	88 81       	ld	r24, Y
    1a28:	82 ff       	sbrs	r24, 2
    1a2a:	15 c0       	rjmp	.+42     	; 0x1a56 <udd_ep_trans_complet+0x142>
    1a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a30:	2d 81       	ldd	r18, Y+5	; 0x05
    1a32:	3e 81       	ldd	r19, Y+6	; 0x06
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	b6 01       	movw	r22, r12
    1a3a:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodhi4>
    1a3e:	b0 e4       	ldi	r27, 0x40	; 64
    1a40:	bb 9e       	mul	r11, r27
    1a42:	b0 01       	movw	r22, r0
    1a44:	11 24       	eor	r1, r1
    1a46:	60 50       	subi	r22, 0x00	; 0
    1a48:	7b 4d       	sbci	r23, 0xDB	; 219
    1a4a:	ac 01       	movw	r20, r24
    1a4c:	cf 01       	movw	r24, r30
    1a4e:	82 0f       	add	r24, r18
    1a50:	93 1f       	adc	r25, r19
    1a52:	0e 94 19 18 	call	0x3032	; 0x3032 <memcpy>
    1a56:	2d 81       	ldd	r18, Y+5	; 0x05
    1a58:	3e 81       	ldd	r19, Y+6	; 0x06
    1a5a:	20 0f       	add	r18, r16
    1a5c:	31 1f       	adc	r19, r17
    1a5e:	2d 83       	std	Y+5, r18	; 0x05
    1a60:	3e 83       	std	Y+6, r19	; 0x06
    1a62:	eb 81       	ldd	r30, Y+3	; 0x03
    1a64:	fc 81       	ldd	r31, Y+4	; 0x04
    1a66:	e2 17       	cp	r30, r18
    1a68:	f3 07       	cpc	r31, r19
    1a6a:	10 f4       	brcc	.+4      	; 0x1a70 <udd_ep_trans_complet+0x15c>
    1a6c:	ed 83       	std	Y+5, r30	; 0x05
    1a6e:	fe 83       	std	Y+6, r31	; 0x06
    1a70:	d7 01       	movw	r26, r14
    1a72:	16 96       	adiw	r26, 0x06	; 6
    1a74:	8d 91       	ld	r24, X+
    1a76:	9c 91       	ld	r25, X
    1a78:	17 97       	sbiw	r26, 0x07	; 7
    1a7a:	80 17       	cp	r24, r16
    1a7c:	91 07       	cpc	r25, r17
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <udd_ep_trans_complet+0x16e>
    1a80:	45 c0       	rjmp	.+138    	; 0x1b0c <udd_ep_trans_complet+0x1f8>
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	e8 17       	cp	r30, r24
    1a88:	f9 07       	cpc	r31, r25
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <udd_ep_trans_complet+0x17a>
    1a8c:	3f c0       	rjmp	.+126    	; 0x1b0c <udd_ep_trans_complet+0x1f8>
    1a8e:	e8 1b       	sub	r30, r24
    1a90:	f9 0b       	sbc	r31, r25
    1a92:	e1 15       	cp	r30, r1
    1a94:	b4 e0       	ldi	r27, 0x04	; 4
    1a96:	fb 07       	cpc	r31, r27
    1a98:	48 f0       	brcs	.+18     	; 0x1aac <udd_ep_trans_complet+0x198>
    1a9a:	ef ef       	ldi	r30, 0xFF	; 255
    1a9c:	f3 e0       	ldi	r31, 0x03	; 3
    1a9e:	cf 01       	movw	r24, r30
    1aa0:	b6 01       	movw	r22, r12
    1aa2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodhi4>
    1aa6:	e8 1b       	sub	r30, r24
    1aa8:	f9 0b       	sbc	r31, r25
    1aaa:	06 c0       	rjmp	.+12     	; 0x1ab8 <udd_ep_trans_complet+0x1a4>
    1aac:	cf 01       	movw	r24, r30
    1aae:	b6 01       	movw	r22, r12
    1ab0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodhi4>
    1ab4:	e8 1b       	sub	r30, r24
    1ab6:	f9 0b       	sbc	r31, r25
    1ab8:	d7 01       	movw	r26, r14
    1aba:	12 96       	adiw	r26, 0x02	; 2
    1abc:	1d 92       	st	X+, r1
    1abe:	1c 92       	st	X, r1
    1ac0:	13 97       	sbiw	r26, 0x03	; 3
    1ac2:	ec 15       	cp	r30, r12
    1ac4:	fd 05       	cpc	r31, r13
    1ac6:	78 f4       	brcc	.+30     	; 0x1ae6 <udd_ep_trans_complet+0x1d2>
    1ac8:	88 81       	ld	r24, Y
    1aca:	84 60       	ori	r24, 0x04	; 4
    1acc:	88 83       	st	Y, r24
    1ace:	b0 e4       	ldi	r27, 0x40	; 64
    1ad0:	bb 9e       	mul	r11, r27
    1ad2:	c0 01       	movw	r24, r0
    1ad4:	11 24       	eor	r1, r1
    1ad6:	80 50       	subi	r24, 0x00	; 0
    1ad8:	9b 4d       	sbci	r25, 0xDB	; 219
    1ada:	f7 01       	movw	r30, r14
    1adc:	84 83       	std	Z+4, r24	; 0x04
    1ade:	95 83       	std	Z+5, r25	; 0x05
    1ae0:	c6 82       	std	Z+6, r12	; 0x06
    1ae2:	d7 82       	std	Z+7, r13	; 0x07
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <udd_ep_trans_complet+0x1f0>
    1ae6:	29 81       	ldd	r18, Y+1	; 0x01
    1ae8:	3a 81       	ldd	r19, Y+2	; 0x02
    1aea:	8d 81       	ldd	r24, Y+5	; 0x05
    1aec:	9e 81       	ldd	r25, Y+6	; 0x06
    1aee:	82 0f       	add	r24, r18
    1af0:	93 1f       	adc	r25, r19
    1af2:	d7 01       	movw	r26, r14
    1af4:	14 96       	adiw	r26, 0x04	; 4
    1af6:	8d 93       	st	X+, r24
    1af8:	9c 93       	st	X, r25
    1afa:	15 97       	sbiw	r26, 0x05	; 5
    1afc:	16 96       	adiw	r26, 0x06	; 6
    1afe:	ed 93       	st	X+, r30
    1b00:	fc 93       	st	X, r31
    1b02:	17 97       	sbiw	r26, 0x07	; 7
    1b04:	f7 01       	movw	r30, r14
    1b06:	02 e0       	ldi	r16, 0x02	; 2
    1b08:	06 93       	lac	Z, r16
    1b0a:	0e c0       	rjmp	.+28     	; 0x1b28 <udd_ep_trans_complet+0x214>
    1b0c:	88 81       	ld	r24, Y
    1b0e:	80 ff       	sbrs	r24, 0
    1b10:	0b c0       	rjmp	.+22     	; 0x1b28 <udd_ep_trans_complet+0x214>
    1b12:	8e 7f       	andi	r24, 0xFE	; 254
    1b14:	88 83       	st	Y, r24
    1b16:	ef 81       	ldd	r30, Y+7	; 0x07
    1b18:	f8 85       	ldd	r31, Y+8	; 0x08
    1b1a:	30 97       	sbiw	r30, 0x00	; 0
    1b1c:	29 f0       	breq	.+10     	; 0x1b28 <udd_ep_trans_complet+0x214>
    1b1e:	6d 81       	ldd	r22, Y+5	; 0x05
    1b20:	7e 81       	ldd	r23, Y+6	; 0x06
    1b22:	4b 2d       	mov	r20, r11
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	09 95       	icall
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	df 90       	pop	r13
    1b36:	cf 90       	pop	r12
    1b38:	bf 90       	pop	r11
    1b3a:	08 95       	ret

00001b3c <udd_attach>:
    1b3c:	cf 93       	push	r28
    1b3e:	cf b7       	in	r28, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	5c dd       	rcall	.-1352   	; 0x15fe <udd_sleep_mode>
    1b46:	ea ec       	ldi	r30, 0xCA	; 202
    1b48:	f4 e0       	ldi	r31, 0x04	; 4
    1b4a:	80 e4       	ldi	r24, 0x40	; 64
    1b4c:	80 83       	st	Z, r24
    1b4e:	80 e2       	ldi	r24, 0x20	; 32
    1b50:	80 83       	st	Z, r24
    1b52:	e1 ec       	ldi	r30, 0xC1	; 193
    1b54:	f4 e0       	ldi	r31, 0x04	; 4
    1b56:	80 81       	ld	r24, Z
    1b58:	81 60       	ori	r24, 0x01	; 1
    1b5a:	80 83       	st	Z, r24
    1b5c:	a9 ec       	ldi	r26, 0xC9	; 201
    1b5e:	b4 e0       	ldi	r27, 0x04	; 4
    1b60:	8c 91       	ld	r24, X
    1b62:	82 60       	ori	r24, 0x02	; 2
    1b64:	8c 93       	st	X, r24
    1b66:	e8 ec       	ldi	r30, 0xC8	; 200
    1b68:	f4 e0       	ldi	r31, 0x04	; 4
    1b6a:	80 81       	ld	r24, Z
    1b6c:	80 64       	ori	r24, 0x40	; 64
    1b6e:	80 83       	st	Z, r24
    1b70:	8c 91       	ld	r24, X
    1b72:	81 60       	ori	r24, 0x01	; 1
    1b74:	8c 93       	st	X, r24
    1b76:	80 81       	ld	r24, Z
    1b78:	80 68       	ori	r24, 0x80	; 128
    1b7a:	80 83       	st	Z, r24
    1b7c:	cf bf       	out	0x3f, r28	; 63
    1b7e:	cf 91       	pop	r28
    1b80:	08 95       	ret

00001b82 <udd_enable>:
    1b82:	cf 93       	push	r28
    1b84:	80 e3       	ldi	r24, 0x30	; 48
    1b86:	1d d4       	rcall	.+2106   	; 0x23c2 <sysclk_enable_usb>
    1b88:	e0 ec       	ldi	r30, 0xC0	; 192
    1b8a:	f4 e0       	ldi	r31, 0x04	; 4
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 64       	ori	r24, 0x40	; 64
    1b90:	80 83       	st	Z, r24
    1b92:	cf b7       	in	r28, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	10 92 39 26 	sts	0x2639, r1
    1b9a:	10 92 41 26 	sts	0x2641, r1
    1b9e:	10 92 49 26 	sts	0x2649, r1
    1ba2:	10 92 51 26 	sts	0x2651, r1
    1ba6:	10 92 59 26 	sts	0x2659, r1
    1baa:	10 92 61 26 	sts	0x2661, r1
    1bae:	e0 ec       	ldi	r30, 0xC0	; 192
    1bb0:	f5 e2       	ldi	r31, 0x25	; 37
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8e 7f       	andi	r24, 0xFE	; 254
    1bb6:	80 83       	st	Z, r24
    1bb8:	e9 ec       	ldi	r30, 0xC9	; 201
    1bba:	f5 e2       	ldi	r31, 0x25	; 37
    1bbc:	80 81       	ld	r24, Z
    1bbe:	8e 7f       	andi	r24, 0xFE	; 254
    1bc0:	80 83       	st	Z, r24
    1bc2:	e2 ed       	ldi	r30, 0xD2	; 210
    1bc4:	f5 e2       	ldi	r31, 0x25	; 37
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8e 7f       	andi	r24, 0xFE	; 254
    1bca:	80 83       	st	Z, r24
    1bcc:	eb ed       	ldi	r30, 0xDB	; 219
    1bce:	f5 e2       	ldi	r31, 0x25	; 37
    1bd0:	80 81       	ld	r24, Z
    1bd2:	8e 7f       	andi	r24, 0xFE	; 254
    1bd4:	80 83       	st	Z, r24
    1bd6:	6a e1       	ldi	r22, 0x1A	; 26
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	82 e0       	ldi	r24, 0x02	; 2
    1bdc:	ea d4       	rcall	.+2516   	; 0x25b2 <nvm_read_byte>
    1bde:	8f 3f       	cpi	r24, 0xFF	; 255
    1be0:	19 f0       	breq	.+6      	; 0x1be8 <udd_enable+0x66>
    1be2:	80 93 fa 04 	sts	0x04FA, r24
    1be6:	03 c0       	rjmp	.+6      	; 0x1bee <udd_enable+0x6c>
    1be8:	8f e1       	ldi	r24, 0x1F	; 31
    1bea:	80 93 fa 04 	sts	0x04FA, r24
    1bee:	6b e1       	ldi	r22, 0x1B	; 27
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	82 e0       	ldi	r24, 0x02	; 2
    1bf4:	de d4       	rcall	.+2492   	; 0x25b2 <nvm_read_byte>
    1bf6:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf8:	19 f0       	breq	.+6      	; 0x1c00 <udd_enable+0x7e>
    1bfa:	80 93 fb 04 	sts	0x04FB, r24
    1bfe:	03 c0       	rjmp	.+6      	; 0x1c06 <udd_enable+0x84>
    1c00:	8f e1       	ldi	r24, 0x1F	; 31
    1c02:	80 93 fb 04 	sts	0x04FB, r24
    1c06:	e0 ec       	ldi	r30, 0xC0	; 192
    1c08:	f4 e0       	ldi	r31, 0x04	; 4
    1c0a:	80 81       	ld	r24, Z
    1c0c:	82 60       	ori	r24, 0x02	; 2
    1c0e:	80 83       	st	Z, r24
    1c10:	80 81       	ld	r24, Z
    1c12:	80 68       	ori	r24, 0x80	; 128
    1c14:	80 83       	st	Z, r24
    1c16:	80 81       	ld	r24, Z
    1c18:	80 61       	ori	r24, 0x10	; 16
    1c1a:	80 83       	st	Z, r24
    1c1c:	88 e3       	ldi	r24, 0x38	; 56
    1c1e:	96 e2       	ldi	r25, 0x26	; 38
    1c20:	86 83       	std	Z+6, r24	; 0x06
    1c22:	97 83       	std	Z+7, r25	; 0x07
    1c24:	80 81       	ld	r24, Z
    1c26:	80 62       	ori	r24, 0x20	; 32
    1c28:	80 83       	st	Z, r24
    1c2a:	8f ef       	ldi	r24, 0xFF	; 255
    1c2c:	80 93 c5 04 	sts	0x04C5, r24
    1c30:	e8 ec       	ldi	r30, 0xC8	; 200
    1c32:	f4 e0       	ldi	r31, 0x04	; 4
    1c34:	80 81       	ld	r24, Z
    1c36:	81 60       	ori	r24, 0x01	; 1
    1c38:	80 83       	st	Z, r24
    1c3a:	10 92 6c 26 	sts	0x266C, r1
    1c3e:	8f b7       	in	r24, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	e2 e8       	ldi	r30, 0x82	; 130
    1c44:	f6 e2       	ldi	r31, 0x26	; 38
    1c46:	90 81       	ld	r25, Z
    1c48:	9f 5f       	subi	r25, 0xFF	; 255
    1c4a:	90 83       	st	Z, r25
    1c4c:	8f bf       	out	0x3f, r24	; 63
    1c4e:	76 df       	rcall	.-276    	; 0x1b3c <udd_attach>
    1c50:	cf bf       	out	0x3f, r28	; 63
    1c52:	cf 91       	pop	r28
    1c54:	08 95       	ret

00001c56 <udd_is_high_speed>:
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	08 95       	ret

00001c5a <udd_set_address>:
    1c5a:	80 93 c3 04 	sts	0x04C3, r24
    1c5e:	08 95       	ret

00001c60 <udd_getaddress>:
    1c60:	80 91 c3 04 	lds	r24, 0x04C3
    1c64:	08 95       	ret

00001c66 <udd_get_frame_number>:
    1c66:	80 91 68 26 	lds	r24, 0x2668
    1c6a:	90 91 69 26 	lds	r25, 0x2669
    1c6e:	08 95       	ret

00001c70 <udd_get_micro_frame_number>:
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	08 95       	ret

00001c76 <udd_set_setup_payload>:
    1c76:	80 93 75 26 	sts	0x2675, r24
    1c7a:	90 93 76 26 	sts	0x2676, r25
    1c7e:	60 93 77 26 	sts	0x2677, r22
    1c82:	70 93 78 26 	sts	0x2678, r23
    1c86:	08 95       	ret

00001c88 <udd_ep_alloc>:
    1c88:	e8 2f       	mov	r30, r24
    1c8a:	ef 70       	andi	r30, 0x0F	; 15
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	99 27       	eor	r25, r25
    1c94:	87 fd       	sbrc	r24, 7
    1c96:	90 95       	com	r25
    1c98:	88 27       	eor	r24, r24
    1c9a:	99 0f       	add	r25, r25
    1c9c:	88 1f       	adc	r24, r24
    1c9e:	99 27       	eor	r25, r25
    1ca0:	e8 0f       	add	r30, r24
    1ca2:	f9 1f       	adc	r31, r25
    1ca4:	ee 0f       	add	r30, r30
    1ca6:	ff 1f       	adc	r31, r31
    1ca8:	ee 0f       	add	r30, r30
    1caa:	ff 1f       	adc	r31, r31
    1cac:	ee 0f       	add	r30, r30
    1cae:	ff 1f       	adc	r31, r31
    1cb0:	e8 5c       	subi	r30, 0xC8	; 200
    1cb2:	f9 4d       	sbci	r31, 0xD9	; 217
    1cb4:	81 81       	ldd	r24, Z+1	; 0x01
    1cb6:	80 7c       	andi	r24, 0xC0	; 192
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <udd_ep_alloc+0x34>
    1cba:	43 c0       	rjmp	.+134    	; 0x1d42 <udd_ep_alloc+0xba>
    1cbc:	63 70       	andi	r22, 0x03	; 3
    1cbe:	61 30       	cpi	r22, 0x01	; 1
    1cc0:	29 f0       	breq	.+10     	; 0x1ccc <udd_ep_alloc+0x44>
    1cc2:	10 f4       	brcc	.+4      	; 0x1cc8 <udd_ep_alloc+0x40>
    1cc4:	80 e4       	ldi	r24, 0x40	; 64
    1cc6:	03 c0       	rjmp	.+6      	; 0x1cce <udd_ep_alloc+0x46>
    1cc8:	80 e8       	ldi	r24, 0x80	; 128
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <udd_ep_alloc+0x46>
    1ccc:	80 ec       	ldi	r24, 0xC0	; 192
    1cce:	40 38       	cpi	r20, 0x80	; 128
    1cd0:	51 05       	cpc	r21, r1
    1cd2:	e1 f0       	breq	.+56     	; 0x1d0c <udd_ep_alloc+0x84>
    1cd4:	50 f4       	brcc	.+20     	; 0x1cea <udd_ep_alloc+0x62>
    1cd6:	40 32       	cpi	r20, 0x20	; 32
    1cd8:	51 05       	cpc	r21, r1
    1cda:	a1 f0       	breq	.+40     	; 0x1d04 <udd_ep_alloc+0x7c>
    1cdc:	40 34       	cpi	r20, 0x40	; 64
    1cde:	51 05       	cpc	r21, r1
    1ce0:	99 f0       	breq	.+38     	; 0x1d08 <udd_ep_alloc+0x80>
    1ce2:	40 31       	cpi	r20, 0x10	; 16
    1ce4:	51 05       	cpc	r21, r1
    1ce6:	61 f4       	brne	.+24     	; 0x1d00 <udd_ep_alloc+0x78>
    1ce8:	19 c0       	rjmp	.+50     	; 0x1d1c <udd_ep_alloc+0x94>
    1cea:	41 15       	cp	r20, r1
    1cec:	92 e0       	ldi	r25, 0x02	; 2
    1cee:	59 07       	cpc	r21, r25
    1cf0:	89 f0       	breq	.+34     	; 0x1d14 <udd_ep_alloc+0x8c>
    1cf2:	4f 3f       	cpi	r20, 0xFF	; 255
    1cf4:	93 e0       	ldi	r25, 0x03	; 3
    1cf6:	59 07       	cpc	r21, r25
    1cf8:	79 f0       	breq	.+30     	; 0x1d18 <udd_ep_alloc+0x90>
    1cfa:	41 15       	cp	r20, r1
    1cfc:	51 40       	sbci	r21, 0x01	; 1
    1cfe:	41 f0       	breq	.+16     	; 0x1d10 <udd_ep_alloc+0x88>
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	0d c0       	rjmp	.+26     	; 0x1d1e <udd_ep_alloc+0x96>
    1d04:	22 e0       	ldi	r18, 0x02	; 2
    1d06:	0b c0       	rjmp	.+22     	; 0x1d1e <udd_ep_alloc+0x96>
    1d08:	23 e0       	ldi	r18, 0x03	; 3
    1d0a:	09 c0       	rjmp	.+18     	; 0x1d1e <udd_ep_alloc+0x96>
    1d0c:	24 e0       	ldi	r18, 0x04	; 4
    1d0e:	07 c0       	rjmp	.+14     	; 0x1d1e <udd_ep_alloc+0x96>
    1d10:	25 e0       	ldi	r18, 0x05	; 5
    1d12:	05 c0       	rjmp	.+10     	; 0x1d1e <udd_ep_alloc+0x96>
    1d14:	26 e0       	ldi	r18, 0x06	; 6
    1d16:	03 c0       	rjmp	.+6      	; 0x1d1e <udd_ep_alloc+0x96>
    1d18:	27 e0       	ldi	r18, 0x07	; 7
    1d1a:	01 c0       	rjmp	.+2      	; 0x1d1e <udd_ep_alloc+0x96>
    1d1c:	21 e0       	ldi	r18, 0x01	; 1
    1d1e:	11 82       	std	Z+1, r1	; 0x01
    1d20:	96 e0       	ldi	r25, 0x06	; 6
    1d22:	90 83       	st	Z, r25
    1d24:	82 2b       	or	r24, r18
    1d26:	81 83       	std	Z+1, r24	; 0x01
    1d28:	81 81       	ldd	r24, Z+1	; 0x01
    1d2a:	80 7c       	andi	r24, 0xC0	; 192
    1d2c:	80 3c       	cpi	r24, 0xC0	; 192
    1d2e:	21 f4       	brne	.+8      	; 0x1d38 <udd_ep_alloc+0xb0>
    1d30:	81 81       	ldd	r24, Z+1	; 0x01
    1d32:	87 70       	andi	r24, 0x07	; 7
    1d34:	87 30       	cpi	r24, 0x07	; 7
    1d36:	39 f0       	breq	.+14     	; 0x1d46 <udd_ep_alloc+0xbe>
    1d38:	81 81       	ldd	r24, Z+1	; 0x01
    1d3a:	80 62       	ori	r24, 0x20	; 32
    1d3c:	81 83       	std	Z+1, r24	; 0x01
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	08 95       	ret
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	08 95       	ret
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	08 95       	ret

00001d4a <udd_ep_is_halted>:
    1d4a:	e8 2f       	mov	r30, r24
    1d4c:	ef 70       	andi	r30, 0x0F	; 15
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	ee 0f       	add	r30, r30
    1d52:	ff 1f       	adc	r31, r31
    1d54:	99 27       	eor	r25, r25
    1d56:	87 fd       	sbrc	r24, 7
    1d58:	90 95       	com	r25
    1d5a:	88 27       	eor	r24, r24
    1d5c:	99 0f       	add	r25, r25
    1d5e:	88 1f       	adc	r24, r24
    1d60:	99 27       	eor	r25, r25
    1d62:	e8 0f       	add	r30, r24
    1d64:	f9 1f       	adc	r31, r25
    1d66:	ee 0f       	add	r30, r30
    1d68:	ff 1f       	adc	r31, r31
    1d6a:	ee 0f       	add	r30, r30
    1d6c:	ff 1f       	adc	r31, r31
    1d6e:	ee 0f       	add	r30, r30
    1d70:	ff 1f       	adc	r31, r31
    1d72:	e8 5c       	subi	r30, 0xC8	; 200
    1d74:	f9 4d       	sbci	r31, 0xD9	; 217
    1d76:	81 81       	ldd	r24, Z+1	; 0x01
    1d78:	82 fb       	bst	r24, 2
    1d7a:	88 27       	eor	r24, r24
    1d7c:	80 f9       	bld	r24, 0
    1d7e:	08 95       	ret

00001d80 <udd_ep_clear_halt>:
    1d80:	e8 2f       	mov	r30, r24
    1d82:	ef 70       	andi	r30, 0x0F	; 15
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	ee 0f       	add	r30, r30
    1d88:	ff 1f       	adc	r31, r31
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	33 27       	eor	r19, r19
    1d8e:	27 fd       	sbrc	r18, 7
    1d90:	30 95       	com	r19
    1d92:	22 27       	eor	r18, r18
    1d94:	33 0f       	add	r19, r19
    1d96:	22 1f       	adc	r18, r18
    1d98:	33 27       	eor	r19, r19
    1d9a:	e2 0f       	add	r30, r18
    1d9c:	f3 1f       	adc	r31, r19
    1d9e:	ee 0f       	add	r30, r30
    1da0:	ff 1f       	adc	r31, r31
    1da2:	ee 0f       	add	r30, r30
    1da4:	ff 1f       	adc	r31, r31
    1da6:	ee 0f       	add	r30, r30
    1da8:	ff 1f       	adc	r31, r31
    1daa:	e8 5c       	subi	r30, 0xC8	; 200
    1dac:	f9 4d       	sbci	r31, 0xD9	; 217
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	92 ff       	sbrs	r25, 2
    1db2:	0e c0       	rjmp	.+28     	; 0x1dd0 <udd_ep_clear_halt+0x50>
    1db4:	91 81       	ldd	r25, Z+1	; 0x01
    1db6:	9b 7f       	andi	r25, 0xFB	; 251
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	22 dd       	rcall	.-1468   	; 0x1800 <udd_ep_get_job>
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	80 81       	ld	r24, Z
    1dc0:	80 ff       	sbrs	r24, 0
    1dc2:	06 c0       	rjmp	.+12     	; 0x1dd0 <udd_ep_clear_halt+0x50>
    1dc4:	8e 7f       	andi	r24, 0xFE	; 254
    1dc6:	80 83       	st	Z, r24
    1dc8:	07 80       	ldd	r0, Z+7	; 0x07
    1dca:	f0 85       	ldd	r31, Z+8	; 0x08
    1dcc:	e0 2d       	mov	r30, r0
    1dce:	09 95       	icall
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	08 95       	ret

00001dd4 <udd_ep_run>:
    1dd4:	7f 92       	push	r7
    1dd6:	8f 92       	push	r8
    1dd8:	9f 92       	push	r9
    1dda:	af 92       	push	r10
    1ddc:	bf 92       	push	r11
    1dde:	cf 92       	push	r12
    1de0:	df 92       	push	r13
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	98 2e       	mov	r9, r24
    1df0:	86 2e       	mov	r8, r22
    1df2:	5a 01       	movw	r10, r20
    1df4:	69 01       	movw	r12, r18
    1df6:	04 dd       	rcall	.-1528   	; 0x1800 <udd_ep_get_job>
    1df8:	7c 01       	movw	r14, r24
    1dfa:	79 2c       	mov	r7, r9
    1dfc:	77 1c       	adc	r7, r7
    1dfe:	77 24       	eor	r7, r7
    1e00:	77 1c       	adc	r7, r7
    1e02:	c9 2d       	mov	r28, r9
    1e04:	cf 70       	andi	r28, 0x0F	; 15
    1e06:	d0 e0       	ldi	r29, 0x00	; 0
    1e08:	cc 0f       	add	r28, r28
    1e0a:	dd 1f       	adc	r29, r29
    1e0c:	c7 0d       	add	r28, r7
    1e0e:	d1 1d       	adc	r29, r1
    1e10:	cc 0f       	add	r28, r28
    1e12:	dd 1f       	adc	r29, r29
    1e14:	cc 0f       	add	r28, r28
    1e16:	dd 1f       	adc	r29, r29
    1e18:	cc 0f       	add	r28, r28
    1e1a:	dd 1f       	adc	r29, r29
    1e1c:	c8 5c       	subi	r28, 0xC8	; 200
    1e1e:	d9 4d       	sbci	r29, 0xD9	; 217
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	80 7c       	andi	r24, 0xC0	; 192
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <udd_ep_run+0x54>
    1e26:	4c c0       	rjmp	.+152    	; 0x1ec0 <udd_ep_run+0xec>
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	80 7c       	andi	r24, 0xC0	; 192
    1e2c:	80 3c       	cpi	r24, 0xC0	; 192
    1e2e:	19 f0       	breq	.+6      	; 0x1e36 <udd_ep_run+0x62>
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	82 fd       	sbrc	r24, 2
    1e34:	47 c0       	rjmp	.+142    	; 0x1ec4 <udd_ep_run+0xf0>
    1e36:	8f b7       	in	r24, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	f7 01       	movw	r30, r14
    1e3c:	90 81       	ld	r25, Z
    1e3e:	90 ff       	sbrs	r25, 0
    1e40:	03 c0       	rjmp	.+6      	; 0x1e48 <udd_ep_run+0x74>
    1e42:	8f bf       	out	0x3f, r24	; 63
    1e44:	71 2c       	mov	r7, r1
    1e46:	3f c0       	rjmp	.+126    	; 0x1ec6 <udd_ep_run+0xf2>
    1e48:	f7 01       	movw	r30, r14
    1e4a:	90 81       	ld	r25, Z
    1e4c:	91 60       	ori	r25, 0x01	; 1
    1e4e:	90 83       	st	Z, r25
    1e50:	8f bf       	out	0x3f, r24	; 63
    1e52:	f7 01       	movw	r30, r14
    1e54:	a1 82       	std	Z+1, r10	; 0x01
    1e56:	b2 82       	std	Z+2, r11	; 0x02
    1e58:	c3 82       	std	Z+3, r12	; 0x03
    1e5a:	d4 82       	std	Z+4, r13	; 0x04
    1e5c:	15 82       	std	Z+5, r1	; 0x05
    1e5e:	16 82       	std	Z+6, r1	; 0x06
    1e60:	07 83       	std	Z+7, r16	; 0x07
    1e62:	10 87       	std	Z+8, r17	; 0x08
    1e64:	81 10       	cpse	r8, r1
    1e66:	06 c0       	rjmp	.+12     	; 0x1e74 <udd_ep_run+0xa0>
    1e68:	91 e0       	ldi	r25, 0x01	; 1
    1e6a:	c1 14       	cp	r12, r1
    1e6c:	d1 04       	cpc	r13, r1
    1e6e:	19 f0       	breq	.+6      	; 0x1e76 <udd_ep_run+0xa2>
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <udd_ep_run+0xa2>
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	f7 01       	movw	r30, r14
    1e78:	80 81       	ld	r24, Z
    1e7a:	90 fb       	bst	r25, 0
    1e7c:	81 f9       	bld	r24, 1
    1e7e:	8b 7f       	andi	r24, 0xFB	; 251
    1e80:	80 83       	st	Z, r24
    1e82:	77 20       	and	r7, r7
    1e84:	19 f0       	breq	.+6      	; 0x1e8c <udd_ep_run+0xb8>
    1e86:	1e 82       	std	Y+6, r1	; 0x06
    1e88:	1f 82       	std	Y+7, r1	; 0x07
    1e8a:	15 c0       	rjmp	.+42     	; 0x1eb6 <udd_ep_run+0xe2>
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	80 7c       	andi	r24, 0xC0	; 192
    1e90:	80 3c       	cpi	r24, 0xC0	; 192
    1e92:	69 f4       	brne	.+26     	; 0x1eae <udd_ep_run+0xda>
    1e94:	ce 01       	movw	r24, r28
    1e96:	8f dc       	rcall	.-1762   	; 0x17b6 <udd_ep_get_size>
    1e98:	bc 01       	movw	r22, r24
    1e9a:	c6 01       	movw	r24, r12
    1e9c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodhi4>
    1ea0:	89 2b       	or	r24, r25
    1ea2:	29 f0       	breq	.+10     	; 0x1eae <udd_ep_run+0xda>
    1ea4:	f7 01       	movw	r30, r14
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8e 7f       	andi	r24, 0xFE	; 254
    1eaa:	80 83       	st	Z, r24
    1eac:	0c c0       	rjmp	.+24     	; 0x1ec6 <udd_ep_run+0xf2>
    1eae:	1a 82       	std	Y+2, r1	; 0x02
    1eb0:	1b 82       	std	Y+3, r1	; 0x03
    1eb2:	1e 82       	std	Y+6, r1	; 0x06
    1eb4:	1f 82       	std	Y+7, r1	; 0x07
    1eb6:	89 2d       	mov	r24, r9
    1eb8:	2d dd       	rcall	.-1446   	; 0x1914 <udd_ep_trans_complet>
    1eba:	77 24       	eor	r7, r7
    1ebc:	73 94       	inc	r7
    1ebe:	03 c0       	rjmp	.+6      	; 0x1ec6 <udd_ep_run+0xf2>
    1ec0:	71 2c       	mov	r7, r1
    1ec2:	01 c0       	rjmp	.+2      	; 0x1ec6 <udd_ep_run+0xf2>
    1ec4:	71 2c       	mov	r7, r1
    1ec6:	87 2d       	mov	r24, r7
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	1f 91       	pop	r17
    1ece:	0f 91       	pop	r16
    1ed0:	ff 90       	pop	r15
    1ed2:	ef 90       	pop	r14
    1ed4:	df 90       	pop	r13
    1ed6:	cf 90       	pop	r12
    1ed8:	bf 90       	pop	r11
    1eda:	af 90       	pop	r10
    1edc:	9f 90       	pop	r9
    1ede:	8f 90       	pop	r8
    1ee0:	7f 90       	pop	r7
    1ee2:	08 95       	ret

00001ee4 <udd_ep_abort>:
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	18 2f       	mov	r17, r24
    1ef0:	f8 2e       	mov	r15, r24
    1ef2:	ff 1c       	adc	r15, r15
    1ef4:	ff 24       	eor	r15, r15
    1ef6:	ff 1c       	adc	r15, r15
    1ef8:	c8 2f       	mov	r28, r24
    1efa:	cf 70       	andi	r28, 0x0F	; 15
    1efc:	d0 e0       	ldi	r29, 0x00	; 0
    1efe:	cc 0f       	add	r28, r28
    1f00:	dd 1f       	adc	r29, r29
    1f02:	cf 0d       	add	r28, r15
    1f04:	d1 1d       	adc	r29, r1
    1f06:	cc 0f       	add	r28, r28
    1f08:	dd 1f       	adc	r29, r29
    1f0a:	cc 0f       	add	r28, r28
    1f0c:	dd 1f       	adc	r29, r29
    1f0e:	cc 0f       	add	r28, r28
    1f10:	dd 1f       	adc	r29, r29
    1f12:	c8 5c       	subi	r28, 0xC8	; 200
    1f14:	d9 4d       	sbci	r29, 0xD9	; 217
    1f16:	74 dc       	rcall	.-1816   	; 0x1800 <udd_ep_get_job>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	02 e0       	ldi	r16, 0x02	; 2
    1f1e:	05 93       	las	Z, r16
    1f20:	8c 91       	ld	r24, X
    1f22:	80 ff       	sbrs	r24, 0
    1f24:	12 c0       	rjmp	.+36     	; 0x1f4a <udd_ep_abort+0x66>
    1f26:	8e 7f       	andi	r24, 0xFE	; 254
    1f28:	8c 93       	st	X, r24
    1f2a:	17 96       	adiw	r26, 0x07	; 7
    1f2c:	ed 91       	ld	r30, X+
    1f2e:	fc 91       	ld	r31, X
    1f30:	18 97       	sbiw	r26, 0x08	; 8
    1f32:	30 97       	sbiw	r30, 0x00	; 0
    1f34:	51 f0       	breq	.+20     	; 0x1f4a <udd_ep_abort+0x66>
    1f36:	ff 20       	and	r15, r15
    1f38:	19 f0       	breq	.+6      	; 0x1f40 <udd_ep_abort+0x5c>
    1f3a:	6e 81       	ldd	r22, Y+6	; 0x06
    1f3c:	7f 81       	ldd	r23, Y+7	; 0x07
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <udd_ep_abort+0x60>
    1f40:	6a 81       	ldd	r22, Y+2	; 0x02
    1f42:	7b 81       	ldd	r23, Y+3	; 0x03
    1f44:	41 2f       	mov	r20, r17
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	09 95       	icall
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	1f 91       	pop	r17
    1f50:	0f 91       	pop	r16
    1f52:	ff 90       	pop	r15
    1f54:	08 95       	ret

00001f56 <udd_ep_free>:
    1f56:	cf 93       	push	r28
    1f58:	c8 2f       	mov	r28, r24
    1f5a:	c4 df       	rcall	.-120    	; 0x1ee4 <udd_ep_abort>
    1f5c:	ec 2f       	mov	r30, r28
    1f5e:	ef 70       	andi	r30, 0x0F	; 15
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	ee 0f       	add	r30, r30
    1f64:	ff 1f       	adc	r31, r31
    1f66:	8c 2f       	mov	r24, r28
    1f68:	99 27       	eor	r25, r25
    1f6a:	87 fd       	sbrc	r24, 7
    1f6c:	90 95       	com	r25
    1f6e:	88 27       	eor	r24, r24
    1f70:	99 0f       	add	r25, r25
    1f72:	88 1f       	adc	r24, r24
    1f74:	99 27       	eor	r25, r25
    1f76:	e8 0f       	add	r30, r24
    1f78:	f9 1f       	adc	r31, r25
    1f7a:	ee 0f       	add	r30, r30
    1f7c:	ff 1f       	adc	r31, r31
    1f7e:	ee 0f       	add	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	ee 0f       	add	r30, r30
    1f84:	ff 1f       	adc	r31, r31
    1f86:	e8 5c       	subi	r30, 0xC8	; 200
    1f88:	f9 4d       	sbci	r31, 0xD9	; 217
    1f8a:	11 82       	std	Z+1, r1	; 0x01
    1f8c:	cf 91       	pop	r28
    1f8e:	08 95       	ret

00001f90 <udd_ep_set_halt>:
    1f90:	0f 93       	push	r16
    1f92:	e8 2f       	mov	r30, r24
    1f94:	ef 70       	andi	r30, 0x0F	; 15
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	33 27       	eor	r19, r19
    1fa0:	27 fd       	sbrc	r18, 7
    1fa2:	30 95       	com	r19
    1fa4:	22 27       	eor	r18, r18
    1fa6:	33 0f       	add	r19, r19
    1fa8:	22 1f       	adc	r18, r18
    1faa:	33 27       	eor	r19, r19
    1fac:	e2 0f       	add	r30, r18
    1fae:	f3 1f       	adc	r31, r19
    1fb0:	ee 0f       	add	r30, r30
    1fb2:	ff 1f       	adc	r31, r31
    1fb4:	ee 0f       	add	r30, r30
    1fb6:	ff 1f       	adc	r31, r31
    1fb8:	ee 0f       	add	r30, r30
    1fba:	ff 1f       	adc	r31, r31
    1fbc:	e8 5c       	subi	r30, 0xC8	; 200
    1fbe:	f9 4d       	sbci	r31, 0xD9	; 217
    1fc0:	91 81       	ldd	r25, Z+1	; 0x01
    1fc2:	94 60       	ori	r25, 0x04	; 4
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	01 e0       	ldi	r16, 0x01	; 1
    1fc8:	06 93       	lac	Z, r16
    1fca:	8c df       	rcall	.-232    	; 0x1ee4 <udd_ep_abort>
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	0f 91       	pop	r16
    1fd0:	08 95       	ret

00001fd2 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1fd2:	1f 92       	push	r1
    1fd4:	0f 92       	push	r0
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	0f 92       	push	r0
    1fda:	11 24       	eor	r1, r1
    1fdc:	0f 93       	push	r16
    1fde:	2f 93       	push	r18
    1fe0:	3f 93       	push	r19
    1fe2:	4f 93       	push	r20
    1fe4:	5f 93       	push	r21
    1fe6:	6f 93       	push	r22
    1fe8:	7f 93       	push	r23
    1fea:	8f 93       	push	r24
    1fec:	9f 93       	push	r25
    1fee:	af 93       	push	r26
    1ff0:	bf 93       	push	r27
    1ff2:	ef 93       	push	r30
    1ff4:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1ff6:	80 91 cb 04 	lds	r24, 0x04CB
    1ffa:	88 23       	and	r24, r24
    1ffc:	34 f4       	brge	.+12     	; 0x200a <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    1ffe:	80 e8       	ldi	r24, 0x80	; 128
    2000:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    2004:	0e 94 31 05 	call	0xa62	; 0xa62 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2008:	88 c0       	rjmp	.+272    	; 0x211a <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    200a:	80 91 cb 04 	lds	r24, 0x04CB
    200e:	82 ff       	sbrs	r24, 2
    2010:	20 c0       	rjmp	.+64     	; 0x2052 <__vector_125+0x80>
		udd_ack_underflow_event();
    2012:	84 e0       	ldi	r24, 0x04	; 4
    2014:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    2018:	80 91 40 26 	lds	r24, 0x2640
    201c:	86 ff       	sbrs	r24, 6
    201e:	7d c0       	rjmp	.+250    	; 0x211a <__vector_125+0x148>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2020:	80 91 cc 04 	lds	r24, 0x04CC
    2024:	81 fd       	sbrc	r24, 1
    2026:	79 c0       	rjmp	.+242    	; 0x211a <__vector_125+0x148>
    2028:	06 dc       	rcall	.-2036   	; 0x1836 <udd_ctrl_interrupt_tc_setup>
    202a:	81 11       	cpse	r24, r1
    202c:	76 c0       	rjmp	.+236    	; 0x211a <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    202e:	80 91 28 26 	lds	r24, 0x2628
    2032:	81 30       	cpi	r24, 0x01	; 1
    2034:	11 f4       	brne	.+4      	; 0x203a <__vector_125+0x68>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2036:	3b db       	rcall	.-2442   	; 0x16ae <udd_ctrl_send_zlp_in>
    2038:	70 c0       	rjmp	.+224    	; 0x211a <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    203a:	84 30       	cpi	r24, 0x04	; 4
    203c:	09 f0       	breq	.+2      	; 0x2040 <__vector_125+0x6e>
    203e:	6d c0       	rjmp	.+218    	; 0x211a <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2040:	e1 e4       	ldi	r30, 0x41	; 65
    2042:	f6 e2       	ldi	r31, 0x26	; 38
    2044:	04 e0       	ldi	r16, 0x04	; 4
    2046:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2048:	e9 e3       	ldi	r30, 0x39	; 57
    204a:	f6 e2       	ldi	r31, 0x26	; 38
    204c:	04 e0       	ldi	r16, 0x04	; 4
    204e:	05 93       	las	Z, r16
    2050:	64 c0       	rjmp	.+200    	; 0x211a <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2052:	80 91 cb 04 	lds	r24, 0x04CB
    2056:	81 ff       	sbrs	r24, 1
    2058:	5b c0       	rjmp	.+182    	; 0x2110 <__vector_125+0x13e>
		udd_ack_overflow_event();
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    2060:	80 91 38 26 	lds	r24, 0x2638
    2064:	86 ff       	sbrs	r24, 6
    2066:	59 c0       	rjmp	.+178    	; 0x211a <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2068:	80 91 cc 04 	lds	r24, 0x04CC
    206c:	81 fd       	sbrc	r24, 1
    206e:	55 c0       	rjmp	.+170    	; 0x211a <__vector_125+0x148>
    2070:	e2 db       	rcall	.-2108   	; 0x1836 <udd_ctrl_interrupt_tc_setup>
    2072:	81 11       	cpse	r24, r1
    2074:	52 c0       	rjmp	.+164    	; 0x211a <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2076:	80 91 28 26 	lds	r24, 0x2628
    207a:	82 30       	cpi	r24, 0x02	; 2
    207c:	41 f4       	brne	.+16     	; 0x208e <__vector_125+0xbc>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    207e:	84 e0       	ldi	r24, 0x04	; 4
    2080:	80 93 28 26 	sts	0x2628, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2084:	e8 e3       	ldi	r30, 0x38	; 56
    2086:	f6 e2       	ldi	r31, 0x26	; 38
    2088:	02 e0       	ldi	r16, 0x02	; 2
    208a:	06 93       	lac	Z, r16
    208c:	46 c0       	rjmp	.+140    	; 0x211a <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    208e:	83 30       	cpi	r24, 0x03	; 3
    2090:	09 f0       	breq	.+2      	; 0x2094 <__vector_125+0xc2>
    2092:	43 c0       	rjmp	.+134    	; 0x211a <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2094:	e1 e4       	ldi	r30, 0x41	; 65
    2096:	f6 e2       	ldi	r31, 0x26	; 38
    2098:	04 e0       	ldi	r16, 0x04	; 4
    209a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    209c:	e9 e3       	ldi	r30, 0x39	; 57
    209e:	f6 e2       	ldi	r31, 0x26	; 38
    20a0:	04 e0       	ldi	r16, 0x04	; 4
    20a2:	05 93       	las	Z, r16
    20a4:	3a c0       	rjmp	.+116    	; 0x211a <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    20a6:	80 e1       	ldi	r24, 0x10	; 16
    20a8:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	1a df       	rcall	.-460    	; 0x1ee4 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    20b0:	81 e8       	ldi	r24, 0x81	; 129
    20b2:	18 df       	rcall	.-464    	; 0x1ee4 <udd_ep_abort>
		}
#endif
		udc_reset();
    20b4:	0e 94 0a 05 	call	0xa14	; 0xa14 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    20b8:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    20bc:	e9 e3       	ldi	r30, 0x39	; 57
    20be:	f6 e2       	ldi	r31, 0x26	; 38
    20c0:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    20c2:	96 e0       	ldi	r25, 0x06	; 6
    20c4:	90 93 38 26 	sts	0x2638, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    20c8:	83 e4       	ldi	r24, 0x43	; 67
    20ca:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    20cc:	e1 e4       	ldi	r30, 0x41	; 65
    20ce:	f6 e2       	ldi	r31, 0x26	; 38
    20d0:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    20d2:	90 93 40 26 	sts	0x2640, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    20d6:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    20d8:	84 ee       	ldi	r24, 0xE4	; 228
    20da:	95 e2       	ldi	r25, 0x25	; 37
    20dc:	80 93 3c 26 	sts	0x263C, r24
    20e0:	90 93 3d 26 	sts	0x263D, r25
		// Reset endpoint control management
		udd_ctrl_init();
    20e4:	ab da       	rcall	.-2730   	; 0x163c <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    20e6:	19 c0       	rjmp	.+50     	; 0x211a <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
    20e8:	80 91 cb 04 	lds	r24, 0x04CB
    20ec:	86 ff       	sbrs	r24, 6
    20ee:	06 c0       	rjmp	.+12     	; 0x20fc <__vector_125+0x12a>
		udd_ack_suspend_event();
    20f0:	80 e4       	ldi	r24, 0x40	; 64
    20f2:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	82 da       	rcall	.-2812   	; 0x15fe <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
    20fc:	80 91 cb 04 	lds	r24, 0x04CB
    2100:	85 ff       	sbrs	r24, 5
    2102:	0b c0       	rjmp	.+22     	; 0x211a <__vector_125+0x148>
		udd_ack_resume_event();
    2104:	80 e2       	ldi	r24, 0x20	; 32
    2106:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	78 da       	rcall	.-2832   	; 0x15fe <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    210e:	05 c0       	rjmp	.+10     	; 0x211a <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2110:	80 91 cb 04 	lds	r24, 0x04CB
    2114:	84 ff       	sbrs	r24, 4
    2116:	e8 cf       	rjmp	.-48     	; 0x20e8 <__vector_125+0x116>
    2118:	c6 cf       	rjmp	.-116    	; 0x20a6 <__vector_125+0xd4>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    211a:	ff 91       	pop	r31
    211c:	ef 91       	pop	r30
    211e:	bf 91       	pop	r27
    2120:	af 91       	pop	r26
    2122:	9f 91       	pop	r25
    2124:	8f 91       	pop	r24
    2126:	7f 91       	pop	r23
    2128:	6f 91       	pop	r22
    212a:	5f 91       	pop	r21
    212c:	4f 91       	pop	r20
    212e:	3f 91       	pop	r19
    2130:	2f 91       	pop	r18
    2132:	0f 91       	pop	r16
    2134:	0f 90       	pop	r0
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	0f 90       	pop	r0
    213a:	1f 90       	pop	r1
    213c:	18 95       	reti

0000213e <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    213e:	1f 92       	push	r1
    2140:	0f 92       	push	r0
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	0f 92       	push	r0
    2146:	11 24       	eor	r1, r1
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	2f 93       	push	r18
    214e:	3f 93       	push	r19
    2150:	4f 93       	push	r20
    2152:	5f 93       	push	r21
    2154:	6f 93       	push	r22
    2156:	7f 93       	push	r23
    2158:	8f 93       	push	r24
    215a:	9f 93       	push	r25
    215c:	af 93       	push	r26
    215e:	bf 93       	push	r27
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	ef 93       	push	r30
    2166:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2168:	80 91 cc 04 	lds	r24, 0x04CC
    216c:	81 fd       	sbrc	r24, 1
    216e:	03 c0       	rjmp	.+6      	; 0x2176 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2170:	62 db       	rcall	.-2364   	; 0x1836 <udd_ctrl_interrupt_tc_setup>
    2172:	81 11       	cpse	r24, r1
    2174:	b8 c0       	rjmp	.+368    	; 0x22e6 <__vector_126+0x1a8>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    217c:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    2180:	81 95       	neg	r24
    2182:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2184:	e8 e3       	ldi	r30, 0x38	; 56
    2186:	f6 e2       	ldi	r31, 0x26	; 38
    2188:	e8 1b       	sub	r30, r24
    218a:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    218c:	20 81       	ld	r18, Z
    218e:	31 81       	ldd	r19, Z+1	; 0x01
    2190:	28 53       	subi	r18, 0x38	; 56
    2192:	36 42       	sbci	r19, 0x26	; 38
    2194:	36 95       	lsr	r19
    2196:	27 95       	ror	r18
    2198:	36 95       	lsr	r19
    219a:	27 95       	ror	r18
    219c:	36 95       	lsr	r19
    219e:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    21a0:	82 2f       	mov	r24, r18
    21a2:	86 95       	lsr	r24
    21a4:	20 ff       	sbrs	r18, 0
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <__vector_126+0x6e>
    21a8:	90 e8       	ldi	r25, 0x80	; 128
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <__vector_126+0x70>
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    21b0:	e8 2f       	mov	r30, r24
    21b2:	ef 70       	andi	r30, 0x0F	; 15
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	ee 0f       	add	r30, r30
    21b8:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    21ba:	28 2f       	mov	r18, r24
    21bc:	33 27       	eor	r19, r19
    21be:	27 fd       	sbrc	r18, 7
    21c0:	30 95       	com	r19
    21c2:	22 27       	eor	r18, r18
    21c4:	33 0f       	add	r19, r19
    21c6:	22 1f       	adc	r18, r18
    21c8:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    21ca:	e2 0f       	add	r30, r18
    21cc:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    21ce:	ee 0f       	add	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	ee 0f       	add	r30, r30
    21d4:	ff 1f       	adc	r31, r31
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	e8 5c       	subi	r30, 0xC8	; 200
    21dc:	f9 4d       	sbci	r31, 0xD9	; 217
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    21de:	90 81       	ld	r25, Z
    21e0:	95 ff       	sbrs	r25, 5
    21e2:	81 c0       	rjmp	.+258    	; 0x22e6 <__vector_126+0x1a8>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    21e4:	00 e2       	ldi	r16, 0x20	; 32
    21e6:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    21e8:	81 11       	cpse	r24, r1
    21ea:	78 c0       	rjmp	.+240    	; 0x22dc <__vector_126+0x19e>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    21ec:	80 91 28 26 	lds	r24, 0x2628
    21f0:	84 30       	cpi	r24, 0x04	; 4
    21f2:	19 f4       	brne	.+6      	; 0x21fa <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    21f4:	6a da       	rcall	.-2860   	; 0x16ca <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    21f6:	22 da       	rcall	.-3004   	; 0x163c <udd_ctrl_init>
    21f8:	76 c0       	rjmp	.+236    	; 0x22e6 <__vector_126+0x1a8>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    21fa:	c0 91 3a 26 	lds	r28, 0x263A
    21fe:	d0 91 3b 26 	lds	r29, 0x263B

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2202:	80 91 77 26 	lds	r24, 0x2677
    2206:	90 91 78 26 	lds	r25, 0x2678
    220a:	00 91 24 26 	lds	r16, 0x2624
    220e:	10 91 25 26 	lds	r17, 0x2625
    2212:	98 01       	movw	r18, r16
    2214:	2c 0f       	add	r18, r28
    2216:	3d 1f       	adc	r19, r29
    2218:	82 17       	cp	r24, r18
    221a:	93 07       	cpc	r25, r19
    221c:	18 f4       	brcc	.+6      	; 0x2224 <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    221e:	ec 01       	movw	r28, r24
    2220:	c0 1b       	sub	r28, r16
    2222:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2224:	80 91 75 26 	lds	r24, 0x2675
    2228:	90 91 76 26 	lds	r25, 0x2676
    222c:	ae 01       	movw	r20, r28
    222e:	64 ee       	ldi	r22, 0xE4	; 228
    2230:	75 e2       	ldi	r23, 0x25	; 37
    2232:	80 0f       	add	r24, r16
    2234:	91 1f       	adc	r25, r17
    2236:	fd d6       	rcall	.+3578   	; 0x3032 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2238:	0c 0f       	add	r16, r28
    223a:	1d 1f       	adc	r17, r29
    223c:	00 93 24 26 	sts	0x2624, r16
    2240:	10 93 25 26 	sts	0x2625, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2244:	c0 34       	cpi	r28, 0x40	; 64
    2246:	d1 05       	cpc	r29, r1
    2248:	69 f4       	brne	.+26     	; 0x2264 <__vector_126+0x126>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    224a:	80 91 26 26 	lds	r24, 0x2626
    224e:	90 91 27 26 	lds	r25, 0x2627
    2252:	80 0f       	add	r24, r16
    2254:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2256:	20 91 73 26 	lds	r18, 0x2673
    225a:	30 91 74 26 	lds	r19, 0x2674
    225e:	82 17       	cp	r24, r18
    2260:	93 07       	cpc	r25, r19
    2262:	88 f0       	brcs	.+34     	; 0x2286 <__vector_126+0x148>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2264:	00 93 77 26 	sts	0x2677, r16
    2268:	10 93 78 26 	sts	0x2678, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    226c:	e0 91 7b 26 	lds	r30, 0x267B
    2270:	f0 91 7c 26 	lds	r31, 0x267C
    2274:	30 97       	sbiw	r30, 0x00	; 0
    2276:	29 f0       	breq	.+10     	; 0x2282 <__vector_126+0x144>
			if (!udd_g_ctrlreq.over_under_run()) {
    2278:	09 95       	icall
    227a:	81 11       	cpse	r24, r1
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <__vector_126+0x144>
				// Stall ZLP
				udd_ctrl_stall_data();
    227e:	09 da       	rcall	.-3054   	; 0x1692 <udd_ctrl_stall_data>
    2280:	32 c0       	rjmp	.+100    	; 0x22e6 <__vector_126+0x1a8>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2282:	15 da       	rcall	.-3030   	; 0x16ae <udd_ctrl_send_zlp_in>
    2284:	30 c0       	rjmp	.+96     	; 0x22e6 <__vector_126+0x1a8>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2286:	80 91 77 26 	lds	r24, 0x2677
    228a:	90 91 78 26 	lds	r25, 0x2678
    228e:	08 17       	cp	r16, r24
    2290:	19 07       	cpc	r17, r25
    2292:	f9 f4       	brne	.+62     	; 0x22d2 <__vector_126+0x194>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2294:	e0 91 7b 26 	lds	r30, 0x267B
    2298:	f0 91 7c 26 	lds	r31, 0x267C
    229c:	30 97       	sbiw	r30, 0x00	; 0
    229e:	11 f4       	brne	.+4      	; 0x22a4 <__vector_126+0x166>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    22a0:	f8 d9       	rcall	.-3088   	; 0x1692 <udd_ctrl_stall_data>
    22a2:	21 c0       	rjmp	.+66     	; 0x22e6 <__vector_126+0x1a8>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    22a4:	09 95       	icall
    22a6:	81 11       	cpse	r24, r1
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <__vector_126+0x170>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    22aa:	f3 d9       	rcall	.-3098   	; 0x1692 <udd_ctrl_stall_data>
    22ac:	1c c0       	rjmp	.+56     	; 0x22e6 <__vector_126+0x1a8>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    22ae:	20 91 26 26 	lds	r18, 0x2626
    22b2:	30 91 27 26 	lds	r19, 0x2627
    22b6:	80 91 24 26 	lds	r24, 0x2624
    22ba:	90 91 25 26 	lds	r25, 0x2625
    22be:	82 0f       	add	r24, r18
    22c0:	93 1f       	adc	r25, r19
    22c2:	80 93 26 26 	sts	0x2626, r24
    22c6:	90 93 27 26 	sts	0x2627, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    22ca:	10 92 24 26 	sts	0x2624, r1
    22ce:	10 92 25 26 	sts	0x2625, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    22d2:	e8 e3       	ldi	r30, 0x38	; 56
    22d4:	f6 e2       	ldi	r31, 0x26	; 38
    22d6:	02 e0       	ldi	r16, 0x02	; 2
    22d8:	06 93       	lac	Z, r16
    22da:	05 c0       	rjmp	.+10     	; 0x22e6 <__vector_126+0x1a8>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    22dc:	80 38       	cpi	r24, 0x80	; 128
    22de:	11 f4       	brne	.+4      	; 0x22e4 <__vector_126+0x1a6>
		udd_ctrl_in_sent();
    22e0:	fc d9       	rcall	.-3080   	; 0x16da <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <__vector_126+0x1a8>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    22e4:	17 db       	rcall	.-2514   	; 0x1914 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    22e6:	ff 91       	pop	r31
    22e8:	ef 91       	pop	r30
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	bf 91       	pop	r27
    22f0:	af 91       	pop	r26
    22f2:	9f 91       	pop	r25
    22f4:	8f 91       	pop	r24
    22f6:	7f 91       	pop	r23
    22f8:	6f 91       	pop	r22
    22fa:	5f 91       	pop	r21
    22fc:	4f 91       	pop	r20
    22fe:	3f 91       	pop	r19
    2300:	2f 91       	pop	r18
    2302:	1f 91       	pop	r17
    2304:	0f 91       	pop	r16
    2306:	0f 90       	pop	r0
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	0f 90       	pop	r0
    230c:	1f 90       	pop	r1
    230e:	18 95       	reti

00002310 <sysclk_init>:
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	00 d0       	rcall	.+0      	; 0x2316 <sysclk_init+0x6>
    2316:	00 d0       	rcall	.+0      	; 0x2318 <sysclk_init+0x8>
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	8f ef       	ldi	r24, 0xFF	; 255
    231e:	80 93 70 00 	sts	0x0070, r24
    2322:	80 93 71 00 	sts	0x0071, r24
    2326:	80 93 72 00 	sts	0x0072, r24
    232a:	80 93 73 00 	sts	0x0073, r24
    232e:	80 93 74 00 	sts	0x0074, r24
    2332:	80 93 75 00 	sts	0x0075, r24
    2336:	80 93 76 00 	sts	0x0076, r24
    233a:	6c e1       	ldi	r22, 0x1C	; 28
    233c:	70 e0       	ldi	r23, 0x00	; 0
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	38 d1       	rcall	.+624    	; 0x25b2 <nvm_read_byte>
    2342:	8a 83       	std	Y+2, r24	; 0x02
    2344:	6d e1       	ldi	r22, 0x1D	; 29
    2346:	70 e0       	ldi	r23, 0x00	; 0
    2348:	82 e0       	ldi	r24, 0x02	; 2
    234a:	33 d1       	rcall	.+614    	; 0x25b2 <nvm_read_byte>
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	9a 81       	ldd	r25, Y+2	; 0x02
    2352:	01 96       	adiw	r24, 0x01	; 1
    2354:	21 f4       	brne	.+8      	; 0x235e <sysclk_init+0x4e>
    2356:	80 e4       	ldi	r24, 0x40	; 64
    2358:	93 e2       	ldi	r25, 0x23	; 35
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	9a 81       	ldd	r25, Y+2	; 0x02
    2362:	8b 83       	std	Y+3, r24	; 0x03
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	e0 e6       	ldi	r30, 0x60	; 96
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	82 83       	std	Z+2, r24	; 0x02
    236c:	8c 81       	ldd	r24, Y+4	; 0x04
    236e:	83 83       	std	Z+3, r24	; 0x03
    2370:	8f b7       	in	r24, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	e0 e5       	ldi	r30, 0x50	; 80
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	90 81       	ld	r25, Z
    237a:	92 60       	ori	r25, 0x02	; 2
    237c:	90 83       	st	Z, r25
    237e:	8f bf       	out	0x3f, r24	; 63
    2380:	81 81       	ldd	r24, Z+1	; 0x01
    2382:	81 ff       	sbrs	r24, 1
    2384:	fd cf       	rjmp	.-6      	; 0x2380 <sysclk_init+0x70>
    2386:	61 e0       	ldi	r22, 0x01	; 1
    2388:	80 e4       	ldi	r24, 0x40	; 64
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	1c d1       	rcall	.+568    	; 0x25c6 <ccp_write_io>
    238e:	8f b7       	in	r24, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	e0 e5       	ldi	r30, 0x50	; 80
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	90 81       	ld	r25, Z
    2398:	9e 7f       	andi	r25, 0xFE	; 254
    239a:	90 83       	st	Z, r25
    239c:	8f bf       	out	0x3f, r24	; 63
    239e:	24 96       	adiw	r28, 0x04	; 4
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	08 95       	ret

000023aa <sysclk_enable_module>:
    23aa:	9f b7       	in	r25, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	e8 2f       	mov	r30, r24
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	e0 59       	subi	r30, 0x90	; 144
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	60 95       	com	r22
    23b8:	80 81       	ld	r24, Z
    23ba:	68 23       	and	r22, r24
    23bc:	60 83       	st	Z, r22
    23be:	9f bf       	out	0x3f, r25	; 63
    23c0:	08 95       	ret

000023c2 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    23c2:	86 30       	cpi	r24, 0x06	; 6
    23c4:	11 f4       	brne	.+4      	; 0x23ca <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    23c6:	68 e1       	ldi	r22, 0x18	; 24
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    23ca:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    23cc:	e0 e5       	ldi	r30, 0x50	; 80
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    23d2:	81 fd       	sbrc	r24, 1
    23d4:	09 c0       	rjmp	.+18     	; 0x23e8 <sysclk_enable_usb+0x26>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    23d6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    23d8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    23da:	90 81       	ld	r25, Z
    23dc:	92 60       	ori	r25, 0x02	; 2
    23de:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    23e0:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    23e2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    23e4:	81 ff       	sbrs	r24, 1
    23e6:	fd cf       	rjmp	.-6      	; 0x23e2 <sysclk_enable_usb+0x20>
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    23e8:	63 60       	ori	r22, 0x03	; 3
    23ea:	84 e4       	ldi	r24, 0x44	; 68
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	eb d0       	rcall	.+470    	; 0x25c6 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    23f0:	60 e4       	ldi	r22, 0x40	; 64
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	da cf       	rjmp	.-76     	; 0x23aa <sysclk_enable_module>
    23f6:	08 95       	ret

000023f8 <nvm_eeprom_read_buffer>:
 * \param address   the address to where to read
 * \param buf       pointer to the data
 * \param len       the number of bytes to read
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	9b 01       	movw	r18, r22
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    23fe:	e0 ec       	ldi	r30, 0xC0	; 192
    2400:	f1 e0       	ldi	r31, 0x01	; 1
    2402:	67 85       	ldd	r22, Z+15	; 0x0f
    2404:	66 23       	and	r22, r22
    2406:	ec f3       	brlt	.-6      	; 0x2402 <nvm_eeprom_read_buffer+0xa>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    2408:	cc ec       	ldi	r28, 0xCC	; 204
    240a:	d1 e0       	ldi	r29, 0x01	; 1
    240c:	68 81       	ld	r22, Y
    240e:	68 60       	ori	r22, 0x08	; 8
    2410:	68 83       	st	Y, r22
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    2412:	bc 01       	movw	r22, r24
    2414:	70 5f       	subi	r23, 0xF0	; 240
    2416:	c9 01       	movw	r24, r18
    2418:	0c d6       	rcall	.+3096   	; 0x3032 <memcpy>
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    241a:	88 81       	ld	r24, Y
    241c:	87 7f       	andi	r24, 0xF7	; 247
    241e:	88 83       	st	Y, r24
	eeprom_disable_mapping();
}
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	08 95       	ret

00002426 <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2426:	e0 ec       	ldi	r30, 0xC0	; 192
    2428:	f1 e0       	ldi	r31, 0x01	; 1
    242a:	87 85       	ldd	r24, Z+15	; 0x0f
    242c:	88 23       	and	r24, r24
    242e:	ec f3       	brlt	.-6      	; 0x242a <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    2430:	e0 ec       	ldi	r30, 0xC0	; 192
    2432:	f1 e0       	ldi	r31, 0x01	; 1
    2434:	87 85       	ldd	r24, Z+15	; 0x0f
    2436:	81 ff       	sbrs	r24, 1
    2438:	06 c0       	rjmp	.+12     	; 0x2446 <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    243a:	86 e3       	ldi	r24, 0x36	; 54
    243c:	82 87       	std	Z+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    243e:	61 e0       	ldi	r22, 0x01	; 1
    2440:	8b ec       	ldi	r24, 0xCB	; 203
    2442:	91 e0       	ldi	r25, 0x01	; 1
    2444:	c0 c0       	rjmp	.+384    	; 0x25c6 <ccp_write_io>
    2446:	08 95       	ret

00002448 <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2448:	e0 ec       	ldi	r30, 0xC0	; 192
    244a:	f1 e0       	ldi	r31, 0x01	; 1
    244c:	97 85       	ldd	r25, Z+15	; 0x0f
    244e:	99 23       	and	r25, r25
    2450:	ec f3       	brlt	.-6      	; 0x244c <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    2452:	ec ec       	ldi	r30, 0xCC	; 204
    2454:	f1 e0       	ldi	r31, 0x01	; 1
    2456:	90 81       	ld	r25, Z
    2458:	98 60       	ori	r25, 0x08	; 8
    245a:	90 83       	st	Z, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    245c:	a8 2f       	mov	r26, r24
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	b0 5f       	subi	r27, 0xF0	; 240
    2462:	6c 93       	st	X, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    2464:	80 81       	ld	r24, Z
    2466:	87 7f       	andi	r24, 0xF7	; 247
    2468:	80 83       	st	Z, r24
    246a:	08 95       	ret

0000246c <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    246c:	ff 92       	push	r15
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	18 2f       	mov	r17, r24
    2478:	f9 2e       	mov	r15, r25
    247a:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    247c:	e0 ec       	ldi	r30, 0xC0	; 192
    247e:	f1 e0       	ldi	r31, 0x01	; 1
    2480:	02 85       	ldd	r16, Z+10	; 0x0a
	nvm_eeprom_flush_buffer();
    2482:	d1 df       	rcall	.-94     	; 0x2426 <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2484:	e0 ec       	ldi	r30, 0xC0	; 192
    2486:	f1 e0       	ldi	r31, 0x01	; 1
    2488:	27 85       	ldd	r18, Z+15	; 0x0f
    248a:	22 23       	and	r18, r18
    248c:	ec f3       	brlt	.-6      	; 0x2488 <nvm_eeprom_write_byte+0x1c>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    248e:	6c 2f       	mov	r22, r28
    2490:	81 2f       	mov	r24, r17
    2492:	da df       	rcall	.-76     	; 0x2448 <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    2494:	c0 ec       	ldi	r28, 0xC0	; 192
    2496:	d1 e0       	ldi	r29, 0x01	; 1
    2498:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    249a:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    249c:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    249e:	85 e3       	ldi	r24, 0x35	; 53
    24a0:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    24a2:	61 e0       	ldi	r22, 0x01	; 1
    24a4:	8b ec       	ldi	r24, 0xCB	; 203
    24a6:	91 e0       	ldi	r25, 0x01	; 1
    24a8:	8e d0       	rcall	.+284    	; 0x25c6 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    24aa:	0a 87       	std	Y+10, r16	; 0x0a
}
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	ff 90       	pop	r15
    24b6:	08 95       	ret

000024b8 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    24b8:	ef 92       	push	r14
    24ba:	ff 92       	push	r15
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    24c6:	e0 ec       	ldi	r30, 0xC0	; 192
    24c8:	f1 e0       	ldi	r31, 0x01	; 1
    24ca:	87 85       	ldd	r24, Z+15	; 0x0f
    24cc:	88 23       	and	r24, r24
    24ce:	ec f3       	brlt	.-6      	; 0x24ca <nvm_eeprom_load_page_to_buffer+0x12>
    24d0:	78 01       	movw	r14, r16
    24d2:	80 e2       	ldi	r24, 0x20	; 32
    24d4:	e8 0e       	add	r14, r24
    24d6:	f1 1c       	adc	r15, r1
    24d8:	e8 01       	movw	r28, r16
    24da:	8c 2f       	mov	r24, r28
    24dc:	80 1b       	sub	r24, r16
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
    24de:	69 91       	ld	r22, Y+
    24e0:	b3 df       	rcall	.-154    	; 0x2448 <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    24e2:	ce 15       	cp	r28, r14
    24e4:	df 05       	cpc	r29, r15
    24e6:	c9 f7       	brne	.-14     	; 0x24da <nvm_eeprom_load_page_to_buffer+0x22>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	ff 90       	pop	r15
    24f2:	ef 90       	pop	r14
    24f4:	08 95       	ret

000024f6 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    24f6:	1f 93       	push	r17
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	e0 ec       	ldi	r30, 0xC0	; 192
    24fe:	f1 e0       	ldi	r31, 0x01	; 1
    2500:	97 85       	ldd	r25, Z+15	; 0x0f
    2502:	99 23       	and	r25, r25
    2504:	ec f3       	brlt	.-6      	; 0x2500 <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    2506:	20 e2       	ldi	r18, 0x20	; 32
    2508:	82 9f       	mul	r24, r18
    250a:	c0 01       	movw	r24, r0
    250c:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    250e:	c0 ec       	ldi	r28, 0xC0	; 192
    2510:	d1 e0       	ldi	r29, 0x01	; 1
    2512:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    2514:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    2516:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    2518:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    251a:	85 e3       	ldi	r24, 0x35	; 53
    251c:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    251e:	61 e0       	ldi	r22, 0x01	; 1
    2520:	8b ec       	ldi	r24, 0xCB	; 203
    2522:	91 e0       	ldi	r25, 0x01	; 1
    2524:	50 d0       	rcall	.+160    	; 0x25c6 <ccp_write_io>
	NVM.CMD = old_cmd;
    2526:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	1f 91       	pop	r17
    252e:	08 95       	ret

00002530 <nvm_eeprom_erase_and_write_buffer>:
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
    2530:	cf 92       	push	r12
    2532:	df 92       	push	r13
    2534:	ef 92       	push	r14
    2536:	ff 92       	push	r15
    2538:	0f 93       	push	r16
    253a:	1f 93       	push	r17
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	ec 01       	movw	r28, r24
    2542:	7b 01       	movw	r14, r22
    2544:	8a 01       	movw	r16, r20
	while (len) {
    2546:	41 15       	cp	r20, r1
    2548:	51 05       	cpc	r21, r1
    254a:	51 f1       	breq	.+84     	; 0x25a0 <nvm_eeprom_erase_and_write_buffer+0x70>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
    254c:	ce 01       	movw	r24, r28
    254e:	8f 71       	andi	r24, 0x1F	; 31
    2550:	99 27       	eor	r25, r25
    2552:	89 2b       	or	r24, r25
    2554:	b1 f4       	brne	.+44     	; 0x2582 <nvm_eeprom_erase_and_write_buffer+0x52>
    2556:	00 32       	cpi	r16, 0x20	; 32
    2558:	11 05       	cpc	r17, r1
    255a:	98 f0       	brcs	.+38     	; 0x2582 <nvm_eeprom_erase_and_write_buffer+0x52>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
    255c:	c7 01       	movw	r24, r14
    255e:	ac df       	rcall	.-168    	; 0x24b8 <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
    2560:	ce 01       	movw	r24, r28
    2562:	96 95       	lsr	r25
    2564:	87 95       	ror	r24
    2566:	92 95       	swap	r25
    2568:	82 95       	swap	r24
    256a:	8f 70       	andi	r24, 0x0F	; 15
    256c:	89 27       	eor	r24, r25
    256e:	9f 70       	andi	r25, 0x0F	; 15
    2570:	89 27       	eor	r24, r25
    2572:	c1 df       	rcall	.-126    	; 0x24f6 <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
    2574:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
    2576:	80 e2       	ldi	r24, 0x20	; 32
    2578:	e8 0e       	add	r14, r24
    257a:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
    257c:	00 52       	subi	r16, 0x20	; 32
    257e:	11 09       	sbc	r17, r1
    2580:	0c c0       	rjmp	.+24     	; 0x259a <nvm_eeprom_erase_and_write_buffer+0x6a>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    2582:	6e 01       	movw	r12, r28
    2584:	ef ef       	ldi	r30, 0xFF	; 255
    2586:	ce 1a       	sub	r12, r30
    2588:	de 0a       	sbc	r13, r30
    258a:	f7 01       	movw	r30, r14
    258c:	61 91       	ld	r22, Z+
    258e:	7f 01       	movw	r14, r30
    2590:	ce 01       	movw	r24, r28
    2592:	6c df       	rcall	.-296    	; 0x246c <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
    2594:	01 50       	subi	r16, 0x01	; 1
    2596:	11 09       	sbc	r17, r1
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    2598:	e6 01       	movw	r28, r12
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
	while (len) {
    259a:	01 15       	cp	r16, r1
    259c:	11 05       	cpc	r17, r1
    259e:	b1 f6       	brne	.-84     	; 0x254c <nvm_eeprom_erase_and_write_buffer+0x1c>
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	1f 91       	pop	r17
    25a6:	0f 91       	pop	r16
    25a8:	ff 90       	pop	r15
    25aa:	ef 90       	pop	r14
    25ac:	df 90       	pop	r13
    25ae:	cf 90       	pop	r12
    25b0:	08 95       	ret

000025b2 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    25b2:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    25b6:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    25b8:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    25ba:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    25be:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    25c0:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    25c4:	08 95       	ret

000025c6 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    25c6:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    25c8:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    25ca:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    25cc:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    25ce:	60 83       	st	Z, r22
	ret                             // Return to caller
    25d0:	08 95       	ret

000025d2 <init_onepos>:

#include "../onepos.h"

void init_onepos(void)
{
	sysclk_init();
    25d2:	9e de       	rcall	.-708    	; 0x2310 <sysclk_init>
	
	#ifdef ENABLE_RTC
	// 	rtc_init();
	#endif
	#ifdef ENABLE_USB
		usb_init();
    25d4:	84 d4       	rcall	.+2312   	; 0x2ede <usb_init>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    25d6:	e0 e4       	ldi	r30, 0x40	; 64
    25d8:	f6 e0       	ldi	r31, 0x06	; 6
    25da:	88 e0       	ldi	r24, 0x08	; 8
    25dc:	82 83       	std	Z+2, r24	; 0x02
    25de:	94 e0       	ldi	r25, 0x04	; 4
    25e0:	92 83       	std	Z+2, r25	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    25e2:	a0 e0       	ldi	r26, 0x00	; 0
    25e4:	b6 e0       	ldi	r27, 0x06	; 6
    25e6:	20 e4       	ldi	r18, 0x40	; 64
    25e8:	11 96       	adiw	r26, 0x01	; 1
    25ea:	2c 93       	st	X, r18
    25ec:	11 97       	sbiw	r26, 0x01	; 1
    25ee:	30 e8       	ldi	r19, 0x80	; 128
    25f0:	11 96       	adiw	r26, 0x01	; 1
    25f2:	3c 93       	st	X, r19
    25f4:	a0 e2       	ldi	r26, 0x20	; 32
    25f6:	b6 e0       	ldi	r27, 0x06	; 6
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	11 96       	adiw	r26, 0x01	; 1
    25fc:	4c 93       	st	X, r20
    25fe:	11 97       	sbiw	r26, 0x01	; 1
    2600:	42 e0       	ldi	r20, 0x02	; 2
    2602:	11 96       	adiw	r26, 0x01	; 1
    2604:	4c 93       	st	X, r20
    2606:	a0 e8       	ldi	r26, 0x80	; 128
    2608:	b6 e0       	ldi	r27, 0x06	; 6
    260a:	11 96       	adiw	r26, 0x01	; 1
    260c:	4c 93       	st	X, r20
    260e:	11 97       	sbiw	r26, 0x01	; 1
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    2610:	12 96       	adiw	r26, 0x02	; 2
    2612:	9c 93       	st	X, r25
    2614:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    2616:	11 96       	adiw	r26, 0x01	; 1
    2618:	8c 93       	st	X, r24
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    261a:	a0 e6       	ldi	r26, 0x60	; 96
    261c:	b6 e0       	ldi	r27, 0x06	; 6
    261e:	12 96       	adiw	r26, 0x02	; 2
    2620:	9c 93       	st	X, r25
    2622:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    2624:	11 96       	adiw	r26, 0x01	; 1
    2626:	8c 93       	st	X, r24
    2628:	80 e1       	ldi	r24, 0x10	; 16
    262a:	81 83       	std	Z+1, r24	; 0x01
    262c:	80 e2       	ldi	r24, 0x20	; 32
    262e:	81 83       	std	Z+1, r24	; 0x01
    2630:	31 83       	std	Z+1, r19	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    2632:	22 83       	std	Z+2, r18	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2634:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2636:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    2638:	e6 e5       	ldi	r30, 0x56	; 86
    263a:	f6 e0       	ldi	r31, 0x06	; 6
    263c:	90 81       	ld	r25, Z
    263e:	97 70       	andi	r25, 0x07	; 7
    2640:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    2642:	90 81       	ld	r25, Z
    2644:	90 61       	ori	r25, 0x10	; 16
    2646:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2648:	8f bf       	out	0x3f, r24	; 63
    264a:	08 95       	ret

0000264c <init_animation>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    264c:	80 e4       	ldi	r24, 0x40	; 64
    264e:	e0 e0       	ldi	r30, 0x00	; 0
    2650:	f6 e0       	ldi	r31, 0x06	; 6
    2652:	85 83       	std	Z+5, r24	; 0x05
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	92 ee       	ldi	r25, 0xE2	; 226
    2658:	a4 e0       	ldi	r26, 0x04	; 4
    265a:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	a1 09       	sbc	r26, r1
    2660:	b1 09       	sbc	r27, r1
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	a1 05       	cpc	r26, r1
    2666:	b1 05       	cpc	r27, r1
    2668:	c9 f7       	brne	.-14     	; 0x265c <init_animation+0x10>
    266a:	80 e8       	ldi	r24, 0x80	; 128
    266c:	e0 e0       	ldi	r30, 0x00	; 0
    266e:	f6 e0       	ldi	r31, 0x06	; 6
    2670:	85 83       	std	Z+5, r24	; 0x05
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	92 ee       	ldi	r25, 0xE2	; 226
    2676:	a4 e0       	ldi	r26, 0x04	; 4
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	a1 09       	sbc	r26, r1
    267e:	b1 09       	sbc	r27, r1
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	a1 05       	cpc	r26, r1
    2684:	b1 05       	cpc	r27, r1
    2686:	c9 f7       	brne	.-14     	; 0x267a <init_animation+0x2e>
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	e0 e2       	ldi	r30, 0x20	; 32
    268c:	f6 e0       	ldi	r31, 0x06	; 6
    268e:	85 83       	std	Z+5, r24	; 0x05
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	92 ee       	ldi	r25, 0xE2	; 226
    2694:	a4 e0       	ldi	r26, 0x04	; 4
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	a1 09       	sbc	r26, r1
    269c:	b1 09       	sbc	r27, r1
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	a1 05       	cpc	r26, r1
    26a2:	b1 05       	cpc	r27, r1
    26a4:	c9 f7       	brne	.-14     	; 0x2698 <init_animation+0x4c>
    26a6:	82 e0       	ldi	r24, 0x02	; 2
    26a8:	e0 e2       	ldi	r30, 0x20	; 32
    26aa:	f6 e0       	ldi	r31, 0x06	; 6
    26ac:	85 83       	std	Z+5, r24	; 0x05
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	92 ee       	ldi	r25, 0xE2	; 226
    26b2:	a4 e0       	ldi	r26, 0x04	; 4
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	a1 09       	sbc	r26, r1
    26ba:	b1 09       	sbc	r27, r1
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	a1 05       	cpc	r26, r1
    26c0:	b1 05       	cpc	r27, r1
    26c2:	c9 f7       	brne	.-14     	; 0x26b6 <init_animation+0x6a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    26c4:	80 e4       	ldi	r24, 0x40	; 64
    26c6:	e0 e0       	ldi	r30, 0x00	; 0
    26c8:	f6 e0       	ldi	r31, 0x06	; 6
    26ca:	86 83       	std	Z+6, r24	; 0x06
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	92 ee       	ldi	r25, 0xE2	; 226
    26d0:	a4 e0       	ldi	r26, 0x04	; 4
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	a1 09       	sbc	r26, r1
    26d8:	b1 09       	sbc	r27, r1
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	a1 05       	cpc	r26, r1
    26de:	b1 05       	cpc	r27, r1
    26e0:	c9 f7       	brne	.-14     	; 0x26d4 <init_animation+0x88>
    26e2:	80 e8       	ldi	r24, 0x80	; 128
    26e4:	e0 e0       	ldi	r30, 0x00	; 0
    26e6:	f6 e0       	ldi	r31, 0x06	; 6
    26e8:	86 83       	std	Z+6, r24	; 0x06
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	92 ee       	ldi	r25, 0xE2	; 226
    26ee:	a4 e0       	ldi	r26, 0x04	; 4
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	a1 09       	sbc	r26, r1
    26f6:	b1 09       	sbc	r27, r1
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	a1 05       	cpc	r26, r1
    26fc:	b1 05       	cpc	r27, r1
    26fe:	c9 f7       	brne	.-14     	; 0x26f2 <init_animation+0xa6>
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	e0 e2       	ldi	r30, 0x20	; 32
    2704:	f6 e0       	ldi	r31, 0x06	; 6
    2706:	86 83       	std	Z+6, r24	; 0x06
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	92 ee       	ldi	r25, 0xE2	; 226
    270c:	a4 e0       	ldi	r26, 0x04	; 4
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	a1 09       	sbc	r26, r1
    2714:	b1 09       	sbc	r27, r1
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	a1 05       	cpc	r26, r1
    271a:	b1 05       	cpc	r27, r1
    271c:	c9 f7       	brne	.-14     	; 0x2710 <init_animation+0xc4>
    271e:	82 e0       	ldi	r24, 0x02	; 2
    2720:	e0 e2       	ldi	r30, 0x20	; 32
    2722:	f6 e0       	ldi	r31, 0x06	; 6
    2724:	86 83       	std	Z+6, r24	; 0x06
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	92 ee       	ldi	r25, 0xE2	; 226
    272a:	a4 e0       	ldi	r26, 0x04	; 4
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	a1 09       	sbc	r26, r1
    2732:	b1 09       	sbc	r27, r1
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	a1 05       	cpc	r26, r1
    2738:	b1 05       	cpc	r27, r1
    273a:	c9 f7       	brne	.-14     	; 0x272e <init_animation+0xe2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    273c:	80 e4       	ldi	r24, 0x40	; 64
    273e:	e0 e0       	ldi	r30, 0x00	; 0
    2740:	f6 e0       	ldi	r31, 0x06	; 6
    2742:	85 83       	std	Z+5, r24	; 0x05
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	94 ec       	ldi	r25, 0xC4	; 196
    2748:	a9 e0       	ldi	r26, 0x09	; 9
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	a1 09       	sbc	r26, r1
    2750:	b1 09       	sbc	r27, r1
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	a1 05       	cpc	r26, r1
    2756:	b1 05       	cpc	r27, r1
    2758:	c9 f7       	brne	.-14     	; 0x274c <init_animation+0x100>
    275a:	80 e8       	ldi	r24, 0x80	; 128
    275c:	e0 e0       	ldi	r30, 0x00	; 0
    275e:	f6 e0       	ldi	r31, 0x06	; 6
    2760:	85 83       	std	Z+5, r24	; 0x05
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	94 ec       	ldi	r25, 0xC4	; 196
    2766:	a9 e0       	ldi	r26, 0x09	; 9
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	a1 09       	sbc	r26, r1
    276e:	b1 09       	sbc	r27, r1
    2770:	00 97       	sbiw	r24, 0x00	; 0
    2772:	a1 05       	cpc	r26, r1
    2774:	b1 05       	cpc	r27, r1
    2776:	c9 f7       	brne	.-14     	; 0x276a <init_animation+0x11e>
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	e0 e2       	ldi	r30, 0x20	; 32
    277c:	f6 e0       	ldi	r31, 0x06	; 6
    277e:	85 83       	std	Z+5, r24	; 0x05
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	94 ec       	ldi	r25, 0xC4	; 196
    2784:	a9 e0       	ldi	r26, 0x09	; 9
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	a1 09       	sbc	r26, r1
    278c:	b1 09       	sbc	r27, r1
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	a1 05       	cpc	r26, r1
    2792:	b1 05       	cpc	r27, r1
    2794:	c9 f7       	brne	.-14     	; 0x2788 <init_animation+0x13c>
    2796:	82 e0       	ldi	r24, 0x02	; 2
    2798:	e0 e2       	ldi	r30, 0x20	; 32
    279a:	f6 e0       	ldi	r31, 0x06	; 6
    279c:	85 83       	std	Z+5, r24	; 0x05
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	94 ec       	ldi	r25, 0xC4	; 196
    27a2:	a9 e0       	ldi	r26, 0x09	; 9
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	a1 09       	sbc	r26, r1
    27aa:	b1 09       	sbc	r27, r1
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	a1 05       	cpc	r26, r1
    27b0:	b1 05       	cpc	r27, r1
    27b2:	c9 f7       	brne	.-14     	; 0x27a6 <init_animation+0x15a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    27b4:	80 e4       	ldi	r24, 0x40	; 64
    27b6:	e0 e0       	ldi	r30, 0x00	; 0
    27b8:	f6 e0       	ldi	r31, 0x06	; 6
    27ba:	86 83       	std	Z+6, r24	; 0x06
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	94 ec       	ldi	r25, 0xC4	; 196
    27c0:	a9 e0       	ldi	r26, 0x09	; 9
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	a1 09       	sbc	r26, r1
    27c8:	b1 09       	sbc	r27, r1
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	a1 05       	cpc	r26, r1
    27ce:	b1 05       	cpc	r27, r1
    27d0:	c9 f7       	brne	.-14     	; 0x27c4 <init_animation+0x178>
    27d2:	80 e8       	ldi	r24, 0x80	; 128
    27d4:	e0 e0       	ldi	r30, 0x00	; 0
    27d6:	f6 e0       	ldi	r31, 0x06	; 6
    27d8:	86 83       	std	Z+6, r24	; 0x06
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	94 ec       	ldi	r25, 0xC4	; 196
    27de:	a9 e0       	ldi	r26, 0x09	; 9
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	a1 09       	sbc	r26, r1
    27e6:	b1 09       	sbc	r27, r1
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	a1 05       	cpc	r26, r1
    27ec:	b1 05       	cpc	r27, r1
    27ee:	c9 f7       	brne	.-14     	; 0x27e2 <init_animation+0x196>
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	e0 e2       	ldi	r30, 0x20	; 32
    27f4:	f6 e0       	ldi	r31, 0x06	; 6
    27f6:	86 83       	std	Z+6, r24	; 0x06
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	94 ec       	ldi	r25, 0xC4	; 196
    27fc:	a9 e0       	ldi	r26, 0x09	; 9
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	a1 09       	sbc	r26, r1
    2804:	b1 09       	sbc	r27, r1
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	a1 05       	cpc	r26, r1
    280a:	b1 05       	cpc	r27, r1
    280c:	c9 f7       	brne	.-14     	; 0x2800 <init_animation+0x1b4>
    280e:	82 e0       	ldi	r24, 0x02	; 2
    2810:	e0 e2       	ldi	r30, 0x20	; 32
    2812:	f6 e0       	ldi	r31, 0x06	; 6
    2814:	86 83       	std	Z+6, r24	; 0x06
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	94 ec       	ldi	r25, 0xC4	; 196
    281a:	a9 e0       	ldi	r26, 0x09	; 9
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	a1 09       	sbc	r26, r1
    2822:	b1 09       	sbc	r27, r1
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	a1 05       	cpc	r26, r1
    2828:	b1 05       	cpc	r27, r1
    282a:	c9 f7       	brne	.-14     	; 0x281e <init_animation+0x1d2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    282c:	80 e4       	ldi	r24, 0x40	; 64
    282e:	e0 e0       	ldi	r30, 0x00	; 0
    2830:	f6 e0       	ldi	r31, 0x06	; 6
    2832:	85 83       	std	Z+5, r24	; 0x05
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	96 ea       	ldi	r25, 0xA6	; 166
    2838:	ae e0       	ldi	r26, 0x0E	; 14
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	a1 09       	sbc	r26, r1
    2840:	b1 09       	sbc	r27, r1
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	a1 05       	cpc	r26, r1
    2846:	b1 05       	cpc	r27, r1
    2848:	c9 f7       	brne	.-14     	; 0x283c <init_animation+0x1f0>
    284a:	80 e8       	ldi	r24, 0x80	; 128
    284c:	e0 e0       	ldi	r30, 0x00	; 0
    284e:	f6 e0       	ldi	r31, 0x06	; 6
    2850:	85 83       	std	Z+5, r24	; 0x05
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	96 ea       	ldi	r25, 0xA6	; 166
    2856:	ae e0       	ldi	r26, 0x0E	; 14
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	a1 09       	sbc	r26, r1
    285e:	b1 09       	sbc	r27, r1
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	a1 05       	cpc	r26, r1
    2864:	b1 05       	cpc	r27, r1
    2866:	c9 f7       	brne	.-14     	; 0x285a <init_animation+0x20e>
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	e0 e2       	ldi	r30, 0x20	; 32
    286c:	f6 e0       	ldi	r31, 0x06	; 6
    286e:	85 83       	std	Z+5, r24	; 0x05
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	96 ea       	ldi	r25, 0xA6	; 166
    2874:	ae e0       	ldi	r26, 0x0E	; 14
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	a1 09       	sbc	r26, r1
    287c:	b1 09       	sbc	r27, r1
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	a1 05       	cpc	r26, r1
    2882:	b1 05       	cpc	r27, r1
    2884:	c9 f7       	brne	.-14     	; 0x2878 <init_animation+0x22c>
    2886:	82 e0       	ldi	r24, 0x02	; 2
    2888:	e0 e2       	ldi	r30, 0x20	; 32
    288a:	f6 e0       	ldi	r31, 0x06	; 6
    288c:	85 83       	std	Z+5, r24	; 0x05
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	96 ea       	ldi	r25, 0xA6	; 166
    2892:	ae e0       	ldi	r26, 0x0E	; 14
    2894:	b0 e0       	ldi	r27, 0x00	; 0
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	a1 09       	sbc	r26, r1
    289a:	b1 09       	sbc	r27, r1
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	a1 05       	cpc	r26, r1
    28a0:	b1 05       	cpc	r27, r1
    28a2:	c9 f7       	brne	.-14     	; 0x2896 <init_animation+0x24a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    28a4:	80 e4       	ldi	r24, 0x40	; 64
    28a6:	e0 e0       	ldi	r30, 0x00	; 0
    28a8:	f6 e0       	ldi	r31, 0x06	; 6
    28aa:	86 83       	std	Z+6, r24	; 0x06
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	96 ea       	ldi	r25, 0xA6	; 166
    28b0:	ae e0       	ldi	r26, 0x0E	; 14
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	a1 09       	sbc	r26, r1
    28b8:	b1 09       	sbc	r27, r1
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	a1 05       	cpc	r26, r1
    28be:	b1 05       	cpc	r27, r1
    28c0:	c9 f7       	brne	.-14     	; 0x28b4 <init_animation+0x268>
    28c2:	80 e8       	ldi	r24, 0x80	; 128
    28c4:	e0 e0       	ldi	r30, 0x00	; 0
    28c6:	f6 e0       	ldi	r31, 0x06	; 6
    28c8:	86 83       	std	Z+6, r24	; 0x06
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	96 ea       	ldi	r25, 0xA6	; 166
    28ce:	ae e0       	ldi	r26, 0x0E	; 14
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	a1 09       	sbc	r26, r1
    28d6:	b1 09       	sbc	r27, r1
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	a1 05       	cpc	r26, r1
    28dc:	b1 05       	cpc	r27, r1
    28de:	c9 f7       	brne	.-14     	; 0x28d2 <init_animation+0x286>
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	e0 e2       	ldi	r30, 0x20	; 32
    28e4:	f6 e0       	ldi	r31, 0x06	; 6
    28e6:	86 83       	std	Z+6, r24	; 0x06
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	96 ea       	ldi	r25, 0xA6	; 166
    28ec:	ae e0       	ldi	r26, 0x0E	; 14
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	a1 09       	sbc	r26, r1
    28f4:	b1 09       	sbc	r27, r1
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	a1 05       	cpc	r26, r1
    28fa:	b1 05       	cpc	r27, r1
    28fc:	c9 f7       	brne	.-14     	; 0x28f0 <init_animation+0x2a4>
    28fe:	82 e0       	ldi	r24, 0x02	; 2
    2900:	e0 e2       	ldi	r30, 0x20	; 32
    2902:	f6 e0       	ldi	r31, 0x06	; 6
    2904:	86 83       	std	Z+6, r24	; 0x06
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	96 ea       	ldi	r25, 0xA6	; 166
    290a:	ae e0       	ldi	r26, 0x0E	; 14
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	a1 09       	sbc	r26, r1
    2912:	b1 09       	sbc	r27, r1
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	a1 05       	cpc	r26, r1
    2918:	b1 05       	cpc	r27, r1
    291a:	c9 f7       	brne	.-14     	; 0x290e <init_animation+0x2c2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    291c:	80 e4       	ldi	r24, 0x40	; 64
    291e:	e0 e0       	ldi	r30, 0x00	; 0
    2920:	f6 e0       	ldi	r31, 0x06	; 6
    2922:	85 83       	std	Z+5, r24	; 0x05
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	98 e8       	ldi	r25, 0x88	; 136
    2928:	a3 e1       	ldi	r26, 0x13	; 19
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	a1 09       	sbc	r26, r1
    2930:	b1 09       	sbc	r27, r1
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	a1 05       	cpc	r26, r1
    2936:	b1 05       	cpc	r27, r1
    2938:	c9 f7       	brne	.-14     	; 0x292c <init_animation+0x2e0>
    293a:	80 e8       	ldi	r24, 0x80	; 128
    293c:	e0 e0       	ldi	r30, 0x00	; 0
    293e:	f6 e0       	ldi	r31, 0x06	; 6
    2940:	85 83       	std	Z+5, r24	; 0x05
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	98 e8       	ldi	r25, 0x88	; 136
    2946:	a3 e1       	ldi	r26, 0x13	; 19
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	a1 09       	sbc	r26, r1
    294e:	b1 09       	sbc	r27, r1
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	a1 05       	cpc	r26, r1
    2954:	b1 05       	cpc	r27, r1
    2956:	c9 f7       	brne	.-14     	; 0x294a <init_animation+0x2fe>
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	e0 e2       	ldi	r30, 0x20	; 32
    295c:	f6 e0       	ldi	r31, 0x06	; 6
    295e:	85 83       	std	Z+5, r24	; 0x05
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	98 e8       	ldi	r25, 0x88	; 136
    2964:	a3 e1       	ldi	r26, 0x13	; 19
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	a1 09       	sbc	r26, r1
    296c:	b1 09       	sbc	r27, r1
    296e:	00 97       	sbiw	r24, 0x00	; 0
    2970:	a1 05       	cpc	r26, r1
    2972:	b1 05       	cpc	r27, r1
    2974:	c9 f7       	brne	.-14     	; 0x2968 <init_animation+0x31c>
    2976:	82 e0       	ldi	r24, 0x02	; 2
    2978:	e0 e2       	ldi	r30, 0x20	; 32
    297a:	f6 e0       	ldi	r31, 0x06	; 6
    297c:	85 83       	std	Z+5, r24	; 0x05
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	98 e8       	ldi	r25, 0x88	; 136
    2982:	a3 e1       	ldi	r26, 0x13	; 19
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	a1 09       	sbc	r26, r1
    298a:	b1 09       	sbc	r27, r1
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	a1 05       	cpc	r26, r1
    2990:	b1 05       	cpc	r27, r1
    2992:	c9 f7       	brne	.-14     	; 0x2986 <init_animation+0x33a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2994:	80 e4       	ldi	r24, 0x40	; 64
    2996:	e0 e0       	ldi	r30, 0x00	; 0
    2998:	f6 e0       	ldi	r31, 0x06	; 6
    299a:	86 83       	std	Z+6, r24	; 0x06
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	98 e8       	ldi	r25, 0x88	; 136
    29a0:	a3 e1       	ldi	r26, 0x13	; 19
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	a1 09       	sbc	r26, r1
    29a8:	b1 09       	sbc	r27, r1
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	a1 05       	cpc	r26, r1
    29ae:	b1 05       	cpc	r27, r1
    29b0:	c9 f7       	brne	.-14     	; 0x29a4 <init_animation+0x358>
    29b2:	80 e8       	ldi	r24, 0x80	; 128
    29b4:	e0 e0       	ldi	r30, 0x00	; 0
    29b6:	f6 e0       	ldi	r31, 0x06	; 6
    29b8:	86 83       	std	Z+6, r24	; 0x06
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	98 e8       	ldi	r25, 0x88	; 136
    29be:	a3 e1       	ldi	r26, 0x13	; 19
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	a1 09       	sbc	r26, r1
    29c6:	b1 09       	sbc	r27, r1
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	a1 05       	cpc	r26, r1
    29cc:	b1 05       	cpc	r27, r1
    29ce:	c9 f7       	brne	.-14     	; 0x29c2 <init_animation+0x376>
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	e0 e2       	ldi	r30, 0x20	; 32
    29d4:	f6 e0       	ldi	r31, 0x06	; 6
    29d6:	86 83       	std	Z+6, r24	; 0x06
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	98 e8       	ldi	r25, 0x88	; 136
    29dc:	a3 e1       	ldi	r26, 0x13	; 19
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	a1 09       	sbc	r26, r1
    29e4:	b1 09       	sbc	r27, r1
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	a1 05       	cpc	r26, r1
    29ea:	b1 05       	cpc	r27, r1
    29ec:	c9 f7       	brne	.-14     	; 0x29e0 <init_animation+0x394>
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	e0 e2       	ldi	r30, 0x20	; 32
    29f2:	f6 e0       	ldi	r31, 0x06	; 6
    29f4:	86 83       	std	Z+6, r24	; 0x06
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	98 e8       	ldi	r25, 0x88	; 136
    29fa:	a3 e1       	ldi	r26, 0x13	; 19
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	a1 09       	sbc	r26, r1
    2a02:	b1 09       	sbc	r27, r1
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	a1 05       	cpc	r26, r1
    2a08:	b1 05       	cpc	r27, r1
    2a0a:	c9 f7       	brne	.-14     	; 0x29fe <init_animation+0x3b2>
	delay_ms(160);
	led3(OFF);
	delay_ms(160);
	led4(OFF);
	delay_ms(160);
    2a0c:	08 95       	ret

00002a0e <onepos_save_cfg>:
	onepos_config.node_id = node_id;
}

void onepos_set_node_mode(uint8_t node_mode)
{
	onepos_config.node_mode = node_mode;
    2a0e:	48 e2       	ldi	r20, 0x28	; 40
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	63 e8       	ldi	r22, 0x83	; 131
    2a14:	76 e2       	ldi	r23, 0x26	; 38
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	8a cd       	rjmp	.-1260   	; 0x2530 <nvm_eeprom_erase_and_write_buffer>
    2a1c:	08 95       	ret

00002a1e <onepos_write_default_cfg>:
    2a1e:	88 ec       	ldi	r24, 0xC8	; 200
    2a20:	90 e1       	ldi	r25, 0x10	; 16
    2a22:	80 93 83 26 	sts	0x2683, r24
    2a26:	90 93 84 26 	sts	0x2684, r25
    2a2a:	86 e6       	ldi	r24, 0x66	; 102
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	80 93 85 26 	sts	0x2685, r24
    2a32:	90 93 86 26 	sts	0x2686, r25
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	80 93 87 26 	sts	0x2687, r24
    2a3c:	85 e1       	ldi	r24, 0x15	; 21
    2a3e:	e2 eb       	ldi	r30, 0xB2	; 178
    2a40:	f0 e2       	ldi	r31, 0x20	; 32
    2a42:	a8 e8       	ldi	r26, 0x88	; 136
    2a44:	b6 e2       	ldi	r27, 0x26	; 38
    2a46:	01 90       	ld	r0, Z+
    2a48:	0d 92       	st	X+, r0
    2a4a:	8a 95       	dec	r24
    2a4c:	e1 f7       	brne	.-8      	; 0x2a46 <onepos_write_default_cfg+0x28>
    2a4e:	85 e0       	ldi	r24, 0x05	; 5
    2a50:	e7 ec       	ldi	r30, 0xC7	; 199
    2a52:	f0 e2       	ldi	r31, 0x20	; 32
    2a54:	ad e9       	ldi	r26, 0x9D	; 157
    2a56:	b6 e2       	ldi	r27, 0x26	; 38
    2a58:	01 90       	ld	r0, Z+
    2a5a:	0d 92       	st	X+, r0
    2a5c:	8a 95       	dec	r24
    2a5e:	e1 f7       	brne	.-8      	; 0x2a58 <onepos_write_default_cfg+0x3a>
    2a60:	85 e0       	ldi	r24, 0x05	; 5
    2a62:	ec ec       	ldi	r30, 0xCC	; 204
    2a64:	f0 e2       	ldi	r31, 0x20	; 32
    2a66:	a2 ea       	ldi	r26, 0xA2	; 162
    2a68:	b6 e2       	ldi	r27, 0x26	; 38
    2a6a:	01 90       	ld	r0, Z+
    2a6c:	0d 92       	st	X+, r0
    2a6e:	8a 95       	dec	r24
    2a70:	e1 f7       	brne	.-8      	; 0x2a6a <onepos_write_default_cfg+0x4c>
    2a72:	84 e3       	ldi	r24, 0x34	; 52
    2a74:	90 e4       	ldi	r25, 0x40	; 64
    2a76:	80 93 a7 26 	sts	0x26A7, r24
    2a7a:	90 93 a8 26 	sts	0x26A8, r25
    2a7e:	80 93 a9 26 	sts	0x26A9, r24
    2a82:	90 93 aa 26 	sts	0x26AA, r25
    2a86:	c3 cf       	rjmp	.-122    	; 0x2a0e <onepos_save_cfg>
    2a88:	08 95       	ret

00002a8a <onepos_read_cfg>:
    2a8a:	48 e2       	ldi	r20, 0x28	; 40
    2a8c:	50 e0       	ldi	r21, 0x00	; 0
    2a8e:	63 e8       	ldi	r22, 0x83	; 131
    2a90:	76 e2       	ldi	r23, 0x26	; 38
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	b0 dc       	rcall	.-1696   	; 0x23f8 <nvm_eeprom_read_buffer>
    2a98:	80 91 83 26 	lds	r24, 0x2683
    2a9c:	90 91 84 26 	lds	r25, 0x2684
    2aa0:	88 3c       	cpi	r24, 0xC8	; 200
    2aa2:	90 41       	sbci	r25, 0x10	; 16
    2aa4:	19 f0       	breq	.+6      	; 0x2aac <onepos_read_cfg+0x22>
    2aa6:	bb df       	rcall	.-138    	; 0x2a1e <onepos_write_default_cfg>
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	08 95       	ret
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	08 95       	ret

00002ab0 <onepos_get_mem_check>:
    2ab0:	80 91 83 26 	lds	r24, 0x2683
    2ab4:	90 91 84 26 	lds	r25, 0x2684
    2ab8:	08 95       	ret

00002aba <onepos_get_namespaceID>:
    2aba:	68 e8       	ldi	r22, 0x88	; 136
    2abc:	76 e2       	ldi	r23, 0x26	; 38
    2abe:	c2 c2       	rjmp	.+1412   	; 0x3044 <strcpy>
    2ac0:	08 95       	ret

00002ac2 <onepos_get_ble_scan_interval>:
    2ac2:	6d e9       	ldi	r22, 0x9D	; 157
    2ac4:	76 e2       	ldi	r23, 0x26	; 38
    2ac6:	be c2       	rjmp	.+1404   	; 0x3044 <strcpy>
    2ac8:	08 95       	ret

00002aca <onepos_get_ble_scan_window>:
    2aca:	62 ea       	ldi	r22, 0xA2	; 162
    2acc:	76 e2       	ldi	r23, 0x26	; 38
    2ace:	ba c2       	rjmp	.+1396   	; 0x3044 <strcpy>
    2ad0:	08 95       	ret

00002ad2 <onepos_set_namespaceID>:
}

void onepos_set_namespaceID(char * str)
{
	strcpy(onepos_config.namespaceID,str);
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	88 e8       	ldi	r24, 0x88	; 136
    2ad6:	96 e2       	ldi	r25, 0x26	; 38
    2ad8:	b5 c2       	rjmp	.+1386   	; 0x3044 <strcpy>
    2ada:	08 95       	ret

00002adc <onepos_set_ble_scan_interval>:
}

void onepos_set_ble_scan_interval(char * str)
{
	strcpy(onepos_config.ble_scan_interval,str);
    2adc:	bc 01       	movw	r22, r24
    2ade:	8d e9       	ldi	r24, 0x9D	; 157
    2ae0:	96 e2       	ldi	r25, 0x26	; 38
    2ae2:	b0 c2       	rjmp	.+1376   	; 0x3044 <strcpy>
    2ae4:	08 95       	ret

00002ae6 <onepos_set_ble_scan_window>:
}

void onepos_set_ble_scan_window(char * str)
{
	strcpy(onepos_config.ble_scan_window,str);
    2ae6:	bc 01       	movw	r22, r24
    2ae8:	82 ea       	ldi	r24, 0xA2	; 162
    2aea:	96 e2       	ldi	r25, 0x26	; 38
    2aec:	ab c2       	rjmp	.+1366   	; 0x3044 <strcpy>
    2aee:	08 95       	ret

00002af0 <onepos_configure_interface>:
	printf("0. SAVE AND EXIT\n");
	printf("Select a number to change the current configuration: ");
}

uint8_t onepos_configure_interface(void)
{
    2af0:	2f 92       	push	r2
    2af2:	3f 92       	push	r3
    2af4:	5f 92       	push	r5
    2af6:	6f 92       	push	r6
    2af8:	7f 92       	push	r7
    2afa:	8f 92       	push	r8
    2afc:	9f 92       	push	r9
    2afe:	af 92       	push	r10
    2b00:	bf 92       	push	r11
    2b02:	cf 92       	push	r12
    2b04:	df 92       	push	r13
    2b06:	ef 92       	push	r14
    2b08:	ff 92       	push	r15
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	c1 55       	subi	r28, 0x51	; 81
    2b18:	d1 09       	sbc	r29, r1
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	de bf       	out	0x3e, r29	; 62
	char new_namespaceID[21];
	char new_ble_scan_interval[5]; 
	char new_ble_scan_window[5]; 
	uint8_t new_node_id=0;
    2b1e:	18 a2       	std	Y+32, r1	; 0x20
	uint8_t new_node_mode=0;
    2b20:	19 a2       	std	Y+33, r1	; 0x21
	uint8_t end_config = 0;
	uint8_t selection;
	uint16_t new_uwb_rx_antenna_delay = 0;
    2b22:	1b a2       	std	Y+35, r1	; 0x23
    2b24:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t new_uwb_tx_antenna_delay = 0;
    2b26:	1d a2       	std	Y+37, r1	; 0x25
    2b28:	1e a2       	std	Y+38, r1	; 0x26
	char new_namespaceID[21];
	char new_ble_scan_interval[5]; 
	char new_ble_scan_window[5]; 
	uint8_t new_node_id=0;
	uint8_t new_node_mode=0;
	uint8_t end_config = 0;
    2b2a:	51 2c       	mov	r5, r1
{
	char namespaceID[21];
	char ble_scan_interval[5];
	char ble_scan_window[5];
	
	onepos_get_namespaceID(namespaceID);
    2b2c:	6e 01       	movw	r12, r28
    2b2e:	27 e2       	ldi	r18, 0x27	; 39
    2b30:	c2 0e       	add	r12, r18
    2b32:	d1 1c       	adc	r13, r1
	onepos_get_ble_scan_interval(ble_scan_interval);
    2b34:	7e 01       	movw	r14, r28
    2b36:	31 e4       	ldi	r19, 0x41	; 65
    2b38:	e3 0e       	add	r14, r19
    2b3a:	f1 1c       	adc	r15, r1
	onepos_get_ble_scan_window(ble_scan_window);
    2b3c:	8e 01       	movw	r16, r28
    2b3e:	04 5c       	subi	r16, 0xC4	; 196
    2b40:	1f 4f       	sbci	r17, 0xFF	; 255
}


uint16_t onepos_get_mem_check(void)
{
	return onepos_config.mem_check;
    2b42:	0f 2e       	mov	r0, r31
    2b44:	f3 e8       	ldi	r31, 0x83	; 131
    2b46:	6f 2e       	mov	r6, r31
    2b48:	f6 e2       	ldi	r31, 0x26	; 38
    2b4a:	7f 2e       	mov	r7, r31
    2b4c:	f0 2d       	mov	r31, r0
	onepos_get_ble_scan_interval(ble_scan_interval);
	onepos_get_ble_scan_window(ble_scan_window);
	
	printf("\n-----------------------\n");
	printf("Current Configuration: \n");
	printf("   MEM CHECK         : %#x\n",onepos_get_mem_check());
    2b4e:	0f 2e       	mov	r0, r31
    2b50:	f2 e2       	ldi	r31, 0x22	; 34
    2b52:	8f 2e       	mov	r8, r31
    2b54:	f1 e2       	ldi	r31, 0x21	; 33
    2b56:	9f 2e       	mov	r9, r31
    2b58:	f0 2d       	mov	r31, r0
	uint16_t new_uwb_tx_antenna_delay = 0;
	
	while(!end_config)
	{
		print_menu1();
		scanf("%d", &selection);
    2b5a:	5e 01       	movw	r10, r28
    2b5c:	82 e2       	ldi	r24, 0x22	; 34
    2b5e:	a8 0e       	add	r10, r24
    2b60:	b1 1c       	adc	r11, r1
				scanf("%ld",&new_uwb_rx_antenna_delay);
				onepos_set_uwb_rx_antenna_delay(new_uwb_rx_antenna_delay);
			break;
			case 7:
				printf("\nWrite the new uwb tx antenna delay: ");
				scanf("%ld",&new_uwb_tx_antenna_delay);
    2b62:	fe 01       	movw	r30, r28
    2b64:	b5 96       	adiw	r30, 0x25	; 37
    2b66:	28 96       	adiw	r28, 0x08	; 8
    2b68:	ee af       	std	Y+62, r30	; 0x3e
    2b6a:	ff af       	std	Y+63, r31	; 0x3f
    2b6c:	28 97       	sbiw	r28, 0x08	; 8
				scanf("%4s",new_ble_scan_window);
				onepos_set_ble_scan_window(new_ble_scan_window);
			break;
			case 6:
				printf("\nWrite the new uwb rx antenna delay: ");
				scanf("%ld",&new_uwb_rx_antenna_delay);
    2b6e:	9e 01       	movw	r18, r28
    2b70:	2d 5d       	subi	r18, 0xDD	; 221
    2b72:	3f 4f       	sbci	r19, 0xFF	; 255
    2b74:	2a 96       	adiw	r28, 0x0a	; 10
    2b76:	2e af       	std	Y+62, r18	; 0x3e
    2b78:	3f af       	std	Y+63, r19	; 0x3f
    2b7a:	2a 97       	sbiw	r28, 0x0a	; 10
				scanf("%4s",new_ble_scan_interval);
				onepos_set_ble_scan_interval(new_ble_scan_interval);
			break;
			case 5:
				printf("\nWrite the new ble scan window( 16 hex): ");
				scanf("%4s",new_ble_scan_window);
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	4b 96       	adiw	r24, 0x1b	; 27
    2b80:	2c 96       	adiw	r28, 0x0c	; 12
    2b82:	8e af       	std	Y+62, r24	; 0x3e
    2b84:	9f af       	std	Y+63, r25	; 0x3f
    2b86:	2c 97       	sbiw	r28, 0x0c	; 12
				scanf("%20s",new_namespaceID);
				onepos_set_namespaceID(new_namespaceID);
			break;
			case 4:
				printf("\nWrite the new ble scan interval(16 hex): ");
				scanf("%4s",new_ble_scan_interval);
    2b88:	1e 01       	movw	r2, r28
    2b8a:	96 e1       	ldi	r25, 0x16	; 22
    2b8c:	29 0e       	add	r2, r25
    2b8e:	31 1c       	adc	r3, r1
				}
				onepos_set_node_mode(new_node_mode);
			break;
			case 3:
				printf("\nWrite the new namespace ID: ");
				scanf("%20s",new_namespaceID);
    2b90:	b4 97       	sbiw	r30, 0x24	; 36
    2b92:	2e 96       	adiw	r28, 0x0e	; 14
    2b94:	ee af       	std	Y+62, r30	; 0x3e
    2b96:	ff af       	std	Y+63, r31	; 0x3f
    2b98:	2e 97       	sbiw	r28, 0x0e	; 14
				scanf("%d",&new_node_id);
				onepos_set_node_id(new_node_id);
			break;
			case 2:
				printf("\nWrite 0 to start as Beacon and 1 to start as OnePos: ");
				scanf("%d",&new_node_mode);
    2b9a:	22 50       	subi	r18, 0x02	; 2
    2b9c:	31 09       	sbc	r19, r1
    2b9e:	60 96       	adiw	r28, 0x10	; 16
    2ba0:	2e af       	std	Y+62, r18	; 0x3e
    2ba2:	3f af       	std	Y+63, r19	; 0x3f
    2ba4:	60 97       	sbiw	r28, 0x10	; 16
		
		switch(selection)
		{
			case 1:
				printf("\nWrite new node ID: ");
				scanf("%d",&new_node_id);
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	80 96       	adiw	r24, 0x20	; 32
    2baa:	62 96       	adiw	r28, 0x12	; 18
    2bac:	8e af       	std	Y+62, r24	; 0x3e
    2bae:	9f af       	std	Y+63, r25	; 0x3f
    2bb0:	62 97       	sbiw	r28, 0x12	; 18
{
	char namespaceID[21];
	char ble_scan_interval[5];
	char ble_scan_window[5];
	
	onepos_get_namespaceID(namespaceID);
    2bb2:	c6 01       	movw	r24, r12
    2bb4:	82 df       	rcall	.-252    	; 0x2aba <onepos_get_namespaceID>
	onepos_get_ble_scan_interval(ble_scan_interval);
    2bb6:	c7 01       	movw	r24, r14
    2bb8:	84 df       	rcall	.-248    	; 0x2ac2 <onepos_get_ble_scan_interval>
	onepos_get_ble_scan_window(ble_scan_window);
    2bba:	c8 01       	movw	r24, r16
    2bbc:	86 df       	rcall	.-244    	; 0x2aca <onepos_get_ble_scan_window>
	
	printf("\n-----------------------\n");
    2bbe:	81 ef       	ldi	r24, 0xF1	; 241
    2bc0:	90 e2       	ldi	r25, 0x20	; 32
    2bc2:	58 d2       	rcall	.+1200   	; 0x3074 <puts>
	printf("Current Configuration: \n");
    2bc4:	8a e0       	ldi	r24, 0x0A	; 10
    2bc6:	91 e2       	ldi	r25, 0x21	; 33
    2bc8:	55 d2       	rcall	.+1194   	; 0x3074 <puts>
}


uint16_t onepos_get_mem_check(void)
{
	return onepos_config.mem_check;
    2bca:	f3 01       	movw	r30, r6
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
	onepos_get_ble_scan_interval(ble_scan_interval);
	onepos_get_ble_scan_window(ble_scan_window);
	
	printf("\n-----------------------\n");
	printf("Current Configuration: \n");
	printf("   MEM CHECK         : %#x\n",onepos_get_mem_check());
    2bd0:	9f 93       	push	r25
    2bd2:	8f 93       	push	r24
    2bd4:	9f 92       	push	r9
    2bd6:	8f 92       	push	r8
    2bd8:	3c d2       	rcall	.+1144   	; 0x3052 <printf>
	return onepos_config.mem_check;
}

uint16_t onepos_get_node_id(void)
{
	return onepos_config.node_id;
    2bda:	80 91 85 26 	lds	r24, 0x2685
    2bde:	90 91 86 26 	lds	r25, 0x2686
	onepos_get_ble_scan_window(ble_scan_window);
	
	printf("\n-----------------------\n");
	printf("Current Configuration: \n");
	printf("   MEM CHECK         : %#x\n",onepos_get_mem_check());
	printf("1. NODE ID           : %d\n",onepos_get_node_id());
    2be2:	9f 93       	push	r25
    2be4:	8f 93       	push	r24
    2be6:	8e e3       	ldi	r24, 0x3E	; 62
    2be8:	91 e2       	ldi	r25, 0x21	; 33
    2bea:	9f 93       	push	r25
    2bec:	8f 93       	push	r24
    2bee:	31 d2       	rcall	.+1122   	; 0x3052 <printf>
	return onepos_config.node_id;
}

uint8_t onepos_get_node_mode(void)
{
	return onepos_config.node_mode;
    2bf0:	80 91 87 26 	lds	r24, 0x2687
	
	printf("\n-----------------------\n");
	printf("Current Configuration: \n");
	printf("   MEM CHECK         : %#x\n",onepos_get_mem_check());
	printf("1. NODE ID           : %d\n",onepos_get_node_id());
	printf("2. NODE MODE         : %s\n",onepos_get_node_mode() ? "Start as OnePos" : "Start as Beacon" );
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	88 23       	and	r24, r24
    2bfa:	19 f0       	breq	.+6      	; 0x2c02 <onepos_configure_interface+0x112>
    2bfc:	81 ed       	ldi	r24, 0xD1	; 209
    2bfe:	90 e2       	ldi	r25, 0x20	; 32
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <onepos_configure_interface+0x116>
    2c02:	81 ee       	ldi	r24, 0xE1	; 225
    2c04:	90 e2       	ldi	r25, 0x20	; 32
    2c06:	9f 93       	push	r25
    2c08:	8f 93       	push	r24
    2c0a:	89 e5       	ldi	r24, 0x59	; 89
    2c0c:	91 e2       	ldi	r25, 0x21	; 33
    2c0e:	9f 93       	push	r25
    2c10:	8f 93       	push	r24
    2c12:	1f d2       	rcall	.+1086   	; 0x3052 <printf>
	printf("3. NAMESPACE ID      : %s\n",namespaceID);
    2c14:	df 92       	push	r13
    2c16:	cf 92       	push	r12
    2c18:	84 e7       	ldi	r24, 0x74	; 116
    2c1a:	91 e2       	ldi	r25, 0x21	; 33
    2c1c:	9f 93       	push	r25
    2c1e:	8f 93       	push	r24
    2c20:	18 d2       	rcall	.+1072   	; 0x3052 <printf>
	printf("4. BLE SCAN INTERVAL : %s\n",ble_scan_interval);
    2c22:	ff 92       	push	r15
    2c24:	ef 92       	push	r14
    2c26:	8f e8       	ldi	r24, 0x8F	; 143
    2c28:	91 e2       	ldi	r25, 0x21	; 33
    2c2a:	9f 93       	push	r25
    2c2c:	8f 93       	push	r24
    2c2e:	11 d2       	rcall	.+1058   	; 0x3052 <printf>
	printf("5. BLE SCAN WINDOW   : %s\n",ble_scan_window);
    2c30:	1f 93       	push	r17
    2c32:	0f 93       	push	r16
    2c34:	8a ea       	ldi	r24, 0xAA	; 170
    2c36:	91 e2       	ldi	r25, 0x21	; 33
    2c38:	9f 93       	push	r25
    2c3a:	8f 93       	push	r24
    2c3c:	0a d2       	rcall	.+1044   	; 0x3052 <printf>
	strcpy(onepos_config.ble_scan_window,str);
}

uint16_t onepos_get_uwb_rx_antenna_delay(void)
{
	return onepos_config.uwb_rx_antenna_delay;
    2c3e:	80 91 a7 26 	lds	r24, 0x26A7
    2c42:	90 91 a8 26 	lds	r25, 0x26A8
	printf("1. NODE ID           : %d\n",onepos_get_node_id());
	printf("2. NODE MODE         : %s\n",onepos_get_node_mode() ? "Start as OnePos" : "Start as Beacon" );
	printf("3. NAMESPACE ID      : %s\n",namespaceID);
	printf("4. BLE SCAN INTERVAL : %s\n",ble_scan_interval);
	printf("5. BLE SCAN WINDOW   : %s\n",ble_scan_window);
	printf("6. UWB RX ANT DELAY  : %d\n",onepos_get_uwb_rx_antenna_delay());
    2c46:	9f 93       	push	r25
    2c48:	8f 93       	push	r24
    2c4a:	85 ec       	ldi	r24, 0xC5	; 197
    2c4c:	91 e2       	ldi	r25, 0x21	; 33
    2c4e:	9f 93       	push	r25
    2c50:	8f 93       	push	r24
    2c52:	ff d1       	rcall	.+1022   	; 0x3052 <printf>
	onepos_config.uwb_rx_antenna_delay = delay;
}

uint16_t onepos_get_uwb_tx_antenna_delay(void)
{
	return onepos_config.uwb_tx_antenna_delay;
    2c54:	80 91 a9 26 	lds	r24, 0x26A9
    2c58:	90 91 aa 26 	lds	r25, 0x26AA
	printf("2. NODE MODE         : %s\n",onepos_get_node_mode() ? "Start as OnePos" : "Start as Beacon" );
	printf("3. NAMESPACE ID      : %s\n",namespaceID);
	printf("4. BLE SCAN INTERVAL : %s\n",ble_scan_interval);
	printf("5. BLE SCAN WINDOW   : %s\n",ble_scan_window);
	printf("6. UWB RX ANT DELAY  : %d\n",onepos_get_uwb_rx_antenna_delay());
	printf("7. UWB TX ANT DELAY  : %d\n",onepos_get_uwb_tx_antenna_delay());
    2c5c:	9f 93       	push	r25
    2c5e:	8f 93       	push	r24
    2c60:	80 ee       	ldi	r24, 0xE0	; 224
    2c62:	91 e2       	ldi	r25, 0x21	; 33
    2c64:	9f 93       	push	r25
    2c66:	8f 93       	push	r24
    2c68:	f4 d1       	rcall	.+1000   	; 0x3052 <printf>
	printf("0. SAVE AND EXIT\n");
    2c6a:	8b ef       	ldi	r24, 0xFB	; 251
    2c6c:	91 e2       	ldi	r25, 0x21	; 33
    2c6e:	02 d2       	rcall	.+1028   	; 0x3074 <puts>
	printf("Select a number to change the current configuration: ");
    2c70:	8c e0       	ldi	r24, 0x0C	; 12
    2c72:	92 e2       	ldi	r25, 0x22	; 34
    2c74:	9f 93       	push	r25
    2c76:	8f 93       	push	r24
    2c78:	ec d1       	rcall	.+984    	; 0x3052 <printf>
	uint16_t new_uwb_tx_antenna_delay = 0;
	
	while(!end_config)
	{
		print_menu1();
		scanf("%d", &selection);
    2c7a:	bf 92       	push	r11
    2c7c:	af 92       	push	r10
    2c7e:	82 e4       	ldi	r24, 0x42	; 66
    2c80:	92 e2       	ldi	r25, 0x22	; 34
    2c82:	9f 93       	push	r25
    2c84:	8f 93       	push	r24
    2c86:	23 d2       	rcall	.+1094   	; 0x30ce <scanf>
		
		switch(selection)
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	8a a1       	ldd	r24, Y+34	; 0x22
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	88 30       	cpi	r24, 0x08	; 8
    2c92:	91 05       	cpc	r25, r1
    2c94:	08 f0       	brcs	.+2      	; 0x2c98 <onepos_configure_interface+0x1a8>
    2c96:	e3 c0       	rjmp	.+454    	; 0x2e5e <onepos_configure_interface+0x36e>
    2c98:	fc 01       	movw	r30, r24
    2c9a:	eb 5f       	subi	r30, 0xFB	; 251
    2c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c9e:	c3 c1       	rjmp	.+902    	; 0x3026 <__tablejump2__>
		{
			case 1:
				printf("\nWrite new node ID: ");
    2ca0:	85 e4       	ldi	r24, 0x45	; 69
    2ca2:	92 e2       	ldi	r25, 0x22	; 34
    2ca4:	9f 93       	push	r25
    2ca6:	8f 93       	push	r24
    2ca8:	d4 d1       	rcall	.+936    	; 0x3052 <printf>
				scanf("%d",&new_node_id);
    2caa:	62 96       	adiw	r28, 0x12	; 18
    2cac:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cae:	62 97       	sbiw	r28, 0x12	; 18
    2cb0:	9f 93       	push	r25
    2cb2:	61 96       	adiw	r28, 0x11	; 17
    2cb4:	ef ad       	ldd	r30, Y+63	; 0x3f
    2cb6:	61 97       	sbiw	r28, 0x11	; 17
    2cb8:	ef 93       	push	r30
    2cba:	82 e4       	ldi	r24, 0x42	; 66
    2cbc:	92 e2       	ldi	r25, 0x22	; 34
    2cbe:	9f 93       	push	r25
    2cc0:	8f 93       	push	r24
    2cc2:	05 d2       	rcall	.+1034   	; 0x30ce <scanf>
				onepos_set_node_id(new_node_id);
    2cc4:	88 a1       	ldd	r24, Y+32	; 0x20
    2cc6:	90 e0       	ldi	r25, 0x00	; 0



void onepos_set_node_id(uint16_t node_id)
{
	onepos_config.node_id = node_id;
    2cc8:	80 93 85 26 	sts	0x2685, r24
    2ccc:	90 93 86 26 	sts	0x2686, r25
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	bc c0       	rjmp	.+376    	; 0x2e56 <onepos_configure_interface+0x366>
				printf("\nWrite new node ID: ");
				scanf("%d",&new_node_id);
				onepos_set_node_id(new_node_id);
			break;
			case 2:
				printf("\nWrite 0 to start as Beacon and 1 to start as OnePos: ");
    2cde:	8a e5       	ldi	r24, 0x5A	; 90
    2ce0:	92 e2       	ldi	r25, 0x22	; 34
    2ce2:	9f 93       	push	r25
    2ce4:	8f 93       	push	r24
    2ce6:	b5 d1       	rcall	.+874    	; 0x3052 <printf>
				scanf("%d",&new_node_mode);
    2ce8:	60 96       	adiw	r28, 0x10	; 16
    2cea:	ff ad       	ldd	r31, Y+63	; 0x3f
    2cec:	60 97       	sbiw	r28, 0x10	; 16
    2cee:	ff 93       	push	r31
    2cf0:	2f 96       	adiw	r28, 0x0f	; 15
    2cf2:	2f ad       	ldd	r18, Y+63	; 0x3f
    2cf4:	2f 97       	sbiw	r28, 0x0f	; 15
    2cf6:	2f 93       	push	r18
    2cf8:	82 e4       	ldi	r24, 0x42	; 66
    2cfa:	92 e2       	ldi	r25, 0x22	; 34
    2cfc:	9f 93       	push	r25
    2cfe:	8f 93       	push	r24
    2d00:	e6 d1       	rcall	.+972    	; 0x30ce <scanf>
				if ( !(new_node_mode == 0 | new_node_id == 1) )
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	98 a1       	ldd	r25, Y+32	; 0x20
    2d12:	91 30       	cpi	r25, 0x01	; 1
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <onepos_configure_interface+0x228>
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	88 23       	and	r24, r24
    2d1a:	49 f0       	breq	.+18     	; 0x2d2e <onepos_configure_interface+0x23e>
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	99 a1       	ldd	r25, Y+33	; 0x21
    2d20:	91 11       	cpse	r25, r1
    2d22:	01 c0       	rjmp	.+2      	; 0x2d26 <onepos_configure_interface+0x236>
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	88 23       	and	r24, r24
    2d28:	11 f0       	breq	.+4      	; 0x2d2e <onepos_configure_interface+0x23e>
				{
					new_node_mode = 1;
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	89 a3       	std	Y+33, r24	; 0x21
				}
				onepos_set_node_mode(new_node_mode);
    2d2e:	89 a1       	ldd	r24, Y+33	; 0x21
	onepos_config.node_id = node_id;
}

void onepos_set_node_mode(uint8_t node_mode)
{
	onepos_config.node_mode = node_mode;
    2d30:	80 93 87 26 	sts	0x2687, r24
    2d34:	90 c0       	rjmp	.+288    	; 0x2e56 <onepos_configure_interface+0x366>
					new_node_mode = 1;
				}
				onepos_set_node_mode(new_node_mode);
			break;
			case 3:
				printf("\nWrite the new namespace ID: ");
    2d36:	81 e9       	ldi	r24, 0x91	; 145
    2d38:	92 e2       	ldi	r25, 0x22	; 34
    2d3a:	9f 93       	push	r25
    2d3c:	8f 93       	push	r24
    2d3e:	89 d1       	rcall	.+786    	; 0x3052 <printf>
				scanf("%20s",new_namespaceID);
    2d40:	2e 96       	adiw	r28, 0x0e	; 14
    2d42:	3f ad       	ldd	r19, Y+63	; 0x3f
    2d44:	2e 97       	sbiw	r28, 0x0e	; 14
    2d46:	3f 93       	push	r19
    2d48:	2d 96       	adiw	r28, 0x0d	; 13
    2d4a:	8f ad       	ldd	r24, Y+63	; 0x3f
    2d4c:	2d 97       	sbiw	r28, 0x0d	; 13
    2d4e:	8f 93       	push	r24
    2d50:	8f ea       	ldi	r24, 0xAF	; 175
    2d52:	92 e2       	ldi	r25, 0x22	; 34
    2d54:	9f 93       	push	r25
    2d56:	8f 93       	push	r24
    2d58:	ba d1       	rcall	.+884    	; 0x30ce <scanf>
				onepos_set_namespaceID(new_namespaceID);
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	b9 de       	rcall	.-654    	; 0x2ad2 <onepos_set_namespaceID>
			break;
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	74 c0       	rjmp	.+232    	; 0x2e56 <onepos_configure_interface+0x366>
			case 4:
				printf("\nWrite the new ble scan interval(16 hex): ");
    2d6e:	84 eb       	ldi	r24, 0xB4	; 180
    2d70:	92 e2       	ldi	r25, 0x22	; 34
    2d72:	9f 93       	push	r25
    2d74:	8f 93       	push	r24
    2d76:	6d d1       	rcall	.+730    	; 0x3052 <printf>
				scanf("%4s",new_ble_scan_interval);
    2d78:	3f 92       	push	r3
    2d7a:	2f 92       	push	r2
    2d7c:	8f ed       	ldi	r24, 0xDF	; 223
    2d7e:	92 e2       	ldi	r25, 0x22	; 34
    2d80:	9f 93       	push	r25
    2d82:	8f 93       	push	r24
    2d84:	a4 d1       	rcall	.+840    	; 0x30ce <scanf>
				onepos_set_ble_scan_interval(new_ble_scan_interval);
    2d86:	c1 01       	movw	r24, r2
    2d88:	a9 de       	rcall	.-686    	; 0x2adc <onepos_set_ble_scan_interval>
			break;
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	5f c0       	rjmp	.+190    	; 0x2e56 <onepos_configure_interface+0x366>
			case 5:
				printf("\nWrite the new ble scan window( 16 hex): ");
    2d98:	83 ee       	ldi	r24, 0xE3	; 227
    2d9a:	92 e2       	ldi	r25, 0x22	; 34
    2d9c:	9f 93       	push	r25
    2d9e:	8f 93       	push	r24
    2da0:	58 d1       	rcall	.+688    	; 0x3052 <printf>
				scanf("%4s",new_ble_scan_window);
    2da2:	2c 96       	adiw	r28, 0x0c	; 12
    2da4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2da6:	2c 97       	sbiw	r28, 0x0c	; 12
    2da8:	9f 93       	push	r25
    2daa:	2b 96       	adiw	r28, 0x0b	; 11
    2dac:	ef ad       	ldd	r30, Y+63	; 0x3f
    2dae:	2b 97       	sbiw	r28, 0x0b	; 11
    2db0:	ef 93       	push	r30
    2db2:	8f ed       	ldi	r24, 0xDF	; 223
    2db4:	92 e2       	ldi	r25, 0x22	; 34
    2db6:	9f 93       	push	r25
    2db8:	8f 93       	push	r24
    2dba:	89 d1       	rcall	.+786    	; 0x30ce <scanf>
				onepos_set_ble_scan_window(new_ble_scan_window);
    2dbc:	ce 01       	movw	r24, r28
    2dbe:	4b 96       	adiw	r24, 0x1b	; 27
    2dc0:	92 de       	rcall	.-732    	; 0x2ae6 <onepos_set_ble_scan_window>
			break;
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	43 c0       	rjmp	.+134    	; 0x2e56 <onepos_configure_interface+0x366>
			case 6:
				printf("\nWrite the new uwb rx antenna delay: ");
    2dd0:	8d e0       	ldi	r24, 0x0D	; 13
    2dd2:	93 e2       	ldi	r25, 0x23	; 35
    2dd4:	9f 93       	push	r25
    2dd6:	8f 93       	push	r24
    2dd8:	3c d1       	rcall	.+632    	; 0x3052 <printf>
				scanf("%ld",&new_uwb_rx_antenna_delay);
    2dda:	2a 96       	adiw	r28, 0x0a	; 10
    2ddc:	ff ad       	ldd	r31, Y+63	; 0x3f
    2dde:	2a 97       	sbiw	r28, 0x0a	; 10
    2de0:	ff 93       	push	r31
    2de2:	29 96       	adiw	r28, 0x09	; 9
    2de4:	2f ad       	ldd	r18, Y+63	; 0x3f
    2de6:	29 97       	sbiw	r28, 0x09	; 9
    2de8:	2f 93       	push	r18
    2dea:	83 e3       	ldi	r24, 0x33	; 51
    2dec:	93 e2       	ldi	r25, 0x23	; 35
    2dee:	9f 93       	push	r25
    2df0:	8f 93       	push	r24
    2df2:	6d d1       	rcall	.+730    	; 0x30ce <scanf>
				onepos_set_uwb_rx_antenna_delay(new_uwb_rx_antenna_delay);
    2df4:	8b a1       	ldd	r24, Y+35	; 0x23
    2df6:	9c a1       	ldd	r25, Y+36	; 0x24
	return onepos_config.uwb_rx_antenna_delay;
}

void onepos_set_uwb_rx_antenna_delay(uint16_t delay)
{
	onepos_config.uwb_rx_antenna_delay = delay;
    2df8:	80 93 a7 26 	sts	0x26A7, r24
    2dfc:	90 93 a8 26 	sts	0x26A8, r25
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	24 c0       	rjmp	.+72     	; 0x2e56 <onepos_configure_interface+0x366>
				printf("\nWrite the new uwb rx antenna delay: ");
				scanf("%ld",&new_uwb_rx_antenna_delay);
				onepos_set_uwb_rx_antenna_delay(new_uwb_rx_antenna_delay);
			break;
			case 7:
				printf("\nWrite the new uwb tx antenna delay: ");
    2e0e:	87 e3       	ldi	r24, 0x37	; 55
    2e10:	93 e2       	ldi	r25, 0x23	; 35
    2e12:	9f 93       	push	r25
    2e14:	8f 93       	push	r24
    2e16:	1d d1       	rcall	.+570    	; 0x3052 <printf>
				scanf("%ld",&new_uwb_tx_antenna_delay);
    2e18:	28 96       	adiw	r28, 0x08	; 8
    2e1a:	3f ad       	ldd	r19, Y+63	; 0x3f
    2e1c:	28 97       	sbiw	r28, 0x08	; 8
    2e1e:	3f 93       	push	r19
    2e20:	27 96       	adiw	r28, 0x07	; 7
    2e22:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e24:	27 97       	sbiw	r28, 0x07	; 7
    2e26:	8f 93       	push	r24
    2e28:	83 e3       	ldi	r24, 0x33	; 51
    2e2a:	93 e2       	ldi	r25, 0x23	; 35
    2e2c:	9f 93       	push	r25
    2e2e:	8f 93       	push	r24
    2e30:	4e d1       	rcall	.+668    	; 0x30ce <scanf>
				onepos_set_uwb_tx_antenna_delay(new_uwb_tx_antenna_delay);
    2e32:	8d a1       	ldd	r24, Y+37	; 0x25
    2e34:	9e a1       	ldd	r25, Y+38	; 0x26
	return onepos_config.uwb_tx_antenna_delay;
}

void onepos_set_uwb_tx_antenna_delay(uint16_t delay)
{
	onepos_config.uwb_tx_antenna_delay = delay;
    2e36:	80 93 a9 26 	sts	0x26A9, r24
    2e3a:	90 93 aa 26 	sts	0x26AA, r25
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	05 c0       	rjmp	.+10     	; 0x2e56 <onepos_configure_interface+0x366>
				printf("\nWrite the new uwb tx antenna delay: ");
				scanf("%ld",&new_uwb_tx_antenna_delay);
				onepos_set_uwb_tx_antenna_delay(new_uwb_tx_antenna_delay);
			break;
			case 0:
				onepos_save_cfg();
    2e4c:	e0 dd       	rcall	.-1088   	; 0x2a0e <onepos_save_cfg>
				printf("\nConfiguration saved. Please restart the system\n");
    2e4e:	8d e5       	ldi	r24, 0x5D	; 93
    2e50:	93 e2       	ldi	r25, 0x23	; 35
    2e52:	10 d1       	rcall	.+544    	; 0x3074 <puts>
    2e54:	07 c0       	rjmp	.+14     	; 0x2e64 <onepos_configure_interface+0x374>
	uint8_t end_config = 0;
	uint8_t selection;
	uint16_t new_uwb_rx_antenna_delay = 0;
	uint16_t new_uwb_tx_antenna_delay = 0;
	
	while(!end_config)
    2e56:	55 20       	and	r5, r5
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <onepos_configure_interface+0x36c>
    2e5a:	ab ce       	rjmp	.-682    	; 0x2bb2 <onepos_configure_interface+0xc2>
    2e5c:	03 c0       	rjmp	.+6      	; 0x2e64 <onepos_configure_interface+0x374>
    2e5e:	55 20       	and	r5, r5
    2e60:	09 f4       	brne	.+2      	; 0x2e64 <onepos_configure_interface+0x374>
    2e62:	a7 ce       	rjmp	.-690    	; 0x2bb2 <onepos_configure_interface+0xc2>
			break;
		}
	}
	
	
}
    2e64:	cf 5a       	subi	r28, 0xAF	; 175
    2e66:	df 4f       	sbci	r29, 0xFF	; 255
    2e68:	cd bf       	out	0x3d, r28	; 61
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	1f 91       	pop	r17
    2e72:	0f 91       	pop	r16
    2e74:	ff 90       	pop	r15
    2e76:	ef 90       	pop	r14
    2e78:	df 90       	pop	r13
    2e7a:	cf 90       	pop	r12
    2e7c:	bf 90       	pop	r11
    2e7e:	af 90       	pop	r10
    2e80:	9f 90       	pop	r9
    2e82:	8f 90       	pop	r8
    2e84:	7f 90       	pop	r7
    2e86:	6f 90       	pop	r6
    2e88:	5f 90       	pop	r5
    2e8a:	3f 90       	pop	r3
    2e8c:	2f 90       	pop	r2
    2e8e:	08 95       	ret

00002e90 <usb_putchar_printf>:
	usb_putchar(*string++);
}


#ifdef PRINTF_USB
int usb_putchar_printf(char var, FILE *stream) {
    2e90:	cf 93       	push	r28
    2e92:	c8 2f       	mov	r28, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
    2e94:	8a 30       	cpi	r24, 0x0A	; 10
    2e96:	21 f4       	brne	.+8      	; 0x2ea0 <usb_putchar_printf+0x10>
	
}

void usb_putchar(char a)
{
	udi_cdc_putc(a);
    2e98:	8d e0       	ldi	r24, 0x0D	; 13
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	0e 94 19 04 	call	0x832	; 0x832 <udi_cdc_putc>
    2ea0:	8c 2f       	mov	r24, r28
    2ea2:	99 27       	eor	r25, r25
    2ea4:	87 fd       	sbrc	r24, 7
    2ea6:	90 95       	com	r25
    2ea8:	0e 94 19 04 	call	0x832	; 0x832 <udi_cdc_putc>
int usb_putchar_printf(char var, FILE *stream) {
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
	usb_putchar(var);
	return 0;
}
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	cf 91       	pop	r28
    2eb2:	08 95       	ret

00002eb4 <usb_getchar_scanf>:

int usb_getchar_scanf(FILE *stream)
{
    2eb4:	0f 93       	push	r16
    2eb6:	1f 93       	push	r17
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	8c 01       	movw	r16, r24
	return udi_cdc_getc();
}

int usb_is_rx_ready(void)
{
	return udi_cdc_is_rx_ready();
    2ebe:	0e 94 58 03 	call	0x6b0	; 0x6b0 <udi_cdc_is_rx_ready>

int usb_getchar_scanf(FILE *stream)
{
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
    2ec2:	88 23       	and	r24, r24
    2ec4:	e1 f3       	breq	.-8      	; 0x2ebe <usb_getchar_scanf+0xa>
	udi_cdc_putc(a);
}

char usb_getchar(void)
{
	return udi_cdc_getc();
    2ec6:	0e 94 a4 03 	call	0x748	; 0x748 <udi_cdc_getc>
    2eca:	ec 01       	movw	r28, r24
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
	u8Data=usb_getchar();
	//echo input data
	usb_putchar_printf(u8Data,stream);
    2ecc:	b8 01       	movw	r22, r16
    2ece:	e0 df       	rcall	.-64     	; 0x2e90 <usb_putchar_printf>
	// Return received data
	return u8Data;
}
    2ed0:	ce 01       	movw	r24, r28
    2ed2:	99 27       	eor	r25, r25
    2ed4:	df 91       	pop	r29
    2ed6:	cf 91       	pop	r28
    2ed8:	1f 91       	pop	r17
    2eda:	0f 91       	pop	r16
    2edc:	08 95       	ret

00002ede <usb_init>:

#include "./../include/usb_serial.h"

void usb_init(void)
{
	irq_initialize_vectors();
    2ede:	87 e0       	ldi	r24, 0x07	; 7
    2ee0:	e0 ea       	ldi	r30, 0xA0	; 160
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    2ee6:	78 94       	sei
	udc_start();
    2ee8:	0e 94 07 05 	call	0xa0e	; 0xa0e <udc_start>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    2eec:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <udd_attach>
	udc_attach();
	
	#ifdef PRINTF_USB
	// setup our stdio stream
	stdout = &mystdout;
    2ef0:	88 e9       	ldi	r24, 0x98	; 152
    2ef2:	90 e2       	ldi	r25, 0x20	; 32
    2ef4:	80 93 ae 26 	sts	0x26AE, r24
    2ef8:	90 93 af 26 	sts	0x26AF, r25
	stdin = &mystdout;
    2efc:	80 93 ac 26 	sts	0x26AC, r24
    2f00:	90 93 ad 26 	sts	0x26AD, r25
    2f04:	08 95       	ret

00002f06 <main>:
	}
}


int main (void)
{
    2f06:	cf 93       	push	r28
    2f08:	df 93       	push	r29
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	27 97       	sbiw	r28, 0x07	; 7
    2f10:	cd bf       	out	0x3d, r28	; 61
    2f12:	de bf       	out	0x3e, r29	; 62
	init_onepos();
    2f14:	5e db       	rcall	.-2372   	; 0x25d2 <init_onepos>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    2f16:	80 91 aa 20 	lds	r24, 0x20AA
    2f1a:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    2f1c:	80 91 ab 20 	lds	r24, 0x20AB
    2f20:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    2f22:	80 91 ac 20 	lds	r24, 0x20AC
    2f26:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    2f28:	80 91 a6 20 	lds	r24, 0x20A6
    2f2c:	90 91 a7 20 	lds	r25, 0x20A7
    2f30:	a0 91 a8 20 	lds	r26, 0x20A8
    2f34:	b0 91 a9 20 	lds	r27, 0x20A9
    2f38:	89 83       	std	Y+1, r24	; 0x01
    2f3a:	9a 83       	std	Y+2, r25	; 0x02
    2f3c:	ab 83       	std	Y+3, r26	; 0x03
    2f3e:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    2f40:	60 e1       	ldi	r22, 0x10	; 16
    2f42:	85 e0       	ldi	r24, 0x05	; 5
    2f44:	32 da       	rcall	.-2972   	; 0x23aa <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    2f46:	be 01       	movw	r22, r28
    2f48:	6f 5f       	subi	r22, 0xFF	; 255
    2f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4c:	80 ea       	ldi	r24, 0xA0	; 160
    2f4e:	9a e0       	ldi	r25, 0x0A	; 10
    2f50:	0e 94 13 0a 	call	0x1426	; 0x1426 <usart_init_rs232>
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	usart_serial_init(USART_RS485, &RS485_SERIAL_OPTIONS);
	
	init_animation();
    2f54:	7b db       	rcall	.-2314   	; 0x264c <init_animation>
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	9a e6       	ldi	r25, 0x6A	; 106
    2f5a:	a8 e1       	ldi	r26, 0x18	; 24
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	a1 09       	sbc	r26, r1
    2f62:	b1 09       	sbc	r27, r1
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	a1 05       	cpc	r26, r1
    2f68:	b1 05       	cpc	r27, r1
    2f6a:	c9 f7       	brne	.-14     	; 0x2f5e <main+0x58>
	

	delay_ms(200);
	
	uint8_t ret;
	ret = onepos_read_cfg();
    2f6c:	8e dd       	rcall	.-1252   	; 0x2a8a <onepos_read_cfg>
    2f6e:	18 2f       	mov	r17, r24
	printf("READ_CFG: %d. MEMCHECK = %x\n",ret,onepos_get_mem_check());
    2f70:	9f dd       	rcall	.-1218   	; 0x2ab0 <onepos_get_mem_check>
    2f72:	9f 93       	push	r25
    2f74:	8f 93       	push	r24
    2f76:	1f 92       	push	r1
    2f78:	1f 93       	push	r17
    2f7a:	8e ed       	ldi	r24, 0xDE	; 222
    2f7c:	93 e2       	ldi	r25, 0x23	; 35
    2f7e:	9f 93       	push	r25
    2f80:	8f 93       	push	r24
    2f82:	67 d0       	rcall	.+206    	; 0x3052 <printf>
	onepos_configure_interface();
    2f84:	b5 dd       	rcall	.-1174   	; 0x2af0 <onepos_configure_interface>
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	0f 90       	pop	r0
    2f90:	0f 90       	pop	r0

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    2f92:	e0 e0       	ldi	r30, 0x00	; 0
    2f94:	f6 e0       	ldi	r31, 0x06	; 6
    2f96:	60 e4       	ldi	r22, 0x40	; 64
    2f98:	50 e0       	ldi	r21, 0x00	; 0
    2f9a:	49 e0       	ldi	r20, 0x09	; 9
    2f9c:	3d e3       	ldi	r19, 0x3D	; 61
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	67 83       	std	Z+7, r22	; 0x07
    2fa2:	85 2f       	mov	r24, r21
    2fa4:	94 2f       	mov	r25, r20
    2fa6:	a3 2f       	mov	r26, r19
    2fa8:	b2 2f       	mov	r27, r18
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	a1 09       	sbc	r26, r1
    2fae:	b1 09       	sbc	r27, r1
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	a1 05       	cpc	r26, r1
    2fb4:	b1 05       	cpc	r27, r1
    2fb6:	c9 f7       	brne	.-14     	; 0x2faa <main+0xa4>
    2fb8:	f3 cf       	rjmp	.-26     	; 0x2fa0 <main+0x9a>

00002fba <__udivmodhi4>:
    2fba:	aa 1b       	sub	r26, r26
    2fbc:	bb 1b       	sub	r27, r27
    2fbe:	51 e1       	ldi	r21, 0x11	; 17
    2fc0:	07 c0       	rjmp	.+14     	; 0x2fd0 <__udivmodhi4_ep>

00002fc2 <__udivmodhi4_loop>:
    2fc2:	aa 1f       	adc	r26, r26
    2fc4:	bb 1f       	adc	r27, r27
    2fc6:	a6 17       	cp	r26, r22
    2fc8:	b7 07       	cpc	r27, r23
    2fca:	10 f0       	brcs	.+4      	; 0x2fd0 <__udivmodhi4_ep>
    2fcc:	a6 1b       	sub	r26, r22
    2fce:	b7 0b       	sbc	r27, r23

00002fd0 <__udivmodhi4_ep>:
    2fd0:	88 1f       	adc	r24, r24
    2fd2:	99 1f       	adc	r25, r25
    2fd4:	5a 95       	dec	r21
    2fd6:	a9 f7       	brne	.-22     	; 0x2fc2 <__udivmodhi4_loop>
    2fd8:	80 95       	com	r24
    2fda:	90 95       	com	r25
    2fdc:	bc 01       	movw	r22, r24
    2fde:	cd 01       	movw	r24, r26
    2fe0:	08 95       	ret

00002fe2 <__udivmodsi4>:
    2fe2:	a1 e2       	ldi	r26, 0x21	; 33
    2fe4:	1a 2e       	mov	r1, r26
    2fe6:	aa 1b       	sub	r26, r26
    2fe8:	bb 1b       	sub	r27, r27
    2fea:	fd 01       	movw	r30, r26
    2fec:	0d c0       	rjmp	.+26     	; 0x3008 <__udivmodsi4_ep>

00002fee <__udivmodsi4_loop>:
    2fee:	aa 1f       	adc	r26, r26
    2ff0:	bb 1f       	adc	r27, r27
    2ff2:	ee 1f       	adc	r30, r30
    2ff4:	ff 1f       	adc	r31, r31
    2ff6:	a2 17       	cp	r26, r18
    2ff8:	b3 07       	cpc	r27, r19
    2ffa:	e4 07       	cpc	r30, r20
    2ffc:	f5 07       	cpc	r31, r21
    2ffe:	20 f0       	brcs	.+8      	; 0x3008 <__udivmodsi4_ep>
    3000:	a2 1b       	sub	r26, r18
    3002:	b3 0b       	sbc	r27, r19
    3004:	e4 0b       	sbc	r30, r20
    3006:	f5 0b       	sbc	r31, r21

00003008 <__udivmodsi4_ep>:
    3008:	66 1f       	adc	r22, r22
    300a:	77 1f       	adc	r23, r23
    300c:	88 1f       	adc	r24, r24
    300e:	99 1f       	adc	r25, r25
    3010:	1a 94       	dec	r1
    3012:	69 f7       	brne	.-38     	; 0x2fee <__udivmodsi4_loop>
    3014:	60 95       	com	r22
    3016:	70 95       	com	r23
    3018:	80 95       	com	r24
    301a:	90 95       	com	r25
    301c:	9b 01       	movw	r18, r22
    301e:	ac 01       	movw	r20, r24
    3020:	bd 01       	movw	r22, r26
    3022:	cf 01       	movw	r24, r30
    3024:	08 95       	ret

00003026 <__tablejump2__>:
    3026:	ee 0f       	add	r30, r30
    3028:	ff 1f       	adc	r31, r31

0000302a <__tablejump__>:
    302a:	05 90       	lpm	r0, Z+
    302c:	f4 91       	lpm	r31, Z
    302e:	e0 2d       	mov	r30, r0
    3030:	09 94       	ijmp

00003032 <memcpy>:
    3032:	fb 01       	movw	r30, r22
    3034:	dc 01       	movw	r26, r24
    3036:	02 c0       	rjmp	.+4      	; 0x303c <memcpy+0xa>
    3038:	01 90       	ld	r0, Z+
    303a:	0d 92       	st	X+, r0
    303c:	41 50       	subi	r20, 0x01	; 1
    303e:	50 40       	sbci	r21, 0x00	; 0
    3040:	d8 f7       	brcc	.-10     	; 0x3038 <memcpy+0x6>
    3042:	08 95       	ret

00003044 <strcpy>:
    3044:	fb 01       	movw	r30, r22
    3046:	dc 01       	movw	r26, r24
    3048:	01 90       	ld	r0, Z+
    304a:	0d 92       	st	X+, r0
    304c:	00 20       	and	r0, r0
    304e:	e1 f7       	brne	.-8      	; 0x3048 <strcpy+0x4>
    3050:	08 95       	ret

00003052 <printf>:
    3052:	a0 e0       	ldi	r26, 0x00	; 0
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	ee e2       	ldi	r30, 0x2E	; 46
    3058:	f8 e1       	ldi	r31, 0x18	; 24
    305a:	c8 c5       	rjmp	.+2960   	; 0x3bec <__prologue_saves__+0x20>
    305c:	fe 01       	movw	r30, r28
    305e:	35 96       	adiw	r30, 0x05	; 5
    3060:	61 91       	ld	r22, Z+
    3062:	71 91       	ld	r23, Z+
    3064:	af 01       	movw	r20, r30
    3066:	80 91 ae 26 	lds	r24, 0x26AE
    306a:	90 91 af 26 	lds	r25, 0x26AF
    306e:	40 d0       	rcall	.+128    	; 0x30f0 <vfprintf>
    3070:	e2 e0       	ldi	r30, 0x02	; 2
    3072:	d5 c5       	rjmp	.+2986   	; 0x3c1e <__epilogue_restores__+0x20>

00003074 <puts>:
    3074:	0f 93       	push	r16
    3076:	1f 93       	push	r17
    3078:	cf 93       	push	r28
    307a:	df 93       	push	r29
    307c:	e0 91 ae 26 	lds	r30, 0x26AE
    3080:	f0 91 af 26 	lds	r31, 0x26AF
    3084:	23 81       	ldd	r18, Z+3	; 0x03
    3086:	21 ff       	sbrs	r18, 1
    3088:	1b c0       	rjmp	.+54     	; 0x30c0 <puts+0x4c>
    308a:	ec 01       	movw	r28, r24
    308c:	00 e0       	ldi	r16, 0x00	; 0
    308e:	10 e0       	ldi	r17, 0x00	; 0
    3090:	89 91       	ld	r24, Y+
    3092:	60 91 ae 26 	lds	r22, 0x26AE
    3096:	70 91 af 26 	lds	r23, 0x26AF
    309a:	db 01       	movw	r26, r22
    309c:	18 96       	adiw	r26, 0x08	; 8
    309e:	ed 91       	ld	r30, X+
    30a0:	fc 91       	ld	r31, X
    30a2:	19 97       	sbiw	r26, 0x09	; 9
    30a4:	88 23       	and	r24, r24
    30a6:	31 f0       	breq	.+12     	; 0x30b4 <puts+0x40>
    30a8:	09 95       	icall
    30aa:	89 2b       	or	r24, r25
    30ac:	89 f3       	breq	.-30     	; 0x3090 <puts+0x1c>
    30ae:	0f ef       	ldi	r16, 0xFF	; 255
    30b0:	1f ef       	ldi	r17, 0xFF	; 255
    30b2:	ee cf       	rjmp	.-36     	; 0x3090 <puts+0x1c>
    30b4:	8a e0       	ldi	r24, 0x0A	; 10
    30b6:	09 95       	icall
    30b8:	89 2b       	or	r24, r25
    30ba:	11 f4       	brne	.+4      	; 0x30c0 <puts+0x4c>
    30bc:	c8 01       	movw	r24, r16
    30be:	02 c0       	rjmp	.+4      	; 0x30c4 <puts+0x50>
    30c0:	8f ef       	ldi	r24, 0xFF	; 255
    30c2:	9f ef       	ldi	r25, 0xFF	; 255
    30c4:	df 91       	pop	r29
    30c6:	cf 91       	pop	r28
    30c8:	1f 91       	pop	r17
    30ca:	0f 91       	pop	r16
    30cc:	08 95       	ret

000030ce <scanf>:
    30ce:	a0 e0       	ldi	r26, 0x00	; 0
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	ec e6       	ldi	r30, 0x6C	; 108
    30d4:	f8 e1       	ldi	r31, 0x18	; 24
    30d6:	8a c5       	rjmp	.+2836   	; 0x3bec <__prologue_saves__+0x20>
    30d8:	fe 01       	movw	r30, r28
    30da:	35 96       	adiw	r30, 0x05	; 5
    30dc:	61 91       	ld	r22, Z+
    30de:	71 91       	ld	r23, Z+
    30e0:	af 01       	movw	r20, r30
    30e2:	80 91 ac 26 	lds	r24, 0x26AC
    30e6:	90 91 ad 26 	lds	r25, 0x26AD
    30ea:	34 d3       	rcall	.+1640   	; 0x3754 <vfscanf>
    30ec:	e2 e0       	ldi	r30, 0x02	; 2
    30ee:	97 c5       	rjmp	.+2862   	; 0x3c1e <__epilogue_restores__+0x20>

000030f0 <vfprintf>:
    30f0:	ac e0       	ldi	r26, 0x0C	; 12
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	ed e7       	ldi	r30, 0x7D	; 125
    30f6:	f8 e1       	ldi	r31, 0x18	; 24
    30f8:	69 c5       	rjmp	.+2770   	; 0x3bcc <__prologue_saves__>
    30fa:	7c 01       	movw	r14, r24
    30fc:	6b 01       	movw	r12, r22
    30fe:	8a 01       	movw	r16, r20
    3100:	fc 01       	movw	r30, r24
    3102:	16 82       	std	Z+6, r1	; 0x06
    3104:	17 82       	std	Z+7, r1	; 0x07
    3106:	83 81       	ldd	r24, Z+3	; 0x03
    3108:	81 ff       	sbrs	r24, 1
    310a:	b0 c1       	rjmp	.+864    	; 0x346c <vfprintf+0x37c>
    310c:	ce 01       	movw	r24, r28
    310e:	01 96       	adiw	r24, 0x01	; 1
    3110:	4c 01       	movw	r8, r24
    3112:	f7 01       	movw	r30, r14
    3114:	93 81       	ldd	r25, Z+3	; 0x03
    3116:	f6 01       	movw	r30, r12
    3118:	93 fd       	sbrc	r25, 3
    311a:	85 91       	lpm	r24, Z+
    311c:	93 ff       	sbrs	r25, 3
    311e:	81 91       	ld	r24, Z+
    3120:	6f 01       	movw	r12, r30
    3122:	88 23       	and	r24, r24
    3124:	09 f4       	brne	.+2      	; 0x3128 <vfprintf+0x38>
    3126:	9e c1       	rjmp	.+828    	; 0x3464 <vfprintf+0x374>
    3128:	85 32       	cpi	r24, 0x25	; 37
    312a:	39 f4       	brne	.+14     	; 0x313a <vfprintf+0x4a>
    312c:	93 fd       	sbrc	r25, 3
    312e:	85 91       	lpm	r24, Z+
    3130:	93 ff       	sbrs	r25, 3
    3132:	81 91       	ld	r24, Z+
    3134:	6f 01       	movw	r12, r30
    3136:	85 32       	cpi	r24, 0x25	; 37
    3138:	21 f4       	brne	.+8      	; 0x3142 <vfprintf+0x52>
    313a:	b7 01       	movw	r22, r14
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	9a d4       	rcall	.+2356   	; 0x3a74 <fputc>
    3140:	e8 cf       	rjmp	.-48     	; 0x3112 <vfprintf+0x22>
    3142:	51 2c       	mov	r5, r1
    3144:	31 2c       	mov	r3, r1
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	20 32       	cpi	r18, 0x20	; 32
    314a:	a0 f4       	brcc	.+40     	; 0x3174 <vfprintf+0x84>
    314c:	8b 32       	cpi	r24, 0x2B	; 43
    314e:	69 f0       	breq	.+26     	; 0x316a <vfprintf+0x7a>
    3150:	30 f4       	brcc	.+12     	; 0x315e <vfprintf+0x6e>
    3152:	80 32       	cpi	r24, 0x20	; 32
    3154:	59 f0       	breq	.+22     	; 0x316c <vfprintf+0x7c>
    3156:	83 32       	cpi	r24, 0x23	; 35
    3158:	69 f4       	brne	.+26     	; 0x3174 <vfprintf+0x84>
    315a:	20 61       	ori	r18, 0x10	; 16
    315c:	2c c0       	rjmp	.+88     	; 0x31b6 <vfprintf+0xc6>
    315e:	8d 32       	cpi	r24, 0x2D	; 45
    3160:	39 f0       	breq	.+14     	; 0x3170 <vfprintf+0x80>
    3162:	80 33       	cpi	r24, 0x30	; 48
    3164:	39 f4       	brne	.+14     	; 0x3174 <vfprintf+0x84>
    3166:	21 60       	ori	r18, 0x01	; 1
    3168:	26 c0       	rjmp	.+76     	; 0x31b6 <vfprintf+0xc6>
    316a:	22 60       	ori	r18, 0x02	; 2
    316c:	24 60       	ori	r18, 0x04	; 4
    316e:	23 c0       	rjmp	.+70     	; 0x31b6 <vfprintf+0xc6>
    3170:	28 60       	ori	r18, 0x08	; 8
    3172:	21 c0       	rjmp	.+66     	; 0x31b6 <vfprintf+0xc6>
    3174:	27 fd       	sbrc	r18, 7
    3176:	27 c0       	rjmp	.+78     	; 0x31c6 <vfprintf+0xd6>
    3178:	30 ed       	ldi	r19, 0xD0	; 208
    317a:	38 0f       	add	r19, r24
    317c:	3a 30       	cpi	r19, 0x0A	; 10
    317e:	78 f4       	brcc	.+30     	; 0x319e <vfprintf+0xae>
    3180:	26 ff       	sbrs	r18, 6
    3182:	06 c0       	rjmp	.+12     	; 0x3190 <vfprintf+0xa0>
    3184:	fa e0       	ldi	r31, 0x0A	; 10
    3186:	5f 9e       	mul	r5, r31
    3188:	30 0d       	add	r19, r0
    318a:	11 24       	eor	r1, r1
    318c:	53 2e       	mov	r5, r19
    318e:	13 c0       	rjmp	.+38     	; 0x31b6 <vfprintf+0xc6>
    3190:	8a e0       	ldi	r24, 0x0A	; 10
    3192:	38 9e       	mul	r3, r24
    3194:	30 0d       	add	r19, r0
    3196:	11 24       	eor	r1, r1
    3198:	33 2e       	mov	r3, r19
    319a:	20 62       	ori	r18, 0x20	; 32
    319c:	0c c0       	rjmp	.+24     	; 0x31b6 <vfprintf+0xc6>
    319e:	8e 32       	cpi	r24, 0x2E	; 46
    31a0:	21 f4       	brne	.+8      	; 0x31aa <vfprintf+0xba>
    31a2:	26 fd       	sbrc	r18, 6
    31a4:	5f c1       	rjmp	.+702    	; 0x3464 <vfprintf+0x374>
    31a6:	20 64       	ori	r18, 0x40	; 64
    31a8:	06 c0       	rjmp	.+12     	; 0x31b6 <vfprintf+0xc6>
    31aa:	8c 36       	cpi	r24, 0x6C	; 108
    31ac:	11 f4       	brne	.+4      	; 0x31b2 <vfprintf+0xc2>
    31ae:	20 68       	ori	r18, 0x80	; 128
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <vfprintf+0xc6>
    31b2:	88 36       	cpi	r24, 0x68	; 104
    31b4:	41 f4       	brne	.+16     	; 0x31c6 <vfprintf+0xd6>
    31b6:	f6 01       	movw	r30, r12
    31b8:	93 fd       	sbrc	r25, 3
    31ba:	85 91       	lpm	r24, Z+
    31bc:	93 ff       	sbrs	r25, 3
    31be:	81 91       	ld	r24, Z+
    31c0:	6f 01       	movw	r12, r30
    31c2:	81 11       	cpse	r24, r1
    31c4:	c1 cf       	rjmp	.-126    	; 0x3148 <vfprintf+0x58>
    31c6:	98 2f       	mov	r25, r24
    31c8:	9f 7d       	andi	r25, 0xDF	; 223
    31ca:	95 54       	subi	r25, 0x45	; 69
    31cc:	93 30       	cpi	r25, 0x03	; 3
    31ce:	28 f4       	brcc	.+10     	; 0x31da <vfprintf+0xea>
    31d0:	0c 5f       	subi	r16, 0xFC	; 252
    31d2:	1f 4f       	sbci	r17, 0xFF	; 255
    31d4:	ff e3       	ldi	r31, 0x3F	; 63
    31d6:	f9 83       	std	Y+1, r31	; 0x01
    31d8:	0d c0       	rjmp	.+26     	; 0x31f4 <vfprintf+0x104>
    31da:	83 36       	cpi	r24, 0x63	; 99
    31dc:	31 f0       	breq	.+12     	; 0x31ea <vfprintf+0xfa>
    31de:	83 37       	cpi	r24, 0x73	; 115
    31e0:	71 f0       	breq	.+28     	; 0x31fe <vfprintf+0x10e>
    31e2:	83 35       	cpi	r24, 0x53	; 83
    31e4:	09 f0       	breq	.+2      	; 0x31e8 <vfprintf+0xf8>
    31e6:	57 c0       	rjmp	.+174    	; 0x3296 <vfprintf+0x1a6>
    31e8:	21 c0       	rjmp	.+66     	; 0x322c <vfprintf+0x13c>
    31ea:	f8 01       	movw	r30, r16
    31ec:	80 81       	ld	r24, Z
    31ee:	89 83       	std	Y+1, r24	; 0x01
    31f0:	0e 5f       	subi	r16, 0xFE	; 254
    31f2:	1f 4f       	sbci	r17, 0xFF	; 255
    31f4:	44 24       	eor	r4, r4
    31f6:	43 94       	inc	r4
    31f8:	51 2c       	mov	r5, r1
    31fa:	54 01       	movw	r10, r8
    31fc:	14 c0       	rjmp	.+40     	; 0x3226 <vfprintf+0x136>
    31fe:	38 01       	movw	r6, r16
    3200:	f2 e0       	ldi	r31, 0x02	; 2
    3202:	6f 0e       	add	r6, r31
    3204:	71 1c       	adc	r7, r1
    3206:	f8 01       	movw	r30, r16
    3208:	a0 80       	ld	r10, Z
    320a:	b1 80       	ldd	r11, Z+1	; 0x01
    320c:	26 ff       	sbrs	r18, 6
    320e:	03 c0       	rjmp	.+6      	; 0x3216 <vfprintf+0x126>
    3210:	65 2d       	mov	r22, r5
    3212:	70 e0       	ldi	r23, 0x00	; 0
    3214:	02 c0       	rjmp	.+4      	; 0x321a <vfprintf+0x12a>
    3216:	6f ef       	ldi	r22, 0xFF	; 255
    3218:	7f ef       	ldi	r23, 0xFF	; 255
    321a:	c5 01       	movw	r24, r10
    321c:	2c 87       	std	Y+12, r18	; 0x0c
    321e:	e1 d3       	rcall	.+1986   	; 0x39e2 <strnlen>
    3220:	2c 01       	movw	r4, r24
    3222:	83 01       	movw	r16, r6
    3224:	2c 85       	ldd	r18, Y+12	; 0x0c
    3226:	2f 77       	andi	r18, 0x7F	; 127
    3228:	22 2e       	mov	r2, r18
    322a:	16 c0       	rjmp	.+44     	; 0x3258 <vfprintf+0x168>
    322c:	38 01       	movw	r6, r16
    322e:	f2 e0       	ldi	r31, 0x02	; 2
    3230:	6f 0e       	add	r6, r31
    3232:	71 1c       	adc	r7, r1
    3234:	f8 01       	movw	r30, r16
    3236:	a0 80       	ld	r10, Z
    3238:	b1 80       	ldd	r11, Z+1	; 0x01
    323a:	26 ff       	sbrs	r18, 6
    323c:	03 c0       	rjmp	.+6      	; 0x3244 <vfprintf+0x154>
    323e:	65 2d       	mov	r22, r5
    3240:	70 e0       	ldi	r23, 0x00	; 0
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <vfprintf+0x158>
    3244:	6f ef       	ldi	r22, 0xFF	; 255
    3246:	7f ef       	ldi	r23, 0xFF	; 255
    3248:	c5 01       	movw	r24, r10
    324a:	2c 87       	std	Y+12, r18	; 0x0c
    324c:	bf d3       	rcall	.+1918   	; 0x39cc <strnlen_P>
    324e:	2c 01       	movw	r4, r24
    3250:	2c 85       	ldd	r18, Y+12	; 0x0c
    3252:	20 68       	ori	r18, 0x80	; 128
    3254:	22 2e       	mov	r2, r18
    3256:	83 01       	movw	r16, r6
    3258:	23 fc       	sbrc	r2, 3
    325a:	19 c0       	rjmp	.+50     	; 0x328e <vfprintf+0x19e>
    325c:	83 2d       	mov	r24, r3
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	48 16       	cp	r4, r24
    3262:	59 06       	cpc	r5, r25
    3264:	a0 f4       	brcc	.+40     	; 0x328e <vfprintf+0x19e>
    3266:	b7 01       	movw	r22, r14
    3268:	80 e2       	ldi	r24, 0x20	; 32
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	03 d4       	rcall	.+2054   	; 0x3a74 <fputc>
    326e:	3a 94       	dec	r3
    3270:	f5 cf       	rjmp	.-22     	; 0x325c <vfprintf+0x16c>
    3272:	f5 01       	movw	r30, r10
    3274:	27 fc       	sbrc	r2, 7
    3276:	85 91       	lpm	r24, Z+
    3278:	27 fe       	sbrs	r2, 7
    327a:	81 91       	ld	r24, Z+
    327c:	5f 01       	movw	r10, r30
    327e:	b7 01       	movw	r22, r14
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	f8 d3       	rcall	.+2032   	; 0x3a74 <fputc>
    3284:	31 10       	cpse	r3, r1
    3286:	3a 94       	dec	r3
    3288:	f1 e0       	ldi	r31, 0x01	; 1
    328a:	4f 1a       	sub	r4, r31
    328c:	51 08       	sbc	r5, r1
    328e:	41 14       	cp	r4, r1
    3290:	51 04       	cpc	r5, r1
    3292:	79 f7       	brne	.-34     	; 0x3272 <vfprintf+0x182>
    3294:	de c0       	rjmp	.+444    	; 0x3452 <vfprintf+0x362>
    3296:	84 36       	cpi	r24, 0x64	; 100
    3298:	11 f0       	breq	.+4      	; 0x329e <vfprintf+0x1ae>
    329a:	89 36       	cpi	r24, 0x69	; 105
    329c:	31 f5       	brne	.+76     	; 0x32ea <vfprintf+0x1fa>
    329e:	f8 01       	movw	r30, r16
    32a0:	27 ff       	sbrs	r18, 7
    32a2:	07 c0       	rjmp	.+14     	; 0x32b2 <vfprintf+0x1c2>
    32a4:	60 81       	ld	r22, Z
    32a6:	71 81       	ldd	r23, Z+1	; 0x01
    32a8:	82 81       	ldd	r24, Z+2	; 0x02
    32aa:	93 81       	ldd	r25, Z+3	; 0x03
    32ac:	0c 5f       	subi	r16, 0xFC	; 252
    32ae:	1f 4f       	sbci	r17, 0xFF	; 255
    32b0:	08 c0       	rjmp	.+16     	; 0x32c2 <vfprintf+0x1d2>
    32b2:	60 81       	ld	r22, Z
    32b4:	71 81       	ldd	r23, Z+1	; 0x01
    32b6:	88 27       	eor	r24, r24
    32b8:	77 fd       	sbrc	r23, 7
    32ba:	80 95       	com	r24
    32bc:	98 2f       	mov	r25, r24
    32be:	0e 5f       	subi	r16, 0xFE	; 254
    32c0:	1f 4f       	sbci	r17, 0xFF	; 255
    32c2:	2f 76       	andi	r18, 0x6F	; 111
    32c4:	b2 2e       	mov	r11, r18
    32c6:	97 ff       	sbrs	r25, 7
    32c8:	09 c0       	rjmp	.+18     	; 0x32dc <vfprintf+0x1ec>
    32ca:	90 95       	com	r25
    32cc:	80 95       	com	r24
    32ce:	70 95       	com	r23
    32d0:	61 95       	neg	r22
    32d2:	7f 4f       	sbci	r23, 0xFF	; 255
    32d4:	8f 4f       	sbci	r24, 0xFF	; 255
    32d6:	9f 4f       	sbci	r25, 0xFF	; 255
    32d8:	20 68       	ori	r18, 0x80	; 128
    32da:	b2 2e       	mov	r11, r18
    32dc:	2a e0       	ldi	r18, 0x0A	; 10
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	a4 01       	movw	r20, r8
    32e2:	13 d4       	rcall	.+2086   	; 0x3b0a <__ultoa_invert>
    32e4:	a8 2e       	mov	r10, r24
    32e6:	a8 18       	sub	r10, r8
    32e8:	43 c0       	rjmp	.+134    	; 0x3370 <vfprintf+0x280>
    32ea:	85 37       	cpi	r24, 0x75	; 117
    32ec:	29 f4       	brne	.+10     	; 0x32f8 <vfprintf+0x208>
    32ee:	2f 7e       	andi	r18, 0xEF	; 239
    32f0:	b2 2e       	mov	r11, r18
    32f2:	2a e0       	ldi	r18, 0x0A	; 10
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	25 c0       	rjmp	.+74     	; 0x3342 <vfprintf+0x252>
    32f8:	f2 2f       	mov	r31, r18
    32fa:	f9 7f       	andi	r31, 0xF9	; 249
    32fc:	bf 2e       	mov	r11, r31
    32fe:	8f 36       	cpi	r24, 0x6F	; 111
    3300:	c1 f0       	breq	.+48     	; 0x3332 <vfprintf+0x242>
    3302:	18 f4       	brcc	.+6      	; 0x330a <vfprintf+0x21a>
    3304:	88 35       	cpi	r24, 0x58	; 88
    3306:	79 f0       	breq	.+30     	; 0x3326 <vfprintf+0x236>
    3308:	ad c0       	rjmp	.+346    	; 0x3464 <vfprintf+0x374>
    330a:	80 37       	cpi	r24, 0x70	; 112
    330c:	19 f0       	breq	.+6      	; 0x3314 <vfprintf+0x224>
    330e:	88 37       	cpi	r24, 0x78	; 120
    3310:	21 f0       	breq	.+8      	; 0x331a <vfprintf+0x22a>
    3312:	a8 c0       	rjmp	.+336    	; 0x3464 <vfprintf+0x374>
    3314:	2f 2f       	mov	r18, r31
    3316:	20 61       	ori	r18, 0x10	; 16
    3318:	b2 2e       	mov	r11, r18
    331a:	b4 fe       	sbrs	r11, 4
    331c:	0d c0       	rjmp	.+26     	; 0x3338 <vfprintf+0x248>
    331e:	8b 2d       	mov	r24, r11
    3320:	84 60       	ori	r24, 0x04	; 4
    3322:	b8 2e       	mov	r11, r24
    3324:	09 c0       	rjmp	.+18     	; 0x3338 <vfprintf+0x248>
    3326:	24 ff       	sbrs	r18, 4
    3328:	0a c0       	rjmp	.+20     	; 0x333e <vfprintf+0x24e>
    332a:	9f 2f       	mov	r25, r31
    332c:	96 60       	ori	r25, 0x06	; 6
    332e:	b9 2e       	mov	r11, r25
    3330:	06 c0       	rjmp	.+12     	; 0x333e <vfprintf+0x24e>
    3332:	28 e0       	ldi	r18, 0x08	; 8
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	05 c0       	rjmp	.+10     	; 0x3342 <vfprintf+0x252>
    3338:	20 e1       	ldi	r18, 0x10	; 16
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	02 c0       	rjmp	.+4      	; 0x3342 <vfprintf+0x252>
    333e:	20 e1       	ldi	r18, 0x10	; 16
    3340:	32 e0       	ldi	r19, 0x02	; 2
    3342:	f8 01       	movw	r30, r16
    3344:	b7 fe       	sbrs	r11, 7
    3346:	07 c0       	rjmp	.+14     	; 0x3356 <vfprintf+0x266>
    3348:	60 81       	ld	r22, Z
    334a:	71 81       	ldd	r23, Z+1	; 0x01
    334c:	82 81       	ldd	r24, Z+2	; 0x02
    334e:	93 81       	ldd	r25, Z+3	; 0x03
    3350:	0c 5f       	subi	r16, 0xFC	; 252
    3352:	1f 4f       	sbci	r17, 0xFF	; 255
    3354:	06 c0       	rjmp	.+12     	; 0x3362 <vfprintf+0x272>
    3356:	60 81       	ld	r22, Z
    3358:	71 81       	ldd	r23, Z+1	; 0x01
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	0e 5f       	subi	r16, 0xFE	; 254
    3360:	1f 4f       	sbci	r17, 0xFF	; 255
    3362:	a4 01       	movw	r20, r8
    3364:	d2 d3       	rcall	.+1956   	; 0x3b0a <__ultoa_invert>
    3366:	a8 2e       	mov	r10, r24
    3368:	a8 18       	sub	r10, r8
    336a:	fb 2d       	mov	r31, r11
    336c:	ff 77       	andi	r31, 0x7F	; 127
    336e:	bf 2e       	mov	r11, r31
    3370:	b6 fe       	sbrs	r11, 6
    3372:	0b c0       	rjmp	.+22     	; 0x338a <vfprintf+0x29a>
    3374:	2b 2d       	mov	r18, r11
    3376:	2e 7f       	andi	r18, 0xFE	; 254
    3378:	a5 14       	cp	r10, r5
    337a:	50 f4       	brcc	.+20     	; 0x3390 <vfprintf+0x2a0>
    337c:	b4 fe       	sbrs	r11, 4
    337e:	0a c0       	rjmp	.+20     	; 0x3394 <vfprintf+0x2a4>
    3380:	b2 fc       	sbrc	r11, 2
    3382:	08 c0       	rjmp	.+16     	; 0x3394 <vfprintf+0x2a4>
    3384:	2b 2d       	mov	r18, r11
    3386:	2e 7e       	andi	r18, 0xEE	; 238
    3388:	05 c0       	rjmp	.+10     	; 0x3394 <vfprintf+0x2a4>
    338a:	7a 2c       	mov	r7, r10
    338c:	2b 2d       	mov	r18, r11
    338e:	03 c0       	rjmp	.+6      	; 0x3396 <vfprintf+0x2a6>
    3390:	7a 2c       	mov	r7, r10
    3392:	01 c0       	rjmp	.+2      	; 0x3396 <vfprintf+0x2a6>
    3394:	75 2c       	mov	r7, r5
    3396:	24 ff       	sbrs	r18, 4
    3398:	0d c0       	rjmp	.+26     	; 0x33b4 <vfprintf+0x2c4>
    339a:	fe 01       	movw	r30, r28
    339c:	ea 0d       	add	r30, r10
    339e:	f1 1d       	adc	r31, r1
    33a0:	80 81       	ld	r24, Z
    33a2:	80 33       	cpi	r24, 0x30	; 48
    33a4:	11 f4       	brne	.+4      	; 0x33aa <vfprintf+0x2ba>
    33a6:	29 7e       	andi	r18, 0xE9	; 233
    33a8:	09 c0       	rjmp	.+18     	; 0x33bc <vfprintf+0x2cc>
    33aa:	22 ff       	sbrs	r18, 2
    33ac:	06 c0       	rjmp	.+12     	; 0x33ba <vfprintf+0x2ca>
    33ae:	73 94       	inc	r7
    33b0:	73 94       	inc	r7
    33b2:	04 c0       	rjmp	.+8      	; 0x33bc <vfprintf+0x2cc>
    33b4:	82 2f       	mov	r24, r18
    33b6:	86 78       	andi	r24, 0x86	; 134
    33b8:	09 f0       	breq	.+2      	; 0x33bc <vfprintf+0x2cc>
    33ba:	73 94       	inc	r7
    33bc:	23 fd       	sbrc	r18, 3
    33be:	12 c0       	rjmp	.+36     	; 0x33e4 <vfprintf+0x2f4>
    33c0:	20 ff       	sbrs	r18, 0
    33c2:	06 c0       	rjmp	.+12     	; 0x33d0 <vfprintf+0x2e0>
    33c4:	5a 2c       	mov	r5, r10
    33c6:	73 14       	cp	r7, r3
    33c8:	18 f4       	brcc	.+6      	; 0x33d0 <vfprintf+0x2e0>
    33ca:	53 0c       	add	r5, r3
    33cc:	57 18       	sub	r5, r7
    33ce:	73 2c       	mov	r7, r3
    33d0:	73 14       	cp	r7, r3
    33d2:	60 f4       	brcc	.+24     	; 0x33ec <vfprintf+0x2fc>
    33d4:	b7 01       	movw	r22, r14
    33d6:	80 e2       	ldi	r24, 0x20	; 32
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	2c 87       	std	Y+12, r18	; 0x0c
    33dc:	4b d3       	rcall	.+1686   	; 0x3a74 <fputc>
    33de:	73 94       	inc	r7
    33e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    33e2:	f6 cf       	rjmp	.-20     	; 0x33d0 <vfprintf+0x2e0>
    33e4:	73 14       	cp	r7, r3
    33e6:	10 f4       	brcc	.+4      	; 0x33ec <vfprintf+0x2fc>
    33e8:	37 18       	sub	r3, r7
    33ea:	01 c0       	rjmp	.+2      	; 0x33ee <vfprintf+0x2fe>
    33ec:	31 2c       	mov	r3, r1
    33ee:	24 ff       	sbrs	r18, 4
    33f0:	11 c0       	rjmp	.+34     	; 0x3414 <vfprintf+0x324>
    33f2:	b7 01       	movw	r22, r14
    33f4:	80 e3       	ldi	r24, 0x30	; 48
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	2c 87       	std	Y+12, r18	; 0x0c
    33fa:	3c d3       	rcall	.+1656   	; 0x3a74 <fputc>
    33fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    33fe:	22 ff       	sbrs	r18, 2
    3400:	16 c0       	rjmp	.+44     	; 0x342e <vfprintf+0x33e>
    3402:	21 ff       	sbrs	r18, 1
    3404:	03 c0       	rjmp	.+6      	; 0x340c <vfprintf+0x31c>
    3406:	88 e5       	ldi	r24, 0x58	; 88
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	02 c0       	rjmp	.+4      	; 0x3410 <vfprintf+0x320>
    340c:	88 e7       	ldi	r24, 0x78	; 120
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	b7 01       	movw	r22, r14
    3412:	0c c0       	rjmp	.+24     	; 0x342c <vfprintf+0x33c>
    3414:	82 2f       	mov	r24, r18
    3416:	86 78       	andi	r24, 0x86	; 134
    3418:	51 f0       	breq	.+20     	; 0x342e <vfprintf+0x33e>
    341a:	21 fd       	sbrc	r18, 1
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <vfprintf+0x332>
    341e:	80 e2       	ldi	r24, 0x20	; 32
    3420:	01 c0       	rjmp	.+2      	; 0x3424 <vfprintf+0x334>
    3422:	8b e2       	ldi	r24, 0x2B	; 43
    3424:	27 fd       	sbrc	r18, 7
    3426:	8d e2       	ldi	r24, 0x2D	; 45
    3428:	b7 01       	movw	r22, r14
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	23 d3       	rcall	.+1606   	; 0x3a74 <fputc>
    342e:	a5 14       	cp	r10, r5
    3430:	30 f4       	brcc	.+12     	; 0x343e <vfprintf+0x34e>
    3432:	b7 01       	movw	r22, r14
    3434:	80 e3       	ldi	r24, 0x30	; 48
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	1d d3       	rcall	.+1594   	; 0x3a74 <fputc>
    343a:	5a 94       	dec	r5
    343c:	f8 cf       	rjmp	.-16     	; 0x342e <vfprintf+0x33e>
    343e:	aa 94       	dec	r10
    3440:	f4 01       	movw	r30, r8
    3442:	ea 0d       	add	r30, r10
    3444:	f1 1d       	adc	r31, r1
    3446:	80 81       	ld	r24, Z
    3448:	b7 01       	movw	r22, r14
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	13 d3       	rcall	.+1574   	; 0x3a74 <fputc>
    344e:	a1 10       	cpse	r10, r1
    3450:	f6 cf       	rjmp	.-20     	; 0x343e <vfprintf+0x34e>
    3452:	33 20       	and	r3, r3
    3454:	09 f4       	brne	.+2      	; 0x3458 <vfprintf+0x368>
    3456:	5d ce       	rjmp	.-838    	; 0x3112 <vfprintf+0x22>
    3458:	b7 01       	movw	r22, r14
    345a:	80 e2       	ldi	r24, 0x20	; 32
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	0a d3       	rcall	.+1556   	; 0x3a74 <fputc>
    3460:	3a 94       	dec	r3
    3462:	f7 cf       	rjmp	.-18     	; 0x3452 <vfprintf+0x362>
    3464:	f7 01       	movw	r30, r14
    3466:	86 81       	ldd	r24, Z+6	; 0x06
    3468:	97 81       	ldd	r25, Z+7	; 0x07
    346a:	02 c0       	rjmp	.+4      	; 0x3470 <vfprintf+0x380>
    346c:	8f ef       	ldi	r24, 0xFF	; 255
    346e:	9f ef       	ldi	r25, 0xFF	; 255
    3470:	2c 96       	adiw	r28, 0x0c	; 12
    3472:	e2 e1       	ldi	r30, 0x12	; 18
    3474:	c4 c3       	rjmp	.+1928   	; 0x3bfe <__epilogue_restores__>

00003476 <putval>:
    3476:	20 fd       	sbrc	r18, 0
    3478:	09 c0       	rjmp	.+18     	; 0x348c <putval+0x16>
    347a:	fc 01       	movw	r30, r24
    347c:	23 fd       	sbrc	r18, 3
    347e:	05 c0       	rjmp	.+10     	; 0x348a <putval+0x14>
    3480:	22 ff       	sbrs	r18, 2
    3482:	02 c0       	rjmp	.+4      	; 0x3488 <putval+0x12>
    3484:	73 83       	std	Z+3, r23	; 0x03
    3486:	62 83       	std	Z+2, r22	; 0x02
    3488:	51 83       	std	Z+1, r21	; 0x01
    348a:	40 83       	st	Z, r20
    348c:	08 95       	ret

0000348e <mulacc>:
    348e:	44 fd       	sbrc	r20, 4
    3490:	10 c0       	rjmp	.+32     	; 0x34b2 <mulacc+0x24>
    3492:	46 fd       	sbrc	r20, 6
    3494:	10 c0       	rjmp	.+32     	; 0x34b6 <mulacc+0x28>
    3496:	db 01       	movw	r26, r22
    3498:	fc 01       	movw	r30, r24
    349a:	aa 0f       	add	r26, r26
    349c:	bb 1f       	adc	r27, r27
    349e:	ee 1f       	adc	r30, r30
    34a0:	ff 1f       	adc	r31, r31
    34a2:	10 94       	com	r1
    34a4:	d1 f7       	brne	.-12     	; 0x349a <mulacc+0xc>
    34a6:	6a 0f       	add	r22, r26
    34a8:	7b 1f       	adc	r23, r27
    34aa:	8e 1f       	adc	r24, r30
    34ac:	9f 1f       	adc	r25, r31
    34ae:	31 e0       	ldi	r19, 0x01	; 1
    34b0:	03 c0       	rjmp	.+6      	; 0x34b8 <mulacc+0x2a>
    34b2:	33 e0       	ldi	r19, 0x03	; 3
    34b4:	01 c0       	rjmp	.+2      	; 0x34b8 <mulacc+0x2a>
    34b6:	34 e0       	ldi	r19, 0x04	; 4
    34b8:	66 0f       	add	r22, r22
    34ba:	77 1f       	adc	r23, r23
    34bc:	88 1f       	adc	r24, r24
    34be:	99 1f       	adc	r25, r25
    34c0:	31 50       	subi	r19, 0x01	; 1
    34c2:	d1 f7       	brne	.-12     	; 0x34b8 <mulacc+0x2a>
    34c4:	62 0f       	add	r22, r18
    34c6:	71 1d       	adc	r23, r1
    34c8:	81 1d       	adc	r24, r1
    34ca:	91 1d       	adc	r25, r1
    34cc:	08 95       	ret

000034ce <skip_spaces>:
    34ce:	0f 93       	push	r16
    34d0:	1f 93       	push	r17
    34d2:	cf 93       	push	r28
    34d4:	df 93       	push	r29
    34d6:	8c 01       	movw	r16, r24
    34d8:	c8 01       	movw	r24, r16
    34da:	8e d2       	rcall	.+1308   	; 0x39f8 <fgetc>
    34dc:	ec 01       	movw	r28, r24
    34de:	97 fd       	sbrc	r25, 7
    34e0:	06 c0       	rjmp	.+12     	; 0x34ee <skip_spaces+0x20>
    34e2:	61 d2       	rcall	.+1218   	; 0x39a6 <isspace>
    34e4:	89 2b       	or	r24, r25
    34e6:	c1 f7       	brne	.-16     	; 0x34d8 <skip_spaces+0xa>
    34e8:	b8 01       	movw	r22, r16
    34ea:	ce 01       	movw	r24, r28
    34ec:	f5 d2       	rcall	.+1514   	; 0x3ad8 <ungetc>
    34ee:	ce 01       	movw	r24, r28
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	1f 91       	pop	r17
    34f6:	0f 91       	pop	r16
    34f8:	08 95       	ret

000034fa <conv_int>:
    34fa:	8f 92       	push	r8
    34fc:	9f 92       	push	r9
    34fe:	af 92       	push	r10
    3500:	cf 92       	push	r12
    3502:	df 92       	push	r13
    3504:	ef 92       	push	r14
    3506:	ff 92       	push	r15
    3508:	0f 93       	push	r16
    350a:	1f 93       	push	r17
    350c:	cf 93       	push	r28
    350e:	df 93       	push	r29
    3510:	ec 01       	movw	r28, r24
    3512:	a6 2e       	mov	r10, r22
    3514:	4a 01       	movw	r8, r20
    3516:	02 2f       	mov	r16, r18
    3518:	6f d2       	rcall	.+1246   	; 0x39f8 <fgetc>
    351a:	ac 01       	movw	r20, r24
    351c:	55 27       	eor	r21, r21
    351e:	4b 32       	cpi	r20, 0x2B	; 43
    3520:	51 05       	cpc	r21, r1
    3522:	21 f0       	breq	.+8      	; 0x352c <conv_int+0x32>
    3524:	4d 32       	cpi	r20, 0x2D	; 45
    3526:	51 05       	cpc	r21, r1
    3528:	49 f4       	brne	.+18     	; 0x353c <conv_int+0x42>
    352a:	00 68       	ori	r16, 0x80	; 128
    352c:	aa 94       	dec	r10
    352e:	11 f4       	brne	.+4      	; 0x3534 <conv_int+0x3a>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	60 c0       	rjmp	.+192    	; 0x35f4 <conv_int+0xfa>
    3534:	ce 01       	movw	r24, r28
    3536:	60 d2       	rcall	.+1216   	; 0x39f8 <fgetc>
    3538:	97 fd       	sbrc	r25, 7
    353a:	fa cf       	rjmp	.-12     	; 0x3530 <conv_int+0x36>
    353c:	10 2f       	mov	r17, r16
    353e:	1d 7f       	andi	r17, 0xFD	; 253
    3540:	30 2f       	mov	r19, r16
    3542:	30 73       	andi	r19, 0x30	; 48
    3544:	f1 f4       	brne	.+60     	; 0x3582 <conv_int+0x88>
    3546:	80 33       	cpi	r24, 0x30	; 48
    3548:	e1 f4       	brne	.+56     	; 0x3582 <conv_int+0x88>
    354a:	ff 24       	eor	r15, r15
    354c:	fa 94       	dec	r15
    354e:	fa 0c       	add	r15, r10
    3550:	09 f4       	brne	.+2      	; 0x3554 <conv_int+0x5a>
    3552:	3d c0       	rjmp	.+122    	; 0x35ce <conv_int+0xd4>
    3554:	ce 01       	movw	r24, r28
    3556:	50 d2       	rcall	.+1184   	; 0x39f8 <fgetc>
    3558:	97 fd       	sbrc	r25, 7
    355a:	39 c0       	rjmp	.+114    	; 0x35ce <conv_int+0xd4>
    355c:	38 2f       	mov	r19, r24
    355e:	3f 7d       	andi	r19, 0xDF	; 223
    3560:	38 35       	cpi	r19, 0x58	; 88
    3562:	49 f4       	brne	.+18     	; 0x3576 <conv_int+0x7c>
    3564:	12 64       	ori	r17, 0x42	; 66
    3566:	aa 94       	dec	r10
    3568:	aa 94       	dec	r10
    356a:	89 f1       	breq	.+98     	; 0x35ce <conv_int+0xd4>
    356c:	ce 01       	movw	r24, r28
    356e:	44 d2       	rcall	.+1160   	; 0x39f8 <fgetc>
    3570:	97 ff       	sbrs	r25, 7
    3572:	07 c0       	rjmp	.+14     	; 0x3582 <conv_int+0x88>
    3574:	2c c0       	rjmp	.+88     	; 0x35ce <conv_int+0xd4>
    3576:	06 ff       	sbrs	r16, 6
    3578:	02 c0       	rjmp	.+4      	; 0x357e <conv_int+0x84>
    357a:	12 60       	ori	r17, 0x02	; 2
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <conv_int+0x86>
    357e:	12 61       	ori	r17, 0x12	; 18
    3580:	af 2c       	mov	r10, r15
    3582:	c1 2c       	mov	r12, r1
    3584:	d1 2c       	mov	r13, r1
    3586:	76 01       	movw	r14, r12
    3588:	20 ed       	ldi	r18, 0xD0	; 208
    358a:	28 0f       	add	r18, r24
    358c:	28 30       	cpi	r18, 0x08	; 8
    358e:	78 f0       	brcs	.+30     	; 0x35ae <conv_int+0xb4>
    3590:	14 ff       	sbrs	r17, 4
    3592:	03 c0       	rjmp	.+6      	; 0x359a <conv_int+0xa0>
    3594:	be 01       	movw	r22, r28
    3596:	a0 d2       	rcall	.+1344   	; 0x3ad8 <ungetc>
    3598:	17 c0       	rjmp	.+46     	; 0x35c8 <conv_int+0xce>
    359a:	2a 30       	cpi	r18, 0x0A	; 10
    359c:	40 f0       	brcs	.+16     	; 0x35ae <conv_int+0xb4>
    359e:	16 ff       	sbrs	r17, 6
    35a0:	f9 cf       	rjmp	.-14     	; 0x3594 <conv_int+0x9a>
    35a2:	2f 7d       	andi	r18, 0xDF	; 223
    35a4:	3f ee       	ldi	r19, 0xEF	; 239
    35a6:	32 0f       	add	r19, r18
    35a8:	36 30       	cpi	r19, 0x06	; 6
    35aa:	a0 f7       	brcc	.-24     	; 0x3594 <conv_int+0x9a>
    35ac:	27 50       	subi	r18, 0x07	; 7
    35ae:	41 2f       	mov	r20, r17
    35b0:	c7 01       	movw	r24, r14
    35b2:	b6 01       	movw	r22, r12
    35b4:	6c df       	rcall	.-296    	; 0x348e <mulacc>
    35b6:	6b 01       	movw	r12, r22
    35b8:	7c 01       	movw	r14, r24
    35ba:	12 60       	ori	r17, 0x02	; 2
    35bc:	aa 94       	dec	r10
    35be:	51 f0       	breq	.+20     	; 0x35d4 <conv_int+0xda>
    35c0:	ce 01       	movw	r24, r28
    35c2:	1a d2       	rcall	.+1076   	; 0x39f8 <fgetc>
    35c4:	97 ff       	sbrs	r25, 7
    35c6:	e0 cf       	rjmp	.-64     	; 0x3588 <conv_int+0x8e>
    35c8:	11 fd       	sbrc	r17, 1
    35ca:	04 c0       	rjmp	.+8      	; 0x35d4 <conv_int+0xda>
    35cc:	b1 cf       	rjmp	.-158    	; 0x3530 <conv_int+0x36>
    35ce:	c1 2c       	mov	r12, r1
    35d0:	d1 2c       	mov	r13, r1
    35d2:	76 01       	movw	r14, r12
    35d4:	17 ff       	sbrs	r17, 7
    35d6:	08 c0       	rjmp	.+16     	; 0x35e8 <conv_int+0xee>
    35d8:	f0 94       	com	r15
    35da:	e0 94       	com	r14
    35dc:	d0 94       	com	r13
    35de:	c0 94       	com	r12
    35e0:	c1 1c       	adc	r12, r1
    35e2:	d1 1c       	adc	r13, r1
    35e4:	e1 1c       	adc	r14, r1
    35e6:	f1 1c       	adc	r15, r1
    35e8:	21 2f       	mov	r18, r17
    35ea:	b7 01       	movw	r22, r14
    35ec:	a6 01       	movw	r20, r12
    35ee:	c4 01       	movw	r24, r8
    35f0:	42 df       	rcall	.-380    	; 0x3476 <putval>
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	df 91       	pop	r29
    35f6:	cf 91       	pop	r28
    35f8:	1f 91       	pop	r17
    35fa:	0f 91       	pop	r16
    35fc:	ff 90       	pop	r15
    35fe:	ef 90       	pop	r14
    3600:	df 90       	pop	r13
    3602:	cf 90       	pop	r12
    3604:	af 90       	pop	r10
    3606:	9f 90       	pop	r9
    3608:	8f 90       	pop	r8
    360a:	08 95       	ret

0000360c <conv_brk>:
    360c:	a1 e2       	ldi	r26, 0x21	; 33
    360e:	b0 e0       	ldi	r27, 0x00	; 0
    3610:	eb e0       	ldi	r30, 0x0B	; 11
    3612:	fb e1       	ldi	r31, 0x1B	; 27
    3614:	e0 c2       	rjmp	.+1472   	; 0x3bd6 <__prologue_saves__+0xa>
    3616:	5c 01       	movw	r10, r24
    3618:	7a 01       	movw	r14, r20
    361a:	8e 01       	movw	r16, r28
    361c:	0f 5f       	subi	r16, 0xFF	; 255
    361e:	1f 4f       	sbci	r17, 0xFF	; 255
    3620:	68 01       	movw	r12, r16
    3622:	80 e2       	ldi	r24, 0x20	; 32
    3624:	d8 01       	movw	r26, r16
    3626:	1d 92       	st	X+, r1
    3628:	8a 95       	dec	r24
    362a:	e9 f7       	brne	.-6      	; 0x3626 <conv_brk+0x1a>
    362c:	f5 01       	movw	r30, r10
    362e:	73 80       	ldd	r7, Z+3	; 0x03
    3630:	40 e0       	ldi	r20, 0x00	; 0
    3632:	50 e0       	ldi	r21, 0x00	; 0
    3634:	81 2c       	mov	r8, r1
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	91 2c       	mov	r9, r1
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	f9 01       	movw	r30, r18
    3640:	73 fc       	sbrc	r7, 3
    3642:	a5 91       	lpm	r26, Z+
    3644:	73 fe       	sbrs	r7, 3
    3646:	a1 91       	ld	r26, Z+
    3648:	8f 01       	movw	r16, r30
    364a:	7a 2f       	mov	r23, r26
    364c:	9f 01       	movw	r18, r30
    364e:	a1 11       	cpse	r26, r1
    3650:	03 c0       	rjmp	.+6      	; 0x3658 <conv_brk+0x4c>
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	7b c0       	rjmp	.+246    	; 0x374e <conv_brk+0x142>
    3658:	ae 35       	cpi	r26, 0x5E	; 94
    365a:	19 f4       	brne	.+6      	; 0x3662 <conv_brk+0x56>
    365c:	41 15       	cp	r20, r1
    365e:	51 05       	cpc	r21, r1
    3660:	59 f1       	breq	.+86     	; 0x36b8 <conv_brk+0xac>
    3662:	e9 2d       	mov	r30, r9
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	e4 17       	cp	r30, r20
    3668:	f5 07       	cpc	r31, r21
    366a:	3c f4       	brge	.+14     	; 0x367a <conv_brk+0x6e>
    366c:	ad 35       	cpi	r26, 0x5D	; 93
    366e:	69 f1       	breq	.+90     	; 0x36ca <conv_brk+0xbe>
    3670:	ad 32       	cpi	r26, 0x2D	; 45
    3672:	19 f4       	brne	.+6      	; 0x367a <conv_brk+0x6e>
    3674:	bb 23       	and	r27, r27
    3676:	19 f1       	breq	.+70     	; 0x36be <conv_brk+0xb2>
    3678:	03 c0       	rjmp	.+6      	; 0x3680 <conv_brk+0x74>
    367a:	b1 11       	cpse	r27, r1
    367c:	01 c0       	rjmp	.+2      	; 0x3680 <conv_brk+0x74>
    367e:	8a 2e       	mov	r8, r26
    3680:	e7 2f       	mov	r30, r23
    3682:	e6 95       	lsr	r30
    3684:	e6 95       	lsr	r30
    3686:	e6 95       	lsr	r30
    3688:	86 01       	movw	r16, r12
    368a:	0e 0f       	add	r16, r30
    368c:	11 1d       	adc	r17, r1
    368e:	f8 01       	movw	r30, r16
    3690:	a7 2f       	mov	r26, r23
    3692:	a7 70       	andi	r26, 0x07	; 7
    3694:	8c 01       	movw	r16, r24
    3696:	02 c0       	rjmp	.+4      	; 0x369c <conv_brk+0x90>
    3698:	00 0f       	add	r16, r16
    369a:	11 1f       	adc	r17, r17
    369c:	aa 95       	dec	r26
    369e:	e2 f7       	brpl	.-8      	; 0x3698 <conv_brk+0x8c>
    36a0:	d8 01       	movw	r26, r16
    36a2:	b0 81       	ld	r27, Z
    36a4:	ba 2b       	or	r27, r26
    36a6:	b0 83       	st	Z, r27
    36a8:	78 15       	cp	r23, r8
    36aa:	59 f0       	breq	.+22     	; 0x36c2 <conv_brk+0xb6>
    36ac:	78 15       	cp	r23, r8
    36ae:	10 f4       	brcc	.+4      	; 0x36b4 <conv_brk+0xa8>
    36b0:	7f 5f       	subi	r23, 0xFF	; 255
    36b2:	e6 cf       	rjmp	.-52     	; 0x3680 <conv_brk+0x74>
    36b4:	71 50       	subi	r23, 0x01	; 1
    36b6:	e4 cf       	rjmp	.-56     	; 0x3680 <conv_brk+0x74>
    36b8:	99 24       	eor	r9, r9
    36ba:	93 94       	inc	r9
    36bc:	03 c0       	rjmp	.+6      	; 0x36c4 <conv_brk+0xb8>
    36be:	b1 e0       	ldi	r27, 0x01	; 1
    36c0:	01 c0       	rjmp	.+2      	; 0x36c4 <conv_brk+0xb8>
    36c2:	b0 e0       	ldi	r27, 0x00	; 0
    36c4:	4f 5f       	subi	r20, 0xFF	; 255
    36c6:	5f 4f       	sbci	r21, 0xFF	; 255
    36c8:	ba cf       	rjmp	.-140    	; 0x363e <conv_brk+0x32>
    36ca:	bb 23       	and	r27, r27
    36cc:	19 f0       	breq	.+6      	; 0x36d4 <conv_brk+0xc8>
    36ce:	8e 81       	ldd	r24, Y+6	; 0x06
    36d0:	80 62       	ori	r24, 0x20	; 32
    36d2:	8e 83       	std	Y+6, r24	; 0x06
    36d4:	91 10       	cpse	r9, r1
    36d6:	03 c0       	rjmp	.+6      	; 0x36de <conv_brk+0xd2>
    36d8:	99 24       	eor	r9, r9
    36da:	93 94       	inc	r9
    36dc:	15 c0       	rjmp	.+42     	; 0x3708 <conv_brk+0xfc>
    36de:	f6 01       	movw	r30, r12
    36e0:	ce 01       	movw	r24, r28
    36e2:	81 96       	adiw	r24, 0x21	; 33
    36e4:	20 81       	ld	r18, Z
    36e6:	20 95       	com	r18
    36e8:	21 93       	st	Z+, r18
    36ea:	e8 17       	cp	r30, r24
    36ec:	f9 07       	cpc	r31, r25
    36ee:	d1 f7       	brne	.-12     	; 0x36e4 <conv_brk+0xd8>
    36f0:	f3 cf       	rjmp	.-26     	; 0x36d8 <conv_brk+0xcc>
    36f2:	e1 14       	cp	r14, r1
    36f4:	f1 04       	cpc	r15, r1
    36f6:	29 f0       	breq	.+10     	; 0x3702 <conv_brk+0xf6>
    36f8:	d7 01       	movw	r26, r14
    36fa:	8c 93       	st	X, r24
    36fc:	f7 01       	movw	r30, r14
    36fe:	31 96       	adiw	r30, 0x01	; 1
    3700:	7f 01       	movw	r14, r30
    3702:	61 50       	subi	r22, 0x01	; 1
    3704:	f1 f0       	breq	.+60     	; 0x3742 <conv_brk+0x136>
    3706:	91 2c       	mov	r9, r1
    3708:	c5 01       	movw	r24, r10
    370a:	69 a3       	std	Y+33, r22	; 0x21
    370c:	75 d1       	rcall	.+746    	; 0x39f8 <fgetc>
    370e:	69 a1       	ldd	r22, Y+33	; 0x21
    3710:	97 fd       	sbrc	r25, 7
    3712:	15 c0       	rjmp	.+42     	; 0x373e <conv_brk+0x132>
    3714:	28 2f       	mov	r18, r24
    3716:	26 95       	lsr	r18
    3718:	26 95       	lsr	r18
    371a:	26 95       	lsr	r18
    371c:	f6 01       	movw	r30, r12
    371e:	e2 0f       	add	r30, r18
    3720:	f1 1d       	adc	r31, r1
    3722:	20 81       	ld	r18, Z
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	ac 01       	movw	r20, r24
    3728:	47 70       	andi	r20, 0x07	; 7
    372a:	55 27       	eor	r21, r21
    372c:	02 c0       	rjmp	.+4      	; 0x3732 <conv_brk+0x126>
    372e:	35 95       	asr	r19
    3730:	27 95       	ror	r18
    3732:	4a 95       	dec	r20
    3734:	e2 f7       	brpl	.-8      	; 0x372e <conv_brk+0x122>
    3736:	20 fd       	sbrc	r18, 0
    3738:	dc cf       	rjmp	.-72     	; 0x36f2 <conv_brk+0xe6>
    373a:	b5 01       	movw	r22, r10
    373c:	cd d1       	rcall	.+922    	; 0x3ad8 <ungetc>
    373e:	91 10       	cpse	r9, r1
    3740:	88 cf       	rjmp	.-240    	; 0x3652 <conv_brk+0x46>
    3742:	e1 14       	cp	r14, r1
    3744:	f1 04       	cpc	r15, r1
    3746:	11 f0       	breq	.+4      	; 0x374c <conv_brk+0x140>
    3748:	d7 01       	movw	r26, r14
    374a:	1c 92       	st	X, r1
    374c:	c8 01       	movw	r24, r16
    374e:	a1 96       	adiw	r28, 0x21	; 33
    3750:	ed e0       	ldi	r30, 0x0D	; 13
    3752:	5a c2       	rjmp	.+1204   	; 0x3c08 <__epilogue_restores__+0xa>

00003754 <vfscanf>:
    3754:	4f 92       	push	r4
    3756:	5f 92       	push	r5
    3758:	7f 92       	push	r7
    375a:	8f 92       	push	r8
    375c:	9f 92       	push	r9
    375e:	af 92       	push	r10
    3760:	bf 92       	push	r11
    3762:	cf 92       	push	r12
    3764:	df 92       	push	r13
    3766:	ef 92       	push	r14
    3768:	ff 92       	push	r15
    376a:	0f 93       	push	r16
    376c:	1f 93       	push	r17
    376e:	cf 93       	push	r28
    3770:	df 93       	push	r29
    3772:	1f 92       	push	r1
    3774:	cd b7       	in	r28, 0x3d	; 61
    3776:	de b7       	in	r29, 0x3e	; 62
    3778:	8c 01       	movw	r16, r24
    377a:	2b 01       	movw	r4, r22
    377c:	7a 01       	movw	r14, r20
    377e:	fc 01       	movw	r30, r24
    3780:	16 82       	std	Z+6, r1	; 0x06
    3782:	17 82       	std	Z+7, r1	; 0x07
    3784:	a1 2c       	mov	r10, r1
    3786:	f8 01       	movw	r30, r16
    3788:	d3 80       	ldd	r13, Z+3	; 0x03
    378a:	f2 01       	movw	r30, r4
    378c:	d3 fc       	sbrc	r13, 3
    378e:	85 91       	lpm	r24, Z+
    3790:	d3 fe       	sbrs	r13, 3
    3792:	81 91       	ld	r24, Z+
    3794:	38 2f       	mov	r19, r24
    3796:	2f 01       	movw	r4, r30
    3798:	88 23       	and	r24, r24
    379a:	09 f4       	brne	.+2      	; 0x379e <vfscanf+0x4a>
    379c:	ee c0       	rjmp	.+476    	; 0x397a <vfscanf+0x226>
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	39 83       	std	Y+1, r19	; 0x01
    37a2:	01 d1       	rcall	.+514    	; 0x39a6 <isspace>
    37a4:	39 81       	ldd	r19, Y+1	; 0x01
    37a6:	89 2b       	or	r24, r25
    37a8:	19 f0       	breq	.+6      	; 0x37b0 <vfscanf+0x5c>
    37aa:	c8 01       	movw	r24, r16
    37ac:	90 de       	rcall	.-736    	; 0x34ce <skip_spaces>
    37ae:	eb cf       	rjmp	.-42     	; 0x3786 <vfscanf+0x32>
    37b0:	35 32       	cpi	r19, 0x25	; 37
    37b2:	41 f4       	brne	.+16     	; 0x37c4 <vfscanf+0x70>
    37b4:	f2 01       	movw	r30, r4
    37b6:	d3 fc       	sbrc	r13, 3
    37b8:	35 91       	lpm	r19, Z+
    37ba:	d3 fe       	sbrs	r13, 3
    37bc:	31 91       	ld	r19, Z+
    37be:	2f 01       	movw	r4, r30
    37c0:	35 32       	cpi	r19, 0x25	; 37
    37c2:	59 f4       	brne	.+22     	; 0x37da <vfscanf+0x86>
    37c4:	c8 01       	movw	r24, r16
    37c6:	39 83       	std	Y+1, r19	; 0x01
    37c8:	17 d1       	rcall	.+558    	; 0x39f8 <fgetc>
    37ca:	39 81       	ldd	r19, Y+1	; 0x01
    37cc:	97 fd       	sbrc	r25, 7
    37ce:	d3 c0       	rjmp	.+422    	; 0x3976 <vfscanf+0x222>
    37d0:	38 17       	cp	r19, r24
    37d2:	c9 f2       	breq	.-78     	; 0x3786 <vfscanf+0x32>
    37d4:	b8 01       	movw	r22, r16
    37d6:	80 d1       	rcall	.+768    	; 0x3ad8 <ungetc>
    37d8:	d0 c0       	rjmp	.+416    	; 0x397a <vfscanf+0x226>
    37da:	3a 32       	cpi	r19, 0x2A	; 42
    37dc:	41 f4       	brne	.+16     	; 0x37ee <vfscanf+0x9a>
    37de:	d3 fc       	sbrc	r13, 3
    37e0:	35 91       	lpm	r19, Z+
    37e2:	d3 fe       	sbrs	r13, 3
    37e4:	31 91       	ld	r19, Z+
    37e6:	2f 01       	movw	r4, r30
    37e8:	bb 24       	eor	r11, r11
    37ea:	b3 94       	inc	r11
    37ec:	01 c0       	rjmp	.+2      	; 0x37f0 <vfscanf+0x9c>
    37ee:	b1 2c       	mov	r11, r1
    37f0:	71 2c       	mov	r7, r1
    37f2:	20 ed       	ldi	r18, 0xD0	; 208
    37f4:	23 0f       	add	r18, r19
    37f6:	2a 30       	cpi	r18, 0x0A	; 10
    37f8:	88 f4       	brcc	.+34     	; 0x381c <vfscanf+0xc8>
    37fa:	fb 2d       	mov	r31, r11
    37fc:	f2 60       	ori	r31, 0x02	; 2
    37fe:	bf 2e       	mov	r11, r31
    3800:	67 2d       	mov	r22, r7
    3802:	70 e0       	ldi	r23, 0x00	; 0
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	40 e2       	ldi	r20, 0x20	; 32
    380a:	41 de       	rcall	.-894    	; 0x348e <mulacc>
    380c:	76 2e       	mov	r7, r22
    380e:	f2 01       	movw	r30, r4
    3810:	d3 fc       	sbrc	r13, 3
    3812:	35 91       	lpm	r19, Z+
    3814:	d3 fe       	sbrs	r13, 3
    3816:	31 91       	ld	r19, Z+
    3818:	2f 01       	movw	r4, r30
    381a:	eb cf       	rjmp	.-42     	; 0x37f2 <vfscanf+0x9e>
    381c:	b1 fe       	sbrs	r11, 1
    381e:	03 c0       	rjmp	.+6      	; 0x3826 <vfscanf+0xd2>
    3820:	71 10       	cpse	r7, r1
    3822:	03 c0       	rjmp	.+6      	; 0x382a <vfscanf+0xd6>
    3824:	aa c0       	rjmp	.+340    	; 0x397a <vfscanf+0x226>
    3826:	77 24       	eor	r7, r7
    3828:	7a 94       	dec	r7
    382a:	38 36       	cpi	r19, 0x68	; 104
    382c:	19 f0       	breq	.+6      	; 0x3834 <vfscanf+0xe0>
    382e:	3c 36       	cpi	r19, 0x6C	; 108
    3830:	61 f0       	breq	.+24     	; 0x384a <vfscanf+0xf6>
    3832:	14 c0       	rjmp	.+40     	; 0x385c <vfscanf+0x108>
    3834:	f2 01       	movw	r30, r4
    3836:	d3 fc       	sbrc	r13, 3
    3838:	35 91       	lpm	r19, Z+
    383a:	d3 fe       	sbrs	r13, 3
    383c:	31 91       	ld	r19, Z+
    383e:	2f 01       	movw	r4, r30
    3840:	38 36       	cpi	r19, 0x68	; 104
    3842:	61 f4       	brne	.+24     	; 0x385c <vfscanf+0x108>
    3844:	fb 2d       	mov	r31, r11
    3846:	f8 60       	ori	r31, 0x08	; 8
    3848:	bf 2e       	mov	r11, r31
    384a:	8b 2d       	mov	r24, r11
    384c:	84 60       	ori	r24, 0x04	; 4
    384e:	b8 2e       	mov	r11, r24
    3850:	f2 01       	movw	r30, r4
    3852:	d3 fc       	sbrc	r13, 3
    3854:	35 91       	lpm	r19, Z+
    3856:	d3 fe       	sbrs	r13, 3
    3858:	31 91       	ld	r19, Z+
    385a:	2f 01       	movw	r4, r30
    385c:	33 23       	and	r19, r19
    385e:	09 f4       	brne	.+2      	; 0x3862 <vfscanf+0x10e>
    3860:	8c c0       	rjmp	.+280    	; 0x397a <vfscanf+0x226>
    3862:	63 2f       	mov	r22, r19
    3864:	70 e0       	ldi	r23, 0x00	; 0
    3866:	8a e1       	ldi	r24, 0x1A	; 26
    3868:	92 e0       	ldi	r25, 0x02	; 2
    386a:	39 83       	std	Y+1, r19	; 0x01
    386c:	a4 d0       	rcall	.+328    	; 0x39b6 <strchr_P>
    386e:	39 81       	ldd	r19, Y+1	; 0x01
    3870:	89 2b       	or	r24, r25
    3872:	09 f4       	brne	.+2      	; 0x3876 <vfscanf+0x122>
    3874:	82 c0       	rjmp	.+260    	; 0x397a <vfscanf+0x226>
    3876:	b0 fc       	sbrc	r11, 0
    3878:	07 c0       	rjmp	.+14     	; 0x3888 <vfscanf+0x134>
    387a:	f7 01       	movw	r30, r14
    387c:	c0 80       	ld	r12, Z
    387e:	d1 80       	ldd	r13, Z+1	; 0x01
    3880:	c7 01       	movw	r24, r14
    3882:	02 96       	adiw	r24, 0x02	; 2
    3884:	7c 01       	movw	r14, r24
    3886:	02 c0       	rjmp	.+4      	; 0x388c <vfscanf+0x138>
    3888:	c1 2c       	mov	r12, r1
    388a:	d1 2c       	mov	r13, r1
    388c:	3e 36       	cpi	r19, 0x6E	; 110
    388e:	49 f4       	brne	.+18     	; 0x38a2 <vfscanf+0x14e>
    3890:	f8 01       	movw	r30, r16
    3892:	46 81       	ldd	r20, Z+6	; 0x06
    3894:	57 81       	ldd	r21, Z+7	; 0x07
    3896:	60 e0       	ldi	r22, 0x00	; 0
    3898:	70 e0       	ldi	r23, 0x00	; 0
    389a:	2b 2d       	mov	r18, r11
    389c:	c6 01       	movw	r24, r12
    389e:	eb dd       	rcall	.-1066   	; 0x3476 <putval>
    38a0:	72 cf       	rjmp	.-284    	; 0x3786 <vfscanf+0x32>
    38a2:	33 36       	cpi	r19, 0x63	; 99
    38a4:	99 f4       	brne	.+38     	; 0x38cc <vfscanf+0x178>
    38a6:	b1 fc       	sbrc	r11, 1
    38a8:	02 c0       	rjmp	.+4      	; 0x38ae <vfscanf+0x15a>
    38aa:	77 24       	eor	r7, r7
    38ac:	73 94       	inc	r7
    38ae:	c8 01       	movw	r24, r16
    38b0:	a3 d0       	rcall	.+326    	; 0x39f8 <fgetc>
    38b2:	97 fd       	sbrc	r25, 7
    38b4:	60 c0       	rjmp	.+192    	; 0x3976 <vfscanf+0x222>
    38b6:	c1 14       	cp	r12, r1
    38b8:	d1 04       	cpc	r13, r1
    38ba:	29 f0       	breq	.+10     	; 0x38c6 <vfscanf+0x172>
    38bc:	f6 01       	movw	r30, r12
    38be:	80 83       	st	Z, r24
    38c0:	c6 01       	movw	r24, r12
    38c2:	01 96       	adiw	r24, 0x01	; 1
    38c4:	6c 01       	movw	r12, r24
    38c6:	7a 94       	dec	r7
    38c8:	91 f7       	brne	.-28     	; 0x38ae <vfscanf+0x15a>
    38ca:	51 c0       	rjmp	.+162    	; 0x396e <vfscanf+0x21a>
    38cc:	3b 35       	cpi	r19, 0x5B	; 91
    38ce:	51 f4       	brne	.+20     	; 0x38e4 <vfscanf+0x190>
    38d0:	92 01       	movw	r18, r4
    38d2:	a6 01       	movw	r20, r12
    38d4:	67 2d       	mov	r22, r7
    38d6:	c8 01       	movw	r24, r16
    38d8:	99 de       	rcall	.-718    	; 0x360c <conv_brk>
    38da:	2c 01       	movw	r4, r24
    38dc:	00 97       	sbiw	r24, 0x00	; 0
    38de:	09 f0       	breq	.+2      	; 0x38e2 <vfscanf+0x18e>
    38e0:	46 c0       	rjmp	.+140    	; 0x396e <vfscanf+0x21a>
    38e2:	40 c0       	rjmp	.+128    	; 0x3964 <vfscanf+0x210>
    38e4:	c8 01       	movw	r24, r16
    38e6:	39 83       	std	Y+1, r19	; 0x01
    38e8:	f2 dd       	rcall	.-1052   	; 0x34ce <skip_spaces>
    38ea:	39 81       	ldd	r19, Y+1	; 0x01
    38ec:	97 fd       	sbrc	r25, 7
    38ee:	43 c0       	rjmp	.+134    	; 0x3976 <vfscanf+0x222>
    38f0:	3f 36       	cpi	r19, 0x6F	; 111
    38f2:	51 f1       	breq	.+84     	; 0x3948 <vfscanf+0x1f4>
    38f4:	28 f4       	brcc	.+10     	; 0x3900 <vfscanf+0x1ac>
    38f6:	34 36       	cpi	r19, 0x64	; 100
    38f8:	19 f1       	breq	.+70     	; 0x3940 <vfscanf+0x1ec>
    38fa:	39 36       	cpi	r19, 0x69	; 105
    38fc:	61 f1       	breq	.+88     	; 0x3956 <vfscanf+0x202>
    38fe:	28 c0       	rjmp	.+80     	; 0x3950 <vfscanf+0x1fc>
    3900:	33 37       	cpi	r19, 0x73	; 115
    3902:	69 f0       	breq	.+26     	; 0x391e <vfscanf+0x1ca>
    3904:	35 37       	cpi	r19, 0x75	; 117
    3906:	e1 f0       	breq	.+56     	; 0x3940 <vfscanf+0x1ec>
    3908:	23 c0       	rjmp	.+70     	; 0x3950 <vfscanf+0x1fc>
    390a:	c1 14       	cp	r12, r1
    390c:	d1 04       	cpc	r13, r1
    390e:	29 f0       	breq	.+10     	; 0x391a <vfscanf+0x1c6>
    3910:	f6 01       	movw	r30, r12
    3912:	80 82       	st	Z, r8
    3914:	c6 01       	movw	r24, r12
    3916:	01 96       	adiw	r24, 0x01	; 1
    3918:	6c 01       	movw	r12, r24
    391a:	7a 94       	dec	r7
    391c:	59 f0       	breq	.+22     	; 0x3934 <vfscanf+0x1e0>
    391e:	c8 01       	movw	r24, r16
    3920:	6b d0       	rcall	.+214    	; 0x39f8 <fgetc>
    3922:	4c 01       	movw	r8, r24
    3924:	97 fd       	sbrc	r25, 7
    3926:	06 c0       	rjmp	.+12     	; 0x3934 <vfscanf+0x1e0>
    3928:	3e d0       	rcall	.+124    	; 0x39a6 <isspace>
    392a:	89 2b       	or	r24, r25
    392c:	71 f3       	breq	.-36     	; 0x390a <vfscanf+0x1b6>
    392e:	b8 01       	movw	r22, r16
    3930:	c4 01       	movw	r24, r8
    3932:	d2 d0       	rcall	.+420    	; 0x3ad8 <ungetc>
    3934:	c1 14       	cp	r12, r1
    3936:	d1 04       	cpc	r13, r1
    3938:	d1 f0       	breq	.+52     	; 0x396e <vfscanf+0x21a>
    393a:	f6 01       	movw	r30, r12
    393c:	10 82       	st	Z, r1
    393e:	17 c0       	rjmp	.+46     	; 0x396e <vfscanf+0x21a>
    3940:	fb 2d       	mov	r31, r11
    3942:	f0 62       	ori	r31, 0x20	; 32
    3944:	bf 2e       	mov	r11, r31
    3946:	07 c0       	rjmp	.+14     	; 0x3956 <vfscanf+0x202>
    3948:	8b 2d       	mov	r24, r11
    394a:	80 61       	ori	r24, 0x10	; 16
    394c:	b8 2e       	mov	r11, r24
    394e:	03 c0       	rjmp	.+6      	; 0x3956 <vfscanf+0x202>
    3950:	9b 2d       	mov	r25, r11
    3952:	90 64       	ori	r25, 0x40	; 64
    3954:	b9 2e       	mov	r11, r25
    3956:	2b 2d       	mov	r18, r11
    3958:	a6 01       	movw	r20, r12
    395a:	67 2d       	mov	r22, r7
    395c:	c8 01       	movw	r24, r16
    395e:	cd dd       	rcall	.-1126   	; 0x34fa <conv_int>
    3960:	81 11       	cpse	r24, r1
    3962:	05 c0       	rjmp	.+10     	; 0x396e <vfscanf+0x21a>
    3964:	f8 01       	movw	r30, r16
    3966:	83 81       	ldd	r24, Z+3	; 0x03
    3968:	80 73       	andi	r24, 0x30	; 48
    396a:	29 f4       	brne	.+10     	; 0x3976 <vfscanf+0x222>
    396c:	06 c0       	rjmp	.+12     	; 0x397a <vfscanf+0x226>
    396e:	b0 fc       	sbrc	r11, 0
    3970:	0a cf       	rjmp	.-492    	; 0x3786 <vfscanf+0x32>
    3972:	a3 94       	inc	r10
    3974:	08 cf       	rjmp	.-496    	; 0x3786 <vfscanf+0x32>
    3976:	aa 20       	and	r10, r10
    3978:	19 f0       	breq	.+6      	; 0x3980 <vfscanf+0x22c>
    397a:	8a 2d       	mov	r24, r10
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	02 c0       	rjmp	.+4      	; 0x3984 <vfscanf+0x230>
    3980:	8f ef       	ldi	r24, 0xFF	; 255
    3982:	9f ef       	ldi	r25, 0xFF	; 255
    3984:	0f 90       	pop	r0
    3986:	df 91       	pop	r29
    3988:	cf 91       	pop	r28
    398a:	1f 91       	pop	r17
    398c:	0f 91       	pop	r16
    398e:	ff 90       	pop	r15
    3990:	ef 90       	pop	r14
    3992:	df 90       	pop	r13
    3994:	cf 90       	pop	r12
    3996:	bf 90       	pop	r11
    3998:	af 90       	pop	r10
    399a:	9f 90       	pop	r9
    399c:	8f 90       	pop	r8
    399e:	7f 90       	pop	r7
    39a0:	5f 90       	pop	r5
    39a2:	4f 90       	pop	r4
    39a4:	08 95       	ret

000039a6 <isspace>:
    39a6:	91 11       	cpse	r25, r1
    39a8:	0e c1       	rjmp	.+540    	; 0x3bc6 <__ctype_isfalse>
    39aa:	80 32       	cpi	r24, 0x20	; 32
    39ac:	19 f0       	breq	.+6      	; 0x39b4 <isspace+0xe>
    39ae:	89 50       	subi	r24, 0x09	; 9
    39b0:	85 50       	subi	r24, 0x05	; 5
    39b2:	d0 f7       	brcc	.-12     	; 0x39a8 <isspace+0x2>
    39b4:	08 95       	ret

000039b6 <strchr_P>:
    39b6:	fc 01       	movw	r30, r24
    39b8:	05 90       	lpm	r0, Z+
    39ba:	06 16       	cp	r0, r22
    39bc:	21 f0       	breq	.+8      	; 0x39c6 <strchr_P+0x10>
    39be:	00 20       	and	r0, r0
    39c0:	d9 f7       	brne	.-10     	; 0x39b8 <strchr_P+0x2>
    39c2:	c0 01       	movw	r24, r0
    39c4:	08 95       	ret
    39c6:	31 97       	sbiw	r30, 0x01	; 1
    39c8:	cf 01       	movw	r24, r30
    39ca:	08 95       	ret

000039cc <strnlen_P>:
    39cc:	fc 01       	movw	r30, r24
    39ce:	05 90       	lpm	r0, Z+
    39d0:	61 50       	subi	r22, 0x01	; 1
    39d2:	70 40       	sbci	r23, 0x00	; 0
    39d4:	01 10       	cpse	r0, r1
    39d6:	d8 f7       	brcc	.-10     	; 0x39ce <strnlen_P+0x2>
    39d8:	80 95       	com	r24
    39da:	90 95       	com	r25
    39dc:	8e 0f       	add	r24, r30
    39de:	9f 1f       	adc	r25, r31
    39e0:	08 95       	ret

000039e2 <strnlen>:
    39e2:	fc 01       	movw	r30, r24
    39e4:	61 50       	subi	r22, 0x01	; 1
    39e6:	70 40       	sbci	r23, 0x00	; 0
    39e8:	01 90       	ld	r0, Z+
    39ea:	01 10       	cpse	r0, r1
    39ec:	d8 f7       	brcc	.-10     	; 0x39e4 <strnlen+0x2>
    39ee:	80 95       	com	r24
    39f0:	90 95       	com	r25
    39f2:	8e 0f       	add	r24, r30
    39f4:	9f 1f       	adc	r25, r31
    39f6:	08 95       	ret

000039f8 <fgetc>:
    39f8:	cf 93       	push	r28
    39fa:	df 93       	push	r29
    39fc:	ec 01       	movw	r28, r24
    39fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3a00:	20 ff       	sbrs	r18, 0
    3a02:	33 c0       	rjmp	.+102    	; 0x3a6a <fgetc+0x72>
    3a04:	26 ff       	sbrs	r18, 6
    3a06:	0a c0       	rjmp	.+20     	; 0x3a1c <fgetc+0x24>
    3a08:	2f 7b       	andi	r18, 0xBF	; 191
    3a0a:	2b 83       	std	Y+3, r18	; 0x03
    3a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a0e:	9f 81       	ldd	r25, Y+7	; 0x07
    3a10:	01 96       	adiw	r24, 0x01	; 1
    3a12:	8e 83       	std	Y+6, r24	; 0x06
    3a14:	9f 83       	std	Y+7, r25	; 0x07
    3a16:	8a 81       	ldd	r24, Y+2	; 0x02
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	29 c0       	rjmp	.+82     	; 0x3a6e <fgetc+0x76>
    3a1c:	22 ff       	sbrs	r18, 2
    3a1e:	0f c0       	rjmp	.+30     	; 0x3a3e <fgetc+0x46>
    3a20:	e8 81       	ld	r30, Y
    3a22:	f9 81       	ldd	r31, Y+1	; 0x01
    3a24:	80 81       	ld	r24, Z
    3a26:	99 27       	eor	r25, r25
    3a28:	87 fd       	sbrc	r24, 7
    3a2a:	90 95       	com	r25
    3a2c:	00 97       	sbiw	r24, 0x00	; 0
    3a2e:	19 f4       	brne	.+6      	; 0x3a36 <fgetc+0x3e>
    3a30:	20 62       	ori	r18, 0x20	; 32
    3a32:	2b 83       	std	Y+3, r18	; 0x03
    3a34:	1a c0       	rjmp	.+52     	; 0x3a6a <fgetc+0x72>
    3a36:	31 96       	adiw	r30, 0x01	; 1
    3a38:	e8 83       	st	Y, r30
    3a3a:	f9 83       	std	Y+1, r31	; 0x01
    3a3c:	0e c0       	rjmp	.+28     	; 0x3a5a <fgetc+0x62>
    3a3e:	ea 85       	ldd	r30, Y+10	; 0x0a
    3a40:	fb 85       	ldd	r31, Y+11	; 0x0b
    3a42:	09 95       	icall
    3a44:	97 ff       	sbrs	r25, 7
    3a46:	09 c0       	rjmp	.+18     	; 0x3a5a <fgetc+0x62>
    3a48:	2b 81       	ldd	r18, Y+3	; 0x03
    3a4a:	01 96       	adiw	r24, 0x01	; 1
    3a4c:	11 f4       	brne	.+4      	; 0x3a52 <fgetc+0x5a>
    3a4e:	80 e1       	ldi	r24, 0x10	; 16
    3a50:	01 c0       	rjmp	.+2      	; 0x3a54 <fgetc+0x5c>
    3a52:	80 e2       	ldi	r24, 0x20	; 32
    3a54:	82 2b       	or	r24, r18
    3a56:	8b 83       	std	Y+3, r24	; 0x03
    3a58:	08 c0       	rjmp	.+16     	; 0x3a6a <fgetc+0x72>
    3a5a:	2e 81       	ldd	r18, Y+6	; 0x06
    3a5c:	3f 81       	ldd	r19, Y+7	; 0x07
    3a5e:	2f 5f       	subi	r18, 0xFF	; 255
    3a60:	3f 4f       	sbci	r19, 0xFF	; 255
    3a62:	2e 83       	std	Y+6, r18	; 0x06
    3a64:	3f 83       	std	Y+7, r19	; 0x07
    3a66:	99 27       	eor	r25, r25
    3a68:	02 c0       	rjmp	.+4      	; 0x3a6e <fgetc+0x76>
    3a6a:	8f ef       	ldi	r24, 0xFF	; 255
    3a6c:	9f ef       	ldi	r25, 0xFF	; 255
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	08 95       	ret

00003a74 <fputc>:
    3a74:	0f 93       	push	r16
    3a76:	1f 93       	push	r17
    3a78:	cf 93       	push	r28
    3a7a:	df 93       	push	r29
    3a7c:	18 2f       	mov	r17, r24
    3a7e:	09 2f       	mov	r16, r25
    3a80:	eb 01       	movw	r28, r22
    3a82:	8b 81       	ldd	r24, Y+3	; 0x03
    3a84:	81 fd       	sbrc	r24, 1
    3a86:	03 c0       	rjmp	.+6      	; 0x3a8e <fputc+0x1a>
    3a88:	8f ef       	ldi	r24, 0xFF	; 255
    3a8a:	9f ef       	ldi	r25, 0xFF	; 255
    3a8c:	20 c0       	rjmp	.+64     	; 0x3ace <fputc+0x5a>
    3a8e:	82 ff       	sbrs	r24, 2
    3a90:	10 c0       	rjmp	.+32     	; 0x3ab2 <fputc+0x3e>
    3a92:	4e 81       	ldd	r20, Y+6	; 0x06
    3a94:	5f 81       	ldd	r21, Y+7	; 0x07
    3a96:	2c 81       	ldd	r18, Y+4	; 0x04
    3a98:	3d 81       	ldd	r19, Y+5	; 0x05
    3a9a:	42 17       	cp	r20, r18
    3a9c:	53 07       	cpc	r21, r19
    3a9e:	7c f4       	brge	.+30     	; 0x3abe <fputc+0x4a>
    3aa0:	e8 81       	ld	r30, Y
    3aa2:	f9 81       	ldd	r31, Y+1	; 0x01
    3aa4:	9f 01       	movw	r18, r30
    3aa6:	2f 5f       	subi	r18, 0xFF	; 255
    3aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aaa:	28 83       	st	Y, r18
    3aac:	39 83       	std	Y+1, r19	; 0x01
    3aae:	10 83       	st	Z, r17
    3ab0:	06 c0       	rjmp	.+12     	; 0x3abe <fputc+0x4a>
    3ab2:	e8 85       	ldd	r30, Y+8	; 0x08
    3ab4:	f9 85       	ldd	r31, Y+9	; 0x09
    3ab6:	81 2f       	mov	r24, r17
    3ab8:	09 95       	icall
    3aba:	89 2b       	or	r24, r25
    3abc:	29 f7       	brne	.-54     	; 0x3a88 <fputc+0x14>
    3abe:	2e 81       	ldd	r18, Y+6	; 0x06
    3ac0:	3f 81       	ldd	r19, Y+7	; 0x07
    3ac2:	2f 5f       	subi	r18, 0xFF	; 255
    3ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ac6:	2e 83       	std	Y+6, r18	; 0x06
    3ac8:	3f 83       	std	Y+7, r19	; 0x07
    3aca:	81 2f       	mov	r24, r17
    3acc:	90 2f       	mov	r25, r16
    3ace:	df 91       	pop	r29
    3ad0:	cf 91       	pop	r28
    3ad2:	1f 91       	pop	r17
    3ad4:	0f 91       	pop	r16
    3ad6:	08 95       	ret

00003ad8 <ungetc>:
    3ad8:	fb 01       	movw	r30, r22
    3ada:	23 81       	ldd	r18, Z+3	; 0x03
    3adc:	20 ff       	sbrs	r18, 0
    3ade:	12 c0       	rjmp	.+36     	; 0x3b04 <ungetc+0x2c>
    3ae0:	26 fd       	sbrc	r18, 6
    3ae2:	10 c0       	rjmp	.+32     	; 0x3b04 <ungetc+0x2c>
    3ae4:	8f 3f       	cpi	r24, 0xFF	; 255
    3ae6:	3f ef       	ldi	r19, 0xFF	; 255
    3ae8:	93 07       	cpc	r25, r19
    3aea:	61 f0       	breq	.+24     	; 0x3b04 <ungetc+0x2c>
    3aec:	82 83       	std	Z+2, r24	; 0x02
    3aee:	2f 7d       	andi	r18, 0xDF	; 223
    3af0:	20 64       	ori	r18, 0x40	; 64
    3af2:	23 83       	std	Z+3, r18	; 0x03
    3af4:	26 81       	ldd	r18, Z+6	; 0x06
    3af6:	37 81       	ldd	r19, Z+7	; 0x07
    3af8:	21 50       	subi	r18, 0x01	; 1
    3afa:	31 09       	sbc	r19, r1
    3afc:	26 83       	std	Z+6, r18	; 0x06
    3afe:	37 83       	std	Z+7, r19	; 0x07
    3b00:	99 27       	eor	r25, r25
    3b02:	08 95       	ret
    3b04:	8f ef       	ldi	r24, 0xFF	; 255
    3b06:	9f ef       	ldi	r25, 0xFF	; 255
    3b08:	08 95       	ret

00003b0a <__ultoa_invert>:
    3b0a:	fa 01       	movw	r30, r20
    3b0c:	aa 27       	eor	r26, r26
    3b0e:	28 30       	cpi	r18, 0x08	; 8
    3b10:	51 f1       	breq	.+84     	; 0x3b66 <__ultoa_invert+0x5c>
    3b12:	20 31       	cpi	r18, 0x10	; 16
    3b14:	81 f1       	breq	.+96     	; 0x3b76 <__ultoa_invert+0x6c>
    3b16:	e8 94       	clt
    3b18:	6f 93       	push	r22
    3b1a:	6e 7f       	andi	r22, 0xFE	; 254
    3b1c:	6e 5f       	subi	r22, 0xFE	; 254
    3b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b20:	8f 4f       	sbci	r24, 0xFF	; 255
    3b22:	9f 4f       	sbci	r25, 0xFF	; 255
    3b24:	af 4f       	sbci	r26, 0xFF	; 255
    3b26:	b1 e0       	ldi	r27, 0x01	; 1
    3b28:	3e d0       	rcall	.+124    	; 0x3ba6 <__ultoa_invert+0x9c>
    3b2a:	b4 e0       	ldi	r27, 0x04	; 4
    3b2c:	3c d0       	rcall	.+120    	; 0x3ba6 <__ultoa_invert+0x9c>
    3b2e:	67 0f       	add	r22, r23
    3b30:	78 1f       	adc	r23, r24
    3b32:	89 1f       	adc	r24, r25
    3b34:	9a 1f       	adc	r25, r26
    3b36:	a1 1d       	adc	r26, r1
    3b38:	68 0f       	add	r22, r24
    3b3a:	79 1f       	adc	r23, r25
    3b3c:	8a 1f       	adc	r24, r26
    3b3e:	91 1d       	adc	r25, r1
    3b40:	a1 1d       	adc	r26, r1
    3b42:	6a 0f       	add	r22, r26
    3b44:	71 1d       	adc	r23, r1
    3b46:	81 1d       	adc	r24, r1
    3b48:	91 1d       	adc	r25, r1
    3b4a:	a1 1d       	adc	r26, r1
    3b4c:	20 d0       	rcall	.+64     	; 0x3b8e <__ultoa_invert+0x84>
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <__ultoa_invert+0x48>
    3b50:	68 94       	set
    3b52:	3f 91       	pop	r19
    3b54:	2a e0       	ldi	r18, 0x0A	; 10
    3b56:	26 9f       	mul	r18, r22
    3b58:	11 24       	eor	r1, r1
    3b5a:	30 19       	sub	r19, r0
    3b5c:	30 5d       	subi	r19, 0xD0	; 208
    3b5e:	31 93       	st	Z+, r19
    3b60:	de f6       	brtc	.-74     	; 0x3b18 <__ultoa_invert+0xe>
    3b62:	cf 01       	movw	r24, r30
    3b64:	08 95       	ret
    3b66:	46 2f       	mov	r20, r22
    3b68:	47 70       	andi	r20, 0x07	; 7
    3b6a:	40 5d       	subi	r20, 0xD0	; 208
    3b6c:	41 93       	st	Z+, r20
    3b6e:	b3 e0       	ldi	r27, 0x03	; 3
    3b70:	0f d0       	rcall	.+30     	; 0x3b90 <__ultoa_invert+0x86>
    3b72:	c9 f7       	brne	.-14     	; 0x3b66 <__ultoa_invert+0x5c>
    3b74:	f6 cf       	rjmp	.-20     	; 0x3b62 <__ultoa_invert+0x58>
    3b76:	46 2f       	mov	r20, r22
    3b78:	4f 70       	andi	r20, 0x0F	; 15
    3b7a:	40 5d       	subi	r20, 0xD0	; 208
    3b7c:	4a 33       	cpi	r20, 0x3A	; 58
    3b7e:	18 f0       	brcs	.+6      	; 0x3b86 <__ultoa_invert+0x7c>
    3b80:	49 5d       	subi	r20, 0xD9	; 217
    3b82:	31 fd       	sbrc	r19, 1
    3b84:	40 52       	subi	r20, 0x20	; 32
    3b86:	41 93       	st	Z+, r20
    3b88:	02 d0       	rcall	.+4      	; 0x3b8e <__ultoa_invert+0x84>
    3b8a:	a9 f7       	brne	.-22     	; 0x3b76 <__ultoa_invert+0x6c>
    3b8c:	ea cf       	rjmp	.-44     	; 0x3b62 <__ultoa_invert+0x58>
    3b8e:	b4 e0       	ldi	r27, 0x04	; 4
    3b90:	a6 95       	lsr	r26
    3b92:	97 95       	ror	r25
    3b94:	87 95       	ror	r24
    3b96:	77 95       	ror	r23
    3b98:	67 95       	ror	r22
    3b9a:	ba 95       	dec	r27
    3b9c:	c9 f7       	brne	.-14     	; 0x3b90 <__ultoa_invert+0x86>
    3b9e:	00 97       	sbiw	r24, 0x00	; 0
    3ba0:	61 05       	cpc	r22, r1
    3ba2:	71 05       	cpc	r23, r1
    3ba4:	08 95       	ret
    3ba6:	9b 01       	movw	r18, r22
    3ba8:	ac 01       	movw	r20, r24
    3baa:	0a 2e       	mov	r0, r26
    3bac:	06 94       	lsr	r0
    3bae:	57 95       	ror	r21
    3bb0:	47 95       	ror	r20
    3bb2:	37 95       	ror	r19
    3bb4:	27 95       	ror	r18
    3bb6:	ba 95       	dec	r27
    3bb8:	c9 f7       	brne	.-14     	; 0x3bac <__ultoa_invert+0xa2>
    3bba:	62 0f       	add	r22, r18
    3bbc:	73 1f       	adc	r23, r19
    3bbe:	84 1f       	adc	r24, r20
    3bc0:	95 1f       	adc	r25, r21
    3bc2:	a0 1d       	adc	r26, r0
    3bc4:	08 95       	ret

00003bc6 <__ctype_isfalse>:
    3bc6:	99 27       	eor	r25, r25
    3bc8:	88 27       	eor	r24, r24

00003bca <__ctype_istrue>:
    3bca:	08 95       	ret

00003bcc <__prologue_saves__>:
    3bcc:	2f 92       	push	r2
    3bce:	3f 92       	push	r3
    3bd0:	4f 92       	push	r4
    3bd2:	5f 92       	push	r5
    3bd4:	6f 92       	push	r6
    3bd6:	7f 92       	push	r7
    3bd8:	8f 92       	push	r8
    3bda:	9f 92       	push	r9
    3bdc:	af 92       	push	r10
    3bde:	bf 92       	push	r11
    3be0:	cf 92       	push	r12
    3be2:	df 92       	push	r13
    3be4:	ef 92       	push	r14
    3be6:	ff 92       	push	r15
    3be8:	0f 93       	push	r16
    3bea:	1f 93       	push	r17
    3bec:	cf 93       	push	r28
    3bee:	df 93       	push	r29
    3bf0:	cd b7       	in	r28, 0x3d	; 61
    3bf2:	de b7       	in	r29, 0x3e	; 62
    3bf4:	ca 1b       	sub	r28, r26
    3bf6:	db 0b       	sbc	r29, r27
    3bf8:	cd bf       	out	0x3d, r28	; 61
    3bfa:	de bf       	out	0x3e, r29	; 62
    3bfc:	09 94       	ijmp

00003bfe <__epilogue_restores__>:
    3bfe:	2a 88       	ldd	r2, Y+18	; 0x12
    3c00:	39 88       	ldd	r3, Y+17	; 0x11
    3c02:	48 88       	ldd	r4, Y+16	; 0x10
    3c04:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c06:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c08:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c10:	b9 84       	ldd	r11, Y+9	; 0x09
    3c12:	c8 84       	ldd	r12, Y+8	; 0x08
    3c14:	df 80       	ldd	r13, Y+7	; 0x07
    3c16:	ee 80       	ldd	r14, Y+6	; 0x06
    3c18:	fd 80       	ldd	r15, Y+5	; 0x05
    3c1a:	0c 81       	ldd	r16, Y+4	; 0x04
    3c1c:	1b 81       	ldd	r17, Y+3	; 0x03
    3c1e:	aa 81       	ldd	r26, Y+2	; 0x02
    3c20:	b9 81       	ldd	r27, Y+1	; 0x01
    3c22:	ce 0f       	add	r28, r30
    3c24:	d1 1d       	adc	r29, r1
    3c26:	cd bf       	out	0x3d, r28	; 61
    3c28:	de bf       	out	0x3e, r29	; 62
    3c2a:	ed 01       	movw	r28, r26
    3c2c:	08 95       	ret

00003c2e <_exit>:
    3c2e:	f8 94       	cli

00003c30 <__stop_program>:
    3c30:	ff cf       	rjmp	.-2      	; 0x3c30 <__stop_program>
