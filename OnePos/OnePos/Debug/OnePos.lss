
OnePos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003184  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00802000  00003184  00003218  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000028d  008020cc  008020cc  000032e4  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000032e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000560  00000000  00000000  00003340  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000cbdd  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000023dd  00000000  00000000  0001047d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000801a  00000000  00000000  0001285a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000dd8  00000000  00000000  0001a874  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00030537  00000000  00000000  0001b64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004f38  00000000  00000000  0004bb83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000538  00000000  00000000  00050ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b629  00000000  00000000  00050ff8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
      2e:	00 00       	nop
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_13>
      38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
      3e:	00 00       	nop
      40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
      46:	00 00       	nop
      48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
      52:	00 00       	nop
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
      56:	00 00       	nop
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__vector_46>
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
     132:	00 00       	nop
     134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
     136:	00 00       	nop
     138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
     13e:	00 00       	nop
     140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
     142:	00 00       	nop
     144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
     146:	00 00       	nop
     148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
     14e:	00 00       	nop
     150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
     152:	00 00       	nop
     154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
     156:	00 00       	nop
     158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_125>
     1f8:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__vector_126>
     1fc:	bf 0c       	add	r11, r15
     1fe:	ad 0c       	add	r10, r13
     200:	b0 0c       	add	r11, r0
     202:	b3 0c       	add	r11, r3
     204:	b6 0c       	add	r11, r6
     206:	b9 0c       	add	r11, r9
     208:	bc 0c       	add	r11, r12

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e2       	ldi	r29, 0x2F	; 47
     214:	de bf       	out	0x3e, r29	; 62

00000216 <__do_copy_data>:
     216:	10 e2       	ldi	r17, 0x20	; 32
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e2       	ldi	r27, 0x20	; 32
     21c:	e4 e8       	ldi	r30, 0x84	; 132
     21e:	f1 e3       	ldi	r31, 0x31	; 49
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	ac 3c       	cpi	r26, 0xCC	; 204
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	23 e2       	ldi	r18, 0x23	; 35
     22e:	ac ec       	ldi	r26, 0xCC	; 204
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	a9 35       	cpi	r26, 0x59	; 89
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <main>
     240:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     24c:	c0 3c       	cpi	r28, 0xC0	; 192
     24e:	28 e0       	ldi	r18, 0x08	; 8
     250:	d2 07       	cpc	r29, r18
     252:	29 f4       	brne	.+10     	; 0x25e <spi_master_init+0x18>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     254:	68 e0       	ldi	r22, 0x08	; 8
     256:	83 e0       	ldi	r24, 0x03	; 3
     258:	0e 94 93 12 	call	0x2526	; 0x2526 <sysclk_enable_module>
     25c:	07 c0       	rjmp	.+14     	; 0x26c <spi_master_init+0x26>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     25e:	80 3c       	cpi	r24, 0xC0	; 192
     260:	99 40       	sbci	r25, 0x09	; 9
     262:	21 f4       	brne	.+8      	; 0x26c <spi_master_init+0x26>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     264:	68 e0       	ldi	r22, 0x08	; 8
     266:	84 e0       	ldi	r24, 0x04	; 4
     268:	0e 94 93 12 	call	0x2526	; 0x2526 <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
     26c:	88 81       	ld	r24, Y
     26e:	80 61       	ori	r24, 0x10	; 16
     270:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	ec 01       	movw	r28, r24
     284:	f4 2e       	mov	r15, r20
     286:	b9 01       	movw	r22, r18
     288:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	1c e6       	ldi	r17, 0x6C	; 108
     28e:	2c ed       	ldi	r18, 0xDC	; 220
     290:	32 e0       	ldi	r19, 0x02	; 2
     292:	56 d7       	rcall	.+3756   	; 0x1140 <spi_xmega_set_baud_div>
     294:	88 23       	and	r24, r24
     296:	4c f0       	brlt	.+18     	; 0x2aa <spi_master_setup_device+0x32>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     298:	88 81       	ld	r24, Y
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     29a:	9f 2d       	mov	r25, r15
     29c:	99 0f       	add	r25, r25
     29e:	99 0f       	add	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     2a0:	9c 70       	andi	r25, 0x0C	; 12
     2a2:	83 7f       	andi	r24, 0xF3	; 243
     2a4:	f9 2e       	mov	r15, r25
     2a6:	f8 2a       	or	r15, r24
     2a8:	f8 82       	st	Y, r15
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	08 95       	ret

000002b6 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     2b6:	fc 01       	movw	r30, r24
     2b8:	db 01       	movw	r26, r22
     2ba:	46 0f       	add	r20, r22
     2bc:	57 1f       	adc	r21, r23
	while (len--) {
     2be:	05 c0       	rjmp	.+10     	; 0x2ca <spi_write_packet+0x14>
		spi_write_single(spi, *data++);
     2c0:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     2c2:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     2c4:	82 81       	ldd	r24, Z+2	; 0x02
		
		while (!spi_is_rx_full(spi)) {
     2c6:	88 23       	and	r24, r24
     2c8:	ec f7       	brge	.-6      	; 0x2c4 <spi_write_packet+0xe>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
     2ca:	a4 17       	cp	r26, r20
     2cc:	b5 07       	cpc	r27, r21
     2ce:	c1 f7       	brne	.-16     	; 0x2c0 <spi_write_packet+0xa>
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	08 95       	ret

000002d4 <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
     2d4:	fc 01       	movw	r30, r24
     2d6:	db 01       	movw	r26, r22
	while (len--) {
     2d8:	41 15       	cp	r20, r1
     2da:	51 05       	cpc	r21, r1
     2dc:	61 f0       	breq	.+24     	; 0x2f6 <spi_read_packet+0x22>
     2de:	46 0f       	add	r20, r22
     2e0:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     2e2:	9f ef       	ldi	r25, 0xFF	; 255
     2e4:	93 83       	std	Z+3, r25	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     2e6:	82 81       	ldd	r24, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
     2e8:	88 23       	and	r24, r24
     2ea:	ec f7       	brge	.-6      	; 0x2e6 <spi_read_packet+0x12>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
     2ec:	83 81       	ldd	r24, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
     2ee:	8d 93       	st	X+, r24
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
     2f0:	a4 17       	cp	r26, r20
     2f2:	b5 07       	cpc	r27, r21
     2f4:	b9 f7       	brne	.-18     	; 0x2e4 <spi_read_packet+0x10>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	08 95       	ret

000002fa <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_level(device->id,0);
     2fa:	fb 01       	movw	r30, r22
     2fc:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     2fe:	e8 2f       	mov	r30, r24
     300:	e6 95       	lsr	r30
     302:	e6 95       	lsr	r30
     304:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     306:	40 e2       	ldi	r20, 0x20	; 32
     308:	e4 9f       	mul	r30, r20
     30a:	f0 01       	movw	r30, r0
     30c:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     30e:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     310:	87 70       	andi	r24, 0x07	; 7
     312:	21 e0       	ldi	r18, 0x01	; 1
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	a9 01       	movw	r20, r18
     318:	02 c0       	rjmp	.+4      	; 0x31e <spi_select_device+0x24>
     31a:	44 0f       	add	r20, r20
     31c:	55 1f       	adc	r21, r21
     31e:	8a 95       	dec	r24
     320:	e2 f7       	brpl	.-8      	; 0x31a <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     322:	46 83       	std	Z+6, r20	; 0x06
     324:	08 95       	ret

00000326 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_level(device->id,1);
     326:	fb 01       	movw	r30, r22
     328:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     32a:	e8 2f       	mov	r30, r24
     32c:	e6 95       	lsr	r30
     32e:	e6 95       	lsr	r30
     330:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     332:	40 e2       	ldi	r20, 0x20	; 32
     334:	e4 9f       	mul	r30, r20
     336:	f0 01       	movw	r30, r0
     338:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     33a:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     33c:	87 70       	andi	r24, 0x07	; 7
     33e:	21 e0       	ldi	r18, 0x01	; 1
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	a9 01       	movw	r20, r18
     344:	02 c0       	rjmp	.+4      	; 0x34a <spi_deselect_device+0x24>
     346:	44 0f       	add	r20, r20
     348:	55 1f       	adc	r21, r21
     34a:	8a 95       	dec	r24
     34c:	e2 f7       	brpl	.-8      	; 0x346 <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     34e:	45 83       	std	Z+5, r20	; 0x05
     350:	08 95       	ret

00000352 <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     352:	10 92 e2 21 	sts	0x21E2, r1
     356:	10 92 ee 21 	sts	0x21EE, r1
     35a:	10 92 ef 21 	sts	0x21EF, r1
     35e:	81 ea       	ldi	r24, 0xA1	; 161
     360:	80 93 e4 21 	sts	0x21E4, r24
     364:	80 e2       	ldi	r24, 0x20	; 32
     366:	80 93 e5 21 	sts	0x21E5, r24
     36a:	10 92 e6 21 	sts	0x21E6, r1
     36e:	10 92 e7 21 	sts	0x21E7, r1
     372:	10 92 e8 21 	sts	0x21E8, r1
     376:	10 92 e9 21 	sts	0x21E9, r1
     37a:	82 e0       	ldi	r24, 0x02	; 2
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	80 93 ea 21 	sts	0x21EA, r24
     382:	90 93 eb 21 	sts	0x21EB, r25
     386:	10 92 ec 21 	sts	0x21EC, r1
     38a:	10 92 ed 21 	sts	0x21ED, r1
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	92 ec       	ldi	r25, 0xC2	; 194
     392:	a1 e0       	ldi	r26, 0x01	; 1
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	80 93 f0 21 	sts	0x21F0, r24
     39a:	90 93 f1 21 	sts	0x21F1, r25
     39e:	a0 93 f2 21 	sts	0x21F2, r26
     3a2:	b0 93 f3 21 	sts	0x21F3, r27
     3a6:	10 92 f4 21 	sts	0x21F4, r1
     3aa:	10 92 f5 21 	sts	0x21F5, r1
     3ae:	88 e0       	ldi	r24, 0x08	; 8
     3b0:	80 93 f6 21 	sts	0x21F6, r24
     3b4:	80 91 e2 21 	lds	r24, 0x21E2
     3b8:	8f 5f       	subi	r24, 0xFF	; 255
     3ba:	80 93 e2 21 	sts	0x21E2, r24
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	08 95       	ret

000003c2 <udi_cdc_comm_disable>:
     3c2:	80 91 e2 21 	lds	r24, 0x21E2
     3c6:	81 50       	subi	r24, 0x01	; 1
     3c8:	80 93 e2 21 	sts	0x21E2, r24
     3cc:	08 95       	ret

000003ce <udi_cdc_data_disable>:
     3ce:	80 91 e1 21 	lds	r24, 0x21E1
     3d2:	81 50       	subi	r24, 0x01	; 1
     3d4:	80 93 e1 21 	sts	0x21E1, r24
     3d8:	80 91 e1 21 	lds	r24, 0x21E1
     3dc:	10 92 e0 21 	sts	0x21E0, r1
     3e0:	08 95       	ret

000003e2 <udi_cdc_data_setup>:
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	08 95       	ret

000003e6 <udi_cdc_getsetting>:
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	08 95       	ret

000003ea <udi_cdc_comm_setup>:
     3ea:	80 91 3d 23 	lds	r24, 0x233D
     3ee:	88 23       	and	r24, r24
     3f0:	dc f4       	brge	.+54     	; 0x428 <udi_cdc_comm_setup+0x3e>
     3f2:	80 76       	andi	r24, 0x60	; 96
     3f4:	80 32       	cpi	r24, 0x20	; 32
     3f6:	e9 f5       	brne	.+122    	; 0x472 <udi_cdc_comm_setup+0x88>
     3f8:	80 91 3e 23 	lds	r24, 0x233E
     3fc:	81 32       	cpi	r24, 0x21	; 33
     3fe:	d9 f5       	brne	.+118    	; 0x476 <udi_cdc_comm_setup+0x8c>
     400:	80 91 43 23 	lds	r24, 0x2343
     404:	90 91 44 23 	lds	r25, 0x2344
     408:	07 97       	sbiw	r24, 0x07	; 7
     40a:	b9 f5       	brne	.+110    	; 0x47a <udi_cdc_comm_setup+0x90>
     40c:	80 ef       	ldi	r24, 0xF0	; 240
     40e:	91 e2       	ldi	r25, 0x21	; 33
     410:	80 93 45 23 	sts	0x2345, r24
     414:	90 93 46 23 	sts	0x2346, r25
     418:	87 e0       	ldi	r24, 0x07	; 7
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	80 93 47 23 	sts	0x2347, r24
     420:	90 93 48 23 	sts	0x2348, r25
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	08 95       	ret
     428:	80 76       	andi	r24, 0x60	; 96
     42a:	80 32       	cpi	r24, 0x20	; 32
     42c:	41 f5       	brne	.+80     	; 0x47e <udi_cdc_comm_setup+0x94>
     42e:	80 91 3e 23 	lds	r24, 0x233E
     432:	80 32       	cpi	r24, 0x20	; 32
     434:	21 f0       	breq	.+8      	; 0x43e <udi_cdc_comm_setup+0x54>
     436:	82 32       	cpi	r24, 0x22	; 34
     438:	21 f5       	brne	.+72     	; 0x482 <udi_cdc_comm_setup+0x98>
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	08 95       	ret
     43e:	80 91 43 23 	lds	r24, 0x2343
     442:	90 91 44 23 	lds	r25, 0x2344
     446:	07 97       	sbiw	r24, 0x07	; 7
     448:	f1 f4       	brne	.+60     	; 0x486 <udi_cdc_comm_setup+0x9c>
     44a:	85 e4       	ldi	r24, 0x45	; 69
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	80 93 49 23 	sts	0x2349, r24
     452:	90 93 4a 23 	sts	0x234A, r25
     456:	80 ef       	ldi	r24, 0xF0	; 240
     458:	91 e2       	ldi	r25, 0x21	; 33
     45a:	80 93 45 23 	sts	0x2345, r24
     45e:	90 93 46 23 	sts	0x2346, r25
     462:	87 e0       	ldi	r24, 0x07	; 7
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	80 93 47 23 	sts	0x2347, r24
     46a:	90 93 48 23 	sts	0x2348, r25
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	08 95       	ret
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	08 95       	ret
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	08 95       	ret
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	08 95       	ret
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	08 95       	ret
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	08 95       	ret
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	08 95       	ret

0000048a <udi_cdc_line_coding_received>:
     48a:	08 95       	ret

0000048c <udi_cdc_tx_send>:
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	80 91 cf 20 	lds	r24, 0x20CF
     49a:	81 11       	cpse	r24, r1
     49c:	9c c0       	rjmp	.+312    	; 0x5d6 <udi_cdc_tx_send+0x14a>
     49e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <udd_is_high_speed>
     4a2:	88 23       	and	r24, r24
     4a4:	51 f0       	breq	.+20     	; 0x4ba <udi_cdc_tx_send+0x2e>
     4a6:	c0 91 d0 20 	lds	r28, 0x20D0
     4aa:	d0 91 d1 20 	lds	r29, 0x20D1
     4ae:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <udd_get_micro_frame_number>
     4b2:	c8 17       	cp	r28, r24
     4b4:	d9 07       	cpc	r29, r25
     4b6:	59 f4       	brne	.+22     	; 0x4ce <udi_cdc_tx_send+0x42>
     4b8:	8e c0       	rjmp	.+284    	; 0x5d6 <udi_cdc_tx_send+0x14a>
     4ba:	c0 91 d0 20 	lds	r28, 0x20D0
     4be:	d0 91 d1 20 	lds	r29, 0x20D1
     4c2:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <udd_get_frame_number>
     4c6:	c8 17       	cp	r28, r24
     4c8:	d9 07       	cpc	r29, r25
     4ca:	09 f4       	brne	.+2      	; 0x4ce <udi_cdc_tx_send+0x42>
     4cc:	84 c0       	rjmp	.+264    	; 0x5d6 <udi_cdc_tx_send+0x14a>
     4ce:	df b7       	in	r29, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	c0 91 d2 20 	lds	r28, 0x20D2
     4d6:	ec 2f       	mov	r30, r28
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	ee 0f       	add	r30, r30
     4dc:	ff 1f       	adc	r31, r31
     4de:	ed 52       	subi	r30, 0x2D	; 45
     4e0:	ff 4d       	sbci	r31, 0xDF	; 223
     4e2:	80 81       	ld	r24, Z
     4e4:	91 81       	ldd	r25, Z+1	; 0x01
     4e6:	89 2b       	or	r24, r25
     4e8:	09 f5       	brne	.+66     	; 0x52c <udi_cdc_tx_send+0xa0>
     4ea:	80 91 cc 20 	lds	r24, 0x20CC
     4ee:	90 91 cd 20 	lds	r25, 0x20CD
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	80 93 cc 20 	sts	0x20CC, r24
     4f8:	90 93 cd 20 	sts	0x20CD, r25
     4fc:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <udd_is_high_speed>
     500:	81 11       	cpse	r24, r1
     502:	07 c0       	rjmp	.+14     	; 0x512 <udi_cdc_tx_send+0x86>
     504:	80 91 cc 20 	lds	r24, 0x20CC
     508:	90 91 cd 20 	lds	r25, 0x20CD
     50c:	84 36       	cpi	r24, 0x64	; 100
     50e:	91 05       	cpc	r25, r1
     510:	58 f0       	brcs	.+22     	; 0x528 <udi_cdc_tx_send+0x9c>
     512:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <udd_is_high_speed>
     516:	88 23       	and	r24, r24
     518:	49 f0       	breq	.+18     	; 0x52c <udi_cdc_tx_send+0xa0>
     51a:	80 91 cc 20 	lds	r24, 0x20CC
     51e:	90 91 cd 20 	lds	r25, 0x20CD
     522:	80 32       	cpi	r24, 0x20	; 32
     524:	93 40       	sbci	r25, 0x03	; 3
     526:	10 f4       	brcc	.+4      	; 0x52c <udi_cdc_tx_send+0xa0>
     528:	df bf       	out	0x3f, r29	; 63
     52a:	55 c0       	rjmp	.+170    	; 0x5d6 <udi_cdc_tx_send+0x14a>
     52c:	10 92 cc 20 	sts	0x20CC, r1
     530:	10 92 cd 20 	sts	0x20CD, r1
     534:	80 91 ce 20 	lds	r24, 0x20CE
     538:	81 11       	cpse	r24, r1
     53a:	06 c0       	rjmp	.+12     	; 0x548 <udi_cdc_tx_send+0xbc>
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	c1 11       	cpse	r28, r1
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	80 93 d2 20 	sts	0x20D2, r24
     546:	04 c0       	rjmp	.+8      	; 0x550 <udi_cdc_tx_send+0xc4>
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	c1 11       	cpse	r28, r1
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	c8 2f       	mov	r28, r24
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 cf 20 	sts	0x20CF, r24
     556:	df bf       	out	0x3f, r29	; 63
     558:	d0 e0       	ldi	r29, 0x00	; 0
     55a:	fe 01       	movw	r30, r28
     55c:	ee 0f       	add	r30, r30
     55e:	ff 1f       	adc	r31, r31
     560:	ed 52       	subi	r30, 0x2D	; 45
     562:	ff 4d       	sbci	r31, 0xDF	; 223
     564:	ff 24       	eor	r15, r15
     566:	f3 94       	inc	r15
     568:	80 81       	ld	r24, Z
     56a:	91 81       	ldd	r25, Z+1	; 0x01
     56c:	80 34       	cpi	r24, 0x40	; 64
     56e:	91 05       	cpc	r25, r1
     570:	09 f4       	brne	.+2      	; 0x574 <udi_cdc_tx_send+0xe8>
     572:	f1 2c       	mov	r15, r1
     574:	ff 20       	and	r15, r15
     576:	91 f0       	breq	.+36     	; 0x59c <udi_cdc_tx_send+0x110>
     578:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <udd_is_high_speed>
     57c:	88 23       	and	r24, r24
     57e:	39 f0       	breq	.+14     	; 0x58e <udi_cdc_tx_send+0x102>
     580:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <udd_get_micro_frame_number>
     584:	80 93 d0 20 	sts	0x20D0, r24
     588:	90 93 d1 20 	sts	0x20D1, r25
     58c:	0b c0       	rjmp	.+22     	; 0x5a4 <udi_cdc_tx_send+0x118>
     58e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <udd_get_frame_number>
     592:	80 93 d0 20 	sts	0x20D0, r24
     596:	90 93 d1 20 	sts	0x20D1, r25
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <udi_cdc_tx_send+0x118>
     59c:	10 92 d0 20 	sts	0x20D0, r1
     5a0:	10 92 d1 20 	sts	0x20D1, r1
     5a4:	fe 01       	movw	r30, r28
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	ed 52       	subi	r30, 0x2D	; 45
     5ac:	ff 4d       	sbci	r31, 0xDF	; 223
     5ae:	20 81       	ld	r18, Z
     5b0:	31 81       	ldd	r19, Z+1	; 0x01
     5b2:	ae 01       	movw	r20, r28
     5b4:	00 24       	eor	r0, r0
     5b6:	56 95       	lsr	r21
     5b8:	47 95       	ror	r20
     5ba:	07 94       	ror	r0
     5bc:	56 95       	lsr	r21
     5be:	47 95       	ror	r20
     5c0:	07 94       	ror	r0
     5c2:	54 2f       	mov	r21, r20
     5c4:	40 2d       	mov	r20, r0
     5c6:	48 52       	subi	r20, 0x28	; 40
     5c8:	5f 4d       	sbci	r21, 0xDF	; 223
     5ca:	01 ef       	ldi	r16, 0xF1	; 241
     5cc:	12 e0       	ldi	r17, 0x02	; 2
     5ce:	6f 2d       	mov	r22, r15
     5d0:	81 e8       	ldi	r24, 0x81	; 129
     5d2:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <udd_ep_run>
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	ff 90       	pop	r15
     5e0:	08 95       	ret

000005e2 <udi_cdc_data_sent>:
     5e2:	81 11       	cpse	r24, r1
     5e4:	15 c0       	rjmp	.+42     	; 0x610 <udi_cdc_data_sent+0x2e>
     5e6:	20 91 d2 20 	lds	r18, 0x20D2
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	22 23       	and	r18, r18
     5f0:	11 f0       	breq	.+4      	; 0x5f6 <udi_cdc_data_sent+0x14>
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	fc 01       	movw	r30, r24
     5f8:	ee 0f       	add	r30, r30
     5fa:	ff 1f       	adc	r31, r31
     5fc:	ed 52       	subi	r30, 0x2D	; 45
     5fe:	ff 4d       	sbci	r31, 0xDF	; 223
     600:	10 82       	st	Z, r1
     602:	11 82       	std	Z+1, r1	; 0x01
     604:	10 92 ce 20 	sts	0x20CE, r1
     608:	10 92 cf 20 	sts	0x20CF, r1
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	3e cf       	rjmp	.-388    	; 0x48c <udi_cdc_tx_send>
     610:	08 95       	ret

00000612 <udi_cdc_data_sof_notify>:
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	3b cf       	rjmp	.-394    	; 0x48c <udi_cdc_tx_send>
     616:	08 95       	ret

00000618 <udi_cdc_multi_get_nb_received_data>:
     618:	4f b7       	in	r20, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	20 91 59 21 	lds	r18, 0x2159
     620:	30 91 5a 21 	lds	r19, 0x215A
     624:	e0 91 5b 21 	lds	r30, 0x215B
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	ee 0f       	add	r30, r30
     62c:	ff 1f       	adc	r31, r31
     62e:	e4 5a       	subi	r30, 0xA4	; 164
     630:	fe 4d       	sbci	r31, 0xDE	; 222
     632:	80 81       	ld	r24, Z
     634:	91 81       	ldd	r25, Z+1	; 0x01
     636:	82 1b       	sub	r24, r18
     638:	93 0b       	sbc	r25, r19
     63a:	4f bf       	out	0x3f, r20	; 63
     63c:	08 95       	ret

0000063e <udi_cdc_multi_is_rx_ready>:
     63e:	ec df       	rcall	.-40     	; 0x618 <udi_cdc_multi_get_nb_received_data>
     640:	21 e0       	ldi	r18, 0x01	; 1
     642:	89 2b       	or	r24, r25
     644:	09 f4       	brne	.+2      	; 0x648 <udi_cdc_multi_is_rx_ready+0xa>
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	82 2f       	mov	r24, r18
     64a:	08 95       	ret

0000064c <udi_cdc_rx_start>:
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	4f b7       	in	r20, 0x3f	; 63
     656:	f8 94       	cli
     658:	50 91 5b 21 	lds	r21, 0x215B
     65c:	80 91 58 21 	lds	r24, 0x2158
     660:	81 11       	cpse	r24, r1
     662:	10 c0       	rjmp	.+32     	; 0x684 <udi_cdc_rx_start+0x38>
     664:	20 91 59 21 	lds	r18, 0x2159
     668:	30 91 5a 21 	lds	r19, 0x215A
     66c:	c5 2f       	mov	r28, r21
     66e:	d0 e0       	ldi	r29, 0x00	; 0
     670:	fe 01       	movw	r30, r28
     672:	ee 0f       	add	r30, r30
     674:	ff 1f       	adc	r31, r31
     676:	e4 5a       	subi	r30, 0xA4	; 164
     678:	fe 4d       	sbci	r31, 0xDE	; 222
     67a:	80 81       	ld	r24, Z
     67c:	91 81       	ldd	r25, Z+1	; 0x01
     67e:	28 17       	cp	r18, r24
     680:	39 07       	cpc	r19, r25
     682:	18 f4       	brcc	.+6      	; 0x68a <udi_cdc_rx_start+0x3e>
     684:	4f bf       	out	0x3f, r20	; 63
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	23 c0       	rjmp	.+70     	; 0x6d0 <udi_cdc_rx_start+0x84>
     68a:	10 92 59 21 	sts	0x2159, r1
     68e:	10 92 5a 21 	sts	0x215A, r1
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	51 11       	cpse	r21, r1
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	80 93 5b 21 	sts	0x215B, r24
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	80 93 58 21 	sts	0x2158, r24
     6a2:	4f bf       	out	0x3f, r20	; 63
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	cb df       	rcall	.-106    	; 0x63e <udi_cdc_multi_is_rx_ready>
     6a8:	ae 01       	movw	r20, r28
     6aa:	00 24       	eor	r0, r0
     6ac:	56 95       	lsr	r21
     6ae:	47 95       	ror	r20
     6b0:	07 94       	ror	r0
     6b2:	56 95       	lsr	r21
     6b4:	47 95       	ror	r20
     6b6:	07 94       	ror	r0
     6b8:	54 2f       	mov	r21, r20
     6ba:	40 2d       	mov	r20, r0
     6bc:	40 5a       	subi	r20, 0xA0	; 160
     6be:	5e 4d       	sbci	r21, 0xDE	; 222
     6c0:	0f e9       	ldi	r16, 0x9F	; 159
     6c2:	13 e0       	ldi	r17, 0x03	; 3
     6c4:	20 e4       	ldi	r18, 0x40	; 64
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <udd_ep_run>
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	08 95       	ret

000006da <udi_cdc_data_enable>:
     6da:	10 92 e1 21 	sts	0x21E1, r1
     6de:	10 92 cf 20 	sts	0x20CF, r1
     6e2:	10 92 ce 20 	sts	0x20CE, r1
     6e6:	10 92 d2 20 	sts	0x20D2, r1
     6ea:	10 92 d3 20 	sts	0x20D3, r1
     6ee:	10 92 d4 20 	sts	0x20D4, r1
     6f2:	10 92 d5 20 	sts	0x20D5, r1
     6f6:	10 92 d6 20 	sts	0x20D6, r1
     6fa:	10 92 d0 20 	sts	0x20D0, r1
     6fe:	10 92 d1 20 	sts	0x20D1, r1
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	c3 de       	rcall	.-634    	; 0x48c <udi_cdc_tx_send>
     706:	10 92 58 21 	sts	0x2158, r1
     70a:	10 92 5b 21 	sts	0x215B, r1
     70e:	10 92 5c 21 	sts	0x215C, r1
     712:	10 92 5d 21 	sts	0x215D, r1
     716:	10 92 59 21 	sts	0x2159, r1
     71a:	10 92 5a 21 	sts	0x215A, r1
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	95 df       	rcall	.-214    	; 0x64c <udi_cdc_rx_start>
     722:	88 23       	and	r24, r24
     724:	59 f0       	breq	.+22     	; 0x73c <udi_cdc_data_enable+0x62>
     726:	90 91 e1 21 	lds	r25, 0x21E1
     72a:	9f 5f       	subi	r25, 0xFF	; 255
     72c:	90 93 e1 21 	sts	0x21E1, r25
     730:	90 91 e1 21 	lds	r25, 0x21E1
     734:	91 30       	cpi	r25, 0x01	; 1
     736:	11 f4       	brne	.+4      	; 0x73c <udi_cdc_data_enable+0x62>
     738:	90 93 e0 21 	sts	0x21E0, r25
     73c:	08 95       	ret

0000073e <udi_cdc_data_received>:
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	94 2f       	mov	r25, r20
     744:	81 11       	cpse	r24, r1
     746:	29 c0       	rjmp	.+82     	; 0x79a <udi_cdc_data_received+0x5c>
     748:	80 91 5b 21 	lds	r24, 0x215B
     74c:	e1 e0       	ldi	r30, 0x01	; 1
     74e:	81 11       	cpse	r24, r1
     750:	e0 e0       	ldi	r30, 0x00	; 0
     752:	61 15       	cp	r22, r1
     754:	71 05       	cpc	r23, r1
     756:	b1 f4       	brne	.+44     	; 0x784 <udi_cdc_data_received+0x46>
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	00 24       	eor	r0, r0
     75c:	f6 95       	lsr	r31
     75e:	e7 95       	ror	r30
     760:	07 94       	ror	r0
     762:	f6 95       	lsr	r31
     764:	e7 95       	ror	r30
     766:	07 94       	ror	r0
     768:	fe 2f       	mov	r31, r30
     76a:	e0 2d       	mov	r30, r0
     76c:	af 01       	movw	r20, r30
     76e:	40 5a       	subi	r20, 0xA0	; 160
     770:	5e 4d       	sbci	r21, 0xDE	; 222
     772:	0f e9       	ldi	r16, 0x9F	; 159
     774:	13 e0       	ldi	r17, 0x03	; 3
     776:	20 e4       	ldi	r18, 0x40	; 64
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	61 e0       	ldi	r22, 0x01	; 1
     77c:	89 2f       	mov	r24, r25
     77e:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <udd_ep_run>
     782:	0b c0       	rjmp	.+22     	; 0x79a <udi_cdc_data_received+0x5c>
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	ee 0f       	add	r30, r30
     788:	ff 1f       	adc	r31, r31
     78a:	e4 5a       	subi	r30, 0xA4	; 164
     78c:	fe 4d       	sbci	r31, 0xDE	; 222
     78e:	60 83       	st	Z, r22
     790:	71 83       	std	Z+1, r23	; 0x01
     792:	10 92 58 21 	sts	0x2158, r1
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	59 df       	rcall	.-334    	; 0x64c <udi_cdc_rx_start>
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	08 95       	ret

000007a0 <udi_cdc_is_rx_ready>:
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	4d cf       	rjmp	.-358    	; 0x63e <udi_cdc_multi_is_rx_ready>
     7a4:	08 95       	ret

000007a6 <udi_cdc_multi_getc>:
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	11 e0       	ldi	r17, 0x01	; 1
     7ae:	80 91 f6 21 	lds	r24, 0x21F6
     7b2:	89 30       	cpi	r24, 0x09	; 9
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <udi_cdc_multi_getc+0x12>
     7b6:	10 e0       	ldi	r17, 0x00	; 0
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	3f b7       	in	r19, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	80 91 59 21 	lds	r24, 0x2159
     7c4:	90 91 5a 21 	lds	r25, 0x215A
     7c8:	20 91 5b 21 	lds	r18, 0x215B
     7cc:	3f bf       	out	0x3f, r19	; 63
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	f9 01       	movw	r30, r18
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	e4 5a       	subi	r30, 0xA4	; 164
     7d8:	fe 4d       	sbci	r31, 0xDE	; 222
     7da:	40 81       	ld	r20, Z
     7dc:	51 81       	ldd	r21, Z+1	; 0x01
     7de:	84 17       	cp	r24, r20
     7e0:	95 07       	cpc	r25, r21
     7e2:	30 f0       	brcs	.+12     	; 0x7f0 <udi_cdc_multi_getc+0x4a>
     7e4:	80 91 e0 21 	lds	r24, 0x21E0
     7e8:	81 11       	cpse	r24, r1
     7ea:	e8 cf       	rjmp	.-48     	; 0x7bc <udi_cdc_multi_getc+0x16>
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	20 c0       	rjmp	.+64     	; 0x830 <udi_cdc_multi_getc+0x8a>
     7f0:	f9 01       	movw	r30, r18
     7f2:	00 24       	eor	r0, r0
     7f4:	f6 95       	lsr	r31
     7f6:	e7 95       	ror	r30
     7f8:	07 94       	ror	r0
     7fa:	f6 95       	lsr	r31
     7fc:	e7 95       	ror	r30
     7fe:	07 94       	ror	r0
     800:	fe 2f       	mov	r31, r30
     802:	e0 2d       	mov	r30, r0
     804:	e8 0f       	add	r30, r24
     806:	f9 1f       	adc	r31, r25
     808:	e0 5a       	subi	r30, 0xA0	; 160
     80a:	fe 4d       	sbci	r31, 0xDE	; 222
     80c:	20 81       	ld	r18, Z
     80e:	eb 01       	movw	r28, r22
     810:	c2 2b       	or	r28, r18
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	80 93 59 21 	sts	0x2159, r24
     818:	90 93 5a 21 	sts	0x215A, r25
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	16 df       	rcall	.-468    	; 0x64c <udi_cdc_rx_start>
     820:	11 23       	and	r17, r17
     822:	21 f0       	breq	.+8      	; 0x82c <udi_cdc_multi_getc+0x86>
     824:	7c 2f       	mov	r23, r28
     826:	66 27       	eor	r22, r22
     828:	10 e0       	ldi	r17, 0x00	; 0
     82a:	c8 cf       	rjmp	.-112    	; 0x7bc <udi_cdc_multi_getc+0x16>
     82c:	8c 2f       	mov	r24, r28
     82e:	9d 2f       	mov	r25, r29
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	08 95       	ret

00000838 <udi_cdc_getc>:
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	b5 cf       	rjmp	.-150    	; 0x7a6 <udi_cdc_multi_getc>
     83c:	08 95       	ret

0000083e <udi_cdc_multi_get_free_tx_buffer>:
     83e:	9f b7       	in	r25, 0x3f	; 63
     840:	f8 94       	cli
     842:	80 91 d2 20 	lds	r24, 0x20D2
     846:	e8 2f       	mov	r30, r24
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	ee 0f       	add	r30, r30
     84c:	ff 1f       	adc	r31, r31
     84e:	ed 52       	subi	r30, 0x2D	; 45
     850:	ff 4d       	sbci	r31, 0xDF	; 223
     852:	20 81       	ld	r18, Z
     854:	31 81       	ldd	r19, Z+1	; 0x01
     856:	20 34       	cpi	r18, 0x40	; 64
     858:	31 05       	cpc	r19, r1
     85a:	89 f4       	brne	.+34     	; 0x87e <udi_cdc_multi_get_free_tx_buffer+0x40>
     85c:	40 91 cf 20 	lds	r20, 0x20CF
     860:	41 11       	cpse	r20, r1
     862:	0d c0       	rjmp	.+26     	; 0x87e <udi_cdc_multi_get_free_tx_buffer+0x40>
     864:	40 91 ce 20 	lds	r20, 0x20CE
     868:	41 11       	cpse	r20, r1
     86a:	09 c0       	rjmp	.+18     	; 0x87e <udi_cdc_multi_get_free_tx_buffer+0x40>
     86c:	21 e0       	ldi	r18, 0x01	; 1
     86e:	20 93 ce 20 	sts	0x20CE, r18
     872:	81 11       	cpse	r24, r1
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	20 93 d2 20 	sts	0x20D2, r18
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	9f bf       	out	0x3f, r25	; 63
     880:	80 e4       	ldi	r24, 0x40	; 64
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	82 1b       	sub	r24, r18
     886:	93 0b       	sbc	r25, r19
     888:	08 95       	ret

0000088a <udi_cdc_multi_is_tx_ready>:
     88a:	d9 df       	rcall	.-78     	; 0x83e <udi_cdc_multi_get_free_tx_buffer>
     88c:	21 e0       	ldi	r18, 0x01	; 1
     88e:	89 2b       	or	r24, r25
     890:	09 f4       	brne	.+2      	; 0x894 <udi_cdc_multi_is_tx_ready+0xa>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	82 2f       	mov	r24, r18
     896:	08 95       	ret

00000898 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	16 2f       	mov	r17, r22
     8a0:	c7 2f       	mov	r28, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     8a2:	d1 e0       	ldi	r29, 0x01	; 1
     8a4:	80 91 f6 21 	lds	r24, 0x21F6
     8a8:	89 30       	cpi	r24, 0x09	; 9
     8aa:	09 f0       	breq	.+2      	; 0x8ae <udi_cdc_multi_putc+0x16>
     8ac:	d0 e0       	ldi	r29, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	ec df       	rcall	.-40     	; 0x88a <udi_cdc_multi_is_tx_ready>
     8b2:	81 11       	cpse	r24, r1
     8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <udi_cdc_multi_putc+0x2c>
		if (!udi_cdc_data_running) {
     8b6:	80 91 e0 21 	lds	r24, 0x21E0
     8ba:	81 11       	cpse	r24, r1
     8bc:	f8 cf       	rjmp	.-16     	; 0x8ae <udi_cdc_multi_putc+0x16>
			return false;
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	2b c0       	rjmp	.+86     	; 0x91a <udi_cdc_multi_putc+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8c4:	6f b7       	in	r22, 0x3f	; 63
	cpu_irq_disable();
     8c6:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     8c8:	20 91 d2 20 	lds	r18, 0x20D2
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	f9 01       	movw	r30, r18
     8d0:	ee 0f       	add	r30, r30
     8d2:	ff 1f       	adc	r31, r31
     8d4:	ed 52       	subi	r30, 0x2D	; 45
     8d6:	ff 4d       	sbci	r31, 0xDF	; 223
     8d8:	80 81       	ld	r24, Z
     8da:	91 81       	ldd	r25, Z+1	; 0x01
     8dc:	ac 01       	movw	r20, r24
     8de:	4f 5f       	subi	r20, 0xFF	; 255
     8e0:	5f 4f       	sbci	r21, 0xFF	; 255
     8e2:	40 83       	st	Z, r20
     8e4:	51 83       	std	Z+1, r21	; 0x01
     8e6:	f9 01       	movw	r30, r18
     8e8:	00 24       	eor	r0, r0
     8ea:	f6 95       	lsr	r31
     8ec:	e7 95       	ror	r30
     8ee:	07 94       	ror	r0
     8f0:	f6 95       	lsr	r31
     8f2:	e7 95       	ror	r30
     8f4:	07 94       	ror	r0
     8f6:	fe 2f       	mov	r31, r30
     8f8:	e0 2d       	mov	r30, r0
     8fa:	8e 0f       	add	r24, r30
     8fc:	9f 1f       	adc	r25, r31
     8fe:	fc 01       	movw	r30, r24
     900:	e8 52       	subi	r30, 0x28	; 40
     902:	ff 4d       	sbci	r31, 0xDF	; 223
     904:	10 83       	st	Z, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     906:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     908:	dd 23       	and	r29, r29
     90a:	29 f0       	breq	.+10     	; 0x916 <udi_cdc_multi_putc+0x7e>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     90c:	1c 2f       	mov	r17, r28
     90e:	cc 0f       	add	r28, r28
     910:	cc 0b       	sbc	r28, r28
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     912:	d0 e0       	ldi	r29, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     914:	cc cf       	rjmp	.-104    	; 0x8ae <udi_cdc_multi_putc+0x16>
	}
	return true;
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	08 95       	ret

00000922 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     922:	bc 01       	movw	r22, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	b8 cf       	rjmp	.-144    	; 0x898 <udi_cdc_multi_putc>
}
     928:	08 95       	ret

0000092a <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     92a:	e0 91 fc 21 	lds	r30, 0x21FC
     92e:	f0 91 fd 21 	lds	r31, 0x21FD
     932:	01 90       	ld	r0, Z+
     934:	f0 81       	ld	r31, Z
     936:	e0 2d       	mov	r30, r0
     938:	22 81       	ldd	r18, Z+2	; 0x02
     93a:	33 81       	ldd	r19, Z+3	; 0x03
     93c:	2e 0f       	add	r18, r30
     93e:	3f 1f       	adc	r19, r31
     940:	fc 01       	movw	r30, r24
     942:	40 81       	ld	r20, Z
     944:	e4 0f       	add	r30, r20
     946:	f1 1d       	adc	r31, r1
     948:	e2 17       	cp	r30, r18
     94a:	f3 07       	cpc	r31, r19
     94c:	a0 f4       	brcc	.+40     	; 0x976 <udc_next_desc_in_iface+0x4c>
     94e:	81 81       	ldd	r24, Z+1	; 0x01
     950:	84 30       	cpi	r24, 0x04	; 4
     952:	a1 f0       	breq	.+40     	; 0x97c <udc_next_desc_in_iface+0x52>
     954:	86 13       	cpse	r24, r22
     956:	06 c0       	rjmp	.+12     	; 0x964 <udc_next_desc_in_iface+0x3a>
     958:	14 c0       	rjmp	.+40     	; 0x982 <udc_next_desc_in_iface+0x58>
     95a:	81 81       	ldd	r24, Z+1	; 0x01
     95c:	84 30       	cpi	r24, 0x04	; 4
     95e:	a1 f0       	breq	.+40     	; 0x988 <udc_next_desc_in_iface+0x5e>
     960:	86 17       	cp	r24, r22
     962:	a9 f0       	breq	.+42     	; 0x98e <udc_next_desc_in_iface+0x64>
     964:	80 81       	ld	r24, Z
     966:	e8 0f       	add	r30, r24
     968:	f1 1d       	adc	r31, r1
     96a:	e2 17       	cp	r30, r18
     96c:	f3 07       	cpc	r31, r19
     96e:	a8 f3       	brcs	.-22     	; 0x95a <udc_next_desc_in_iface+0x30>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	08 95       	ret
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	08 95       	ret
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	08 95       	ret
     982:	8e 2f       	mov	r24, r30
     984:	9f 2f       	mov	r25, r31
     986:	08 95       	ret
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	08 95       	ret
     98e:	8e 2f       	mov	r24, r30
     990:	9f 2f       	mov	r25, r31
     992:	08 95       	ret

00000994 <udc_valid_address>:
     994:	80 91 3f 23 	lds	r24, 0x233F
     998:	8f 77       	andi	r24, 0x7F	; 127
     99a:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <udd_set_address>
     99e:	08 95       	ret

000009a0 <udc_update_iface_desc>:
     9a0:	90 91 fe 21 	lds	r25, 0x21FE
     9a4:	99 23       	and	r25, r25
     9a6:	81 f1       	breq	.+96     	; 0xa08 <udc_update_iface_desc+0x68>
     9a8:	e0 91 fc 21 	lds	r30, 0x21FC
     9ac:	f0 91 fd 21 	lds	r31, 0x21FD
     9b0:	01 90       	ld	r0, Z+
     9b2:	f0 81       	ld	r31, Z
     9b4:	e0 2d       	mov	r30, r0
     9b6:	94 81       	ldd	r25, Z+4	; 0x04
     9b8:	89 17       	cp	r24, r25
     9ba:	40 f5       	brcc	.+80     	; 0xa0c <udc_update_iface_desc+0x6c>
     9bc:	e0 93 fa 21 	sts	0x21FA, r30
     9c0:	f0 93 fb 21 	sts	0x21FB, r31
     9c4:	22 81       	ldd	r18, Z+2	; 0x02
     9c6:	33 81       	ldd	r19, Z+3	; 0x03
     9c8:	2e 0f       	add	r18, r30
     9ca:	3f 1f       	adc	r19, r31
     9cc:	e2 17       	cp	r30, r18
     9ce:	f3 07       	cpc	r31, r19
     9d0:	f8 f4       	brcc	.+62     	; 0xa10 <udc_update_iface_desc+0x70>
     9d2:	91 81       	ldd	r25, Z+1	; 0x01
     9d4:	94 30       	cpi	r25, 0x04	; 4
     9d6:	61 f4       	brne	.+24     	; 0x9f0 <udc_update_iface_desc+0x50>
     9d8:	92 81       	ldd	r25, Z+2	; 0x02
     9da:	98 13       	cpse	r25, r24
     9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <udc_update_iface_desc+0x50>
     9de:	93 81       	ldd	r25, Z+3	; 0x03
     9e0:	96 13       	cpse	r25, r22
     9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <udc_update_iface_desc+0x50>
     9e4:	e0 93 fa 21 	sts	0x21FA, r30
     9e8:	f0 93 fb 21 	sts	0x21FB, r31
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	08 95       	ret
     9f0:	90 81       	ld	r25, Z
     9f2:	e9 0f       	add	r30, r25
     9f4:	f1 1d       	adc	r31, r1
     9f6:	e2 17       	cp	r30, r18
     9f8:	f3 07       	cpc	r31, r19
     9fa:	58 f3       	brcs	.-42     	; 0x9d2 <udc_update_iface_desc+0x32>
     9fc:	e0 93 fa 21 	sts	0x21FA, r30
     a00:	f0 93 fb 21 	sts	0x21FB, r31
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	08 95       	ret
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	08 95       	ret
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	08 95       	ret
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	08 95       	ret

00000a14 <udc_iface_disable>:
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	c8 2f       	mov	r28, r24
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	be df       	rcall	.-132    	; 0x9a0 <udc_update_iface_desc>
     a24:	f8 2e       	mov	r15, r24
     a26:	88 23       	and	r24, r24
     a28:	81 f1       	breq	.+96     	; 0xa8a <udc_iface_disable+0x76>
     a2a:	a0 91 fc 21 	lds	r26, 0x21FC
     a2e:	b0 91 fd 21 	lds	r27, 0x21FD
     a32:	ec 2f       	mov	r30, r28
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	12 96       	adiw	r26, 0x02	; 2
     a3c:	2d 91       	ld	r18, X+
     a3e:	3c 91       	ld	r19, X
     a40:	13 97       	sbiw	r26, 0x03	; 3
     a42:	e2 0f       	add	r30, r18
     a44:	f3 1f       	adc	r31, r19
     a46:	00 81       	ld	r16, Z
     a48:	11 81       	ldd	r17, Z+1	; 0x01
     a4a:	d8 01       	movw	r26, r16
     a4c:	16 96       	adiw	r26, 0x06	; 6
     a4e:	ed 91       	ld	r30, X+
     a50:	fc 91       	ld	r31, X
     a52:	17 97       	sbiw	r26, 0x07	; 7
     a54:	09 95       	icall
     a56:	68 2f       	mov	r22, r24
     a58:	8c 2f       	mov	r24, r28
     a5a:	a2 df       	rcall	.-188    	; 0x9a0 <udc_update_iface_desc>
     a5c:	f8 2e       	mov	r15, r24
     a5e:	88 23       	and	r24, r24
     a60:	a1 f0       	breq	.+40     	; 0xa8a <udc_iface_disable+0x76>
     a62:	c0 91 fa 21 	lds	r28, 0x21FA
     a66:	d0 91 fb 21 	lds	r29, 0x21FB
     a6a:	65 e0       	ldi	r22, 0x05	; 5
     a6c:	ce 01       	movw	r24, r28
     a6e:	5d df       	rcall	.-326    	; 0x92a <udc_next_desc_in_iface>
     a70:	ec 01       	movw	r28, r24
     a72:	00 97       	sbiw	r24, 0x00	; 0
     a74:	21 f0       	breq	.+8      	; 0xa7e <udc_iface_disable+0x6a>
     a76:	8a 81       	ldd	r24, Y+2	; 0x02
     a78:	0e 94 69 10 	call	0x20d2	; 0x20d2 <udd_ep_free>
     a7c:	f6 cf       	rjmp	.-20     	; 0xa6a <udc_iface_disable+0x56>
     a7e:	d8 01       	movw	r26, r16
     a80:	12 96       	adiw	r26, 0x02	; 2
     a82:	ed 91       	ld	r30, X+
     a84:	fc 91       	ld	r31, X
     a86:	13 97       	sbiw	r26, 0x03	; 3
     a88:	09 95       	icall
     a8a:	8f 2d       	mov	r24, r15
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	08 95       	ret

00000a98 <udc_iface_enable>:
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	18 2f       	mov	r17, r24
     aa0:	7f df       	rcall	.-258    	; 0x9a0 <udc_update_iface_desc>
     aa2:	88 23       	and	r24, r24
     aa4:	41 f1       	breq	.+80     	; 0xaf6 <udc_iface_enable+0x5e>
     aa6:	c0 91 fa 21 	lds	r28, 0x21FA
     aaa:	d0 91 fb 21 	lds	r29, 0x21FB
     aae:	65 e0       	ldi	r22, 0x05	; 5
     ab0:	ce 01       	movw	r24, r28
     ab2:	3b df       	rcall	.-394    	; 0x92a <udc_next_desc_in_iface>
     ab4:	ec 01       	movw	r28, r24
     ab6:	00 97       	sbiw	r24, 0x00	; 0
     ab8:	49 f0       	breq	.+18     	; 0xacc <udc_iface_enable+0x34>
     aba:	4c 81       	ldd	r20, Y+4	; 0x04
     abc:	5d 81       	ldd	r21, Y+5	; 0x05
     abe:	6b 81       	ldd	r22, Y+3	; 0x03
     ac0:	8a 81       	ldd	r24, Y+2	; 0x02
     ac2:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <udd_ep_alloc>
     ac6:	81 11       	cpse	r24, r1
     ac8:	f2 cf       	rjmp	.-28     	; 0xaae <udc_iface_enable+0x16>
     aca:	15 c0       	rjmp	.+42     	; 0xaf6 <udc_iface_enable+0x5e>
     acc:	a0 91 fc 21 	lds	r26, 0x21FC
     ad0:	b0 91 fd 21 	lds	r27, 0x21FD
     ad4:	81 2f       	mov	r24, r17
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	12 96       	adiw	r26, 0x02	; 2
     ade:	ed 91       	ld	r30, X+
     ae0:	fc 91       	ld	r31, X
     ae2:	13 97       	sbiw	r26, 0x03	; 3
     ae4:	e8 0f       	add	r30, r24
     ae6:	f9 1f       	adc	r31, r25
     ae8:	01 90       	ld	r0, Z+
     aea:	f0 81       	ld	r31, Z
     aec:	e0 2d       	mov	r30, r0
     aee:	01 90       	ld	r0, Z+
     af0:	f0 81       	ld	r31, Z
     af2:	e0 2d       	mov	r30, r0
     af4:	09 95       	icall
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	08 95       	ret

00000afe <udc_start>:
     afe:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <udd_enable>
     b02:	08 95       	ret

00000b04 <udc_reset>:
     b04:	cf 93       	push	r28
     b06:	80 91 fe 21 	lds	r24, 0x21FE
     b0a:	88 23       	and	r24, r24
     b0c:	c1 f0       	breq	.+48     	; 0xb3e <udc_reset+0x3a>
     b0e:	e0 91 fc 21 	lds	r30, 0x21FC
     b12:	f0 91 fd 21 	lds	r31, 0x21FD
     b16:	01 90       	ld	r0, Z+
     b18:	f0 81       	ld	r31, Z
     b1a:	e0 2d       	mov	r30, r0
     b1c:	84 81       	ldd	r24, Z+4	; 0x04
     b1e:	88 23       	and	r24, r24
     b20:	71 f0       	breq	.+28     	; 0xb3e <udc_reset+0x3a>
     b22:	c0 e0       	ldi	r28, 0x00	; 0
     b24:	8c 2f       	mov	r24, r28
     b26:	76 df       	rcall	.-276    	; 0xa14 <udc_iface_disable>
     b28:	cf 5f       	subi	r28, 0xFF	; 255
     b2a:	e0 91 fc 21 	lds	r30, 0x21FC
     b2e:	f0 91 fd 21 	lds	r31, 0x21FD
     b32:	01 90       	ld	r0, Z+
     b34:	f0 81       	ld	r31, Z
     b36:	e0 2d       	mov	r30, r0
     b38:	84 81       	ldd	r24, Z+4	; 0x04
     b3a:	c8 17       	cp	r28, r24
     b3c:	98 f3       	brcs	.-26     	; 0xb24 <udc_reset+0x20>
     b3e:	10 92 fe 21 	sts	0x21FE, r1
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	80 93 02 22 	sts	0x2202, r24
     b4a:	90 93 03 22 	sts	0x2203, r25
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     b52:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     b54:	80 91 fe 21 	lds	r24, 0x21FE
     b58:	88 23       	and	r24, r24
     b5a:	41 f1       	breq	.+80     	; 0xbac <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b5c:	e0 91 fc 21 	lds	r30, 0x21FC
     b60:	f0 91 fd 21 	lds	r31, 0x21FD
     b64:	a0 81       	ld	r26, Z
     b66:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b68:	14 96       	adiw	r26, 0x04	; 4
     b6a:	8c 91       	ld	r24, X
     b6c:	88 23       	and	r24, r24
     b6e:	f1 f0       	breq	.+60     	; 0xbac <udc_sof_notify+0x5a>
     b70:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     b72:	8c 2f       	mov	r24, r28
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	02 80       	ldd	r0, Z+2	; 0x02
     b7c:	f3 81       	ldd	r31, Z+3	; 0x03
     b7e:	e0 2d       	mov	r30, r0
     b80:	e8 0f       	add	r30, r24
     b82:	f9 1f       	adc	r31, r25
     b84:	01 90       	ld	r0, Z+
     b86:	f0 81       	ld	r31, Z
     b88:	e0 2d       	mov	r30, r0
     b8a:	00 84       	ldd	r0, Z+8	; 0x08
     b8c:	f1 85       	ldd	r31, Z+9	; 0x09
     b8e:	e0 2d       	mov	r30, r0
     b90:	30 97       	sbiw	r30, 0x00	; 0
     b92:	09 f0       	breq	.+2      	; 0xb96 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     b94:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     b96:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b98:	e0 91 fc 21 	lds	r30, 0x21FC
     b9c:	f0 91 fd 21 	lds	r31, 0x21FD
     ba0:	a0 81       	ld	r26, Z
     ba2:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     ba4:	14 96       	adiw	r26, 0x04	; 4
     ba6:	8c 91       	ld	r24, X
     ba8:	c8 17       	cp	r28, r24
     baa:	18 f3       	brcs	.-58     	; 0xb72 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     bbc:	10 92 47 23 	sts	0x2347, r1
     bc0:	10 92 48 23 	sts	0x2348, r1
	udd_g_ctrlreq.callback = NULL;
     bc4:	10 92 49 23 	sts	0x2349, r1
     bc8:	10 92 4a 23 	sts	0x234A, r1
	udd_g_ctrlreq.over_under_run = NULL;
     bcc:	10 92 4b 23 	sts	0x234B, r1
     bd0:	10 92 4c 23 	sts	0x234C, r1

	if (Udd_setup_is_in()) {
     bd4:	20 91 3d 23 	lds	r18, 0x233D
     bd8:	22 23       	and	r18, r18
     bda:	0c f0       	brlt	.+2      	; 0xbde <udc_process_setup+0x2e>
     bdc:	97 c2       	rjmp	.+1326   	; 0x110c <udc_process_setup+0x55c>
		if (udd_g_ctrlreq.req.wLength == 0) {
     bde:	80 91 43 23 	lds	r24, 0x2343
     be2:	90 91 44 23 	lds	r25, 0x2344
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	09 f0       	breq	.+2      	; 0xbec <udc_process_setup+0x3c>
     bea:	95 c2       	rjmp	.+1322   	; 0x1116 <udc_process_setup+0x566>
     bec:	8b c2       	rjmp	.+1302   	; 0x1104 <udc_process_setup+0x554>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     bee:	2f 71       	andi	r18, 0x1F	; 31
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <udc_process_setup+0x44>
     bf2:	b9 c0       	rjmp	.+370    	; 0xd66 <udc_process_setup+0x1b6>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     bf4:	30 91 3e 23 	lds	r19, 0x233E
     bf8:	36 30       	cpi	r19, 0x06	; 6
     bfa:	89 f0       	breq	.+34     	; 0xc1e <udc_process_setup+0x6e>
     bfc:	38 30       	cpi	r19, 0x08	; 8
     bfe:	09 f4       	brne	.+2      	; 0xc02 <udc_process_setup+0x52>
     c00:	a6 c0       	rjmp	.+332    	; 0xd4e <udc_process_setup+0x19e>
     c02:	31 11       	cpse	r19, r1
     c04:	b0 c0       	rjmp	.+352    	; 0xd66 <udc_process_setup+0x1b6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     c06:	02 97       	sbiw	r24, 0x02	; 2
     c08:	41 f4       	brne	.+16     	; 0xc1a <udc_process_setup+0x6a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     c0a:	62 e0       	ldi	r22, 0x02	; 2
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	92 e2       	ldi	r25, 0x22	; 34
     c12:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     c16:	01 e0       	ldi	r16, 0x01	; 1
     c18:	f8 c1       	rjmp	.+1008   	; 0x100a <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     c1a:	00 e0       	ldi	r16, 0x00	; 0
     c1c:	f6 c1       	rjmp	.+1004   	; 0x100a <udc_process_setup+0x45a>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     c1e:	20 91 3f 23 	lds	r18, 0x233F
     c22:	30 91 40 23 	lds	r19, 0x2340

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     c26:	83 2f       	mov	r24, r19
     c28:	99 27       	eor	r25, r25
     c2a:	82 30       	cpi	r24, 0x02	; 2
     c2c:	91 05       	cpc	r25, r1
     c2e:	a1 f0       	breq	.+40     	; 0xc58 <udc_process_setup+0xa8>
     c30:	1c f4       	brge	.+6      	; 0xc38 <udc_process_setup+0x88>
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	39 f0       	breq	.+14     	; 0xc44 <udc_process_setup+0x94>
     c36:	81 c0       	rjmp	.+258    	; 0xd3a <udc_process_setup+0x18a>
     c38:	83 30       	cpi	r24, 0x03	; 3
     c3a:	91 05       	cpc	r25, r1
     c3c:	f1 f1       	breq	.+124    	; 0xcba <udc_process_setup+0x10a>
     c3e:	0f 97       	sbiw	r24, 0x0f	; 15
     c40:	69 f1       	breq	.+90     	; 0xc9c <udc_process_setup+0xec>
     c42:	7b c0       	rjmp	.+246    	; 0xd3a <udc_process_setup+0x18a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     c44:	80 91 34 20 	lds	r24, 0x2034
     c48:	90 91 35 20 	lds	r25, 0x2035
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     c4c:	dc 01       	movw	r26, r24
     c4e:	6c 91       	ld	r22, X
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <udd_set_setup_payload>
     c56:	60 c0       	rjmp	.+192    	; 0xd18 <udc_process_setup+0x168>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     c58:	e0 91 34 20 	lds	r30, 0x2034
     c5c:	f0 91 35 20 	lds	r31, 0x2035
     c60:	81 89       	ldd	r24, Z+17	; 0x11
     c62:	28 17       	cp	r18, r24
     c64:	08 f0       	brcs	.+2      	; 0xc68 <udc_process_setup+0xb8>
     c66:	6b c0       	rjmp	.+214    	; 0xd3e <udc_process_setup+0x18e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     c68:	c9 01       	movw	r24, r18
     c6a:	99 27       	eor	r25, r25
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	e0 91 36 20 	lds	r30, 0x2036
     c78:	f0 91 37 20 	lds	r31, 0x2037
     c7c:	e8 0f       	add	r30, r24
     c7e:	f9 1f       	adc	r31, r25
     c80:	80 81       	ld	r24, Z
     c82:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     c84:	fc 01       	movw	r30, r24
     c86:	62 81       	ldd	r22, Z+2	; 0x02
     c88:	73 81       	ldd	r23, Z+3	; 0x03
     c8a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     c8e:	e0 91 45 23 	lds	r30, 0x2345
     c92:	f0 91 46 23 	lds	r31, 0x2346
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	81 83       	std	Z+1, r24	; 0x01
     c9a:	3e c0       	rjmp	.+124    	; 0xd18 <udc_process_setup+0x168>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     c9c:	80 91 38 20 	lds	r24, 0x2038
     ca0:	90 91 39 20 	lds	r25, 0x2039
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	09 f4       	brne	.+2      	; 0xcaa <udc_process_setup+0xfa>
     ca8:	4c c0       	rjmp	.+152    	; 0xd42 <udc_process_setup+0x192>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     caa:	dc 01       	movw	r26, r24
     cac:	12 96       	adiw	r26, 0x02	; 2
     cae:	6d 91       	ld	r22, X+
     cb0:	7c 91       	ld	r23, X
     cb2:	13 97       	sbiw	r26, 0x03	; 3
     cb4:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <udd_set_setup_payload>
     cb8:	2f c0       	rjmp	.+94     	; 0xd18 <udc_process_setup+0x168>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     cba:	33 27       	eor	r19, r19
     cbc:	21 30       	cpi	r18, 0x01	; 1
     cbe:	31 05       	cpc	r19, r1
     cc0:	89 f0       	breq	.+34     	; 0xce4 <udc_process_setup+0x134>
     cc2:	48 f0       	brcs	.+18     	; 0xcd6 <udc_process_setup+0x126>
     cc4:	22 30       	cpi	r18, 0x02	; 2
     cc6:	31 05       	cpc	r19, r1
     cc8:	09 f4       	brne	.+2      	; 0xccc <udc_process_setup+0x11c>
     cca:	2a c2       	rjmp	.+1108   	; 0x1120 <udc_process_setup+0x570>
     ccc:	23 30       	cpi	r18, 0x03	; 3
     cce:	31 05       	cpc	r19, r1
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <udc_process_setup+0x124>
     cd2:	2a c2       	rjmp	.+1108   	; 0x1128 <udc_process_setup+0x578>
     cd4:	38 c0       	rjmp	.+112    	; 0xd46 <udc_process_setup+0x196>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     cd6:	64 e0       	ldi	r22, 0x04	; 4
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	80 e3       	ldi	r24, 0x30	; 48
     cdc:	90 e2       	ldi	r25, 0x20	; 32
     cde:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <udd_set_setup_payload>
     ce2:	1a c0       	rjmp	.+52     	; 0xd18 <udc_process_setup+0x168>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     ce4:	89 e2       	ldi	r24, 0x29	; 41
     ce6:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     ce8:	25 e0       	ldi	r18, 0x05	; 5
     cea:	38 2f       	mov	r19, r24
     cec:	a6 e1       	ldi	r26, 0x16	; 22
     cee:	b0 e2       	ldi	r27, 0x20	; 32
     cf0:	e8 2f       	mov	r30, r24
     cf2:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     cf4:	81 91       	ld	r24, Z+
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8d 93       	st	X+, r24
     cfa:	9d 93       	st	X+, r25
     cfc:	8e 2f       	mov	r24, r30
     cfe:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     d00:	82 17       	cp	r24, r18
     d02:	c0 f3       	brcs	.-16     	; 0xcf4 <udc_process_setup+0x144>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     d04:	22 0f       	add	r18, r18
     d06:	62 e0       	ldi	r22, 0x02	; 2
     d08:	62 0f       	add	r22, r18
     d0a:	60 93 14 20 	sts	0x2014, r22
		udd_set_setup_payload(
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	84 e1       	ldi	r24, 0x14	; 20
     d12:	90 e2       	ldi	r25, 0x20	; 32
     d14:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     d18:	80 91 43 23 	lds	r24, 0x2343
     d1c:	90 91 44 23 	lds	r25, 0x2344
     d20:	20 91 47 23 	lds	r18, 0x2347
     d24:	30 91 48 23 	lds	r19, 0x2348
     d28:	82 17       	cp	r24, r18
     d2a:	93 07       	cpc	r25, r19
     d2c:	70 f4       	brcc	.+28     	; 0xd4a <udc_process_setup+0x19a>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     d2e:	80 93 47 23 	sts	0x2347, r24
     d32:	90 93 48 23 	sts	0x2348, r25
	}
	return true;
     d36:	01 e0       	ldi	r16, 0x01	; 1
     d38:	68 c1       	rjmp	.+720    	; 0x100a <udc_process_setup+0x45a>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     d3a:	00 e0       	ldi	r16, 0x00	; 0
     d3c:	66 c1       	rjmp	.+716    	; 0x100a <udc_process_setup+0x45a>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     d3e:	00 e0       	ldi	r16, 0x00	; 0
     d40:	64 c1       	rjmp	.+712    	; 0x100a <udc_process_setup+0x45a>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     d42:	00 e0       	ldi	r16, 0x00	; 0
     d44:	62 c1       	rjmp	.+708    	; 0x100a <udc_process_setup+0x45a>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     d46:	00 e0       	ldi	r16, 0x00	; 0
     d48:	60 c1       	rjmp	.+704    	; 0x100a <udc_process_setup+0x45a>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     d4a:	01 e0       	ldi	r16, 0x01	; 1
     d4c:	5e c1       	rjmp	.+700    	; 0x100a <udc_process_setup+0x45a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	41 f4       	brne	.+16     	; 0xd62 <udc_process_setup+0x1b2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	8e ef       	ldi	r24, 0xFE	; 254
     d58:	91 e2       	ldi	r25, 0x21	; 33
     d5a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <udd_set_setup_payload>
	return true;
     d5e:	01 e0       	ldi	r16, 0x01	; 1
     d60:	54 c1       	rjmp	.+680    	; 0x100a <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     d62:	00 e0       	ldi	r16, 0x00	; 0
     d64:	52 c1       	rjmp	.+676    	; 0x100a <udc_process_setup+0x45a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     d66:	21 30       	cpi	r18, 0x01	; 1
     d68:	09 f0       	breq	.+2      	; 0xd6c <udc_process_setup+0x1bc>
     d6a:	40 c0       	rjmp	.+128    	; 0xdec <udc_process_setup+0x23c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     d6c:	30 91 3e 23 	lds	r19, 0x233E
     d70:	3a 30       	cpi	r19, 0x0A	; 10
     d72:	e1 f5       	brne	.+120    	; 0xdec <udc_process_setup+0x23c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	a1 f5       	brne	.+104    	; 0xde0 <udc_process_setup+0x230>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     d78:	80 91 fe 21 	lds	r24, 0x21FE
     d7c:	88 23       	and	r24, r24
     d7e:	91 f1       	breq	.+100    	; 0xde4 <udc_process_setup+0x234>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d80:	c0 91 41 23 	lds	r28, 0x2341
     d84:	d0 91 42 23 	lds	r29, 0x2342
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     d88:	e0 90 fc 21 	lds	r14, 0x21FC
     d8c:	f0 90 fd 21 	lds	r15, 0x21FD
     d90:	d7 01       	movw	r26, r14
     d92:	ed 91       	ld	r30, X+
     d94:	fc 91       	ld	r31, X
     d96:	84 81       	ldd	r24, Z+4	; 0x04
     d98:	c8 17       	cp	r28, r24
     d9a:	30 f5       	brcc	.+76     	; 0xde8 <udc_process_setup+0x238>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	8c 2f       	mov	r24, r28
     da0:	ff dd       	rcall	.-1026   	; 0x9a0 <udc_update_iface_desc>
     da2:	08 2f       	mov	r16, r24
     da4:	88 23       	and	r24, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <udc_process_setup+0x1fa>
     da8:	30 c1       	rjmp	.+608    	; 0x100a <udc_process_setup+0x45a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     daa:	ce 01       	movw	r24, r28
     dac:	99 27       	eor	r25, r25
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	d7 01       	movw	r26, r14
     db4:	12 96       	adiw	r26, 0x02	; 2
     db6:	ed 91       	ld	r30, X+
     db8:	fc 91       	ld	r31, X
     dba:	13 97       	sbiw	r26, 0x03	; 3
     dbc:	e8 0f       	add	r30, r24
     dbe:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     dc0:	01 90       	ld	r0, Z+
     dc2:	f0 81       	ld	r31, Z
     dc4:	e0 2d       	mov	r30, r0
     dc6:	06 80       	ldd	r0, Z+6	; 0x06
     dc8:	f7 81       	ldd	r31, Z+7	; 0x07
     dca:	e0 2d       	mov	r30, r0
     dcc:	09 95       	icall
     dce:	80 93 00 22 	sts	0x2200, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	92 e2       	ldi	r25, 0x22	; 34
     dda:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <udd_set_setup_payload>
     dde:	15 c1       	rjmp	.+554    	; 0x100a <udc_process_setup+0x45a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     de0:	00 e0       	ldi	r16, 0x00	; 0
     de2:	13 c1       	rjmp	.+550    	; 0x100a <udc_process_setup+0x45a>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     de4:	00 e0       	ldi	r16, 0x00	; 0
     de6:	11 c1       	rjmp	.+546    	; 0x100a <udc_process_setup+0x45a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     de8:	00 e0       	ldi	r16, 0x00	; 0
     dea:	0f c1       	rjmp	.+542    	; 0x100a <udc_process_setup+0x45a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     dec:	22 30       	cpi	r18, 0x02	; 2
     dee:	09 f0       	breq	.+2      	; 0xdf2 <udc_process_setup+0x242>
     df0:	0e c1       	rjmp	.+540    	; 0x100e <udc_process_setup+0x45e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     df2:	20 91 3e 23 	lds	r18, 0x233E
     df6:	21 11       	cpse	r18, r1
     df8:	03 c1       	rjmp	.+518    	; 0x1000 <udc_process_setup+0x450>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     dfa:	02 97       	sbiw	r24, 0x02	; 2
     dfc:	81 f4       	brne	.+32     	; 0xe1e <udc_process_setup+0x26e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     dfe:	80 91 41 23 	lds	r24, 0x2341
     e02:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <udd_ep_is_halted>
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	80 93 f8 21 	sts	0x21F8, r24
     e0c:	90 93 f9 21 	sts	0x21F9, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     e10:	62 e0       	ldi	r22, 0x02	; 2
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	88 ef       	ldi	r24, 0xF8	; 248
     e16:	91 e2       	ldi	r25, 0x21	; 33
     e18:	ed d7       	rcall	.+4058   	; 0x1df4 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     e1a:	01 e0       	ldi	r16, 0x01	; 1
     e1c:	f6 c0       	rjmp	.+492    	; 0x100a <udc_process_setup+0x45a>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     e1e:	00 e0       	ldi	r16, 0x00	; 0
     e20:	f4 c0       	rjmp	.+488    	; 0x100a <udc_process_setup+0x45a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     e22:	2f 71       	andi	r18, 0x1F	; 31
     e24:	09 f0       	breq	.+2      	; 0xe28 <udc_process_setup+0x278>
     e26:	90 c0       	rjmp	.+288    	; 0xf48 <udc_process_setup+0x398>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     e28:	80 91 3e 23 	lds	r24, 0x233E
     e2c:	83 30       	cpi	r24, 0x03	; 3
     e2e:	09 f4       	brne	.+2      	; 0xe32 <udc_process_setup+0x282>
     e30:	e9 c0       	rjmp	.+466    	; 0x1004 <udc_process_setup+0x454>
     e32:	18 f4       	brcc	.+6      	; 0xe3a <udc_process_setup+0x28a>
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	b1 f0       	breq	.+44     	; 0xe64 <udc_process_setup+0x2b4>
     e38:	87 c0       	rjmp	.+270    	; 0xf48 <udc_process_setup+0x398>
     e3a:	85 30       	cpi	r24, 0x05	; 5
     e3c:	19 f0       	breq	.+6      	; 0xe44 <udc_process_setup+0x294>
     e3e:	89 30       	cpi	r24, 0x09	; 9
     e40:	61 f1       	breq	.+88     	; 0xe9a <udc_process_setup+0x2ea>
     e42:	82 c0       	rjmp	.+260    	; 0xf48 <udc_process_setup+0x398>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e44:	80 91 43 23 	lds	r24, 0x2343
     e48:	90 91 44 23 	lds	r25, 0x2344
     e4c:	89 2b       	or	r24, r25
     e4e:	41 f4       	brne	.+16     	; 0xe60 <udc_process_setup+0x2b0>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     e50:	8a ec       	ldi	r24, 0xCA	; 202
     e52:	94 e0       	ldi	r25, 0x04	; 4
     e54:	80 93 49 23 	sts	0x2349, r24
     e58:	90 93 4a 23 	sts	0x234A, r25
	return true;
     e5c:	01 e0       	ldi	r16, 0x01	; 1
     e5e:	d5 c0       	rjmp	.+426    	; 0x100a <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e60:	00 e0       	ldi	r16, 0x00	; 0
     e62:	d3 c0       	rjmp	.+422    	; 0x100a <udc_process_setup+0x45a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e64:	80 91 43 23 	lds	r24, 0x2343
     e68:	90 91 44 23 	lds	r25, 0x2344
     e6c:	89 2b       	or	r24, r25
     e6e:	89 f4       	brne	.+34     	; 0xe92 <udc_process_setup+0x2e2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     e70:	80 91 3f 23 	lds	r24, 0x233F
     e74:	90 91 40 23 	lds	r25, 0x2340
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	69 f4       	brne	.+26     	; 0xe96 <udc_process_setup+0x2e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     e7c:	80 91 02 22 	lds	r24, 0x2202
     e80:	90 91 03 22 	lds	r25, 0x2203
     e84:	8d 7f       	andi	r24, 0xFD	; 253
     e86:	80 93 02 22 	sts	0x2202, r24
     e8a:	90 93 03 22 	sts	0x2203, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     e8e:	01 e0       	ldi	r16, 0x01	; 1
     e90:	bc c0       	rjmp	.+376    	; 0x100a <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e92:	00 e0       	ldi	r16, 0x00	; 0
     e94:	ba c0       	rjmp	.+372    	; 0x100a <udc_process_setup+0x45a>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     e96:	00 e0       	ldi	r16, 0x00	; 0
     e98:	b8 c0       	rjmp	.+368    	; 0x100a <udc_process_setup+0x45a>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     e9a:	80 91 43 23 	lds	r24, 0x2343
     e9e:	90 91 44 23 	lds	r25, 0x2344
     ea2:	89 2b       	or	r24, r25
     ea4:	09 f0       	breq	.+2      	; 0xea8 <udc_process_setup+0x2f8>
     ea6:	46 c0       	rjmp	.+140    	; 0xf34 <udc_process_setup+0x384>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     ea8:	9a d7       	rcall	.+3892   	; 0x1dde <udd_getaddress>
     eaa:	88 23       	and	r24, r24
     eac:	09 f4       	brne	.+2      	; 0xeb0 <udc_process_setup+0x300>
     eae:	44 c0       	rjmp	.+136    	; 0xf38 <udc_process_setup+0x388>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     eb0:	20 91 3f 23 	lds	r18, 0x233F
     eb4:	30 91 40 23 	lds	r19, 0x2340
     eb8:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     eba:	e0 91 34 20 	lds	r30, 0x2034
     ebe:	f0 91 35 20 	lds	r31, 0x2035
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     ec2:	81 89       	ldd	r24, Z+17	; 0x11
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	c0 f1       	brcs	.+112    	; 0xf3c <udc_process_setup+0x38c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     ecc:	1b de       	rcall	.-970    	; 0xb04 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     ece:	80 91 3f 23 	lds	r24, 0x233F
     ed2:	90 91 40 23 	lds	r25, 0x2340
     ed6:	80 93 fe 21 	sts	0x21FE, r24
	if (udc_num_configuration == 0) {
     eda:	88 23       	and	r24, r24
     edc:	89 f1       	breq	.+98     	; 0xf40 <udc_process_setup+0x390>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     ede:	99 27       	eor	r25, r25
     ee0:	81 50       	subi	r24, 0x01	; 1
     ee2:	90 4c       	sbci	r25, 0xC0	; 192
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	e0 91 36 20 	lds	r30, 0x2036
     ef0:	f0 91 37 20 	lds	r31, 0x2037
     ef4:	e8 0f       	add	r30, r24
     ef6:	f9 1f       	adc	r31, r25
     ef8:	e0 93 fc 21 	sts	0x21FC, r30
     efc:	f0 93 fd 21 	sts	0x21FD, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f00:	01 90       	ld	r0, Z+
     f02:	f0 81       	ld	r31, Z
     f04:	e0 2d       	mov	r30, r0
     f06:	84 81       	ldd	r24, Z+4	; 0x04
     f08:	88 23       	and	r24, r24
     f0a:	e1 f0       	breq	.+56     	; 0xf44 <udc_process_setup+0x394>
     f0c:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	8c 2f       	mov	r24, r28
     f12:	c2 dd       	rcall	.-1148   	; 0xa98 <udc_iface_enable>
     f14:	08 2f       	mov	r16, r24
     f16:	88 23       	and	r24, r24
     f18:	09 f4       	brne	.+2      	; 0xf1c <udc_process_setup+0x36c>
     f1a:	77 c0       	rjmp	.+238    	; 0x100a <udc_process_setup+0x45a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     f1c:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f1e:	e0 91 fc 21 	lds	r30, 0x21FC
     f22:	f0 91 fd 21 	lds	r31, 0x21FD
     f26:	01 90       	ld	r0, Z+
     f28:	f0 81       	ld	r31, Z
     f2a:	e0 2d       	mov	r30, r0
     f2c:	84 81       	ldd	r24, Z+4	; 0x04
     f2e:	c8 17       	cp	r28, r24
     f30:	70 f3       	brcs	.-36     	; 0xf0e <udc_process_setup+0x35e>
     f32:	6b c0       	rjmp	.+214    	; 0x100a <udc_process_setup+0x45a>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     f34:	00 e0       	ldi	r16, 0x00	; 0
     f36:	69 c0       	rjmp	.+210    	; 0x100a <udc_process_setup+0x45a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     f38:	00 e0       	ldi	r16, 0x00	; 0
     f3a:	67 c0       	rjmp	.+206    	; 0x100a <udc_process_setup+0x45a>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     f3c:	00 e0       	ldi	r16, 0x00	; 0
     f3e:	65 c0       	rjmp	.+202    	; 0x100a <udc_process_setup+0x45a>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     f40:	01 e0       	ldi	r16, 0x01	; 1
     f42:	63 c0       	rjmp	.+198    	; 0x100a <udc_process_setup+0x45a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     f44:	01 e0       	ldi	r16, 0x01	; 1
     f46:	61 c0       	rjmp	.+194    	; 0x100a <udc_process_setup+0x45a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     f48:	21 30       	cpi	r18, 0x01	; 1
     f4a:	09 f5       	brne	.+66     	; 0xf8e <udc_process_setup+0x3de>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     f4c:	80 91 3e 23 	lds	r24, 0x233E
     f50:	8b 30       	cpi	r24, 0x0B	; 11
     f52:	e9 f4       	brne	.+58     	; 0xf8e <udc_process_setup+0x3de>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     f54:	80 91 43 23 	lds	r24, 0x2343
     f58:	90 91 44 23 	lds	r25, 0x2344
     f5c:	89 2b       	or	r24, r25
     f5e:	99 f4       	brne	.+38     	; 0xf86 <udc_process_setup+0x3d6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     f60:	80 91 fe 21 	lds	r24, 0x21FE
     f64:	88 23       	and	r24, r24
     f66:	89 f0       	breq	.+34     	; 0xf8a <udc_process_setup+0x3da>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f68:	c0 91 41 23 	lds	r28, 0x2341
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     f6c:	d0 91 3f 23 	lds	r29, 0x233F

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     f70:	8c 2f       	mov	r24, r28
     f72:	50 dd       	rcall	.-1376   	; 0xa14 <udc_iface_disable>
     f74:	08 2f       	mov	r16, r24
     f76:	88 23       	and	r24, r24
     f78:	09 f4       	brne	.+2      	; 0xf7c <udc_process_setup+0x3cc>
     f7a:	47 c0       	rjmp	.+142    	; 0x100a <udc_process_setup+0x45a>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     f7c:	6d 2f       	mov	r22, r29
     f7e:	8c 2f       	mov	r24, r28
     f80:	8b dd       	rcall	.-1258   	; 0xa98 <udc_iface_enable>
     f82:	08 2f       	mov	r16, r24
     f84:	42 c0       	rjmp	.+132    	; 0x100a <udc_process_setup+0x45a>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     f86:	00 e0       	ldi	r16, 0x00	; 0
     f88:	40 c0       	rjmp	.+128    	; 0x100a <udc_process_setup+0x45a>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     f8a:	00 e0       	ldi	r16, 0x00	; 0
     f8c:	3e c0       	rjmp	.+124    	; 0x100a <udc_process_setup+0x45a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     f8e:	22 30       	cpi	r18, 0x02	; 2
     f90:	09 f0       	breq	.+2      	; 0xf94 <udc_process_setup+0x3e4>
     f92:	3d c0       	rjmp	.+122    	; 0x100e <udc_process_setup+0x45e>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     f94:	80 91 3e 23 	lds	r24, 0x233E
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	19 f0       	breq	.+6      	; 0xfa2 <udc_process_setup+0x3f2>
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	b1 f0       	breq	.+44     	; 0xfcc <udc_process_setup+0x41c>
     fa0:	33 c0       	rjmp	.+102    	; 0x1008 <udc_process_setup+0x458>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     fa2:	80 91 43 23 	lds	r24, 0x2343
     fa6:	90 91 44 23 	lds	r25, 0x2344
     faa:	89 2b       	or	r24, r25
     fac:	59 f4       	brne	.+22     	; 0xfc4 <udc_process_setup+0x414>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     fae:	80 91 3f 23 	lds	r24, 0x233F
     fb2:	90 91 40 23 	lds	r25, 0x2340
     fb6:	89 2b       	or	r24, r25
     fb8:	39 f4       	brne	.+14     	; 0xfc8 <udc_process_setup+0x418>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     fba:	80 91 41 23 	lds	r24, 0x2341
     fbe:	9f d7       	rcall	.+3902   	; 0x1efe <udd_ep_clear_halt>
     fc0:	08 2f       	mov	r16, r24
     fc2:	23 c0       	rjmp	.+70     	; 0x100a <udc_process_setup+0x45a>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     fc4:	00 e0       	ldi	r16, 0x00	; 0
     fc6:	21 c0       	rjmp	.+66     	; 0x100a <udc_process_setup+0x45a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     fc8:	00 e0       	ldi	r16, 0x00	; 0
     fca:	1f c0       	rjmp	.+62     	; 0x100a <udc_process_setup+0x45a>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     fcc:	80 91 43 23 	lds	r24, 0x2343
     fd0:	90 91 44 23 	lds	r25, 0x2344
     fd4:	89 2b       	or	r24, r25
     fd6:	81 f4       	brne	.+32     	; 0xff8 <udc_process_setup+0x448>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     fd8:	80 91 3f 23 	lds	r24, 0x233F
     fdc:	90 91 40 23 	lds	r25, 0x2340
     fe0:	89 2b       	or	r24, r25
     fe2:	61 f4       	brne	.+24     	; 0xffc <udc_process_setup+0x44c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     fe4:	c1 e4       	ldi	r28, 0x41	; 65
     fe6:	d3 e2       	ldi	r29, 0x23	; 35
     fe8:	88 81       	ld	r24, Y
     fea:	0e 94 30 10 	call	0x2060	; 0x2060 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     fee:	88 81       	ld	r24, Y
     ff0:	0e 94 86 10 	call	0x210c	; 0x210c <udd_ep_set_halt>
     ff4:	08 2f       	mov	r16, r24
     ff6:	09 c0       	rjmp	.+18     	; 0x100a <udc_process_setup+0x45a>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ff8:	00 e0       	ldi	r16, 0x00	; 0
     ffa:	07 c0       	rjmp	.+14     	; 0x100a <udc_process_setup+0x45a>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     ffc:	00 e0       	ldi	r16, 0x00	; 0
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <udc_process_setup+0x45a>
				break;
			}
		}
#endif
	}
	return false;
    1000:	00 e0       	ldi	r16, 0x00	; 0
    1002:	03 c0       	rjmp	.+6      	; 0x100a <udc_process_setup+0x45a>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1004:	00 e0       	ldi	r16, 0x00	; 0
    1006:	01 c0       	rjmp	.+2      	; 0x100a <udc_process_setup+0x45a>
				break;
			}
		}
#endif
	}
	return false;
    1008:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    100a:	01 11       	cpse	r16, r1
    100c:	91 c0       	rjmp	.+290    	; 0x1130 <udc_process_setup+0x580>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    100e:	80 91 3d 23 	lds	r24, 0x233D
    1012:	8f 71       	andi	r24, 0x1F	; 31
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	c1 f5       	brne	.+112    	; 0x1088 <udc_process_setup+0x4d8>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1018:	80 91 fe 21 	lds	r24, 0x21FE
    101c:	88 23       	and	r24, r24
    101e:	a1 f1       	breq	.+104    	; 0x1088 <udc_process_setup+0x4d8>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1020:	c0 91 41 23 	lds	r28, 0x2341
    1024:	d0 91 42 23 	lds	r29, 0x2342
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1028:	00 91 fc 21 	lds	r16, 0x21FC
    102c:	10 91 fd 21 	lds	r17, 0x21FD
    1030:	d8 01       	movw	r26, r16
    1032:	ed 91       	ld	r30, X+
    1034:	fc 91       	ld	r31, X
    1036:	84 81       	ldd	r24, Z+4	; 0x04
    1038:	c8 17       	cp	r28, r24
    103a:	30 f5       	brcc	.+76     	; 0x1088 <udc_process_setup+0x4d8>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	8c 2f       	mov	r24, r28
    1040:	af dc       	rcall	.-1698   	; 0x9a0 <udc_update_iface_desc>
    1042:	88 23       	and	r24, r24
    1044:	09 f1       	breq	.+66     	; 0x1088 <udc_process_setup+0x4d8>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1046:	ce 01       	movw	r24, r28
    1048:	99 27       	eor	r25, r25
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	d8 01       	movw	r26, r16
    1050:	12 96       	adiw	r26, 0x02	; 2
    1052:	ed 91       	ld	r30, X+
    1054:	fc 91       	ld	r31, X
    1056:	13 97       	sbiw	r26, 0x03	; 3
    1058:	e8 0f       	add	r30, r24
    105a:	f9 1f       	adc	r31, r25
    105c:	00 81       	ld	r16, Z
    105e:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1060:	d8 01       	movw	r26, r16
    1062:	16 96       	adiw	r26, 0x06	; 6
    1064:	ed 91       	ld	r30, X+
    1066:	fc 91       	ld	r31, X
    1068:	17 97       	sbiw	r26, 0x07	; 7
    106a:	09 95       	icall
    106c:	68 2f       	mov	r22, r24
    106e:	8c 2f       	mov	r24, r28
    1070:	97 dc       	rcall	.-1746   	; 0x9a0 <udc_update_iface_desc>
    1072:	88 23       	and	r24, r24
    1074:	49 f0       	breq	.+18     	; 0x1088 <udc_process_setup+0x4d8>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1076:	d8 01       	movw	r26, r16
    1078:	14 96       	adiw	r26, 0x04	; 4
    107a:	ed 91       	ld	r30, X+
    107c:	fc 91       	ld	r31, X
    107e:	15 97       	sbiw	r26, 0x05	; 5
    1080:	09 95       	icall
    1082:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1084:	81 11       	cpse	r24, r1
    1086:	54 c0       	rjmp	.+168    	; 0x1130 <udc_process_setup+0x580>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1088:	80 91 3d 23 	lds	r24, 0x233D
    108c:	8f 71       	andi	r24, 0x1F	; 31
    108e:	82 30       	cpi	r24, 0x02	; 2
    1090:	d9 f5       	brne	.+118    	; 0x1108 <udc_process_setup+0x558>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1092:	80 91 fe 21 	lds	r24, 0x21FE
    1096:	88 23       	and	r24, r24
    1098:	89 f1       	breq	.+98     	; 0x10fc <udc_process_setup+0x54c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    109a:	e0 91 fc 21 	lds	r30, 0x21FC
    109e:	f0 91 fd 21 	lds	r31, 0x21FD
    10a2:	a0 81       	ld	r26, Z
    10a4:	b1 81       	ldd	r27, Z+1	; 0x01
    10a6:	14 96       	adiw	r26, 0x04	; 4
    10a8:	8c 91       	ld	r24, X
    10aa:	88 23       	and	r24, r24
    10ac:	49 f1       	breq	.+82     	; 0x1100 <udc_process_setup+0x550>
    10ae:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    10b0:	21 2f       	mov	r18, r17
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	22 0f       	add	r18, r18
    10b6:	33 1f       	adc	r19, r19
    10b8:	02 80       	ldd	r0, Z+2	; 0x02
    10ba:	f3 81       	ldd	r31, Z+3	; 0x03
    10bc:	e0 2d       	mov	r30, r0
    10be:	e2 0f       	add	r30, r18
    10c0:	f3 1f       	adc	r31, r19
    10c2:	c0 81       	ld	r28, Z
    10c4:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    10c6:	ee 81       	ldd	r30, Y+6	; 0x06
    10c8:	ff 81       	ldd	r31, Y+7	; 0x07
    10ca:	09 95       	icall
    10cc:	68 2f       	mov	r22, r24
    10ce:	81 2f       	mov	r24, r17
    10d0:	67 dc       	rcall	.-1842   	; 0x9a0 <udc_update_iface_desc>
    10d2:	08 2f       	mov	r16, r24
    10d4:	88 23       	and	r24, r24
    10d6:	61 f1       	breq	.+88     	; 0x1130 <udc_process_setup+0x580>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    10d8:	ec 81       	ldd	r30, Y+4	; 0x04
    10da:	fd 81       	ldd	r31, Y+5	; 0x05
    10dc:	09 95       	icall
    10de:	08 2f       	mov	r16, r24
    10e0:	81 11       	cpse	r24, r1
    10e2:	26 c0       	rjmp	.+76     	; 0x1130 <udc_process_setup+0x580>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    10e4:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    10e6:	e0 91 fc 21 	lds	r30, 0x21FC
    10ea:	f0 91 fd 21 	lds	r31, 0x21FD
    10ee:	a0 81       	ld	r26, Z
    10f0:	b1 81       	ldd	r27, Z+1	; 0x01
    10f2:	14 96       	adiw	r26, 0x04	; 4
    10f4:	8c 91       	ld	r24, X
    10f6:	18 17       	cp	r17, r24
    10f8:	d8 f2       	brcs	.-74     	; 0x10b0 <udc_process_setup+0x500>
    10fa:	1a c0       	rjmp	.+52     	; 0x1130 <udc_process_setup+0x580>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    10fc:	00 e0       	ldi	r16, 0x00	; 0
    10fe:	18 c0       	rjmp	.+48     	; 0x1130 <udc_process_setup+0x580>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1100:	00 e0       	ldi	r16, 0x00	; 0
    1102:	16 c0       	rjmp	.+44     	; 0x1130 <udc_process_setup+0x580>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1104:	00 e0       	ldi	r16, 0x00	; 0
    1106:	14 c0       	rjmp	.+40     	; 0x1130 <udc_process_setup+0x580>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1108:	00 e0       	ldi	r16, 0x00	; 0
    110a:	12 c0       	rjmp	.+36     	; 0x1130 <udc_process_setup+0x580>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    110c:	82 2f       	mov	r24, r18
    110e:	80 76       	andi	r24, 0x60	; 96
    1110:	09 f0       	breq	.+2      	; 0x1114 <udc_process_setup+0x564>
    1112:	7d cf       	rjmp	.-262    	; 0x100e <udc_process_setup+0x45e>
    1114:	86 ce       	rjmp	.-756    	; 0xe22 <udc_process_setup+0x272>
    1116:	32 2f       	mov	r19, r18
    1118:	30 76       	andi	r19, 0x60	; 96
    111a:	09 f0       	breq	.+2      	; 0x111e <udc_process_setup+0x56e>
    111c:	78 cf       	rjmp	.-272    	; 0x100e <udc_process_setup+0x45e>
    111e:	67 cd       	rjmp	.-1330   	; 0xbee <udc_process_setup+0x3e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1120:	26 e0       	ldi	r18, 0x06	; 6
		str = udc_string_product_name;
    1122:	82 e2       	ldi	r24, 0x22	; 34
    1124:	90 e2       	ldi	r25, 0x20	; 32
    1126:	e1 cd       	rjmp	.-1086   	; 0xcea <udc_process_setup+0x13a>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1128:	24 e0       	ldi	r18, 0x04	; 4
		str = udc_get_string_serial_name();
    112a:	8d ea       	ldi	r24, 0xAD	; 173
    112c:	90 e2       	ldi	r25, 0x20	; 32
    112e:	dd cd       	rjmp	.-1094   	; 0xcea <udc_process_setup+0x13a>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1130:	80 2f       	mov	r24, r16
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	08 95       	ret

00001140 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    1140:	cf 92       	push	r12
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	ec 01       	movw	r28, r24
    1152:	6a 01       	movw	r12, r20
    1154:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    1156:	db 01       	movw	r26, r22
    1158:	ca 01       	movw	r24, r20
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	a1 09       	sbc	r26, r1
    115e:	b1 09       	sbc	r27, r1
    1160:	bc 01       	movw	r22, r24
    1162:	cd 01       	movw	r24, r26
    1164:	60 0f       	add	r22, r16
    1166:	71 1f       	adc	r23, r17
    1168:	82 1f       	adc	r24, r18
    116a:	93 1f       	adc	r25, r19
    116c:	a7 01       	movw	r20, r14
    116e:	96 01       	movw	r18, r12
    1170:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__udivmodsi4>

	if (divisor > 128) {
    1174:	21 38       	cpi	r18, 0x81	; 129
    1176:	31 05       	cpc	r19, r1
    1178:	41 05       	cpc	r20, r1
    117a:	51 05       	cpc	r21, r1
    117c:	f8 f4       	brcc	.+62     	; 0x11bc <spi_xmega_set_baud_div+0x7c>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    117e:	21 34       	cpi	r18, 0x41	; 65
    1180:	60 f4       	brcc	.+24     	; 0x119a <spi_xmega_set_baud_div+0x5a>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    1182:	21 32       	cpi	r18, 0x21	; 33
    1184:	60 f4       	brcc	.+24     	; 0x119e <spi_xmega_set_baud_div+0x5e>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    1186:	21 31       	cpi	r18, 0x11	; 17
    1188:	60 f4       	brcc	.+24     	; 0x11a2 <spi_xmega_set_baud_div+0x62>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    118a:	29 30       	cpi	r18, 0x09	; 9
    118c:	60 f4       	brcc	.+24     	; 0x11a6 <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    118e:	25 30       	cpi	r18, 0x05	; 5
    1190:	60 f4       	brcc	.+24     	; 0x11aa <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    1192:	23 30       	cpi	r18, 0x03	; 3
    1194:	60 f0       	brcs	.+24     	; 0x11ae <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_PRESCALER_DIV4_gc;
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0b c0       	rjmp	.+22     	; 0x11b0 <spi_xmega_set_baud_div+0x70>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    119a:	93 e0       	ldi	r25, 0x03	; 3
    119c:	09 c0       	rjmp	.+18     	; 0x11b0 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	07 c0       	rjmp	.+14     	; 0x11b0 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    11a2:	92 e8       	ldi	r25, 0x82	; 130
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    11aa:	91 e8       	ldi	r25, 0x81	; 129
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    11ae:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    11b0:	88 81       	ld	r24, Y
    11b2:	8c 77       	andi	r24, 0x7C	; 124
    11b4:	89 2b       	or	r24, r25
    11b6:	88 83       	st	Y, r24

	return 1;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <spi_xmega_set_baud_div+0x7e>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    11bc:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	df 90       	pop	r13
    11cc:	cf 90       	pop	r12
    11ce:	08 95       	ret

000011d0 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    11d4:	e0 91 04 22 	lds	r30, 0x2204
    11d8:	f0 91 05 22 	lds	r31, 0x2205
    11dc:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    11de:	83 ff       	sbrs	r24, 3
    11e0:	08 c0       	rjmp	.+16     	; 0x11f2 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    11e2:	88 60       	ori	r24, 0x08	; 8
    11e4:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    11ea:	86 ef       	ldi	r24, 0xF6	; 246
    11ec:	80 93 0e 22 	sts	0x220E, r24
    11f0:	89 c0       	rjmp	.+274    	; 0x1304 <twim_interrupt_handler+0x134>
    11f2:	98 2f       	mov	r25, r24
    11f4:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    11f6:	31 f0       	breq	.+12     	; 0x1204 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    11fc:	8f ef       	ldi	r24, 0xFF	; 255
    11fe:	80 93 0e 22 	sts	0x220E, r24
    1202:	80 c0       	rjmp	.+256    	; 0x1304 <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1204:	86 ff       	sbrs	r24, 6
    1206:	45 c0       	rjmp	.+138    	; 0x1292 <twim_interrupt_handler+0xc2>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1208:	a0 91 06 22 	lds	r26, 0x2206
    120c:	b0 91 07 22 	lds	r27, 0x2207

	if (transfer.addr_count < pkg->addr_length) {
    1210:	80 91 08 22 	lds	r24, 0x2208
    1214:	90 91 09 22 	lds	r25, 0x2209
    1218:	14 96       	adiw	r26, 0x04	; 4
    121a:	2d 91       	ld	r18, X+
    121c:	3c 91       	ld	r19, X
    121e:	15 97       	sbiw	r26, 0x05	; 5
    1220:	82 17       	cp	r24, r18
    1222:	93 07       	cpc	r25, r19
    1224:	6c f4       	brge	.+26     	; 0x1240 <twim_interrupt_handler+0x70>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1226:	9c 01       	movw	r18, r24
    1228:	2f 5f       	subi	r18, 0xFF	; 255
    122a:	3f 4f       	sbci	r19, 0xFF	; 255
    122c:	20 93 08 22 	sts	0x2208, r18
    1230:	30 93 09 22 	sts	0x2209, r19
    1234:	a8 0f       	add	r26, r24
    1236:	b9 1f       	adc	r27, r25
    1238:	11 96       	adiw	r26, 0x01	; 1
    123a:	8c 91       	ld	r24, X
    123c:	87 83       	std	Z+7, r24	; 0x07
    123e:	62 c0       	rjmp	.+196    	; 0x1304 <twim_interrupt_handler+0x134>

	} else if (transfer.data_count < pkg->length) {
    1240:	80 91 0a 22 	lds	r24, 0x220A
    1244:	90 91 0b 22 	lds	r25, 0x220B
    1248:	18 96       	adiw	r26, 0x08	; 8
    124a:	2d 91       	ld	r18, X+
    124c:	3c 91       	ld	r19, X
    124e:	19 97       	sbiw	r26, 0x09	; 9
    1250:	82 17       	cp	r24, r18
    1252:	93 07       	cpc	r25, r19
    1254:	c8 f4       	brcc	.+50     	; 0x1288 <twim_interrupt_handler+0xb8>

		if (transfer.read) {
    1256:	20 91 0c 22 	lds	r18, 0x220C
    125a:	22 23       	and	r18, r18
    125c:	21 f0       	breq	.+8      	; 0x1266 <twim_interrupt_handler+0x96>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    125e:	86 81       	ldd	r24, Z+6	; 0x06
    1260:	81 60       	ori	r24, 0x01	; 1
    1262:	86 83       	std	Z+6, r24	; 0x06
    1264:	4f c0       	rjmp	.+158    	; 0x1304 <twim_interrupt_handler+0x134>

		} else {
			const uint8_t * const data = pkg->buffer;
    1266:	16 96       	adiw	r26, 0x06	; 6
    1268:	2d 91       	ld	r18, X+
    126a:	3c 91       	ld	r19, X
    126c:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    126e:	ac 01       	movw	r20, r24
    1270:	4f 5f       	subi	r20, 0xFF	; 255
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	40 93 0a 22 	sts	0x220A, r20
    1278:	50 93 0b 22 	sts	0x220B, r21
    127c:	d9 01       	movw	r26, r18
    127e:	a8 0f       	add	r26, r24
    1280:	b9 1f       	adc	r27, r25
    1282:	8c 91       	ld	r24, X
    1284:	87 83       	std	Z+7, r24	; 0x07
    1286:	3e c0       	rjmp	.+124    	; 0x1304 <twim_interrupt_handler+0x134>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    128c:	10 92 0e 22 	sts	0x220E, r1
    1290:	39 c0       	rjmp	.+114    	; 0x1304 <twim_interrupt_handler+0x134>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1292:	88 23       	and	r24, r24
    1294:	a4 f5       	brge	.+104    	; 0x12fe <twim_interrupt_handler+0x12e>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1296:	a0 91 06 22 	lds	r26, 0x2206
    129a:	b0 91 07 22 	lds	r27, 0x2207

	if (transfer.data_count < pkg->length) {
    129e:	80 91 0a 22 	lds	r24, 0x220A
    12a2:	90 91 0b 22 	lds	r25, 0x220B
    12a6:	18 96       	adiw	r26, 0x08	; 8
    12a8:	2d 91       	ld	r18, X+
    12aa:	3c 91       	ld	r19, X
    12ac:	19 97       	sbiw	r26, 0x09	; 9
    12ae:	82 17       	cp	r24, r18
    12b0:	93 07       	cpc	r25, r19
    12b2:	f8 f4       	brcc	.+62     	; 0x12f2 <twim_interrupt_handler+0x122>

		uint8_t * const data = pkg->buffer;
    12b4:	16 96       	adiw	r26, 0x06	; 6
    12b6:	4d 91       	ld	r20, X+
    12b8:	5c 91       	ld	r21, X
    12ba:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    12bc:	9c 01       	movw	r18, r24
    12be:	2f 5f       	subi	r18, 0xFF	; 255
    12c0:	3f 4f       	sbci	r19, 0xFF	; 255
    12c2:	20 93 0a 22 	sts	0x220A, r18
    12c6:	30 93 0b 22 	sts	0x220B, r19
    12ca:	67 81       	ldd	r22, Z+7	; 0x07
    12cc:	ea 01       	movw	r28, r20
    12ce:	c8 0f       	add	r28, r24
    12d0:	d9 1f       	adc	r29, r25
    12d2:	68 83       	st	Y, r22

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    12d4:	18 96       	adiw	r26, 0x08	; 8
    12d6:	8d 91       	ld	r24, X+
    12d8:	9c 91       	ld	r25, X
    12da:	19 97       	sbiw	r26, 0x09	; 9
    12dc:	28 17       	cp	r18, r24
    12de:	39 07       	cpc	r19, r25
    12e0:	18 f4       	brcc	.+6      	; 0x12e8 <twim_interrupt_handler+0x118>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	83 83       	std	Z+3, r24	; 0x03
    12e6:	0e c0       	rjmp	.+28     	; 0x1304 <twim_interrupt_handler+0x134>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    12e8:	87 e0       	ldi	r24, 0x07	; 7
    12ea:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    12ec:	10 92 0e 22 	sts	0x220E, r1
    12f0:	09 c0       	rjmp	.+18     	; 0x1304 <twim_interrupt_handler+0x134>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    12f2:	83 e0       	ldi	r24, 0x03	; 3
    12f4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    12f6:	89 ef       	ldi	r24, 0xF9	; 249
    12f8:	80 93 0e 22 	sts	0x220E, r24
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <twim_interrupt_handler+0x134>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    12fe:	8b ef       	ldi	r24, 0xFB	; 251
    1300:	80 93 0e 22 	sts	0x220E, r24
	}
}
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	08 95       	ret

0000130a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	2f 93       	push	r18
    1316:	3f 93       	push	r19
    1318:	4f 93       	push	r20
    131a:	5f 93       	push	r21
    131c:	6f 93       	push	r22
    131e:	7f 93       	push	r23
    1320:	8f 93       	push	r24
    1322:	9f 93       	push	r25
    1324:	af 93       	push	r26
    1326:	bf 93       	push	r27
    1328:	ef 93       	push	r30
    132a:	ff 93       	push	r31
    132c:	51 df       	rcall	.-350    	; 0x11d0 <twim_interrupt_handler>
    132e:	ff 91       	pop	r31
    1330:	ef 91       	pop	r30
    1332:	bf 91       	pop	r27
    1334:	af 91       	pop	r26
    1336:	9f 91       	pop	r25
    1338:	8f 91       	pop	r24
    133a:	7f 91       	pop	r23
    133c:	6f 91       	pop	r22
    133e:	5f 91       	pop	r21
    1340:	4f 91       	pop	r20
    1342:	3f 91       	pop	r19
    1344:	2f 91       	pop	r18
    1346:	0f 90       	pop	r0
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	0f 90       	pop	r0
    134c:	1f 90       	pop	r1
    134e:	18 95       	reti

00001350 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1350:	1f 92       	push	r1
    1352:	0f 92       	push	r0
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	0f 92       	push	r0
    1358:	11 24       	eor	r1, r1
    135a:	2f 93       	push	r18
    135c:	3f 93       	push	r19
    135e:	4f 93       	push	r20
    1360:	5f 93       	push	r21
    1362:	6f 93       	push	r22
    1364:	7f 93       	push	r23
    1366:	8f 93       	push	r24
    1368:	9f 93       	push	r25
    136a:	af 93       	push	r26
    136c:	bf 93       	push	r27
    136e:	ef 93       	push	r30
    1370:	ff 93       	push	r31
    1372:	2e df       	rcall	.-420    	; 0x11d0 <twim_interrupt_handler>
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	7f 91       	pop	r23
    1382:	6f 91       	pop	r22
    1384:	5f 91       	pop	r21
    1386:	4f 91       	pop	r20
    1388:	3f 91       	pop	r19
    138a:	2f 91       	pop	r18
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	1f 90       	pop	r1
    1394:	18 95       	reti

00001396 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1396:	4f 92       	push	r4
    1398:	5f 92       	push	r5
    139a:	6f 92       	push	r6
    139c:	7f 92       	push	r7
    139e:	8f 92       	push	r8
    13a0:	9f 92       	push	r9
    13a2:	af 92       	push	r10
    13a4:	bf 92       	push	r11
    13a6:	cf 92       	push	r12
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	ec 01       	movw	r28, r24
    13b8:	4a 01       	movw	r8, r20
    13ba:	5b 01       	movw	r10, r22
    13bc:	28 01       	movw	r4, r16
    13be:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    13c0:	d9 01       	movw	r26, r18
    13c2:	c8 01       	movw	r24, r16
    13c4:	68 94       	set
    13c6:	12 f8       	bld	r1, 2
    13c8:	b6 95       	lsr	r27
    13ca:	a7 95       	ror	r26
    13cc:	97 95       	ror	r25
    13ce:	87 95       	ror	r24
    13d0:	16 94       	lsr	r1
    13d2:	d1 f7       	brne	.-12     	; 0x13c8 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    13d4:	b9 01       	movw	r22, r18
    13d6:	a8 01       	movw	r20, r16
    13d8:	03 2e       	mov	r0, r19
    13da:	36 e1       	ldi	r19, 0x16	; 22
    13dc:	76 95       	lsr	r23
    13de:	67 95       	ror	r22
    13e0:	57 95       	ror	r21
    13e2:	47 95       	ror	r20
    13e4:	3a 95       	dec	r19
    13e6:	d1 f7       	brne	.-12     	; 0x13dc <usart_set_baudrate+0x46>
    13e8:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    13ea:	2c 81       	ldd	r18, Y+4	; 0x04
    13ec:	22 fd       	sbrc	r18, 2
    13ee:	08 c0       	rjmp	.+16     	; 0x1400 <usart_set_baudrate+0x6a>
		max_rate /= 2;
    13f0:	b6 95       	lsr	r27
    13f2:	a7 95       	ror	r26
    13f4:	97 95       	ror	r25
    13f6:	87 95       	ror	r24
		min_rate /= 2;
    13f8:	76 95       	lsr	r23
    13fa:	67 95       	ror	r22
    13fc:	57 95       	ror	r21
    13fe:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1400:	88 15       	cp	r24, r8
    1402:	99 05       	cpc	r25, r9
    1404:	aa 05       	cpc	r26, r10
    1406:	bb 05       	cpc	r27, r11
    1408:	08 f4       	brcc	.+2      	; 0x140c <usart_set_baudrate+0x76>
    140a:	a6 c0       	rjmp	.+332    	; 0x1558 <usart_set_baudrate+0x1c2>
    140c:	84 16       	cp	r8, r20
    140e:	95 06       	cpc	r9, r21
    1410:	a6 06       	cpc	r10, r22
    1412:	b7 06       	cpc	r11, r23
    1414:	08 f4       	brcc	.+2      	; 0x1418 <usart_set_baudrate+0x82>
    1416:	a2 c0       	rjmp	.+324    	; 0x155c <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1418:	8c 81       	ldd	r24, Y+4	; 0x04
    141a:	82 fd       	sbrc	r24, 2
    141c:	04 c0       	rjmp	.+8      	; 0x1426 <usart_set_baudrate+0x90>
		baud *= 2;
    141e:	88 0c       	add	r8, r8
    1420:	99 1c       	adc	r9, r9
    1422:	aa 1c       	adc	r10, r10
    1424:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1426:	c3 01       	movw	r24, r6
    1428:	b2 01       	movw	r22, r4
    142a:	a5 01       	movw	r20, r10
    142c:	94 01       	movw	r18, r8
    142e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1432:	2f 3f       	cpi	r18, 0xFF	; 255
    1434:	31 05       	cpc	r19, r1
    1436:	41 05       	cpc	r20, r1
    1438:	51 05       	cpc	r21, r1
    143a:	08 f4       	brcc	.+2      	; 0x143e <usart_set_baudrate+0xa8>
    143c:	91 c0       	rjmp	.+290    	; 0x1560 <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    143e:	c1 2c       	mov	r12, r1
    1440:	d1 2c       	mov	r13, r1
    1442:	76 01       	movw	r14, r12
    1444:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1446:	19 ef       	ldi	r17, 0xF9	; 249
    1448:	05 c0       	rjmp	.+10     	; 0x1454 <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    144a:	2c 15       	cp	r18, r12
    144c:	3d 05       	cpc	r19, r13
    144e:	4e 05       	cpc	r20, r14
    1450:	5f 05       	cpc	r21, r15
    1452:	68 f0       	brcs	.+26     	; 0x146e <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    1454:	cc 0c       	add	r12, r12
    1456:	dd 1c       	adc	r13, r13
    1458:	ee 1c       	adc	r14, r14
    145a:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    145c:	1d 3f       	cpi	r17, 0xFD	; 253
    145e:	14 f4       	brge	.+4      	; 0x1464 <usart_set_baudrate+0xce>
			limit |= 1;
    1460:	68 94       	set
    1462:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1464:	1f 5f       	subi	r17, 0xFF	; 255
    1466:	17 30       	cpi	r17, 0x07	; 7
    1468:	81 f7       	brne	.-32     	; 0x144a <usart_set_baudrate+0xb4>
    146a:	21 2f       	mov	r18, r17
    146c:	50 c0       	rjmp	.+160    	; 0x150e <usart_set_baudrate+0x178>
    146e:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1470:	11 23       	and	r17, r17
    1472:	0c f0       	brlt	.+2      	; 0x1476 <usart_set_baudrate+0xe0>
    1474:	4c c0       	rjmp	.+152    	; 0x150e <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1476:	d5 01       	movw	r26, r10
    1478:	c4 01       	movw	r24, r8
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	aa 1f       	adc	r26, r26
    1480:	bb 1f       	adc	r27, r27
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	aa 1f       	adc	r26, r26
    1488:	bb 1f       	adc	r27, r27
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	aa 1f       	adc	r26, r26
    1490:	bb 1f       	adc	r27, r27
    1492:	48 1a       	sub	r4, r24
    1494:	59 0a       	sbc	r5, r25
    1496:	6a 0a       	sbc	r6, r26
    1498:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    149a:	1e 3f       	cpi	r17, 0xFE	; 254
    149c:	f4 f4       	brge	.+60     	; 0x14da <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    149e:	6d ef       	ldi	r22, 0xFD	; 253
    14a0:	7f ef       	ldi	r23, 0xFF	; 255
    14a2:	61 1b       	sub	r22, r17
    14a4:	71 09       	sbc	r23, r1
    14a6:	17 fd       	sbrc	r17, 7
    14a8:	73 95       	inc	r23
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <usart_set_baudrate+0x11e>
    14ac:	44 0c       	add	r4, r4
    14ae:	55 1c       	adc	r5, r5
    14b0:	66 1c       	adc	r6, r6
    14b2:	77 1c       	adc	r7, r7
    14b4:	6a 95       	dec	r22
    14b6:	d2 f7       	brpl	.-12     	; 0x14ac <usart_set_baudrate+0x116>
    14b8:	d5 01       	movw	r26, r10
    14ba:	c4 01       	movw	r24, r8
    14bc:	b6 95       	lsr	r27
    14be:	a7 95       	ror	r26
    14c0:	97 95       	ror	r25
    14c2:	87 95       	ror	r24
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	64 0d       	add	r22, r4
    14ca:	75 1d       	adc	r23, r5
    14cc:	86 1d       	adc	r24, r6
    14ce:	97 1d       	adc	r25, r7
    14d0:	a5 01       	movw	r20, r10
    14d2:	94 01       	movw	r18, r8
    14d4:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__udivmodsi4>
    14d8:	36 c0       	rjmp	.+108    	; 0x1546 <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
    14da:	23 e0       	ldi	r18, 0x03	; 3
    14dc:	21 0f       	add	r18, r17
    14de:	d5 01       	movw	r26, r10
    14e0:	c4 01       	movw	r24, r8
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <usart_set_baudrate+0x156>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	aa 1f       	adc	r26, r26
    14ea:	bb 1f       	adc	r27, r27
    14ec:	2a 95       	dec	r18
    14ee:	d2 f7       	brpl	.-12     	; 0x14e4 <usart_set_baudrate+0x14e>
    14f0:	9c 01       	movw	r18, r24
    14f2:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    14f4:	b6 95       	lsr	r27
    14f6:	a7 95       	ror	r26
    14f8:	97 95       	ror	r25
    14fa:	87 95       	ror	r24
    14fc:	bc 01       	movw	r22, r24
    14fe:	cd 01       	movw	r24, r26
    1500:	64 0d       	add	r22, r4
    1502:	75 1d       	adc	r23, r5
    1504:	86 1d       	adc	r24, r6
    1506:	97 1d       	adc	r25, r7
    1508:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__udivmodsi4>
    150c:	1c c0       	rjmp	.+56     	; 0x1546 <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    150e:	2d 5f       	subi	r18, 0xFD	; 253
    1510:	d5 01       	movw	r26, r10
    1512:	c4 01       	movw	r24, r8
    1514:	04 c0       	rjmp	.+8      	; 0x151e <usart_set_baudrate+0x188>
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	aa 1f       	adc	r26, r26
    151c:	bb 1f       	adc	r27, r27
    151e:	2a 95       	dec	r18
    1520:	d2 f7       	brpl	.-12     	; 0x1516 <usart_set_baudrate+0x180>
    1522:	9c 01       	movw	r18, r24
    1524:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1526:	b6 95       	lsr	r27
    1528:	a7 95       	ror	r26
    152a:	97 95       	ror	r25
    152c:	87 95       	ror	r24
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	64 0d       	add	r22, r4
    1534:	75 1d       	adc	r23, r5
    1536:	86 1d       	adc	r24, r6
    1538:	97 1d       	adc	r25, r7
    153a:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__udivmodsi4>
    153e:	21 50       	subi	r18, 0x01	; 1
    1540:	31 09       	sbc	r19, r1
    1542:	41 09       	sbc	r20, r1
    1544:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1546:	83 2f       	mov	r24, r19
    1548:	8f 70       	andi	r24, 0x0F	; 15
    154a:	12 95       	swap	r17
    154c:	10 7f       	andi	r17, 0xF0	; 240
    154e:	18 2b       	or	r17, r24
    1550:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1552:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	18 c0       	rjmp	.+48     	; 0x1588 <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	16 c0       	rjmp	.+44     	; 0x1588 <usart_set_baudrate+0x1f2>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1560:	d5 01       	movw	r26, r10
    1562:	c4 01       	movw	r24, r8
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	aa 1f       	adc	r26, r26
    156a:	bb 1f       	adc	r27, r27
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	aa 1f       	adc	r26, r26
    1572:	bb 1f       	adc	r27, r27
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	aa 1f       	adc	r26, r26
    157a:	bb 1f       	adc	r27, r27
    157c:	48 1a       	sub	r4, r24
    157e:	59 0a       	sbc	r5, r25
    1580:	6a 0a       	sbc	r6, r26
    1582:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1584:	19 ef       	ldi	r17, 0xF9	; 249
    1586:	8b cf       	rjmp	.-234    	; 0x149e <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	bf 90       	pop	r11
    159a:	af 90       	pop	r10
    159c:	9f 90       	pop	r9
    159e:	8f 90       	pop	r8
    15a0:	7f 90       	pop	r7
    15a2:	6f 90       	pop	r6
    15a4:	5f 90       	pop	r5
    15a6:	4f 90       	pop	r4
    15a8:	08 95       	ret

000015aa <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	ec 01       	movw	r28, r24
    15b4:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	09 f4       	brne	.+2      	; 0x15bc <usart_init_rs232+0x12>
    15ba:	be c0       	rjmp	.+380    	; 0x1738 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    15bc:	80 3c       	cpi	r24, 0xC0	; 192
    15be:	91 05       	cpc	r25, r1
    15c0:	21 f4       	brne	.+8      	; 0x15ca <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    15c2:	60 e1       	ldi	r22, 0x10	; 16
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	af d7       	rcall	.+3934   	; 0x2526 <sysclk_enable_module>
    15c8:	b7 c0       	rjmp	.+366    	; 0x1738 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    15ca:	c1 15       	cp	r28, r1
    15cc:	84 e0       	ldi	r24, 0x04	; 4
    15ce:	d8 07       	cpc	r29, r24
    15d0:	21 f4       	brne	.+8      	; 0x15da <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    15d2:	64 e0       	ldi	r22, 0x04	; 4
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	a7 d7       	rcall	.+3918   	; 0x2526 <sysclk_enable_module>
    15d8:	af c0       	rjmp	.+350    	; 0x1738 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    15da:	c0 38       	cpi	r28, 0x80	; 128
    15dc:	e1 e0       	ldi	r30, 0x01	; 1
    15de:	de 07       	cpc	r29, r30
    15e0:	21 f4       	brne	.+8      	; 0x15ea <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    15e2:	62 e0       	ldi	r22, 0x02	; 2
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	9f d7       	rcall	.+3902   	; 0x2526 <sysclk_enable_module>
    15e8:	a7 c0       	rjmp	.+334    	; 0x1738 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    15ea:	c1 15       	cp	r28, r1
    15ec:	f1 e0       	ldi	r31, 0x01	; 1
    15ee:	df 07       	cpc	r29, r31
    15f0:	21 f4       	brne	.+8      	; 0x15fa <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    15f2:	61 e0       	ldi	r22, 0x01	; 1
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	97 d7       	rcall	.+3886   	; 0x2526 <sysclk_enable_module>
    15f8:	9f c0       	rjmp	.+318    	; 0x1738 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    15fa:	c0 38       	cpi	r28, 0x80	; 128
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	d8 07       	cpc	r29, r24
    1600:	21 f4       	brne	.+8      	; 0x160a <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	8f d7       	rcall	.+3870   	; 0x2526 <sysclk_enable_module>
    1608:	97 c0       	rjmp	.+302    	; 0x1738 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    160a:	c1 15       	cp	r28, r1
    160c:	e2 e0       	ldi	r30, 0x02	; 2
    160e:	de 07       	cpc	r29, r30
    1610:	21 f4       	brne	.+8      	; 0x161a <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1612:	62 e0       	ldi	r22, 0x02	; 2
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	87 d7       	rcall	.+3854   	; 0x2526 <sysclk_enable_module>
    1618:	8f c0       	rjmp	.+286    	; 0x1738 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    161a:	c0 32       	cpi	r28, 0x20	; 32
    161c:	f3 e0       	ldi	r31, 0x03	; 3
    161e:	df 07       	cpc	r29, r31
    1620:	21 f4       	brne	.+8      	; 0x162a <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1622:	64 e0       	ldi	r22, 0x04	; 4
    1624:	82 e0       	ldi	r24, 0x02	; 2
    1626:	7f d7       	rcall	.+3838   	; 0x2526 <sysclk_enable_module>
    1628:	87 c0       	rjmp	.+270    	; 0x1738 <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    162a:	c1 15       	cp	r28, r1
    162c:	88 e0       	ldi	r24, 0x08	; 8
    162e:	d8 07       	cpc	r29, r24
    1630:	21 f4       	brne	.+8      	; 0x163a <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1632:	61 e0       	ldi	r22, 0x01	; 1
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	77 d7       	rcall	.+3822   	; 0x2526 <sysclk_enable_module>
    1638:	7f c0       	rjmp	.+254    	; 0x1738 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    163a:	c1 15       	cp	r28, r1
    163c:	e9 e0       	ldi	r30, 0x09	; 9
    163e:	de 07       	cpc	r29, r30
    1640:	21 f4       	brne	.+8      	; 0x164a <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	84 e0       	ldi	r24, 0x04	; 4
    1646:	6f d7       	rcall	.+3806   	; 0x2526 <sysclk_enable_module>
    1648:	77 c0       	rjmp	.+238    	; 0x1738 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    164a:	c1 15       	cp	r28, r1
    164c:	fa e0       	ldi	r31, 0x0A	; 10
    164e:	df 07       	cpc	r29, r31
    1650:	21 f4       	brne	.+8      	; 0x165a <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	85 e0       	ldi	r24, 0x05	; 5
    1656:	67 d7       	rcall	.+3790   	; 0x2526 <sysclk_enable_module>
    1658:	6f c0       	rjmp	.+222    	; 0x1738 <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    165a:	c0 34       	cpi	r28, 0x40	; 64
    165c:	88 e0       	ldi	r24, 0x08	; 8
    165e:	d8 07       	cpc	r29, r24
    1660:	21 f4       	brne	.+8      	; 0x166a <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1662:	62 e0       	ldi	r22, 0x02	; 2
    1664:	83 e0       	ldi	r24, 0x03	; 3
    1666:	5f d7       	rcall	.+3774   	; 0x2526 <sysclk_enable_module>
    1668:	67 c0       	rjmp	.+206    	; 0x1738 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    166a:	c0 34       	cpi	r28, 0x40	; 64
    166c:	e9 e0       	ldi	r30, 0x09	; 9
    166e:	de 07       	cpc	r29, r30
    1670:	21 f4       	brne	.+8      	; 0x167a <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1672:	62 e0       	ldi	r22, 0x02	; 2
    1674:	84 e0       	ldi	r24, 0x04	; 4
    1676:	57 d7       	rcall	.+3758   	; 0x2526 <sysclk_enable_module>
    1678:	5f c0       	rjmp	.+190    	; 0x1738 <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    167a:	c0 39       	cpi	r28, 0x90	; 144
    167c:	f8 e0       	ldi	r31, 0x08	; 8
    167e:	df 07       	cpc	r29, r31
    1680:	21 f4       	brne	.+8      	; 0x168a <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1682:	64 e0       	ldi	r22, 0x04	; 4
    1684:	83 e0       	ldi	r24, 0x03	; 3
    1686:	4f d7       	rcall	.+3742   	; 0x2526 <sysclk_enable_module>
    1688:	57 c0       	rjmp	.+174    	; 0x1738 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    168a:	c0 39       	cpi	r28, 0x90	; 144
    168c:	89 e0       	ldi	r24, 0x09	; 9
    168e:	d8 07       	cpc	r29, r24
    1690:	21 f4       	brne	.+8      	; 0x169a <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1692:	64 e0       	ldi	r22, 0x04	; 4
    1694:	84 e0       	ldi	r24, 0x04	; 4
    1696:	47 d7       	rcall	.+3726   	; 0x2526 <sysclk_enable_module>
    1698:	4f c0       	rjmp	.+158    	; 0x1738 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    169a:	c0 39       	cpi	r28, 0x90	; 144
    169c:	ea e0       	ldi	r30, 0x0A	; 10
    169e:	de 07       	cpc	r29, r30
    16a0:	21 f4       	brne	.+8      	; 0x16aa <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    16a2:	64 e0       	ldi	r22, 0x04	; 4
    16a4:	85 e0       	ldi	r24, 0x05	; 5
    16a6:	3f d7       	rcall	.+3710   	; 0x2526 <sysclk_enable_module>
    16a8:	47 c0       	rjmp	.+142    	; 0x1738 <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    16aa:	c0 3c       	cpi	r28, 0xC0	; 192
    16ac:	f8 e0       	ldi	r31, 0x08	; 8
    16ae:	df 07       	cpc	r29, r31
    16b0:	21 f4       	brne	.+8      	; 0x16ba <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    16b2:	68 e0       	ldi	r22, 0x08	; 8
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	37 d7       	rcall	.+3694   	; 0x2526 <sysclk_enable_module>
    16b8:	3f c0       	rjmp	.+126    	; 0x1738 <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    16ba:	c0 3c       	cpi	r28, 0xC0	; 192
    16bc:	89 e0       	ldi	r24, 0x09	; 9
    16be:	d8 07       	cpc	r29, r24
    16c0:	21 f4       	brne	.+8      	; 0x16ca <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    16c2:	68 e0       	ldi	r22, 0x08	; 8
    16c4:	84 e0       	ldi	r24, 0x04	; 4
    16c6:	2f d7       	rcall	.+3678   	; 0x2526 <sysclk_enable_module>
    16c8:	37 c0       	rjmp	.+110    	; 0x1738 <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    16ca:	c0 3a       	cpi	r28, 0xA0	; 160
    16cc:	e8 e0       	ldi	r30, 0x08	; 8
    16ce:	de 07       	cpc	r29, r30
    16d0:	21 f4       	brne	.+8      	; 0x16da <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    16d2:	60 e1       	ldi	r22, 0x10	; 16
    16d4:	83 e0       	ldi	r24, 0x03	; 3
    16d6:	27 d7       	rcall	.+3662   	; 0x2526 <sysclk_enable_module>
    16d8:	2f c0       	rjmp	.+94     	; 0x1738 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    16da:	c0 3a       	cpi	r28, 0xA0	; 160
    16dc:	f9 e0       	ldi	r31, 0x09	; 9
    16de:	df 07       	cpc	r29, r31
    16e0:	21 f4       	brne	.+8      	; 0x16ea <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    16e2:	60 e1       	ldi	r22, 0x10	; 16
    16e4:	84 e0       	ldi	r24, 0x04	; 4
    16e6:	1f d7       	rcall	.+3646   	; 0x2526 <sysclk_enable_module>
    16e8:	27 c0       	rjmp	.+78     	; 0x1738 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    16ea:	c0 3a       	cpi	r28, 0xA0	; 160
    16ec:	8a e0       	ldi	r24, 0x0A	; 10
    16ee:	d8 07       	cpc	r29, r24
    16f0:	21 f4       	brne	.+8      	; 0x16fa <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    16f2:	60 e1       	ldi	r22, 0x10	; 16
    16f4:	85 e0       	ldi	r24, 0x05	; 5
    16f6:	17 d7       	rcall	.+3630   	; 0x2526 <sysclk_enable_module>
    16f8:	1f c0       	rjmp	.+62     	; 0x1738 <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    16fa:	c0 3b       	cpi	r28, 0xB0	; 176
    16fc:	e8 e0       	ldi	r30, 0x08	; 8
    16fe:	de 07       	cpc	r29, r30
    1700:	21 f4       	brne	.+8      	; 0x170a <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1702:	60 e2       	ldi	r22, 0x20	; 32
    1704:	83 e0       	ldi	r24, 0x03	; 3
    1706:	0f d7       	rcall	.+3614   	; 0x2526 <sysclk_enable_module>
    1708:	17 c0       	rjmp	.+46     	; 0x1738 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    170a:	c0 3b       	cpi	r28, 0xB0	; 176
    170c:	f9 e0       	ldi	r31, 0x09	; 9
    170e:	df 07       	cpc	r29, r31
    1710:	21 f4       	brne	.+8      	; 0x171a <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1712:	60 e2       	ldi	r22, 0x20	; 32
    1714:	84 e0       	ldi	r24, 0x04	; 4
    1716:	07 d7       	rcall	.+3598   	; 0x2526 <sysclk_enable_module>
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    171a:	c0 38       	cpi	r28, 0x80	; 128
    171c:	84 e0       	ldi	r24, 0x04	; 4
    171e:	d8 07       	cpc	r29, r24
    1720:	21 f4       	brne	.+8      	; 0x172a <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1722:	60 e4       	ldi	r22, 0x40	; 64
    1724:	83 e0       	ldi	r24, 0x03	; 3
    1726:	ff d6       	rcall	.+3582   	; 0x2526 <sysclk_enable_module>
    1728:	07 c0       	rjmp	.+14     	; 0x1738 <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    172a:	c0 3a       	cpi	r28, 0xA0	; 160
    172c:	e4 e0       	ldi	r30, 0x04	; 4
    172e:	de 07       	cpc	r29, r30
    1730:	19 f4       	brne	.+6      	; 0x1738 <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1732:	60 e4       	ldi	r22, 0x40	; 64
    1734:	85 e0       	ldi	r24, 0x05	; 5
    1736:	f7 d6       	rcall	.+3566   	; 0x2526 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	8f 73       	andi	r24, 0x3F	; 63
    173c:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    173e:	f8 01       	movw	r30, r16
    1740:	94 81       	ldd	r25, Z+4	; 0x04
    1742:	85 81       	ldd	r24, Z+5	; 0x05
    1744:	89 2b       	or	r24, r25
    1746:	96 81       	ldd	r25, Z+6	; 0x06
    1748:	99 23       	and	r25, r25
    174a:	11 f0       	breq	.+4      	; 0x1750 <usart_init_rs232+0x1a6>
    174c:	98 e0       	ldi	r25, 0x08	; 8
    174e:	01 c0       	rjmp	.+2      	; 0x1752 <usart_init_rs232+0x1a8>
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	89 2b       	or	r24, r25
    1754:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1756:	f8 01       	movw	r30, r16
    1758:	40 81       	ld	r20, Z
    175a:	51 81       	ldd	r21, Z+1	; 0x01
    175c:	62 81       	ldd	r22, Z+2	; 0x02
    175e:	73 81       	ldd	r23, Z+3	; 0x03
    1760:	00 e0       	ldi	r16, 0x00	; 0
    1762:	1c e6       	ldi	r17, 0x6C	; 108
    1764:	2c ed       	ldi	r18, 0xDC	; 220
    1766:	32 e0       	ldi	r19, 0x02	; 2
    1768:	ce 01       	movw	r24, r28
    176a:	15 de       	rcall	.-982    	; 0x1396 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	98 60       	ori	r25, 0x08	; 8
    1770:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	90 61       	ori	r25, 0x10	; 16
    1776:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	08 95       	ret

00001782 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1782:	81 11       	cpse	r24, r1
    1784:	18 c0       	rjmp	.+48     	; 0x17b6 <udd_sleep_mode+0x34>
    1786:	90 91 3c 23 	lds	r25, 0x233C
    178a:	99 23       	and	r25, r25
    178c:	89 f0       	breq	.+34     	; 0x17b0 <udd_sleep_mode+0x2e>
    178e:	9f b7       	in	r25, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	ee e4       	ldi	r30, 0x4E	; 78
    1794:	f3 e2       	ldi	r31, 0x23	; 35
    1796:	20 81       	ld	r18, Z
    1798:	21 50       	subi	r18, 0x01	; 1
    179a:	20 83       	st	Z, r18
    179c:	9f bf       	out	0x3f, r25	; 63
    179e:	08 c0       	rjmp	.+16     	; 0x17b0 <udd_sleep_mode+0x2e>
    17a0:	9f b7       	in	r25, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	ee e4       	ldi	r30, 0x4E	; 78
    17a6:	f3 e2       	ldi	r31, 0x23	; 35
    17a8:	20 81       	ld	r18, Z
    17aa:	2f 5f       	subi	r18, 0xFF	; 255
    17ac:	20 83       	st	Z, r18
    17ae:	9f bf       	out	0x3f, r25	; 63
    17b0:	80 93 3c 23 	sts	0x233C, r24
    17b4:	08 95       	ret
    17b6:	90 91 3c 23 	lds	r25, 0x233C
    17ba:	99 23       	and	r25, r25
    17bc:	89 f3       	breq	.-30     	; 0x17a0 <udd_sleep_mode+0x1e>
    17be:	f8 cf       	rjmp	.-16     	; 0x17b0 <udd_sleep_mode+0x2e>

000017c0 <udd_ctrl_init>:
    17c0:	0f 93       	push	r16
    17c2:	e8 ec       	ldi	r30, 0xC8	; 200
    17c4:	f4 e0       	ldi	r31, 0x04	; 4
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 7d       	andi	r24, 0xDF	; 223
    17ca:	80 83       	st	Z, r24
    17cc:	80 81       	ld	r24, Z
    17ce:	8f 7d       	andi	r24, 0xDF	; 223
    17d0:	80 83       	st	Z, r24
    17d2:	e0 e1       	ldi	r30, 0x10	; 16
    17d4:	f3 e2       	ldi	r31, 0x23	; 35
    17d6:	02 e0       	ldi	r16, 0x02	; 2
    17d8:	05 93       	las	Z, r16
    17da:	10 92 12 23 	sts	0x2312, r1
    17de:	10 92 13 23 	sts	0x2313, r1
    17e2:	00 e2       	ldi	r16, 0x20	; 32
    17e4:	06 93       	lac	Z, r16
    17e6:	00 e4       	ldi	r16, 0x40	; 64
    17e8:	06 93       	lac	Z, r16
    17ea:	e8 e0       	ldi	r30, 0x08	; 8
    17ec:	f3 e2       	ldi	r31, 0x23	; 35
    17ee:	00 e2       	ldi	r16, 0x20	; 32
    17f0:	06 93       	lac	Z, r16
    17f2:	00 e4       	ldi	r16, 0x40	; 64
    17f4:	06 93       	lac	Z, r16
    17f6:	10 92 49 23 	sts	0x2349, r1
    17fa:	10 92 4a 23 	sts	0x234A, r1
    17fe:	10 92 4b 23 	sts	0x234B, r1
    1802:	10 92 4c 23 	sts	0x234C, r1
    1806:	10 92 47 23 	sts	0x2347, r1
    180a:	10 92 48 23 	sts	0x2348, r1
    180e:	10 92 f8 22 	sts	0x22F8, r1
    1812:	0f 91       	pop	r16
    1814:	08 95       	ret

00001816 <udd_ctrl_stall_data>:
    1816:	0f 93       	push	r16
    1818:	85 e0       	ldi	r24, 0x05	; 5
    181a:	80 93 f8 22 	sts	0x22F8, r24
    181e:	e1 e1       	ldi	r30, 0x11	; 17
    1820:	f3 e2       	ldi	r31, 0x23	; 35
    1822:	04 e0       	ldi	r16, 0x04	; 4
    1824:	05 93       	las	Z, r16
    1826:	e9 e0       	ldi	r30, 0x09	; 9
    1828:	f3 e2       	ldi	r31, 0x23	; 35
    182a:	04 e0       	ldi	r16, 0x04	; 4
    182c:	05 93       	las	Z, r16
    182e:	0f 91       	pop	r16
    1830:	08 95       	ret

00001832 <udd_ctrl_send_zlp_in>:
    1832:	0f 93       	push	r16
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	80 93 f8 22 	sts	0x22F8, r24
    183a:	10 92 12 23 	sts	0x2312, r1
    183e:	10 92 13 23 	sts	0x2313, r1
    1842:	e0 e1       	ldi	r30, 0x10	; 16
    1844:	f3 e2       	ldi	r31, 0x23	; 35
    1846:	02 e0       	ldi	r16, 0x02	; 2
    1848:	06 93       	lac	Z, r16
    184a:	0f 91       	pop	r16
    184c:	08 95       	ret

0000184e <udd_ctrl_endofrequest>:
    184e:	e0 91 49 23 	lds	r30, 0x2349
    1852:	f0 91 4a 23 	lds	r31, 0x234A
    1856:	30 97       	sbiw	r30, 0x00	; 0
    1858:	09 f0       	breq	.+2      	; 0x185c <udd_ctrl_endofrequest+0xe>
    185a:	09 95       	icall
    185c:	08 95       	ret

0000185e <udd_ctrl_in_sent>:
    185e:	0f 93       	push	r16
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	80 91 f8 22 	lds	r24, 0x22F8
    1868:	83 30       	cpi	r24, 0x03	; 3
    186a:	19 f4       	brne	.+6      	; 0x1872 <udd_ctrl_in_sent+0x14>
    186c:	f0 df       	rcall	.-32     	; 0x184e <udd_ctrl_endofrequest>
    186e:	a8 df       	rcall	.-176    	; 0x17c0 <udd_ctrl_init>
    1870:	60 c0       	rjmp	.+192    	; 0x1932 <udd_ctrl_in_sent+0xd4>
    1872:	80 91 f4 22 	lds	r24, 0x22F4
    1876:	90 91 f5 22 	lds	r25, 0x22F5
    187a:	c0 91 47 23 	lds	r28, 0x2347
    187e:	d0 91 48 23 	lds	r29, 0x2348
    1882:	c8 1b       	sub	r28, r24
    1884:	d9 0b       	sbc	r29, r25
    1886:	71 f5       	brne	.+92     	; 0x18e4 <udd_ctrl_in_sent+0x86>
    1888:	20 91 f6 22 	lds	r18, 0x22F6
    188c:	30 91 f7 22 	lds	r19, 0x22F7
    1890:	82 0f       	add	r24, r18
    1892:	93 1f       	adc	r25, r19
    1894:	80 93 f6 22 	sts	0x22F6, r24
    1898:	90 93 f7 22 	sts	0x22F7, r25
    189c:	20 91 43 23 	lds	r18, 0x2343
    18a0:	30 91 44 23 	lds	r19, 0x2344
    18a4:	82 17       	cp	r24, r18
    18a6:	93 07       	cpc	r25, r19
    18a8:	21 f0       	breq	.+8      	; 0x18b2 <udd_ctrl_in_sent+0x54>
    18aa:	80 91 0f 22 	lds	r24, 0x220F
    18ae:	88 23       	and	r24, r24
    18b0:	41 f0       	breq	.+16     	; 0x18c2 <udd_ctrl_in_sent+0x64>
    18b2:	84 e0       	ldi	r24, 0x04	; 4
    18b4:	80 93 f8 22 	sts	0x22F8, r24
    18b8:	e8 e0       	ldi	r30, 0x08	; 8
    18ba:	f3 e2       	ldi	r31, 0x23	; 35
    18bc:	02 e0       	ldi	r16, 0x02	; 2
    18be:	06 93       	lac	Z, r16
    18c0:	38 c0       	rjmp	.+112    	; 0x1932 <udd_ctrl_in_sent+0xd4>
    18c2:	e0 91 4b 23 	lds	r30, 0x234B
    18c6:	f0 91 4c 23 	lds	r31, 0x234C
    18ca:	30 97       	sbiw	r30, 0x00	; 0
    18cc:	99 f0       	breq	.+38     	; 0x18f4 <udd_ctrl_in_sent+0x96>
    18ce:	09 95       	icall
    18d0:	88 23       	and	r24, r24
    18d2:	81 f0       	breq	.+32     	; 0x18f4 <udd_ctrl_in_sent+0x96>
    18d4:	10 92 f4 22 	sts	0x22F4, r1
    18d8:	10 92 f5 22 	sts	0x22F5, r1
    18dc:	c0 91 47 23 	lds	r28, 0x2347
    18e0:	d0 91 48 23 	lds	r29, 0x2348
    18e4:	c0 34       	cpi	r28, 0x40	; 64
    18e6:	d1 05       	cpc	r29, r1
    18e8:	28 f0       	brcs	.+10     	; 0x18f4 <udd_ctrl_in_sent+0x96>
    18ea:	10 92 0f 22 	sts	0x220F, r1
    18ee:	c0 e4       	ldi	r28, 0x40	; 64
    18f0:	d0 e0       	ldi	r29, 0x00	; 0
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <udd_ctrl_in_sent+0x9c>
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	80 93 0f 22 	sts	0x220F, r24
    18fa:	c0 93 12 23 	sts	0x2312, r28
    18fe:	d0 93 13 23 	sts	0x2313, r29
    1902:	80 91 f4 22 	lds	r24, 0x22F4
    1906:	90 91 f5 22 	lds	r25, 0x22F5
    190a:	20 91 45 23 	lds	r18, 0x2345
    190e:	30 91 46 23 	lds	r19, 0x2346
    1912:	28 0f       	add	r18, r24
    1914:	39 1f       	adc	r19, r25
    1916:	20 93 14 23 	sts	0x2314, r18
    191a:	30 93 15 23 	sts	0x2315, r19
    191e:	c8 0f       	add	r28, r24
    1920:	d9 1f       	adc	r29, r25
    1922:	c0 93 f4 22 	sts	0x22F4, r28
    1926:	d0 93 f5 22 	sts	0x22F5, r29
    192a:	e0 e1       	ldi	r30, 0x10	; 16
    192c:	f3 e2       	ldi	r31, 0x23	; 35
    192e:	02 e0       	ldi	r16, 0x02	; 2
    1930:	06 93       	lac	Z, r16
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	0f 91       	pop	r16
    1938:	08 95       	ret

0000193a <udd_ep_get_size>:
    193a:	fc 01       	movw	r30, r24
    193c:	81 81       	ldd	r24, Z+1	; 0x01
    193e:	87 70       	andi	r24, 0x07	; 7
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	fc 01       	movw	r30, r24
    1944:	31 97       	sbiw	r30, 0x01	; 1
    1946:	e7 30       	cpi	r30, 0x07	; 7
    1948:	f1 05       	cpc	r31, r1
    194a:	20 f4       	brcc	.+8      	; 0x1954 <udd_ep_get_size+0x1a>
    194c:	e2 50       	subi	r30, 0x02	; 2
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__tablejump2__>
    1954:	88 e0       	ldi	r24, 0x08	; 8
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	08 95       	ret
    195a:	80 e2       	ldi	r24, 0x20	; 32
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	08 95       	ret
    1960:	80 e4       	ldi	r24, 0x40	; 64
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	08 95       	ret
    1966:	80 e8       	ldi	r24, 0x80	; 128
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	08 95       	ret
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	91 e0       	ldi	r25, 0x01	; 1
    1970:	08 95       	ret
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	92 e0       	ldi	r25, 0x02	; 2
    1976:	08 95       	ret
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	93 e0       	ldi	r25, 0x03	; 3
    197c:	08 95       	ret
    197e:	80 e1       	ldi	r24, 0x10	; 16
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	08 95       	ret

00001984 <udd_ep_get_job>:
    1984:	28 2f       	mov	r18, r24
    1986:	2f 70       	andi	r18, 0x0F	; 15
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	22 0f       	add	r18, r18
    198c:	33 1f       	adc	r19, r19
    198e:	99 27       	eor	r25, r25
    1990:	87 fd       	sbrc	r24, 7
    1992:	90 95       	com	r25
    1994:	88 27       	eor	r24, r24
    1996:	99 0f       	add	r25, r25
    1998:	88 1f       	adc	r24, r24
    199a:	99 27       	eor	r25, r25
    199c:	82 0f       	add	r24, r18
    199e:	93 1f       	adc	r25, r19
    19a0:	02 97       	sbiw	r24, 0x02	; 2
    19a2:	9c 01       	movw	r18, r24
    19a4:	22 0f       	add	r18, r18
    19a6:	33 1f       	adc	r19, r19
    19a8:	22 0f       	add	r18, r18
    19aa:	33 1f       	adc	r19, r19
    19ac:	22 0f       	add	r18, r18
    19ae:	33 1f       	adc	r19, r19
    19b0:	82 0f       	add	r24, r18
    19b2:	93 1f       	adc	r25, r19
    19b4:	80 57       	subi	r24, 0x70	; 112
    19b6:	9d 4d       	sbci	r25, 0xDD	; 221
    19b8:	08 95       	ret

000019ba <udd_ctrl_interrupt_tc_setup>:
    19ba:	0f 93       	push	r16
    19bc:	cf 93       	push	r28
    19be:	80 91 cc 04 	lds	r24, 0x04CC
    19c2:	80 ff       	sbrs	r24, 0
    19c4:	62 c0       	rjmp	.+196    	; 0x1a8a <udd_ctrl_interrupt_tc_setup+0xd0>
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	80 93 cc 04 	sts	0x04CC, r24
    19cc:	e8 e0       	ldi	r30, 0x08	; 8
    19ce:	f3 e2       	ldi	r31, 0x23	; 35
    19d0:	00 e8       	ldi	r16, 0x80	; 128
    19d2:	06 93       	lac	Z, r16
    19d4:	e0 e1       	ldi	r30, 0x10	; 16
    19d6:	f3 e2       	ldi	r31, 0x23	; 35
    19d8:	00 e8       	ldi	r16, 0x80	; 128
    19da:	06 93       	lac	Z, r16
    19dc:	80 93 ca 04 	sts	0x04CA, r24
    19e0:	e8 e0       	ldi	r30, 0x08	; 8
    19e2:	f3 e2       	ldi	r31, 0x23	; 35
    19e4:	00 e1       	ldi	r16, 0x10	; 16
    19e6:	06 93       	lac	Z, r16
    19e8:	80 91 f8 22 	lds	r24, 0x22F8
    19ec:	88 23       	and	r24, r24
    19ee:	29 f0       	breq	.+10     	; 0x19fa <udd_ctrl_interrupt_tc_setup+0x40>
    19f0:	83 50       	subi	r24, 0x03	; 3
    19f2:	82 30       	cpi	r24, 0x02	; 2
    19f4:	08 f4       	brcc	.+2      	; 0x19f8 <udd_ctrl_interrupt_tc_setup+0x3e>
    19f6:	2b df       	rcall	.-426    	; 0x184e <udd_ctrl_endofrequest>
    19f8:	e3 de       	rcall	.-570    	; 0x17c0 <udd_ctrl_init>
    19fa:	80 91 0a 23 	lds	r24, 0x230A
    19fe:	90 91 0b 23 	lds	r25, 0x230B
    1a02:	08 97       	sbiw	r24, 0x08	; 8
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <udd_ctrl_interrupt_tc_setup+0x4e>
    1a06:	43 c0       	rjmp	.+134    	; 0x1a8e <udd_ctrl_interrupt_tc_setup+0xd4>
    1a08:	88 e0       	ldi	r24, 0x08	; 8
    1a0a:	e4 eb       	ldi	r30, 0xB4	; 180
    1a0c:	f2 e2       	ldi	r31, 0x22	; 34
    1a0e:	ad e3       	ldi	r26, 0x3D	; 61
    1a10:	b3 e2       	ldi	r27, 0x23	; 35
    1a12:	01 90       	ld	r0, Z+
    1a14:	0d 92       	st	X+, r0
    1a16:	8a 95       	dec	r24
    1a18:	e1 f7       	brne	.-8      	; 0x1a12 <udd_ctrl_interrupt_tc_setup+0x58>
    1a1a:	e8 ec       	ldi	r30, 0xC8	; 200
    1a1c:	f4 e0       	ldi	r31, 0x04	; 4
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 62       	ori	r24, 0x20	; 32
    1a22:	80 83       	st	Z, r24
    1a24:	80 81       	ld	r24, Z
    1a26:	80 62       	ori	r24, 0x20	; 32
    1a28:	80 83       	st	Z, r24
    1a2a:	c2 d8       	rcall	.-3708   	; 0xbb0 <udc_process_setup>
    1a2c:	c8 2f       	mov	r28, r24
    1a2e:	81 11       	cpse	r24, r1
    1a30:	03 c0       	rjmp	.+6      	; 0x1a38 <udd_ctrl_interrupt_tc_setup+0x7e>
    1a32:	f1 de       	rcall	.-542    	; 0x1816 <udd_ctrl_stall_data>
    1a34:	c1 e0       	ldi	r28, 0x01	; 1
    1a36:	2c c0       	rjmp	.+88     	; 0x1a90 <udd_ctrl_interrupt_tc_setup+0xd6>
    1a38:	80 91 3d 23 	lds	r24, 0x233D
    1a3c:	88 23       	and	r24, r24
    1a3e:	6c f4       	brge	.+26     	; 0x1a5a <udd_ctrl_interrupt_tc_setup+0xa0>
    1a40:	10 92 f6 22 	sts	0x22F6, r1
    1a44:	10 92 f7 22 	sts	0x22F7, r1
    1a48:	10 92 f4 22 	sts	0x22F4, r1
    1a4c:	10 92 f5 22 	sts	0x22F5, r1
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	80 93 f8 22 	sts	0x22F8, r24
    1a56:	03 df       	rcall	.-506    	; 0x185e <udd_ctrl_in_sent>
    1a58:	1b c0       	rjmp	.+54     	; 0x1a90 <udd_ctrl_interrupt_tc_setup+0xd6>
    1a5a:	20 91 43 23 	lds	r18, 0x2343
    1a5e:	30 91 44 23 	lds	r19, 0x2344
    1a62:	23 2b       	or	r18, r19
    1a64:	11 f4       	brne	.+4      	; 0x1a6a <udd_ctrl_interrupt_tc_setup+0xb0>
    1a66:	e5 de       	rcall	.-566    	; 0x1832 <udd_ctrl_send_zlp_in>
    1a68:	13 c0       	rjmp	.+38     	; 0x1a90 <udd_ctrl_interrupt_tc_setup+0xd6>
    1a6a:	10 92 f6 22 	sts	0x22F6, r1
    1a6e:	10 92 f7 22 	sts	0x22F7, r1
    1a72:	10 92 f4 22 	sts	0x22F4, r1
    1a76:	10 92 f5 22 	sts	0x22F5, r1
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	80 93 f8 22 	sts	0x22F8, r24
    1a80:	e8 e0       	ldi	r30, 0x08	; 8
    1a82:	f3 e2       	ldi	r31, 0x23	; 35
    1a84:	02 e0       	ldi	r16, 0x02	; 2
    1a86:	06 93       	lac	Z, r16
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <udd_ctrl_interrupt_tc_setup+0xd6>
    1a8a:	c0 e0       	ldi	r28, 0x00	; 0
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <udd_ctrl_interrupt_tc_setup+0xd6>
    1a8e:	c1 e0       	ldi	r28, 0x01	; 1
    1a90:	8c 2f       	mov	r24, r28
    1a92:	cf 91       	pop	r28
    1a94:	0f 91       	pop	r16
    1a96:	08 95       	ret

00001a98 <udd_ep_trans_complet>:
    1a98:	bf 92       	push	r11
    1a9a:	cf 92       	push	r12
    1a9c:	df 92       	push	r13
    1a9e:	ef 92       	push	r14
    1aa0:	ff 92       	push	r15
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	b8 2e       	mov	r11, r24
    1aac:	6b df       	rcall	.-298    	; 0x1984 <udd_ep_get_job>
    1aae:	ec 01       	movw	r28, r24
    1ab0:	1b 2d       	mov	r17, r11
    1ab2:	11 1f       	adc	r17, r17
    1ab4:	11 27       	eor	r17, r17
    1ab6:	11 1f       	adc	r17, r17
    1ab8:	8b 2d       	mov	r24, r11
    1aba:	8f 70       	andi	r24, 0x0F	; 15
    1abc:	e8 2e       	mov	r14, r24
    1abe:	f1 2c       	mov	r15, r1
    1ac0:	ee 0c       	add	r14, r14
    1ac2:	ff 1c       	adc	r15, r15
    1ac4:	e1 0e       	add	r14, r17
    1ac6:	f1 1c       	adc	r15, r1
    1ac8:	c7 01       	movw	r24, r14
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	9c 01       	movw	r18, r24
    1ad8:	28 5f       	subi	r18, 0xF8	; 248
    1ada:	3c 4d       	sbci	r19, 0xDC	; 220
    1adc:	79 01       	movw	r14, r18
    1ade:	c9 01       	movw	r24, r18
    1ae0:	2c df       	rcall	.-424    	; 0x193a <udd_ep_get_size>
    1ae2:	6c 01       	movw	r12, r24
    1ae4:	11 23       	and	r17, r17
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <udd_ep_trans_complet+0x52>
    1ae8:	5b c0       	rjmp	.+182    	; 0x1ba0 <udd_ep_trans_complet+0x108>
    1aea:	d7 01       	movw	r26, r14
    1aec:	16 96       	adiw	r26, 0x06	; 6
    1aee:	2d 91       	ld	r18, X+
    1af0:	3c 91       	ld	r19, X
    1af2:	17 97       	sbiw	r26, 0x07	; 7
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	28 0f       	add	r18, r24
    1afa:	39 1f       	adc	r19, r25
    1afc:	2d 83       	std	Y+5, r18	; 0x05
    1afe:	3e 83       	std	Y+6, r19	; 0x06
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	28 17       	cp	r18, r24
    1b06:	39 07       	cpc	r19, r25
    1b08:	c9 f1       	breq	.+114    	; 0x1b7c <udd_ep_trans_complet+0xe4>
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	e2 1b       	sub	r30, r18
    1b0e:	f3 0b       	sbc	r31, r19
    1b10:	9f 01       	movw	r18, r30
    1b12:	21 15       	cp	r18, r1
    1b14:	f4 e0       	ldi	r31, 0x04	; 4
    1b16:	3f 07       	cpc	r19, r31
    1b18:	40 f0       	brcs	.+16     	; 0x1b2a <udd_ep_trans_complet+0x92>
    1b1a:	2f ef       	ldi	r18, 0xFF	; 255
    1b1c:	33 e0       	ldi	r19, 0x03	; 3
    1b1e:	c9 01       	movw	r24, r18
    1b20:	b6 01       	movw	r22, r12
    1b22:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__udivmodhi4>
    1b26:	28 1b       	sub	r18, r24
    1b28:	39 0b       	sbc	r19, r25
    1b2a:	88 81       	ld	r24, Y
    1b2c:	81 ff       	sbrs	r24, 1
    1b2e:	0a c0       	rjmp	.+20     	; 0x1b44 <udd_ep_trans_complet+0xac>
    1b30:	c9 01       	movw	r24, r18
    1b32:	b6 01       	movw	r22, r12
    1b34:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__udivmodhi4>
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	89 2b       	or	r24, r25
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <udd_ep_trans_complet+0xa8>
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	94 2f       	mov	r25, r20
    1b42:	01 c0       	rjmp	.+2      	; 0x1b46 <udd_ep_trans_complet+0xae>
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	88 81       	ld	r24, Y
    1b48:	90 fb       	bst	r25, 0
    1b4a:	81 f9       	bld	r24, 1
    1b4c:	88 83       	st	Y, r24
    1b4e:	d7 01       	movw	r26, r14
    1b50:	16 96       	adiw	r26, 0x06	; 6
    1b52:	1d 92       	st	X+, r1
    1b54:	1c 92       	st	X, r1
    1b56:	17 97       	sbiw	r26, 0x07	; 7
    1b58:	12 96       	adiw	r26, 0x02	; 2
    1b5a:	2d 93       	st	X+, r18
    1b5c:	3c 93       	st	X, r19
    1b5e:	13 97       	sbiw	r26, 0x03	; 3
    1b60:	29 81       	ldd	r18, Y+1	; 0x01
    1b62:	3a 81       	ldd	r19, Y+2	; 0x02
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	82 0f       	add	r24, r18
    1b6a:	93 1f       	adc	r25, r19
    1b6c:	14 96       	adiw	r26, 0x04	; 4
    1b6e:	8d 93       	st	X+, r24
    1b70:	9c 93       	st	X, r25
    1b72:	15 97       	sbiw	r26, 0x05	; 5
    1b74:	f7 01       	movw	r30, r14
    1b76:	02 e0       	ldi	r16, 0x02	; 2
    1b78:	06 93       	lac	Z, r16
    1b7a:	95 c0       	rjmp	.+298    	; 0x1ca6 <udd_ep_trans_complet+0x20e>
    1b7c:	88 81       	ld	r24, Y
    1b7e:	81 ff       	sbrs	r24, 1
    1b80:	84 c0       	rjmp	.+264    	; 0x1c8a <udd_ep_trans_complet+0x1f2>
    1b82:	8d 7f       	andi	r24, 0xFD	; 253
    1b84:	88 83       	st	Y, r24
    1b86:	d7 01       	movw	r26, r14
    1b88:	16 96       	adiw	r26, 0x06	; 6
    1b8a:	1d 92       	st	X+, r1
    1b8c:	1c 92       	st	X, r1
    1b8e:	17 97       	sbiw	r26, 0x07	; 7
    1b90:	12 96       	adiw	r26, 0x02	; 2
    1b92:	1d 92       	st	X+, r1
    1b94:	1c 92       	st	X, r1
    1b96:	13 97       	sbiw	r26, 0x03	; 3
    1b98:	f7 01       	movw	r30, r14
    1b9a:	02 e0       	ldi	r16, 0x02	; 2
    1b9c:	06 93       	lac	Z, r16
    1b9e:	83 c0       	rjmp	.+262    	; 0x1ca6 <udd_ep_trans_complet+0x20e>
    1ba0:	d7 01       	movw	r26, r14
    1ba2:	12 96       	adiw	r26, 0x02	; 2
    1ba4:	0d 91       	ld	r16, X+
    1ba6:	1c 91       	ld	r17, X
    1ba8:	13 97       	sbiw	r26, 0x03	; 3
    1baa:	88 81       	ld	r24, Y
    1bac:	82 ff       	sbrs	r24, 2
    1bae:	14 c0       	rjmp	.+40     	; 0x1bd8 <udd_ep_trans_complet+0x140>
    1bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb4:	2d 81       	ldd	r18, Y+5	; 0x05
    1bb6:	3e 81       	ldd	r19, Y+6	; 0x06
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	b6 01       	movw	r22, r12
    1bbe:	f0 d7       	rcall	.+4064   	; 0x2ba0 <__udivmodhi4>
    1bc0:	b0 e4       	ldi	r27, 0x40	; 64
    1bc2:	bb 9e       	mul	r11, r27
    1bc4:	b0 01       	movw	r22, r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	60 53       	subi	r22, 0x30	; 48
    1bca:	7e 4d       	sbci	r23, 0xDE	; 222
    1bcc:	ac 01       	movw	r20, r24
    1bce:	cf 01       	movw	r24, r30
    1bd0:	82 0f       	add	r24, r18
    1bd2:	93 1f       	adc	r25, r19
    1bd4:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <memcpy>
    1bd8:	2d 81       	ldd	r18, Y+5	; 0x05
    1bda:	3e 81       	ldd	r19, Y+6	; 0x06
    1bdc:	20 0f       	add	r18, r16
    1bde:	31 1f       	adc	r19, r17
    1be0:	2d 83       	std	Y+5, r18	; 0x05
    1be2:	3e 83       	std	Y+6, r19	; 0x06
    1be4:	eb 81       	ldd	r30, Y+3	; 0x03
    1be6:	fc 81       	ldd	r31, Y+4	; 0x04
    1be8:	e2 17       	cp	r30, r18
    1bea:	f3 07       	cpc	r31, r19
    1bec:	10 f4       	brcc	.+4      	; 0x1bf2 <udd_ep_trans_complet+0x15a>
    1bee:	ed 83       	std	Y+5, r30	; 0x05
    1bf0:	fe 83       	std	Y+6, r31	; 0x06
    1bf2:	d7 01       	movw	r26, r14
    1bf4:	16 96       	adiw	r26, 0x06	; 6
    1bf6:	8d 91       	ld	r24, X+
    1bf8:	9c 91       	ld	r25, X
    1bfa:	17 97       	sbiw	r26, 0x07	; 7
    1bfc:	80 17       	cp	r24, r16
    1bfe:	91 07       	cpc	r25, r17
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <udd_ep_trans_complet+0x16c>
    1c02:	43 c0       	rjmp	.+134    	; 0x1c8a <udd_ep_trans_complet+0x1f2>
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	e8 17       	cp	r30, r24
    1c0a:	f9 07       	cpc	r31, r25
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <udd_ep_trans_complet+0x178>
    1c0e:	3d c0       	rjmp	.+122    	; 0x1c8a <udd_ep_trans_complet+0x1f2>
    1c10:	e8 1b       	sub	r30, r24
    1c12:	f9 0b       	sbc	r31, r25
    1c14:	e1 15       	cp	r30, r1
    1c16:	b4 e0       	ldi	r27, 0x04	; 4
    1c18:	fb 07       	cpc	r31, r27
    1c1a:	40 f0       	brcs	.+16     	; 0x1c2c <udd_ep_trans_complet+0x194>
    1c1c:	ef ef       	ldi	r30, 0xFF	; 255
    1c1e:	f3 e0       	ldi	r31, 0x03	; 3
    1c20:	cf 01       	movw	r24, r30
    1c22:	b6 01       	movw	r22, r12
    1c24:	bd d7       	rcall	.+3962   	; 0x2ba0 <__udivmodhi4>
    1c26:	e8 1b       	sub	r30, r24
    1c28:	f9 0b       	sbc	r31, r25
    1c2a:	05 c0       	rjmp	.+10     	; 0x1c36 <udd_ep_trans_complet+0x19e>
    1c2c:	cf 01       	movw	r24, r30
    1c2e:	b6 01       	movw	r22, r12
    1c30:	b7 d7       	rcall	.+3950   	; 0x2ba0 <__udivmodhi4>
    1c32:	e8 1b       	sub	r30, r24
    1c34:	f9 0b       	sbc	r31, r25
    1c36:	d7 01       	movw	r26, r14
    1c38:	12 96       	adiw	r26, 0x02	; 2
    1c3a:	1d 92       	st	X+, r1
    1c3c:	1c 92       	st	X, r1
    1c3e:	13 97       	sbiw	r26, 0x03	; 3
    1c40:	ec 15       	cp	r30, r12
    1c42:	fd 05       	cpc	r31, r13
    1c44:	78 f4       	brcc	.+30     	; 0x1c64 <udd_ep_trans_complet+0x1cc>
    1c46:	88 81       	ld	r24, Y
    1c48:	84 60       	ori	r24, 0x04	; 4
    1c4a:	88 83       	st	Y, r24
    1c4c:	b0 e4       	ldi	r27, 0x40	; 64
    1c4e:	bb 9e       	mul	r11, r27
    1c50:	c0 01       	movw	r24, r0
    1c52:	11 24       	eor	r1, r1
    1c54:	80 53       	subi	r24, 0x30	; 48
    1c56:	9e 4d       	sbci	r25, 0xDE	; 222
    1c58:	f7 01       	movw	r30, r14
    1c5a:	84 83       	std	Z+4, r24	; 0x04
    1c5c:	95 83       	std	Z+5, r25	; 0x05
    1c5e:	c6 82       	std	Z+6, r12	; 0x06
    1c60:	d7 82       	std	Z+7, r13	; 0x07
    1c62:	0f c0       	rjmp	.+30     	; 0x1c82 <udd_ep_trans_complet+0x1ea>
    1c64:	29 81       	ldd	r18, Y+1	; 0x01
    1c66:	3a 81       	ldd	r19, Y+2	; 0x02
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6c:	82 0f       	add	r24, r18
    1c6e:	93 1f       	adc	r25, r19
    1c70:	d7 01       	movw	r26, r14
    1c72:	14 96       	adiw	r26, 0x04	; 4
    1c74:	8d 93       	st	X+, r24
    1c76:	9c 93       	st	X, r25
    1c78:	15 97       	sbiw	r26, 0x05	; 5
    1c7a:	16 96       	adiw	r26, 0x06	; 6
    1c7c:	ed 93       	st	X+, r30
    1c7e:	fc 93       	st	X, r31
    1c80:	17 97       	sbiw	r26, 0x07	; 7
    1c82:	f7 01       	movw	r30, r14
    1c84:	02 e0       	ldi	r16, 0x02	; 2
    1c86:	06 93       	lac	Z, r16
    1c88:	0e c0       	rjmp	.+28     	; 0x1ca6 <udd_ep_trans_complet+0x20e>
    1c8a:	88 81       	ld	r24, Y
    1c8c:	80 ff       	sbrs	r24, 0
    1c8e:	0b c0       	rjmp	.+22     	; 0x1ca6 <udd_ep_trans_complet+0x20e>
    1c90:	8e 7f       	andi	r24, 0xFE	; 254
    1c92:	88 83       	st	Y, r24
    1c94:	ef 81       	ldd	r30, Y+7	; 0x07
    1c96:	f8 85       	ldd	r31, Y+8	; 0x08
    1c98:	30 97       	sbiw	r30, 0x00	; 0
    1c9a:	29 f0       	breq	.+10     	; 0x1ca6 <udd_ep_trans_complet+0x20e>
    1c9c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c9e:	7e 81       	ldd	r23, Y+6	; 0x06
    1ca0:	4b 2d       	mov	r20, r11
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	09 95       	icall
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	bf 90       	pop	r11
    1cb8:	08 95       	ret

00001cba <udd_attach>:
    1cba:	cf 93       	push	r28
    1cbc:	cf b7       	in	r28, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	5f dd       	rcall	.-1346   	; 0x1782 <udd_sleep_mode>
    1cc4:	ea ec       	ldi	r30, 0xCA	; 202
    1cc6:	f4 e0       	ldi	r31, 0x04	; 4
    1cc8:	80 e4       	ldi	r24, 0x40	; 64
    1cca:	80 83       	st	Z, r24
    1ccc:	80 e2       	ldi	r24, 0x20	; 32
    1cce:	80 83       	st	Z, r24
    1cd0:	e1 ec       	ldi	r30, 0xC1	; 193
    1cd2:	f4 e0       	ldi	r31, 0x04	; 4
    1cd4:	80 81       	ld	r24, Z
    1cd6:	81 60       	ori	r24, 0x01	; 1
    1cd8:	80 83       	st	Z, r24
    1cda:	a9 ec       	ldi	r26, 0xC9	; 201
    1cdc:	b4 e0       	ldi	r27, 0x04	; 4
    1cde:	8c 91       	ld	r24, X
    1ce0:	82 60       	ori	r24, 0x02	; 2
    1ce2:	8c 93       	st	X, r24
    1ce4:	e8 ec       	ldi	r30, 0xC8	; 200
    1ce6:	f4 e0       	ldi	r31, 0x04	; 4
    1ce8:	80 81       	ld	r24, Z
    1cea:	80 64       	ori	r24, 0x40	; 64
    1cec:	80 83       	st	Z, r24
    1cee:	8c 91       	ld	r24, X
    1cf0:	81 60       	ori	r24, 0x01	; 1
    1cf2:	8c 93       	st	X, r24
    1cf4:	80 81       	ld	r24, Z
    1cf6:	80 68       	ori	r24, 0x80	; 128
    1cf8:	80 83       	st	Z, r24
    1cfa:	cf bf       	out	0x3f, r28	; 63
    1cfc:	cf 91       	pop	r28
    1cfe:	08 95       	ret

00001d00 <udd_enable>:
    1d00:	cf 93       	push	r28
    1d02:	80 e3       	ldi	r24, 0x30	; 48
    1d04:	1c d4       	rcall	.+2104   	; 0x253e <sysclk_enable_usb>
    1d06:	e0 ec       	ldi	r30, 0xC0	; 192
    1d08:	f4 e0       	ldi	r31, 0x04	; 4
    1d0a:	80 81       	ld	r24, Z
    1d0c:	80 64       	ori	r24, 0x40	; 64
    1d0e:	80 83       	st	Z, r24
    1d10:	cf b7       	in	r28, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	10 92 09 23 	sts	0x2309, r1
    1d18:	10 92 11 23 	sts	0x2311, r1
    1d1c:	10 92 19 23 	sts	0x2319, r1
    1d20:	10 92 21 23 	sts	0x2321, r1
    1d24:	10 92 29 23 	sts	0x2329, r1
    1d28:	10 92 31 23 	sts	0x2331, r1
    1d2c:	e0 e9       	ldi	r30, 0x90	; 144
    1d2e:	f2 e2       	ldi	r31, 0x22	; 34
    1d30:	80 81       	ld	r24, Z
    1d32:	8e 7f       	andi	r24, 0xFE	; 254
    1d34:	80 83       	st	Z, r24
    1d36:	e9 e9       	ldi	r30, 0x99	; 153
    1d38:	f2 e2       	ldi	r31, 0x22	; 34
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8e 7f       	andi	r24, 0xFE	; 254
    1d3e:	80 83       	st	Z, r24
    1d40:	e2 ea       	ldi	r30, 0xA2	; 162
    1d42:	f2 e2       	ldi	r31, 0x22	; 34
    1d44:	80 81       	ld	r24, Z
    1d46:	8e 7f       	andi	r24, 0xFE	; 254
    1d48:	80 83       	st	Z, r24
    1d4a:	eb ea       	ldi	r30, 0xAB	; 171
    1d4c:	f2 e2       	ldi	r31, 0x22	; 34
    1d4e:	80 81       	ld	r24, Z
    1d50:	8e 7f       	andi	r24, 0xFE	; 254
    1d52:	80 83       	st	Z, r24
    1d54:	6a e1       	ldi	r22, 0x1A	; 26
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	82 e0       	ldi	r24, 0x02	; 2
    1d5a:	0c d4       	rcall	.+2072   	; 0x2574 <nvm_read_byte>
    1d5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d5e:	19 f0       	breq	.+6      	; 0x1d66 <udd_enable+0x66>
    1d60:	80 93 fa 04 	sts	0x04FA, r24
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <udd_enable+0x6c>
    1d66:	8f e1       	ldi	r24, 0x1F	; 31
    1d68:	80 93 fa 04 	sts	0x04FA, r24
    1d6c:	6b e1       	ldi	r22, 0x1B	; 27
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	82 e0       	ldi	r24, 0x02	; 2
    1d72:	00 d4       	rcall	.+2048   	; 0x2574 <nvm_read_byte>
    1d74:	8f 3f       	cpi	r24, 0xFF	; 255
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <udd_enable+0x7e>
    1d78:	80 93 fb 04 	sts	0x04FB, r24
    1d7c:	03 c0       	rjmp	.+6      	; 0x1d84 <udd_enable+0x84>
    1d7e:	8f e1       	ldi	r24, 0x1F	; 31
    1d80:	80 93 fb 04 	sts	0x04FB, r24
    1d84:	e0 ec       	ldi	r30, 0xC0	; 192
    1d86:	f4 e0       	ldi	r31, 0x04	; 4
    1d88:	80 81       	ld	r24, Z
    1d8a:	82 60       	ori	r24, 0x02	; 2
    1d8c:	80 83       	st	Z, r24
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 68       	ori	r24, 0x80	; 128
    1d92:	80 83       	st	Z, r24
    1d94:	80 81       	ld	r24, Z
    1d96:	80 61       	ori	r24, 0x10	; 16
    1d98:	80 83       	st	Z, r24
    1d9a:	88 e0       	ldi	r24, 0x08	; 8
    1d9c:	93 e2       	ldi	r25, 0x23	; 35
    1d9e:	86 83       	std	Z+6, r24	; 0x06
    1da0:	97 83       	std	Z+7, r25	; 0x07
    1da2:	80 81       	ld	r24, Z
    1da4:	80 62       	ori	r24, 0x20	; 32
    1da6:	80 83       	st	Z, r24
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	80 93 c5 04 	sts	0x04C5, r24
    1dae:	e8 ec       	ldi	r30, 0xC8	; 200
    1db0:	f4 e0       	ldi	r31, 0x04	; 4
    1db2:	80 81       	ld	r24, Z
    1db4:	81 60       	ori	r24, 0x01	; 1
    1db6:	80 83       	st	Z, r24
    1db8:	10 92 3c 23 	sts	0x233C, r1
    1dbc:	8f b7       	in	r24, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	e2 e5       	ldi	r30, 0x52	; 82
    1dc2:	f3 e2       	ldi	r31, 0x23	; 35
    1dc4:	90 81       	ld	r25, Z
    1dc6:	9f 5f       	subi	r25, 0xFF	; 255
    1dc8:	90 83       	st	Z, r25
    1dca:	8f bf       	out	0x3f, r24	; 63
    1dcc:	76 df       	rcall	.-276    	; 0x1cba <udd_attach>
    1dce:	cf bf       	out	0x3f, r28	; 63
    1dd0:	cf 91       	pop	r28
    1dd2:	08 95       	ret

00001dd4 <udd_is_high_speed>:
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	08 95       	ret

00001dd8 <udd_set_address>:
    1dd8:	80 93 c3 04 	sts	0x04C3, r24
    1ddc:	08 95       	ret

00001dde <udd_getaddress>:
    1dde:	80 91 c3 04 	lds	r24, 0x04C3
    1de2:	08 95       	ret

00001de4 <udd_get_frame_number>:
    1de4:	80 91 38 23 	lds	r24, 0x2338
    1de8:	90 91 39 23 	lds	r25, 0x2339
    1dec:	08 95       	ret

00001dee <udd_get_micro_frame_number>:
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	08 95       	ret

00001df4 <udd_set_setup_payload>:
    1df4:	80 93 45 23 	sts	0x2345, r24
    1df8:	90 93 46 23 	sts	0x2346, r25
    1dfc:	60 93 47 23 	sts	0x2347, r22
    1e00:	70 93 48 23 	sts	0x2348, r23
    1e04:	08 95       	ret

00001e06 <udd_ep_alloc>:
    1e06:	e8 2f       	mov	r30, r24
    1e08:	ef 70       	andi	r30, 0x0F	; 15
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	99 27       	eor	r25, r25
    1e12:	87 fd       	sbrc	r24, 7
    1e14:	90 95       	com	r25
    1e16:	88 27       	eor	r24, r24
    1e18:	99 0f       	add	r25, r25
    1e1a:	88 1f       	adc	r24, r24
    1e1c:	99 27       	eor	r25, r25
    1e1e:	e8 0f       	add	r30, r24
    1e20:	f9 1f       	adc	r31, r25
    1e22:	ee 0f       	add	r30, r30
    1e24:	ff 1f       	adc	r31, r31
    1e26:	ee 0f       	add	r30, r30
    1e28:	ff 1f       	adc	r31, r31
    1e2a:	ee 0f       	add	r30, r30
    1e2c:	ff 1f       	adc	r31, r31
    1e2e:	e8 5f       	subi	r30, 0xF8	; 248
    1e30:	fc 4d       	sbci	r31, 0xDC	; 220
    1e32:	81 81       	ldd	r24, Z+1	; 0x01
    1e34:	80 7c       	andi	r24, 0xC0	; 192
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <udd_ep_alloc+0x34>
    1e38:	43 c0       	rjmp	.+134    	; 0x1ec0 <udd_ep_alloc+0xba>
    1e3a:	63 70       	andi	r22, 0x03	; 3
    1e3c:	61 30       	cpi	r22, 0x01	; 1
    1e3e:	29 f0       	breq	.+10     	; 0x1e4a <udd_ep_alloc+0x44>
    1e40:	10 f4       	brcc	.+4      	; 0x1e46 <udd_ep_alloc+0x40>
    1e42:	80 e4       	ldi	r24, 0x40	; 64
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <udd_ep_alloc+0x46>
    1e46:	80 e8       	ldi	r24, 0x80	; 128
    1e48:	01 c0       	rjmp	.+2      	; 0x1e4c <udd_ep_alloc+0x46>
    1e4a:	80 ec       	ldi	r24, 0xC0	; 192
    1e4c:	40 38       	cpi	r20, 0x80	; 128
    1e4e:	51 05       	cpc	r21, r1
    1e50:	e1 f0       	breq	.+56     	; 0x1e8a <udd_ep_alloc+0x84>
    1e52:	50 f4       	brcc	.+20     	; 0x1e68 <udd_ep_alloc+0x62>
    1e54:	40 32       	cpi	r20, 0x20	; 32
    1e56:	51 05       	cpc	r21, r1
    1e58:	a1 f0       	breq	.+40     	; 0x1e82 <udd_ep_alloc+0x7c>
    1e5a:	40 34       	cpi	r20, 0x40	; 64
    1e5c:	51 05       	cpc	r21, r1
    1e5e:	99 f0       	breq	.+38     	; 0x1e86 <udd_ep_alloc+0x80>
    1e60:	40 31       	cpi	r20, 0x10	; 16
    1e62:	51 05       	cpc	r21, r1
    1e64:	61 f4       	brne	.+24     	; 0x1e7e <udd_ep_alloc+0x78>
    1e66:	19 c0       	rjmp	.+50     	; 0x1e9a <udd_ep_alloc+0x94>
    1e68:	41 15       	cp	r20, r1
    1e6a:	92 e0       	ldi	r25, 0x02	; 2
    1e6c:	59 07       	cpc	r21, r25
    1e6e:	89 f0       	breq	.+34     	; 0x1e92 <udd_ep_alloc+0x8c>
    1e70:	4f 3f       	cpi	r20, 0xFF	; 255
    1e72:	93 e0       	ldi	r25, 0x03	; 3
    1e74:	59 07       	cpc	r21, r25
    1e76:	79 f0       	breq	.+30     	; 0x1e96 <udd_ep_alloc+0x90>
    1e78:	41 15       	cp	r20, r1
    1e7a:	51 40       	sbci	r21, 0x01	; 1
    1e7c:	41 f0       	breq	.+16     	; 0x1e8e <udd_ep_alloc+0x88>
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	0d c0       	rjmp	.+26     	; 0x1e9c <udd_ep_alloc+0x96>
    1e82:	22 e0       	ldi	r18, 0x02	; 2
    1e84:	0b c0       	rjmp	.+22     	; 0x1e9c <udd_ep_alloc+0x96>
    1e86:	23 e0       	ldi	r18, 0x03	; 3
    1e88:	09 c0       	rjmp	.+18     	; 0x1e9c <udd_ep_alloc+0x96>
    1e8a:	24 e0       	ldi	r18, 0x04	; 4
    1e8c:	07 c0       	rjmp	.+14     	; 0x1e9c <udd_ep_alloc+0x96>
    1e8e:	25 e0       	ldi	r18, 0x05	; 5
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <udd_ep_alloc+0x96>
    1e92:	26 e0       	ldi	r18, 0x06	; 6
    1e94:	03 c0       	rjmp	.+6      	; 0x1e9c <udd_ep_alloc+0x96>
    1e96:	27 e0       	ldi	r18, 0x07	; 7
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <udd_ep_alloc+0x96>
    1e9a:	21 e0       	ldi	r18, 0x01	; 1
    1e9c:	11 82       	std	Z+1, r1	; 0x01
    1e9e:	96 e0       	ldi	r25, 0x06	; 6
    1ea0:	90 83       	st	Z, r25
    1ea2:	82 2b       	or	r24, r18
    1ea4:	81 83       	std	Z+1, r24	; 0x01
    1ea6:	81 81       	ldd	r24, Z+1	; 0x01
    1ea8:	80 7c       	andi	r24, 0xC0	; 192
    1eaa:	80 3c       	cpi	r24, 0xC0	; 192
    1eac:	21 f4       	brne	.+8      	; 0x1eb6 <udd_ep_alloc+0xb0>
    1eae:	81 81       	ldd	r24, Z+1	; 0x01
    1eb0:	87 70       	andi	r24, 0x07	; 7
    1eb2:	87 30       	cpi	r24, 0x07	; 7
    1eb4:	39 f0       	breq	.+14     	; 0x1ec4 <udd_ep_alloc+0xbe>
    1eb6:	81 81       	ldd	r24, Z+1	; 0x01
    1eb8:	80 62       	ori	r24, 0x20	; 32
    1eba:	81 83       	std	Z+1, r24	; 0x01
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	08 95       	ret
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	08 95       	ret
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	08 95       	ret

00001ec8 <udd_ep_is_halted>:
    1ec8:	e8 2f       	mov	r30, r24
    1eca:	ef 70       	andi	r30, 0x0F	; 15
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	ee 0f       	add	r30, r30
    1ed0:	ff 1f       	adc	r31, r31
    1ed2:	99 27       	eor	r25, r25
    1ed4:	87 fd       	sbrc	r24, 7
    1ed6:	90 95       	com	r25
    1ed8:	88 27       	eor	r24, r24
    1eda:	99 0f       	add	r25, r25
    1edc:	88 1f       	adc	r24, r24
    1ede:	99 27       	eor	r25, r25
    1ee0:	e8 0f       	add	r30, r24
    1ee2:	f9 1f       	adc	r31, r25
    1ee4:	ee 0f       	add	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	ee 0f       	add	r30, r30
    1eea:	ff 1f       	adc	r31, r31
    1eec:	ee 0f       	add	r30, r30
    1eee:	ff 1f       	adc	r31, r31
    1ef0:	e8 5f       	subi	r30, 0xF8	; 248
    1ef2:	fc 4d       	sbci	r31, 0xDC	; 220
    1ef4:	81 81       	ldd	r24, Z+1	; 0x01
    1ef6:	82 fb       	bst	r24, 2
    1ef8:	88 27       	eor	r24, r24
    1efa:	80 f9       	bld	r24, 0
    1efc:	08 95       	ret

00001efe <udd_ep_clear_halt>:
    1efe:	e8 2f       	mov	r30, r24
    1f00:	ef 70       	andi	r30, 0x0F	; 15
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	ee 0f       	add	r30, r30
    1f06:	ff 1f       	adc	r31, r31
    1f08:	28 2f       	mov	r18, r24
    1f0a:	33 27       	eor	r19, r19
    1f0c:	27 fd       	sbrc	r18, 7
    1f0e:	30 95       	com	r19
    1f10:	22 27       	eor	r18, r18
    1f12:	33 0f       	add	r19, r19
    1f14:	22 1f       	adc	r18, r18
    1f16:	33 27       	eor	r19, r19
    1f18:	e2 0f       	add	r30, r18
    1f1a:	f3 1f       	adc	r31, r19
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	ff 1f       	adc	r31, r31
    1f20:	ee 0f       	add	r30, r30
    1f22:	ff 1f       	adc	r31, r31
    1f24:	ee 0f       	add	r30, r30
    1f26:	ff 1f       	adc	r31, r31
    1f28:	e8 5f       	subi	r30, 0xF8	; 248
    1f2a:	fc 4d       	sbci	r31, 0xDC	; 220
    1f2c:	91 81       	ldd	r25, Z+1	; 0x01
    1f2e:	92 ff       	sbrs	r25, 2
    1f30:	0e c0       	rjmp	.+28     	; 0x1f4e <udd_ep_clear_halt+0x50>
    1f32:	91 81       	ldd	r25, Z+1	; 0x01
    1f34:	9b 7f       	andi	r25, 0xFB	; 251
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	25 dd       	rcall	.-1462   	; 0x1984 <udd_ep_get_job>
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	80 81       	ld	r24, Z
    1f3e:	80 ff       	sbrs	r24, 0
    1f40:	06 c0       	rjmp	.+12     	; 0x1f4e <udd_ep_clear_halt+0x50>
    1f42:	8e 7f       	andi	r24, 0xFE	; 254
    1f44:	80 83       	st	Z, r24
    1f46:	07 80       	ldd	r0, Z+7	; 0x07
    1f48:	f0 85       	ldd	r31, Z+8	; 0x08
    1f4a:	e0 2d       	mov	r30, r0
    1f4c:	09 95       	icall
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	08 95       	ret

00001f52 <udd_ep_run>:
    1f52:	7f 92       	push	r7
    1f54:	8f 92       	push	r8
    1f56:	9f 92       	push	r9
    1f58:	af 92       	push	r10
    1f5a:	bf 92       	push	r11
    1f5c:	cf 92       	push	r12
    1f5e:	df 92       	push	r13
    1f60:	ef 92       	push	r14
    1f62:	ff 92       	push	r15
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	98 2e       	mov	r9, r24
    1f6e:	86 2e       	mov	r8, r22
    1f70:	5a 01       	movw	r10, r20
    1f72:	69 01       	movw	r12, r18
    1f74:	07 dd       	rcall	.-1522   	; 0x1984 <udd_ep_get_job>
    1f76:	7c 01       	movw	r14, r24
    1f78:	79 2c       	mov	r7, r9
    1f7a:	77 1c       	adc	r7, r7
    1f7c:	77 24       	eor	r7, r7
    1f7e:	77 1c       	adc	r7, r7
    1f80:	c9 2d       	mov	r28, r9
    1f82:	cf 70       	andi	r28, 0x0F	; 15
    1f84:	d0 e0       	ldi	r29, 0x00	; 0
    1f86:	cc 0f       	add	r28, r28
    1f88:	dd 1f       	adc	r29, r29
    1f8a:	c7 0d       	add	r28, r7
    1f8c:	d1 1d       	adc	r29, r1
    1f8e:	cc 0f       	add	r28, r28
    1f90:	dd 1f       	adc	r29, r29
    1f92:	cc 0f       	add	r28, r28
    1f94:	dd 1f       	adc	r29, r29
    1f96:	cc 0f       	add	r28, r28
    1f98:	dd 1f       	adc	r29, r29
    1f9a:	c8 5f       	subi	r28, 0xF8	; 248
    1f9c:	dc 4d       	sbci	r29, 0xDC	; 220
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	80 7c       	andi	r24, 0xC0	; 192
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <udd_ep_run+0x54>
    1fa4:	4b c0       	rjmp	.+150    	; 0x203c <udd_ep_run+0xea>
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	80 7c       	andi	r24, 0xC0	; 192
    1faa:	80 3c       	cpi	r24, 0xC0	; 192
    1fac:	19 f0       	breq	.+6      	; 0x1fb4 <udd_ep_run+0x62>
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	82 fd       	sbrc	r24, 2
    1fb2:	46 c0       	rjmp	.+140    	; 0x2040 <udd_ep_run+0xee>
    1fb4:	8f b7       	in	r24, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	f7 01       	movw	r30, r14
    1fba:	90 81       	ld	r25, Z
    1fbc:	90 ff       	sbrs	r25, 0
    1fbe:	03 c0       	rjmp	.+6      	; 0x1fc6 <udd_ep_run+0x74>
    1fc0:	8f bf       	out	0x3f, r24	; 63
    1fc2:	71 2c       	mov	r7, r1
    1fc4:	3e c0       	rjmp	.+124    	; 0x2042 <udd_ep_run+0xf0>
    1fc6:	f7 01       	movw	r30, r14
    1fc8:	90 81       	ld	r25, Z
    1fca:	91 60       	ori	r25, 0x01	; 1
    1fcc:	90 83       	st	Z, r25
    1fce:	8f bf       	out	0x3f, r24	; 63
    1fd0:	f7 01       	movw	r30, r14
    1fd2:	a1 82       	std	Z+1, r10	; 0x01
    1fd4:	b2 82       	std	Z+2, r11	; 0x02
    1fd6:	c3 82       	std	Z+3, r12	; 0x03
    1fd8:	d4 82       	std	Z+4, r13	; 0x04
    1fda:	15 82       	std	Z+5, r1	; 0x05
    1fdc:	16 82       	std	Z+6, r1	; 0x06
    1fde:	07 83       	std	Z+7, r16	; 0x07
    1fe0:	10 87       	std	Z+8, r17	; 0x08
    1fe2:	81 10       	cpse	r8, r1
    1fe4:	06 c0       	rjmp	.+12     	; 0x1ff2 <udd_ep_run+0xa0>
    1fe6:	91 e0       	ldi	r25, 0x01	; 1
    1fe8:	c1 14       	cp	r12, r1
    1fea:	d1 04       	cpc	r13, r1
    1fec:	19 f0       	breq	.+6      	; 0x1ff4 <udd_ep_run+0xa2>
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	01 c0       	rjmp	.+2      	; 0x1ff4 <udd_ep_run+0xa2>
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
    1ff4:	f7 01       	movw	r30, r14
    1ff6:	80 81       	ld	r24, Z
    1ff8:	90 fb       	bst	r25, 0
    1ffa:	81 f9       	bld	r24, 1
    1ffc:	8b 7f       	andi	r24, 0xFB	; 251
    1ffe:	80 83       	st	Z, r24
    2000:	77 20       	and	r7, r7
    2002:	19 f0       	breq	.+6      	; 0x200a <udd_ep_run+0xb8>
    2004:	1e 82       	std	Y+6, r1	; 0x06
    2006:	1f 82       	std	Y+7, r1	; 0x07
    2008:	14 c0       	rjmp	.+40     	; 0x2032 <udd_ep_run+0xe0>
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	80 7c       	andi	r24, 0xC0	; 192
    200e:	80 3c       	cpi	r24, 0xC0	; 192
    2010:	61 f4       	brne	.+24     	; 0x202a <udd_ep_run+0xd8>
    2012:	ce 01       	movw	r24, r28
    2014:	92 dc       	rcall	.-1756   	; 0x193a <udd_ep_get_size>
    2016:	bc 01       	movw	r22, r24
    2018:	c6 01       	movw	r24, r12
    201a:	c2 d5       	rcall	.+2948   	; 0x2ba0 <__udivmodhi4>
    201c:	89 2b       	or	r24, r25
    201e:	29 f0       	breq	.+10     	; 0x202a <udd_ep_run+0xd8>
    2020:	f7 01       	movw	r30, r14
    2022:	80 81       	ld	r24, Z
    2024:	8e 7f       	andi	r24, 0xFE	; 254
    2026:	80 83       	st	Z, r24
    2028:	0c c0       	rjmp	.+24     	; 0x2042 <udd_ep_run+0xf0>
    202a:	1a 82       	std	Y+2, r1	; 0x02
    202c:	1b 82       	std	Y+3, r1	; 0x03
    202e:	1e 82       	std	Y+6, r1	; 0x06
    2030:	1f 82       	std	Y+7, r1	; 0x07
    2032:	89 2d       	mov	r24, r9
    2034:	31 dd       	rcall	.-1438   	; 0x1a98 <udd_ep_trans_complet>
    2036:	77 24       	eor	r7, r7
    2038:	73 94       	inc	r7
    203a:	03 c0       	rjmp	.+6      	; 0x2042 <udd_ep_run+0xf0>
    203c:	71 2c       	mov	r7, r1
    203e:	01 c0       	rjmp	.+2      	; 0x2042 <udd_ep_run+0xf0>
    2040:	71 2c       	mov	r7, r1
    2042:	87 2d       	mov	r24, r7
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	1f 91       	pop	r17
    204a:	0f 91       	pop	r16
    204c:	ff 90       	pop	r15
    204e:	ef 90       	pop	r14
    2050:	df 90       	pop	r13
    2052:	cf 90       	pop	r12
    2054:	bf 90       	pop	r11
    2056:	af 90       	pop	r10
    2058:	9f 90       	pop	r9
    205a:	8f 90       	pop	r8
    205c:	7f 90       	pop	r7
    205e:	08 95       	ret

00002060 <udd_ep_abort>:
    2060:	ff 92       	push	r15
    2062:	0f 93       	push	r16
    2064:	1f 93       	push	r17
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	18 2f       	mov	r17, r24
    206c:	f8 2e       	mov	r15, r24
    206e:	ff 1c       	adc	r15, r15
    2070:	ff 24       	eor	r15, r15
    2072:	ff 1c       	adc	r15, r15
    2074:	c8 2f       	mov	r28, r24
    2076:	cf 70       	andi	r28, 0x0F	; 15
    2078:	d0 e0       	ldi	r29, 0x00	; 0
    207a:	cc 0f       	add	r28, r28
    207c:	dd 1f       	adc	r29, r29
    207e:	cf 0d       	add	r28, r15
    2080:	d1 1d       	adc	r29, r1
    2082:	cc 0f       	add	r28, r28
    2084:	dd 1f       	adc	r29, r29
    2086:	cc 0f       	add	r28, r28
    2088:	dd 1f       	adc	r29, r29
    208a:	cc 0f       	add	r28, r28
    208c:	dd 1f       	adc	r29, r29
    208e:	c8 5f       	subi	r28, 0xF8	; 248
    2090:	dc 4d       	sbci	r29, 0xDC	; 220
    2092:	78 dc       	rcall	.-1808   	; 0x1984 <udd_ep_get_job>
    2094:	dc 01       	movw	r26, r24
    2096:	fe 01       	movw	r30, r28
    2098:	02 e0       	ldi	r16, 0x02	; 2
    209a:	05 93       	las	Z, r16
    209c:	8c 91       	ld	r24, X
    209e:	80 ff       	sbrs	r24, 0
    20a0:	12 c0       	rjmp	.+36     	; 0x20c6 <udd_ep_abort+0x66>
    20a2:	8e 7f       	andi	r24, 0xFE	; 254
    20a4:	8c 93       	st	X, r24
    20a6:	17 96       	adiw	r26, 0x07	; 7
    20a8:	ed 91       	ld	r30, X+
    20aa:	fc 91       	ld	r31, X
    20ac:	18 97       	sbiw	r26, 0x08	; 8
    20ae:	30 97       	sbiw	r30, 0x00	; 0
    20b0:	51 f0       	breq	.+20     	; 0x20c6 <udd_ep_abort+0x66>
    20b2:	ff 20       	and	r15, r15
    20b4:	19 f0       	breq	.+6      	; 0x20bc <udd_ep_abort+0x5c>
    20b6:	6e 81       	ldd	r22, Y+6	; 0x06
    20b8:	7f 81       	ldd	r23, Y+7	; 0x07
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <udd_ep_abort+0x60>
    20bc:	6a 81       	ldd	r22, Y+2	; 0x02
    20be:	7b 81       	ldd	r23, Y+3	; 0x03
    20c0:	41 2f       	mov	r20, r17
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	09 95       	icall
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	1f 91       	pop	r17
    20cc:	0f 91       	pop	r16
    20ce:	ff 90       	pop	r15
    20d0:	08 95       	ret

000020d2 <udd_ep_free>:
    20d2:	cf 93       	push	r28
    20d4:	c8 2f       	mov	r28, r24
    20d6:	c4 df       	rcall	.-120    	; 0x2060 <udd_ep_abort>
    20d8:	ec 2f       	mov	r30, r28
    20da:	ef 70       	andi	r30, 0x0F	; 15
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	ee 0f       	add	r30, r30
    20e0:	ff 1f       	adc	r31, r31
    20e2:	8c 2f       	mov	r24, r28
    20e4:	99 27       	eor	r25, r25
    20e6:	87 fd       	sbrc	r24, 7
    20e8:	90 95       	com	r25
    20ea:	88 27       	eor	r24, r24
    20ec:	99 0f       	add	r25, r25
    20ee:	88 1f       	adc	r24, r24
    20f0:	99 27       	eor	r25, r25
    20f2:	e8 0f       	add	r30, r24
    20f4:	f9 1f       	adc	r31, r25
    20f6:	ee 0f       	add	r30, r30
    20f8:	ff 1f       	adc	r31, r31
    20fa:	ee 0f       	add	r30, r30
    20fc:	ff 1f       	adc	r31, r31
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	e8 5f       	subi	r30, 0xF8	; 248
    2104:	fc 4d       	sbci	r31, 0xDC	; 220
    2106:	11 82       	std	Z+1, r1	; 0x01
    2108:	cf 91       	pop	r28
    210a:	08 95       	ret

0000210c <udd_ep_set_halt>:
    210c:	0f 93       	push	r16
    210e:	e8 2f       	mov	r30, r24
    2110:	ef 70       	andi	r30, 0x0F	; 15
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	28 2f       	mov	r18, r24
    211a:	33 27       	eor	r19, r19
    211c:	27 fd       	sbrc	r18, 7
    211e:	30 95       	com	r19
    2120:	22 27       	eor	r18, r18
    2122:	33 0f       	add	r19, r19
    2124:	22 1f       	adc	r18, r18
    2126:	33 27       	eor	r19, r19
    2128:	e2 0f       	add	r30, r18
    212a:	f3 1f       	adc	r31, r19
    212c:	ee 0f       	add	r30, r30
    212e:	ff 1f       	adc	r31, r31
    2130:	ee 0f       	add	r30, r30
    2132:	ff 1f       	adc	r31, r31
    2134:	ee 0f       	add	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	e8 5f       	subi	r30, 0xF8	; 248
    213a:	fc 4d       	sbci	r31, 0xDC	; 220
    213c:	91 81       	ldd	r25, Z+1	; 0x01
    213e:	94 60       	ori	r25, 0x04	; 4
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	01 e0       	ldi	r16, 0x01	; 1
    2144:	06 93       	lac	Z, r16
    2146:	8c df       	rcall	.-232    	; 0x2060 <udd_ep_abort>
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	0f 91       	pop	r16
    214c:	08 95       	ret

0000214e <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    214e:	1f 92       	push	r1
    2150:	0f 92       	push	r0
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	0f 92       	push	r0
    2156:	11 24       	eor	r1, r1
    2158:	0f 93       	push	r16
    215a:	2f 93       	push	r18
    215c:	3f 93       	push	r19
    215e:	4f 93       	push	r20
    2160:	5f 93       	push	r21
    2162:	6f 93       	push	r22
    2164:	7f 93       	push	r23
    2166:	8f 93       	push	r24
    2168:	9f 93       	push	r25
    216a:	af 93       	push	r26
    216c:	bf 93       	push	r27
    216e:	ef 93       	push	r30
    2170:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2172:	80 91 cb 04 	lds	r24, 0x04CB
    2176:	88 23       	and	r24, r24
    2178:	34 f4       	brge	.+12     	; 0x2186 <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    217a:	80 e8       	ldi	r24, 0x80	; 128
    217c:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    2180:	0e 94 a9 05 	call	0xb52	; 0xb52 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2184:	88 c0       	rjmp	.+272    	; 0x2296 <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2186:	80 91 cb 04 	lds	r24, 0x04CB
    218a:	82 ff       	sbrs	r24, 2
    218c:	20 c0       	rjmp	.+64     	; 0x21ce <__vector_125+0x80>
		udd_ack_underflow_event();
    218e:	84 e0       	ldi	r24, 0x04	; 4
    2190:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    2194:	80 91 10 23 	lds	r24, 0x2310
    2198:	86 ff       	sbrs	r24, 6
    219a:	7d c0       	rjmp	.+250    	; 0x2296 <__vector_125+0x148>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    219c:	80 91 cc 04 	lds	r24, 0x04CC
    21a0:	81 fd       	sbrc	r24, 1
    21a2:	79 c0       	rjmp	.+242    	; 0x2296 <__vector_125+0x148>
    21a4:	0a dc       	rcall	.-2028   	; 0x19ba <udd_ctrl_interrupt_tc_setup>
    21a6:	81 11       	cpse	r24, r1
    21a8:	76 c0       	rjmp	.+236    	; 0x2296 <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    21aa:	80 91 f8 22 	lds	r24, 0x22F8
    21ae:	81 30       	cpi	r24, 0x01	; 1
    21b0:	11 f4       	brne	.+4      	; 0x21b6 <__vector_125+0x68>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    21b2:	3f db       	rcall	.-2434   	; 0x1832 <udd_ctrl_send_zlp_in>
    21b4:	70 c0       	rjmp	.+224    	; 0x2296 <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    21b6:	84 30       	cpi	r24, 0x04	; 4
    21b8:	09 f0       	breq	.+2      	; 0x21bc <__vector_125+0x6e>
    21ba:	6d c0       	rjmp	.+218    	; 0x2296 <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    21bc:	e1 e1       	ldi	r30, 0x11	; 17
    21be:	f3 e2       	ldi	r31, 0x23	; 35
    21c0:	04 e0       	ldi	r16, 0x04	; 4
    21c2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    21c4:	e9 e0       	ldi	r30, 0x09	; 9
    21c6:	f3 e2       	ldi	r31, 0x23	; 35
    21c8:	04 e0       	ldi	r16, 0x04	; 4
    21ca:	05 93       	las	Z, r16
    21cc:	64 c0       	rjmp	.+200    	; 0x2296 <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    21ce:	80 91 cb 04 	lds	r24, 0x04CB
    21d2:	81 ff       	sbrs	r24, 1
    21d4:	5b c0       	rjmp	.+182    	; 0x228c <__vector_125+0x13e>
		udd_ack_overflow_event();
    21d6:	82 e0       	ldi	r24, 0x02	; 2
    21d8:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    21dc:	80 91 08 23 	lds	r24, 0x2308
    21e0:	86 ff       	sbrs	r24, 6
    21e2:	59 c0       	rjmp	.+178    	; 0x2296 <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    21e4:	80 91 cc 04 	lds	r24, 0x04CC
    21e8:	81 fd       	sbrc	r24, 1
    21ea:	55 c0       	rjmp	.+170    	; 0x2296 <__vector_125+0x148>
    21ec:	e6 db       	rcall	.-2100   	; 0x19ba <udd_ctrl_interrupt_tc_setup>
    21ee:	81 11       	cpse	r24, r1
    21f0:	52 c0       	rjmp	.+164    	; 0x2296 <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    21f2:	80 91 f8 22 	lds	r24, 0x22F8
    21f6:	82 30       	cpi	r24, 0x02	; 2
    21f8:	41 f4       	brne	.+16     	; 0x220a <__vector_125+0xbc>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    21fa:	84 e0       	ldi	r24, 0x04	; 4
    21fc:	80 93 f8 22 	sts	0x22F8, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2200:	e8 e0       	ldi	r30, 0x08	; 8
    2202:	f3 e2       	ldi	r31, 0x23	; 35
    2204:	02 e0       	ldi	r16, 0x02	; 2
    2206:	06 93       	lac	Z, r16
    2208:	46 c0       	rjmp	.+140    	; 0x2296 <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    220a:	83 30       	cpi	r24, 0x03	; 3
    220c:	09 f0       	breq	.+2      	; 0x2210 <__vector_125+0xc2>
    220e:	43 c0       	rjmp	.+134    	; 0x2296 <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2210:	e1 e1       	ldi	r30, 0x11	; 17
    2212:	f3 e2       	ldi	r31, 0x23	; 35
    2214:	04 e0       	ldi	r16, 0x04	; 4
    2216:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2218:	e9 e0       	ldi	r30, 0x09	; 9
    221a:	f3 e2       	ldi	r31, 0x23	; 35
    221c:	04 e0       	ldi	r16, 0x04	; 4
    221e:	05 93       	las	Z, r16
    2220:	3a c0       	rjmp	.+116    	; 0x2296 <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2222:	80 e1       	ldi	r24, 0x10	; 16
    2224:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	1a df       	rcall	.-460    	; 0x2060 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    222c:	81 e8       	ldi	r24, 0x81	; 129
    222e:	18 df       	rcall	.-464    	; 0x2060 <udd_ep_abort>
		}
#endif
		udc_reset();
    2230:	0e 94 82 05 	call	0xb04	; 0xb04 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2234:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2238:	e9 e0       	ldi	r30, 0x09	; 9
    223a:	f3 e2       	ldi	r31, 0x23	; 35
    223c:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    223e:	96 e0       	ldi	r25, 0x06	; 6
    2240:	90 93 08 23 	sts	0x2308, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2244:	83 e4       	ldi	r24, 0x43	; 67
    2246:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2248:	e1 e1       	ldi	r30, 0x11	; 17
    224a:	f3 e2       	ldi	r31, 0x23	; 35
    224c:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    224e:	90 93 10 23 	sts	0x2310, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2252:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2254:	84 eb       	ldi	r24, 0xB4	; 180
    2256:	92 e2       	ldi	r25, 0x22	; 34
    2258:	80 93 0c 23 	sts	0x230C, r24
    225c:	90 93 0d 23 	sts	0x230D, r25
		// Reset endpoint control management
		udd_ctrl_init();
    2260:	af da       	rcall	.-2722   	; 0x17c0 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2262:	19 c0       	rjmp	.+50     	; 0x2296 <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
    2264:	80 91 cb 04 	lds	r24, 0x04CB
    2268:	86 ff       	sbrs	r24, 6
    226a:	06 c0       	rjmp	.+12     	; 0x2278 <__vector_125+0x12a>
		udd_ack_suspend_event();
    226c:	80 e4       	ldi	r24, 0x40	; 64
    226e:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	86 da       	rcall	.-2804   	; 0x1782 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2276:	0f c0       	rjmp	.+30     	; 0x2296 <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
    2278:	80 91 cb 04 	lds	r24, 0x04CB
    227c:	85 ff       	sbrs	r24, 5
    227e:	0b c0       	rjmp	.+22     	; 0x2296 <__vector_125+0x148>
		udd_ack_resume_event();
    2280:	80 e2       	ldi	r24, 0x20	; 32
    2282:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	7c da       	rcall	.-2824   	; 0x1782 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    228a:	05 c0       	rjmp	.+10     	; 0x2296 <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    228c:	80 91 cb 04 	lds	r24, 0x04CB
    2290:	84 ff       	sbrs	r24, 4
    2292:	e8 cf       	rjmp	.-48     	; 0x2264 <__vector_125+0x116>
    2294:	c6 cf       	rjmp	.-116    	; 0x2222 <__vector_125+0xd4>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2296:	ff 91       	pop	r31
    2298:	ef 91       	pop	r30
    229a:	bf 91       	pop	r27
    229c:	af 91       	pop	r26
    229e:	9f 91       	pop	r25
    22a0:	8f 91       	pop	r24
    22a2:	7f 91       	pop	r23
    22a4:	6f 91       	pop	r22
    22a6:	5f 91       	pop	r21
    22a8:	4f 91       	pop	r20
    22aa:	3f 91       	pop	r19
    22ac:	2f 91       	pop	r18
    22ae:	0f 91       	pop	r16
    22b0:	0f 90       	pop	r0
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	0f 90       	pop	r0
    22b6:	1f 90       	pop	r1
    22b8:	18 95       	reti

000022ba <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    22ba:	1f 92       	push	r1
    22bc:	0f 92       	push	r0
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	0f 92       	push	r0
    22c2:	11 24       	eor	r1, r1
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	2f 93       	push	r18
    22ca:	3f 93       	push	r19
    22cc:	4f 93       	push	r20
    22ce:	5f 93       	push	r21
    22d0:	6f 93       	push	r22
    22d2:	7f 93       	push	r23
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	af 93       	push	r26
    22da:	bf 93       	push	r27
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	ef 93       	push	r30
    22e2:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    22e4:	80 91 cc 04 	lds	r24, 0x04CC
    22e8:	81 fd       	sbrc	r24, 1
    22ea:	03 c0       	rjmp	.+6      	; 0x22f2 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    22ec:	66 db       	rcall	.-2356   	; 0x19ba <udd_ctrl_interrupt_tc_setup>
    22ee:	81 11       	cpse	r24, r1
    22f0:	b8 c0       	rjmp	.+368    	; 0x2462 <__vector_126+0x1a8>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    22f8:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    22fc:	81 95       	neg	r24
    22fe:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2300:	e8 e0       	ldi	r30, 0x08	; 8
    2302:	f3 e2       	ldi	r31, 0x23	; 35
    2304:	e8 1b       	sub	r30, r24
    2306:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2308:	20 81       	ld	r18, Z
    230a:	31 81       	ldd	r19, Z+1	; 0x01
    230c:	28 50       	subi	r18, 0x08	; 8
    230e:	33 42       	sbci	r19, 0x23	; 35
    2310:	36 95       	lsr	r19
    2312:	27 95       	ror	r18
    2314:	36 95       	lsr	r19
    2316:	27 95       	ror	r18
    2318:	36 95       	lsr	r19
    231a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    231c:	82 2f       	mov	r24, r18
    231e:	86 95       	lsr	r24
    2320:	20 ff       	sbrs	r18, 0
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <__vector_126+0x6e>
    2324:	90 e8       	ldi	r25, 0x80	; 128
    2326:	01 c0       	rjmp	.+2      	; 0x232a <__vector_126+0x70>
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    232c:	e8 2f       	mov	r30, r24
    232e:	ef 70       	andi	r30, 0x0F	; 15
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	ee 0f       	add	r30, r30
    2334:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2336:	28 2f       	mov	r18, r24
    2338:	33 27       	eor	r19, r19
    233a:	27 fd       	sbrc	r18, 7
    233c:	30 95       	com	r19
    233e:	22 27       	eor	r18, r18
    2340:	33 0f       	add	r19, r19
    2342:	22 1f       	adc	r18, r18
    2344:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2346:	e2 0f       	add	r30, r18
    2348:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	ee 0f       	add	r30, r30
    2354:	ff 1f       	adc	r31, r31
    2356:	e8 5f       	subi	r30, 0xF8	; 248
    2358:	fc 4d       	sbci	r31, 0xDC	; 220
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    235a:	90 81       	ld	r25, Z
    235c:	95 ff       	sbrs	r25, 5
    235e:	81 c0       	rjmp	.+258    	; 0x2462 <__vector_126+0x1a8>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2360:	00 e2       	ldi	r16, 0x20	; 32
    2362:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2364:	81 11       	cpse	r24, r1
    2366:	78 c0       	rjmp	.+240    	; 0x2458 <__vector_126+0x19e>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2368:	80 91 f8 22 	lds	r24, 0x22F8
    236c:	84 30       	cpi	r24, 0x04	; 4
    236e:	19 f4       	brne	.+6      	; 0x2376 <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2370:	6e da       	rcall	.-2852   	; 0x184e <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2372:	26 da       	rcall	.-2996   	; 0x17c0 <udd_ctrl_init>
    2374:	76 c0       	rjmp	.+236    	; 0x2462 <__vector_126+0x1a8>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2376:	c0 91 0a 23 	lds	r28, 0x230A
    237a:	d0 91 0b 23 	lds	r29, 0x230B

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    237e:	80 91 47 23 	lds	r24, 0x2347
    2382:	90 91 48 23 	lds	r25, 0x2348
    2386:	00 91 f4 22 	lds	r16, 0x22F4
    238a:	10 91 f5 22 	lds	r17, 0x22F5
    238e:	98 01       	movw	r18, r16
    2390:	2c 0f       	add	r18, r28
    2392:	3d 1f       	adc	r19, r29
    2394:	82 17       	cp	r24, r18
    2396:	93 07       	cpc	r25, r19
    2398:	18 f4       	brcc	.+6      	; 0x23a0 <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    239a:	ec 01       	movw	r28, r24
    239c:	c0 1b       	sub	r28, r16
    239e:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    23a0:	80 91 45 23 	lds	r24, 0x2345
    23a4:	90 91 46 23 	lds	r25, 0x2346
    23a8:	ae 01       	movw	r20, r28
    23aa:	64 eb       	ldi	r22, 0xB4	; 180
    23ac:	72 e2       	ldi	r23, 0x22	; 34
    23ae:	80 0f       	add	r24, r16
    23b0:	91 1f       	adc	r25, r17
    23b2:	32 d4       	rcall	.+2148   	; 0x2c18 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    23b4:	0c 0f       	add	r16, r28
    23b6:	1d 1f       	adc	r17, r29
    23b8:	00 93 f4 22 	sts	0x22F4, r16
    23bc:	10 93 f5 22 	sts	0x22F5, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    23c0:	c0 34       	cpi	r28, 0x40	; 64
    23c2:	d1 05       	cpc	r29, r1
    23c4:	69 f4       	brne	.+26     	; 0x23e0 <__vector_126+0x126>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    23c6:	80 91 f6 22 	lds	r24, 0x22F6
    23ca:	90 91 f7 22 	lds	r25, 0x22F7
    23ce:	80 0f       	add	r24, r16
    23d0:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    23d2:	20 91 43 23 	lds	r18, 0x2343
    23d6:	30 91 44 23 	lds	r19, 0x2344
    23da:	82 17       	cp	r24, r18
    23dc:	93 07       	cpc	r25, r19
    23de:	88 f0       	brcs	.+34     	; 0x2402 <__vector_126+0x148>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    23e0:	00 93 47 23 	sts	0x2347, r16
    23e4:	10 93 48 23 	sts	0x2348, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    23e8:	e0 91 4b 23 	lds	r30, 0x234B
    23ec:	f0 91 4c 23 	lds	r31, 0x234C
    23f0:	30 97       	sbiw	r30, 0x00	; 0
    23f2:	29 f0       	breq	.+10     	; 0x23fe <__vector_126+0x144>
			if (!udd_g_ctrlreq.over_under_run()) {
    23f4:	09 95       	icall
    23f6:	81 11       	cpse	r24, r1
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <__vector_126+0x144>
				// Stall ZLP
				udd_ctrl_stall_data();
    23fa:	0d da       	rcall	.-3046   	; 0x1816 <udd_ctrl_stall_data>
    23fc:	32 c0       	rjmp	.+100    	; 0x2462 <__vector_126+0x1a8>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    23fe:	19 da       	rcall	.-3022   	; 0x1832 <udd_ctrl_send_zlp_in>
    2400:	30 c0       	rjmp	.+96     	; 0x2462 <__vector_126+0x1a8>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2402:	80 91 47 23 	lds	r24, 0x2347
    2406:	90 91 48 23 	lds	r25, 0x2348
    240a:	08 17       	cp	r16, r24
    240c:	19 07       	cpc	r17, r25
    240e:	f9 f4       	brne	.+62     	; 0x244e <__vector_126+0x194>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2410:	e0 91 4b 23 	lds	r30, 0x234B
    2414:	f0 91 4c 23 	lds	r31, 0x234C
    2418:	30 97       	sbiw	r30, 0x00	; 0
    241a:	11 f4       	brne	.+4      	; 0x2420 <__vector_126+0x166>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    241c:	fc d9       	rcall	.-3080   	; 0x1816 <udd_ctrl_stall_data>
    241e:	21 c0       	rjmp	.+66     	; 0x2462 <__vector_126+0x1a8>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2420:	09 95       	icall
    2422:	81 11       	cpse	r24, r1
    2424:	02 c0       	rjmp	.+4      	; 0x242a <__vector_126+0x170>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2426:	f7 d9       	rcall	.-3090   	; 0x1816 <udd_ctrl_stall_data>
    2428:	1c c0       	rjmp	.+56     	; 0x2462 <__vector_126+0x1a8>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    242a:	20 91 f6 22 	lds	r18, 0x22F6
    242e:	30 91 f7 22 	lds	r19, 0x22F7
    2432:	80 91 f4 22 	lds	r24, 0x22F4
    2436:	90 91 f5 22 	lds	r25, 0x22F5
    243a:	82 0f       	add	r24, r18
    243c:	93 1f       	adc	r25, r19
    243e:	80 93 f6 22 	sts	0x22F6, r24
    2442:	90 93 f7 22 	sts	0x22F7, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2446:	10 92 f4 22 	sts	0x22F4, r1
    244a:	10 92 f5 22 	sts	0x22F5, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    244e:	e8 e0       	ldi	r30, 0x08	; 8
    2450:	f3 e2       	ldi	r31, 0x23	; 35
    2452:	02 e0       	ldi	r16, 0x02	; 2
    2454:	06 93       	lac	Z, r16
    2456:	05 c0       	rjmp	.+10     	; 0x2462 <__vector_126+0x1a8>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2458:	80 38       	cpi	r24, 0x80	; 128
    245a:	11 f4       	brne	.+4      	; 0x2460 <__vector_126+0x1a6>
		udd_ctrl_in_sent();
    245c:	00 da       	rcall	.-3072   	; 0x185e <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <__vector_126+0x1a8>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2460:	1b db       	rcall	.-2506   	; 0x1a98 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2462:	ff 91       	pop	r31
    2464:	ef 91       	pop	r30
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	bf 91       	pop	r27
    246c:	af 91       	pop	r26
    246e:	9f 91       	pop	r25
    2470:	8f 91       	pop	r24
    2472:	7f 91       	pop	r23
    2474:	6f 91       	pop	r22
    2476:	5f 91       	pop	r21
    2478:	4f 91       	pop	r20
    247a:	3f 91       	pop	r19
    247c:	2f 91       	pop	r18
    247e:	1f 91       	pop	r17
    2480:	0f 91       	pop	r16
    2482:	0f 90       	pop	r0
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	0f 90       	pop	r0
    2488:	1f 90       	pop	r1
    248a:	18 95       	reti

0000248c <sysclk_init>:
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	00 d0       	rcall	.+0      	; 0x2492 <sysclk_init+0x6>
    2492:	00 d0       	rcall	.+0      	; 0x2494 <sysclk_init+0x8>
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	8f ef       	ldi	r24, 0xFF	; 255
    249a:	80 93 70 00 	sts	0x0070, r24
    249e:	80 93 71 00 	sts	0x0071, r24
    24a2:	80 93 72 00 	sts	0x0072, r24
    24a6:	80 93 73 00 	sts	0x0073, r24
    24aa:	80 93 74 00 	sts	0x0074, r24
    24ae:	80 93 75 00 	sts	0x0075, r24
    24b2:	80 93 76 00 	sts	0x0076, r24
    24b6:	6c e1       	ldi	r22, 0x1C	; 28
    24b8:	70 e0       	ldi	r23, 0x00	; 0
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	5b d0       	rcall	.+182    	; 0x2574 <nvm_read_byte>
    24be:	8a 83       	std	Y+2, r24	; 0x02
    24c0:	6d e1       	ldi	r22, 0x1D	; 29
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	82 e0       	ldi	r24, 0x02	; 2
    24c6:	56 d0       	rcall	.+172    	; 0x2574 <nvm_read_byte>
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	9a 81       	ldd	r25, Y+2	; 0x02
    24ce:	01 96       	adiw	r24, 0x01	; 1
    24d0:	21 f4       	brne	.+8      	; 0x24da <sysclk_init+0x4e>
    24d2:	80 e4       	ldi	r24, 0x40	; 64
    24d4:	93 e2       	ldi	r25, 0x23	; 35
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	9a 83       	std	Y+2, r25	; 0x02
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	8b 83       	std	Y+3, r24	; 0x03
    24e0:	9c 83       	std	Y+4, r25	; 0x04
    24e2:	e0 e6       	ldi	r30, 0x60	; 96
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	82 83       	std	Z+2, r24	; 0x02
    24e8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ea:	83 83       	std	Z+3, r24	; 0x03
    24ec:	8f b7       	in	r24, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	e0 e5       	ldi	r30, 0x50	; 80
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	90 81       	ld	r25, Z
    24f6:	92 60       	ori	r25, 0x02	; 2
    24f8:	90 83       	st	Z, r25
    24fa:	8f bf       	out	0x3f, r24	; 63
    24fc:	81 81       	ldd	r24, Z+1	; 0x01
    24fe:	81 ff       	sbrs	r24, 1
    2500:	fd cf       	rjmp	.-6      	; 0x24fc <sysclk_init+0x70>
    2502:	61 e0       	ldi	r22, 0x01	; 1
    2504:	80 e4       	ldi	r24, 0x40	; 64
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	3f d0       	rcall	.+126    	; 0x2588 <ccp_write_io>
    250a:	8f b7       	in	r24, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	e0 e5       	ldi	r30, 0x50	; 80
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	90 81       	ld	r25, Z
    2514:	9e 7f       	andi	r25, 0xFE	; 254
    2516:	90 83       	st	Z, r25
    2518:	8f bf       	out	0x3f, r24	; 63
    251a:	24 96       	adiw	r28, 0x04	; 4
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	08 95       	ret

00002526 <sysclk_enable_module>:
    2526:	9f b7       	in	r25, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	e8 2f       	mov	r30, r24
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	e0 59       	subi	r30, 0x90	; 144
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	60 95       	com	r22
    2534:	80 81       	ld	r24, Z
    2536:	68 23       	and	r22, r24
    2538:	60 83       	st	Z, r22
    253a:	9f bf       	out	0x3f, r25	; 63
    253c:	08 95       	ret

0000253e <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    253e:	86 30       	cpi	r24, 0x06	; 6
    2540:	11 f4       	brne	.+4      	; 0x2546 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    2542:	68 e1       	ldi	r22, 0x18	; 24
    2544:	01 c0       	rjmp	.+2      	; 0x2548 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    2546:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2548:	e0 e5       	ldi	r30, 0x50	; 80
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    254e:	81 fd       	sbrc	r24, 1
    2550:	09 c0       	rjmp	.+18     	; 0x2564 <sysclk_enable_usb+0x26>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2552:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2554:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2556:	90 81       	ld	r25, Z
    2558:	92 60       	ori	r25, 0x02	; 2
    255a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    255c:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    255e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2560:	81 ff       	sbrs	r24, 1
    2562:	fd cf       	rjmp	.-6      	; 0x255e <sysclk_enable_usb+0x20>
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    2564:	63 60       	ori	r22, 0x03	; 3
    2566:	84 e4       	ldi	r24, 0x44	; 68
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	0e d0       	rcall	.+28     	; 0x2588 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    256c:	60 e4       	ldi	r22, 0x40	; 64
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	da cf       	rjmp	.-76     	; 0x2526 <sysclk_enable_module>
    2572:	08 95       	ret

00002574 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2574:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    2578:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    257a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    257c:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    2580:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2582:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2586:	08 95       	ret

00002588 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2588:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    258a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    258c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    258e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2590:	60 83       	st	Z, r22
	ret                             // Return to caller
    2592:	08 95       	ret

00002594 <init_onepos>:

#include "../onepos.h"

void init_onepos(void)
{
	sysclk_init();
    2594:	7b df       	rcall	.-266    	; 0x248c <sysclk_init>
	
	#ifdef ENABLE_RTC
	// 	rtc_init();
	#endif
	#ifdef ENABLE_USB
		usb_init();
    2596:	43 d2       	rcall	.+1158   	; 0x2a1e <usb_init>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    2598:	e0 e4       	ldi	r30, 0x40	; 64
    259a:	f6 e0       	ldi	r31, 0x06	; 6
    259c:	88 e0       	ldi	r24, 0x08	; 8
    259e:	82 83       	std	Z+2, r24	; 0x02
    25a0:	94 e0       	ldi	r25, 0x04	; 4
    25a2:	92 83       	std	Z+2, r25	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    25a4:	a0 e0       	ldi	r26, 0x00	; 0
    25a6:	b6 e0       	ldi	r27, 0x06	; 6
    25a8:	20 e4       	ldi	r18, 0x40	; 64
    25aa:	11 96       	adiw	r26, 0x01	; 1
    25ac:	2c 93       	st	X, r18
    25ae:	11 97       	sbiw	r26, 0x01	; 1
    25b0:	30 e8       	ldi	r19, 0x80	; 128
    25b2:	11 96       	adiw	r26, 0x01	; 1
    25b4:	3c 93       	st	X, r19
    25b6:	a0 e2       	ldi	r26, 0x20	; 32
    25b8:	b6 e0       	ldi	r27, 0x06	; 6
    25ba:	41 e0       	ldi	r20, 0x01	; 1
    25bc:	11 96       	adiw	r26, 0x01	; 1
    25be:	4c 93       	st	X, r20
    25c0:	11 97       	sbiw	r26, 0x01	; 1
    25c2:	42 e0       	ldi	r20, 0x02	; 2
    25c4:	11 96       	adiw	r26, 0x01	; 1
    25c6:	4c 93       	st	X, r20
    25c8:	a0 e8       	ldi	r26, 0x80	; 128
    25ca:	b6 e0       	ldi	r27, 0x06	; 6
    25cc:	11 96       	adiw	r26, 0x01	; 1
    25ce:	4c 93       	st	X, r20
    25d0:	11 97       	sbiw	r26, 0x01	; 1
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    25d2:	12 96       	adiw	r26, 0x02	; 2
    25d4:	9c 93       	st	X, r25
    25d6:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    25d8:	11 96       	adiw	r26, 0x01	; 1
    25da:	8c 93       	st	X, r24
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    25dc:	a0 e6       	ldi	r26, 0x60	; 96
    25de:	b6 e0       	ldi	r27, 0x06	; 6
    25e0:	12 96       	adiw	r26, 0x02	; 2
    25e2:	9c 93       	st	X, r25
    25e4:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    25e6:	11 96       	adiw	r26, 0x01	; 1
    25e8:	8c 93       	st	X, r24
    25ea:	80 e1       	ldi	r24, 0x10	; 16
    25ec:	81 83       	std	Z+1, r24	; 0x01
    25ee:	80 e2       	ldi	r24, 0x20	; 32
    25f0:	81 83       	std	Z+1, r24	; 0x01
    25f2:	31 83       	std	Z+1, r19	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    25f4:	22 83       	std	Z+2, r18	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    25f6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    25f8:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    25fa:	e6 e5       	ldi	r30, 0x56	; 86
    25fc:	f6 e0       	ldi	r31, 0x06	; 6
    25fe:	90 81       	ld	r25, Z
    2600:	97 70       	andi	r25, 0x07	; 7
    2602:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    2604:	90 81       	ld	r25, Z
    2606:	90 61       	ori	r25, 0x10	; 16
    2608:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    260a:	8f bf       	out	0x3f, r24	; 63
    260c:	08 95       	ret

0000260e <init_animation>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    260e:	80 e4       	ldi	r24, 0x40	; 64
    2610:	e0 e0       	ldi	r30, 0x00	; 0
    2612:	f6 e0       	ldi	r31, 0x06	; 6
    2614:	85 83       	std	Z+5, r24	; 0x05
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	92 ee       	ldi	r25, 0xE2	; 226
    261a:	a4 e0       	ldi	r26, 0x04	; 4
    261c:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	a1 09       	sbc	r26, r1
    2622:	b1 09       	sbc	r27, r1
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	a1 05       	cpc	r26, r1
    2628:	b1 05       	cpc	r27, r1
    262a:	c9 f7       	brne	.-14     	; 0x261e <init_animation+0x10>
    262c:	80 e8       	ldi	r24, 0x80	; 128
    262e:	e0 e0       	ldi	r30, 0x00	; 0
    2630:	f6 e0       	ldi	r31, 0x06	; 6
    2632:	85 83       	std	Z+5, r24	; 0x05
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	92 ee       	ldi	r25, 0xE2	; 226
    2638:	a4 e0       	ldi	r26, 0x04	; 4
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	a1 09       	sbc	r26, r1
    2640:	b1 09       	sbc	r27, r1
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	a1 05       	cpc	r26, r1
    2646:	b1 05       	cpc	r27, r1
    2648:	c9 f7       	brne	.-14     	; 0x263c <init_animation+0x2e>
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	e0 e2       	ldi	r30, 0x20	; 32
    264e:	f6 e0       	ldi	r31, 0x06	; 6
    2650:	85 83       	std	Z+5, r24	; 0x05
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	92 ee       	ldi	r25, 0xE2	; 226
    2656:	a4 e0       	ldi	r26, 0x04	; 4
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	a1 09       	sbc	r26, r1
    265e:	b1 09       	sbc	r27, r1
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	a1 05       	cpc	r26, r1
    2664:	b1 05       	cpc	r27, r1
    2666:	c9 f7       	brne	.-14     	; 0x265a <init_animation+0x4c>
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	e0 e2       	ldi	r30, 0x20	; 32
    266c:	f6 e0       	ldi	r31, 0x06	; 6
    266e:	85 83       	std	Z+5, r24	; 0x05
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	92 ee       	ldi	r25, 0xE2	; 226
    2674:	a4 e0       	ldi	r26, 0x04	; 4
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	a1 09       	sbc	r26, r1
    267c:	b1 09       	sbc	r27, r1
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	a1 05       	cpc	r26, r1
    2682:	b1 05       	cpc	r27, r1
    2684:	c9 f7       	brne	.-14     	; 0x2678 <init_animation+0x6a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2686:	80 e4       	ldi	r24, 0x40	; 64
    2688:	e0 e0       	ldi	r30, 0x00	; 0
    268a:	f6 e0       	ldi	r31, 0x06	; 6
    268c:	86 83       	std	Z+6, r24	; 0x06
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	92 ee       	ldi	r25, 0xE2	; 226
    2692:	a4 e0       	ldi	r26, 0x04	; 4
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	a1 09       	sbc	r26, r1
    269a:	b1 09       	sbc	r27, r1
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	a1 05       	cpc	r26, r1
    26a0:	b1 05       	cpc	r27, r1
    26a2:	c9 f7       	brne	.-14     	; 0x2696 <init_animation+0x88>
    26a4:	80 e8       	ldi	r24, 0x80	; 128
    26a6:	e0 e0       	ldi	r30, 0x00	; 0
    26a8:	f6 e0       	ldi	r31, 0x06	; 6
    26aa:	86 83       	std	Z+6, r24	; 0x06
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	92 ee       	ldi	r25, 0xE2	; 226
    26b0:	a4 e0       	ldi	r26, 0x04	; 4
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	a1 09       	sbc	r26, r1
    26b8:	b1 09       	sbc	r27, r1
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	a1 05       	cpc	r26, r1
    26be:	b1 05       	cpc	r27, r1
    26c0:	c9 f7       	brne	.-14     	; 0x26b4 <init_animation+0xa6>
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	e0 e2       	ldi	r30, 0x20	; 32
    26c6:	f6 e0       	ldi	r31, 0x06	; 6
    26c8:	86 83       	std	Z+6, r24	; 0x06
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	92 ee       	ldi	r25, 0xE2	; 226
    26ce:	a4 e0       	ldi	r26, 0x04	; 4
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	a1 09       	sbc	r26, r1
    26d6:	b1 09       	sbc	r27, r1
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	a1 05       	cpc	r26, r1
    26dc:	b1 05       	cpc	r27, r1
    26de:	c9 f7       	brne	.-14     	; 0x26d2 <init_animation+0xc4>
    26e0:	82 e0       	ldi	r24, 0x02	; 2
    26e2:	e0 e2       	ldi	r30, 0x20	; 32
    26e4:	f6 e0       	ldi	r31, 0x06	; 6
    26e6:	86 83       	std	Z+6, r24	; 0x06
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	92 ee       	ldi	r25, 0xE2	; 226
    26ec:	a4 e0       	ldi	r26, 0x04	; 4
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	a1 09       	sbc	r26, r1
    26f4:	b1 09       	sbc	r27, r1
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	a1 05       	cpc	r26, r1
    26fa:	b1 05       	cpc	r27, r1
    26fc:	c9 f7       	brne	.-14     	; 0x26f0 <init_animation+0xe2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    26fe:	80 e4       	ldi	r24, 0x40	; 64
    2700:	e0 e0       	ldi	r30, 0x00	; 0
    2702:	f6 e0       	ldi	r31, 0x06	; 6
    2704:	85 83       	std	Z+5, r24	; 0x05
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	94 ec       	ldi	r25, 0xC4	; 196
    270a:	a9 e0       	ldi	r26, 0x09	; 9
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	a1 09       	sbc	r26, r1
    2712:	b1 09       	sbc	r27, r1
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	a1 05       	cpc	r26, r1
    2718:	b1 05       	cpc	r27, r1
    271a:	c9 f7       	brne	.-14     	; 0x270e <init_animation+0x100>
    271c:	80 e8       	ldi	r24, 0x80	; 128
    271e:	e0 e0       	ldi	r30, 0x00	; 0
    2720:	f6 e0       	ldi	r31, 0x06	; 6
    2722:	85 83       	std	Z+5, r24	; 0x05
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	94 ec       	ldi	r25, 0xC4	; 196
    2728:	a9 e0       	ldi	r26, 0x09	; 9
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	a1 09       	sbc	r26, r1
    2730:	b1 09       	sbc	r27, r1
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	a1 05       	cpc	r26, r1
    2736:	b1 05       	cpc	r27, r1
    2738:	c9 f7       	brne	.-14     	; 0x272c <init_animation+0x11e>
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	e0 e2       	ldi	r30, 0x20	; 32
    273e:	f6 e0       	ldi	r31, 0x06	; 6
    2740:	85 83       	std	Z+5, r24	; 0x05
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	94 ec       	ldi	r25, 0xC4	; 196
    2746:	a9 e0       	ldi	r26, 0x09	; 9
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	a1 09       	sbc	r26, r1
    274e:	b1 09       	sbc	r27, r1
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	a1 05       	cpc	r26, r1
    2754:	b1 05       	cpc	r27, r1
    2756:	c9 f7       	brne	.-14     	; 0x274a <init_animation+0x13c>
    2758:	82 e0       	ldi	r24, 0x02	; 2
    275a:	e0 e2       	ldi	r30, 0x20	; 32
    275c:	f6 e0       	ldi	r31, 0x06	; 6
    275e:	85 83       	std	Z+5, r24	; 0x05
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	94 ec       	ldi	r25, 0xC4	; 196
    2764:	a9 e0       	ldi	r26, 0x09	; 9
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	a1 09       	sbc	r26, r1
    276c:	b1 09       	sbc	r27, r1
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	a1 05       	cpc	r26, r1
    2772:	b1 05       	cpc	r27, r1
    2774:	c9 f7       	brne	.-14     	; 0x2768 <init_animation+0x15a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2776:	80 e4       	ldi	r24, 0x40	; 64
    2778:	e0 e0       	ldi	r30, 0x00	; 0
    277a:	f6 e0       	ldi	r31, 0x06	; 6
    277c:	86 83       	std	Z+6, r24	; 0x06
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	94 ec       	ldi	r25, 0xC4	; 196
    2782:	a9 e0       	ldi	r26, 0x09	; 9
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	a1 09       	sbc	r26, r1
    278a:	b1 09       	sbc	r27, r1
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	a1 05       	cpc	r26, r1
    2790:	b1 05       	cpc	r27, r1
    2792:	c9 f7       	brne	.-14     	; 0x2786 <init_animation+0x178>
    2794:	80 e8       	ldi	r24, 0x80	; 128
    2796:	e0 e0       	ldi	r30, 0x00	; 0
    2798:	f6 e0       	ldi	r31, 0x06	; 6
    279a:	86 83       	std	Z+6, r24	; 0x06
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	94 ec       	ldi	r25, 0xC4	; 196
    27a0:	a9 e0       	ldi	r26, 0x09	; 9
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	a1 09       	sbc	r26, r1
    27a8:	b1 09       	sbc	r27, r1
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	a1 05       	cpc	r26, r1
    27ae:	b1 05       	cpc	r27, r1
    27b0:	c9 f7       	brne	.-14     	; 0x27a4 <init_animation+0x196>
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	e0 e2       	ldi	r30, 0x20	; 32
    27b6:	f6 e0       	ldi	r31, 0x06	; 6
    27b8:	86 83       	std	Z+6, r24	; 0x06
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	94 ec       	ldi	r25, 0xC4	; 196
    27be:	a9 e0       	ldi	r26, 0x09	; 9
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	a1 09       	sbc	r26, r1
    27c6:	b1 09       	sbc	r27, r1
    27c8:	00 97       	sbiw	r24, 0x00	; 0
    27ca:	a1 05       	cpc	r26, r1
    27cc:	b1 05       	cpc	r27, r1
    27ce:	c9 f7       	brne	.-14     	; 0x27c2 <init_animation+0x1b4>
    27d0:	82 e0       	ldi	r24, 0x02	; 2
    27d2:	e0 e2       	ldi	r30, 0x20	; 32
    27d4:	f6 e0       	ldi	r31, 0x06	; 6
    27d6:	86 83       	std	Z+6, r24	; 0x06
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	94 ec       	ldi	r25, 0xC4	; 196
    27dc:	a9 e0       	ldi	r26, 0x09	; 9
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	a1 09       	sbc	r26, r1
    27e4:	b1 09       	sbc	r27, r1
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	a1 05       	cpc	r26, r1
    27ea:	b1 05       	cpc	r27, r1
    27ec:	c9 f7       	brne	.-14     	; 0x27e0 <init_animation+0x1d2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    27ee:	80 e4       	ldi	r24, 0x40	; 64
    27f0:	e0 e0       	ldi	r30, 0x00	; 0
    27f2:	f6 e0       	ldi	r31, 0x06	; 6
    27f4:	85 83       	std	Z+5, r24	; 0x05
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	96 ea       	ldi	r25, 0xA6	; 166
    27fa:	ae e0       	ldi	r26, 0x0E	; 14
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	a1 09       	sbc	r26, r1
    2802:	b1 09       	sbc	r27, r1
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	a1 05       	cpc	r26, r1
    2808:	b1 05       	cpc	r27, r1
    280a:	c9 f7       	brne	.-14     	; 0x27fe <init_animation+0x1f0>
    280c:	80 e8       	ldi	r24, 0x80	; 128
    280e:	e0 e0       	ldi	r30, 0x00	; 0
    2810:	f6 e0       	ldi	r31, 0x06	; 6
    2812:	85 83       	std	Z+5, r24	; 0x05
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	96 ea       	ldi	r25, 0xA6	; 166
    2818:	ae e0       	ldi	r26, 0x0E	; 14
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	a1 09       	sbc	r26, r1
    2820:	b1 09       	sbc	r27, r1
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	a1 05       	cpc	r26, r1
    2826:	b1 05       	cpc	r27, r1
    2828:	c9 f7       	brne	.-14     	; 0x281c <init_animation+0x20e>
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	e0 e2       	ldi	r30, 0x20	; 32
    282e:	f6 e0       	ldi	r31, 0x06	; 6
    2830:	85 83       	std	Z+5, r24	; 0x05
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	96 ea       	ldi	r25, 0xA6	; 166
    2836:	ae e0       	ldi	r26, 0x0E	; 14
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	a1 09       	sbc	r26, r1
    283e:	b1 09       	sbc	r27, r1
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	a1 05       	cpc	r26, r1
    2844:	b1 05       	cpc	r27, r1
    2846:	c9 f7       	brne	.-14     	; 0x283a <init_animation+0x22c>
    2848:	82 e0       	ldi	r24, 0x02	; 2
    284a:	e0 e2       	ldi	r30, 0x20	; 32
    284c:	f6 e0       	ldi	r31, 0x06	; 6
    284e:	85 83       	std	Z+5, r24	; 0x05
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	96 ea       	ldi	r25, 0xA6	; 166
    2854:	ae e0       	ldi	r26, 0x0E	; 14
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	a1 09       	sbc	r26, r1
    285c:	b1 09       	sbc	r27, r1
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	a1 05       	cpc	r26, r1
    2862:	b1 05       	cpc	r27, r1
    2864:	c9 f7       	brne	.-14     	; 0x2858 <init_animation+0x24a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2866:	80 e4       	ldi	r24, 0x40	; 64
    2868:	e0 e0       	ldi	r30, 0x00	; 0
    286a:	f6 e0       	ldi	r31, 0x06	; 6
    286c:	86 83       	std	Z+6, r24	; 0x06
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	96 ea       	ldi	r25, 0xA6	; 166
    2872:	ae e0       	ldi	r26, 0x0E	; 14
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	a1 09       	sbc	r26, r1
    287a:	b1 09       	sbc	r27, r1
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	a1 05       	cpc	r26, r1
    2880:	b1 05       	cpc	r27, r1
    2882:	c9 f7       	brne	.-14     	; 0x2876 <init_animation+0x268>
    2884:	80 e8       	ldi	r24, 0x80	; 128
    2886:	e0 e0       	ldi	r30, 0x00	; 0
    2888:	f6 e0       	ldi	r31, 0x06	; 6
    288a:	86 83       	std	Z+6, r24	; 0x06
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	96 ea       	ldi	r25, 0xA6	; 166
    2890:	ae e0       	ldi	r26, 0x0E	; 14
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	a1 09       	sbc	r26, r1
    2898:	b1 09       	sbc	r27, r1
    289a:	00 97       	sbiw	r24, 0x00	; 0
    289c:	a1 05       	cpc	r26, r1
    289e:	b1 05       	cpc	r27, r1
    28a0:	c9 f7       	brne	.-14     	; 0x2894 <init_animation+0x286>
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	e0 e2       	ldi	r30, 0x20	; 32
    28a6:	f6 e0       	ldi	r31, 0x06	; 6
    28a8:	86 83       	std	Z+6, r24	; 0x06
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	96 ea       	ldi	r25, 0xA6	; 166
    28ae:	ae e0       	ldi	r26, 0x0E	; 14
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	a1 09       	sbc	r26, r1
    28b6:	b1 09       	sbc	r27, r1
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	a1 05       	cpc	r26, r1
    28bc:	b1 05       	cpc	r27, r1
    28be:	c9 f7       	brne	.-14     	; 0x28b2 <init_animation+0x2a4>
    28c0:	82 e0       	ldi	r24, 0x02	; 2
    28c2:	e0 e2       	ldi	r30, 0x20	; 32
    28c4:	f6 e0       	ldi	r31, 0x06	; 6
    28c6:	86 83       	std	Z+6, r24	; 0x06
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	96 ea       	ldi	r25, 0xA6	; 166
    28cc:	ae e0       	ldi	r26, 0x0E	; 14
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	a1 09       	sbc	r26, r1
    28d4:	b1 09       	sbc	r27, r1
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	a1 05       	cpc	r26, r1
    28da:	b1 05       	cpc	r27, r1
    28dc:	c9 f7       	brne	.-14     	; 0x28d0 <init_animation+0x2c2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    28de:	80 e4       	ldi	r24, 0x40	; 64
    28e0:	e0 e0       	ldi	r30, 0x00	; 0
    28e2:	f6 e0       	ldi	r31, 0x06	; 6
    28e4:	85 83       	std	Z+5, r24	; 0x05
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	98 e8       	ldi	r25, 0x88	; 136
    28ea:	a3 e1       	ldi	r26, 0x13	; 19
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	a1 09       	sbc	r26, r1
    28f2:	b1 09       	sbc	r27, r1
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	a1 05       	cpc	r26, r1
    28f8:	b1 05       	cpc	r27, r1
    28fa:	c9 f7       	brne	.-14     	; 0x28ee <init_animation+0x2e0>
    28fc:	80 e8       	ldi	r24, 0x80	; 128
    28fe:	e0 e0       	ldi	r30, 0x00	; 0
    2900:	f6 e0       	ldi	r31, 0x06	; 6
    2902:	85 83       	std	Z+5, r24	; 0x05
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	98 e8       	ldi	r25, 0x88	; 136
    2908:	a3 e1       	ldi	r26, 0x13	; 19
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	a1 09       	sbc	r26, r1
    2910:	b1 09       	sbc	r27, r1
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	a1 05       	cpc	r26, r1
    2916:	b1 05       	cpc	r27, r1
    2918:	c9 f7       	brne	.-14     	; 0x290c <init_animation+0x2fe>
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	e0 e2       	ldi	r30, 0x20	; 32
    291e:	f6 e0       	ldi	r31, 0x06	; 6
    2920:	85 83       	std	Z+5, r24	; 0x05
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	98 e8       	ldi	r25, 0x88	; 136
    2926:	a3 e1       	ldi	r26, 0x13	; 19
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	a1 09       	sbc	r26, r1
    292e:	b1 09       	sbc	r27, r1
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	a1 05       	cpc	r26, r1
    2934:	b1 05       	cpc	r27, r1
    2936:	c9 f7       	brne	.-14     	; 0x292a <init_animation+0x31c>
    2938:	82 e0       	ldi	r24, 0x02	; 2
    293a:	e0 e2       	ldi	r30, 0x20	; 32
    293c:	f6 e0       	ldi	r31, 0x06	; 6
    293e:	85 83       	std	Z+5, r24	; 0x05
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	98 e8       	ldi	r25, 0x88	; 136
    2944:	a3 e1       	ldi	r26, 0x13	; 19
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	a1 09       	sbc	r26, r1
    294c:	b1 09       	sbc	r27, r1
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	a1 05       	cpc	r26, r1
    2952:	b1 05       	cpc	r27, r1
    2954:	c9 f7       	brne	.-14     	; 0x2948 <init_animation+0x33a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2956:	80 e4       	ldi	r24, 0x40	; 64
    2958:	e0 e0       	ldi	r30, 0x00	; 0
    295a:	f6 e0       	ldi	r31, 0x06	; 6
    295c:	86 83       	std	Z+6, r24	; 0x06
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	98 e8       	ldi	r25, 0x88	; 136
    2962:	a3 e1       	ldi	r26, 0x13	; 19
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	a1 09       	sbc	r26, r1
    296a:	b1 09       	sbc	r27, r1
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	a1 05       	cpc	r26, r1
    2970:	b1 05       	cpc	r27, r1
    2972:	c9 f7       	brne	.-14     	; 0x2966 <init_animation+0x358>
    2974:	80 e8       	ldi	r24, 0x80	; 128
    2976:	e0 e0       	ldi	r30, 0x00	; 0
    2978:	f6 e0       	ldi	r31, 0x06	; 6
    297a:	86 83       	std	Z+6, r24	; 0x06
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	98 e8       	ldi	r25, 0x88	; 136
    2980:	a3 e1       	ldi	r26, 0x13	; 19
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	a1 09       	sbc	r26, r1
    2988:	b1 09       	sbc	r27, r1
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	a1 05       	cpc	r26, r1
    298e:	b1 05       	cpc	r27, r1
    2990:	c9 f7       	brne	.-14     	; 0x2984 <init_animation+0x376>
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	e0 e2       	ldi	r30, 0x20	; 32
    2996:	f6 e0       	ldi	r31, 0x06	; 6
    2998:	86 83       	std	Z+6, r24	; 0x06
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	98 e8       	ldi	r25, 0x88	; 136
    299e:	a3 e1       	ldi	r26, 0x13	; 19
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	a1 09       	sbc	r26, r1
    29a6:	b1 09       	sbc	r27, r1
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	a1 05       	cpc	r26, r1
    29ac:	b1 05       	cpc	r27, r1
    29ae:	c9 f7       	brne	.-14     	; 0x29a2 <init_animation+0x394>
    29b0:	82 e0       	ldi	r24, 0x02	; 2
    29b2:	e0 e2       	ldi	r30, 0x20	; 32
    29b4:	f6 e0       	ldi	r31, 0x06	; 6
    29b6:	86 83       	std	Z+6, r24	; 0x06
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	98 e8       	ldi	r25, 0x88	; 136
    29bc:	a3 e1       	ldi	r26, 0x13	; 19
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	a1 09       	sbc	r26, r1
    29c4:	b1 09       	sbc	r27, r1
    29c6:	00 97       	sbiw	r24, 0x00	; 0
    29c8:	a1 05       	cpc	r26, r1
    29ca:	b1 05       	cpc	r27, r1
    29cc:	c9 f7       	brne	.-14     	; 0x29c0 <init_animation+0x3b2>
	delay_ms(160);
	led3(OFF);
	delay_ms(160);
	led4(OFF);
	delay_ms(160);
    29ce:	08 95       	ret

000029d0 <usb_putchar_printf>:
	usb_putchar(*string++);
}


#ifdef PRINTF_USB
int usb_putchar_printf(char var, FILE *stream) {
    29d0:	cf 93       	push	r28
    29d2:	c8 2f       	mov	r28, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
    29d4:	8a 30       	cpi	r24, 0x0A	; 10
    29d6:	21 f4       	brne	.+8      	; 0x29e0 <usb_putchar_printf+0x10>
	
}

void usb_putchar(char a)
{
	udi_cdc_putc(a);
    29d8:	8d e0       	ldi	r24, 0x0D	; 13
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	0e 94 91 04 	call	0x922	; 0x922 <udi_cdc_putc>
    29e0:	8c 2f       	mov	r24, r28
    29e2:	99 27       	eor	r25, r25
    29e4:	87 fd       	sbrc	r24, 7
    29e6:	90 95       	com	r25
    29e8:	0e 94 91 04 	call	0x922	; 0x922 <udi_cdc_putc>
int usb_putchar_printf(char var, FILE *stream) {
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
	usb_putchar(var);
	return 0;
}
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	cf 91       	pop	r28
    29f2:	08 95       	ret

000029f4 <usb_getchar_scanf>:

int usb_getchar_scanf(FILE *stream)
{
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	8c 01       	movw	r16, r24
	return udi_cdc_getc();
}

int usb_is_rx_ready(void)
{
	return udi_cdc_is_rx_ready();
    29fe:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <udi_cdc_is_rx_ready>

int usb_getchar_scanf(FILE *stream)
{
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
    2a02:	88 23       	and	r24, r24
    2a04:	e1 f3       	breq	.-8      	; 0x29fe <usb_getchar_scanf+0xa>
	udi_cdc_putc(a);
}

char usb_getchar(void)
{
	return udi_cdc_getc();
    2a06:	0e 94 1c 04 	call	0x838	; 0x838 <udi_cdc_getc>
    2a0a:	ec 01       	movw	r28, r24
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
	u8Data=usb_getchar();
	//echo input data
	usb_putchar_printf(u8Data,stream);
    2a0c:	b8 01       	movw	r22, r16
    2a0e:	e0 df       	rcall	.-64     	; 0x29d0 <usb_putchar_printf>
	// Return received data
	return u8Data;
}
    2a10:	ce 01       	movw	r24, r28
    2a12:	99 27       	eor	r25, r25
    2a14:	df 91       	pop	r29
    2a16:	cf 91       	pop	r28
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	08 95       	ret

00002a1e <usb_init>:

#include "./../include/usb_serial.h"

void usb_init(void)
{
	irq_initialize_vectors();
    2a1e:	87 e0       	ldi	r24, 0x07	; 7
    2a20:	e0 ea       	ldi	r30, 0xA0	; 160
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    2a26:	78 94       	sei
	udc_start();
    2a28:	0e 94 7f 05 	call	0xafe	; 0xafe <udc_start>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    2a2c:	46 d9       	rcall	.-3444   	; 0x1cba <udd_attach>
	udc_attach();
	
	#ifdef PRINTF_USB
	// setup our stdio stream
	stdout = &mystdout;
    2a2e:	88 e9       	ldi	r24, 0x98	; 152
    2a30:	90 e2       	ldi	r25, 0x20	; 32
    2a32:	80 93 55 23 	sts	0x2355, r24
    2a36:	90 93 56 23 	sts	0x2356, r25
	stdin = &mystdout;
    2a3a:	80 93 53 23 	sts	0x2353, r24
    2a3e:	90 93 54 23 	sts	0x2354, r25
    2a42:	08 95       	ret

00002a44 <spi_init_module>:
#define USART_SERIAL_PARITY              USART_PMODE_DISABLED_gc
#define USART_SERIAL_STOP_BIT            false


void spi_init_module(void)
{
    2a44:	cf 92       	push	r12
    2a46:	df 92       	push	r13
    2a48:	ef 92       	push	r14
    2a4a:	ff 92       	push	r15
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	1f 92       	push	r1
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
	struct spi_device spi_device_conf = {
    2a5a:	84 e1       	ldi	r24, 0x14	; 20
    2a5c:	89 83       	std	Y+1, r24	; 0x01
		.id = UWB_CS
	};
	spi_master_init(&SPIC);
    2a5e:	80 ec       	ldi	r24, 0xC0	; 192
    2a60:	98 e0       	ldi	r25, 0x08	; 8
    2a62:	0e 94 23 01 	call	0x246	; 0x246 <spi_master_init>
	spi_master_setup_device(&SPIC, &spi_device_conf, SPI_MODE_0, 1000000, 0);
    2a66:	c1 2c       	mov	r12, r1
    2a68:	d1 2c       	mov	r13, r1
    2a6a:	76 01       	movw	r14, r12
    2a6c:	00 e4       	ldi	r16, 0x40	; 64
    2a6e:	12 e4       	ldi	r17, 0x42	; 66
    2a70:	2f e0       	ldi	r18, 0x0F	; 15
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e0       	ldi	r20, 0x00	; 0
    2a76:	be 01       	movw	r22, r28
    2a78:	6f 5f       	subi	r22, 0xFF	; 255
    2a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a7c:	80 ec       	ldi	r24, 0xC0	; 192
    2a7e:	98 e0       	ldi	r25, 0x08	; 8
    2a80:	0e 94 3c 01 	call	0x278	; 0x278 <spi_master_setup_device>
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
    2a84:	e0 ec       	ldi	r30, 0xC0	; 192
    2a86:	f8 e0       	ldi	r31, 0x08	; 8
    2a88:	80 81       	ld	r24, Z
    2a8a:	80 64       	ori	r24, 0x40	; 64
    2a8c:	80 83       	st	Z, r24
	spi_enable(&SPIC);
}
    2a8e:	0f 90       	pop	r0
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	1f 91       	pop	r17
    2a96:	0f 91       	pop	r16
    2a98:	ff 90       	pop	r15
    2a9a:	ef 90       	pop	r14
    2a9c:	df 90       	pop	r13
    2a9e:	cf 90       	pop	r12
    2aa0:	08 95       	ret

00002aa2 <main>:

int main (void)
{
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	2d 97       	sbiw	r28, 0x0d	; 13
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	de bf       	out	0x3e, r29	; 62
	init_onepos();
    2ab0:	71 dd       	rcall	.-1310   	; 0x2594 <init_onepos>
	spi_init_module();
    2ab2:	c8 df       	rcall	.-112    	; 0x2a44 <spi_init_module>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    2ab4:	80 91 aa 20 	lds	r24, 0x20AA
    2ab8:	8b 87       	std	Y+11, r24	; 0x0b
	usart_rs232_options.paritytype   = options->paritytype;
    2aba:	80 91 ab 20 	lds	r24, 0x20AB
    2abe:	8c 87       	std	Y+12, r24	; 0x0c
	usart_rs232_options.stopbits     = options->stopbits;
    2ac0:	80 91 ac 20 	lds	r24, 0x20AC
    2ac4:	8d 87       	std	Y+13, r24	; 0x0d
	usart_rs232_options.baudrate     = options->baudrate;
    2ac6:	80 91 a6 20 	lds	r24, 0x20A6
    2aca:	90 91 a7 20 	lds	r25, 0x20A7
    2ace:	a0 91 a8 20 	lds	r26, 0x20A8
    2ad2:	b0 91 a9 20 	lds	r27, 0x20A9
    2ad6:	8f 83       	std	Y+7, r24	; 0x07
    2ad8:	98 87       	std	Y+8, r25	; 0x08
    2ada:	a9 87       	std	Y+9, r26	; 0x09
    2adc:	ba 87       	std	Y+10, r27	; 0x0a
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    2ade:	60 e1       	ldi	r22, 0x10	; 16
    2ae0:	84 e0       	ldi	r24, 0x04	; 4
    2ae2:	21 dd       	rcall	.-1470   	; 0x2526 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    2ae4:	be 01       	movw	r22, r28
    2ae6:	69 5f       	subi	r22, 0xF9	; 249
    2ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aea:	80 ea       	ldi	r24, 0xA0	; 160
    2aec:	99 e0       	ldi	r25, 0x09	; 9
    2aee:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <usart_init_rs232>
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	usart_serial_init(USART_BLE, &BLE_SERIAL_OPTIONS);
	
	init_animation();
    2af2:	8d dd       	rcall	.-1254   	; 0x260e <init_animation>
	
	uint8_t data_send[1] = {0x00};
    2af4:	19 82       	std	Y+1, r1	; 0x01
	uint8_t data_receive[4];
	struct spi_device spi_device_conf = {
    2af6:	84 e1       	ldi	r24, 0x14	; 20
    2af8:	8e 83       	std	Y+6, r24	; 0x06
	for (;;) //spi test
	{
		spi_select_device(&SPIC, &spi_device_conf);
		spi_write_packet(&SPIC, data_send, 1);
		spi_read_packet(&SPIC, data_receive, 4);
		spi_deselect_device(&SPIC, &spi_device_conf);
    2afa:	91 2c       	mov	r9, r1
    2afc:	0f 2e       	mov	r0, r31
    2afe:	f2 e1       	ldi	r31, 0x12	; 18
    2b00:	af 2e       	mov	r10, r31
    2b02:	f0 2d       	mov	r31, r0
    2b04:	0f 2e       	mov	r0, r31
    2b06:	fa e7       	ldi	r31, 0x7A	; 122
    2b08:	bf 2e       	mov	r11, r31
    2b0a:	f0 2d       	mov	r31, r0
    2b0c:	c1 2c       	mov	r12, r1
		delay_ms(1000);
		printf("%#02X %#02X %#02X %#02X \n", data_receive[3], data_receive[2], data_receive[1], data_receive[0]);
    2b0e:	02 eb       	ldi	r16, 0xB2	; 178
    2b10:	10 e2       	ldi	r17, 0x20	; 32

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    2b12:	0f 2e       	mov	r0, r31
    2b14:	e1 2c       	mov	r14, r1
    2b16:	f6 e0       	ldi	r31, 0x06	; 6
    2b18:	ff 2e       	mov	r15, r31
    2b1a:	f0 2d       	mov	r31, r0
    2b1c:	68 94       	set
    2b1e:	dd 24       	eor	r13, r13
    2b20:	d6 f8       	bld	r13, 6
		.id = UWB_CS
	};
	
	for (;;) //spi test
	{
		spi_select_device(&SPIC, &spi_device_conf);
    2b22:	be 01       	movw	r22, r28
    2b24:	6a 5f       	subi	r22, 0xFA	; 250
    2b26:	7f 4f       	sbci	r23, 0xFF	; 255
    2b28:	80 ec       	ldi	r24, 0xC0	; 192
    2b2a:	98 e0       	ldi	r25, 0x08	; 8
    2b2c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_select_device>
		spi_write_packet(&SPIC, data_send, 1);
    2b30:	41 e0       	ldi	r20, 0x01	; 1
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	be 01       	movw	r22, r28
    2b36:	6f 5f       	subi	r22, 0xFF	; 255
    2b38:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3a:	80 ec       	ldi	r24, 0xC0	; 192
    2b3c:	98 e0       	ldi	r25, 0x08	; 8
    2b3e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <spi_write_packet>
		spi_read_packet(&SPIC, data_receive, 4);
    2b42:	44 e0       	ldi	r20, 0x04	; 4
    2b44:	50 e0       	ldi	r21, 0x00	; 0
    2b46:	be 01       	movw	r22, r28
    2b48:	6e 5f       	subi	r22, 0xFE	; 254
    2b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4c:	80 ec       	ldi	r24, 0xC0	; 192
    2b4e:	98 e0       	ldi	r25, 0x08	; 8
    2b50:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spi_read_packet>
		spi_deselect_device(&SPIC, &spi_device_conf);
    2b54:	be 01       	movw	r22, r28
    2b56:	6a 5f       	subi	r22, 0xFA	; 250
    2b58:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5a:	80 ec       	ldi	r24, 0xC0	; 192
    2b5c:	98 e0       	ldi	r25, 0x08	; 8
    2b5e:	0e 94 93 01 	call	0x326	; 0x326 <spi_deselect_device>
    2b62:	89 2d       	mov	r24, r9
    2b64:	9a 2d       	mov	r25, r10
    2b66:	ab 2d       	mov	r26, r11
    2b68:	bc 2d       	mov	r27, r12
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	a1 09       	sbc	r26, r1
    2b6e:	b1 09       	sbc	r27, r1
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	a1 05       	cpc	r26, r1
    2b74:	b1 05       	cpc	r27, r1
    2b76:	c9 f7       	brne	.-14     	; 0x2b6a <main+0xc8>
		delay_ms(1000);
		printf("%#02X %#02X %#02X %#02X \n", data_receive[3], data_receive[2], data_receive[1], data_receive[0]);
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	1f 92       	push	r1
    2b7c:	8f 93       	push	r24
    2b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b80:	1f 92       	push	r1
    2b82:	8f 93       	push	r24
    2b84:	8c 81       	ldd	r24, Y+4	; 0x04
    2b86:	1f 92       	push	r1
    2b88:	8f 93       	push	r24
    2b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8c:	1f 92       	push	r1
    2b8e:	8f 93       	push	r24
    2b90:	1f 93       	push	r17
    2b92:	0f 93       	push	r16
    2b94:	4a d0       	rcall	.+148    	; 0x2c2a <printf>
    2b96:	f7 01       	movw	r30, r14
    2b98:	d7 82       	std	Z+7, r13	; 0x07
    2b9a:	cd bf       	out	0x3d, r28	; 61
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	c1 cf       	rjmp	.-126    	; 0x2b22 <main+0x80>

00002ba0 <__udivmodhi4>:
    2ba0:	aa 1b       	sub	r26, r26
    2ba2:	bb 1b       	sub	r27, r27
    2ba4:	51 e1       	ldi	r21, 0x11	; 17
    2ba6:	07 c0       	rjmp	.+14     	; 0x2bb6 <__udivmodhi4_ep>

00002ba8 <__udivmodhi4_loop>:
    2ba8:	aa 1f       	adc	r26, r26
    2baa:	bb 1f       	adc	r27, r27
    2bac:	a6 17       	cp	r26, r22
    2bae:	b7 07       	cpc	r27, r23
    2bb0:	10 f0       	brcs	.+4      	; 0x2bb6 <__udivmodhi4_ep>
    2bb2:	a6 1b       	sub	r26, r22
    2bb4:	b7 0b       	sbc	r27, r23

00002bb6 <__udivmodhi4_ep>:
    2bb6:	88 1f       	adc	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	5a 95       	dec	r21
    2bbc:	a9 f7       	brne	.-22     	; 0x2ba8 <__udivmodhi4_loop>
    2bbe:	80 95       	com	r24
    2bc0:	90 95       	com	r25
    2bc2:	bc 01       	movw	r22, r24
    2bc4:	cd 01       	movw	r24, r26
    2bc6:	08 95       	ret

00002bc8 <__udivmodsi4>:
    2bc8:	a1 e2       	ldi	r26, 0x21	; 33
    2bca:	1a 2e       	mov	r1, r26
    2bcc:	aa 1b       	sub	r26, r26
    2bce:	bb 1b       	sub	r27, r27
    2bd0:	fd 01       	movw	r30, r26
    2bd2:	0d c0       	rjmp	.+26     	; 0x2bee <__udivmodsi4_ep>

00002bd4 <__udivmodsi4_loop>:
    2bd4:	aa 1f       	adc	r26, r26
    2bd6:	bb 1f       	adc	r27, r27
    2bd8:	ee 1f       	adc	r30, r30
    2bda:	ff 1f       	adc	r31, r31
    2bdc:	a2 17       	cp	r26, r18
    2bde:	b3 07       	cpc	r27, r19
    2be0:	e4 07       	cpc	r30, r20
    2be2:	f5 07       	cpc	r31, r21
    2be4:	20 f0       	brcs	.+8      	; 0x2bee <__udivmodsi4_ep>
    2be6:	a2 1b       	sub	r26, r18
    2be8:	b3 0b       	sbc	r27, r19
    2bea:	e4 0b       	sbc	r30, r20
    2bec:	f5 0b       	sbc	r31, r21

00002bee <__udivmodsi4_ep>:
    2bee:	66 1f       	adc	r22, r22
    2bf0:	77 1f       	adc	r23, r23
    2bf2:	88 1f       	adc	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	1a 94       	dec	r1
    2bf8:	69 f7       	brne	.-38     	; 0x2bd4 <__udivmodsi4_loop>
    2bfa:	60 95       	com	r22
    2bfc:	70 95       	com	r23
    2bfe:	80 95       	com	r24
    2c00:	90 95       	com	r25
    2c02:	9b 01       	movw	r18, r22
    2c04:	ac 01       	movw	r20, r24
    2c06:	bd 01       	movw	r22, r26
    2c08:	cf 01       	movw	r24, r30
    2c0a:	08 95       	ret

00002c0c <__tablejump2__>:
    2c0c:	ee 0f       	add	r30, r30
    2c0e:	ff 1f       	adc	r31, r31

00002c10 <__tablejump__>:
    2c10:	05 90       	lpm	r0, Z+
    2c12:	f4 91       	lpm	r31, Z
    2c14:	e0 2d       	mov	r30, r0
    2c16:	09 94       	ijmp

00002c18 <memcpy>:
    2c18:	fb 01       	movw	r30, r22
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <memcpy+0xa>
    2c1e:	01 90       	ld	r0, Z+
    2c20:	0d 92       	st	X+, r0
    2c22:	41 50       	subi	r20, 0x01	; 1
    2c24:	50 40       	sbci	r21, 0x00	; 0
    2c26:	d8 f7       	brcc	.-10     	; 0x2c1e <memcpy+0x6>
    2c28:	08 95       	ret

00002c2a <printf>:
    2c2a:	a0 e0       	ldi	r26, 0x00	; 0
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	ea e1       	ldi	r30, 0x1A	; 26
    2c30:	f6 e1       	ldi	r31, 0x16	; 22
    2c32:	85 c2       	rjmp	.+1290   	; 0x313e <__prologue_saves__+0x20>
    2c34:	fe 01       	movw	r30, r28
    2c36:	35 96       	adiw	r30, 0x05	; 5
    2c38:	61 91       	ld	r22, Z+
    2c3a:	71 91       	ld	r23, Z+
    2c3c:	af 01       	movw	r20, r30
    2c3e:	80 91 55 23 	lds	r24, 0x2355
    2c42:	90 91 56 23 	lds	r25, 0x2356
    2c46:	02 d0       	rcall	.+4      	; 0x2c4c <vfprintf>
    2c48:	e2 e0       	ldi	r30, 0x02	; 2
    2c4a:	92 c2       	rjmp	.+1316   	; 0x3170 <__epilogue_restores__+0x20>

00002c4c <vfprintf>:
    2c4c:	ac e0       	ldi	r26, 0x0C	; 12
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	eb e2       	ldi	r30, 0x2B	; 43
    2c52:	f6 e1       	ldi	r31, 0x16	; 22
    2c54:	64 c2       	rjmp	.+1224   	; 0x311e <__prologue_saves__>
    2c56:	7c 01       	movw	r14, r24
    2c58:	6b 01       	movw	r12, r22
    2c5a:	8a 01       	movw	r16, r20
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	16 82       	std	Z+6, r1	; 0x06
    2c60:	17 82       	std	Z+7, r1	; 0x07
    2c62:	83 81       	ldd	r24, Z+3	; 0x03
    2c64:	81 ff       	sbrs	r24, 1
    2c66:	b0 c1       	rjmp	.+864    	; 0x2fc8 <vfprintf+0x37c>
    2c68:	ce 01       	movw	r24, r28
    2c6a:	01 96       	adiw	r24, 0x01	; 1
    2c6c:	4c 01       	movw	r8, r24
    2c6e:	f7 01       	movw	r30, r14
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	f6 01       	movw	r30, r12
    2c74:	93 fd       	sbrc	r25, 3
    2c76:	85 91       	lpm	r24, Z+
    2c78:	93 ff       	sbrs	r25, 3
    2c7a:	81 91       	ld	r24, Z+
    2c7c:	6f 01       	movw	r12, r30
    2c7e:	88 23       	and	r24, r24
    2c80:	09 f4       	brne	.+2      	; 0x2c84 <vfprintf+0x38>
    2c82:	9e c1       	rjmp	.+828    	; 0x2fc0 <vfprintf+0x374>
    2c84:	85 32       	cpi	r24, 0x25	; 37
    2c86:	39 f4       	brne	.+14     	; 0x2c96 <vfprintf+0x4a>
    2c88:	93 fd       	sbrc	r25, 3
    2c8a:	85 91       	lpm	r24, Z+
    2c8c:	93 ff       	sbrs	r25, 3
    2c8e:	81 91       	ld	r24, Z+
    2c90:	6f 01       	movw	r12, r30
    2c92:	85 32       	cpi	r24, 0x25	; 37
    2c94:	21 f4       	brne	.+8      	; 0x2c9e <vfprintf+0x52>
    2c96:	b7 01       	movw	r22, r14
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	b1 d1       	rcall	.+866    	; 0x2ffe <fputc>
    2c9c:	e8 cf       	rjmp	.-48     	; 0x2c6e <vfprintf+0x22>
    2c9e:	51 2c       	mov	r5, r1
    2ca0:	31 2c       	mov	r3, r1
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	20 32       	cpi	r18, 0x20	; 32
    2ca6:	a0 f4       	brcc	.+40     	; 0x2cd0 <vfprintf+0x84>
    2ca8:	8b 32       	cpi	r24, 0x2B	; 43
    2caa:	69 f0       	breq	.+26     	; 0x2cc6 <vfprintf+0x7a>
    2cac:	30 f4       	brcc	.+12     	; 0x2cba <vfprintf+0x6e>
    2cae:	80 32       	cpi	r24, 0x20	; 32
    2cb0:	59 f0       	breq	.+22     	; 0x2cc8 <vfprintf+0x7c>
    2cb2:	83 32       	cpi	r24, 0x23	; 35
    2cb4:	69 f4       	brne	.+26     	; 0x2cd0 <vfprintf+0x84>
    2cb6:	20 61       	ori	r18, 0x10	; 16
    2cb8:	2c c0       	rjmp	.+88     	; 0x2d12 <vfprintf+0xc6>
    2cba:	8d 32       	cpi	r24, 0x2D	; 45
    2cbc:	39 f0       	breq	.+14     	; 0x2ccc <vfprintf+0x80>
    2cbe:	80 33       	cpi	r24, 0x30	; 48
    2cc0:	39 f4       	brne	.+14     	; 0x2cd0 <vfprintf+0x84>
    2cc2:	21 60       	ori	r18, 0x01	; 1
    2cc4:	26 c0       	rjmp	.+76     	; 0x2d12 <vfprintf+0xc6>
    2cc6:	22 60       	ori	r18, 0x02	; 2
    2cc8:	24 60       	ori	r18, 0x04	; 4
    2cca:	23 c0       	rjmp	.+70     	; 0x2d12 <vfprintf+0xc6>
    2ccc:	28 60       	ori	r18, 0x08	; 8
    2cce:	21 c0       	rjmp	.+66     	; 0x2d12 <vfprintf+0xc6>
    2cd0:	27 fd       	sbrc	r18, 7
    2cd2:	27 c0       	rjmp	.+78     	; 0x2d22 <vfprintf+0xd6>
    2cd4:	30 ed       	ldi	r19, 0xD0	; 208
    2cd6:	38 0f       	add	r19, r24
    2cd8:	3a 30       	cpi	r19, 0x0A	; 10
    2cda:	78 f4       	brcc	.+30     	; 0x2cfa <vfprintf+0xae>
    2cdc:	26 ff       	sbrs	r18, 6
    2cde:	06 c0       	rjmp	.+12     	; 0x2cec <vfprintf+0xa0>
    2ce0:	fa e0       	ldi	r31, 0x0A	; 10
    2ce2:	5f 9e       	mul	r5, r31
    2ce4:	30 0d       	add	r19, r0
    2ce6:	11 24       	eor	r1, r1
    2ce8:	53 2e       	mov	r5, r19
    2cea:	13 c0       	rjmp	.+38     	; 0x2d12 <vfprintf+0xc6>
    2cec:	8a e0       	ldi	r24, 0x0A	; 10
    2cee:	38 9e       	mul	r3, r24
    2cf0:	30 0d       	add	r19, r0
    2cf2:	11 24       	eor	r1, r1
    2cf4:	33 2e       	mov	r3, r19
    2cf6:	20 62       	ori	r18, 0x20	; 32
    2cf8:	0c c0       	rjmp	.+24     	; 0x2d12 <vfprintf+0xc6>
    2cfa:	8e 32       	cpi	r24, 0x2E	; 46
    2cfc:	21 f4       	brne	.+8      	; 0x2d06 <vfprintf+0xba>
    2cfe:	26 fd       	sbrc	r18, 6
    2d00:	5f c1       	rjmp	.+702    	; 0x2fc0 <vfprintf+0x374>
    2d02:	20 64       	ori	r18, 0x40	; 64
    2d04:	06 c0       	rjmp	.+12     	; 0x2d12 <vfprintf+0xc6>
    2d06:	8c 36       	cpi	r24, 0x6C	; 108
    2d08:	11 f4       	brne	.+4      	; 0x2d0e <vfprintf+0xc2>
    2d0a:	20 68       	ori	r18, 0x80	; 128
    2d0c:	02 c0       	rjmp	.+4      	; 0x2d12 <vfprintf+0xc6>
    2d0e:	88 36       	cpi	r24, 0x68	; 104
    2d10:	41 f4       	brne	.+16     	; 0x2d22 <vfprintf+0xd6>
    2d12:	f6 01       	movw	r30, r12
    2d14:	93 fd       	sbrc	r25, 3
    2d16:	85 91       	lpm	r24, Z+
    2d18:	93 ff       	sbrs	r25, 3
    2d1a:	81 91       	ld	r24, Z+
    2d1c:	6f 01       	movw	r12, r30
    2d1e:	81 11       	cpse	r24, r1
    2d20:	c1 cf       	rjmp	.-126    	; 0x2ca4 <vfprintf+0x58>
    2d22:	98 2f       	mov	r25, r24
    2d24:	9f 7d       	andi	r25, 0xDF	; 223
    2d26:	95 54       	subi	r25, 0x45	; 69
    2d28:	93 30       	cpi	r25, 0x03	; 3
    2d2a:	28 f4       	brcc	.+10     	; 0x2d36 <vfprintf+0xea>
    2d2c:	0c 5f       	subi	r16, 0xFC	; 252
    2d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d30:	ff e3       	ldi	r31, 0x3F	; 63
    2d32:	f9 83       	std	Y+1, r31	; 0x01
    2d34:	0d c0       	rjmp	.+26     	; 0x2d50 <vfprintf+0x104>
    2d36:	83 36       	cpi	r24, 0x63	; 99
    2d38:	31 f0       	breq	.+12     	; 0x2d46 <vfprintf+0xfa>
    2d3a:	83 37       	cpi	r24, 0x73	; 115
    2d3c:	71 f0       	breq	.+28     	; 0x2d5a <vfprintf+0x10e>
    2d3e:	83 35       	cpi	r24, 0x53	; 83
    2d40:	09 f0       	breq	.+2      	; 0x2d44 <vfprintf+0xf8>
    2d42:	57 c0       	rjmp	.+174    	; 0x2df2 <vfprintf+0x1a6>
    2d44:	21 c0       	rjmp	.+66     	; 0x2d88 <vfprintf+0x13c>
    2d46:	f8 01       	movw	r30, r16
    2d48:	80 81       	ld	r24, Z
    2d4a:	89 83       	std	Y+1, r24	; 0x01
    2d4c:	0e 5f       	subi	r16, 0xFE	; 254
    2d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d50:	44 24       	eor	r4, r4
    2d52:	43 94       	inc	r4
    2d54:	51 2c       	mov	r5, r1
    2d56:	54 01       	movw	r10, r8
    2d58:	14 c0       	rjmp	.+40     	; 0x2d82 <vfprintf+0x136>
    2d5a:	38 01       	movw	r6, r16
    2d5c:	f2 e0       	ldi	r31, 0x02	; 2
    2d5e:	6f 0e       	add	r6, r31
    2d60:	71 1c       	adc	r7, r1
    2d62:	f8 01       	movw	r30, r16
    2d64:	a0 80       	ld	r10, Z
    2d66:	b1 80       	ldd	r11, Z+1	; 0x01
    2d68:	26 ff       	sbrs	r18, 6
    2d6a:	03 c0       	rjmp	.+6      	; 0x2d72 <vfprintf+0x126>
    2d6c:	65 2d       	mov	r22, r5
    2d6e:	70 e0       	ldi	r23, 0x00	; 0
    2d70:	02 c0       	rjmp	.+4      	; 0x2d76 <vfprintf+0x12a>
    2d72:	6f ef       	ldi	r22, 0xFF	; 255
    2d74:	7f ef       	ldi	r23, 0xFF	; 255
    2d76:	c5 01       	movw	r24, r10
    2d78:	2c 87       	std	Y+12, r18	; 0x0c
    2d7a:	36 d1       	rcall	.+620    	; 0x2fe8 <strnlen>
    2d7c:	2c 01       	movw	r4, r24
    2d7e:	83 01       	movw	r16, r6
    2d80:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d82:	2f 77       	andi	r18, 0x7F	; 127
    2d84:	22 2e       	mov	r2, r18
    2d86:	16 c0       	rjmp	.+44     	; 0x2db4 <vfprintf+0x168>
    2d88:	38 01       	movw	r6, r16
    2d8a:	f2 e0       	ldi	r31, 0x02	; 2
    2d8c:	6f 0e       	add	r6, r31
    2d8e:	71 1c       	adc	r7, r1
    2d90:	f8 01       	movw	r30, r16
    2d92:	a0 80       	ld	r10, Z
    2d94:	b1 80       	ldd	r11, Z+1	; 0x01
    2d96:	26 ff       	sbrs	r18, 6
    2d98:	03 c0       	rjmp	.+6      	; 0x2da0 <vfprintf+0x154>
    2d9a:	65 2d       	mov	r22, r5
    2d9c:	70 e0       	ldi	r23, 0x00	; 0
    2d9e:	02 c0       	rjmp	.+4      	; 0x2da4 <vfprintf+0x158>
    2da0:	6f ef       	ldi	r22, 0xFF	; 255
    2da2:	7f ef       	ldi	r23, 0xFF	; 255
    2da4:	c5 01       	movw	r24, r10
    2da6:	2c 87       	std	Y+12, r18	; 0x0c
    2da8:	14 d1       	rcall	.+552    	; 0x2fd2 <strnlen_P>
    2daa:	2c 01       	movw	r4, r24
    2dac:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dae:	20 68       	ori	r18, 0x80	; 128
    2db0:	22 2e       	mov	r2, r18
    2db2:	83 01       	movw	r16, r6
    2db4:	23 fc       	sbrc	r2, 3
    2db6:	19 c0       	rjmp	.+50     	; 0x2dea <vfprintf+0x19e>
    2db8:	83 2d       	mov	r24, r3
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	48 16       	cp	r4, r24
    2dbe:	59 06       	cpc	r5, r25
    2dc0:	a0 f4       	brcc	.+40     	; 0x2dea <vfprintf+0x19e>
    2dc2:	b7 01       	movw	r22, r14
    2dc4:	80 e2       	ldi	r24, 0x20	; 32
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	1a d1       	rcall	.+564    	; 0x2ffe <fputc>
    2dca:	3a 94       	dec	r3
    2dcc:	f5 cf       	rjmp	.-22     	; 0x2db8 <vfprintf+0x16c>
    2dce:	f5 01       	movw	r30, r10
    2dd0:	27 fc       	sbrc	r2, 7
    2dd2:	85 91       	lpm	r24, Z+
    2dd4:	27 fe       	sbrs	r2, 7
    2dd6:	81 91       	ld	r24, Z+
    2dd8:	5f 01       	movw	r10, r30
    2dda:	b7 01       	movw	r22, r14
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	0f d1       	rcall	.+542    	; 0x2ffe <fputc>
    2de0:	31 10       	cpse	r3, r1
    2de2:	3a 94       	dec	r3
    2de4:	f1 e0       	ldi	r31, 0x01	; 1
    2de6:	4f 1a       	sub	r4, r31
    2de8:	51 08       	sbc	r5, r1
    2dea:	41 14       	cp	r4, r1
    2dec:	51 04       	cpc	r5, r1
    2dee:	79 f7       	brne	.-34     	; 0x2dce <vfprintf+0x182>
    2df0:	de c0       	rjmp	.+444    	; 0x2fae <vfprintf+0x362>
    2df2:	84 36       	cpi	r24, 0x64	; 100
    2df4:	11 f0       	breq	.+4      	; 0x2dfa <vfprintf+0x1ae>
    2df6:	89 36       	cpi	r24, 0x69	; 105
    2df8:	31 f5       	brne	.+76     	; 0x2e46 <vfprintf+0x1fa>
    2dfa:	f8 01       	movw	r30, r16
    2dfc:	27 ff       	sbrs	r18, 7
    2dfe:	07 c0       	rjmp	.+14     	; 0x2e0e <vfprintf+0x1c2>
    2e00:	60 81       	ld	r22, Z
    2e02:	71 81       	ldd	r23, Z+1	; 0x01
    2e04:	82 81       	ldd	r24, Z+2	; 0x02
    2e06:	93 81       	ldd	r25, Z+3	; 0x03
    2e08:	0c 5f       	subi	r16, 0xFC	; 252
    2e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0c:	08 c0       	rjmp	.+16     	; 0x2e1e <vfprintf+0x1d2>
    2e0e:	60 81       	ld	r22, Z
    2e10:	71 81       	ldd	r23, Z+1	; 0x01
    2e12:	88 27       	eor	r24, r24
    2e14:	77 fd       	sbrc	r23, 7
    2e16:	80 95       	com	r24
    2e18:	98 2f       	mov	r25, r24
    2e1a:	0e 5f       	subi	r16, 0xFE	; 254
    2e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1e:	2f 76       	andi	r18, 0x6F	; 111
    2e20:	b2 2e       	mov	r11, r18
    2e22:	97 ff       	sbrs	r25, 7
    2e24:	09 c0       	rjmp	.+18     	; 0x2e38 <vfprintf+0x1ec>
    2e26:	90 95       	com	r25
    2e28:	80 95       	com	r24
    2e2a:	70 95       	com	r23
    2e2c:	61 95       	neg	r22
    2e2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e30:	8f 4f       	sbci	r24, 0xFF	; 255
    2e32:	9f 4f       	sbci	r25, 0xFF	; 255
    2e34:	20 68       	ori	r18, 0x80	; 128
    2e36:	b2 2e       	mov	r11, r18
    2e38:	2a e0       	ldi	r18, 0x0A	; 10
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	a4 01       	movw	r20, r8
    2e3e:	11 d1       	rcall	.+546    	; 0x3062 <__ultoa_invert>
    2e40:	a8 2e       	mov	r10, r24
    2e42:	a8 18       	sub	r10, r8
    2e44:	43 c0       	rjmp	.+134    	; 0x2ecc <vfprintf+0x280>
    2e46:	85 37       	cpi	r24, 0x75	; 117
    2e48:	29 f4       	brne	.+10     	; 0x2e54 <vfprintf+0x208>
    2e4a:	2f 7e       	andi	r18, 0xEF	; 239
    2e4c:	b2 2e       	mov	r11, r18
    2e4e:	2a e0       	ldi	r18, 0x0A	; 10
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	25 c0       	rjmp	.+74     	; 0x2e9e <vfprintf+0x252>
    2e54:	f2 2f       	mov	r31, r18
    2e56:	f9 7f       	andi	r31, 0xF9	; 249
    2e58:	bf 2e       	mov	r11, r31
    2e5a:	8f 36       	cpi	r24, 0x6F	; 111
    2e5c:	c1 f0       	breq	.+48     	; 0x2e8e <vfprintf+0x242>
    2e5e:	18 f4       	brcc	.+6      	; 0x2e66 <vfprintf+0x21a>
    2e60:	88 35       	cpi	r24, 0x58	; 88
    2e62:	79 f0       	breq	.+30     	; 0x2e82 <vfprintf+0x236>
    2e64:	ad c0       	rjmp	.+346    	; 0x2fc0 <vfprintf+0x374>
    2e66:	80 37       	cpi	r24, 0x70	; 112
    2e68:	19 f0       	breq	.+6      	; 0x2e70 <vfprintf+0x224>
    2e6a:	88 37       	cpi	r24, 0x78	; 120
    2e6c:	21 f0       	breq	.+8      	; 0x2e76 <vfprintf+0x22a>
    2e6e:	a8 c0       	rjmp	.+336    	; 0x2fc0 <vfprintf+0x374>
    2e70:	2f 2f       	mov	r18, r31
    2e72:	20 61       	ori	r18, 0x10	; 16
    2e74:	b2 2e       	mov	r11, r18
    2e76:	b4 fe       	sbrs	r11, 4
    2e78:	0d c0       	rjmp	.+26     	; 0x2e94 <vfprintf+0x248>
    2e7a:	8b 2d       	mov	r24, r11
    2e7c:	84 60       	ori	r24, 0x04	; 4
    2e7e:	b8 2e       	mov	r11, r24
    2e80:	09 c0       	rjmp	.+18     	; 0x2e94 <vfprintf+0x248>
    2e82:	24 ff       	sbrs	r18, 4
    2e84:	0a c0       	rjmp	.+20     	; 0x2e9a <vfprintf+0x24e>
    2e86:	9f 2f       	mov	r25, r31
    2e88:	96 60       	ori	r25, 0x06	; 6
    2e8a:	b9 2e       	mov	r11, r25
    2e8c:	06 c0       	rjmp	.+12     	; 0x2e9a <vfprintf+0x24e>
    2e8e:	28 e0       	ldi	r18, 0x08	; 8
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	05 c0       	rjmp	.+10     	; 0x2e9e <vfprintf+0x252>
    2e94:	20 e1       	ldi	r18, 0x10	; 16
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <vfprintf+0x252>
    2e9a:	20 e1       	ldi	r18, 0x10	; 16
    2e9c:	32 e0       	ldi	r19, 0x02	; 2
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	b7 fe       	sbrs	r11, 7
    2ea2:	07 c0       	rjmp	.+14     	; 0x2eb2 <vfprintf+0x266>
    2ea4:	60 81       	ld	r22, Z
    2ea6:	71 81       	ldd	r23, Z+1	; 0x01
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	0c 5f       	subi	r16, 0xFC	; 252
    2eae:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb0:	06 c0       	rjmp	.+12     	; 0x2ebe <vfprintf+0x272>
    2eb2:	60 81       	ld	r22, Z
    2eb4:	71 81       	ldd	r23, Z+1	; 0x01
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	0e 5f       	subi	r16, 0xFE	; 254
    2ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ebe:	a4 01       	movw	r20, r8
    2ec0:	d0 d0       	rcall	.+416    	; 0x3062 <__ultoa_invert>
    2ec2:	a8 2e       	mov	r10, r24
    2ec4:	a8 18       	sub	r10, r8
    2ec6:	fb 2d       	mov	r31, r11
    2ec8:	ff 77       	andi	r31, 0x7F	; 127
    2eca:	bf 2e       	mov	r11, r31
    2ecc:	b6 fe       	sbrs	r11, 6
    2ece:	0b c0       	rjmp	.+22     	; 0x2ee6 <vfprintf+0x29a>
    2ed0:	2b 2d       	mov	r18, r11
    2ed2:	2e 7f       	andi	r18, 0xFE	; 254
    2ed4:	a5 14       	cp	r10, r5
    2ed6:	50 f4       	brcc	.+20     	; 0x2eec <vfprintf+0x2a0>
    2ed8:	b4 fe       	sbrs	r11, 4
    2eda:	0a c0       	rjmp	.+20     	; 0x2ef0 <vfprintf+0x2a4>
    2edc:	b2 fc       	sbrc	r11, 2
    2ede:	08 c0       	rjmp	.+16     	; 0x2ef0 <vfprintf+0x2a4>
    2ee0:	2b 2d       	mov	r18, r11
    2ee2:	2e 7e       	andi	r18, 0xEE	; 238
    2ee4:	05 c0       	rjmp	.+10     	; 0x2ef0 <vfprintf+0x2a4>
    2ee6:	7a 2c       	mov	r7, r10
    2ee8:	2b 2d       	mov	r18, r11
    2eea:	03 c0       	rjmp	.+6      	; 0x2ef2 <vfprintf+0x2a6>
    2eec:	7a 2c       	mov	r7, r10
    2eee:	01 c0       	rjmp	.+2      	; 0x2ef2 <vfprintf+0x2a6>
    2ef0:	75 2c       	mov	r7, r5
    2ef2:	24 ff       	sbrs	r18, 4
    2ef4:	0d c0       	rjmp	.+26     	; 0x2f10 <vfprintf+0x2c4>
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	ea 0d       	add	r30, r10
    2efa:	f1 1d       	adc	r31, r1
    2efc:	80 81       	ld	r24, Z
    2efe:	80 33       	cpi	r24, 0x30	; 48
    2f00:	11 f4       	brne	.+4      	; 0x2f06 <vfprintf+0x2ba>
    2f02:	29 7e       	andi	r18, 0xE9	; 233
    2f04:	09 c0       	rjmp	.+18     	; 0x2f18 <vfprintf+0x2cc>
    2f06:	22 ff       	sbrs	r18, 2
    2f08:	06 c0       	rjmp	.+12     	; 0x2f16 <vfprintf+0x2ca>
    2f0a:	73 94       	inc	r7
    2f0c:	73 94       	inc	r7
    2f0e:	04 c0       	rjmp	.+8      	; 0x2f18 <vfprintf+0x2cc>
    2f10:	82 2f       	mov	r24, r18
    2f12:	86 78       	andi	r24, 0x86	; 134
    2f14:	09 f0       	breq	.+2      	; 0x2f18 <vfprintf+0x2cc>
    2f16:	73 94       	inc	r7
    2f18:	23 fd       	sbrc	r18, 3
    2f1a:	12 c0       	rjmp	.+36     	; 0x2f40 <vfprintf+0x2f4>
    2f1c:	20 ff       	sbrs	r18, 0
    2f1e:	06 c0       	rjmp	.+12     	; 0x2f2c <vfprintf+0x2e0>
    2f20:	5a 2c       	mov	r5, r10
    2f22:	73 14       	cp	r7, r3
    2f24:	18 f4       	brcc	.+6      	; 0x2f2c <vfprintf+0x2e0>
    2f26:	53 0c       	add	r5, r3
    2f28:	57 18       	sub	r5, r7
    2f2a:	73 2c       	mov	r7, r3
    2f2c:	73 14       	cp	r7, r3
    2f2e:	60 f4       	brcc	.+24     	; 0x2f48 <vfprintf+0x2fc>
    2f30:	b7 01       	movw	r22, r14
    2f32:	80 e2       	ldi	r24, 0x20	; 32
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	2c 87       	std	Y+12, r18	; 0x0c
    2f38:	62 d0       	rcall	.+196    	; 0x2ffe <fputc>
    2f3a:	73 94       	inc	r7
    2f3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f3e:	f6 cf       	rjmp	.-20     	; 0x2f2c <vfprintf+0x2e0>
    2f40:	73 14       	cp	r7, r3
    2f42:	10 f4       	brcc	.+4      	; 0x2f48 <vfprintf+0x2fc>
    2f44:	37 18       	sub	r3, r7
    2f46:	01 c0       	rjmp	.+2      	; 0x2f4a <vfprintf+0x2fe>
    2f48:	31 2c       	mov	r3, r1
    2f4a:	24 ff       	sbrs	r18, 4
    2f4c:	11 c0       	rjmp	.+34     	; 0x2f70 <vfprintf+0x324>
    2f4e:	b7 01       	movw	r22, r14
    2f50:	80 e3       	ldi	r24, 0x30	; 48
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	2c 87       	std	Y+12, r18	; 0x0c
    2f56:	53 d0       	rcall	.+166    	; 0x2ffe <fputc>
    2f58:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f5a:	22 ff       	sbrs	r18, 2
    2f5c:	16 c0       	rjmp	.+44     	; 0x2f8a <vfprintf+0x33e>
    2f5e:	21 ff       	sbrs	r18, 1
    2f60:	03 c0       	rjmp	.+6      	; 0x2f68 <vfprintf+0x31c>
    2f62:	88 e5       	ldi	r24, 0x58	; 88
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <vfprintf+0x320>
    2f68:	88 e7       	ldi	r24, 0x78	; 120
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	b7 01       	movw	r22, r14
    2f6e:	0c c0       	rjmp	.+24     	; 0x2f88 <vfprintf+0x33c>
    2f70:	82 2f       	mov	r24, r18
    2f72:	86 78       	andi	r24, 0x86	; 134
    2f74:	51 f0       	breq	.+20     	; 0x2f8a <vfprintf+0x33e>
    2f76:	21 fd       	sbrc	r18, 1
    2f78:	02 c0       	rjmp	.+4      	; 0x2f7e <vfprintf+0x332>
    2f7a:	80 e2       	ldi	r24, 0x20	; 32
    2f7c:	01 c0       	rjmp	.+2      	; 0x2f80 <vfprintf+0x334>
    2f7e:	8b e2       	ldi	r24, 0x2B	; 43
    2f80:	27 fd       	sbrc	r18, 7
    2f82:	8d e2       	ldi	r24, 0x2D	; 45
    2f84:	b7 01       	movw	r22, r14
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	3a d0       	rcall	.+116    	; 0x2ffe <fputc>
    2f8a:	a5 14       	cp	r10, r5
    2f8c:	30 f4       	brcc	.+12     	; 0x2f9a <vfprintf+0x34e>
    2f8e:	b7 01       	movw	r22, r14
    2f90:	80 e3       	ldi	r24, 0x30	; 48
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	34 d0       	rcall	.+104    	; 0x2ffe <fputc>
    2f96:	5a 94       	dec	r5
    2f98:	f8 cf       	rjmp	.-16     	; 0x2f8a <vfprintf+0x33e>
    2f9a:	aa 94       	dec	r10
    2f9c:	f4 01       	movw	r30, r8
    2f9e:	ea 0d       	add	r30, r10
    2fa0:	f1 1d       	adc	r31, r1
    2fa2:	80 81       	ld	r24, Z
    2fa4:	b7 01       	movw	r22, r14
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	2a d0       	rcall	.+84     	; 0x2ffe <fputc>
    2faa:	a1 10       	cpse	r10, r1
    2fac:	f6 cf       	rjmp	.-20     	; 0x2f9a <vfprintf+0x34e>
    2fae:	33 20       	and	r3, r3
    2fb0:	09 f4       	brne	.+2      	; 0x2fb4 <vfprintf+0x368>
    2fb2:	5d ce       	rjmp	.-838    	; 0x2c6e <vfprintf+0x22>
    2fb4:	b7 01       	movw	r22, r14
    2fb6:	80 e2       	ldi	r24, 0x20	; 32
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	21 d0       	rcall	.+66     	; 0x2ffe <fputc>
    2fbc:	3a 94       	dec	r3
    2fbe:	f7 cf       	rjmp	.-18     	; 0x2fae <vfprintf+0x362>
    2fc0:	f7 01       	movw	r30, r14
    2fc2:	86 81       	ldd	r24, Z+6	; 0x06
    2fc4:	97 81       	ldd	r25, Z+7	; 0x07
    2fc6:	02 c0       	rjmp	.+4      	; 0x2fcc <vfprintf+0x380>
    2fc8:	8f ef       	ldi	r24, 0xFF	; 255
    2fca:	9f ef       	ldi	r25, 0xFF	; 255
    2fcc:	2c 96       	adiw	r28, 0x0c	; 12
    2fce:	e2 e1       	ldi	r30, 0x12	; 18
    2fd0:	bf c0       	rjmp	.+382    	; 0x3150 <__epilogue_restores__>

00002fd2 <strnlen_P>:
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	05 90       	lpm	r0, Z+
    2fd6:	61 50       	subi	r22, 0x01	; 1
    2fd8:	70 40       	sbci	r23, 0x00	; 0
    2fda:	01 10       	cpse	r0, r1
    2fdc:	d8 f7       	brcc	.-10     	; 0x2fd4 <strnlen_P+0x2>
    2fde:	80 95       	com	r24
    2fe0:	90 95       	com	r25
    2fe2:	8e 0f       	add	r24, r30
    2fe4:	9f 1f       	adc	r25, r31
    2fe6:	08 95       	ret

00002fe8 <strnlen>:
    2fe8:	fc 01       	movw	r30, r24
    2fea:	61 50       	subi	r22, 0x01	; 1
    2fec:	70 40       	sbci	r23, 0x00	; 0
    2fee:	01 90       	ld	r0, Z+
    2ff0:	01 10       	cpse	r0, r1
    2ff2:	d8 f7       	brcc	.-10     	; 0x2fea <strnlen+0x2>
    2ff4:	80 95       	com	r24
    2ff6:	90 95       	com	r25
    2ff8:	8e 0f       	add	r24, r30
    2ffa:	9f 1f       	adc	r25, r31
    2ffc:	08 95       	ret

00002ffe <fputc>:
    2ffe:	0f 93       	push	r16
    3000:	1f 93       	push	r17
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
    3006:	18 2f       	mov	r17, r24
    3008:	09 2f       	mov	r16, r25
    300a:	eb 01       	movw	r28, r22
    300c:	8b 81       	ldd	r24, Y+3	; 0x03
    300e:	81 fd       	sbrc	r24, 1
    3010:	03 c0       	rjmp	.+6      	; 0x3018 <__stack+0x19>
    3012:	8f ef       	ldi	r24, 0xFF	; 255
    3014:	9f ef       	ldi	r25, 0xFF	; 255
    3016:	20 c0       	rjmp	.+64     	; 0x3058 <__stack+0x59>
    3018:	82 ff       	sbrs	r24, 2
    301a:	10 c0       	rjmp	.+32     	; 0x303c <__stack+0x3d>
    301c:	4e 81       	ldd	r20, Y+6	; 0x06
    301e:	5f 81       	ldd	r21, Y+7	; 0x07
    3020:	2c 81       	ldd	r18, Y+4	; 0x04
    3022:	3d 81       	ldd	r19, Y+5	; 0x05
    3024:	42 17       	cp	r20, r18
    3026:	53 07       	cpc	r21, r19
    3028:	7c f4       	brge	.+30     	; 0x3048 <__stack+0x49>
    302a:	e8 81       	ld	r30, Y
    302c:	f9 81       	ldd	r31, Y+1	; 0x01
    302e:	9f 01       	movw	r18, r30
    3030:	2f 5f       	subi	r18, 0xFF	; 255
    3032:	3f 4f       	sbci	r19, 0xFF	; 255
    3034:	28 83       	st	Y, r18
    3036:	39 83       	std	Y+1, r19	; 0x01
    3038:	10 83       	st	Z, r17
    303a:	06 c0       	rjmp	.+12     	; 0x3048 <__stack+0x49>
    303c:	e8 85       	ldd	r30, Y+8	; 0x08
    303e:	f9 85       	ldd	r31, Y+9	; 0x09
    3040:	81 2f       	mov	r24, r17
    3042:	09 95       	icall
    3044:	89 2b       	or	r24, r25
    3046:	29 f7       	brne	.-54     	; 0x3012 <__stack+0x13>
    3048:	2e 81       	ldd	r18, Y+6	; 0x06
    304a:	3f 81       	ldd	r19, Y+7	; 0x07
    304c:	2f 5f       	subi	r18, 0xFF	; 255
    304e:	3f 4f       	sbci	r19, 0xFF	; 255
    3050:	2e 83       	std	Y+6, r18	; 0x06
    3052:	3f 83       	std	Y+7, r19	; 0x07
    3054:	81 2f       	mov	r24, r17
    3056:	90 2f       	mov	r25, r16
    3058:	df 91       	pop	r29
    305a:	cf 91       	pop	r28
    305c:	1f 91       	pop	r17
    305e:	0f 91       	pop	r16
    3060:	08 95       	ret

00003062 <__ultoa_invert>:
    3062:	fa 01       	movw	r30, r20
    3064:	aa 27       	eor	r26, r26
    3066:	28 30       	cpi	r18, 0x08	; 8
    3068:	51 f1       	breq	.+84     	; 0x30be <__ultoa_invert+0x5c>
    306a:	20 31       	cpi	r18, 0x10	; 16
    306c:	81 f1       	breq	.+96     	; 0x30ce <__ultoa_invert+0x6c>
    306e:	e8 94       	clt
    3070:	6f 93       	push	r22
    3072:	6e 7f       	andi	r22, 0xFE	; 254
    3074:	6e 5f       	subi	r22, 0xFE	; 254
    3076:	7f 4f       	sbci	r23, 0xFF	; 255
    3078:	8f 4f       	sbci	r24, 0xFF	; 255
    307a:	9f 4f       	sbci	r25, 0xFF	; 255
    307c:	af 4f       	sbci	r26, 0xFF	; 255
    307e:	b1 e0       	ldi	r27, 0x01	; 1
    3080:	3e d0       	rcall	.+124    	; 0x30fe <__ultoa_invert+0x9c>
    3082:	b4 e0       	ldi	r27, 0x04	; 4
    3084:	3c d0       	rcall	.+120    	; 0x30fe <__ultoa_invert+0x9c>
    3086:	67 0f       	add	r22, r23
    3088:	78 1f       	adc	r23, r24
    308a:	89 1f       	adc	r24, r25
    308c:	9a 1f       	adc	r25, r26
    308e:	a1 1d       	adc	r26, r1
    3090:	68 0f       	add	r22, r24
    3092:	79 1f       	adc	r23, r25
    3094:	8a 1f       	adc	r24, r26
    3096:	91 1d       	adc	r25, r1
    3098:	a1 1d       	adc	r26, r1
    309a:	6a 0f       	add	r22, r26
    309c:	71 1d       	adc	r23, r1
    309e:	81 1d       	adc	r24, r1
    30a0:	91 1d       	adc	r25, r1
    30a2:	a1 1d       	adc	r26, r1
    30a4:	20 d0       	rcall	.+64     	; 0x30e6 <__ultoa_invert+0x84>
    30a6:	09 f4       	brne	.+2      	; 0x30aa <__ultoa_invert+0x48>
    30a8:	68 94       	set
    30aa:	3f 91       	pop	r19
    30ac:	2a e0       	ldi	r18, 0x0A	; 10
    30ae:	26 9f       	mul	r18, r22
    30b0:	11 24       	eor	r1, r1
    30b2:	30 19       	sub	r19, r0
    30b4:	30 5d       	subi	r19, 0xD0	; 208
    30b6:	31 93       	st	Z+, r19
    30b8:	de f6       	brtc	.-74     	; 0x3070 <__ultoa_invert+0xe>
    30ba:	cf 01       	movw	r24, r30
    30bc:	08 95       	ret
    30be:	46 2f       	mov	r20, r22
    30c0:	47 70       	andi	r20, 0x07	; 7
    30c2:	40 5d       	subi	r20, 0xD0	; 208
    30c4:	41 93       	st	Z+, r20
    30c6:	b3 e0       	ldi	r27, 0x03	; 3
    30c8:	0f d0       	rcall	.+30     	; 0x30e8 <__ultoa_invert+0x86>
    30ca:	c9 f7       	brne	.-14     	; 0x30be <__ultoa_invert+0x5c>
    30cc:	f6 cf       	rjmp	.-20     	; 0x30ba <__ultoa_invert+0x58>
    30ce:	46 2f       	mov	r20, r22
    30d0:	4f 70       	andi	r20, 0x0F	; 15
    30d2:	40 5d       	subi	r20, 0xD0	; 208
    30d4:	4a 33       	cpi	r20, 0x3A	; 58
    30d6:	18 f0       	brcs	.+6      	; 0x30de <__ultoa_invert+0x7c>
    30d8:	49 5d       	subi	r20, 0xD9	; 217
    30da:	31 fd       	sbrc	r19, 1
    30dc:	40 52       	subi	r20, 0x20	; 32
    30de:	41 93       	st	Z+, r20
    30e0:	02 d0       	rcall	.+4      	; 0x30e6 <__ultoa_invert+0x84>
    30e2:	a9 f7       	brne	.-22     	; 0x30ce <__ultoa_invert+0x6c>
    30e4:	ea cf       	rjmp	.-44     	; 0x30ba <__ultoa_invert+0x58>
    30e6:	b4 e0       	ldi	r27, 0x04	; 4
    30e8:	a6 95       	lsr	r26
    30ea:	97 95       	ror	r25
    30ec:	87 95       	ror	r24
    30ee:	77 95       	ror	r23
    30f0:	67 95       	ror	r22
    30f2:	ba 95       	dec	r27
    30f4:	c9 f7       	brne	.-14     	; 0x30e8 <__ultoa_invert+0x86>
    30f6:	00 97       	sbiw	r24, 0x00	; 0
    30f8:	61 05       	cpc	r22, r1
    30fa:	71 05       	cpc	r23, r1
    30fc:	08 95       	ret
    30fe:	9b 01       	movw	r18, r22
    3100:	ac 01       	movw	r20, r24
    3102:	0a 2e       	mov	r0, r26
    3104:	06 94       	lsr	r0
    3106:	57 95       	ror	r21
    3108:	47 95       	ror	r20
    310a:	37 95       	ror	r19
    310c:	27 95       	ror	r18
    310e:	ba 95       	dec	r27
    3110:	c9 f7       	brne	.-14     	; 0x3104 <__ultoa_invert+0xa2>
    3112:	62 0f       	add	r22, r18
    3114:	73 1f       	adc	r23, r19
    3116:	84 1f       	adc	r24, r20
    3118:	95 1f       	adc	r25, r21
    311a:	a0 1d       	adc	r26, r0
    311c:	08 95       	ret

0000311e <__prologue_saves__>:
    311e:	2f 92       	push	r2
    3120:	3f 92       	push	r3
    3122:	4f 92       	push	r4
    3124:	5f 92       	push	r5
    3126:	6f 92       	push	r6
    3128:	7f 92       	push	r7
    312a:	8f 92       	push	r8
    312c:	9f 92       	push	r9
    312e:	af 92       	push	r10
    3130:	bf 92       	push	r11
    3132:	cf 92       	push	r12
    3134:	df 92       	push	r13
    3136:	ef 92       	push	r14
    3138:	ff 92       	push	r15
    313a:	0f 93       	push	r16
    313c:	1f 93       	push	r17
    313e:	cf 93       	push	r28
    3140:	df 93       	push	r29
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62
    3146:	ca 1b       	sub	r28, r26
    3148:	db 0b       	sbc	r29, r27
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	09 94       	ijmp

00003150 <__epilogue_restores__>:
    3150:	2a 88       	ldd	r2, Y+18	; 0x12
    3152:	39 88       	ldd	r3, Y+17	; 0x11
    3154:	48 88       	ldd	r4, Y+16	; 0x10
    3156:	5f 84       	ldd	r5, Y+15	; 0x0f
    3158:	6e 84       	ldd	r6, Y+14	; 0x0e
    315a:	7d 84       	ldd	r7, Y+13	; 0x0d
    315c:	8c 84       	ldd	r8, Y+12	; 0x0c
    315e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3160:	aa 84       	ldd	r10, Y+10	; 0x0a
    3162:	b9 84       	ldd	r11, Y+9	; 0x09
    3164:	c8 84       	ldd	r12, Y+8	; 0x08
    3166:	df 80       	ldd	r13, Y+7	; 0x07
    3168:	ee 80       	ldd	r14, Y+6	; 0x06
    316a:	fd 80       	ldd	r15, Y+5	; 0x05
    316c:	0c 81       	ldd	r16, Y+4	; 0x04
    316e:	1b 81       	ldd	r17, Y+3	; 0x03
    3170:	aa 81       	ldd	r26, Y+2	; 0x02
    3172:	b9 81       	ldd	r27, Y+1	; 0x01
    3174:	ce 0f       	add	r28, r30
    3176:	d1 1d       	adc	r29, r1
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	ed 01       	movw	r28, r26
    317e:	08 95       	ret

00003180 <_exit>:
    3180:	f8 94       	cli

00003182 <__stop_program>:
    3182:	ff cf       	rjmp	.-2      	; 0x3182 <__stop_program>
